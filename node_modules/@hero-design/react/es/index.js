import * as React from 'react';
import React__default, { useMemo, useLayoutEffect, useState, useEffect, useCallback, forwardRef, createContext, useRef, useContext, memo, cloneElement, useReducer, Component, Children, Fragment, isValidElement, createRef } from 'react';
import styled, { useTheme, keyframes, css as css$2, ThemeContext } from 'styled-components';
import { Link } from 'react-router-dom';
import * as ReactDOM from 'react-dom';
import ReactDOM__default, { createPortal } from 'react-dom';

function _typeof$1(obj) {
  "@babel/helpers - typeof";

  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof$1(obj);
}
function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper$1(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var isNonEmptyArray = function isNonEmptyArray(arr) {
  return arr.length > 0;
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

const hexCharacters = 'a-f\\d';
const match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;
const match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;
const nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');
const validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');
var hexRgb = (hex, options = {}) => {
  if (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {
    throw new TypeError('Expected a valid hex string');
  }
  hex = hex.replace(/^#/, '');
  let alphaFromHex = 1;
  if (hex.length === 8) {
    alphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;
    hex = hex.slice(0, 6);
  }
  if (hex.length === 4) {
    alphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;
    hex = hex.slice(0, 3);
  }
  if (hex.length === 3) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  const number = Number.parseInt(hex, 16);
  const red = number >> 16;
  const green = number >> 8 & 255;
  const blue = number & 255;
  const alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;
  if (options.format === 'array') {
    return [red, green, blue, alpha];
  }
  if (options.format === 'css') {
    const alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;
    return `rgb(${red} ${green} ${blue}${alphaString})`;
  }
  return {
    red,
    green,
    blue,
    alpha
  };
};

var colorName = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
const pattern$8 = /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\b$/;
var hexRe$1 = new RegExp(pattern$8, 'i');
const float$1 = '-?\\d*(?:\\.\\d+)';
const number$1$1 = `(${float$1}?)`;
const percentage$1 = `(${float$1}?%)`;
const numberOrPercentage$1 = `(${float$1}?%?)`;
const pattern$1$1 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*,
    \\s*${percentage$1}\\s*,
    \\s*${percentage$1}\\s*
    (?:,\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var hsl3Re$1 = new RegExp(pattern$1$1);
const pattern$2$1 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*
    \\s+${percentage$1}
    \\s+${percentage$1}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var hsl4Re$1 = new RegExp(pattern$2$1);
const pattern$3$1 = `^
  rgba?\\(
    \\s*${number$1$1}\\s*,
    \\s*${number$1$1}\\s*,
    \\s*${number$1$1}\\s*
    (?:,\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var rgb3NumberRe$1 = new RegExp(pattern$3$1);
const pattern$4$1 = `^
  rgba?\\(
    \\s*${percentage$1}\\s*,
    \\s*${percentage$1}\\s*,
    \\s*${percentage$1}\\s*
    (?:,\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var rgb3PercentageRe$1 = new RegExp(pattern$4$1);
const pattern$5$1 = `^
  rgba?\\(
    \\s*${number$1$1}
    \\s+${number$1$1}
    \\s+${number$1$1}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage$1}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');
var rgb4NumberRe$1 = new RegExp(pattern$5$1);
const pattern$6$1 = `^
  rgba?\\(
    \\s*${percentage$1}
    \\s+${percentage$1}
    \\s+${percentage$1}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage$1}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');
var rgb4PercentageRe$1 = new RegExp(pattern$6$1);
const pattern$7$1 = /^transparent$/;
var transparentRe$1 = new RegExp(pattern$7$1, 'i');
const clamp$3 = (num, min, max) => Math.min(Math.max(min, num), max);

/* 500 => 255, -10 => 0, 128 => 128 */
const parseRGB$1 = num => {
  let n = num;
  if (typeof n !== 'number') n = n.endsWith('%') ? parseFloat(n) * 255 / 100 : parseFloat(n);
  return clamp$3(Math.round(n), 0, 255);
};

/* 200 => 100, -100 => 0, 50 => 50 */
const parsePercentage$1 = percentage => clamp$3(parseFloat(percentage), 0, 100);

/* '50%' => 5.0, 200 => 1, -10 => 0 */
function parseAlpha$1(alpha) {
  let a = alpha;
  if (typeof a !== 'number') a = a.endsWith('%') ? parseFloat(a) / 100 : parseFloat(a);
  return clamp$3(a, 0, 1);
}
function getHEX$1(hex) {
  const [r, g, b, a] = hexRgb(hex, {
    format: 'array'
  });
  return getRGB$1([null, ...[r, g, b, a]]);
}
function getHSL$1([, h, s, l, a = 1]) {
  let hh = h;
  if (hh.endsWith('turn')) {
    hh = parseFloat(hh) * 360 / 1;
  } else if (hh.endsWith('rad')) {
    hh = Math.round(parseFloat(hh) * 180 / Math.PI);
  } else {
    hh = parseFloat(hh);
  }
  return {
    type: 'hsl',
    values: [hh, parsePercentage$1(s), parsePercentage$1(l)],
    alpha: parseAlpha$1(a === null ? 1 : a)
  };
}
function getRGB$1([, r, g, b, a = 1]) {
  return {
    type: 'rgb',
    values: [r, g, b].map(parseRGB$1),
    alpha: parseAlpha$1(a === null ? 1 : a)
  };
}

/**
 * parse-css-color
 * @version v0.1.2
 * @link http://github.com/noeldelgado/parse-css-color/
 * @license MIT
 */

const parseCSSColor$1 = str => {
  if (typeof str !== 'string') return null;
  const hex = hexRe$1.exec(str);
  if (hex) return getHEX$1(hex[0]);
  const hsl = hsl4Re$1.exec(str) || hsl3Re$1.exec(str);
  if (hsl) return getHSL$1(hsl);
  const rgb = rgb4NumberRe$1.exec(str) || rgb4PercentageRe$1.exec(str) || rgb3NumberRe$1.exec(str) || rgb3PercentageRe$1.exec(str);
  if (rgb) return getRGB$1(rgb);
  if (transparentRe$1.exec(str)) return getRGB$1([null, 0, 0, 0, 0]);
  const cn = colorName[str.toLowerCase()];
  if (cn) return getRGB$1([null, cn[0], cn[1], cn[2], 1]);
  return null;
};
function hsl2rgb$1(hsl) {
  var h = hsl[0] / 360,
    s = hsl[1] / 100,
    l = hsl[2] / 100,
    t1,
    t2,
    t3,
    rgb,
    val;
  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }
  if (l < 0.5) t2 = l * (1 + s);else t2 = l + s - l * s;
  t1 = 2 * l - t2;
  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;
    if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;else if (2 * t3 < 1) val = t2;else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;else val = t1;
    rgb[i] = val * 255;
  }
  return rgb;
}
var hsl2rgb_1 = hsl2rgb$1;
function clamp$2(val, min, max) {
  return Math.min(Math.max(val, min), max);
}
var clamp_1 = clamp$2;
var clamp$1$1 = clamp_1;
function componentToHex(c) {
  var value = Math.round(clamp$1$1(c, 0, 255));
  var hex = value.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}
function rgb2hex(rgb) {
  var alpha = rgb.length === 4 ? componentToHex(rgb[3] * 255) : "";
  return "#" + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]) + alpha;
}
var rgb2hex_1 = rgb2hex;
function rgb2hsl(rgb) {
  var r = rgb[0] / 255,
    g = rgb[1] / 255,
    b = rgb[2] / 255,
    min = Math.min(r, g, b),
    max = Math.max(r, g, b),
    delta = max - min,
    h,
    s,
    l;
  if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;
  h = Math.min(h * 60, 360);
  if (h < 0) h += 360;
  l = (min + max) / 2;
  if (max == min) s = 0;else if (l <= 0.5) s = delta / (max + min);else s = delta / (2 - max - min);
  return [h, s * 100, l * 100];
}
var rgb2hsl_1 = rgb2hsl;

/**
 * mix-css-color
 * @version v0.2.0
 * @link http://github.com/noeldelgado/mix-css-color/
 * @license MIT
 */

function parseColor(color) {
  const res = parseCSSColor$1(color);
  if (res === null) return null;
  if (res.type === 'hsl') res.values = hsl2rgb_1(res.values);
  return res;
}

/**
 * Mix two colors together in variable proportion. Opacity is included in the calculations.
 * Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein
 * http://sass-lang.com
 * @see https://github.com/less/less.js/blob/cae5021358a5fca932c32ed071f652403d07def8/lib/less/functions/color.js#L302
 */
function mix(color1, color2, percentage = 50) {
  const c1 = parseColor(color1);
  const c2 = parseColor(color2);
  if (!c1 || !c2) return null;
  const p = Math.min(Math.max(0, percentage), 100) / 100.0;
  const w = p * 2 - 1;
  const a = c1.alpha - c2.alpha;
  const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
  const w2 = 1 - w1;
  const [r, g, b] = c1.values.map((c, i) => Math.round(c1.values[i] * w1 + c2.values[i] * w2));
  const alpha = parseFloat((c1.alpha * p + c2.alpha * (1 - p)).toFixed(8));
  return {
    hex: rgb2hex_1([r, g, b]),
    hexa: rgb2hex_1([r, g, b, alpha]),
    rgba: [r, g, b, alpha],
    hsla: [...rgb2hsl_1([r, g, b]).map(Math.round), alpha]
  };
}
const pattern = /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\b$/;
var hexRe = new RegExp(pattern, 'i');
const float = '-?\\d*(?:\\.\\d+)';
const number$3 = `(${float}?)`;
const percentage = `(${float}?%)`;
const numberOrPercentage = `(${float}?%?)`;
const pattern$1 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*,
    \\s*${percentage}\\s*,
    \\s*${percentage}\\s*
    (?:,\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var hsl3Re = new RegExp(pattern$1);
const pattern$2 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*
    \\s+${percentage}
    \\s+${percentage}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var hsl4Re = new RegExp(pattern$2);
const pattern$3 = `^
  rgba?\\(
    \\s*${number$3}\\s*,
    \\s*${number$3}\\s*,
    \\s*${number$3}\\s*
    (?:,\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var rgb3NumberRe = new RegExp(pattern$3);
const pattern$4 = `^
  rgba?\\(
    \\s*${percentage}\\s*,
    \\s*${percentage}\\s*,
    \\s*${percentage}\\s*
    (?:,\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');
var rgb3PercentageRe = new RegExp(pattern$4);
const pattern$5 = `^
  rgba?\\(
    \\s*${number$3}
    \\s+${number$3}
    \\s+${number$3}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');
var rgb4NumberRe = new RegExp(pattern$5);
const pattern$6 = `^
  rgba?\\(
    \\s*${percentage}
    \\s+${percentage}
    \\s+${percentage}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');
var rgb4PercentageRe = new RegExp(pattern$6);
const pattern$7 = /^transparent$/;
var transparentRe = new RegExp(pattern$7, 'i');
const clamp$4 = (num, min, max) => Math.min(Math.max(min, num), max);

/* 500 => 255, -10 => 0, 128 => 128 */
const parseRGB = num => {
  let n = num;
  if (typeof n !== 'number') n = n.endsWith('%') ? parseFloat(n) * 255 / 100 : parseFloat(n);
  return clamp$4(Math.round(n), 0, 255);
};

/* 200 => 100, -100 => 0, 50 => 50 */
const parsePercentage = percentage => clamp$4(parseFloat(percentage), 0, 100);

/* '50%' => 5.0, 200 => 1, -10 => 0 */
function parseAlpha(alpha) {
  let a = alpha;
  if (typeof a !== 'number') a = a.endsWith('%') ? parseFloat(a) / 100 : parseFloat(a);
  return clamp$4(a, 0, 1);
}
function getHEX(hex) {
  const [r, g, b, a] = hexRgb(hex, {
    format: 'array'
  });
  return getRGB([null, ...[r, g, b, a]]);
}
function getHSL([, h, s, l, a = 1]) {
  let hh = h;
  if (hh.endsWith('turn')) {
    hh = parseFloat(hh) * 360 / 1;
  } else if (hh.endsWith('rad')) {
    hh = Math.round(parseFloat(hh) * 180 / Math.PI);
  } else {
    hh = parseFloat(hh);
  }
  return {
    type: 'hsl',
    values: [hh, parsePercentage(s), parsePercentage(l)],
    alpha: parseAlpha(a === null ? 1 : a)
  };
}
function getRGB([, r, g, b, a = 1]) {
  return {
    type: 'rgb',
    values: [r, g, b].map(parseRGB),
    alpha: parseAlpha(a === null ? 1 : a)
  };
}

/**
 * parse-css-color
 * @version v0.2.0
 * @link http://github.com/noeldelgado/parse-css-color/
 * @license MIT
 */

const parseCSSColor = str => {
  if (typeof str !== 'string') return null;
  const hex = hexRe.exec(str);
  if (hex) return getHEX(hex[0]);
  const hsl = hsl4Re.exec(str) || hsl3Re.exec(str);
  if (hsl) return getHSL(hsl);
  const rgb = rgb4NumberRe.exec(str) || rgb4PercentageRe.exec(str) || rgb3NumberRe.exec(str) || rgb3PercentageRe.exec(str);
  if (rgb) return getRGB(rgb);
  if (transparentRe.exec(str)) return getRGB([null, 0, 0, 0, 0]);
  const cn = colorName[str.toLowerCase()];
  if (cn) return getRGB([null, cn[0], cn[1], cn[2], 1]);
  return null;
};

/**
 * values.js - Get the tints and shades of a color
 * @version v2.1.1
 * @link http://noeldelgado.github.io/values.js/
 * @license MIT
 */
const defaultNumberParam = (v, d) => v === null || isNaN(v) || typeof v === 'string' ? d : v;
class Values {
  constructor(color = '#000', type = 'base', weight = 0) {
    [this.rgb, this.alpha, this.type, this.weight] = [[0, 0, 0], 1, type, weight];
    const c = color === null ? '#000' : color;
    if (typeof c !== 'string') throw new TypeError(`Input should be a string: ${c}`);
    const parsed = parseCSSColor(c);
    if (!parsed) throw new Error(`Unable to parse color from string: ${c}`);
    return this[`_setFrom${parsed.type.toUpperCase()}`]([...parsed.values, parsed.alpha]);
  }
  get hex() {
    return this.hexString().replace(/^#/, '');
  }
  setColor(color) {
    const parsed = parseCSSColor(color);
    if (!parsed) return null;
    return this[`_setFrom${parsed.type.toUpperCase()}`]([...parsed.values, parsed.alpha]);
  }
  tint(weight, w = defaultNumberParam(weight, 50)) {
    return new Values(`rgb(${mix('#fff', this.rgbString(), w).rgba})`, 'tint', w);
  }
  shade(weight, w = defaultNumberParam(weight, 50)) {
    return new Values(`rgb(${mix('#000', this.rgbString(), w).rgba})`, 'shade', w);
  }
  tints(weight, w = defaultNumberParam(weight, 10)) {
    return Array.from({
      length: 100 / w
    }, (_, i) => this.tint((i + 1) * w));
  }
  shades(weight, w = defaultNumberParam(weight, 10)) {
    return Array.from({
      length: 100 / w
    }, (_, i) => this.shade((i + 1) * w));
  }
  all(weight = 10) {
    return [...this.tints(weight).reverse(), Object.assign(this), ...this.shades(weight)];
  }
  hexString() {
    return rgb2hex_1(this.alpha >= 1 ? this.rgb : [...this.rgb, this.alpha]);
  }
  rgbString() {
    const channels = (this.alpha >= 1 ? this.rgb : [...this.rgb, this.alpha]).join(', ');
    return `${this.alpha >= 1 ? 'rgb' : 'rgba'}(${channels})`;
  }
  getBrightness() {
    return Math.round(this.rgb.reduce((a, b) => a + b) / (255 * 3) * 100);
  }
  _setFromRGB([r, g, b, a]) {
    [this.rgb, this.alpha] = [[r, g, b], a];
    return this;
  }
  _setFromHSL([h, s, l, a]) {
    [this.rgb, this.alpha] = [hsl2rgb_1([h, s, l]).map(Math.round), a];
    return this;
  }
}
Values.VERSION = 'v2.1.1';
var Values$1 = Values;
const mixColor = color => {
  const colorValues = new Values$1(color);
  return {
    tint: step => colorValues.tint(step).hexString(),
    shade: step => colorValues.shade(step).hexString(),
    base: colorValues.hexString()
  };
};
const STEPS = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95];
const createColorScales = base => {
  const mixed = mixColor(base);
  return Object.assign(Object.assign({}, STEPS.reduce((acc, step) => Object.assign(Object.assign({}, acc), {
    [`lighten${step}`]: mixed.tint(step),
    [`darken${step}`]: mixed.shade(step)
  }), {})), {
    base: mixed.base
  });
};
const BASE_COLORS = {
  aliceBlue: '#ecf0ff',
  amaranthaRed: '#cb300a',
  antiFlashWhite: '#f1f2f3',
  apple: '#e3602a',
  bigStone: '#344348',
  black: '#000000',
  blue1: '#5a68e2',
  blue: '#1dbeee',
  blueOblivion: '#23438f',
  blazingBonfire: '#ffa234',
  cornflowerBlue: '#5d80f0',
  cumberlandFog: '#dadbde',
  currant: '#48000a',
  darkBlue: '#25006e',
  deepSaffron: '#ffa234',
  deepIntoTheJungle: '#004e48',
  emerald: '#5ace7d',
  flagstone: '#acacaf',
  frenchSky: '#8999ff',
  gentianFlower: '#355bfb',
  gold: '#ffd500',
  green: '#01b39c',
  grey: '#a3a6ac',
  grotesqueGreen: '#6af293',
  hitPink: '#ffad79',
  honeydew: '#f0fef4',
  indianDance: '#f89076',
  jordyBlue: '#92abfc',
  linen: '#fcebe7',
  maasstrichtBlue: '#001f23',
  mauve: '#c38cee',
  moussaka: '#6f2a17',
  mellowApricot: '#ffbe71',
  mintLeaf: '#01cbb0',
  nightBlue: '#353957',
  orangeBrown: '#ac5d00',
  pastelRed: '#f46363',
  pastelBlue: '#a1b5fc',
  paua: '#130066',
  peach: '#f8ac7d',
  pineGreen: '#017d6d',
  pink: '#fe56aa',
  policeBlue: '#2e456d',
  purple: '#be83cf',
  royalBlue: '#5a68e2',
  scarletGum: '#401960',
  seashell: '#fff6eb',
  silverChalice: '#abacaf',
  smalt: '#003580',
  sonicSilver: '#737479',
  ultramarineBlue: '#4568fb',
  vermilion: '#de350b',
  violet1: '#8505a2',
  violet: '#7622d7',
  vodka: '#b5c3fd',
  theatreGold: '#a56822',
  uniformGreen: '#4d4628',
  yellow: '#fadb14',
  windsorGrey: '#606065'
};
const colorScales = Object.entries(BASE_COLORS).reduce((acc, [key, value]) => Object.assign(Object.assign({}, acc), {
  [key]: createColorScales(value)
}), {});
const {
  blue,
  ultramarineBlue: ultramarineBlue$2,
  green,
  grey: grey$2,
  grotesqueGreen,
  deepSaffron: deepSaffron$2,
  pink,
  purple,
  vermilion: vermilion$2,
  smalt,
  violet: violet$1,
  yellow
} = colorScales;
const palette$b = {
  black: '#000000',
  white: '#ffffff',
  blue: blue.base,
  blueDark15: blue.darken15,
  blueDark30: blue.darken30,
  blueDark45: blue.darken45,
  blueDark60: blue.darken60,
  blueDark75: blue.darken75,
  blueDark90: blue.darken90,
  blueLight15: blue.lighten15,
  blueLight30: blue.lighten30,
  blueLight45: blue.lighten45,
  blueLight60: blue.lighten60,
  blueLight75: blue.lighten75,
  blueLight90: blue.lighten90,
  dodgerBlue: ultramarineBlue$2.base,
  dodgerBlueDark15: ultramarineBlue$2.darken15,
  dodgerBlueDark30: ultramarineBlue$2.darken30,
  dodgerBlueLight30: ultramarineBlue$2.lighten30,
  dodgerBlueLight45: ultramarineBlue$2.lighten45,
  dodgerBlueLight60: ultramarineBlue$2.lighten60,
  dodgerBlueLight75: ultramarineBlue$2.lighten75,
  dodgerBlueLight90: ultramarineBlue$2.lighten90,
  green: green.base,
  greenDark15: green.darken15,
  greenDark30: green.darken30,
  greenDark75: green.darken75,
  greenLight30: green.lighten30,
  greenLight75: green.lighten75,
  greenLight90: green.lighten90,
  grey: grey$2.base,
  greyDark15: grey$2.darken15,
  greyDark30: grey$2.darken30,
  greyDark45: grey$2.darken45,
  greyDark60: grey$2.darken60,
  greyDark75: grey$2.darken75,
  greyLight45: grey$2.lighten45,
  greyLight60: grey$2.lighten60,
  greyLight75: grey$2.lighten75,
  greyLight85: grey$2.lighten85,
  greyLight90: grey$2.lighten90,
  greyLight95: grey$2.lighten95,
  grotesqueGreen: grotesqueGreen.base,
  grotesqueGreenDark30: grotesqueGreen.darken30,
  grotesqueGreenDark45: grotesqueGreen.darken45,
  grotesqueGreenLight30: grotesqueGreen.lighten30,
  grotesqueGreenLight60: grotesqueGreen.lighten60,
  grotesqueGreenLight75: grotesqueGreen.lighten75,
  grotesqueGreenLight90: grotesqueGreen.lighten90,
  orange: deepSaffron$2.base,
  orangeDark15: deepSaffron$2.darken15,
  orangeDark30: deepSaffron$2.darken30,
  orangeDark75: deepSaffron$2.darken75,
  orangeLight30: deepSaffron$2.lighten30,
  orangeLight75: deepSaffron$2.lighten75,
  orangeLight90: deepSaffron$2.lighten90,
  pink: pink.base,
  pinkDark15: pink.darken15,
  pinkDark30: pink.darken30,
  pinkDark45: pink.darken45,
  pinkDark75: pink.darken75,
  pinkLight30: pink.lighten30,
  pinkLight45: pink.lighten45,
  pinkLight75: pink.lighten75,
  pinkLight90: pink.lighten90,
  purple: purple.base,
  purpleDark15: purple.darken15,
  purpleDark30: purple.darken30,
  purpleLight30: purple.lighten30,
  red: vermilion$2.base,
  redDark15: vermilion$2.darken15,
  redDark30: vermilion$2.darken30,
  redDark45: vermilion$2.darken45,
  redDark60: vermilion$2.darken60,
  redDark75: vermilion$2.darken75,
  redDark90: vermilion$2.darken90,
  redLight15: vermilion$2.lighten15,
  redLight30: vermilion$2.lighten30,
  redLight45: vermilion$2.lighten45,
  redLight60: vermilion$2.lighten60,
  redLight75: vermilion$2.lighten75,
  redLight90: vermilion$2.lighten90,
  smalt: smalt.base,
  smaltDark30: smalt.darken30,
  smaltDark75: smalt.darken75,
  smaltLight30: smalt.lighten30,
  smaltLight45: smalt.lighten45,
  smaltLight75: smalt.lighten75,
  smaltLight90: smalt.lighten90,
  violet: violet$1.base,
  violetDark15: violet$1.darken15,
  violetDark30: violet$1.darken30,
  violetDark45: violet$1.darken45,
  violetDark60: violet$1.darken60,
  violetDark75: violet$1.darken75,
  violetDark90: violet$1.darken90,
  violetLight15: violet$1.lighten15,
  violetLight30: violet$1.lighten30,
  violetLight45: violet$1.lighten45,
  violetLight60: violet$1.lighten60,
  violetLight75: violet$1.lighten75,
  violetLight90: violet$1.lighten90,
  yellow: yellow.base,
  yellowDark15: yellow.darken15,
  yellowDark30: yellow.darken30,
  yellowDark75: yellow.darken75,
  yellowLight30: yellow.lighten30,
  yellowLight45: yellow.lighten45,
  yellowLight60: yellow.lighten60,
  yellowLight75: yellow.lighten75,
  yellowLight90: yellow.lighten90
};
const {
  mauve: mauve$3,
  violet
} = colorScales;
const palette$a = Object.assign(Object.assign({}, palette$b), {
  mauve: mauve$3.base,
  mauveLight80: mauve$3.lighten80,
  violetDark50: violet.darken50
});
const {
  apple: apple$3,
  hitPink: hitPink$1,
  maasstrichtBlue: maasstrichtBlue$4
} = colorScales;
const palette$9 = Object.assign(Object.assign({}, palette$b), {
  apple: apple$3.base,
  appleDark20: apple$3.darken20,
  appleDark50: apple$3.darken50,
  appleLight90: apple$3.lighten90,
  hitPink: hitPink$1.base,
  hitPinkLight80: hitPink$1.lighten80,
  maasstrichtBlueLight30: maasstrichtBlue$4.lighten30
});
const {
  aliceBlue: aliceBlue$1,
  amaranthaRed,
  antiFlashWhite: antiFlashWhite$1,
  apple: apple$2,
  cumberlandFog,
  deepSaffron: deepSaffron$1,
  emerald: emerald$1,
  gentianFlower,
  grey: grey$1,
  honeydew: honeydew$1,
  linen: linen$1,
  maasstrichtBlue: maasstrichtBlue$3,
  mellowApricot: mellowApricot$1,
  orangeBrown,
  pastelRed: pastelRed$1,
  pineGreen: pineGreen$1,
  seashell: seashell$1,
  silverChalice: silverChalice$1,
  sonicSilver: sonicSilver$1,
  ultramarineBlue: ultramarineBlue$1,
  vermilion: vermilion$1,
  vodka: vodka$1,
  windsorGrey,
  black: black$1
} = colorScales;
const palette$8 = {
  black: black$1.base,
  white: '#ffffff',
  greyLight95: grey$1.lighten95,
  greyLight90: grey$1.lighten90,
  greyLight75: grey$1.lighten75,
  greyLight45: grey$1.lighten45,
  greyLight30: grey$1.lighten30,
  grey: grey$1.base,
  maasstrichtBlueLight90: maasstrichtBlue$3.lighten90,
  maasstrichtBlueLight80: maasstrichtBlue$3.lighten80,
  maasstrichtBlueLight50: maasstrichtBlue$3.lighten50,
  maasstrichtBlueLight30: maasstrichtBlue$3.lighten30,
  maasstrichtBlue: maasstrichtBlue$3.base,
  pastelRed: pastelRed$1.base,
  pastelRedLight20: pastelRed$1.lighten20,
  mellowApricot: mellowApricot$1.base,
  mellowApricotLight20: mellowApricot$1.lighten20,
  emerald: emerald$1.base,
  emeraldLight20: emerald$1.lighten20,
  emeraldDark20: emerald$1.darken20,
  vodka: vodka$1.base,
  vodkaLight20: vodka$1.lighten20,
  vermilion: vermilion$1.base,
  deepSaffron: deepSaffron$1.base,
  deepSaffronDark20: deepSaffron$1.darken20,
  pineGreen: pineGreen$1.base,
  ultramarineBlue: ultramarineBlue$1.base,
  sonicSilver: sonicSilver$1.base,
  linen: linen$1.base,
  seashell: seashell$1.base,
  honeydew: honeydew$1.base,
  aliceBlue: aliceBlue$1.base,
  antiFlashWhite: antiFlashWhite$1.base,
  apple: apple$2.base,
  silverChalice: silverChalice$1.base,
  silverChaliceLight20: silverChalice$1.lighten20,
  amaranthaRed: amaranthaRed.base,
  orangeBrown: orangeBrown.base,
  gentianFlower: gentianFlower.base,
  windsorGrey: windsorGrey.base,
  cumberlandFog: cumberlandFog.base
};
const {
  aliceBlue,
  antiFlashWhite,
  apple: apple$1,
  blazingBonfire,
  bigStone,
  flagstone,
  deepSaffron,
  deepIntoTheJungle,
  emerald,
  grey,
  honeydew,
  indianDance,
  linen,
  maasstrichtBlue: maasstrichtBlue$2,
  mellowApricot,
  moussaka,
  pastelRed,
  pineGreen,
  seashell,
  silverChalice,
  sonicSilver,
  ultramarineBlue,
  vermilion,
  vodka,
  theatreGold,
  uniformGreen,
  mintLeaf,
  blueOblivion,
  pastelBlue
} = colorScales;
({
  black: '#000000',
  white: '#ffffff',
  greyLight95: grey.lighten95,
  greyLight90: grey.lighten90,
  greyLight75: grey.lighten75,
  greyLight45: grey.lighten45,
  greyLight30: grey.lighten30,
  grey: grey.base,
  greyDark20: grey.darken20,
  greyDark30: grey.darken30,
  maasstrichtBlueLight90: maasstrichtBlue$2.lighten90,
  maasstrichtBlueLight80: maasstrichtBlue$2.lighten80,
  maasstrichtBlueLight70: maasstrichtBlue$2.lighten70,
  maasstrichtBlueLight60: maasstrichtBlue$2.lighten60,
  maasstrichtBlueLight50: maasstrichtBlue$2.lighten50,
  maasstrichtBlueLight30: maasstrichtBlue$2.lighten30,
  maasstrichtBlueLight15: maasstrichtBlue$2.lighten15,
  maasstrichtBlueLight10: maasstrichtBlue$2.lighten10,
  maasstrichtBlue: maasstrichtBlue$2.base,
  pastelRed: pastelRed.base,
  pastelRedLight20: pastelRed.lighten20,
  mellowApricot: mellowApricot.base,
  mellowApricotLight20: mellowApricot.lighten20,
  moussaka: moussaka.base,
  emerald: emerald.base,
  emeraldLight20: emerald.lighten20,
  emeraldDark20: emerald.darken20,
  vodka: vodka.base,
  vodkaLight20: vodka.lighten20,
  vermilion: vermilion.base,
  vermilionLight20: vermilion.lighten20,
  vermilionDark10: vermilion.darken10,
  deepSaffron: deepSaffron.base,
  deepSaffronDark20: deepSaffron.darken20,
  indianDance: indianDance.base,
  theatreGold: theatreGold.base,
  theatreGoldLight20: theatreGold.lighten20,
  pineGreen: pineGreen.base,
  pineGreenLight20: pineGreen.lighten20,
  pineGreenDark10: pineGreen.darken10,
  ultramarineBlue: ultramarineBlue.base,
  ultramarineBlueLight20: ultramarineBlue.lighten20,
  ultramarineBlueDark10: ultramarineBlue.darken10,
  sonicSilver: sonicSilver.base,
  sonicSilverLight50: sonicSilver.lighten45,
  sonicSilverDark10: sonicSilver.darken10,
  linen: linen.base,
  seashell: seashell.base,
  honeydew: honeydew.base,
  aliceBlue: aliceBlue.base,
  antiFlashWhite: antiFlashWhite.base,
  apple: apple$1.base,
  silverChalice: silverChalice.base,
  silverChaliceLight20: silverChalice.lighten20,
  uniformGreen: uniformGreen.base,
  blazingBonfire: blazingBonfire.base,
  deepIntoTheJungle: deepIntoTheJungle.base,
  mintLeaf: mintLeaf.base,
  blueOblivion: blueOblivion.base,
  pastelBlue: pastelBlue.base,
  bigStone: bigStone.base,
  flagstone: flagstone.base
});
const {
  maasstrichtBlue: maasstrichtBlue$1
} = colorScales;
({
  maasstrichtBlue: maasstrichtBlue$1.base,
  maasstrichtBlueLight5: maasstrichtBlue$1.lighten5,
  maasstrichtBlueLight10: maasstrichtBlue$1.lighten10,
  maasstrichtBlueLight15: maasstrichtBlue$1.lighten15,
  maasstrichtBlueLight20: maasstrichtBlue$1.lighten20,
  maasstrichtBlueLight25: maasstrichtBlue$1.lighten25,
  maasstrichtBlueLight30: maasstrichtBlue$1.lighten30,
  maasstrichtBlueLight35: maasstrichtBlue$1.lighten35,
  maasstrichtBlueLight40: maasstrichtBlue$1.lighten40
});
const {
  violet1: violet1$2,
  mauve: mauve$2
} = colorScales;
Object.assign(Object.assign({}, palette$8), {
  violet: violet1$2.base,
  violetLight20: violet1$2.lighten20,
  violetLight30: violet1$2.lighten30,
  violetLight90: violet1$2.lighten90,
  violetDark20: violet1$2.darken20,
  mauve: mauve$2.base,
  mauveLight80: mauve$2.lighten80
});
const {
  apple,
  currant,
  hitPink
} = colorScales;
Object.assign(Object.assign({}, palette$8), {
  apple: apple.base,
  appleLight10: apple.lighten10,
  appleDark20: apple.darken20,
  hitPink: hitPink.base,
  hitPinkLight30: hitPink.lighten30,
  hitPinkLight50: hitPink.lighten50,
  hitPinkLight80: hitPink.lighten80,
  hitPinkLight90: hitPink.lighten90,
  currant: currant.base
});
const {
  scarletGum: scarletGum$1,
  violet1: violet1$1,
  mauve: mauve$1
} = colorScales;
Object.assign(Object.assign({}, palette$8), {
  scarletGumLight20: scarletGum$1.lighten20,
  scarletGumLight30: scarletGum$1.lighten30,
  scarletGumLight50: scarletGum$1.lighten50,
  scarletGumLight80: scarletGum$1.lighten80,
  scarletGumLight90: scarletGum$1.lighten90,
  scarletGum: scarletGum$1.base,
  scarletGumDark20: scarletGum$1.darken20,
  violetLight30: violet1$1.lighten30,
  violetLight50: violet1$1.lighten50,
  violetLight80: violet1$1.lighten80,
  violetLight90: violet1$1.lighten90,
  violet: violet1$1.base,
  mauve: mauve$1.base
});
const {
  scarletGum,
  violet1,
  mauve,
  maasstrichtBlue
} = colorScales;
Object.assign(Object.assign({}, palette$8), {
  scarletGumLight20: scarletGum.lighten20,
  scarletGumLight30: scarletGum.lighten30,
  scarletGumLight50: scarletGum.lighten50,
  scarletGumLight80: scarletGum.lighten80,
  scarletGumLight90: scarletGum.lighten90,
  scarletGum: scarletGum.base,
  scarletGumDark65: scarletGum.darken65,
  violetLight30: violet1.lighten30,
  violetLight50: violet1.lighten50,
  violetLight80: violet1.lighten80,
  violetLight90: violet1.lighten90,
  violet: violet1.base,
  mauve: mauve.base,
  mauveLight15: mauve.lighten15,
  mauveLight30: mauve.lighten30,
  mauveLight40: mauve.lighten40,
  mauveDark65: mauve.darken65,
  maasstrichtBlueLight10: maasstrichtBlue.lighten10,
  maasstrichtBlueDark20: maasstrichtBlue.darken20
});
const {
  royalBlue,
  frenchSky
} = colorScales;
Object.assign(Object.assign({}, palette$8), {
  royalBlue: royalBlue.base,
  royalBlueLight10: royalBlue.lighten10,
  royalBlueLight80: royalBlue.lighten80,
  royalBlueLight90: royalBlue.lighten90,
  royalBlueDark20: royalBlue.darken20,
  royalBlueDark30: royalBlue.darken30,
  frenchSky: frenchSky.base,
  frenchSkyLight70: frenchSky.lighten70,
  frenchSkyLight80: frenchSky.lighten80
});
const {
  gold,
  policeBlue,
  black
} = colorScales;
Object.assign(Object.assign({}, palette$8), {
  blackLight30: black.lighten30,
  blackLight90: black.lighten90,
  goldLight20: gold.lighten20,
  goldLight50: gold.lighten50,
  goldLight70: gold.lighten70,
  goldLight80: gold.lighten80,
  goldLight90: gold.lighten90,
  gold: gold.base,
  policeBlue: policeBlue.base,
  policeBlueLight20: policeBlue.lighten20,
  policeBlueLight25: policeBlue.lighten25,
  policeBlueLight90: policeBlue.lighten90
});

var getSizes = function getSizes(baseSize) {
  return {
    xxsmall: baseSize * 0.25,
    xsmall: baseSize * 0.5,
    small: baseSize,
    medium: baseSize * 2,
    large: baseSize * 3,
    xlarge: baseSize * 4,
    xxlarge: baseSize * 5,
    xxxlarge: baseSize * 6
  };
};

var getSpace = function getSpace(baseSpace) {
  return {
    xxsmall: baseSpace * 0.25,
    xsmall: baseSpace * 0.5,
    small: baseSpace,
    medium: baseSpace * 2,
    large: baseSpace * 3,
    xlarge: baseSpace * 4,
    xxlarge: baseSpace * 5,
    xxxlarge: baseSpace * 6,
    xxxxlarge: baseSpace * 7
  };
};

// Hero design web typo scale is following
// https://www.ibm.com/design/language/typography/type-specs-ui#scales
var genFontSize = function genFontSize(prev, at) {
  return prev + Math.floor(Math.abs((at - 2) / 4) + 1) * 2;
};
var getFontSizes = function getFontSizes(baseFontSize) {
  var fontSizes = Array.from(new Array(15));
  fontSizes.forEach(function (_, index) {
    if (index === 0) {
      fontSizes[0] = baseFontSize;
    } else {
      fontSizes[index] = genFontSize(fontSizes[index - 1], index);
    }
    return undefined;
  });
  return {
    '11xlarge': fontSizes[14],
    '10xlarge': fontSizes[13],
    '9xlarge': fontSizes[12],
    '8xlarge': fontSizes[11],
    '7xlarge': fontSizes[10],
    '6xlarge': fontSizes[9],
    xxxxxlarge: fontSizes[8],
    xxxxlarge: fontSizes[7],
    xxxlarge: fontSizes[6],
    xxlarge: fontSizes[5],
    xlarge: fontSizes[4],
    large: fontSizes[3],
    medium: fontSizes[2],
    small: fontSizes[1],
    xsmall: fontSizes[0] //     h9
  };
};

var fontWeights = {
  light: 200,
  regular: 400,
  semiBold: 600,
  bold: 700
};
var getLineHeights = function getLineHeights(fontSizes) {
  var additionalSpace = 8;
  return {
    '11xlarge': fontSizes['11xlarge'] + additionalSpace,
    '10xlarge': fontSizes['10xlarge'] + additionalSpace,
    '9xlarge': fontSizes['9xlarge'] + additionalSpace,
    '8xlarge': fontSizes['8xlarge'] + additionalSpace,
    '7xlarge': fontSizes['7xlarge'] + additionalSpace,
    '6xlarge': fontSizes['6xlarge'] + additionalSpace,
    xxxxxlarge: fontSizes.xxxxxlarge + additionalSpace,
    xxxxlarge: fontSizes.xxxxlarge + additionalSpace,
    xxxlarge: fontSizes.xxxlarge + additionalSpace,
    xxlarge: fontSizes.xxlarge + additionalSpace,
    xlarge: fontSizes.xlarge + additionalSpace,
    large: fontSizes.large + additionalSpace,
    medium: fontSizes.medium + additionalSpace,
    small: fontSizes.small + additionalSpace,
    xsmall: fontSizes.xsmall + additionalSpace //         h9
  };
};

var getBorderWidths = function getBorderWidths(baseBorderWidth) {
  return {
    base: baseBorderWidth
  };
};
var getRadii = function getRadii(baseRadius) {
  return {
    base: baseRadius,
    medium: baseRadius * 2.5,
    large: baseRadius * 5
  };
};

var getShadows = function getShadows(systemPalette) {
  return {
    "default": "0 2px 7px 1px ".concat(systemPalette.defaultDarkBackground, "25"),
    primary: "0 0 0 2px ".concat(systemPalette.primaryLightBackground),
    danger: "0 0 0 2px ".concat(systemPalette.dangerBackground),
    warning: "0 0 0 2px ".concat(systemPalette.warningBackground),
    divider: "inset 10px 0 8px -8px ".concat(systemPalette.defaultDarkGreyBackground)
  };
};

var heroSystemPalette = {
  primary: palette$b.violet,
  lightPrimary: palette$b.purple,
  hoverPrimary: palette$b.violetLight30,
  activePrimary: palette$b.violetDark30,
  primaryBackground: palette$b.violetLight75,
  primaryLightBackground: palette$b.violetLight90,
  primaryNeutralBackground: palette$b.violetDark30,
  primaryDarkBackground: palette$b.violetDark45,
  info: palette$b.dodgerBlue,
  infoBorder: palette$b.blue,
  infoDarkBackground: palette$b.blueLight75,
  infoBackground: palette$b.blueLight90,
  danger: palette$b.red,
  dangerDark: palette$b.redDark15,
  hoverDanger: palette$b.redLight30,
  activeDanger: palette$b.redDark30,
  dangerDarkBackground: palette$b.redLight75,
  dangerBackground: palette$b.redLight90,
  warning: palette$b.orange,
  warningDark: palette$b.orangeDark15,
  hoverWarning: palette$b.orangeLight30,
  activeWarning: palette$b.orangeDark30,
  warningDarkBackground: palette$b.orangeLight75,
  warningBackground: palette$b.orangeLight90,
  success: palette$b.green,
  successDark: palette$b.greenDark15,
  hoverSuccess: palette$b.greenLight30,
  activeSuccess: palette$b.greenDark30,
  successDarkBackground: palette$b.grotesqueGreenLight60,
  successBackground: palette$b.grotesqueGreenLight90,
  error: palette$b.pink,
  errorDark: palette$b.pinkDark15,
  hoverError: palette$b.pinkLight30,
  activeError: palette$b.pinkDark30,
  errorDarkBackground: palette$b.pinkLight75,
  errorBackground: palette$b.pinkLight90,
  link: palette$b.violet,
  hoverLink: palette$b.violetLight30,
  activeLink: palette$b.violetDark30,
  text: palette$b.black,
  bodyText: palette$b.greyDark45,
  subduedText: palette$b.greyDark30,
  disabledText: palette$b.grey,
  lightText: palette$b.white,
  defaultBackground: palette$b.greyLight90,
  defaultLightBackground: palette$b.white,
  defaultDarkBackground: palette$b.black,
  defaultGreyBackground: palette$b.greyLight75,
  defaultDarkGreyBackground: palette$b.greyLight45,
  neutralBackground: palette$b.grey,
  neutralLightBackground: palette$b.greyLight60,
  neutralDarkBackground: palette$b.greyDark30,
  defaultBorder: palette$b.greyLight60,
  black: palette$b.black,
  primaryHeaderBackground: palette$b.smaltLight90,
  primaryRingBackground: palette$b.smalt,
  infoHeaderBackground: palette$b.violetLight60
};
var heroSystemPalette$1 = heroSystemPalette;

var omopSystemPalette = {
  primary: palette$b.violet,
  lightPrimary: palette$b.purple,
  hoverPrimary: palette$b.violetLight30,
  activePrimary: palette$b.violetDark30,
  primaryBackground: palette$b.violetLight75,
  primaryLightBackground: palette$b.violetLight90,
  primaryNeutralBackground: palette$b.violetDark30,
  primaryDarkBackground: palette$b.violetDark60,
  info: palette$b.dodgerBlue,
  infoBorder: palette$b.blue,
  infoDarkBackground: palette$b.blueLight75,
  infoBackground: palette$b.blueLight90,
  danger: palette$b.red,
  dangerDark: palette$b.redDark15,
  hoverDanger: palette$b.redLight30,
  activeDanger: palette$b.redDark30,
  dangerDarkBackground: palette$b.redLight75,
  dangerBackground: palette$b.redLight90,
  warning: palette$b.orange,
  warningDark: palette$b.orangeDark15,
  hoverWarning: palette$b.orangeLight30,
  activeWarning: palette$b.orangeDark30,
  warningDarkBackground: palette$b.orangeLight75,
  warningBackground: palette$b.orangeLight90,
  success: palette$b.green,
  successDark: palette$b.greenDark15,
  hoverSuccess: palette$b.greenLight30,
  activeSuccess: palette$b.greenDark30,
  successDarkBackground: palette$b.grotesqueGreenLight60,
  successBackground: palette$b.grotesqueGreenLight90,
  error: palette$b.pink,
  errorDark: palette$b.pinkDark15,
  hoverError: palette$b.pinkLight30,
  activeError: palette$b.pinkDark30,
  errorDarkBackground: palette$b.pinkLight75,
  errorBackground: palette$b.pinkLight90,
  link: palette$b.violet,
  hoverLink: palette$b.violetLight30,
  activeLink: palette$b.violetDark30,
  text: palette$b.black,
  bodyText: palette$b.greyDark45,
  subduedText: palette$b.greyDark30,
  disabledText: palette$b.grey,
  lightText: palette$b.white,
  defaultBackground: palette$b.greyLight90,
  defaultLightBackground: palette$b.white,
  defaultDarkBackground: palette$b.black,
  defaultGreyBackground: palette$b.greyLight75,
  defaultDarkGreyBackground: palette$b.greyLight45,
  neutralBackground: palette$b.grey,
  neutralLightBackground: palette$b.greyLight60,
  neutralDarkBackground: palette$b.greyDark30,
  defaultBorder: palette$b.greyLight60,
  black: palette$b.black,
  primaryHeaderBackground: palette$b.smaltLight90,
  primaryRingBackground: palette$b.smalt,
  infoHeaderBackground: palette$b.violetLight60
};
var omopSystemPalette$1 = omopSystemPalette;

var jobsSystemPalette = Object.assign(Object.assign({}, heroSystemPalette$1), {
  primary: palette$9.appleDark20,
  lightPrimary: palette$9.apple,
  hoverPrimary: palette$9.apple,
  activePrimary: palette$9.appleDark50,
  primaryBackground: palette$9.hitPink,
  primaryLightBackground: palette$9.hitPinkLight80,
  link: palette$9.appleDark20,
  hoverLink: palette$9.apple,
  activeLink: palette$9.appleDark50,
  infoDarkBackground: palette$9.maasstrichtBlueLight30
});
var jobsSystemPalette$1 = jobsSystemPalette;

var eBensSystemPalette = Object.assign(Object.assign({}, heroSystemPalette$1), {
  activePrimary: palette$a.violetDark50,
  lightPrimary: palette$a.mauve,
  primaryBackground: palette$a.mauve,
  primaryLightBackground: palette$a.mauveLight80,
  activeLink: palette$a.violetDark50
});
var eBensSystemPalette$1 = eBensSystemPalette;

var BASE_BORDER_WIDTH = 1;
var BASE_RADIUS = 4;
var BASE_SIZE = 8;
var BASE_SPACE = 8;
var BASE_FONT_SIZE = 10;
var BASE_BREAKPOINT = {
  small: 575,
  medium: 768,
  large: 992,
  xlarge: 1200
};
var scale = {
  borderWidth: BASE_BORDER_WIDTH,
  radius: BASE_RADIUS,
  size: BASE_SIZE,
  space: BASE_SPACE,
  fontSize: BASE_FONT_SIZE,
  breakpoints: BASE_BREAKPOINT
};

var getBreakpoints = function getBreakpoints(_ref) {
  var small = _ref.small,
    medium = _ref.medium,
    large = _ref.large,
    xlarge = _ref.xlarge;
  return {
    small: "".concat(small, "px"),
    medium: "".concat(medium, "px"),
    large: "".concat(large, "px"),
    xlarge: "".concat(xlarge, "px")
  };
};

var getGlobalTheme = function getGlobalTheme(scale, systemPalette) {
  var borderWidths = getBorderWidths(scale.borderWidth);
  var fontSizes = getFontSizes(scale.fontSize);
  var lineHeights = getLineHeights(fontSizes);
  var radii = getRadii(scale.radius);
  var sizes = getSizes(scale.size);
  var space = getSpace(scale.space);
  var shadows = getShadows(systemPalette);
  var breakpoints = getBreakpoints(scale.breakpoints);
  return {
    borderWidths: borderWidths,
    breakpoints: breakpoints,
    colors: Object.assign({
      // NOTE: Do NOT allow modify palette, it is fixed from @hero-design/colors
      palette: palette$b
    }, systemPalette),
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    radii: radii,
    shadows: shadows,
    sizes: sizes,
    space: space
  };
};

var getAlertTheme = function getAlertTheme(theme) {
  var space = {
    iconDefaultMarginTop: "".concat(theme.space.xxsmall, "px"),
    iconDefaultMarginRight: "".concat(theme.space.medium, "px"),
    iconCompactMarginTop: "".concat(theme.space.xsmall, "px"),
    iconCompactMarginRight: "".concat(theme.space.small, "px"),
    defaultPadding: "".concat(theme.space.medium, "px"),
    compactPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    titleMarginBottom: "".concat(theme.space.xsmall, "px")
  };
  var fontSizes = {
    title: "".concat(theme.fontSizes.large, "px"),
    content: "".concat(theme.fontSizes.medium, "px")
  };
  var lineHeights = {
    title: "".concat(theme.lineHeights.large, "px"),
    content: "".concat(theme.lineHeights.medium, "px"),
    iconDefault: "".concat(theme.lineHeights.large, "px"),
    iconCompact: "".concat(theme.lineHeights.medium, "px")
  };
  var fontWeights = {
    text: theme.fontWeights.regular,
    title: theme.fontWeights.semiBold
  };
  var borderWidths = {
    wrapper: "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    wrapper: "".concat(theme.radii.base, "px")
  };
  var colors = {
    text: theme.colors.text,
    bgSuccess: theme.colors.successBackground,
    bgInfo: theme.colors.infoBackground,
    bgWarning: theme.colors.warningBackground,
    bgDanger: theme.colors.dangerBackground,
    bgError: theme.colors.errorBackground,
    borderSuccess: theme.colors.success,
    borderInfo: theme.colors.infoBorder,
    borderWarning: theme.colors.warning,
    borderDanger: theme.colors.danger,
    borderError: theme.colors.error,
    textInfo: theme.colors.text,
    textSuccess: theme.colors.text,
    textWarning: theme.colors.text,
    textDanger: theme.colors.text,
    textError: theme.colors.text
  };
  return {
    space: space,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights,
    borderWidths: borderWidths,
    radii: radii,
    colors: colors
  };
};

var getBadgeTheme = function getBadgeTheme(theme) {
  var colors = {
    basicBackground: theme.colors.defaultLightBackground,
    basicText: theme.colors.text,
    basicStatusText: theme.colors.disabledText,
    text: theme.colors.lightText,
    border: theme.colors.defaultBorder,
    warning: theme.colors.warning,
    success: theme.colors.success,
    error: theme.colors.error,
    danger: theme.colors.danger,
    primary: theme.colors.primary,
    archived: theme.colors.bodyText,
    primaryBackground: theme.colors.primaryLightBackground,
    successBackground: theme.colors.successBackground,
    warningBackground: theme.colors.warningBackground,
    dangerBackground: theme.colors.dangerBackground,
    errorBackground: theme.colors.errorBackground,
    archivedBackground: theme.colors.neutralLightBackground,
    primaryText: theme.colors.primary,
    successText: theme.colors.activeSuccess,
    warningText: theme.colors.warningDark,
    dangerText: theme.colors.activeDanger,
    errorText: theme.colors.activeError,
    archivedText: theme.colors.bodyText
  };
  var fontWeights = {
    "default": theme.fontWeights.semiBold
  };
  var fontSizes = {
    "default": "".concat(theme.fontSizes.medium, "px")
  };
  var shadows = {
    "default": theme.shadows["default"]
  };
  var sizes = {
    height: "".concat(theme.sizes.large, "px"),
    minWidth: "".concat(theme.sizes.large, "px")
  };
  var space = {
    right: 0,
    narrowPadding: "".concat(theme.space.xsmall, "px"),
    widePadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px")
  };
  var radii = {
    "default": "".concat(theme.sizes.large / 2, "px"),
    status: '50%'
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  return {
    colors: colors,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    shadows: shadows,
    sizes: sizes,
    space: space,
    radii: radii,
    borderWidths: borderWidths
  };
};

var getBannerTheme$1 = function getBannerTheme(theme) {
  var space = {
    iconDefaultMarginTop: "".concat(theme.space.xxsmall, "px"),
    iconCompactMarginTop: "".concat(theme.space.xsmall, "px"),
    iconDefaultMarginRight: "".concat(theme.space.medium, "px"),
    iconCompactMarginRight: "".concat(theme.space.small, "px"),
    titleMarginBottom: "".concat(theme.space.xsmall, "px"),
    defaultPadding: "".concat(theme.space.medium, "px"),
    compactPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px")
  };
  var fontSizes = {
    title: "".concat(theme.fontSizes.large, "px"),
    content: "".concat(theme.fontSizes.medium, "px")
  };
  var lineHeights = {
    title: "".concat(theme.lineHeights.large, "px"),
    content: "".concat(theme.lineHeights.medium, "px"),
    iconDefault: "".concat(theme.lineHeights.large, "px"),
    iconCompact: "".concat(theme.lineHeights.medium, "px")
  };
  var fontWeights = {
    text: theme.fontWeights.regular,
    title: theme.fontWeights.semiBold
  };
  var colors = {
    bgInfo: theme.colors.infoDarkBackground,
    bgSuccess: theme.colors.successDarkBackground,
    bgWarning: theme.colors.warningDarkBackground,
    bgDanger: theme.colors.dangerDarkBackground,
    bgError: theme.colors.errorDarkBackground,
    success: theme.colors.successDark,
    info: theme.colors.info,
    warning: theme.colors.warningDark,
    danger: theme.colors.dangerDark,
    error: theme.colors.errorDark,
    textInfo: theme.colors.text,
    textSuccess: theme.colors.text,
    textWarning: theme.colors.text,
    textDanger: theme.colors.text,
    textError: theme.colors.text,
    borderInfo: theme.colors.infoDarkBackground,
    borderSuccess: theme.colors.successDarkBackground,
    borderWarning: theme.colors.warningDarkBackground,
    borderDanger: theme.colors.dangerDarkBackground,
    borderError: theme.colors.errorDarkBackground,
    closeButton: theme.colors.text
  };
  var borderWidths = {
    "default": 0
  };
  var radii = {
    "default": 0
  };
  return {
    space: space,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights,
    colors: colors,
    radii: radii,
    borderWidths: borderWidths
  };
};

var getBreadcrumbTheme = function getBreadcrumbTheme(theme) {
  var colors = {
    item: theme.colors.subduedText,
    itemActive: theme.colors.text
  };
  var space = {
    backIconMarginRight: "".concat(theme.space.xsmall, "px"),
    separatorMargin: "auto ".concat(theme.space.small, "px")
  };
  var fontSizes = {
    item: "".concat(theme.fontSizes.medium, "px"),
    itemActive: "".concat(theme.fontSizes.medium, "px")
  };
  var fontWeights = {
    item: theme.fontWeights.regular,
    itemActive: theme.fontWeights.semiBold
  };
  var lineHeights = {
    item: "".concat(theme.lineHeights.medium, "px"),
    itemActive: "".concat(theme.lineHeights.medium, "px")
  };
  return {
    colors: colors,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights
  };
};

var getButtonTheme$1 = function getButtonTheme(theme) {
  var sizes = {
    small: "".concat(theme.sizes.large, "px"),
    medium: "".concat(theme.sizes.xlarge, "px"),
    large: "".concat(theme.sizes.xxxlarge, "px"),
    smallMinWidth: '50px',
    mediumMinWidth: '80px',
    largeMinWidth: '100px'
  };
  var space = {
    smallPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    mediumPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    largePadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    iconPadding: "".concat(theme.space.small, "px"),
    inlineTextPadding: '0px'
  };
  var fontSizes = {
    small: "".concat(theme.fontSizes.small, "px"),
    medium: "".concat(theme.fontSizes.medium, "px"),
    large: "".concat(theme.fontSizes.xlarge, "px")
  };
  var fontWeights = {
    text: theme.fontWeights.regular
  };
  var lineHeights = {
    small: "".concat(theme.lineHeights.small, "px"),
    medium: "".concat(theme.lineHeights.medium, "px"),
    large: "".concat(theme.lineHeights.xlarge, "px")
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    small: "calc(".concat(sizes.small, " / 2)"),
    medium: "calc(".concat(sizes.medium, " / 2)"),
    large: "calc(".concat(sizes.large, " / 2)")
  };
  var colors = {
    text: {
      filledPrimary: theme.colors.lightText,
      filledDanger: theme.colors.lightText,
      filledSuccess: theme.colors.lightText,
      filledWarning: theme.colors.lightText,
      filledError: theme.colors.lightText,
      primary: theme.colors.primary,
      lightPrimary: theme.colors.lightPrimary,
      hoverPrimary: theme.colors.hoverPrimary,
      activePrimary: theme.colors.activePrimary,
      loadingPrimary: theme.colors.activePrimary,
      danger: theme.colors.danger,
      hoverDanger: theme.colors.hoverDanger,
      activeDanger: theme.colors.activeDanger,
      loadingDanger: theme.colors.activeDanger,
      success: theme.colors.success,
      hoverSuccess: theme.colors.hoverSuccess,
      activeSuccess: theme.colors.activeSuccess,
      loadingSuccess: theme.colors.activeSuccess,
      warning: theme.colors.warning,
      hoverWarning: theme.colors.hoverWarning,
      activeWarning: theme.colors.activeWarning,
      loadingWarning: theme.colors.activeWarning,
      error: theme.colors.error,
      hoverError: theme.colors.hoverError,
      activeError: theme.colors.activeError,
      loadingError: theme.colors.activeError,
      disabledText: theme.colors.subduedText,
      basicTransparent: theme.colors.lightText,
      linkSubdued: theme.colors.subduedText,
      defaultText: theme.colors.text,
      disabledLightText: theme.colors.disabledText
    },
    background: {
      primary: theme.colors.primary,
      hoverPrimary: theme.colors.hoverPrimary,
      activePrimary: theme.colors.activePrimary,
      loadingPrimary: theme.colors.activePrimary,
      danger: theme.colors.danger,
      hoverDanger: theme.colors.hoverDanger,
      activeDanger: theme.colors.activeDanger,
      loadingDanger: theme.colors.activeDanger,
      success: theme.colors.success,
      hoverSuccess: theme.colors.hoverSuccess,
      activeSuccess: theme.colors.activeSuccess,
      loadingSuccess: theme.colors.activeSuccess,
      warning: theme.colors.warning,
      hoverWarning: theme.colors.hoverWarning,
      activeWarning: theme.colors.activeWarning,
      loadingWarning: theme.colors.activeWarning,
      error: theme.colors.error,
      hoverError: theme.colors.hoverError,
      activeError: theme.colors.activeError,
      loadingError: theme.colors.activeError,
      disabledBackground: theme.colors.neutralLightBackground,
      defaultBackground: theme.colors.defaultBackground,
      defaultLightBackground: theme.colors.defaultLightBackground
    },
    primary: theme.colors.primary,
    hoverPrimary: theme.colors.hoverPrimary,
    activePrimary: theme.colors.activePrimary,
    loadingPrimary: theme.colors.activePrimary,
    danger: theme.colors.danger,
    hoverDanger: theme.colors.hoverDanger,
    activeDanger: theme.colors.activeDanger,
    loadingDanger: theme.colors.activeDanger,
    success: theme.colors.success,
    hoverSuccess: theme.colors.hoverSuccess,
    activeSuccess: theme.colors.activeSuccess,
    loadingSuccess: theme.colors.activeSuccess,
    warning: theme.colors.warning,
    hoverWarning: theme.colors.hoverWarning,
    activeWarning: theme.colors.activeWarning,
    loadingWarning: theme.colors.activeWarning,
    error: theme.colors.error,
    hoverError: theme.colors.hoverError,
    activeError: theme.colors.activeError,
    loadingError: theme.colors.activeError,
    basicTransparent: theme.colors.lightText,
    defaultBorder: theme.colors.disabledText
  };
  return {
    sizes: sizes,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    borderWidths: borderWidths,
    radii: radii,
    colors: colors
  };
};

var getCardTheme = function getCardTheme(theme) {
  var colors = {
    border: theme.colors.defaultBorder,
    background: theme.colors.defaultLightBackground,
    headerBasicBackground: theme.colors.defaultLightBackground,
    headerInfoBackground: theme.colors.infoHeaderBackground,
    headerGreyBackground: theme.colors.primaryHeaderBackground,
    headerPrimaryBackground: theme.colors.primary,
    headerDefaultText: theme.colors.text,
    headerInfoText: theme.colors.text,
    headerLightText: theme.colors.lightText,
    contentText: theme.colors.bodyText,
    contentBorder: theme.colors.defaultBorder,
    contentTextExtra: theme.colors.subduedText
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.medium, "px")
  };
  var space = {
    headerMediumPadding: "".concat(theme.space.medium, "px"),
    headerSmallPadding: "".concat(theme.space.small, "px"),
    headerMargin: "-".concat(theme.borderWidths.base, "px -").concat(theme.borderWidths.base, "px 0"),
    contentMediumPadding: "".concat(theme.space.medium, "px"),
    contentSmallPadding: "".concat(theme.space.small, "px"),
    imgMargin: "-".concat(theme.borderWidths.base, "px -").concat(theme.borderWidths.base, "px 0")
  };
  var fontWeights = {
    header: theme.fontWeights.regular,
    content: theme.fontWeights.regular
  };
  var fontSizes = {
    header: "".concat(theme.fontSizes.large, "px"),
    content: "".concat(theme.fontSizes.medium, "px"),
    contentExtra: "".concat(theme.fontSizes.small, "px")
  };
  var lineHeights = {
    header: "".concat(theme.lineHeights.large, "px"),
    content: "".concat(theme.lineHeights.medium, "px"),
    contentExtra: "".concat(theme.lineHeights.small, "px")
  };
  return {
    colors: colors,
    borderWidths: borderWidths,
    radii: radii,
    space: space,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    lineHeights: lineHeights
  };
};

var getCarouselTheme = function getCarouselTheme(theme) {
  var colors = {
    light: theme.colors.defaultLightBackground,
    dark: theme.colors.neutralBackground
  };
  var space = {
    "default": "".concat(theme.space.large, "px"),
    listRowMargin: "0 ".concat(theme.space.xxsmall, "px"),
    listColumnMargin: "".concat(theme.space.xsmall, "px ").concat(theme.space.xxsmall, "px"),
    navigationButtonColumnMargin: "".concat(theme.space.large / 2, "px"),
    slidePadding: "0px ".concat(theme.space.small, "px"),
    containerVerticalPadding: "".concat(theme.space.xlarge, "px"),
    containerHorizontalPadding: "".concat(theme.space.large, "px")
  };
  var sizes = {
    basic: "".concat(theme.sizes.xsmall, "px"),
    "default": "".concat(theme.sizes.medium, "px"),
    active: "".concat(theme.sizes.large, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  var fontSizes = {
    navigationButton: "".concat(theme.fontSizes.xxxlarge, "px")
  };
  return {
    colors: colors,
    space: space,
    sizes: sizes,
    radii: radii,
    fontSizes: fontSizes
  };
};

var getColumnChartTheme = function getColumnChartTheme(theme) {
  var colors = {
    xAxisTickColor: theme.colors.subduedText,
    yAxisTickColor: theme.colors.subduedText,
    verticalTitleFillColor: theme.colors.subduedText,
    gridLineBackgroundColor: theme.colors.neutralBackground,
    tooltipBackgroundColor: theme.colors.defaultLightBackground,
    totalBackgroundColor: theme.colors.defaultLightBackground
  };
  var radii = {
    tooltip: theme.radii.base,
    bar: {
      large: theme.radii.base * 2,
      medium: theme.radii.base,
      inactive: theme.radii.base
    },
    tooltipArrow: theme.radii.base / 2,
    totalRect: theme.radii.base * 3
  };
  var borderWidth = {
    totalRect: theme.borderWidths.base
  };
  var sizes = {
    tooltipArrow: theme.sizes.small,
    barWidth: {
      large: theme.sizes.xsmall * 3,
      medium: theme.sizes.small,
      inactive: theme.sizes.xsmall
    },
    verticalTitleY: -theme.sizes.xlarge * 2,
    navigationButton: theme.sizes.large,
    totalSvgHeight: theme.sizes.large,
    totalLetterWidth: theme.sizes.small
  };
  var space = {
    tooltipPadding: theme.space.small,
    tooltipChildMargin: theme.space.small,
    legendContainerMarginTop: theme.space.small,
    legendContainerChildMarginBottom: theme.space.small,
    legendBoxGap: theme.space.medium,
    columnChartMarginTop: theme.space.medium,
    columnChartMarginRight: theme.space.large,
    columnChartMarginBottom: theme.space.medium,
    columnChartMarginLeft: theme.space.xxxxlarge + theme.space.large,
    columnChartMarginLeftWithNavigation: theme.space.large * 2,
    xAxisTransform: theme.space.xsmall,
    xAxisLabelHorizontalPadding: theme.space.small,
    yAxisTransform: -theme.space.xsmall,
    barHoverTransform: {
      large: theme.space.xsmall,
      medium: theme.space.xxsmall
    },
    barMarginTop: theme.space.xsmall,
    moreTooltipPadding: theme.space.small,
    totalSvgHorizontalPadding: theme.space.small,
    chartContentMarginLeft: theme.space.xlarge,
    navigationButtonMarginLeft: theme.space.small
  };
  var fontWeights = {
    verticalTitle: theme.fontWeights.regular,
    xAxisTick: theme.fontWeights.regular,
    totalText: theme.fontWeights.semiBold,
    yAxisTick: theme.fontWeights.regular
  };
  var fontSizes = {
    yAxisTick: "".concat(theme.fontSizes.xsmall, "px"),
    verticalTitle: "".concat(theme.fontSizes.small, "px"),
    xAxisTick: "".concat(theme.fontSizes.xsmall, "px"),
    totalText: "".concat(theme.fontSizes.xsmall, "px")
  };
  var lineHeights = {
    xAxisTick: "".concat(theme.lineHeights.xsmall, "px"),
    yAxisTick: "".concat(theme.lineHeights.xsmall, "px"),
    verticalTitle: "".concat(theme.lineHeights.small, "px")
  };
  var boxShadows = {
    tooltip: '0 0 10px 0 rgba(0, 0, 0, 0.2)',
    barDropShadow: '1px 1px 4px rgb(0 0 0 / 0.3)'
  };
  return {
    colors: colors,
    radii: radii,
    space: space,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    boxShadows: boxShadows,
    sizes: sizes,
    borderWidth: borderWidth
  };
};

var getCheckboxTheme = function getCheckboxTheme(theme) {
  var colors = {
    text: theme.colors.text,
    disabledText: theme.colors.disabledText,
    defaultBorder: theme.colors.disabledText,
    checkedBorder: theme.colors.primary,
    defaultBackground: theme.colors.defaultLightBackground,
    checkedBackground: theme.colors.primary,
    disabledBackground: theme.colors.defaultBackground,
    defaultCheckmark: theme.colors.lightText,
    disabledCheckmark: theme.colors.disabledText,
    indeterminateBoxBackground: theme.colors.primary,
    buttonText: theme.colors.text,
    buttonDefaultBorder: theme.colors.defaultBorder,
    buttonHover: theme.colors.activePrimary,
    buttonDisabledText: theme.colors.disabledText,
    buttonDisabledBackground: theme.colors.defaultBackground,
    buttonSelectedText: theme.colors.lightText,
    buttonSelectedBackground: theme.colors.primary,
    buttonDisabledSelectedText: theme.colors.lightText,
    buttonDisabledSelectedBackground: theme.colors.neutralBackground
  };
  var space = {
    labelPaddingLeft: "".concat(theme.space.large, "px"),
    top: "".concat((theme.lineHeights.medium - theme.sizes.medium) / 2, "px"),
    markTop: "".concat(theme.sizes.medium / 2, "px"),
    markLeft: "".concat(theme.sizes.medium / 2, "px"),
    marginTop: "".concat(theme.sizes.small, "px"),
    marginLeft: "".concat(theme.sizes.large, "px"),
    indeterminateBoxTop: "".concat((theme.lineHeights.medium - theme.sizes.small) / 2, "px"),
    indeterminateBoxLeft: "".concat(theme.sizes.small / 2, "px"),
    buttonSmallPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    buttonMediumPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    buttonLargePadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    buttonSmallMargin: "".concat(theme.space.xsmall, "px 0 0 ").concat(theme.space.xsmall, "px"),
    buttonMediumMargin: "".concat(theme.space.small, "px 0 0 ").concat(theme.space.small, "px"),
    buttonLargeMargin: "".concat(theme.space.small, "px 0 0 ").concat(theme.space.small, "px"),
    buttonGroupSmallMargin: "-".concat(theme.space.xsmall, "px 0 0 -").concat(theme.space.xsmall, "px"),
    buttonGroupMediumMargin: "-".concat(theme.space.small, "px 0 0 -").concat(theme.space.small, "px"),
    buttonGroupLargeMargin: "-".concat(theme.space.small, "px 0 0 -").concat(theme.space.small, "px")
  };
  var sizes = {
    height: "".concat(theme.sizes.medium, "px"),
    width: "".concat(theme.sizes.medium, "px"),
    markHeight: "".concat(theme.sizes.small, "px"),
    markWidth: "".concat(theme.sizes.xsmall, "px"),
    indeterminateBoxHeight: "".concat(theme.sizes.small, "px"),
    indeterminateBoxWidth: "".concat(theme.sizes.small, "px"),
    buttonSmall: "".concat(theme.sizes.large, "px"),
    buttonMedium: "".concat(theme.sizes.xlarge, "px"),
    buttonLarge: "".concat(theme.sizes.xxxlarge, "px"),
    buttonGroupSmallWidth: "calc(100% + ".concat(theme.space.xsmall, "px)"),
    buttonGroupMediumWidth: "calc(100% + ".concat(theme.space.small, "px)"),
    buttonGroupLargeWidth: "calc(100% + ".concat(theme.space.small, "px)")
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px"),
    indeterminateBox: "".concat(theme.radii.base / 2, "px")
  };
  var fontSizes = {
    "default": "".concat(theme.fontSizes.medium, "px"),
    buttonsmall: "".concat(theme.fontSizes.small, "px"),
    buttonMedium: "".concat(theme.fontSizes.medium, "px"),
    buttonLarge: "".concat(theme.fontSizes.xlarge, "px")
  };
  var lineHeights = {
    "default": "".concat(theme.lineHeights.medium, "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.regular
  };
  return {
    colors: colors,
    space: space,
    sizes: sizes,
    borderWidths: borderWidths,
    radii: radii,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights
  };
};

var getCommentTheme = function getCommentTheme(theme) {
  var colors = {
    author: theme.colors.text,
    authorDetails: theme.colors.disabledText,
    time: theme.colors.disabledText,
    highlight: theme.colors.defaultBackground,
    content: theme.colors.bodyText
  };
  var sizes = {
    avatarSize: "".concat(theme.sizes.xlarge, "px")
  };
  var space = {
    marginBottom: "".concat(theme.space.medium, "px"),
    nestedMargin: "".concat(theme.space.medium, "px 0 0 ").concat(theme.space.xlarge, "px"),
    avatarMarginRight: "".concat(theme.space.medium, "px"),
    avatarMarginLeft: "".concat(theme.space.small, "px"),
    padding: "".concat(theme.space.small, "px"),
    timeSeparatorPadding: "0 ".concat(theme.space.small, "px"),
    contentMarginTop: "".concat(theme.space.xsmall, "px"),
    reactionMarginTop: "".concat(theme.space.xsmall, "px"),
    editorActionsPadding: "".concat(theme.space.small, "px")
  };
  var fontSizes = {
    author: "".concat(theme.fontSizes.medium, "px"),
    authorDetails: "".concat(theme.fontSizes.small, "px"),
    content: "".concat(theme.fontSizes.medium, "px"),
    time: "".concat(theme.fontSizes.small, "px")
  };
  var fontWeights = {
    author: theme.fontWeights.semiBold,
    authorDetails: theme.fontWeights.semiBold,
    time: theme.fontWeights.regular,
    content: theme.fontWeights.regular
  };
  var lineHeights = {
    author: "".concat(theme.lineHeights.medium, "px"),
    authorDetails: "".concat(theme.lineHeights.small, "px"),
    content: "".concat(theme.lineHeights.medium, "px"),
    time: "".concat(theme.lineHeights.small, "px")
  };
  var radii = {
    container: "".concat(theme.radii.base, "px")
  };
  return {
    colors: colors,
    sizes: sizes,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    radii: radii
  };
};

var getDatePickerTheme = function getDatePickerTheme(theme) {
  var colors = {
    text: theme.colors.text,
    disabledText: theme.colors.subduedText,
    selectedText: theme.colors.lightText,
    todayText: theme.colors.primary,
    hoverBackground: theme.colors.primaryLightBackground,
    selectedBackground: theme.colors.primary,
    todayBorder: theme.colors.primary,
    inRangeBackground: theme.colors.primaryLightBackground,
    inRangeHoverBackground: theme.colors.hoverPrimary,
    inRangeHoverText: theme.colors.lightText,
    rangeBorder: theme.colors.defaultBorder,
    rangeFocusBorder: theme.colors.primary,
    rangeFocusBar: theme.colors.primary,
    invalidBorder: theme.colors.danger,
    invalidRangeFocusBar: theme.colors.danger
  };
  var space = {
    navigationPadding: "".concat(theme.space.medium, "px ").concat(theme.space.medium, "px ").concat(theme.space.xsmall, "px"),
    monthYearPadding: "0 ".concat(theme.space.xsmall, "px"),
    calendarPadding: "".concat(theme.space.small, "px"),
    dayMargin: "".concat(theme.space.xsmall, "px 0"),
    dayPadding: " 0 ".concat(theme.space.small, "px"),
    monthPadding: "".concat(theme.space.xxsmall, "px 0"),
    monthMargin: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    monthSelectedPadding: "0px ".concat(theme.space.small, "px"),
    monthSelectedMargin: "".concat(theme.space.xsmall, "px 0px")
  };
  var sizes = {
    month: '210px',
    monthYear: '100px',
    day: "".concat(theme.sizes.large, "px"),
    rangeFocusBar: "".concat(theme.sizes.xxsmall, "px"),
    fortnightlyWidth: '150px',
    singleSelectWidth: '150px'
  };
  var fontSizes = {
    day: "".concat(theme.fontSizes.medium, "px"),
    month: "".concat(theme.fontSizes.medium, "px")
  };
  var fontWeights = {
    day: theme.fontWeights.regular,
    month: theme.fontWeights.regular,
    selectedDay: theme.fontWeights.bold,
    selectedMonth: theme.fontWeights.bold
  };
  var lineHeights = {
    day: "".concat(theme.lineHeights.medium, "px"),
    month: "".concat(theme.lineHeights.medium, "px")
  };
  var borderWidths = {
    range: "".concat(theme.borderWidths.base, "px"),
    day: "".concat(theme.borderWidths.base, "px"),
    month: "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    day: "".concat(theme.radii.base, "px"),
    month: "".concat(theme.radii.base, "px"),
    range: "".concat(theme.radii.base, "px")
  };
  var shadows = {
    dropdown: theme.shadows["default"],
    range: theme.shadows.primary,
    invalidFocus: theme.shadows.danger
  };
  return {
    colors: colors,
    space: space,
    sizes: sizes,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    borderWidths: borderWidths,
    radii: radii,
    shadows: shadows
  };
};

var getDividerTheme = function getDividerTheme(theme) {
  var colors = {
    "default": theme.colors.defaultBorder
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var space = {
    xsmallMarginX: "0 ".concat(theme.space.xsmall, "px"),
    smallMarginX: "0 ".concat(theme.space.small, "px"),
    mediumMarginX: "0 ".concat(theme.space.medium, "px"),
    largeMarginX: "0 ".concat(theme.space.large, "px"),
    xlargeMarginX: "0 ".concat(theme.space.xlarge, "px"),
    xsmallMarginY: "".concat(theme.space.xsmall, "px 0"),
    smallMarginY: "".concat(theme.space.small, "px 0"),
    mediumMarginY: "".concat(theme.space.medium, "px 0"),
    largeMarginY: "".concat(theme.space.large, "px 0"),
    xlargeMarginY: "".concat(theme.space.xlarge, "px 0")
  };
  return {
    colors: colors,
    borderWidths: borderWidths,
    space: space
  };
};

var getDropdownTheme = function getDropdownTheme(theme) {
  var colors = {
    background: theme.colors.defaultLightBackground
  };
  var space = {
    margin: theme.space.xsmall
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  var shadows = {
    "default": theme.shadows["default"]
  };
  return {
    colors: colors,
    space: space,
    radii: radii,
    shadows: shadows
  };
};

var getEmptyTheme$1 = function getEmptyTheme(theme) {
  var fontSizes = {
    text: "".concat(theme.fontSizes.medium, "px"),
    title: "".concat(theme.fontSizes.xlarge, "px")
  };
  var sizes = {
    wrapperSmallMaxWidth: '400px',
    wrapperMediumMaxWidth: '600px'
  };
  var colors = {
    text: theme.colors.bodyText
  };
  var space = {
    wrapperPadding: "".concat(theme.space.medium, "px"),
    titleBottomMargin: "".concat(theme.space.small, "px"),
    textGroupMarginTop: "".concat(theme.space.medium, "px"),
    extraMarginTop: "".concat(theme.space.xxxxlarge, "px")
  };
  var lineHeights = {
    text: "".concat(theme.lineHeights.medium, "px"),
    title: "".concat(theme.lineHeights.xlarge, "px")
  };
  var fontWeights = {
    title: theme.fontWeights.bold
  };
  return {
    fontSizes: fontSizes,
    sizes: sizes,
    colors: colors,
    space: space,
    lineHeights: lineHeights,
    fontWeights: fontWeights
  };
};

var getFileTheme = function getFileTheme(theme) {
  var sizes = {
    dragAndDropMinHeight: '144px'
  };
  var space = {
    dragAndDropPadding: "".concat(theme.space.xlarge, "px ").concat(theme.space.xlarge, "px")
  };
  var radii = {
    dragAndDrop: "".concat(theme.radii.base, "px")
  };
  var colors = {
    dragAndDropBackground: theme.colors.defaultBackground,
    dragAndDropBorder: theme.colors.defaultBorder,
    dragAndDropBorderHover: theme.colors.primary
  };
  return {
    sizes: sizes,
    space: space,
    radii: radii,
    colors: colors
  };
};

var getFormTheme = function getFormTheme(theme) {
  var space = {
    smallIconPadding: "".concat(theme.space.xsmall, "px"),
    mediumIconPadding: "".concat(theme.space.small, "px"),
    largeIconPadding: "".concat(theme.space.small, "px")
  };
  var colors = {
    errorText: theme.colors.danger,
    errorBorder: theme.colors.danger,
    warningBorder: theme.colors.warning
  };
  var shadows = {
    focus: theme.shadows.primary,
    errorFocus: theme.shadows.danger,
    warningFocus: theme.shadows.warning
  };
  return {
    space: space,
    colors: colors,
    shadows: shadows
  };
};

var getIconTheme = function getIconTheme(theme) {
  var fontSizes = {
    inherit: 'inherit',
    xsmall: "".concat(theme.fontSizes.small, "px"),
    small: "".concat(theme.fontSizes.medium, "px"),
    medium: "".concat(theme.fontSizes.large, "px"),
    large: "".concat(theme.fontSizes.xlarge, "px"),
    xlarge: "".concat(theme.fontSizes.xxlarge, "px")
  };
  var sizes = fontSizes;
  var colors = {
    info: theme.colors.info,
    inherit: 'inherit',
    text: theme.colors.text,
    subduedText: theme.colors.subduedText,
    disabledText: theme.colors.disabledText,
    primary: theme.colors.primary,
    danger: theme.colors.danger,
    warning: theme.colors.warning,
    success: theme.colors.success,
    error: theme.colors.error
  };
  return {
    fontSizes: fontSizes,
    sizes: sizes,
    colors: colors
  };
};

var getInPageNavigationTheme = function getInPageNavigationTheme(theme) {
  var colors = {
    itemText: theme.colors.text,
    itemHoverBackgound: "".concat(theme.colors.primary, "0d"),
    itemClickedBackground: theme.colors.primaryLightBackground
  };
  var space = {
    itemPadding: "".concat(theme.space.small, "px"),
    itemMarginBottom: "".concat(theme.space.xsmall, "px"),
    itemMarginRight: "".concat(theme.space.xsmall, "px"),
    itemGap: "".concat(theme.space.small, "px")
  };
  var radii = {
    item: "".concat(theme.radii.base, "px")
  };
  return {
    colors: colors,
    space: space,
    radii: radii
  };
};

var getInputTheme = function getInputTheme(theme) {
  var space = {
    smallPadding: "".concat(theme.space.xsmall, "px"),
    mediumPadding: "".concat(theme.space.small, "px"),
    largePadding: "".concat(theme.space.small, "px"),
    tagMargin: "".concat(theme.space.xsmall, "px")
  };
  var fontSizes = {
    small: "".concat(theme.fontSizes.small, "px"),
    medium: "".concat(theme.fontSizes.medium, "px"),
    large: "".concat(theme.fontSizes.large, "px")
  };
  var lineHeights = {
    small: "".concat(theme.lineHeights.small, "px"),
    medium: "".concat(theme.lineHeights.medium, "px"),
    large: "".concat(theme.lineHeights.large, "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.regular
  };
  var sizes = {
    small: "".concat(theme.sizes.large, "px"),
    medium: "".concat(theme.sizes.xlarge, "px"),
    large: "".concat(theme.sizes.xxlarge, "px"),
    textAreaSmall: "".concat((theme.borderWidths.base + theme.space.xsmall + theme.lineHeights.large) * 2, "px"),
    textAreaMedium: "".concat((theme.borderWidths.base + theme.space.small + theme.lineHeights.medium) * 2, "px"),
    textAreaLarge: "".concat((theme.borderWidths.base + theme.space.small + theme.lineHeights.small) * 2, "px"),
    tagInputMinWidth: "".concat(theme.sizes.xxxlarge, "px")
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  var colors = {
    text: theme.colors.text,
    disabledText: theme.colors.subduedText,
    placeholder: theme.colors.subduedText,
    border: theme.colors.defaultBorder,
    focusBorder: theme.colors.primary,
    background: theme.colors.defaultLightBackground,
    disabledBackground: theme.colors.defaultBackground,
    invalidBorder: theme.colors.danger,
    tagBackground: theme.colors.defaultGreyBackground
  };
  var shadows = {
    focus: theme.shadows.primary,
    invalidFocus: theme.shadows.danger
  };
  return {
    space: space,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights,
    sizes: sizes,
    borderWidths: borderWidths,
    radii: radii,
    colors: colors,
    shadows: shadows
  };
};

var getLegendTheme = function getLegendTheme(theme) {
  var radii = {
    legendCircle: '50%'
  };
  var sizes = {
    legendWidth: "".concat(theme.space.small, "px"),
    legendHeight: "".concat(theme.space.small, "px")
  };
  var space = {
    legendCircleMarginRight: "".concat(theme.space.small, "px")
  };
  return {
    radii: radii,
    space: space,
    sizes: sizes
  };
};

var getMenuTheme = function getMenuTheme(theme) {
  var colors = {
    background: theme.colors.defaultLightBackground,
    itemActiveBackground: theme.colors.defaultGreyBackground,
    item: theme.colors.text,
    itemDisabled: theme.colors.disabledText,
    itemDanger: theme.colors.danger
  };
  var space = {
    itemPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.medium, "px"),
    iconMarginRight: "".concat(theme.space.small, "px"),
    rightElementMarginLeft: "".concat(theme.space.xlarge, "px")
  };
  var fontSizes = {
    item: "".concat(theme.fontSizes.medium, "px"),
    icon: "".concat(theme.fontSizes.small, "px")
  };
  var fontWeights = {
    item: theme.fontWeights.regular,
    itemActive: theme.fontWeights.semiBold
  };
  var lineHeights = {
    item: "".concat(theme.lineHeights.medium, "px"),
    icon: "".concat(theme.lineHeights.small, "px")
  };
  return {
    colors: colors,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights
  };
};

var colorWithOpacity = function colorWithOpacity(color, opacity) {
  return "".concat(color).concat((opacity * 255).toString(16));
};
var getModalTheme = function getModalTheme(theme) {
  var colors = {
    headerBasicBackground: theme.colors.defaultLightBackground,
    headerBasic: theme.colors.text,
    headerPrimaryBackground: theme.colors.primaryHeaderBackground,
    headerPrimary: theme.colors.text,
    contentBackground: theme.colors.defaultLightBackground,
    containerBackground: colorWithOpacity(theme.colors.defaultDarkBackground, 0.6),
    body: theme.colors.bodyText
  };
  var sizes = {
    contentSmallMinWidth: '300px',
    contentSmallMaxWidth: '400px',
    contentMediumMinWidth: '400px',
    contentMediumMaxWidth: '600px',
    contentLargeMinWidth: '600px',
    contentLargeMaxWidth: '800px',
    contentExtraLargeMinWidth: '800px',
    contentExtraLargeMaxWidth: '960px',
    contentDoubleExtraLargeMinWidth: '960px',
    contentDoubleExtraLargeMaxWidth: '1200px'
  };
  var space = {
    headerPadding: "".concat(theme.space.medium, "px ").concat(theme.space.large, "px"),
    bodyPadding: "".concat(theme.space.medium, "px ").concat(theme.space.large, "px"),
    popUpBodyPadding: "".concat(theme.space.medium, "px ").concat(theme.space.large, "px 0 ").concat(theme.space.large, "px"),
    footerPadding: "".concat(theme.space.medium, "px ").concat(theme.space.large, "px"),
    popUpIconMarginRight: "".concat(theme.space.medium, "px"),
    popUpTitleMarginBottom: "".concat(theme.space.small, "px"),
    wrapperPaddingY: '2.5vh'
  };
  var fontSizes = {
    header: "".concat(theme.fontSizes.xlarge, "px"),
    body: "".concat(theme.fontSizes.medium, "px"),
    popUpIcon: "".concat(theme.fontSizes.xxxxxlarge, "px")
  };
  var fontWeights = {
    header: theme.fontWeights.semiBold,
    body: theme.fontWeights.regular
  };
  var lineHeights = {
    header: "".concat(theme.lineHeights.xlarge, "px"),
    body: "".concat(theme.lineHeights.medium, "px")
  };
  var radii = {
    header: "".concat(theme.radii.medium, "px ").concat(theme.radii.medium, "px 0 0"),
    content: "".concat(theme.radii.medium, "px")
  };
  return {
    colors: colors,
    sizes: sizes,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    radii: radii
  };
};

var getNotificationTheme = function getNotificationTheme(theme) {
  var space = {
    iconMarginTop: "".concat(theme.space.xxsmall, "px"),
    iconMarginRight: "".concat(theme.space.medium, "px"),
    padding: "".concat(theme.space.medium, "px"),
    titleMarginBottom: "".concat(theme.space.xsmall, "px")
  };
  var fontSizes = {
    title: "".concat(theme.fontSizes.large, "px"),
    content: "".concat(theme.fontSizes.medium, "px")
  };
  var fontWeights = {
    title: theme.fontWeights.semiBold,
    content: theme.fontWeights.regular
  };
  var lineHeights = {
    title: "".concat(theme.lineHeights.large, "px"),
    content: "".concat(theme.lineHeights.medium, "px"),
    icon: "".concat(theme.lineHeights.large, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.medium, "px")
  };
  var shadows = {
    "default": theme.shadows["default"]
  };
  var colors = {
    title: theme.colors.text,
    content: theme.colors.bodyText,
    bg: theme.colors.defaultLightBackground
  };
  return {
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    radii: radii,
    shadows: shadows,
    colors: colors
  };
};

var getPageHeaderTheme = function getPageHeaderTheme(theme) {
  var space = {
    titleMargin: "".concat(theme.space.large, "px 0")
  };
  var colors = {
    title: theme.colors.text
  };
  var fontSizes = {
    title: "".concat(theme.fontSizes.xxxxxlarge, "px")
  };
  var fontWeights = {
    title: theme.fontWeights.semiBold
  };
  return {
    space: space,
    colors: colors,
    fontSizes: fontSizes,
    fontWeights: fontWeights
  };
};

var getPaginationTheme = function getPaginationTheme(theme) {
  var space = {
    leftRightPadding: "".concat(theme.space.xsmall, "px")
  };
  var colors = {
    border: theme.colors.defaultBorder,
    background: theme.colors.defaultLightBackground,
    number: theme.colors.text,
    numberActive: theme.colors.primary,
    numberDisabled: theme.colors.subduedText
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var sizes = {
    height: "".concat(theme.sizes.large, "px"),
    minWidth: "".concat(theme.sizes.large, "px")
  };
  var fontSizes = {
    "default": "".concat(theme.fontSizes.medium, "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.semiBold
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  return {
    space: space,
    colors: colors,
    borderWidths: borderWidths,
    sizes: sizes,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    radii: radii
  };
};

var getPortletTheme = function getPortletTheme(theme) {
  var colors = {
    wrapperBackground: theme.colors.defaultLightBackground
  };
  var space = {
    wrapperPadding: "".concat(theme.space.large, "px"),
    headerWrapperMargin: "".concat(theme.space.medium, "px"),
    headerTitleMargin: "".concat(theme.space.small, "px"),
    actionWrapperMargin: "".concat(theme.space.medium, "px"),
    actionButtonMargin: "".concat(theme.space.small, "px")
  };
  var radii = {
    wrapper: "".concat(theme.radii.large, "px")
  };
  var borderWidths = {
    wrapper: "".concat(theme.borderWidths.base, "px")
  };
  return {
    colors: colors,
    space: space,
    radii: radii,
    borderWidths: borderWidths
  };
};

var getProgressTheme$1 = function getProgressTheme(theme) {
  var colors = {
    circleText: {
      primary: theme.colors.bodyText,
      warning: theme.colors.bodyText,
      danger: theme.colors.bodyText,
      success: theme.colors.bodyText,
      error: theme.colors.bodyText,
      archived: theme.colors.bodyText
    },
    progress: {
      background: theme.colors.neutralLightBackground,
      primary: theme.colors.primary,
      warning: theme.colors.warning,
      danger: theme.colors.danger,
      success: theme.colors.success,
      error: theme.colors.error,
      archived: theme.colors.disabledText
    },
    text: theme.colors.bodyText,
    background: theme.colors.neutralLightBackground,
    success: theme.colors.success,
    danger: theme.colors.danger,
    primary: theme.colors.primary,
    warning: theme.colors.warning,
    error: theme.colors.error,
    archived: theme.colors.disabledText
  };
  var fontSizes = {
    barSmall: "".concat(theme.fontSizes.xsmall, "px"),
    barMedium: "".concat(theme.fontSizes.small, "px"),
    circleSmall: "".concat(theme.fontSizes.large, "px"),
    circleMedium: "".concat(theme.fontSizes.xxxlarge, "px"),
    circleLarge: "".concat(theme.fontSizes['7xlarge'], "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.regular
  };
  var lineHeights = {
    barSmall: "".concat(theme.lineHeights.xsmall, "px"),
    barMedium: "".concat(theme.lineHeights.small, "px")
  };
  var space = {
    barTextPadding: "".concat(theme.space.small, "px"),
    barTextLeft: "".concat(theme.space.medium, "px"),
    barTextMargin: "".concat(theme.space.xsmall, "px")
  };
  var sizes = {
    barWrapperSmall: lineHeights.barSmall,
    barWrapperMedium: lineHeights.barMedium,
    barSmall: "".concat(theme.sizes.xsmall, "px"),
    barMedium: "".concat(theme.sizes.small, "px"),
    barTextWidth: "".concat(theme.sizes.xlarge, "px"),
    circleSmall: '64px',
    circleMedium: '112px',
    circleLarge: '176px',
    circleSmallStroke: "".concat(theme.sizes.xsmall, "px"),
    circleMediumStroke: "".concat(theme.sizes.small, "px"),
    circleLargeStroke: "".concat(theme.sizes.small, "px"),
    markerSmallShortDim: '2px',
    markerMediumShortDim: '4px',
    markerSmallLongDim: '10px',
    markerMediumLongDim: '14px'
  };
  var radii = {
    bar: "".concat(theme.radii.base, "px")
  };
  return {
    colors: colors,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    space: space,
    sizes: sizes,
    radii: radii
  };
};

var getRadioTheme = function getRadioTheme(theme) {
  var sizes = {
    height: "".concat(theme.sizes.medium, "px"),
    width: "".concat(theme.sizes.medium, "px"),
    checkmarkHeight: "".concat(theme.sizes.small, "px"),
    checkmarkWidth: "".concat(theme.sizes.small, "px"),
    buttonSmall: "".concat(theme.sizes.large, "px"),
    buttonMedium: "".concat(theme.sizes.xlarge, "px"),
    buttonLarge: "".concat(theme.sizes.xxxlarge, "px"),
    buttonGroupSmallWidth: "calc(100% + ".concat(theme.space.xsmall, "px)"),
    buttonGroupMediumWidth: "calc(100% + ".concat(theme.space.small, "px)"),
    buttonGroupLargeWidth: "calc(100% + ".concat(theme.space.small, "px)")
  };
  var colors = {
    primary: theme.colors.primary,
    hoverPrimary: theme.colors.hoverPrimary,
    danger: theme.colors.danger,
    hoverDanger: theme.colors.hoverDanger,
    success: theme.colors.success,
    hoverSuccess: theme.colors.hoverSuccess,
    warning: theme.colors.warning,
    hoverWarning: theme.colors.hoverWarning,
    error: theme.colors.error,
    hoverError: theme.colors.hoverError,
    defaultBorder: theme.colors.defaultBorder,
    disabledBorder: theme.colors.defaultBorder,
    hoverBorder: theme.colors.primary,
    activeBorder: theme.colors.primary,
    defaultText: theme.colors.text,
    hoverText: theme.colors.primary,
    disabledText: theme.colors.disabledText,
    disabledSelectedText: theme.colors.lightText,
    enabledSelectedText: theme.colors.lightText,
    defaultCheckmark: theme.colors.primary,
    disabledCheckmark: theme.colors.neutralDarkBackground,
    disabledBackground: theme.colors.defaultBackground,
    buttonDisabledBackground: theme.colors.defaultBackground,
    buttonCheckedBackground: theme.colors.primary,
    buttonDisabledCheckedBackground: theme.colors.neutralBackground
  };
  var radii = {
    "default": '50%',
    button: "".concat(theme.radii.base, "px")
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var space = {
    margin: "0 ".concat(theme.space.small, "px 0 0"),
    groupVerticalMargin: "".concat(theme.space.small, "px"),
    groupHorizontalMargin: "".concat(theme.space.medium, "px"),
    buttonSmallPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    buttonMediumPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    buttonLargePadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    buttonGroupSmallMargin: "-".concat(theme.space.xsmall, "px 0 0 -").concat(theme.space.xsmall, "px"),
    buttonGroupMediumMargin: "-".concat(theme.space.small, "px 0 0 -").concat(theme.space.small, "px"),
    buttonGroupLargeMargin: "-".concat(theme.space.small, "px 0 0 -").concat(theme.space.small, "px"),
    buttonSmallMargin: "".concat(theme.space.xsmall, "px 0 0 ").concat(theme.space.xsmall, "px"),
    buttonMediumMargin: "".concat(theme.space.small, "px 0 0 ").concat(theme.space.small, "px"),
    buttonLargeMargin: "".concat(theme.space.small, "px 0 0 ").concat(theme.space.small, "px")
  };
  var fontSizes = {
    "default": "".concat(theme.fontSizes.medium, "px"),
    buttonSmall: "".concat(theme.fontSizes.small, "px"),
    buttonMedium: "".concat(theme.fontSizes.medium, "px"),
    buttonLarge: "".concat(theme.fontSizes.xlarge, "px")
  };
  var lineHeights = {
    "default": "".concat(theme.lineHeights.medium, "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.regular
  };
  return {
    sizes: sizes,
    colors: colors,
    radii: radii,
    borderWidths: borderWidths,
    space: space,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights
  };
};

var getRateTheme = function getRateTheme(theme) {
  var colors = {
    inactiveIcon: theme.colors.palette.grey,
    activeIcon: theme.colors.palette.yellowDark15,
    disabledIcon: theme.colors.disabledText
  };
  var space = {
    rateGroupMediumMargin: "-".concat(theme.space.xsmall, "px 0 0 -").concat(theme.space.xsmall, "px"),
    rateGroupLargeMargin: "-".concat(theme.space.small, "px 0 0 -").concat(theme.space.small, "px"),
    rateMediumMargin: "".concat(theme.space.xsmall, "px 0 0 ").concat(theme.space.xsmall, "px"),
    rateLargeMargin: "".concat(theme.space.small, "px 0 0 ").concat(theme.space.small, "px")
  };
  return {
    colors: colors,
    space: space
  };
};

var getResultTheme = function getResultTheme(theme) {
  var colors = {
    "default": theme.colors.text
  };
  var space = {
    titleMargin: "".concat(theme.space.large, "px 0"),
    extraMargin: "".concat(theme.space.xlarge, "px")
  };
  var fontWeights = {
    title: theme.fontWeights.semiBold,
    subTitle: theme.fontWeights.regular
  };
  var fontSizes = {
    icon: "".concat(theme.fontSizes.xxxxxlarge * 2, "px"),
    title: "".concat(theme.fontSizes.xxxlarge, "px"),
    subTitle: "".concat(theme.fontSizes.medium, "px")
  };
  var lineHeights = {
    title: "".concat(theme.lineHeights.xxxlarge, "px"),
    subTitle: "".concat(theme.lineHeights.medium, "px")
  };
  return {
    colors: colors,
    space: space,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    lineHeights: lineHeights
  };
};

var getSelectTheme = function getSelectTheme(theme) {
  var sizes = {
    menuMaxHeight: '250px',
    itemsPerPageInputWidth: '65px'
  };
  var space = {
    menuCategoryPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    menuCheckmarkMarginLeft: "".concat(theme.space.small, "px"),
    loadingIconPaddingRight: "".concat(theme.space.xsmall, "px")
  };
  var fontSizes = {
    menuCategory: "".concat(theme.fontSizes.small, "px")
  };
  var lineHeights = {
    menuCategory: "".concat(theme.lineHeights.small, "px")
  };
  return {
    sizes: sizes,
    space: space,
    fontSizes: fontSizes,
    lineHeights: lineHeights
  };
};

var getSelectButtonTheme = function getSelectButtonTheme(theme) {
  var sizes = {
    small: "".concat(theme.sizes.large, "px"),
    medium: "".concat(theme.sizes.xlarge, "px"),
    large: "".concat(theme.sizes.xxxlarge, "px"),
    groupSmallWidth: "calc(100% + ".concat(theme.space.xsmall, "px)"),
    groupMediumWidth: "calc(100% + ".concat(theme.space.small, "px)"),
    groupLargeWidth: "calc(100% + ".concat(theme.space.small, "px)")
  };
  var space = {
    smallPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    mediumPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    largePadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    groupSmallMargin: "-".concat(theme.space.xsmall, "px 0 0 -").concat(theme.space.xsmall, "px"),
    groupMediumMargin: "-".concat(theme.space.small, "px 0 0 -").concat(theme.space.small, "px"),
    groupLargeMargin: "-".concat(theme.space.small, "px 0 0 -").concat(theme.space.small, "px"),
    smallMargin: "".concat(theme.space.xsmall, "px 0 0 ").concat(theme.space.xsmall, "px"),
    mediumMargin: "".concat(theme.space.small, "px 0 0 ").concat(theme.space.small, "px"),
    largeMargin: "".concat(theme.space.small, "px 0 0 ").concat(theme.space.small, "px")
  };
  var fontSizes = {
    small: "".concat(theme.fontSizes.small, "px"),
    medium: "".concat(theme.fontSizes.medium, "px"),
    large: "".concat(theme.fontSizes.xlarge, "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.regular
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  var colors = {
    background: theme.colors.defaultLightBackground,
    selectedBackground: theme.colors.primary,
    hover: theme.colors.activePrimary,
    defaultBorder: theme.colors.defaultBorder,
    defaultText: theme.colors.text,
    disabledText: theme.colors.disabledText,
    disabledSelectedText: theme.colors.lightText,
    disabledBackground: theme.colors.defaultBackground,
    disabledSelectedBackground: theme.colors.neutralBackground,
    selectedText: theme.colors.lightText
  };
  return {
    sizes: sizes,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    borderWidths: borderWidths,
    radii: radii,
    colors: colors
  };
};

var getSideBarTheme = function getSideBarTheme(theme) {
  var colors = {
    sideBarBackground: theme.colors.primaryNeutralBackground,
    sideBarItemHoverBackground: "".concat(theme.colors.defaultLightBackground, "26"),
    sideBarItemActiveBackground: theme.colors.defaultLightBackground,
    sideBarText: theme.colors.lightText,
    sideBarActiveText: theme.colors.text,
    sideBarCountBackground: theme.colors.defaultLightBackground,
    sideBarCountText: theme.colors.text,
    panelBackground: theme.colors.defaultLightBackground,
    panelItemHoverBackground: theme.colors.primary,
    panelItemActiveBackground: theme.colors.primaryLightBackground,
    sidebarItemIconBackground: theme.colors.hoverPrimary,
    scrollBarThumb: "".concat(theme.colors.neutralDarkBackground, "b3")
  };
  var space = {
    sideBarHeaderItemsContainerPadding: "".concat(theme.space.small, "px ").concat(theme.space.small, "px"),
    sideBarItemsContainerPadding: "".concat(theme.space.medium, "px ").concat(theme.space.xsmall, "px"),
    sideBarItemPadding: "".concat(theme.space.small, "px"),
    sideBarItemMarginBottom: "".concat(theme.space.medium, "px"),
    sideBarNotiBadge: "".concat(theme.space.xxsmall, "px ").concat(theme.space.xsmall, "px"),
    panelContainerPadding: "".concat(theme.space.medium, "px ").concat(theme.space.xsmall, "px ").concat(theme.space.medium, "px ").concat(theme.space.large, "px "),
    panelBackButtonPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px ").concat(theme.space.medium, "px"),
    panelSubHeaderPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    backIconMarginRight: "".concat(theme.space.xsmall, "px"),
    panelItemContainerMarginTop: "".concat(theme.space.large, "px"),
    panelItemPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    panelItemMarginTop: "".concat(theme.space.xxsmall, "px"),
    scrollBarMargin: "".concat(theme.space.medium, "px 0px")
  };
  var sizes = {
    sideBarWidth: '92px',
    sideBarScrollWrapperWidth: '103px',
    itemWidth: '84px',
    itemIconWidth: '40px',
    itemIconHeight: '28px',
    sideBarNotiBadge: '20px',
    panelWidth: '255px',
    panelWrapperWidth: '266px',
    panelHeaderHeight: '44px',
    panelItemBadge: '22px',
    scrollBar: '11px'
  };
  var radii = {
    sideBarWrapperRight: "".concat(theme.radii.large, "px"),
    sideBarItem: "".concat(theme.radii.medium, "px"),
    panelContainter: "0px ".concat(theme.radii.large, "px ").concat(theme.radii.large, "px 0px"),
    panelItem: "8px" // TODO: Remove hard code
  };

  var fontSizes = {
    headerIcon: "".concat(theme.fontSizes.xxxxxlarge, "px"),
    sideBarNotiBadge: "".concat(theme.fontSizes.xsmall, "px"),
    panelHeader: "".concat(theme.fontSizes.xlarge, "px"),
    panelSubheader: "".concat(theme.fontSizes.large, "px")
  };
  var fontWeights = {
    panelHeader: theme.fontWeights.bold
  };
  var borderWidths = {
    scrollBar: "".concat(theme.borderWidths.base * 2, "px")
  };
  var shadows = {
    panelContainerShadow: "3px 3px 6px ".concat(theme.colors.palette.black, "1A")
  };
  return {
    colors: colors,
    space: space,
    sizes: sizes,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    radii: radii,
    borderWidths: borderWidths,
    shadows: shadows
  };
};

var getSliderTheme = function getSliderTheme(theme) {
  var colors = {
    background: theme.colors.defaultGreyBackground,
    thumbBackground: theme.colors.defaultLightBackground,
    thumbBorder: theme.colors.primaryRingBackground,
    track: theme.colors.primary,
    disabled: theme.colors.neutralDarkBackground
  };
  var borderWidths = {
    thumb: "".concat(theme.borderWidths.base * 2, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  var sizes = {
    trackHeight: "".concat(theme.sizes.xsmall, "px"),
    thumb: "".concat(theme.sizes.medium, "px"),
    inputHeight: "".concat(theme.sizes.medium, "px"),
    tooltipMinWidth: "".concat(theme.sizes.medium, "px")
  };
  var space = {
    trackOffsetTop: "calc((".concat(sizes.inputHeight, " - ").concat(sizes.trackHeight, ") / 2)"),
    tooltipOffsetLeft: "calc(".concat(sizes.thumb, " / 2 - ").concat(borderWidths.thumb, ")"),
    tooltipPointerOffsetTop: "".concat(theme.sizes.large + theme.space.xxsmall, "px")
  };
  var shadows = {
    thumb: "0 0 0 3px ".concat(theme.colors.primaryBackground)
  };
  return {
    colors: colors,
    borderWidths: borderWidths,
    radii: radii,
    sizes: sizes,
    space: space,
    shadows: shadows
  };
};

var getSpinnerTheme = function getSpinnerTheme(theme) {
  var sizes = {
    small: "".concat(theme.sizes.small, "px"),
    medium: "".concat(theme.sizes.medium, "px"),
    large: "".concat(theme.sizes.large, "px"),
    smallContainer: "".concat(theme.sizes.small + theme.space.medium * 2, "px"),
    mediumContainer: "".concat(theme.sizes.medium + theme.space.xlarge * 2, "px"),
    largeContainer: "".concat(theme.sizes.large + theme.space.xxxxlarge * 2, "px")
  };
  var colors = {
    "default": theme.colors.primary
  };
  var space = {
    smallMargin: "".concat(theme.space.medium, "px auto"),
    mediumMargin: "".concat(theme.space.xlarge, "px auto"),
    largeMargin: "".concat(theme.space.xxxxlarge, "px auto")
  };
  var shadows = {
    small: "".concat(theme.sizes.small, "px 0 0 ").concat(theme.colors.primary, ",\n    0 ").concat(theme.sizes.small, "px 0 ").concat(theme.colors.primary, ",\n    -").concat(theme.sizes.small, "px 0 ").concat(theme.colors.primary, "50,\n    0 -").concat(theme.sizes.small, "px 0 ").concat(theme.colors.primary, "80"),
    medium: "".concat(theme.sizes.medium, "px 0 0 ").concat(theme.colors.primary, ",\n    0 ").concat(theme.sizes.medium, "px 0 ").concat(theme.colors.primary, ",\n    -").concat(theme.sizes.medium, "px 0 0 ").concat(theme.colors.primary, "50,\n    0 -").concat(theme.sizes.medium, "px 0 ").concat(theme.colors.primary, "80"),
    large: "".concat(theme.sizes.large, "px 0 0 ").concat(theme.colors.primary, ",\n    0 ").concat(theme.sizes.large, "px 0 ").concat(theme.colors.primary, ",\n    -").concat(theme.sizes.large, "px 0 0 ").concat(theme.colors.primary, "50,\n    0 -").concat(theme.sizes.large, "px 0 ").concat(theme.colors.primary, "80")
  };
  var fontSizes = {
    small: "".concat(theme.fontSizes.small, "px"),
    medium: "".concat(theme.fontSizes.medium, "px"),
    large: "".concat(theme.fontSizes.large, "px")
  };
  return {
    sizes: sizes,
    colors: colors,
    space: space,
    shadows: shadows,
    fontSizes: fontSizes
  };
};

var getStatisticTheme = function getStatisticTheme(theme) {
  var colors = {
    titleWhite: theme.colors.lightText,
    titleText: theme.colors.subduedText,
    contentWhite: theme.colors.lightText,
    contentText: theme.colors.text
  };
  var fontWeights = {
    content: theme.fontWeights.semiBold
  };
  var fontSizes = {
    title: "".concat(theme.fontSizes.medium, "px"),
    content: "".concat(theme.fontSizes.xxxlarge, "px")
  };
  var lineHeights = {
    "default": "".concat(theme.lineHeights.medium, "px")
  };
  var space = {
    titleWrapperMargin: "0 0 ".concat(theme.space.small, "px 0"),
    prefixWrapperMargin: "0 ".concat(theme.space.xsmall, "px 0 0"),
    suffixWrapperMargin: "0 0 0 ".concat(theme.space.xsmall, "px")
  };
  return {
    colors: colors,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    space: space
  };
};

var getStepsTheme = function getStepsTheme(theme) {
  var iconSize = theme.fontSizes.medium;
  var activeIconSize = theme.sizes.medium;
  var stepLineHeight = theme.sizes.xxsmall;
  var stepMaxWidthMobile = theme.sizes.xxlarge;
  var stepMaxWidthDesktop = theme.sizes.xxlarge * 3;
  var sizes = {
    iconSize: "".concat(iconSize, "px"),
    lineHeight: "".concat(stepLineHeight, "px"),
    activeIconSize: "".concat(activeIconSize, "px"),
    maxWidthDesktop: "".concat(iconSize + stepMaxWidthDesktop, "px"),
    maxWidthMobile: "".concat(iconSize + stepMaxWidthMobile, "px")
  };
  var space = {
    padding: "".concat(theme.space.medium, "px 0px"),
    linePositionTop: "".concat((iconSize - stepLineHeight) / 2, "px"),
    linePositionLeft: "calc(-50% + ".concat(iconSize / 2, "px)"),
    linePositionRight: "calc(50% + ".concat(iconSize / 2, "px)"),
    labelMargin: "".concat(theme.space.small, "px 0 0 0")
  };
  var colors = {
    labelCompleteText: theme.colors.lightPrimary,
    labelIncompleteText: theme.colors.bodyText,
    labelActiveText: theme.colors.primary,
    lineCompleteBg: theme.colors.lightPrimary,
    lineIncompleteBg: theme.colors.neutralBackground,
    completeBg: theme.colors.defaultDarkBackground,
    activeCompleteBg: theme.colors.primaryBackground,
    activeIncompleteBg: theme.colors.defaultLightBackground,
    activeIconBorder: theme.colors.primary,
    incompleteIconBorder: theme.colors.subduedText
  };
  var fontSizes = {
    labelInactive: "".concat(theme.fontSizes.small, "px"),
    labelActive: "".concat(theme.fontSizes.medium, "px"),
    activeIcon: "".concat(theme.fontSizes.xsmall, "px")
  };
  var lineHeights = {
    labelInactive: "".concat(theme.lineHeights.small, "px"),
    labelActive: "".concat(theme.lineHeights.medium, "px")
  };
  var fontWeights = {
    labelActive: theme.fontWeights.semiBold
  };
  var radii = {
    icon: '100%'
  };
  var borderWidths = {
    activeIcon: "".concat(theme.borderWidths.base * 2, "px"),
    incompleteIcon: "".concat(theme.borderWidths.base * 2, "px")
  };
  return {
    sizes: sizes,
    space: space,
    colors: colors,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights,
    radii: radii,
    borderWidths: borderWidths
  };
};

var getSwitchTheme = function getSwitchTheme(theme) {
  var sizes = {
    smallWidth: "".concat(theme.sizes.xlarge, "px"),
    smallHeight: "".concat(theme.sizes.medium, "px"),
    sliderSmall: "".concat(theme.sizes.medium - theme.sizes.xsmall, "px"),
    mediumWidth: "".concat(theme.sizes.xxxlarge, "px"),
    mediumHeight: "".concat(theme.sizes.large, "px"),
    sliderMedium: "".concat(theme.sizes.large - theme.sizes.small, "px")
  };
  var colors = {
    background: theme.colors.defaultDarkGreyBackground,
    checkedBackground: theme.colors.primary,
    disabledBackground: theme.colors.defaultDarkGreyBackground,
    checkedDisabledBackground: theme.colors.neutralBackground,
    handleBackgroundColor: theme.colors.defaultLightBackground,
    iconColor: theme.colors.lightText,
    loadingIconColor: theme.colors.defaultBorder,
    disabledLoadingIconColor: theme.colors.neutralBackground,
    checkedLoadingIconColor: theme.colors.primary,
    checkedDisabledLoadingIconColor: theme.colors.primaryBackground
  };
  var radii = {
    small: "".concat(theme.sizes.small, "px"),
    medium: "".concat(theme.sizes.medium, "px")
  };
  var space = {
    sliderSmallTop: "".concat(theme.sizes.xxsmall, "px"),
    sliderSmallLeft: "".concat(theme.sizes.xxsmall, "px"),
    sliderSmallCheckedLeft: "".concat(theme.sizes.xlarge - theme.sizes.medium + theme.sizes.xsmall / 2, "px"),
    sliderMediumTop: "".concat(theme.sizes.xsmall, "px"),
    sliderMediumLeft: "".concat(theme.sizes.xsmall, "px"),
    sliderMediumCheckedLeft: "".concat(theme.sizes.xxxlarge - theme.sizes.large + theme.sizes.small / 2, "px"),
    iconSmallTop: 0,
    iconSmallLeft: "".concat(theme.sizes.xsmall, "px"),
    iconSmallMarginLeft: 0,
    iconMediumTop: "".concat(theme.sizes.xsmall, "px"),
    iconMediumLeft: "".concat(theme.sizes.xsmall, "px"),
    iconMediumMarginLeft: "".concat(theme.sizes.xxsmall, "px"),
    loadingIconSmallTop: 0,
    loadingIconSmallLeft: "".concat(theme.sizes.xxsmall, "px"),
    loadingIconSmallCheckedLeft: "".concat(theme.sizes.xlarge - theme.sizes.medium + theme.sizes.xxsmall / 2, "px"),
    loadingIconMediumTop: "".concat(theme.sizes.xsmall, "px"),
    loadingIconMediumLeft: "".concat(theme.sizes.xsmall, "px"),
    loadingIconMediumCheckedLeft: "".concat(theme.sizes.xxxlarge - theme.sizes.large + theme.sizes.small / 2, "px")
  };
  var fontSizes = {
    iconSmall: "".concat(theme.fontSizes.small, "px"),
    iconMedium: "".concat(theme.fontSizes.large, "px"),
    disabledIconSmall: "".concat(theme.fontSizes.small, "px"),
    disabledIconMedium: "".concat(theme.fontSizes.large, "px"),
    loadingIconSmall: "".concat(theme.fontSizes.xsmall, "px"),
    loadingIconMedium: "".concat(theme.fontSizes.medium, "px")
  };
  return {
    sizes: sizes,
    colors: colors,
    radii: radii,
    space: space,
    fontSizes: fontSizes
  };
};

var getTableTheme = function getTableTheme(theme) {
  var sizes = {
    expandableIcon: "".concat(theme.sizes.medium, "px"),
    itemsPerPageInputWidth: '65px',
    columnDividerWidth: '20px',
    filterButton: "".concat(theme.sizes.xlarge, "px"),
    filterDropdownWidth: "300px"
  };
  var colors = {
    background: theme.colors.defaultLightBackground,
    headerText: theme.colors.text,
    headerBackground: theme.colors.primaryHeaderBackground,
    rowFocusBackground: theme.colors.defaultGreyBackground,
    cellText: theme.colors.text,
    cellBorder: theme.colors.defaultBorder,
    expandableIconBorder: theme.colors.defaultBorder,
    emptyText: theme.colors.subduedText,
    filterButtonBackground: theme.colors.defaultLightBackground,
    filterButtonBorder: theme.colors.defaultBorder,
    filterButtonHoverBorder: theme.colors.black,
    filterButtonActiveBackground: theme.colors.palette.smaltLight75,
    filterButtonActiveBorder: theme.colors.black,
    filterLabelText: theme.colors.subduedText,
    generalBorder: theme.colors.defaultBorder,
    headerBorder: theme.colors.defaultBorder,
    rowBorder: theme.colors.defaultBorder
  };
  var space = {
    headerPadding: "".concat(theme.space.medium, "px"),
    cellPadding: "".concat(theme.space.medium, "px"),
    sortingIconMarginLeft: "".concat(theme.space.small, "px"),
    expandableIconPadding: "".concat(theme.space.xxsmall, "px"),
    paginationMarginTop: "".concat(theme.space.medium, "px"),
    emptyContentMargin: "".concat(theme.space.large, "px"),
    emptyContentPadding: "".concat(theme.space.large, "px"),
    filterButtonMarginRight: "".concat(theme.space.small, "px"),
    filterButtonMarginBottom: "".concat(theme.space.small, "px"),
    filterButtonPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    filterButtonIconPadding: "".concat(theme.space.small, "px"),
    filterDropdownPadding: "".concat(theme.space.medium, "px"),
    filterLabelContentPadding: "".concat(theme.space.xsmall, "px")
  };
  var fontSizes = {
    header: "".concat(theme.fontSizes.medium, "px"),
    cell: "".concat(theme.fontSizes.medium, "px"),
    sortingIcon: "".concat(theme.fontSizes.xsmall, "px"),
    expandableIcon: "".concat(theme.fontSizes.xsmall, "px"),
    filterButton: "".concat(theme.fontSizes.medium, "px")
  };
  var fontWeights = {
    header: theme.fontWeights.semiBold,
    cell: theme.fontWeights.regular,
    filterButton: theme.fontWeights.semiBold,
    filterLabel: theme.fontWeights.semiBold,
    filterBy: theme.fontWeights.semiBold
  };
  var lineHeights = {
    header: "".concat(theme.lineHeights.medium, "px"),
    cell: "".concat(theme.lineHeights.medium, "px"),
    sortingIcon: "".concat(theme.lineHeights.xsmall, "px"),
    filterButton: "".concat(theme.lineHeights.medium, "px")
  };
  var borderWidths = {
    row: "".concat(theme.borderWidths.base, "px"),
    expandableIcon: "".concat(theme.borderWidths.base, "px"),
    filterButton: "".concat(theme.borderWidths.base, "px"),
    general: "0px",
    header: "".concat(theme.borderWidths.base, "px"),
    cell: "0px"
  };
  var radii = {
    expandableIcon: "".concat(theme.radii.base, "px"),
    header: "".concat(theme.radii.base, "px"),
    filterButton: "6px"
  };
  var shadows = {
    columnDivider: "".concat(theme.shadows.divider)
  };
  return {
    sizes: sizes,
    colors: colors,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    borderWidths: borderWidths,
    radii: radii,
    shadows: shadows
  };
};

var getFiltersTheme = function getFiltersTheme(theme) {
  var sizes = {
    filterButton: {
      small: "".concat(theme.sizes.large, "px"),
      medium: "".concat(theme.sizes.xlarge, "px")
    },
    filterDropdownWidth: "250px",
    filterGroupWidth: '218px',
    filterGroupLargeDropdownWidth: '686px',
    filterGroupXLargeDropdownWidth: '920px' // 4 * filterGroupWidth + 3 * filterGroupDropdownItemGap
  };

  var colors = {
    filterButtonBackground: theme.colors.defaultLightBackground,
    filterButtonBorder: theme.colors.defaultBorder,
    filterButtonHoverBorder: theme.colors.black,
    filterButtonActiveBackground: theme.colors.palette.smaltLight75,
    filterButtonActiveBorder: theme.colors.black,
    filterLabelText: theme.colors.subduedText,
    filterButtonText: theme.colors.text
  };
  var space = {
    tagListMarginTop: "".concat(theme.space.small, "px"),
    filterButtonPadding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    filterButtonGap: "".concat(theme.space.small, "px"),
    filterButtonIconPadding: "".concat(theme.space.small, "px"),
    filterDropdownPadding: "".concat(theme.space.medium, "px"),
    filterLabelContentPadding: "".concat(theme.space.xsmall, "px"),
    filterGroupDropdownPadding: "".concat(theme.space.medium, "px"),
    filterGroupDropdownItemGap: "".concat(theme.space.medium, "px"),
    filterGroupFilterMarginBottom: "".concat(theme.space.medium, "px")
  };
  var fontSizes = {
    filterButton: {
      small: "".concat(theme.fontSizes.small, "px"),
      medium: "".concat(theme.fontSizes.medium, "px")
    }
  };
  var fontWeights = {
    filterButton: theme.fontWeights.semiBold,
    filterLabel: theme.fontWeights.semiBold,
    filterBy: theme.fontWeights.semiBold
  };
  var lineHeights = {
    filterButton: {
      small: "".concat(theme.lineHeights.small, "px"),
      medium: "".concat(theme.lineHeights.medium, "px")
    }
  };
  var borderWidths = {
    filterButton: "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    filterButton: "".concat(theme.radii.base * 2, "px")
  };
  var shadows = {};
  return {
    sizes: sizes,
    colors: colors,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    borderWidths: borderWidths,
    radii: radii,
    shadows: shadows
  };
};

var getTabsTheme = function getTabsTheme(theme) {
  var space = {
    padding: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
    marginRight: "".concat(theme.space.xxsmall, "px"),
    panelPadding: "".concat(theme.space.medium, "px"),
    subTabPanelPadding: {
      medium: "".concat(theme.space.medium, "px"),
      small: "".concat(theme.space.small, "px")
    },
    iconMarginRight: "".concat(theme.space.small, "px"),
    iconMarginLeft: "".concat(theme.space.small, "px"),
    subPadding: {
      medium: "".concat(theme.space.small, "px ").concat(theme.space.medium, "px"),
      small: "0px ".concat(theme.space.small, "px")
    }
  };
  var sizes = {
    indicatorHeight: "".concat(theme.sizes.xxsmall / 2, "px"),
    activeTabIndicatorHeight: "".concat(theme.sizes.xxsmall, "px"),
    maxWidth: "".concat(5 * theme.sizes.xxxlarge, "px"),
    moreTabMaxHeight: '300px'
  };
  var colors = {
    background: theme.colors.defaultBackground,
    activeBackground: theme.colors.defaultLightBackground,
    border: theme.colors.defaultBorder,
    focusBorder: theme.colors.primary,
    text: theme.colors.text,
    panelText: theme.colors.text,
    panelBackground: theme.colors.defaultLightBackground,
    hoverText: theme.colors.primary,
    focusText: theme.colors.primary,
    activeText: theme.colors.primary,
    disabledText: theme.colors.subduedText,
    subFocusText: theme.colors.activePrimary
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px ").concat(theme.radii.base, "px 0 0"),
    panel: "0 0 ".concat(theme.radii.base, "px ").concat(theme.radii.base, "px")
  };
  var fontSizes = {
    subTabTitles: {
      medium: "".concat(theme.fontSizes.medium, "px"),
      small: "".concat(theme.fontSizes.small, "px")
    },
    panel: "".concat(theme.fontSizes.medium, "px"),
    "default": "".concat(theme.fontSizes.medium, "px")
  };
  var lineHeights = {
    subTabTitles: {
      medium: "".concat(theme.lineHeights.medium, "px"),
      small: "".concat(theme.lineHeights.small, "px")
    },
    panel: "".concat(theme.lineHeights.medium, "px"),
    "default": "".concat(theme.lineHeights.medium, "px")
  };
  var fontWeights = {
    subTabTitle: theme.fontWeights.regular,
    panel: theme.fontWeights.regular,
    "default": theme.fontWeights.regular
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  return {
    space: space,
    sizes: sizes,
    colors: colors,
    radii: radii,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights,
    borderWidths: borderWidths
  };
};

var getTagTheme = function getTagTheme(theme) {
  var space = {
    smallPadding: "".concat(theme.space.xxsmall, "px ").concat(theme.space.small, "px"),
    mediumPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    largePadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    closeBtnPadding: "0 0 0 ".concat(theme.space.small, "px")
  };
  var colors = {
    defaultText: theme.colors.text,
    defaultBorder: theme.colors.neutralDarkBackground,
    defaultBackground: theme.colors.defaultBackground,
    primary: theme.colors.primary,
    primaryBackground: theme.colors.primaryLightBackground,
    warning: theme.colors.warning,
    warningBackground: theme.colors.warningBackground,
    danger: theme.colors.danger,
    dangerBackground: theme.colors.dangerBackground,
    success: theme.colors.success,
    successBackground: theme.colors.successBackground,
    error: theme.colors.error,
    errorBackground: theme.colors.errorBackground,
    archived: theme.colors.subduedText,
    archivedBackground: theme.colors.neutralLightBackground,
    basicCloseBtn: theme.colors.subduedText,
    closeBtn: theme.colors.lightText,
    hoverBasicCloseBtn: theme.colors.disabledText,
    hoverPrimaryCloseBtn: theme.colors.hoverPrimary,
    hoverWarningCloseBtn: theme.colors.hoverWarning,
    hoverDangerCloseBtn: theme.colors.hoverDanger,
    hoverSuccessCloseBtn: theme.colors.hoverSuccess,
    hoverErrorCloseBtn: theme.colors.hoverError,
    activePrimaryCloseBtn: theme.colors.activePrimary,
    activeWarningCloseBtn: theme.colors.activeWarning,
    activeDangerCloseBtn: theme.colors.activeDanger,
    activeSuccessCloseBtn: theme.colors.activeSuccess,
    activeErrorCloseBtn: theme.colors.activeError
  };
  var borderWidths = {
    "default": "".concat(theme.borderWidths.base, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  var fontSizes = {
    small: "".concat(theme.fontSizes.xsmall, "px"),
    medium: "".concat(theme.fontSizes.small, "px"),
    large: "".concat(theme.fontSizes.medium, "px"),
    closeBtn: "".concat(theme.fontSizes.xsmall, "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.semiBold
  };
  return {
    space: space,
    colors: colors,
    borderWidths: borderWidths,
    radii: radii,
    fontSizes: fontSizes,
    fontWeights: fontWeights
  };
};

var getTimePickerTheme = function getTimePickerTheme(theme) {
  var colors = {
    columnBorder: theme.colors.defaultBorder,
    cell: theme.colors.text,
    cellActive: theme.colors.defaultBackground,
    cellHover: theme.colors.primaryLightBackground,
    cellBackground: theme.colors.defaultLightBackground
  };
  var space = {
    cellPadding: "0 0 0 ".concat(theme.space.medium, "px")
  };
  var fontSizes = {
    cell: "".concat(theme.fontSizes.medium, "px")
  };
  var fontWeights = {
    cellActive: theme.fontWeights.semiBold
  };
  var lineHeights = {
    cell: "".concat(theme.lineHeights.xxxlarge, "px")
  };
  var sizes = {
    columnWidth: '56px',
    columnAfterHeight: '160px',
    columnHeight: '192px',
    cellHeight: "".concat(theme.sizes.xlarge, "px")
  };
  var borderWidths = {
    column: "".concat(theme.borderWidths.base, "px")
  };
  return {
    colors: colors,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    sizes: sizes,
    borderWidths: borderWidths
  };
};

var getTimelineTheme = function getTimelineTheme(theme) {
  var itemLineWidth = theme.sizes.xxsmall;
  var itemMarkerSize = theme.sizes.medium;
  var itemBorderWidth = theme.sizes.xxsmall;
  var itemMarkerPositionTop = theme.space.xxsmall;
  var space = {
    itemPaddingBottom: "".concat(theme.space.large, "px"),
    itemLinePositionLeft: "".concat(itemMarkerSize / 2, "px"),
    itemLinePositionTop: "".concat(itemMarkerSize + itemMarkerPositionTop, "px"),
    itemMarkerPositionTop: "".concat(itemMarkerPositionTop, "px"),
    itemContentMarginLeft: "".concat(theme.space.xlarge, "px")
  };
  var sizes = {
    itemLineWidth: "".concat(itemLineWidth, "px"),
    itemMarkerWidth: "".concat(itemMarkerSize + itemBorderWidth, "px"),
    itemMarkerHeight: "".concat(itemMarkerSize + itemBorderWidth, "px"),
    itemLineHeight: "calc(100% - ".concat(itemMarkerSize, "px)")
  };
  var fontSizes = {
    itemText: "".concat(theme.fontSizes.large, "px"),
    itemHelpText: "".concat(theme.fontSizes.medium, "px")
  };
  var lineHeights = {
    itemText: "".concat(theme.lineHeights.large, "px"),
    itemHelpText: "".concat(theme.lineHeights.medium, "px")
  };
  var fontWeights = {
    itemText: theme.fontWeights.semiBold,
    itemHelpText: theme.fontWeights.regular
  };
  var colors = {
    itemLineBg: theme.colors.neutralBackground,
    itemMarkerBg: theme.colors.defaultLightBackground,
    itemText: theme.colors.text,
    itemHelpText: theme.colors.text,
    itemMarkerDefault: theme.colors.neutralDarkBackground,
    itemMarkerSuccess: theme.colors.success,
    itemMarkerInfo: theme.colors.primary,
    itemMarkerWarning: theme.colors.warning,
    itemMarkerDanger: theme.colors.danger,
    itemMarkerError: theme.colors.error
  };
  var borderWidths = {
    itemMarker: "".concat(itemBorderWidth, "px")
  };
  return {
    space: space,
    sizes: sizes,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    fontWeights: fontWeights,
    colors: colors,
    borderWidths: borderWidths
  };
};

var getTooltipTheme = function getTooltipTheme(theme) {
  var sizes = {
    arrow: "".concat(theme.sizes.small, "px")
  };
  var colors = {
    dark: {
      text: theme.colors.lightText,
      background: theme.colors.defaultDarkBackground,
      border: theme.colors.defaultDarkBackground
    },
    light: {
      text: theme.colors.text,
      background: theme.colors.defaultLightBackground,
      border: theme.colors.defaultBorder
    }
  };
  var space = {
    wrapperPadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px"),
    margin: theme.space.small
  };
  var fontSizes = {
    "default": "".concat(theme.fontSizes.small, "px")
  };
  var fontWeights = {
    "default": theme.fontWeights.regular
  };
  var lineHeights = {
    "default": "".concat(theme.lineHeights.small, "px")
  };
  var radii = {
    "default": "".concat(theme.radii.base, "px")
  };
  var borderWidths = {
    "default": '0px'
  };
  var shadows = {
    dark: 'unset',
    light: theme.shadows["default"]
  };
  return {
    sizes: sizes,
    colors: colors,
    space: space,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    radii: radii,
    borderWidths: borderWidths,
    shadows: shadows
  };
};

var getTypographyTheme = function getTypographyTheme(theme) {
  var colors = {
    main: theme.colors.text,
    body: theme.colors.bodyText,
    subdued: theme.colors.subduedText,
    disabled: theme.colors.disabledText,
    primary: theme.colors.primary,
    success: theme.colors.success,
    danger: theme.colors.danger,
    warning: theme.colors.warning,
    error: theme.colors.error,
    white: theme.colors.lightText,
    nestedLink: theme.colors.primary,
    hoverNestedLink: theme.colors.hoverPrimary
  };
  var fontWeights = {
    light: theme.fontWeights.light,
    regular: theme.fontWeights.regular,
    semiBold: theme.fontWeights.semiBold,
    bold: theme.fontWeights.bold,
    nestedStrongTag: theme.fontWeights.semiBold
  };
  var fontSizes = {
    xxxxxlarge: "".concat(theme.fontSizes.xxxxxlarge, "px"),
    xxxxlarge: "".concat(theme.fontSizes.xxxxlarge, "px"),
    xxxlarge: "".concat(theme.fontSizes.xxxlarge, "px"),
    xxlarge: "".concat(theme.fontSizes.xxlarge, "px"),
    xlarge: "".concat(theme.fontSizes.xlarge, "px"),
    large: "".concat(theme.fontSizes.large, "px"),
    medium: "".concat(theme.fontSizes.medium, "px"),
    small: "".concat(theme.fontSizes.small, "px"),
    xsmall: "".concat(theme.fontSizes.xsmall, "px")
  };
  var lineHeights = {
    xxxxxlarge: "".concat(theme.lineHeights.xxxxxlarge, "px"),
    xxxxlarge: "".concat(theme.lineHeights.xxxxlarge, "px"),
    xxxlarge: "".concat(theme.lineHeights.xxxlarge, "px"),
    xxlarge: "".concat(theme.lineHeights.xxlarge, "px"),
    xlarge: "".concat(theme.lineHeights.xlarge, "px"),
    large: "".concat(theme.lineHeights.large, "px"),
    medium: "".concat(theme.lineHeights.medium, "px"),
    small: "".concat(theme.lineHeights.small, "px"),
    xsmall: "".concat(theme.lineHeights.xsmall, "px")
  };
  var space = {
    nestedUnorderedListPaddingLeft: "".concat(theme.space.large, "px")
  };
  return {
    colors: colors,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    space: space
  };
};

var getWidgetTheme = function getWidgetTheme(theme) {
  var colors = {
    containerBackground: theme.colors.defaultLightBackground,
    containerBorder: theme.colors.defaultBorder,
    containerActiveBorder: theme.colors.primary
  };
  var space = {
    headerPadding: "".concat(theme.space.large, "px ").concat(theme.space.large, "px ").concat(theme.space.medium, "px"),
    headerItemGap: "".concat(theme.space.small, "px"),
    contentPadding: "0px ".concat(theme.space.large, "px ").concat(theme.space.large, "px"),
    resizeHandlePadding: "".concat(theme.space.xsmall, "px ").concat(theme.space.small, "px ").concat(theme.space.small, "px ").concat(theme.space.xsmall, "px"),
    resizeHandleOffset: "-".concat(theme.space.xsmall, "px")
  };
  var borderWidths = {
    container: "".concat(theme.borderWidths.base * 4, "px")
  };
  var radii = {
    container: "".concat(theme.radii.large, "px")
  };
  return {
    colors: colors,
    space: space,
    borderWidths: borderWidths,
    radii: radii
  };
};

var getChartTheme = function getChartTheme(theme) {
  var colors = {
    tooltip: {
      foreground: 'transparent',
      background: theme.colors.defaultLightBackground,
      text: theme.colors.text
    },
    pie: {
      background: theme.colors.defaultLightBackground,
      iconBackground: theme.colors.defaultGreyBackground
    }
  };
  var sizes = {
    tooltip: {
      arrowSize: "".concat(theme.sizes.xsmall, "px")
    },
    legend: {
      dot: theme.space.small
    },
    pie: {
      small: 64,
      medium: 112,
      large: 200,
      stokes: {
        small: 6,
        medium: 10,
        large: 16
      },
      hoverStrokes: {
        small: theme.space.xsmall,
        medium: theme.space.xsmall,
        large: theme.space.small
      },
      badgeSize: "".concat(theme.space.small, "px"),
      iconContainerSize: '75%',
      restHoverStrokes: {
        small: 4,
        medium: 6,
        large: 10
      }
    },
    multiplePie: {
      large: 200,
      stokes: {
        large: 10
      },
      hoverStrokes: {
        large: theme.space.xsmall
      },
      restHoverStrokes: {
        large: 4
      }
    }
  };
  var spaces = {
    titleContainerMargin: "".concat(theme.space.medium, "px 0 ").concat(theme.space.small, "px 0 "),
    legend: {
      margin: "".concat(theme.space.small, "px 0 0 0 "),
      gap: "".concat(theme.space.small, "px")
    },
    pie: {
      padding: theme.space.medium,
      tooltipTopPosition: 12,
      badgeMargin: "".concat(theme.space.xsmall, "px"),
      sliceGap: theme.space.xsmall,
      iconPadding: {
        small: "".concat(theme.space.xsmall, "px"),
        medium: "".concat(theme.space.large, "px"),
        large: "".concat(theme.space.xlarge, "px")
      }
    },
    multiplePie: {
      badgeMargin: "".concat(theme.space.xsmall, "px"),
      titleMargin: "".concat(theme.space.medium, "px 0 0 0 "),
      sliceGap: theme.space.small,
      strokeGap: theme.space.small,
      iconPadding: {
        small: "".concat(theme.space.xsmall, "px"),
        medium: "".concat(theme.space.large, "px"),
        large: "".concat(theme.space.xlarge, "px")
      },
      subTitleMargin: "".concat(theme.space.small, "px 0 0 0 ")
    }
  };
  var shadows = {
    pie: {
      slice: 'drop-shadow(1px 1px 4px rgb(0 0 0 / 0.3))'
    },
    multiplePie: {
      slice: 'drop-shadow(1px 1px 4px rgb(0 0 0 / 0.3))'
    }
  };
  var radii = {
    pie: {
      iconContainerRadius: '9999px'
    },
    legend: {
      dotRadius: "".concat(theme.space.small, "px")
    }
  };
  return {
    colors: colors,
    sizes: sizes,
    shadows: shadows,
    spaces: spaces,
    radii: radii
  };
};

var getLineChartTheme = function getLineChartTheme(theme) {
  var colors = {
    xAxisTickColor: theme.colors.subduedText,
    yAxisTickColor: theme.colors.subduedText,
    verticalTitleFillColor: theme.colors.subduedText,
    gridLineBackgroundColor: theme.colors.neutralBackground,
    tooltipBackgroundColor: theme.colors.defaultLightBackground
  };
  var borderWidth = {
    line: {
      "default": theme.borderWidths.base * 2,
      highlighted: theme.borderWidths.base * 4,
      noHighlighted: theme.borderWidths.base * 2
    }
  };
  var sizes = {
    navigationButton: theme.sizes.large,
    yAxisTitleWidth: theme.sizes.large,
    yAxisWidth: theme.sizes.xxlarge,
    xAxisHeight: theme.sizes.xlarge,
    xAxisLabelMinWidth: theme.sizes.medium
  };
  var space = {
    tooltipBottomMargin: theme.space.medium,
    tooltipChildMargin: theme.space.small,
    legendContainerMarginTop: theme.space.medium,
    legendContainerChildMarginBottom: theme.space.small,
    xAxisTransform: theme.space.medium,
    xAxisLabelHorizontalPadding: theme.space.small,
    yAxisTransform: -theme.space.xsmall,
    moreTooltipPadding: theme.space.small,
    navigateButtonPadding: theme.space.xsmall
  };
  var fontWeights = {
    xAxisTick: theme.fontWeights.regular,
    yAxisTick: theme.fontWeights.regular,
    verticalTitle: theme.fontWeights.light
  };
  var fontSizes = {
    xAxisTick: "".concat(theme.fontSizes.xsmall, "px"),
    yAxisTick: "".concat(theme.fontSizes.xsmall, "px")
  };
  var lineHeights = {
    xAxisTick: "".concat(theme.lineHeights.xsmall, "px"),
    yAxisTick: "".concat(theme.lineHeights.xsmall, "px")
  };
  var boxShadows = {
    tooltip: theme.shadows["default"]
  };
  var opacity = {
    gridLine: 0.3
  };
  var strokeDasharray = {
    gridLine: '5 5',
    line: '4 4'
  };
  return {
    strokeDasharray: strokeDasharray,
    colors: colors,
    space: space,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    boxShadows: boxShadows,
    sizes: sizes,
    borderWidth: borderWidth,
    opacity: opacity
  };
};

var getContextPanelTheme = function getContextPanelTheme(theme) {
  var colors = {
    overlayBackground: "".concat(theme.colors.defaultDarkBackground, "80"),
    scrollbarThumbBackground: "".concat(theme.colors.neutralDarkBackground, "b3"),
    contextPanelBackground: "".concat(theme.colors.defaultLightBackground)
  };
  var spaces = {
    contextPanelPadding: "".concat(theme.space.medium, "px ").concat(theme.space.large, "px 0"),
    contextPanelHeaderMarginBottom: "".concat(theme.space.medium, "px"),
    contextPanelBodyMarginTop: "".concat(theme.space.xsmall, "px"),
    contextPanelBodyMarginBottom: "".concat(theme.space.xsmall, "px"),
    contextPanelFooterPadding: "".concat(theme.space.small, "px 0 ").concat(theme.space.large, "px"),
    scrollbarTrackMargin: "".concat(theme.space.xsmall, "px 0")
  };
  var sizes = {
    scrollbarWidth: '2px'
  };
  var fontSizes = {
    header: "".concat(theme.fontSizes.large, "px"),
    body: "".concat(theme.fontSizes.medium, "px")
  };
  var fontWeights = {
    header: theme.fontWeights.semiBold,
    body: theme.fontWeights.regular
  };
  var lineHeights = {
    header: "".concat(theme.lineHeights.large, "px"),
    body: "".concat(theme.lineHeights.medium, "px")
  };
  var borderRadius = {
    contextPanel: "".concat(theme.radii.large, "px 0 0 ").concat(theme.radii.large, "px"),
    scrollbar: "".concat(theme.radii.large)
  };
  return {
    colors: colors,
    spaces: spaces,
    borderRadius: borderRadius,
    fontSizes: fontSizes,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    sizes: sizes
  };
};

var getBarChart = function getBarChart(theme) {
  var colors = {
    xAxisTickColor: theme.colors.subduedText,
    yAxisTickColor: theme.colors.subduedText,
    verticalTitleFillColor: theme.colors.subduedText,
    gridLineBackgroundColor: theme.colors.neutralBackground,
    tooltipBackgroundColor: theme.colors.defaultLightBackground,
    totalBackgroundColor: theme.colors.defaultLightBackground
  };
  var radii = {
    tooltip: theme.radii.medium,
    bar: {
      large: theme.radii.base * 2,
      medium: theme.radii.base * 2,
      inactive: theme.radii.base
    },
    tooltipArrow: theme.radii.base / 2,
    totalRect: theme.radii.base * 3
  };
  var sizes = {
    tooltipArrow: theme.sizes.small,
    barHeight: {
      large: theme.sizes.xsmall * 3,
      medium: theme.sizes.small,
      inactive: theme.sizes.xsmall
    },
    navigationButton: theme.sizes.large,
    totalSvgHeight: theme.sizes.large,
    totalLetterWidth: theme.sizes.small
  };
  var space = {
    tooltipPadding: theme.space.small,
    tooltipChildMargin: theme.space.small,
    legendContainerMarginTop: theme.space.medium,
    legendContainerChildMarginBottom: theme.space.small,
    legendBoxGap: theme.space.medium,
    barChartMarginTop: theme.space.medium,
    barChartMarginRight: theme.space.large,
    barChartMarginBottom: theme.space.xlarge,
    barChartMarginLeft: theme.space.xxxxlarge + theme.space.large,
    barChartMarginLeftWithNavigation: theme.space.large * 2,
    chartContentMarginLeft: theme.space.xlarge,
    xAxisTransform: theme.space.medium,
    yAxisTransformHorizontal: -theme.space.small,
    barHoverTransform: {
      large: theme.space.xsmall,
      medium: theme.space.xxsmall
    },
    tooltipTop: 50,
    barMarginLeft: theme.space.xsmall,
    moreTooltipPadding: theme.space.small,
    navigationButtonMarginLeft: theme.space.small,
    verticalTitleY: -theme.sizes.xlarge * 2,
    gridChartMarginTop: theme.space.small,
    barMarginTop: theme.space.xsmall,
    totalSvgHorizontalPadding: theme.space.small
  };
  var fontWeights = {
    xAxisTick: theme.fontWeights.regular,
    yAxisTick: theme.fontWeights.regular,
    verticalTitle: theme.fontWeights.regular,
    totalText: theme.fontWeights.semiBold
  };
  var fontSizes = {
    yAxisTick: "".concat(theme.fontSizes.xsmall, "px"),
    verticalTitle: "".concat(theme.fontSizes.small, "px"),
    xAxisTick: "".concat(theme.fontSizes.xsmall, "px"),
    totalText: "".concat(theme.fontSizes.xsmall, "px")
  };
  var lineHeights = {
    yAxisTick: "".concat(theme.lineHeights.xsmall, "px"),
    verticalTitle: "".concat(theme.lineHeights.small, "px"),
    xAxisTick: "".concat(theme.lineHeights.xsmall, "px")
  };
  var boxShadows = {
    tooltip: '0 0 10px 0 rgba(0, 0, 0, 0.2)',
    barDropShadow: '1px 1px 4px rgb(0 0 0 / 0.3)'
  };
  var borderWidth = {
    totalRect: theme.borderWidths.base
  };
  return {
    colors: colors,
    radii: radii,
    space: space,
    fontWeights: fontWeights,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    boxShadows: boxShadows,
    sizes: sizes,
    borderWidth: borderWidth
  };
};

var getHorizontalBarChart = function getHorizontalBarChart(theme) {
  var colors = {
    yAxisTickColor: theme.colors.subduedText,
    xAxisTickColor: theme.colors.subduedText,
    gridLineBackgroundColor: theme.colors.neutralBackground,
    verticalTitleFillColor: theme.colors.subduedText,
    totalBackgroundColor: theme.colors.defaultLightBackground,
    tooltipBackgroundColor: theme.colors.defaultLightBackground
  };
  var radii = {
    tooltip: theme.radii.medium,
    tooltipArrow: theme.radii.base / 2,
    bar: {
      large: theme.radii.base * 2,
      medium: theme.radii.base * 2,
      inactive: theme.radii.base
    },
    totalRect: theme.radii.base * 3
  };
  var sizes = {
    tooltipArrow: theme.sizes.small,
    barHeight: {
      large: theme.sizes.xsmall * 3,
      medium: theme.sizes.small,
      inactive: theme.sizes.xsmall
    },
    totalSvgHeight: theme.sizes.large,
    navigationButton: theme.sizes.large,
    totalLetterWidth: theme.sizes.small
  };
  var space = {
    tooltipChildMargin: theme.space.small,
    tooltipPadding: theme.space.small,
    legendContainerMarginTop: theme.space.medium,
    legendContainerChildMarginBottom: theme.space.small,
    horizontalBarChartMarginTop: theme.space.medium,
    legendBoxGap: theme.space.medium,
    horizontalBarChartMarginRight: theme.space.large,
    horizontalBarChartMarginBottom: theme.space.xlarge,
    horizontalBarChartMarginLeft: theme.space.xxxlarge * 2,
    horizontalBarChartMarginLeftWithNavigation: theme.space.large * 2,
    yAxisTransformHorizontal: -theme.space.small,
    xAxisTransform: theme.space.medium,
    barHoverTransform: {
      large: theme.space.xsmall,
      medium: theme.space.xxsmall
    },
    horizontalBarMarginLeft: theme.space.xsmall,
    tooltipTop: 50,
    moreTooltipPadding: theme.space.small,
    navigateLeftPosition: 0,
    navigateLeftPositionHasTitle: theme.space.xxxlarge,
    verticalTitleY: -theme.sizes.xlarge * 2,
    navigateRightPosition: theme.space.medium,
    gridChartMarginTop: theme.space.small,
    horizontalBarMarginTop: theme.space.xsmall,
    totalSvgHorizontalPadding: theme.space.small
  };
  var fontWeights = {
    xAxisTick: theme.fontWeights.regular,
    verticalTitle: theme.fontWeights.regular,
    totalText: theme.fontWeights.semiBold,
    yAxisTick: theme.fontWeights.regular
  };
  var fontSizes = {
    verticalTitle: "".concat(theme.fontSizes.small, "px"),
    yAxisTick: "".concat(theme.fontSizes.xsmall, "px"),
    totalText: "".concat(theme.fontSizes.xsmall, "px"),
    xAxisTick: "".concat(theme.fontSizes.xsmall, "px")
  };
  var lineHeights = {
    xAxisTick: "".concat(theme.lineHeights.xsmall, "px"),
    verticalTitle: "".concat(theme.lineHeights.small, "px"),
    yAxisTick: "".concat(theme.lineHeights.xsmall, "px")
  };
  var boxShadows = {
    barDropShadow: '1px 1px 4px rgb(0 0 0 / 0.3)',
    tooltip: '0 0 10px 0 rgba(0, 0, 0, 0.2)'
  };
  var borderWidth = {
    totalRect: theme.borderWidths.base
  };
  return {
    colors: colors,
    radii: radii,
    space: space,
    fontWeights: fontWeights,
    lineHeights: lineHeights,
    fontSizes: fontSizes,
    sizes: sizes,
    boxShadows: boxShadows,
    borderWidth: borderWidth
  };
};

var getTheme = function getTheme() {
  var scale$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : scale;
  var systemPalette = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : heroSystemPalette$1;
  var globalTheme = getGlobalTheme(scale$1, systemPalette);
  return Object.assign(Object.assign({}, globalTheme), {
    __hd__: {
      alert: getAlertTheme(globalTheme),
      badge: getBadgeTheme(globalTheme),
      banner: getBannerTheme$1(globalTheme),
      barChart: getBarChart(globalTheme),
      horizontalBarChart: getHorizontalBarChart(globalTheme),
      breadcrumb: getBreadcrumbTheme(globalTheme),
      button: getButtonTheme$1(globalTheme),
      card: getCardTheme(globalTheme),
      carousel: getCarouselTheme(globalTheme),
      checkbox: getCheckboxTheme(globalTheme),
      comment: getCommentTheme(globalTheme),
      columnChart: getColumnChartTheme(globalTheme),
      lineChart: getLineChartTheme(globalTheme),
      contextPanel: getContextPanelTheme(globalTheme),
      datePicker: getDatePickerTheme(globalTheme),
      divider: getDividerTheme(globalTheme),
      dropdown: getDropdownTheme(globalTheme),
      empty: getEmptyTheme$1(globalTheme),
      file: getFileTheme(globalTheme),
      form: getFormTheme(globalTheme),
      icon: getIconTheme(globalTheme),
      inPageNavigation: getInPageNavigationTheme(globalTheme),
      input: getInputTheme(globalTheme),
      legend: getLegendTheme(globalTheme),
      menu: getMenuTheme(globalTheme),
      modal: getModalTheme(globalTheme),
      notification: getNotificationTheme(globalTheme),
      pageHeader: getPageHeaderTheme(globalTheme),
      pagination: getPaginationTheme(globalTheme),
      portlet: getPortletTheme(globalTheme),
      progress: getProgressTheme$1(globalTheme),
      radio: getRadioTheme(globalTheme),
      rate: getRateTheme(globalTheme),
      result: getResultTheme(globalTheme),
      select: getSelectTheme(globalTheme),
      selectButton: getSelectButtonTheme(globalTheme),
      sideBar: getSideBarTheme(globalTheme),
      slider: getSliderTheme(globalTheme),
      spinner: getSpinnerTheme(globalTheme),
      statistic: getStatisticTheme(globalTheme),
      steps: getStepsTheme(globalTheme),
      "switch": getSwitchTheme(globalTheme),
      table: getTableTheme(globalTheme),
      filters: getFiltersTheme(globalTheme),
      tabs: getTabsTheme(globalTheme),
      tag: getTagTheme(globalTheme),
      timePicker: getTimePickerTheme(globalTheme),
      timeline: getTimelineTheme(globalTheme),
      tooltip: getTooltipTheme(globalTheme),
      typography: getTypographyTheme(globalTheme),
      widget: getWidgetTheme(globalTheme),
      chart: getChartTheme(globalTheme)
    }
  });
};
var getTheme$1 = getTheme;

var getButtonTheme = function getButtonTheme(theme) {
  var heroTheme = getButtonTheme$1(theme);
  var omopColors = {
    text: {
      filledPrimary: theme.colors.primary,
      hoverPrimary: theme.colors.palette.violetDark60,
      activePrimary: theme.colors.primary,
      loadingPrimary: theme.colors.primary,
      disabledText: theme.colors.subduedText
    },
    background: {
      primary: theme.colors.primaryLightBackground,
      hoverPrimary: theme.colors.defaultBackground,
      activePrimary: theme.colors.primaryBackground,
      loadingPrimary: theme.colors.primaryBackground,
      disabledBackground: theme.colors.neutralLightBackground
    }
  };
  return Object.assign(Object.assign({}, heroTheme), {
    colors: Object.assign(Object.assign(Object.assign({}, heroTheme.colors), omopColors), {
      text: Object.assign(Object.assign({}, heroTheme.colors.text), omopColors.text),
      background: Object.assign(Object.assign({}, heroTheme.colors.background), omopColors.background)
    })
  });
};

var getEmptyTheme = function getEmptyTheme(theme) {
  var heroTheme = getEmptyTheme$1(theme);
  var omopColors = {
    text: theme.colors.subduedText
  };
  return Object.assign(Object.assign({}, heroTheme), {
    colors: Object.assign(Object.assign({}, heroTheme.colors), omopColors)
  });
};

var getProgressTheme = function getProgressTheme(theme) {
  var heroTheme = getProgressTheme$1(theme);
  var omopColors = {
    circleText: {
      primary: theme.colors.palette.violetDark30,
      warning: theme.colors.palette.orangeDark30,
      danger: theme.colors.palette.redDark30,
      success: theme.colors.palette.green,
      error: theme.colors.palette.pinkDark30,
      archived: theme.colors.palette.greyDark45
    },
    progress: {
      background: theme.colors.defaultBackground,
      primary: theme.colors.primary,
      warning: theme.colors.warning,
      danger: theme.colors.danger,
      success: theme.colors.palette.green,
      error: theme.colors.error,
      archived: theme.colors.neutralBackground
    }
  };
  return Object.assign(Object.assign({}, heroTheme), {
    colors: Object.assign(Object.assign(Object.assign({}, heroTheme.colors), omopColors), {
      circleText: Object.assign(Object.assign({}, heroTheme.colors.circleText), omopColors.circleText),
      progress: Object.assign(Object.assign({}, heroTheme.colors.progress), omopColors.progress)
    })
  });
};

var getOMOPTheme = function getOMOPTheme() {
  var scale$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : scale;
  var systemPalette = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : omopSystemPalette$1;
  var globalTheme = getGlobalTheme(scale$1, systemPalette);
  var defaultTheme = getTheme$1(scale$1, systemPalette);
  return Object.assign(Object.assign({}, defaultTheme), {
    __hd__: Object.assign(Object.assign({}, defaultTheme.__hd__), {
      button: getButtonTheme(globalTheme),
      empty: getEmptyTheme(globalTheme),
      progress: getProgressTheme(globalTheme)
    })
  });
};
var getOMOPTheme$1 = getOMOPTheme;

var getEBensTheme = function getEBensTheme() {
  var scale$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : scale;
  var systemPalette = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eBensSystemPalette$1;
  return getTheme$1(scale$1, systemPalette);
};
var getEBensTheme$1 = getEBensTheme;

var getBannerTheme = function getBannerTheme(theme) {
  var bannerHeroTheme = getBannerTheme$1(theme);
  return Object.assign(Object.assign({}, bannerHeroTheme), {
    colors: Object.assign(Object.assign({}, bannerHeroTheme.colors), {
      info: theme.colors.lightText,
      textInfo: theme.colors.lightText
    })
  });
};

var getJobsTheme = function getJobsTheme() {
  var scale$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : scale;
  var systemPalette = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : jobsSystemPalette$1;
  var globalTheme = getGlobalTheme(scale$1, systemPalette);
  var defaultTheme = getTheme$1(scale$1, systemPalette);
  return Object.assign(Object.assign({}, defaultTheme), {
    __hd__: Object.assign(Object.assign({}, defaultTheme.__hd__), {
      banner: getBannerTheme(globalTheme)
    })
  });
};
var getJobsTheme$1 = getJobsTheme;

var heroTheme = getTheme$1();
var heroTheme$1 = heroTheme;

/**
 * @deprecated omopTheme is deprecation from Hero Design
 */
var omopTheme = getOMOPTheme$1();
var omopTheme$1 = omopTheme;

var eBensTheme = getEBensTheme$1();
var eBensTheme$1 = eBensTheme;

var jobsTheme = getJobsTheme$1();
var jobsTheme$1 = jobsTheme;

function pipe(a) {
  for (var _len = arguments.length, fns = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    fns[_key - 1] = arguments[_key];
  }
  switch (arguments.length) {
    case 1:
      return a;
    case 2:
      return fns[0](a);
    case 3:
      return fns[1](fns[0](a));
    case 4:
      return fns[2](fns[1](fns[0](a)));
    case 5:
      return fns[3](fns[2](fns[1](fns[0](a))));
  }
  throw new Error("Pipe with ".concat(arguments.length, " arguments is not implemented yet!"));
}
/* eslint-enable no-shadow, @typescript-eslint/no-non-null-assertion */
// eslint-disable-next-line @typescript-eslint/no-empty-function
var noop$2 = function noop() {
  // Intentionally left empty, used for event handlers that do nothing in some specific cases.
};
var always = function always(a) {
  return function (_b) {
    return a;
  };
};
var invokeWith = function invokeWith(a) {
  return function (fn) {
    return fn(a);
  };
};
var invoke = function invoke(fn) {
  return function (a) {
    return fn(a);
  };
};
var equal = function equal(a1) {
  return function (a2) {
    return a1 === a2;
  };
};
var isDefined = function isDefined(a) {
  return a !== null && a !== undefined;
};
var camelize = function camelize(s) {
  return s.replace(/-./g, function (x) {
    var _x = _slicedToArray(x, 2),
      match = _x[1];
    if (match !== undefined) {
      return match.toUpperCase();
    }
    return '';
  });
};

var aliases = {
  bgColor: 'backgroundColor',
  m: 'margin',
  mt: 'marginTop',
  mr: 'marginRight',
  mb: 'marginBottom',
  ml: 'marginLeft',
  p: 'padding',
  pt: 'paddingTop',
  pr: 'paddingRight',
  pb: 'paddingBottom',
  pl: 'paddingLeft'
};
var scaleNames = {
  backgroundColor: 'colors',
  borderColor: 'colors',
  borderRadius: 'radii',
  borderStyle: 'borderStyles',
  borderWidth: 'borderWidths',
  boxShadow: 'shadows',
  color: 'colors',
  fontSize: 'fontSizes',
  fontWeight: 'fontWeights',
  lineHeight: 'lineHeights',
  margin: 'space',
  marginBottom: 'space',
  marginLeft: 'space',
  marginRight: 'space',
  marginTop: 'space',
  padding: 'space',
  paddingBottom: 'space',
  paddingLeft: 'space',
  paddingRight: 'space',
  paddingTop: 'space'
};
var formatCssValue = function formatCssValue(themeValue, sxValue, unit) {
  if (themeValue !== undefined) {
    return [themeValue, unit].filter(Boolean).join('');
  }
  return sxValue;
};
var getCssValue = function getCssValue(theme, value, scaleName) {
  var camelValue = camelize(value.toString());
  switch (scaleName) {
    case 'borderWidths':
      return formatCssValue(theme.borderWidths[camelValue], value, 'px');
    case 'fontSizes':
      return formatCssValue(theme.fontSizes[camelValue], value, 'px');
    case 'lineHeights':
      return formatCssValue(theme.lineHeights[camelValue], value, 'px');
    case 'radii':
      return formatCssValue(theme.radii[camelValue], value, 'px');
    case 'space':
      return formatCssValue(theme.space[camelValue], value, 'px');
    case 'colors':
      {
        var systemPaletteColor = theme.colors[camelValue];
        var paletteColor = theme.colors.palette[camelValue];
        return formatCssValue(systemPaletteColor !== undefined ? systemPaletteColor : paletteColor, value);
      }
    case 'fontWeights':
      {
        var fontWeight = theme.fontWeights[camelValue];
        return fontWeight !== undefined ? fontWeight : value;
      }
    case 'shadows':
      return formatCssValue(theme.shadows[camelValue], value);
    case 'borderStyles':
      return value;
  }
};
var css = function css(sx) {
  var theme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : heroTheme$1;
  var styleObject = {};
  Object.entries(sx).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      prop = _ref2[0],
      value = _ref2[1];
    var _a;
    var cssProp = (_a = aliases[prop]) !== null && _a !== void 0 ? _a : prop;
    var scaleName = scaleNames[cssProp];
    if (scaleName === undefined) {
      styleObject[cssProp] = value;
      return;
    }
    if (value !== undefined) {
      var cssValue = getCssValue(theme, value, scaleName);
      styleObject[cssProp] = cssValue;
    }
  });
  return styleObject;
};
var css$1 = css;

var breakpoints = ['small', 'medium', 'large', 'xlarge'];
var getBreakpointValue = function getBreakpointValue(bp, theme) {
  switch (bp) {
    case 'small':
      return theme.breakpoints.small;
    case 'medium':
      return theme.breakpoints.medium;
    case 'large':
      return theme.breakpoints.large;
    case 'xlarge':
      return theme.breakpoints.xlarge;
  }
};
var getMediaQuery = function getMediaQuery(bp, theme) {
  return "(min-width: ".concat(getBreakpointValue(bp, theme), ")");
};

var useNativeResizeObserver = function useNativeResizeObserver(resizeCallback, refElement) {
  useLayoutEffect(function () {
    if (refElement === null) return;
    var resizeObserver = new ResizeObserver(function (entries) {
      if (isNonEmptyArray(entries)) {
        var targetElement = entries[0].target;
        resizeCallback({
          height: targetElement.offsetHeight,
          width: targetElement.offsetWidth,
          clientWidth: targetElement.clientWidth,
          scrollWidth: targetElement.scrollWidth
        });
      }
    });
    resizeObserver.observe(refElement);
    return function () {
      return resizeObserver.unobserve(refElement);
    };
  }, [resizeCallback, refElement]);
};
var useCustomResizeObserver = function useCustomResizeObserver(resizeCallback, refElement) {
  var width = refElement !== null ? refElement.offsetWidth : 0;
  var height = refElement !== null ? refElement.offsetHeight : 0;
  var clientWidth = refElement !== null ? refElement.clientWidth : 0;
  var scrollWidth = refElement !== null ? refElement.scrollWidth : 0;
  useLayoutEffect(function () {
    resizeCallback({
      width: width,
      height: height,
      clientWidth: clientWidth,
      scrollWidth: scrollWidth
    });
  }, [width, height, resizeCallback, clientWidth, scrollWidth]);
};
var useResizeObserver = function useResizeObserver(resizeCallback, refElement) {
  var observer = useMemo(function () {
    return typeof window !== 'undefined' && window.ResizeObserver !== undefined ? useNativeResizeObserver : useCustomResizeObserver;
  }, []);
  observer(resizeCallback, refElement);
};
var useHover = function useHover(ref) {
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    value = _useState2[0],
    setValue = _useState2[1];
  var handleMouseEnter = function handleMouseEnter() {
    return setValue(true);
  };
  var handleMouseLeave = function handleMouseLeave() {
    return setValue(false);
  };
  useEffect(function () {
    var node = ref.current;
    if (node !== null) {
      node.addEventListener('mouseenter', handleMouseEnter);
      node.addEventListener('mouseleave', handleMouseLeave);
      return function () {
        node.removeEventListener('mouseenter', handleMouseEnter);
        node.removeEventListener('mouseleave', handleMouseLeave);
      };
    }
  }, [ref]);
  return value;
};
var getMatches = function getMatches(query) {
  // Prevents SSR issues
  if (typeof window !== 'undefined') {
    return window.matchMedia(query).matches;
  }
  return false;
};
var useMediaQuery$1 = function useMediaQuery(query) {
  var _useState3 = useState(getMatches(query)),
    _useState4 = _slicedToArray(_useState3, 2),
    matches = _useState4[0],
    setMatches = _useState4[1];
  var handleChange = useCallback(function () {
    setMatches(getMatches(query));
  }, [query]);
  useEffect(function () {
    var matchMedia = window.matchMedia(query);
    // Triggered at the first client-side load and if query changes
    handleChange();
    matchMedia.addEventListener('change', handleChange);
    return function () {
      matchMedia.removeEventListener('change', handleChange);
    };
  }, [query, handleChange]);
  return matches;
};
var useSizeMediaQuery = function useSizeMediaQuery() {
  var theme = useTheme();
  var isSmall = useMediaQuery$1(getMediaQuery('small', theme));
  var isMedium = useMediaQuery$1(getMediaQuery('medium', theme));
  var isLarge = useMediaQuery$1(getMediaQuery('large', theme));
  var isXLarge = useMediaQuery$1(getMediaQuery('xlarge', theme));
  if (isXLarge) return 'xlarge';
  if (isLarge) return 'large';
  if (isMedium) return 'medium';
  if (isSmall) return 'small';
  return 'small';
};
var useDeprecation = function useDeprecation(message) {
  var cond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  useEffect(function () {
    if (process.env['NODE_ENV'] === 'development' && cond === true) {
      // eslint-disable-next-line no-console
      console.warn("%c\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255A\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551  \u2588\u2588\u2551\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255D  \u2588\u2588\u2554\u2550\u2550\u2550\u255D \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255D  \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255D  \u2588\u2588\u2551  \u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255A\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\n\u255A\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u255D     \u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u255D  \u255A\u2550\u255D   \u255A\u2550\u255D   \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u255D\n%c".concat(message), 'color: red', 'color: red; font-size: 15px');
    }
  }, [message, cond]);
};
var useCss = function useCss(sx) {
  var theme = useTheme();
  return useMemo(function () {
    return css$1(sx, theme);
  }, [sx]);
};
var useControllableState = function useControllableState(_ref) {
  var defaultValue = _ref.defaultValue,
    controlledValue = _ref.value,
    onControlledChange = _ref.onChange;
  var _useState5 = useState(defaultValue),
    _useState6 = _slicedToArray(_useState5, 2),
    internalState = _useState6[0],
    setInternalState = _useState6[1];
  var isControlled = controlledValue !== undefined;
  var value = isControlled ? controlledValue : internalState;
  var setValue = useCallback(function (valueOrUpdater) {
    var updater = typeof valueOrUpdater === 'function' ? valueOrUpdater : function () {
      return valueOrUpdater;
    };
    var nextValue = updater(value);
    if (isControlled) {
      onControlledChange === null || onControlledChange === void 0 ? void 0 : onControlledChange(nextValue);
    } else {
      setInternalState(nextValue);
    }
  }, [isControlled, onControlledChange, value]);
  return [value, setValue];
};
var useBoolean = function useBoolean() {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var _useState7 = useState(initialValue),
    _useState8 = _slicedToArray(_useState7, 2),
    value = _useState8[0],
    setValue = _useState8[1];
  var actions = useMemo(function () {
    return {
      on: function on() {
        return setValue(true);
      },
      off: function off() {
        return setValue(false);
      },
      toggle: function toggle() {
        return setValue(function (prevValue) {
          return !prevValue;
        });
      }
    };
  }, []);
  return [value, actions];
};

var spinning$1 = keyframes(["from{transform:rotate(0deg);}to{transform:rotate(360deg);}"]);
var IconWrapper$3 = styled.div.withConfig({
  displayName: "StyledIcon__IconWrapper",
  componentId: "sc-18ehc7v-0"
})(["&&{display:inline-flex;margin:0;padding:0;}&& > *{", ";}&&{", ";}"], function (_ref) {
  var themeSize = _ref.themeSize,
    theme = _ref.theme;
  switch (themeSize) {
    case 'inherit':
      return css$2(["height:", ";"], theme.__hd__.icon.sizes.inherit);
    case 'xsmall':
      return css$2(["height:", ";"], theme.__hd__.icon.sizes.xsmall);
    case 'small':
      return css$2(["height:", ";"], theme.__hd__.icon.sizes.small);
    case 'medium':
      return css$2(["height:", ";"], theme.__hd__.icon.sizes.medium);
    case 'large':
      return css$2(["height:", ";"], theme.__hd__.icon.sizes.large);
    case 'xlarge':
      return css$2(["height:", ";"], theme.__hd__.icon.sizes.xlarge);
  }
}, function (_ref2) {
  var themeColor = _ref2.themeColor,
    theme = _ref2.theme;
  switch (themeColor) {
    case 'inherit':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.inherit);
    case 'text':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.text);
    case 'subdued-text':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.subduedText);
    case 'disabled-text':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.disabledText);
    case 'primary':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.primary);
    case 'info':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.info);
    case 'danger':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.danger);
    case 'warning':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.warning);
    case 'success':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.success);
    case 'error':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.error);
  }
});
var StyledIcon = styled.i.withConfig({
  displayName: "StyledIcon",
  componentId: "sc-18ehc7v-1"
})(["&&{display:inline-block;margin:0;padding:0;", ";", ";}"], function (_ref3) {
  var themeSize = _ref3.themeSize,
    theme = _ref3.theme;
  switch (themeSize) {
    case 'inherit':
      return css$2(["font-size:", ";"], theme.__hd__.icon.fontSizes.inherit);
    case 'xsmall':
      return css$2(["font-size:", ";"], theme.__hd__.icon.fontSizes.xsmall);
    case 'small':
      return css$2(["font-size:", ";"], theme.__hd__.icon.fontSizes.small);
    case 'medium':
      return css$2(["font-size:", ";"], theme.__hd__.icon.fontSizes.medium);
    case 'large':
      return css$2(["font-size:", ";"], theme.__hd__.icon.fontSizes.large);
    case 'xlarge':
      return css$2(["font-size:", ";"], theme.__hd__.icon.fontSizes.xlarge);
  }
}, function (_ref4) {
  var themeColor = _ref4.themeColor,
    theme = _ref4.theme;
  switch (themeColor) {
    case 'inherit':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.inherit);
    case 'text':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.text);
    case 'subdued-text':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.subduedText);
    case 'disabled-text':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.disabledText);
    case 'primary':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.primary);
    case 'info':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.info);
    case 'danger':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.danger);
    case 'warning':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.warning);
    case 'success':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.success);
    case 'error':
      return css$2(["color:", ";"], theme.__hd__.icon.colors.error);
  }
});
var SpinningIconWrapper = styled(IconWrapper$3).withConfig({
  displayName: "StyledIcon__SpinningIconWrapper",
  componentId: "sc-18ehc7v-2"
})(["&& > *{animation:", " 1s infinite linear;}"], spinning$1);
var SpinningIcon = styled(StyledIcon).withConfig({
  displayName: "StyledIcon__SpinningIcon",
  componentId: "sc-18ehc7v-3"
})(["&&{animation:", " 1s infinite linear;}"], spinning$1);

// 🔴 DO NOT EDIT — This file is generated automatically.
var IconList = ['activate', 'add-emoji', 'add-person', 'adjustment', 'alignment', 'archive', 'backward-arrow', 'bank', 'bell', 'billing', 'bookmark', 'box-check', 'box', 'buildings', 'cake', 'calendar-clock', 'calendar', 'candy-box-menu', 'carat-down-small', 'carat-down', 'carat-left', 'carat-right', 'carat-up', 'circle-add', 'circle-cancel', 'circle-check', 'circle-down', 'circle-info', 'circle-left', 'circle-ok', 'circle-pencil', 'circle-question', 'circle-remove', 'circle-right', 'circle-up', 'circle-warning', 'clock-3', 'clock', 'cloud-download', 'cloud-upload', 'cog', 'coin', 'contacts', 'corner-resize', 'credit-card', 'diamond', 'direction-arrows', 'directory', 'document', 'dollar-coin-shine', 'double-buildings', 'edit-template', 'envelope', 'expense', 'eye-circle', 'eye-invisible', 'eye', 'face-meh', 'face-sad', 'face-smiley', 'feed', 'feedbacks', 'file-certified', 'file-clone', 'file-copy', 'file-csv', 'file-dispose', 'file-doc', 'file-excel', 'file-export', 'file-lock', 'file-pdf', 'file-powerpoint', 'file-search', 'file-secured', 'file-sheets', 'file-slide', 'file-verified', 'file-word', 'file', 'flask', 'folder-user', 'folder', 'format-bold', 'format-heading1', 'format-heading2', 'format-italic', 'format-list-bulleted', 'format-list-numbered', 'format-underlined', 'forward-arrow', 'funnel-filter', 'gauge', 'global-dollar', 'globe', 'graduation-cap', 'graph', 'happy-sun', 'health-bag', 'heart', 'home', 'image', 'import', 'incident-siren', 'instapay', 'list', 'loading-2', 'loading', 'location', 'lock', 'looks-one', 'looks-two', 'mandatory', 'media-content', 'menu', 'moneybag', 'moon', 'move', 'multiple-stars', 'multiple-users', 'node', 'open-folder', 'paperclip', 'payment-summary', 'pencil', 'phone', 'piggy-bank', 'pin', 'plane', 'play-circle', 'print', 'raising-hands', 'rectangle-mandatory', 'reply-arrow', 'reply', 'reschedule', 'rostering', 'save', 'schedule-send', 'schedule', 'search-person', 'send', 'speaker', 'star-award', 'star-badge', 'star-medal', 'star', 'steps-circle', 'stopwatch', 'suitcase', 'survey', 'swag', 'switch', 'tag', 'target', 'teams', 'thumb-down', 'thumb-up', 'timesheet', 'touch-id', 'trash-bin', 'unlock', 'user', 'video-1', 'video-2', 'warning', 'wrench', 'academic-hat-outlined', 'activate-outlined', 'add-person-outlined', 'add-section-outlined', 'add-time-outlined', 'add', 'adjustment-outlined', 'alignment-2-outlined', 'alignment-outlined', 'all-caps', 'arrow-down', 'arrow-left', 'arrow-right', 'arrow-up', 'at-sign', 'bell-outlined', 'billing-outlined', 'billing-pound-outlined', 'body-outlined', 'bold', 'bookmark-outlined', 'box-check-outlined', 'box-outlined', 'bullet-points', 'cake-outlined', 'calendar-dates-outlined', 'calendar-star-outlined', 'camera-outlined', 'cancel', 'chat-outlined', 'checkmark', 'circle-add-outlined', 'circle-cancel-outlined', 'circle-down-outlined', 'circle-info-outlined', 'circle-left-outlined', 'circle-ok-outlined', 'circle-question-outlined', 'circle-remove-outlined', 'circle-right-outlined', 'circle-up-outlined', 'circle-warning-outlined', 'clock-2-outlined', 'clock-outlined', 'cog-outlined', 'coin-outlined', 'coin-pound-outlined', 'comment-outlined', 'contacts-outlined', 'content-copy-outlined', 'credit-card-outlined', 'cup-outlined', 'diamond-outlined', 'direction-arrows-outlined', 'directory-outlined', 'document-outlined', 'dollar-coin-shine-outlined', 'dollar-sign', 'donut-chart-outlined', 'double-buildings-outlined', 'double-left-arrows', 'double-right-arrows', 'download-outlined', 'edit-template-outlined', 'edit-user-outlined', 'email-outlined', 'enter-arrow', 'envelope-outlined', 'expense-outlined', 'external-link', 'eye-invisible-outlined', 'eye-outlined', 'face-id', 'face-meh-outlined', 'face-open-smiley-outlined', 'face-sad-outlined', 'face-smiley-outlined', 'feed-outlined', 'feedbacks-outlined', 'file-certified-outlined', 'file-clone-outlined', 'file-copy-outlined', 'file-dispose-outlined', 'file-download-outlined', 'file-export-outlined', 'file-lock-outlined', 'file-outlined', 'file-search-outlined', 'file-secured-outlined', 'file-text-outlined', 'file-verified-outlined', 'filter-outlined', 'flag-outlined', 'folder-outlined', 'folder-user-outlined', 'funnel-filter-outline', 'gauge-outlined', 'gift-outlined', 'graph-outlined', 'happy-sun-outlined', 'health-bag-outlined', 'heart-outlined', 'home-outlined', 'image-outlined', 'import-outlined', 'instapay-outlined', 'italic', 'link-1', 'link-2', 'list-outlined', 'location-outlined', 'lock-outlined', 'locked-file-outlined', 'log-out', 'magic-outlined', 'media-content-outlined', 'menu-close', 'menu-expand', 'menu-fold-outlined', 'menu-unfold-outlined', 'moneybag-outlined', 'moneybag-pound-outlined', 'moon-outlined', 'more-horizontal', 'more-vertical', 'multiple-folders-outlined', 'multiple-users-outlined', 'node-outlined', 'number-points', 'number', 'passport-outlined', 'payment-summary-outlined', 'payslip-outlined', 'pencil-outlined', 'percentage', 'phone-outlined', 'piggy-bank-outlined', 'pin-outlined', 'plane-outlined', 'play-circle-outlined', 'print-outlined', 'qr-code-outlined', 're-assign', 'redeem', 'refresh', 'remove', 'reply-outlined', 'restart', 'return-arrow', 'rostering-outlined', 'save-outlined', 'schedule-outlined', 'search-outlined', 'send-outlined', 'share-1', 'share-2', 'single-down-arrow', 'single-left-arrow', 'single-right-arrow', 'single-up-arrow', 'sparkle-2-outlined', 'sparkle-outlined', 'speaker-outlined', 'star-outlined', 'stopwatch-outlined', 'strikethrough', 'suitcase-outlined', 'survey-outlined', 'switch-outlined', 'sync', 'table', 'target-outlined', 'timesheet-outlined', 'transfer', 'trash-bin-outlined', 'trash-outlined', 'unavailable', 'underline', 'unlock-outlined', 'upload-outlined', 'user-circle-outlined', 'user-outlined', 'user-rectangle-outlined', 'user-remove-outlined', 'video-1-outlined', 'video-2-outlined', 'wallet-outlined', 'wrench-outlined'];
var IconList$1 = IconList;

var Icon = function Icon(_ref) {
  var icon = _ref.icon,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'inherit' : _ref$size,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'inherit' : _ref$intent,
    _ref$spin = _ref.spin,
    spin = _ref$spin === void 0 ? false : _ref$spin,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var isCustomIcon = /*#__PURE__*/React__default.isValidElement(icon);
  var themeSize = isCustomIcon === true && size === 'inherit' ? 'medium' : size;
  var themeColor = intent;
  var css = useCss(sx);
  // Custom icon
  if (isCustomIcon) {
    var WrapperComponent = spin === true ? SpinningIconWrapper : IconWrapper$3;
    return /*#__PURE__*/React__default.createElement(WrapperComponent, {
      themeSize: themeSize,
      themeColor: themeColor,
      id: id,
      className: className,
      style: Object.assign(Object.assign({}, style), css),
      "data-test-id": dataTestId
    }, icon);
  }
  var IconComponent = spin === true ? SpinningIcon : StyledIcon;
  return /*#__PURE__*/React__default.createElement(IconComponent, {
    id: id,
    className: className !== undefined ? "hero-icon-".concat(icon, " ").concat(className) : "hero-icon-".concat(icon),
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId,
    themeSize: themeSize,
    themeColor: themeColor
  });
};
Icon.List = IconList$1;
var Icon$1 = Icon;

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

var FILLED_TEXT_COLORS = {
  primary: 'filledPrimary',
  danger: 'filledDanger',
  success: 'filledSuccess',
  warning: 'filledWarning',
  error: 'filledError'
};
var HOVER_COLORS$1 = {
  primary: 'hoverPrimary',
  danger: 'hoverDanger',
  success: 'hoverSuccess',
  warning: 'hoverWarning',
  error: 'hoverError'
};
var ACTIVE_COLORS = {
  primary: 'activePrimary',
  danger: 'activeDanger',
  success: 'activeSuccess',
  warning: 'activeWarning',
  error: 'activeError'
};
var genFilledStyles$2 = function genFilledStyles(intent) {
  return css$2(["border:none;color:", ";background:", ";&:hover,&:focus{background:", ";}&:active{background:", ";}&:disabled{background:", ";color:", ";cursor:not-allowed;}"], function (_ref) {
    var theme = _ref.theme;
    return theme.__hd__.button.colors.text[FILLED_TEXT_COLORS[intent]];
  }, function (_ref2) {
    var theme = _ref2.theme;
    return theme.__hd__.button.colors.background[intent];
  }, function (_ref3) {
    var theme = _ref3.theme;
    return theme.__hd__.button.colors.background[HOVER_COLORS$1[intent]];
  }, function (_ref4) {
    var theme = _ref4.theme;
    return theme.__hd__.button.colors.background[ACTIVE_COLORS[intent]];
  }, function (_ref5) {
    var theme = _ref5.theme;
    return theme.__hd__.button.colors.background.disabledBackground;
  }, function (_ref6) {
    var theme = _ref6.theme;
    return theme.__hd__.button.colors.text.disabledText;
  });
};
var genOutlinedStyles$1 = function genOutlinedStyles(intent) {
  return css$2(["color:", ";border-color:", ";background:transparent;&:hover,&:focus{color:", ";border-color:", ";}&:active{color:", ";border-color:", ";}&:disabled{color:", ";border-color:", ";cursor:not-allowed;}"], function (_ref7) {
    var theme = _ref7.theme;
    return theme.__hd__.button.colors.text[intent];
  }, function (_ref8) {
    var theme = _ref8.theme;
    return theme.__hd__.button.colors[intent];
  }, function (_ref9) {
    var theme = _ref9.theme;
    return theme.__hd__.button.colors.text[HOVER_COLORS$1[intent]];
  }, function (_ref10) {
    var theme = _ref10.theme;
    return theme.__hd__.button.colors[HOVER_COLORS$1[intent]];
  }, function (_ref11) {
    var theme = _ref11.theme;
    return theme.__hd__.button.colors.text[ACTIVE_COLORS[intent]];
  }, function (_ref12) {
    var theme = _ref12.theme;
    return theme.__hd__.button.colors[ACTIVE_COLORS[intent]];
  }, function (_ref13) {
    var theme = _ref13.theme;
    return theme.__hd__.button.colors.text.disabledLightText;
  }, function (_ref14) {
    var theme = _ref14.theme;
    return theme.__hd__.button.colors.defaultBorder;
  });
};
var genTextStyles = function genTextStyles(intent) {
  return css$2(["color:", ";border:none;background:transparent;min-width:unset;&:hover,&:focus{color:", ";}&:active{color:", ";}&:disabled{color:", ";cursor:not-allowed;}"], function (_ref15) {
    var theme = _ref15.theme;
    return theme.__hd__.button.colors.text[intent];
  }, function (_ref16) {
    var theme = _ref16.theme;
    return theme.__hd__.button.colors.text[HOVER_COLORS$1[intent]];
  }, function (_ref17) {
    var theme = _ref17.theme;
    return theme.__hd__.button.colors.text[ACTIVE_COLORS[intent]];
  }, function (_ref18) {
    var theme = _ref18.theme;
    return theme.__hd__.button.colors.text.disabledText;
  });
};
var genInlineTextStyles = function genInlineTextStyles(intent) {
  return css$2(["", " padding:", ";"], genTextStyles(intent), function (_ref19) {
    var theme = _ref19.theme;
    return theme.__hd__.button.space.inlineTextPadding;
  });
};
var genFilledReversedStyles = function genFilledReversedStyles(intent) {
  return css$2(["border:none;background:white;color:", ";&:hover{opacity:0.4;}&:focus,&:active{opacity:0.7;}&:disabled{opacity:1;background:", ";color:", ";cursor:not-allowed;}"], function (_ref20) {
    var theme = _ref20.theme;
    return theme.__hd__.button.colors.text[intent];
  }, function (_ref21) {
    var theme = _ref21.theme;
    return theme.__hd__.button.colors.background.disabledBackground;
  }, function (_ref22) {
    var theme = _ref22.theme;
    return theme.__hd__.button.colors.text.disabledText;
  });
};
var genLoadingStyles = function genLoadingStyles(variant) {
  switch (variant) {
    case 'basic':
      return css$2(["color:", ";border-color:", ";"], function (_ref23) {
        var theme = _ref23.theme;
        return theme.__hd__.button.colors.text.activePrimary;
      }, function (_ref24) {
        var theme = _ref24.theme;
        return theme.__hd__.button.colors.activePrimary;
      });
    case 'basic-transparent':
    case 'filled-reversed-primary':
    case 'filled-reversed-success':
    case 'filled-reversed-warning':
    case 'filled-reversed-danger':
    case 'filled-reversed-error':
      return css$2(["opacity:0.7;"]);
    case 'filled-primary':
      return css$2(["background:", ";"], function (_ref25) {
        var theme = _ref25.theme;
        return theme.__hd__.button.colors.background.loadingPrimary;
      });
    case 'filled-success':
      return css$2(["background:", ";"], function (_ref26) {
        var theme = _ref26.theme;
        return theme.__hd__.button.colors.background.loadingSuccess;
      });
    case 'filled-warning':
      return css$2(["background:", ";"], function (_ref27) {
        var theme = _ref27.theme;
        return theme.__hd__.button.colors.background.loadingWarning;
      });
    case 'filled-danger':
      return css$2(["background:", ";"], function (_ref28) {
        var theme = _ref28.theme;
        return theme.__hd__.button.colors.background.loadingDanger;
      });
    case 'filled-error':
      return css$2(["background:", ";"], function (_ref29) {
        var theme = _ref29.theme;
        return theme.__hd__.button.colors.background.loadingError;
      });
    case 'outlined-primary':
    case 'text-primary':
      return css$2(["color:", ";border-color:", ";"], function (_ref30) {
        var theme = _ref30.theme;
        return theme.__hd__.button.colors.text.loadingPrimary;
      }, function (_ref31) {
        var theme = _ref31.theme;
        return theme.__hd__.button.colors.loadingPrimary;
      });
    case 'outlined-success':
    case 'text-success':
      return css$2(["color:", ";border-color:", ";"], function (_ref32) {
        var theme = _ref32.theme;
        return theme.__hd__.button.colors.text.loadingSuccess;
      }, function (_ref33) {
        var theme = _ref33.theme;
        return theme.__hd__.button.colors.loadingSuccess;
      });
    case 'outlined-warning':
    case 'text-warning':
      return css$2(["color:", ";border-color:", ";"], function (_ref34) {
        var theme = _ref34.theme;
        return theme.__hd__.button.colors.text.loadingWarning;
      }, function (_ref35) {
        var theme = _ref35.theme;
        return theme.__hd__.button.colors.loadingWarning;
      });
    case 'outlined-danger':
    case 'text-danger':
      return css$2(["color:", ";border-color:", ";"], function (_ref36) {
        var theme = _ref36.theme;
        return theme.__hd__.button.colors.text.loadingDanger;
      }, function (_ref37) {
        var theme = _ref37.theme;
        return theme.__hd__.button.colors.loadingDanger;
      });
    case 'outlined-error':
    case 'text-error':
      return css$2(["color:", ";border-color:", ";"], function (_ref38) {
        var theme = _ref38.theme;
        return theme.__hd__.button.colors.text.loadingError;
      }, function (_ref39) {
        var theme = _ref39.theme;
        return theme.__hd__.button.colors.loadingError;
      });
  }
};
var StyledButton$1 = styled('button').withConfig({
  shouldForwardProp: function shouldForwardProp(prop, _defaultValidatorFn) {
    return !['loading', 'themeSize', 'themeVariant'].includes(prop);
  }
}).withConfig({
  displayName: "StyledButton",
  componentId: "sc-kfk5n6-0"
})(["&&{box-sizing:border-box;white-space:nowrap;line-height:100%;border-style:solid;border-width:", ";font-weight:", ";margin:0;cursor:pointer;}&&:focus{outline:none;}&&{", ";", ";", ";}"], function (_ref40) {
  var theme = _ref40.theme;
  return theme.__hd__.button.borderWidths["default"];
}, function (_ref41) {
  var theme = _ref41.theme;
  return theme.__hd__.button.fontWeights.text;
}, function (_ref42) {
  var themeSize = _ref42.themeSize,
    theme = _ref42.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["height:", ";padding:", ";font-size:", ";border-radius:", ";min-width:", ";"], theme.__hd__.button.sizes.small, theme.__hd__.button.space.smallPadding, theme.__hd__.button.fontSizes.small, theme.__hd__.button.radii.small, theme.__hd__.button.sizes.smallMinWidth);
    case 'medium':
      return css$2(["height:", ";padding:", ";font-size:", ";border-radius:", ";min-width:", ";"], theme.__hd__.button.sizes.medium, theme.__hd__.button.space.mediumPadding, theme.__hd__.button.fontSizes.medium, theme.__hd__.button.radii.medium, theme.__hd__.button.sizes.mediumMinWidth);
    case 'large':
      return css$2(["height:", ";padding:", ";font-size:", ";border-radius:", ";min-width:", ";"], theme.__hd__.button.sizes.large, theme.__hd__.button.space.largePadding, theme.__hd__.button.fontSizes.large, theme.__hd__.button.radii.large, theme.__hd__.button.sizes.largeMinWidth);
  }
}, function (_ref43) {
  var themeVariant = _ref43.themeVariant,
    theme = _ref43.theme;
  switch (themeVariant) {
    case 'basic':
      return css$2(["color:", ";border-color:", ";background:", ";&:hover,&:focus{color:", ";border-color:", ";}&:active{color:", ";border-color:", ";}&:disabled{background:", ";color:", ";border-color:", ";cursor:not-allowed;}"], theme.__hd__.button.colors.text.defaultText, theme.__hd__.button.colors.defaultBorder, theme.__hd__.button.colors.background.defaultLightBackground, theme.__hd__.button.colors.text.hoverPrimary, theme.__hd__.button.colors.hoverPrimary, theme.__hd__.button.colors.text.activePrimary, theme.__hd__.button.colors.activePrimary, theme.__hd__.button.colors.background.defaultBackground, theme.__hd__.button.colors.text.disabledText, theme.__hd__.button.colors.defaultBorder);
    case 'basic-transparent':
      return css$2(["color:", ";border-color:", ";background:transparent;&:hover{opacity:0.4;}&:focus,&:active{opacity:0.7;}&:disabled{opacity:1;color:", ";border-color:", ";cursor:not-allowed;}"], theme.__hd__.button.colors.text.basicTransparent, theme.__hd__.button.colors.basicTransparent, theme.__hd__.button.colors.text.disabledLightText, theme.__hd__.button.colors.defaultBorder);
    case 'filled-primary':
      return genFilledStyles$2('primary');
    case 'filled-danger':
      return genFilledStyles$2('danger');
    case 'filled-success':
      return genFilledStyles$2('success');
    case 'filled-warning':
      return genFilledStyles$2('warning');
    case 'filled-error':
      return genFilledStyles$2('error');
    case 'outlined-primary':
      return genOutlinedStyles$1('primary');
    case 'outlined-danger':
      return genOutlinedStyles$1('danger');
    case 'outlined-success':
      return genOutlinedStyles$1('success');
    case 'outlined-warning':
      return genOutlinedStyles$1('warning');
    case 'outlined-error':
      return genOutlinedStyles$1('error');
    case 'text-primary':
      return genTextStyles('primary');
    case 'text-danger':
      return genTextStyles('danger');
    case 'text-success':
      return genTextStyles('success');
    case 'text-warning':
      return genTextStyles('warning');
    case 'text-error':
      return genTextStyles('error');
    case 'inline-text-primary':
      return genInlineTextStyles('primary');
    case 'inline-text-danger':
      return genInlineTextStyles('danger');
    case 'inline-text-success':
      return genInlineTextStyles('success');
    case 'inline-text-warning':
      return genInlineTextStyles('warning');
    case 'inline-text-error':
      return genInlineTextStyles('error');
    case 'filled-reversed-primary':
      return genFilledReversedStyles('primary');
    case 'filled-reversed-danger':
      return genFilledReversedStyles('danger');
    case 'filled-reversed-success':
      return genFilledReversedStyles('success');
    case 'filled-reversed-warning':
      return genFilledReversedStyles('warning');
    case 'filled-reversed-error':
      return genFilledReversedStyles('error');
  }
}, function (_ref44) {
  var loading = _ref44.loading,
    themeVariant = _ref44.themeVariant;
  return loading === true ? css$2(["pointer-events:none;", ""], genLoadingStyles(themeVariant)) : '';
});
var IconWrapper$2 = styled.span.withConfig({
  displayName: "StyledButton__IconWrapper",
  componentId: "sc-kfk5n6-1"
})(["&&{margin:0;padding:0;}&& > *{vertical-align:top;}&&{", ";}"], function (_ref45) {
  var themePosition = _ref45.themePosition,
    theme = _ref45.theme;
  switch (themePosition) {
    case 'left':
      return css$2(["padding-right:", ";"], theme.__hd__.button.space.iconPadding);
    case 'right':
      return css$2(["padding-left:", ";"], theme.__hd__.button.space.iconPadding);
  }
});
var StyledIconButton = styled.button.withConfig({
  displayName: "StyledButton__StyledIconButton",
  componentId: "sc-kfk5n6-2"
})(["&&{display:inline-flex;margin:0;padding:0;border:none;background:transparent;cursor:pointer;color:inherit;}&&:focus,&&:active{outline:none;}&&:disabled{color:", ";cursor:not-allowed;}&&{", ";}"], function (_ref46) {
  var theme = _ref46.theme;
  return theme.__hd__.button.colors.text.disabledText;
}, function (_ref47) {
  var themeSize = _ref47.themeSize,
    theme = _ref47.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["font-size:", ";"], theme.__hd__.button.fontSizes.small);
    case 'medium':
      return css$2(["font-size:", ";"], theme.__hd__.button.fontSizes.medium);
    case 'large':
      return css$2(["font-size:", ";"], theme.__hd__.button.fontSizes.large);
  }
});

var none$3 = {
  tag: 'None'
};
var some = function some(a) {
  return {
    tag: 'Some',
    value: a
  };
};
var isSome = function isSome(ma) {
  return ma.tag === 'Some';
};
var isNone = function isNone(ma) {
  return ma.tag === 'None';
};
function fromUndefinedable(a) {
  return a === undefined ? none$3 : some(a);
}
function fromNullable(a) {
  return a === null ? none$3 : some(a);
}
function fromNillable(a) {
  return a === null || a === undefined ? none$3 : some(a);
}
var map$2 = function map(f) {
  return function (ma) {
    return isNone(ma) ? none$3 : some(f(ma.value));
  };
};
var flatMap = function flatMap(f) {
  return function (ma) {
    if (isNone(ma)) {
      return none$3;
    }
    var mb = f(ma.value);
    if (isNone(mb)) {
      return none$3;
    }
    return some(mb.value);
  };
};
var getOrElse = function getOrElse(onNone) {
  return function (mb) {
    return isNone(mb) ? onNone() : mb.value;
  };
};

var FILLED_VARIANTS$2 = {
  primary: 'filled-primary',
  success: 'filled-success',
  danger: 'filled-danger',
  warning: 'filled-warning',
  error: 'filled-error',
  black: 'filled-black'
};
var OUTLINED_VARIANTS$2 = {
  primary: 'outlined-primary',
  success: 'outlined-success',
  danger: 'outlined-danger',
  warning: 'outlined-warning',
  error: 'outlined-error',
  black: 'outlined-black'
};
var TEXT_VARIANTS = {
  primary: 'text-primary',
  success: 'text-success',
  danger: 'text-danger',
  warning: 'text-warning',
  error: 'text-error',
  black: 'text-black'
};
var INLINE_TEXT_VARIANTS = {
  primary: 'inline-text-primary',
  success: 'inline-text-success',
  danger: 'inline-text-danger',
  warning: 'inline-text-warning',
  error: 'inline-text-error',
  black: 'inline-text-black'
};
var FILLED_REVERSED_VARIANTS = {
  primary: 'filled-reversed-primary',
  success: 'filled-reversed-success',
  danger: 'filled-reversed-danger',
  warning: 'filled-reversed-warning',
  error: 'filled-reversed-error',
  black: 'filled-reversed-black'
};
var getThemeVariant$2 = function getThemeVariant(variant, intent) {
  switch (variant) {
    case 'basic':
    case 'basic-transparent':
      return variant;
    case 'filled':
      return FILLED_VARIANTS$2[intent];
    case 'outlined':
      return OUTLINED_VARIANTS$2[intent];
    case 'text':
      return TEXT_VARIANTS[intent];
    case 'inline-text':
      return INLINE_TEXT_VARIANTS[intent];
    case 'filled-reversed':
      return FILLED_REVERSED_VARIANTS[intent];
  }
};
var Button$1 = /*#__PURE__*/forwardRef(function (_a, forwardedRef) {
  var text = _a.text,
    icon = _a.icon,
    rightIcon = _a.rightIcon,
    onClick = _a.onClick,
    onBlur = _a.onBlur,
    _a$variant = _a.variant,
    variant = _a$variant === void 0 ? 'filled' : _a$variant,
    _a$intent = _a.intent,
    intent = _a$intent === void 0 ? 'primary' : _a$intent,
    loading = _a.loading,
    disabled = _a.disabled,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    _a$type = _a.type,
    type = _a$type === void 0 ? 'button' : _a$type,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    dataTestId = _a['data-test-id'],
    ariaProps = __rest(_a, ["text", "icon", "rightIcon", "onClick", "onBlur", "variant", "intent", "loading", "disabled", "size", "type", "id", "className", "style", "sx", 'data-test-id']);
  var maybeIcon = fromUndefinedable(icon);
  var maybeLoading = loading === true ? some('loading') : none$3;
  var mapToLeftIcon = map$2(function (ic) {
    return /*#__PURE__*/React__default.createElement(IconWrapper$2, {
      themePosition: "left"
    }, /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: loading === true ? 'loading' : ic,
      spin: loading
    }));
  });
  return /*#__PURE__*/React__default.createElement(StyledButton$1, Object.assign({
    onClick: onClick,
    onBlur: onBlur,
    loading: loading,
    disabled: disabled,
    type: type,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themeSize: size,
    themeVariant: getThemeVariant$2(variant, intent),
    ref: forwardedRef
  }, ariaProps), pipe(maybeIcon, mapToLeftIcon, getOrElse(function () {
    return pipe(maybeLoading, mapToLeftIcon, getOrElse(function () {
      return null;
    }));
  })), text, rightIcon !== undefined && /*#__PURE__*/React__default.createElement(IconWrapper$2, {
    themePosition: "right"
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: rightIcon
  })));
});
Button$1.displayName = 'Button';
var Button$2 = Button$1;

var styles = css$2(["white-space:nowrap;text-decoration:none;font-weight:", ";margin:0;padding:0;", ";", ";", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.button.fontWeights.text;
}, function (_ref2) {
  var themeSize = _ref2.themeSize,
    theme = _ref2.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.button.fontSizes.small, theme.__hd__.button.lineHeights.small);
    case 'medium':
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.button.fontSizes.medium, theme.__hd__.button.lineHeights.medium);
    case 'large':
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.button.fontSizes.large, theme.__hd__.button.lineHeights.large);
    case 'inherit':
      return css$2(["font-size:inherit;line-height:inherit;"]);
  }
}, function (_ref3) {
  var themeIntent = _ref3.themeIntent,
    theme = _ref3.theme;
  switch (themeIntent) {
    case 'primary':
      return css$2(["color:", ";&:hover,&:focus{color:", ";}"], theme.__hd__.button.colors.text.primary, theme.__hd__.button.colors.text.hoverPrimary);
    case 'light-primary':
      return css$2(["color:", ";&:hover,&:focus{color:", ";}"], theme.__hd__.button.colors.text.lightPrimary, theme.__hd__.button.colors.text.lightPrimary);
    case 'success':
      return css$2(["color:", ";&:hover,&:focus{color:", ";}"], theme.__hd__.button.colors.text.success, theme.__hd__.button.colors.text.hoverSuccess);
    case 'warning':
      return css$2(["color:", ";&:hover,&:focus{color:", ";}"], theme.__hd__.button.colors.text.warning, theme.__hd__.button.colors.text.hoverWarning);
    case 'danger':
      return css$2(["color:", ";&:hover,&:focus{color:", ";}"], theme.__hd__.button.colors.text.danger, theme.__hd__.button.colors.text.hoverDanger);
    case 'error':
      return css$2(["color:", ";&:hover,&:focus{color:", ";}"], theme.__hd__.button.colors.text.error, theme.__hd__.button.colors.text.hoverError);
    case 'subdued-text':
      return css$2(["color:", ";"], theme.__hd__.button.colors.text.linkSubdued);
  }
}, function (_ref4) {
  var themeDisabled = _ref4.themeDisabled,
    theme = _ref4.theme;
  switch (themeDisabled) {
    case true:
      return css$2(["color:", ";pointer-events:none;"], theme.__hd__.button.colors.text.disabledText);
    case false:
      return css$2(["&:hover,&:focus{text-decoration:underline;}"]);
  }
});
var StyledLink = styled.a.withConfig({
  displayName: "StyledLinkButton__StyledLink",
  componentId: "sc-n7miz2-0"
})(["&&{", ";}"], styles);
var StyledRouterLink = styled(Link).withConfig({
  displayName: "StyledLinkButton__StyledRouterLink",
  componentId: "sc-n7miz2-1"
})(["&&{", ";}"], styles);
var StyledIconWrapper$4 = styled.span.withConfig({
  displayName: "StyledLinkButton__StyledIconWrapper",
  componentId: "sc-n7miz2-2"
})(["&&{margin:0;padding:0;}&& *{vertical-align:middle;}&&{", ";}"], function (_ref5) {
  var themePosition = _ref5.themePosition,
    theme = _ref5.theme;
  switch (themePosition) {
    case 'left':
      return css$2(["padding-right:", ";"], theme.__hd__.button.space.iconPadding);
    case 'right':
      return css$2(["padding-left:", ";"], theme.__hd__.button.space.iconPadding);
  }
});

var renderContent = function renderContent(text, icon, rightIcon) {
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, icon !== undefined && /*#__PURE__*/React__default.createElement(StyledIconWrapper$4, {
    themePosition: "left"
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: icon
  })), text, rightIcon !== undefined && /*#__PURE__*/React__default.createElement(StyledIconWrapper$4, {
    themePosition: "right"
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: rightIcon
  })));
};
var LinkButton = function LinkButton(_a) {
  var text = _a.text,
    href = _a.href,
    onClick = _a.onClick,
    rel = _a.rel,
    target = _a.target,
    _a$intent = _a.intent,
    intent = _a$intent === void 0 ? 'primary' : _a$intent,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    download = _a.download,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    _a$withRouter = _a.withRouter,
    withRouter = _a$withRouter === void 0 ? false : _a$withRouter,
    icon = _a.icon,
    rightIcon = _a.rightIcon,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    dataTestId = _a['data-test-id'],
    ariaProps = __rest(_a, ["text", "href", "onClick", "rel", "target", "intent", "disabled", "download", "size", "withRouter", "icon", "rightIcon", "id", "className", "style", "sx", 'data-test-id']);
  var css = useCss(sx);
  return withRouter === true ? /*#__PURE__*/React__default.createElement(StyledRouterLink, Object.assign({
    to: href,
    onClick: onClick,
    download: download,
    themeDisabled: disabled,
    themeIntent: intent,
    themeSize: size,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId
  }, ariaProps), renderContent(text, icon, rightIcon)) : /*#__PURE__*/React__default.createElement(StyledLink, Object.assign({
    href: href,
    rel: rel,
    target: target,
    onClick: onClick,
    download: download,
    themeDisabled: disabled,
    themeIntent: intent,
    themeSize: size,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId
  }, ariaProps), renderContent(text, icon, rightIcon));
};
var LinkButton$1 = LinkButton;

var IconButton = function IconButton(_a) {
  var icon = _a.icon,
    onClick = _a.onClick,
    onBlur = _a.onBlur,
    onMouseDown = _a.onMouseDown,
    onMouseEnter = _a.onMouseEnter,
    onMouseLeave = _a.onMouseLeave,
    onMouseUp = _a.onMouseUp,
    _a$intent = _a.intent,
    intent = _a$intent === void 0 ? 'inherit' : _a$intent,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    _a$type = _a.type,
    type = _a$type === void 0 ? 'button' : _a$type,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    dataTestId = _a['data-test-id'],
    ariaProps = __rest(_a, ["icon", "onClick", "onBlur", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseUp", "intent", "size", "disabled", "type", "id", "className", "style", "sx", 'data-test-id']);
  return /*#__PURE__*/React__default.createElement(StyledIconButton, Object.assign({
    type: type,
    onClick: onClick,
    onBlur: onBlur,
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseUp: onMouseUp,
    themeSize: size,
    disabled: disabled,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, ariaProps), /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: icon,
    intent: disabled ? 'disabled-text' : intent
  }));
};
var IconButton$1 = IconButton;

var CompoundButton = Button$2;
CompoundButton.Link = LinkButton$1;
CompoundButton.Icon = IconButton$1;
var Button = CompoundButton;

var StyledIconWrapper$3 = styled.div.withConfig({
  displayName: "StyledAlert__StyledIconWrapper",
  componentId: "sc-dd5itq-0"
})(["&&{display:flex;align-items:center;margin:0;padding:0;color:inherit;", ";}"], function (_ref) {
  var themeSize = _ref.themeSize,
    theme = _ref.theme;
  switch (themeSize) {
    case 'default':
      return css$2(["margin-top:", ";margin-right:", ";line-height:", ";"], theme.__hd__.alert.space.iconDefaultMarginTop, theme.__hd__.alert.space.iconDefaultMarginRight, theme.__hd__.alert.lineHeights.iconDefault);
    case 'compact':
      return css$2(["margin-top:", ";margin-right:", ";line-height:", ";"], theme.__hd__.alert.space.iconCompactMarginTop, theme.__hd__.alert.space.iconCompactMarginRight, theme.__hd__.alert.lineHeights.iconCompact);
  }
});
var StyledInner$2 = styled.div.withConfig({
  displayName: "StyledAlert__StyledInner",
  componentId: "sc-dd5itq-1"
})(["&&{flex:1;margin:0;padding:0;}"]);
var StyledTitle$4 = styled.div.withConfig({
  displayName: "StyledAlert__StyledTitle",
  componentId: "sc-dd5itq-2"
})(["&&{margin:0;padding:0;font-size:", ";font-weight:", ";line-height:", ";margin-bottom:", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.alert.fontSizes.title;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.alert.fontWeights.title;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.alert.lineHeights.title;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.alert.space.titleMarginBottom;
});
var StyledContent$2 = styled.div.withConfig({
  displayName: "StyledAlert__StyledContent",
  componentId: "sc-dd5itq-3"
})(["&&{margin:0;padding:0;font-size:", ";line-height:", ";}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.alert.fontSizes.content;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.alert.lineHeights.content;
});
var StyledAlert = styled.div.withConfig({
  displayName: "StyledAlert",
  componentId: "sc-dd5itq-4"
})(["&&{display:flex;align-items:flex-start;border-style:solid;margin:0;font-weight:", ";border-radius:", ";color:", ";border-width:", ";", ";", ";}&& ", ",&& ", "{", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.alert.fontWeights.text;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.alert.radii.wrapper;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.alert.colors.text;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.alert.borderWidths.wrapper;
}, function (_ref12) {
  var themeSize = _ref12.themeSize,
    theme = _ref12.theme;
  switch (themeSize) {
    case 'default':
      return css$2(["padding:", ";"], theme.__hd__.alert.space.defaultPadding);
    case 'compact':
      return css$2(["padding:", ";"], theme.__hd__.alert.space.compactPadding);
  }
}, function (_ref13) {
  var themeIntent = _ref13.themeIntent,
    theme = _ref13.theme;
  switch (themeIntent) {
    case 'success':
      return css$2(["border-color:", ";background-color:", ";"], theme.__hd__.alert.colors.borderSuccess, theme.__hd__.alert.colors.bgSuccess);
    case 'info':
      return css$2(["border-color:", ";background-color:", ";"], theme.__hd__.alert.colors.borderInfo, theme.__hd__.alert.colors.bgInfo);
    case 'warning':
      return css$2(["border-color:", ";background-color:", ";"], theme.__hd__.alert.colors.borderWarning, theme.__hd__.alert.colors.bgWarning);
    case 'danger':
      return css$2(["border-color:", ";background-color:", ";"], theme.__hd__.alert.colors.borderDanger, theme.__hd__.alert.colors.bgDanger);
    case 'error':
      return css$2(["border-color:", ";background-color:", ";"], theme.__hd__.alert.colors.borderError, theme.__hd__.alert.colors.bgError);
  }
}, StyledTitle$4, StyledContent$2, function (_ref14) {
  var themeIntent = _ref14.themeIntent,
    theme = _ref14.theme;
  switch (themeIntent) {
    case 'success':
      return css$2(["color:", ";"], theme.__hd__.alert.colors.textSuccess);
    case 'info':
      return css$2(["color:", ";"], theme.__hd__.alert.colors.textInfo);
    case 'warning':
      return css$2(["color:", ";"], theme.__hd__.alert.colors.textWarning);
    case 'danger':
      return css$2(["color:", ";"], theme.__hd__.alert.colors.textDanger);
    case 'error':
      return css$2(["color:", ";"], theme.__hd__.alert.colors.textError);
  }
});
var StyledCloseButton$2 = styled.div.withConfig({
  displayName: "StyledAlert__StyledCloseButton",
  componentId: "sc-dd5itq-5"
})(["&&{margin:0;padding:0;margin-left:auto;color:inherit;", ";}"], function (_ref15) {
  var themeSize = _ref15.themeSize,
    theme = _ref15.theme;
  switch (themeSize) {
    case 'default':
      return css$2(["margin-top:", ";line-height:", ";"], theme.__hd__.alert.space.iconDefaultMarginTop, theme.__hd__.alert.lineHeights.iconDefault);
    case 'compact':
      return css$2(["margin-right:", ";line-height:", ";"], theme.__hd__.alert.space.iconCompactMarginRight, theme.__hd__.alert.lineHeights.iconCompact);
  }
});

var ICON_MAP$2 = {
  success: 'circle-ok',
  info: 'circle-info',
  warning: 'circle-warning',
  danger: 'circle-cancel',
  error: 'circle-cancel'
};
var ICON_SIZE_MAP$1 = {
  "default": 'xlarge',
  compact: 'small'
};

var isLeft = function isLeft(ml) {
  return ml.tag === 'Left';
};
var left$1 = function left(l) {
  return {
    left: l,
    tag: 'Left'
  };
};
var right$1 = function right(r) {
  return {
    right: r,
    tag: 'Right'
  };
};
var match$2A = function match(onLeft, onRight) {
  return function (ml) {
    return isLeft(ml) ? onLeft(ml.left) : onRight(ml.right);
  };
};

var getAlertIcon = function getAlertIcon(defaultIcon, icon) {
  if (icon === undefined) {
    return some(left$1(defaultIcon));
  }
  if (typeof icon === 'string' && Icon$1.List.includes(icon)) {
    return some(left$1(icon));
  }
  if ( /*#__PURE__*/React__default.isValidElement(icon)) {
    return some(right$1(icon));
  }
  return none$3;
};
var Alert = function Alert(_ref) {
  var _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'info' : _ref$intent,
    title = _ref.title,
    content = _ref.content,
    icon = _ref.icon,
    onClose = _ref.onClose,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var themeSize = title !== undefined ? 'default' : 'compact';
  var defaultIcon = ICON_MAP$2[intent];
  var maybeIcon = getAlertIcon(defaultIcon, icon);
  var iconIntent = intent;
  var iconSize = ICON_SIZE_MAP$1[themeSize];
  var renderWithIconWrapper = function renderWithIconWrapper(iconEle) {
    return /*#__PURE__*/React__default.createElement(StyledIconWrapper$3, {
      themeSize: themeSize,
      "data-test-id": "alert-icon"
    }, iconEle);
  };
  return /*#__PURE__*/React__default.createElement(StyledAlert, {
    themeIntent: intent,
    themeSize: themeSize,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, pipe(maybeIcon, map$2(match$2A(function (iconString) {
    return renderWithIconWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: iconString,
      size: iconSize,
      intent: iconIntent
    }));
  }, renderWithIconWrapper)), getOrElse(function () {
    return null;
  })), /*#__PURE__*/React__default.createElement(StyledInner$2, null, title !== undefined && /*#__PURE__*/React__default.createElement(StyledTitle$4, null, title), /*#__PURE__*/React__default.createElement(StyledContent$2, null, content)), onClose !== undefined && /*#__PURE__*/React__default.createElement(StyledCloseButton$2, {
    themeSize: themeSize
  }, /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "close-button",
    icon: "cancel",
    intent: "text",
    onClick: onClose
  })));
};
var Alert$1 = Alert;

var BACKGROUND_INTENTS$1 = {
  primary: 'primaryBackground',
  success: 'successBackground',
  danger: 'dangerBackground',
  warning: 'warningBackground',
  error: 'errorBackground',
  archived: 'archivedBackground'
};
var TEXT_INTENTS = {
  primary: 'primaryText',
  success: 'successText',
  danger: 'dangerText',
  warning: 'warningText',
  error: 'errorText',
  archived: 'archivedText'
};
var genFilledStyles$1 = function genFilledStyles(intent) {
  return css$2(["background-color:", ";border-color:", ";color:", ";"], function (_ref) {
    var theme = _ref.theme;
    return theme.__hd__.badge.colors[intent];
  }, function (_ref2) {
    var theme = _ref2.theme;
    return theme.__hd__.badge.colors[intent];
  }, function (_ref3) {
    var theme = _ref3.theme;
    return theme.__hd__.badge.colors.text;
  });
};
var genOutlinedStyle = function genOutlinedStyle(intent) {
  return css$2(["background-color:", ";color:", ";border-color:", ";"], function (_ref4) {
    var theme = _ref4.theme;
    return theme.__hd__.badge.colors[BACKGROUND_INTENTS$1[intent]];
  }, function (_ref5) {
    var theme = _ref5.theme;
    return theme.__hd__.badge.colors[TEXT_INTENTS[intent]];
  }, function (_ref6) {
    var theme = _ref6.theme;
    return theme.__hd__.badge.colors[TEXT_INTENTS[intent]];
  });
};
var BadgeWrapper = styled.span.withConfig({
  displayName: "StyledBadge__BadgeWrapper",
  componentId: "sc-195gkih-0"
})(["&&{position:relative;display:inline-flex;margin:0;padding:0;}"]);
var StyledBadge = styled.span.withConfig({
  displayName: "StyledBadge",
  componentId: "sc-195gkih-1"
})(["&&{display:inline-block;text-align:center;box-sizing:border-box;min-width:", ";height:", ";border:", " solid;border-radius:", ";font-size:", ";line-height:1;font-weight:", ";margin:0;", ";", ";}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.badge.sizes.minWidth;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.badge.sizes.height;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.badge.borderWidths["default"];
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.badge.radii["default"];
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.badge.fontSizes["default"];
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.badge.fontWeights["default"];
}, function (_ref13) {
  var themeVariant = _ref13.themeVariant,
    theme = _ref13.theme;
  switch (themeVariant) {
    case 'filled-basic':
    case 'outlined-basic':
      return css$2(["background-color:", ";border-color:", ";color:", ";"], theme.__hd__.badge.colors.basicBackground, theme.__hd__.badge.colors.border, theme.__hd__.badge.colors.basicText);
    case 'filled-primary':
      return genFilledStyles$1('primary');
    case 'filled-success':
      return genFilledStyles$1('success');
    case 'filled-danger':
      return genFilledStyles$1('danger');
    case 'filled-warning':
      return genFilledStyles$1('warning');
    case 'filled-error':
      return genFilledStyles$1('error');
    case 'filled-archived':
      return genFilledStyles$1('archived');
    case 'outlined-primary':
      return genOutlinedStyle('primary');
    case 'outlined-success':
      return genOutlinedStyle('success');
    case 'outlined-danger':
      return genOutlinedStyle('danger');
    case 'outlined-warning':
      return genOutlinedStyle('warning');
    case 'outlined-error':
      return genOutlinedStyle('error');
    case 'outlined-archived':
      return genOutlinedStyle('archived');
  }
}, function (_ref14) {
  var themePadding = _ref14.themePadding,
    theme = _ref14.theme;
  switch (themePadding) {
    case 'narrowContent':
      return css$2(["padding:", ";"], theme.__hd__.badge.space.narrowPadding);
    case 'wideContent':
      return css$2(["padding:", ";"], theme.__hd__.badge.space.widePadding);
  }
});
var StatusBadge = styled.span.withConfig({
  displayName: "StyledBadge__StatusBadge",
  componentId: "sc-195gkih-2"
})(["&&{position:absolute;transform:translate(45%,-30%);right:", ";border-radius:", ";box-shadow:", ";padding:", ";margin:0;", ";}"], function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.badge.space.right;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.badge.radii.status;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.badge.shadows["default"];
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.badge.space.narrowPadding;
}, function (_ref19) {
  var themeIntent = _ref19.themeIntent,
    theme = _ref19.theme;
  switch (themeIntent) {
    case 'basic':
      return css$2(["background-color:", ";"], theme.__hd__.badge.colors.basicStatusText);
    case 'success':
      return css$2(["background-color:", ";"], theme.__hd__.badge.colors.success);
    case 'primary':
      return css$2(["background-color:", ";"], theme.__hd__.badge.colors.primary);
    case 'warning':
      return css$2(["background-color:", ";"], theme.__hd__.badge.colors.warning);
    case 'danger':
      return css$2(["background-color:", ";"], theme.__hd__.badge.colors.danger);
    case 'error':
      return css$2(["background-color:", ";"], theme.__hd__.badge.colors.error);
  }
});
var CountNumberBadge = styled.span.withConfig({
  displayName: "StyledBadge__CountNumberBadge",
  componentId: "sc-195gkih-3"
})(["&&{position:absolute;box-sizing:border-box;transform:translate(50%,-25%);text-align:center;right:", ";height:", ";min-width:", ";border:", " solid;border-radius:", ";font-size:", ";font-weight:", ";line-height:1;color:", ";box-shadow:", ";margin:0;padding:0;", ";", ";}"], function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.badge.space.right;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.badge.sizes.height;
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.badge.sizes.minWidth;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.badge.borderWidths["default"];
}, function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.badge.radii["default"];
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.badge.fontSizes["default"];
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.badge.fontWeights["default"];
}, function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.badge.colors.text;
}, function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.badge.shadows["default"];
}, function (_ref29) {
  var themeIntent = _ref29.themeIntent,
    theme = _ref29.theme;
  switch (themeIntent) {
    case 'success':
      return css$2(["background-color:", ";border-color:", ";"], theme.__hd__.badge.colors.success, theme.__hd__.badge.colors.success);
    case 'primary':
      return css$2(["background-color:", ";border-color:", ";"], theme.__hd__.badge.colors.primary, theme.__hd__.badge.colors.primary);
    case 'warning':
      return css$2(["background-color:", ";border-color:", ";"], theme.__hd__.badge.colors.warning, theme.__hd__.badge.colors.warning);
    case 'danger':
      return css$2(["background-color:", ";border-color:", ";"], theme.__hd__.badge.colors.danger, theme.__hd__.badge.colors.danger);
    case 'error':
      return css$2(["background-color:", ";border-color:", ";"], theme.__hd__.badge.colors.error, theme.__hd__.badge.colors.error);
  }
}, function (_ref30) {
  var themePadding = _ref30.themePadding,
    theme = _ref30.theme;
  switch (themePadding) {
    case 'narrowContent':
      return css$2(["padding:", ";"], theme.__hd__.badge.space.narrowPadding);
    case 'wideContent':
      return css$2(["padding:", ";"], theme.__hd__.badge.space.widePadding);
  }
});
var CountIconBadge = styled.span.withConfig({
  displayName: "StyledBadge__CountIconBadge",
  componentId: "sc-195gkih-4"
})(["&&{display:inline-flex;position:absolute;transform:translate(50%,-25%);right:", ";margin:0;padding:0;font-size:", ";line-height:1;}"], function (_ref31) {
  var theme = _ref31.theme;
  return theme.__hd__.badge.space.right;
}, function (_ref32) {
  var theme = _ref32.theme;
  return theme.__hd__.badge.fontSizes["default"];
});

var isNumber = function isNumber(content) {
  return Number.isInteger(content);
};
var getPaddingState = function getPaddingState(content) {
  return isNumber(content) && content < 10 ? 'narrowContent' : 'wideContent';
};
var MAX_NUMBER = 99;

var Status = function Status(_ref) {
  var children = _ref.children,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'danger' : _ref$intent;
  return /*#__PURE__*/React__default.createElement(BadgeWrapper, null, children, /*#__PURE__*/React__default.createElement(StatusBadge, {
    themeIntent: intent
  }));
};
var Status$1 = Status;

var Count = function Count(_ref) {
  var children = _ref.children,
    content = _ref.content,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'danger' : _ref$intent;
  return /*#__PURE__*/React__default.createElement(BadgeWrapper, null, children, isNumber(content) ? /*#__PURE__*/React__default.createElement(CountNumberBadge, {
    themeIntent: intent,
    themePadding: getPaddingState(content)
  }, content > MAX_NUMBER ? "".concat(MAX_NUMBER, "+") : content) : /*#__PURE__*/React__default.createElement(CountIconBadge, null, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: content,
    intent: intent,
    "data-test-id": "count-icon-badge"
  })));
};
var Count$1 = Count;

var FILLED_VARIANTS$1 = {
  basic: 'filled-basic',
  success: 'filled-success',
  primary: 'filled-primary',
  warning: 'filled-warning',
  danger: 'filled-danger',
  error: 'filled-error',
  archived: 'filled-archived'
};
var OUTLINED_VARIANTS$1 = {
  basic: 'outlined-basic',
  success: 'outlined-success',
  primary: 'outlined-primary',
  warning: 'outlined-warning',
  danger: 'outlined-danger',
  error: 'outlined-error',
  archived: 'outlined-archived'
};
var getThemeVariant$1 = function getThemeVariant(variant, intent) {
  switch (variant) {
    case 'filled':
      return FILLED_VARIANTS$1[intent];
    case 'outlined':
      return OUTLINED_VARIANTS$1[intent];
  }
};
var Badge = function Badge(_ref) {
  var content = _ref.content,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'primary' : _ref$intent,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'filled' : _ref$variant,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var themeVariant = getThemeVariant$1(variant, intent);
  return /*#__PURE__*/React__default.createElement(StyledBadge, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themePadding: getPaddingState(content),
    themeVariant: themeVariant
  }, isNumber(content) && content > MAX_NUMBER ? "".concat(MAX_NUMBER, "+") : content);
};
Badge.Status = Status$1;
Badge.Count = Count$1;
var Badge$1 = Badge;

var StyledIconWrapper$2 = styled.div.withConfig({
  displayName: "StyledBanner__StyledIconWrapper",
  componentId: "sc-1kbrqg8-0"
})(["&&{display:flex;align-items:center;margin:0;padding:0;", ";", ";}"], function (_ref) {
  var themeIntent = _ref.themeIntent,
    theme = _ref.theme;
  switch (themeIntent) {
    case 'success':
      return css$2(["color:", ";"], theme.__hd__.banner.colors.success);
    case 'info':
      return css$2(["color:", ";"], theme.__hd__.banner.colors.info);
    case 'warning':
      return css$2(["color:", ";"], theme.__hd__.banner.colors.warning);
    case 'danger':
      return css$2(["color:", ";"], theme.__hd__.banner.colors.danger);
    case 'error':
      return css$2(["color:", ";"], theme.__hd__.banner.colors.error);
  }
}, function (_ref2) {
  var themeSize = _ref2.themeSize,
    theme = _ref2.theme;
  switch (themeSize) {
    case 'default':
      return css$2(["margin-top:", ";margin-right:", ";line-height:", ";"], theme.__hd__.banner.space.iconDefaultMarginTop, theme.__hd__.banner.space.iconDefaultMarginRight, theme.__hd__.banner.lineHeights.iconDefault);
    case 'compact':
      return css$2(["margin-top:", ";margin-right:", ";line-height:", ";"], theme.__hd__.banner.space.iconCompactMarginTop, theme.__hd__.banner.space.iconCompactMarginRight, theme.__hd__.banner.lineHeights.iconCompact);
  }
});
var StyledInner$1 = styled.div.withConfig({
  displayName: "StyledBanner__StyledInner",
  componentId: "sc-1kbrqg8-1"
})(["&&{flex:1;margin:0;padding:0;}"]);
var StyledTitle$3 = styled.div.withConfig({
  displayName: "StyledBanner__StyledTitle",
  componentId: "sc-1kbrqg8-2"
})(["&&{font-size:", ";line-height:", ";font-weight:", ";margin:0;padding:0;margin-bottom:", ";}"], function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.banner.fontSizes.title;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.banner.lineHeights.title;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.banner.fontWeights.title;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.banner.space.titleMarginBottom;
});
var StyledContent$1 = styled.div.withConfig({
  displayName: "StyledBanner__StyledContent",
  componentId: "sc-1kbrqg8-3"
})(["&&{font-size:", ";line-height:", ";margin:0;padding:0;}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.banner.fontSizes.content;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.banner.lineHeights.content;
});
var StyledBanner = styled.div.withConfig({
  displayName: "StyledBanner",
  componentId: "sc-1kbrqg8-4"
})(["&&{display:flex;margin:0;align-items:flex-start;border-radius:", ";border-width:", ";border-style:solid;", ";", ";}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.banner.radii["default"];
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.banner.borderWidths["default"];
}, function (_ref11) {
  var themeSize = _ref11.themeSize,
    theme = _ref11.theme;
  switch (themeSize) {
    case 'default':
      return css$2(["padding:", ";"], theme.__hd__.banner.space.defaultPadding);
    case 'compact':
      return css$2(["padding:", ";"], theme.__hd__.banner.space.compactPadding);
  }
}, function (_ref12) {
  var themeIntent = _ref12.themeIntent,
    theme = _ref12.theme;
  switch (themeIntent) {
    case 'info':
      return css$2(["background-color:", ";border-color:", ";color:", ";"], theme.__hd__.banner.colors.bgInfo, theme.__hd__.banner.colors.borderInfo, theme.__hd__.banner.colors.textInfo);
    case 'success':
      return css$2(["background-color:", ";border-color:", ";color:", ";"], theme.__hd__.banner.colors.bgSuccess, theme.__hd__.banner.colors.borderSuccess, theme.__hd__.banner.colors.textSuccess);
    case 'warning':
      return css$2(["background-color:", ";border-color:", ";color:", ";"], theme.__hd__.banner.colors.bgWarning, theme.__hd__.banner.colors.borderWarning, theme.__hd__.banner.colors.textWarning);
    case 'danger':
      return css$2(["background-color:", ";border-color:", ";color:", ";"], theme.__hd__.banner.colors.bgDanger, theme.__hd__.banner.colors.borderDanger, theme.__hd__.banner.colors.textDanger);
    case 'error':
      return css$2(["background-color:", ";border-color:", ";color:", ";"], theme.__hd__.banner.colors.bgError, theme.__hd__.banner.colors.borderError, theme.__hd__.banner.colors.textError);
  }
});
var StyledCloseButton$1 = styled.div.withConfig({
  displayName: "StyledBanner__StyledCloseButton",
  componentId: "sc-1kbrqg8-5"
})(["&&{margin:0;padding:0;margin-left:auto;color:", ";", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.banner.colors.closeButton;
}, function (_ref14) {
  var themeSize = _ref14.themeSize,
    theme = _ref14.theme;
  switch (themeSize) {
    case 'default':
      return css$2(["margin-top:", ";line-height:", ";"], theme.__hd__.banner.space.iconDefaultMarginTop, theme.__hd__.banner.lineHeights.iconDefault);
    case 'compact':
      return css$2(["margin-top:", ";line-height:", ";"], theme.__hd__.banner.space.iconCompactMarginTop, theme.__hd__.banner.lineHeights.iconCompact);
  }
});

var ICON_MAP$1 = {
  success: 'circle-ok',
  info: 'circle-info',
  warning: 'circle-warning',
  danger: 'circle-cancel',
  error: 'circle-cancel'
};
var ICON_SIZE_MAP = {
  "default": 'xlarge',
  compact: 'small'
};
var getBannerIcon = function getBannerIcon(defaultIcon, icon) {
  if (icon === undefined) {
    return some(left$1(defaultIcon));
  }
  if (typeof icon === 'string' && Icon$1.List.includes(icon)) {
    return some(left$1(icon));
  }
  if ( /*#__PURE__*/React__default.isValidElement(icon)) {
    return some(right$1(icon));
  }
  return none$3;
};
var Banner = function Banner(_ref) {
  var _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'info' : _ref$intent,
    title = _ref.title,
    content = _ref.content,
    icon = _ref.icon,
    onClose = _ref.onClose,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var size = title !== undefined ? 'default' : 'compact';
  var defaultIcon = ICON_MAP$1[intent];
  var maybeIcon = getBannerIcon(defaultIcon, icon);
  var iconSize = ICON_SIZE_MAP[size];
  var renderWithIconWrapper = function renderWithIconWrapper(iconEle) {
    return /*#__PURE__*/React__default.createElement(StyledIconWrapper$2, {
      themeIntent: intent,
      themeSize: size,
      "data-test-id": "banner-icon"
    }, iconEle);
  };
  return /*#__PURE__*/React__default.createElement(StyledBanner, {
    themeSize: size,
    themeIntent: intent,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, pipe(maybeIcon, map$2(match$2A(function (iconString) {
    return renderWithIconWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: iconString,
      size: iconSize
    }));
  }, renderWithIconWrapper)), getOrElse(function () {
    return null;
  })), /*#__PURE__*/React__default.createElement(StyledInner$1, null, title !== undefined && /*#__PURE__*/React__default.createElement(StyledTitle$3, null, title), /*#__PURE__*/React__default.createElement(StyledContent$1, null, content)), onClose !== undefined && /*#__PURE__*/React__default.createElement(StyledCloseButton$1, {
    themeSize: size
  }, /*#__PURE__*/React__default.createElement(Button.Icon, {
    icon: "cancel",
    intent: "inherit",
    onClick: onClose,
    "data-test-id": "close-button"
  })));
};
var Banner$1 = Banner;

var StyledBox = styled.div.withConfig({
  displayName: "StyledBox",
  componentId: "sc-1kdlbi4-0"
})(["&&{margin:0;padding:0;", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";}"], function (_ref) {
  var themeBgColor = _ref.themeBgColor,
    theme = _ref.theme;
  switch (themeBgColor) {
    case undefined:
      return css$2([""]);
    default:
      {
        var systemPaletteColor = theme.colors[camelize(themeBgColor)];
        var paletteColor = theme.colors.palette[camelize(themeBgColor)];
        return css$2(["background-color:", ";"], systemPaletteColor !== undefined ? systemPaletteColor : paletteColor);
      }
  }
}, function (_ref2) {
  var themeBorderColor = _ref2.themeBorderColor,
    theme = _ref2.theme;
  switch (themeBorderColor) {
    case undefined:
      return css$2([""]);
    default:
      {
        var systemPaletteColor = theme.colors[camelize(themeBorderColor)];
        var paletteColor = theme.colors.palette[camelize(themeBorderColor)];
        return css$2(["border-color:", ";"], systemPaletteColor !== undefined ? systemPaletteColor : paletteColor);
      }
  }
}, function (_ref3) {
  var themeBorderRadius = _ref3.themeBorderRadius,
    theme = _ref3.theme;
  switch (themeBorderRadius) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["border-radius:", "px;"], theme.radii[themeBorderRadius]);
  }
}, function (_ref4) {
  var themeBorderStyle = _ref4.themeBorderStyle;
  switch (themeBorderStyle) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["border-style:", ";"], themeBorderStyle);
  }
}, function (_ref5) {
  var themeBorderWidth = _ref5.themeBorderWidth,
    theme = _ref5.theme;
  switch (themeBorderWidth) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["border-width:", "px;"], theme.borderWidths[themeBorderWidth]);
  }
}, function (_ref6) {
  var themeBoxShadow = _ref6.themeBoxShadow,
    theme = _ref6.theme;
  switch (themeBoxShadow) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["box-shadow:", ";"], theme.shadows[themeBoxShadow]);
  }
}, function (_ref7) {
  var themeColor = _ref7.themeColor,
    theme = _ref7.theme;
  switch (themeColor) {
    case undefined:
      return css$2([""]);
    default:
      {
        var systemPaletteColor = theme.colors[camelize(themeColor)];
        var paletteColor = theme.colors.palette[camelize(themeColor)];
        return css$2(["color:", ";"], systemPaletteColor !== undefined ? systemPaletteColor : paletteColor);
      }
  }
}, function (_ref8) {
  var themeFontSize = _ref8.themeFontSize,
    theme = _ref8.theme;
  switch (themeFontSize) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["font-size:", "px;"], theme.fontSizes[themeFontSize]);
  }
}, function (_ref9) {
  var themeFontWeight = _ref9.themeFontWeight,
    theme = _ref9.theme;
  switch (themeFontWeight) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["font-weight:", ";"], theme.fontWeights[camelize(themeFontWeight)]);
  }
}, function (_ref10) {
  var themeLineHeight = _ref10.themeLineHeight,
    theme = _ref10.theme;
  switch (themeLineHeight) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["line-height:", "px;"], theme.lineHeights[themeLineHeight]);
  }
}, function (_ref11) {
  var themeMargin = _ref11.themeMargin,
    theme = _ref11.theme;
  switch (themeMargin) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["margin:", "px;"], theme.space[themeMargin]);
  }
}, function (_ref12) {
  var themeMarginBottom = _ref12.themeMarginBottom,
    theme = _ref12.theme;
  switch (themeMarginBottom) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["margin-bottom:", "px;"], theme.space[themeMarginBottom]);
  }
}, function (_ref13) {
  var themeMarginLeft = _ref13.themeMarginLeft,
    theme = _ref13.theme;
  switch (themeMarginLeft) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["margin-left:", "px;"], theme.space[themeMarginLeft]);
  }
}, function (_ref14) {
  var themeMarginRight = _ref14.themeMarginRight,
    theme = _ref14.theme;
  switch (themeMarginRight) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["margin-right:", "px;"], theme.space[themeMarginRight]);
  }
}, function (_ref15) {
  var themeMarginTop = _ref15.themeMarginTop,
    theme = _ref15.theme;
  switch (themeMarginTop) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["margin-top:", "px;"], theme.space[themeMarginTop]);
  }
}, function (_ref16) {
  var themePadding = _ref16.themePadding,
    theme = _ref16.theme;
  switch (themePadding) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["padding:", "px;"], theme.space[themePadding]);
  }
}, function (_ref17) {
  var themePaddingBottom = _ref17.themePaddingBottom,
    theme = _ref17.theme;
  switch (themePaddingBottom) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["padding-bottom:", "px;"], theme.space[themePaddingBottom]);
  }
}, function (_ref18) {
  var themePaddingLeft = _ref18.themePaddingLeft,
    theme = _ref18.theme;
  switch (themePaddingLeft) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["padding-left:", "px;"], theme.space[themePaddingLeft]);
  }
}, function (_ref19) {
  var themePaddingRight = _ref19.themePaddingRight,
    theme = _ref19.theme;
  switch (themePaddingRight) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["padding-right:", "px;"], theme.space[themePaddingRight]);
  }
}, function (_ref20) {
  var themePaddingTop = _ref20.themePaddingTop,
    theme = _ref20.theme;
  switch (themePaddingTop) {
    case undefined:
      return css$2([""]);
    default:
      return css$2(["padding-top:", "px;"], theme.space[themePaddingTop]);
  }
});

var Box = function Box(_a) {
  var bgColor = _a.bgColor,
    borderColor = _a.borderColor,
    borderRadius = _a.borderRadius,
    borderStyle = _a.borderStyle,
    borderWidth = _a.borderWidth,
    boxShadow = _a.boxShadow,
    children = _a.children,
    color = _a.color,
    fontSize = _a.fontSize,
    fontWeight = _a.fontWeight,
    lineHeight = _a.lineHeight,
    m = _a.m,
    mb = _a.mb,
    ml = _a.ml,
    mr = _a.mr,
    mt = _a.mt,
    p = _a.p,
    pb = _a.pb,
    pl = _a.pl,
    pr = _a.pr,
    pt = _a.pt,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    className = _a.className,
    id = _a.id,
    style = _a.style,
    dataTestId = _a['data-test-id'],
    onClick = _a.onClick,
    _a$tagName = _a.tagName,
    tagName = _a$tagName === void 0 ? 'div' : _a$tagName,
    ariaProps = __rest(_a, ["bgColor", "borderColor", "borderRadius", "borderStyle", "borderWidth", "boxShadow", "children", "color", "fontSize", "fontWeight", "lineHeight", "m", "mb", "ml", "mr", "mt", "p", "pb", "pl", "pr", "pt", "sx", "className", "id", "style", 'data-test-id', "onClick", "tagName"]);
  return /*#__PURE__*/React__default.createElement(StyledBox, Object.assign({
    themeBgColor: bgColor,
    themeBorderColor: borderColor,
    themeBorderRadius: borderRadius,
    themeBorderStyle: borderStyle,
    themeBorderWidth: borderWidth,
    themeBoxShadow: boxShadow,
    themeColor: color,
    themeFontSize: fontSize,
    themeFontWeight: fontWeight,
    themeLineHeight: lineHeight,
    themeMargin: m,
    themeMarginBottom: mb,
    themeMarginLeft: ml,
    themeMarginRight: mr,
    themeMarginTop: mt,
    themePadding: p,
    themePaddingBottom: pb,
    themePaddingLeft: pl,
    themePaddingRight: pr,
    themePaddingTop: pt,
    className: className,
    id: id,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    onClick: onClick,
    as: tagName
  }, ariaProps), children);
};
var Box$1 = Box;

var SingleBreadcrumbContainer = styled.div.withConfig({
  displayName: "StyledBreadcrumb__SingleBreadcrumbContainer",
  componentId: "sc-uoyx57-0"
})(["&&{display:flex;font-size:", ";font-weight:", ";line-height:", ";color:", ";margin:0;padding:0;}&& > i{line-height:", ";margin-right:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.breadcrumb.fontSizes.item;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.breadcrumb.fontWeights.item;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.breadcrumb.lineHeights.item;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.breadcrumb.colors.item;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.breadcrumb.lineHeights.item;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.breadcrumb.space.backIconMarginRight;
});
var BreadcrumbContainer = styled.ul.withConfig({
  displayName: "StyledBreadcrumb__BreadcrumbContainer",
  componentId: "sc-uoyx57-1"
})(["&&{padding:0;margin:0;font-size:", ";font-weight:", ";line-height:", ";list-style:none;}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.breadcrumb.fontSizes.item;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.breadcrumb.fontWeights.item;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.breadcrumb.lineHeights.item;
});
var ABreadcrumbItem = styled.a.withConfig({
  displayName: "StyledBreadcrumb__ABreadcrumbItem",
  componentId: "sc-uoyx57-2"
})(["&&{}"]);
var LinkBreadcrumbItem = styled(Link).withConfig({
  displayName: "StyledBreadcrumb__LinkBreadcrumbItem",
  componentId: "sc-uoyx57-3"
})(["&&{}"]);
var getItemStyle = function getItemStyle(active) {
  var key = active === true ? 'itemActive' : 'item';
  return css$2(["text-decoration:none;margin:0;padding:0;color:", ";font-size:", ";font-weight:", ";line-height:", ";& > *{display:inline;margin:0;padding:0;color:", ";font-size:", ";font-weight:", ";line-height:", ";}"], function (_ref10) {
    var theme = _ref10.theme;
    return theme.__hd__.breadcrumb.colors[key];
  }, function (_ref11) {
    var theme = _ref11.theme;
    return theme.__hd__.breadcrumb.fontSizes[key];
  }, function (_ref12) {
    var theme = _ref12.theme;
    return theme.__hd__.breadcrumb.fontWeights[key];
  }, function (_ref13) {
    var theme = _ref13.theme;
    return theme.__hd__.breadcrumb.lineHeights[key];
  }, function (_ref14) {
    var theme = _ref14.theme;
    return theme.__hd__.breadcrumb.colors[key];
  }, function (_ref15) {
    var theme = _ref15.theme;
    return theme.__hd__.breadcrumb.fontSizes[key];
  }, function (_ref16) {
    var theme = _ref16.theme;
    return theme.__hd__.breadcrumb.fontWeights[key];
  }, function (_ref17) {
    var theme = _ref17.theme;
    return theme.__hd__.breadcrumb.lineHeights[key];
  });
};
var TextBreadcrumbWrapper = styled.li.withConfig({
  displayName: "StyledBreadcrumb__TextBreadcrumbWrapper",
  componentId: "sc-uoyx57-4"
})(["&&{display:inline;margin:0;padding:0;", ";}"], getItemStyle(true));
var LinkBreadcrumbWrapper = styled(TextBreadcrumbWrapper).withConfig({
  displayName: "StyledBreadcrumb__LinkBreadcrumbWrapper",
  componentId: "sc-uoyx57-5"
})(["&& ", ",&& ", "{", ";}"], ABreadcrumbItem, LinkBreadcrumbItem, getItemStyle(false));
var BreadcrumbItemSeparator = styled.span.withConfig({
  displayName: "StyledBreadcrumb__BreadcrumbItemSeparator",
  componentId: "sc-uoyx57-6"
})(["&&{margin:", ";padding:0;color:", ";}"], function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.breadcrumb.space.separatorMargin;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.breadcrumb.colors.item;
});

var BreadcrumbItem = function BreadcrumbItem(_ref) {
  var href = _ref.href,
    text = _ref.text,
    _ref$withSeparator = _ref.withSeparator,
    withSeparator = _ref$withSeparator === void 0 ? true : _ref$withSeparator,
    _ref$current = _ref.current,
    current = _ref$current === void 0 ? false : _ref$current,
    _ref$withRouter = _ref.withRouter,
    withRouter = _ref$withRouter === void 0 ? false : _ref$withRouter;
  return current === true ? /*#__PURE__*/React__default.createElement(TextBreadcrumbWrapper, null, text) : /*#__PURE__*/React__default.createElement(LinkBreadcrumbWrapper, null, withRouter === true ? /*#__PURE__*/React__default.createElement(LinkBreadcrumbItem, {
    to: href
  }, text) : /*#__PURE__*/React__default.createElement(ABreadcrumbItem, {
    href: href
  }, text), withSeparator === true && /*#__PURE__*/React__default.createElement(BreadcrumbItemSeparator, null, "/"));
};
var BreadcrumbItem$1 = BreadcrumbItem;

var Breadcrumb = function Breadcrumb(_ref) {
  var items = _ref.items,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var breadcrumbLength = items.length;
  var css = useCss(sx);
  if (isNonEmptyArray(items) && breadcrumbLength === 1) {
    return /*#__PURE__*/React__default.createElement(SingleBreadcrumbContainer, {
      id: id,
      className: className,
      style: Object.assign(Object.assign({}, style), css),
      "data-test-id": dataTestId
    }, /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: "single-left-arrow"
    }), /*#__PURE__*/React__default.createElement(BreadcrumbItem$1, {
      href: items[0].href,
      text: items[0].text,
      withRouter: items[0].withRouter,
      withSeparator: false
    }));
  }
  return /*#__PURE__*/React__default.createElement(BreadcrumbContainer, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId
  }, items.map(function (item, index) {
    return /*#__PURE__*/React__default.createElement(BreadcrumbItem$1, {
      key: item.href,
      text: item.text,
      href: item.href,
      withRouter: item.withRouter,
      current: index + 1 === breadcrumbLength
    });
  }));
};
var Breadcrumb$1 = Breadcrumb;

var CardContext = /*#__PURE__*/React__default.createContext({});
var CardContext$1 = CardContext;

var StyledCard = styled.div.withConfig({
  displayName: "StyledCard",
  componentId: "sc-knp9dc-0"
})(["&&{display:inline-block;box-sizing:border-box;width:100%;background:", ";border-radius:", ";margin:0;padding:0;}&& > *:first-child{border-top-left-radius:", ";border-top-right-radius:", ";}&& > *:last-child{border-bottom-left-radius:", ";border-bottom-right-radius:", ";}&&{", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.card.colors.background;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.card.radii["default"];
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.card.radii["default"];
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.card.radii["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.card.radii["default"];
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.card.radii["default"];
}, function (_ref7) {
  var themeStatus = _ref7.themeStatus,
    theme = _ref7.theme;
  switch (themeStatus) {
    case 'withBorder':
      return css$2(["border-width:", ";border-style:solid;border-color:", ";"], theme.__hd__.card.borderWidths["default"], theme.__hd__.card.colors.border);
    case 'withoutBorder':
      return css$2(["border-width:", ";border-style:solid;border-color:transparent;"], theme.__hd__.card.borderWidths["default"]);
  }
});
var StyledCardHeader = styled.div.withConfig({
  displayName: "StyledCard__StyledCardHeader",
  componentId: "sc-knp9dc-1"
})(["&&{box-sizing:border-box;position:relative;font-size:", ";font-weight:", ";line-height:", ";border-bottom:", " solid;margin:0;", ";", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.card.fontSizes.header;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.card.fontWeights.header;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.card.lineHeights.header;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.card.borderWidths["default"];
}, function (_ref12) {
  var themeSize = _ref12.themeSize,
    theme = _ref12.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding:", ";"], theme.__hd__.card.space.headerSmallPadding);
    case 'medium':
      return css$2(["padding:", ";"], theme.__hd__.card.space.headerMediumPadding);
  }
}, function (_ref13) {
  var themeVariant = _ref13.themeVariant,
    theme = _ref13.theme;
  switch (themeVariant) {
    case 'basic':
      return css$2(["background:", ";color:", ";border-bottom-color:", ";"], theme.__hd__.card.colors.headerBasicBackground, theme.__hd__.card.colors.headerDefaultText, theme.__hd__.card.colors.border);
    case 'info':
      return css$2(["background:", ";color:", ";margin:", ";border-bottom-color:", ";"], theme.__hd__.card.colors.headerInfoBackground, theme.__hd__.card.colors.headerInfoText, theme.__hd__.card.space.headerMargin, theme.__hd__.card.colors.headerInfoBackground);
    case 'grey':
      return css$2(["background:", ";color:", ";margin:", ";border-bottom-color:", ";"], theme.__hd__.card.colors.headerGreyBackground, theme.__hd__.card.colors.headerDefaultText, theme.__hd__.card.space.headerMargin, theme.__hd__.card.colors.headerGreyBackground);
    case 'primary':
      return css$2(["background:", ";color:", ";margin:", ";border-bottom-color:", ";"], theme.__hd__.card.colors.headerPrimaryBackground, theme.__hd__.card.colors.headerLightText, theme.__hd__.card.space.headerMargin, theme.__hd__.card.colors.headerPrimaryBackground);
  }
});
var StyledCardContent = styled.div.withConfig({
  displayName: "StyledCard__StyledCardContent",
  componentId: "sc-knp9dc-2"
})(["&&{font-weight:", ";box-sizing:border-box;margin:0;", ";", ";}"], function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.card.fontWeights.content;
}, function (_ref15) {
  var themeVariant = _ref15.themeVariant,
    theme = _ref15.theme;
  switch (themeVariant) {
    case 'mainContent':
      return css$2(["padding:", ";line-height:", ";color:", ";font-size:", ";"], theme.__hd__.card.space.headerSmallPadding, theme.__hd__.card.lineHeights.content, theme.__hd__.card.colors.contentText, theme.__hd__.card.fontSizes.content);
    case 'extra':
      return css$2(["padding:", ";line-height:", ";color:", ";font-size:", ";border-top-width:", ";border-top-style:solid;border-top-color:", ";"], theme.__hd__.card.space.headerMediumPadding, theme.__hd__.card.lineHeights.contentExtra, theme.__hd__.card.colors.contentTextExtra, theme.__hd__.card.fontSizes.contentExtra, theme.__hd__.card.borderWidths["default"], theme.__hd__.card.colors.border);
  }
}, function (_ref16) {
  var themeSize = _ref16.themeSize,
    theme = _ref16.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding:", ";"], theme.__hd__.card.space.contentSmallPadding);
    case 'medium':
      return css$2(["padding:", ";"], theme.__hd__.card.space.contentMediumPadding);
  }
});
var StyledCardImg = styled.img.withConfig({
  displayName: "StyledCard__StyledCardImg",
  componentId: "sc-knp9dc-3"
})(["&&{display:block;width:calc( 100% + 2 * ", " );max-width:calc( 100% + 2 * ", " );margin:", ";padding:0;}"], function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.card.borderWidths["default"];
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.card.borderWidths["default"];
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.card.space.imgMargin;
});

var CardContent = function CardContent(_ref) {
  var content = _ref.content,
    _ref$extra = _ref.extra,
    extra = _ref$extra === void 0 ? false : _ref$extra,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var variant = extra === true ? 'extra' : 'mainContent';
  var _React$useContext = React__default.useContext(CardContext$1),
    size = _React$useContext.size;
  return /*#__PURE__*/React__default.createElement(StyledCardContent, {
    themeSize: size,
    themeVariant: variant,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, children !== undefined ? children : content);
};
var CardContent$1 = CardContent;

var CardHeader = function CardHeader(_ref) {
  var content = _ref.content,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _React$useContext = React__default.useContext(CardContext$1),
    variant = _React$useContext.variant,
    size = _React$useContext.size;
  return /*#__PURE__*/React__default.createElement(StyledCardHeader, {
    themeVariant: variant,
    themeSize: size,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, children !== undefined ? children : content);
};
var CardHeader$1 = CardHeader;

var Card = function Card(_a) {
  var header = _a.header,
    content = _a.content,
    extra = _a.extra,
    _a$variant = _a.variant,
    variant = _a$variant === void 0 ? 'basic' : _a$variant,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    imageSrc = _a.imageSrc,
    _a$border = _a.border,
    border = _a$border === void 0 ? true : _a$border,
    children = _a.children,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    dataTestId = _a['data-test-id'],
    ariaProps = __rest(_a, ["header", "content", "extra", "variant", "size", "imageSrc", "border", "children", "id", "className", "style", "sx", 'data-test-id']);
  var cardVariant = border === true ? 'withBorder' : 'withoutBorder';
  var css = useCss(sx);
  var contextValue = useMemo(function () {
    return {
      variant: variant,
      size: size
    };
  }, [variant, size]);
  var wrapWithStyledCard = function wrapWithStyledCard(cardInner) {
    return /*#__PURE__*/React__default.createElement(CardContext$1.Provider, {
      value: contextValue
    }, /*#__PURE__*/React__default.createElement(StyledCard, Object.assign({
      themeStatus: cardVariant,
      id: id,
      className: className,
      style: Object.assign(Object.assign({}, style), css),
      "data-test-id": dataTestId
    }, ariaProps), cardInner));
  };
  return pipe(children, fromUndefinedable, map$2(wrapWithStyledCard), getOrElse(function () {
    return wrapWithStyledCard( /*#__PURE__*/React__default.createElement(React__default.Fragment, null, imageSrc !== undefined && /*#__PURE__*/React__default.createElement(StyledCardImg, {
      src: imageSrc,
      alt: "card-img"
    }), header !== undefined && /*#__PURE__*/React__default.createElement(CardHeader$1, {
      content: header
    }), content !== undefined && /*#__PURE__*/React__default.createElement(CardContent$1, {
      content: content
    }), extra !== undefined && /*#__PURE__*/React__default.createElement(CardContent$1, {
      content: extra,
      extra: true
    })));
  }));
};
Card.Header = CardHeader$1;
Card.Content = CardContent$1;
var Card$1 = Card;

var CarouselContainer = styled.div.withConfig({
  displayName: "StyledCarousel__CarouselContainer",
  componentId: "sc-2uiohv-0"
})(["&&{position:relative;overflow:hidden;padding:0;margin:0;width:100%;height:100%;", ";}"], function (_ref) {
  var themeIsSingleSlideCarousel = _ref.themeIsSingleSlideCarousel,
    themeDotPlacement = _ref.themeDotPlacement,
    theme = _ref.theme;
  if (!themeIsSingleSlideCarousel) {
    switch (themeDotPlacement) {
      case 'top':
        return css$2(["padding:", " ", " 0px;"], theme.__hd__.carousel.space.containerHorizontalPadding, theme.__hd__.carousel.space.containerVerticalPadding);
      case 'bottom':
        return css$2(["padding:0px ", " ", ";"], theme.__hd__.carousel.space.containerVerticalPadding, theme.__hd__.carousel.space.containerHorizontalPadding);
      default:
        return css$2([""]);
    }
  }
});
var CarouselWrapper = styled.div.withConfig({
  displayName: "StyledCarousel__CarouselWrapper",
  componentId: "sc-2uiohv-1"
})(["&&{overflow:hidden;padding:0;margin:0;width:100%;height:100%;}"]);
var StyledButtonWrapper = styled.ul.withConfig({
  displayName: "StyledCarousel__StyledButtonWrapper",
  componentId: "sc-2uiohv-2"
})(["&&{position:absolute;z-index:15;display:flex !important;justify-content:center;list-style:none;margin:0;padding:0;", ";", ";}"], function (_ref2) {
  var themeDotDirection = _ref2.themeDotDirection;
  switch (themeDotDirection) {
    case 'row':
      return css$2(["flex-direction:row;"]);
    case 'column':
      return css$2(["flex-direction:column;transform:translateY(-50%);"]);
  }
}, function (_ref3) {
  var themeDotPlacement = _ref3.themeDotPlacement,
    themeIsSingleSlideCarousel = _ref3.themeIsSingleSlideCarousel,
    theme = _ref3.theme;
  switch (themeDotPlacement) {
    case 'top':
      return css$2(["bottom:auto;top:", ";right:0;left:0;"], themeIsSingleSlideCarousel ? theme.__hd__.carousel.space["default"] : 0);
    case 'right':
      return css$2(["top:50%;bottom:auto;left:auto;right:", ";"], theme.__hd__.carousel.space["default"]);
    case 'bottom':
      return css$2(["top:auto;bottom:", ";right:0;left:0;"], themeIsSingleSlideCarousel ? theme.__hd__.carousel.space["default"] : 0);
    case 'left':
      return css$2(["top:50%;bottom:auto;left:", ";right:auto;"], theme.__hd__.carousel.space["default"]);
  }
});
var StyledButtonList = styled.li.withConfig({
  displayName: "StyledCarousel__StyledButtonList",
  componentId: "sc-2uiohv-3"
})(["&&{position:relative;display:inline-block;flex:0 1 auto;box-sizing:content-box;padding:0;text-align:center;vertical-align:top;transition:width 0.5s;", ";}"], function (_ref4) {
  var themeDotState = _ref4.themeDotState,
    theme = _ref4.theme;
  switch (themeDotState) {
    case 'activeRow':
      return css$2(["width:", ";margin:", ";"], theme.__hd__.carousel.sizes.active, theme.__hd__.carousel.space.listRowMargin);
    case 'defaultRow':
      return css$2(["width:", ";margin:", ";"], theme.__hd__.carousel.sizes["default"], theme.__hd__.carousel.space.listRowMargin);
    case 'activeColumn':
      return css$2(["width:", ";height:", ";margin:", ";"], theme.__hd__.carousel.sizes.basic, theme.__hd__.carousel.sizes.active, theme.__hd__.carousel.space.listColumnMargin);
    case 'defaultColumn':
      return css$2(["width:", ";height:", ";margin:", ";"], theme.__hd__.carousel.sizes.basic, theme.__hd__.carousel.sizes["default"], theme.__hd__.carousel.space.listColumnMargin);
  }
});
var StyledButton = styled.button.withConfig({
  displayName: "StyledCarousel__StyledButton",
  componentId: "sc-2uiohv-4"
})(["&&{display:block;padding:0;margin:0;outline:none;cursor:pointer;border:0;border-radius:", ";opacity:", ";", ";", ";}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.carousel.radii["default"];
}, function (props) {
  return props.active ? 1 : 0.2;
}, function (_ref6) {
  var themeDotDirection = _ref6.themeDotDirection,
    theme = _ref6.theme;
  switch (themeDotDirection) {
    case 'row':
      return css$2(["height:", ";width:100%;"], theme.__hd__.carousel.sizes.basic);
    case 'column':
      return css$2(["height:100%;width:", ";"], theme.__hd__.carousel.sizes.basic);
  }
}, function (_ref7) {
  var themeVariant = _ref7.themeVariant,
    theme = _ref7.theme;
  switch (themeVariant) {
    case 'light':
      return css$2(["background:", ";"], theme.__hd__.carousel.colors.light);
    case 'dark':
      return css$2(["background:", ";"], theme.__hd__.carousel.colors.dark);
  }
});
var CarouselSingleSlide = styled.div.withConfig({
  displayName: "StyledCarousel__CarouselSingleSlide",
  componentId: "sc-2uiohv-5"
})(["&&{flex:0 0 auto;padding:0;margin:0;width:100%;height:100%;}"]);
var MultipleSlideItem = styled.div.withConfig({
  displayName: "StyledCarousel__MultipleSlideItem",
  componentId: "sc-2uiohv-6"
})(["&&{flex:0 0 auto;padding:0;margin:0;height:100%;width:", ";padding:", ";}"], function (_ref8) {
  var themeSlideWidth = _ref8.themeSlideWidth;
  return "".concat(themeSlideWidth, "%");
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.carousel.space.slidePadding;
});
var CarouselSlideCollection = styled.div.withConfig({
  displayName: "StyledCarousel__CarouselSlideCollection",
  componentId: "sc-2uiohv-7"
})(["&&{display:flex;transition:all 0.5s ease-in-out;cursor:pointer;padding:0;margin:0;height:100%;width:100%;", ";}"], function (_ref10) {
  var themeDotDirection = _ref10.themeDotDirection;
  switch (themeDotDirection) {
    case 'row':
      return css$2(["flex-direction:row;", ";"], function (props) {
        return "transform:translateX(-".concat(props.currentSlide * props.themeSlideWidth, "%)");
      });
    case 'column':
      return css$2(["flex-direction:column;", ";"], function (props) {
        return "transform:translateY(-".concat(props.currentSlide * 100, "%)");
      });
  }
});
var StyledButtonIconWrapper = styled.div.withConfig({
  displayName: "StyledCarousel__StyledButtonIconWrapper",
  componentId: "sc-2uiohv-8"
})(["&&{position:absolute;z-index:15;display:flex !important;justify-content:center;padding:0;justify-content:space-between;", ";}&& ", "{font-size:", ";", ";}"], function (_ref11) {
  var themeButtonPlacement = _ref11.themeButtonPlacement,
    themeIsSingleSlideCarousel = _ref11.themeIsSingleSlideCarousel,
    theme = _ref11.theme;
  switch (themeButtonPlacement) {
    case 'middleRow':
      return css$2(["flex-direction:row;transform:translate(0,-50%);width:", ";margin:", ";top:50%;left:0;right:0;"], themeIsSingleSlideCarousel ? '90%' : '100%', themeIsSingleSlideCarousel ? '0 auto' : '0');
    case 'rightColumn':
      return css$2(["flex-direction:column;height:90%;margin:auto 0;right:", ";top:0;bottom:0;"], theme.__hd__.carousel.space.navigationButtonColumnMargin);
    case 'leftColumn':
      return css$2(["flex-direction:column;height:90%;margin:auto 0;left:", ";top:0;bottom:0;"], theme.__hd__.carousel.space.navigationButtonColumnMargin);
  }
}, StyledIcon, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.carousel.fontSizes.navigationButton;
}, function (_ref13) {
  var themeVariant = _ref13.themeVariant,
    theme = _ref13.theme;
  switch (themeVariant) {
    case 'light':
      return css$2(["color:", ";"], theme.__hd__.carousel.colors.light);
    case 'dark':
      return css$2(["color:", ";"], theme.__hd__.carousel.colors.dark);
  }
});

var spinning = keyframes(["from{transform:rotate(0deg);}to{transform:rotate(360deg);}"]);
var SpinnerWrapper = styled.div.withConfig({
  displayName: "StyledSpinner__SpinnerWrapper",
  componentId: "sc-qbr8f2-0"
})(["&&{display:flex;flex-direction:column;align-items:center;margin:0;padding:0;color:", ";", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.spinner.colors["default"];
}, function (_ref2) {
  var themeSize = _ref2.themeSize,
    theme = _ref2.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["font-size:", ";"], theme.__hd__.spinner.fontSizes.small);
    case 'medium':
      return css$2(["font-size:", ";"], theme.__hd__.spinner.fontSizes.medium);
    case 'large':
      return css$2(["font-size:", ";"], theme.__hd__.spinner.fontSizes.large);
  }
});
var ContentWrapper$2 = styled.div.withConfig({
  displayName: "StyledSpinner__ContentWrapper",
  componentId: "sc-qbr8f2-1"
})(["&&{position:relative;margin:0;padding:0;", ";}"], function (_ref3) {
  var themeLoading = _ref3.themeLoading;
  switch (themeLoading) {
    case true:
      return css$2(["opacity:0.3;pointer-events:none;"]);
    case false:
      return css$2(["opacity:1;pointer-events:auto;"]);
  }
});
var SpinnerContainer = styled.div.withConfig({
  displayName: "StyledSpinner__SpinnerContainer",
  componentId: "sc-qbr8f2-2"
})(["&&{position:relative;margin:0;padding:0;}&& > ", "{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);}&&{", ";}"], SpinnerWrapper, function (_ref4) {
  var themeSize = _ref4.themeSize,
    theme = _ref4.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["min-height:", ";"], theme.__hd__.spinner.sizes.smallContainer);
    case 'medium':
      return css$2(["min-height:", ";"], theme.__hd__.spinner.sizes.mediumContainer);
    case 'large':
      return css$2(["min-height:", ";"], theme.__hd__.spinner.sizes.largeContainer);
  }
});
var StyledSpinner = styled.div.withConfig({
  displayName: "StyledSpinner",
  componentId: "sc-qbr8f2-3"
})(["&&{animation:", " 1s infinite linear;background:transparent;border-radius:50%;padding:0;", ";}"], spinning, function (_ref5) {
  var themeSize = _ref5.themeSize,
    theme = _ref5.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["height:", ";width:", ";box-shadow:", ";margin:", ";"], theme.__hd__.spinner.sizes.small, theme.__hd__.spinner.sizes.small, theme.__hd__.spinner.shadows.small, theme.__hd__.spinner.space.smallMargin);
    case 'medium':
      return css$2(["height:", ";width:", ";box-shadow:", ";margin:", ";"], theme.__hd__.spinner.sizes.medium, theme.__hd__.spinner.sizes.medium, theme.__hd__.spinner.shadows.medium, theme.__hd__.spinner.space.mediumMargin);
    case 'large':
      return css$2(["height:", ";width:", ";box-shadow:", ";margin:", ";"], theme.__hd__.spinner.sizes.large, theme.__hd__.spinner.sizes.large, theme.__hd__.spinner.shadows.large, theme.__hd__.spinner.space.largeMargin);
  }
});

var Spinner = function Spinner(_ref) {
  var text = _ref.text,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var spinningElement = /*#__PURE__*/React__default.createElement(SpinnerWrapper, {
    themeSize: size,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(StyledSpinner, {
    themeSize: size
  }), text);
  var maybeChildren = fromUndefinedable(children);
  return pipe(maybeChildren, map$2(function (c) {
    return /*#__PURE__*/React__default.createElement(SpinnerContainer, {
      themeSize: size
    }, /*#__PURE__*/React__default.createElement(ContentWrapper$2, {
      themeLoading: loading
    }, c), loading === true && spinningElement);
  }), getOrElse(function () {
    return spinningElement;
  }));
};
var Spinner$1 = Spinner;

var getDotState = function getDotState(_ref) {
  var active = _ref.active,
    dotPlacement = _ref.dotPlacement;
  switch (dotPlacement) {
    case 'top':
    case 'bottom':
      return active === true ? 'activeRow' : 'defaultRow';
    case 'right':
    case 'left':
      return active === true ? 'activeColumn' : 'defaultColumn';
  }
};
var getDotDirection = function getDotDirection(_ref2) {
  var dotPlacement = _ref2.dotPlacement;
  switch (dotPlacement) {
    case 'top':
    case 'bottom':
      return 'row';
    case 'right':
    case 'left':
      return 'column';
  }
};
var getButtonPlacement = function getButtonPlacement(_ref3) {
  var dotPlacement = _ref3.dotPlacement;
  switch (dotPlacement) {
    case 'top':
    case 'bottom':
      return 'middleRow';
    case 'right':
      return 'rightColumn';
    case 'left':
      return 'leftColumn';
  }
};
var usePropsOrInternalState = function usePropsOrInternalState(value, setValue) {
  var _React$useState = React__default.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    currentItemIndex = _React$useState2[0],
    setCurrentItemIndex = _React$useState2[1];
  if (value !== undefined) {
    if (setValue !== undefined) {
      return [value, setValue];
    }
    return [value, setCurrentItemIndex];
  }
  return [currentItemIndex, setCurrentItemIndex];
};

var Carousel = function Carousel(_ref) {
  var _ref$autoPlay = _ref.autoPlay,
    autoPlay = _ref$autoPlay === void 0 ? false : _ref$autoPlay,
    collection = _ref.collection,
    _ref$dotPlacement = _ref.dotPlacement,
    dotPlacement = _ref$dotPlacement === void 0 ? 'bottom' : _ref$dotPlacement,
    _ref$interval = _ref.interval,
    interval = _ref$interval === void 0 ? 2000 : _ref$interval,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$shownSlides = _ref.shownSlides,
    shownSlides = _ref$shownSlides === void 0 ? 1 : _ref$shownSlides,
    _ref$scrollStep = _ref.scrollStep,
    scrollStep = _ref$scrollStep === void 0 ? 1 : _ref$scrollStep,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'light' : _ref$variant,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    id = _ref.id,
    dataTestId = _ref['data-test-id'],
    selectedItemIndex = _ref.selectedItemIndex,
    onItemIndexChange = _ref.onItemIndexChange;
  var _usePropsOrInternalSt = usePropsOrInternalState(selectedItemIndex, onItemIndexChange),
    _usePropsOrInternalSt2 = _slicedToArray(_usePropsOrInternalSt, 2),
    currentItemIndex = _usePropsOrInternalSt2[0],
    setCurrentItemIndex = _usePropsOrInternalSt2[1];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    pausingAutoPlay = _useState2[0],
    setPausingAutoPlay = _useState2[1];
  var onMouseEnter = useCallback(function () {
    setPausingAutoPlay(true);
  }, []);
  var onMouseLeave = useCallback(function () {
    setPausingAutoPlay(false);
  }, []);
  var moveToNextSlide = useCallback(function (max) {
    setCurrentItemIndex(function (curr) {
      var next = curr + scrollStep;
      if (next > max) {
        return 0;
      }
      return next;
    });
  }, [setCurrentItemIndex, scrollStep]);
  var moveToPrevSlide = useCallback(function (max) {
    setCurrentItemIndex(function (curr) {
      var next = curr - scrollStep;
      if (next < 0) {
        return max;
      }
      return next;
    });
  }, [setCurrentItemIndex, scrollStep]);
  var onNextButtonClick = useCallback(function () {
    moveToNextSlide(collection.length - 1);
  }, [collection, moveToNextSlide]);
  var onPrevButtonClick = useCallback(function () {
    moveToPrevSlide(collection.length - 1);
  }, [collection, moveToPrevSlide]);
  var isSingleSlideCarousel = shownSlides === 1;
  useEffect(function () {
    var timer;
    if (autoPlay === true && loading === false && pausingAutoPlay === false) {
      timer = window.setInterval(function () {
        moveToNextSlide(collection.length - 1);
      }, interval);
    }
    return function () {
      window.clearInterval(timer);
    };
  }, [autoPlay, pausingAutoPlay, loading, moveToNextSlide, interval, collection.length]);
  return /*#__PURE__*/React__default.createElement(CarouselContainer, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    themeIsSingleSlideCarousel: isSingleSlideCarousel,
    themeDotPlacement: dotPlacement
  }, loading === true ? /*#__PURE__*/React__default.createElement(Spinner$1, {
    "data-test-id": "spinner",
    style: {
      minHeight: '100%',
      justifyContent: 'center'
    }
  }) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(CarouselWrapper, null, /*#__PURE__*/React__default.createElement(CarouselSlideCollection, {
    "data-test-id": "slide-collection",
    currentSlide: currentItemIndex,
    themeDotDirection: getDotDirection({
      dotPlacement: dotPlacement
    }),
    themeSlideWidth: isSingleSlideCarousel ? 100 : 100 / shownSlides
  }, isSingleSlideCarousel ? collection.map(function (item) {
    return /*#__PURE__*/React__default.createElement(CarouselSingleSlide, {
      key: item.id,
      "data-test-id": "slide-".concat(item.id)
    }, item.content);
  }) : collection.map(function (item) {
    return /*#__PURE__*/React__default.createElement(MultipleSlideItem, {
      key: item.id,
      "data-test-id": "multi-slide-".concat(item.id),
      themeSlideWidth: 100 / shownSlides
    }, item.content);
  }))), /*#__PURE__*/React__default.createElement(StyledButtonIconWrapper, {
    themeButtonPlacement: isSingleSlideCarousel ? getButtonPlacement({
      dotPlacement: dotPlacement
    }) : 'middleRow',
    themeVariant: variant,
    themeIsSingleSlideCarousel: isSingleSlideCarousel
  }, /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "previous-slide-button",
    icon: dotPlacement === 'top' || dotPlacement === 'bottom' ? 'circle-left' : 'circle-up',
    onClick: onPrevButtonClick
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "next-slide-button",
    icon: dotPlacement === 'top' || dotPlacement === 'bottom' ? 'circle-right' : 'circle-down',
    onClick: onNextButtonClick
  })), /*#__PURE__*/React__default.createElement(StyledButtonWrapper, {
    themeDotPlacement: dotPlacement,
    themeDotDirection: getDotDirection({
      dotPlacement: dotPlacement
    }),
    themeIsSingleSlideCarousel: isSingleSlideCarousel
  }, collection.map(function (item, index) {
    var active = currentItemIndex === index;
    return /*#__PURE__*/React__default.createElement(StyledButtonList, {
      key: item.id,
      themeDotState: getDotState({
        active: active,
        dotPlacement: dotPlacement
      })
    }, /*#__PURE__*/React__default.createElement(StyledButton, {
      "data-test-id": "dot-navigation-button-".concat(item.id),
      type: "button",
      onClick: function onClick(e) {
        e.preventDefault();
        setCurrentItemIndex(index);
      },
      active: active,
      themeVariant: variant,
      themeDotDirection: getDotDirection({
        dotPlacement: dotPlacement
      })
    }));
  }))));
};
var Carousel$1 = Carousel;

var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function setDefaultOptions$1(newOptions) {
  defaultOptions = newOptions;
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/**
 * @name setDefaultOptions
 * @category Common Helpers
 * @summary Set default options including locale.
 * @pure false
 *
 * @description
 * Sets the defaults for
 * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
 * arguments for all functions.
 *
 * @param {Object} newOptions - an object with options.
 * @param {Locale} [newOptions.locale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [newOptions.weekStartsOn] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [newOptions.firstWeekContainsDate] - the day of January, which is always in the first week of the year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Set global locale:
 * import { es } from 'date-fns/locale'
 * setDefaultOptions({ locale: es })
 * const result = format(new Date(2014, 8, 2), 'PPPP')
 * //=> 'martes, 2 de septiembre de 2014'
 *
 * @example
 * // Start of the week for 2 September 2014:
 * const result = startOfWeek(new Date(2014, 8, 2))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // Start of the week for 2 September 2014,
 * // when we set that week starts on Monday by default:
 * setDefaultOptions({ weekStartsOn: 1 })
 * const result = startOfWeek(new Date(2014, 8, 2))
 * //=> Mon Sep 01 2014 00:00:00
 *
 * @example
 * // Manually set options take priority over default options:
 * setDefaultOptions({ weekStartsOn: 1 })
 * const result = startOfWeek(new Date(2014, 8, 2), { weekStartsOn: 0 })
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // Remove the option by setting it to `undefined`:
 * setDefaultOptions({ weekStartsOn: 1 })
 * setDefaultOptions({ weekStartsOn: undefined })
 * const result = startOfWeek(new Date(2014, 8, 2))
 * //=> Sun Aug 31 2014 00:00:00
 */
function setDefaultOptions(newOptions) {
  requiredArgs(1, arguments);
  var result = {};
  var defaultOptions = getDefaultOptions();
  for (var property in defaultOptions) {
    if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) {
      result[property] = defaultOptions[property];
    }
  }
  for (var _property in newOptions) {
    if (Object.prototype.hasOwnProperty.call(newOptions, _property)) {
      if (newOptions[_property] === undefined) {
        delete result[_property];
      } else {
        result[_property] = newOptions[_property];
      }
    }
  }
  setDefaultOptions$1(result);
}

var locale$2W = {
  lang: 'en-AU',
  translations: {
    Search: 'Search',
    More: 'More',
    'Back to': 'Back to',
    'Selected rows': 'Selected rows',
    Week: 'Week',
    Of: 'Of',
    'View more': 'View more'
  }
};
var enAUTranslations = locale$2W;

var LocaleContext = /*#__PURE__*/createContext(enAUTranslations);

var formatDistanceLocale$1h = {
  lessThanXSeconds: {
    one: "minder as 'n sekonde",
    other: 'minder as {{count}} sekondes'
  },
  xSeconds: {
    one: '1 sekonde',
    other: '{{count}} sekondes'
  },
  halfAMinute: "'n halwe minuut",
  lessThanXMinutes: {
    one: "minder as 'n minuut",
    other: 'minder as {{count}} minute'
  },
  xMinutes: {
    one: "'n minuut",
    other: '{{count}} minute'
  },
  aboutXHours: {
    one: 'ongeveer 1 uur',
    other: 'ongeveer {{count}} ure'
  },
  xHours: {
    one: '1 uur',
    other: '{{count}} ure'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dae'
  },
  aboutXWeeks: {
    one: 'ongeveer 1 week',
    other: 'ongeveer {{count}} weke'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weke'
  },
  aboutXMonths: {
    one: 'ongeveer 1 maand',
    other: 'ongeveer {{count}} maande'
  },
  xMonths: {
    one: '1 maand',
    other: '{{count}} maande'
  },
  aboutXYears: {
    one: 'ongeveer 1 jaar',
    other: 'ongeveer {{count}} jaar'
  },
  xYears: {
    one: '1 jaar',
    other: '{{count}} jaar'
  },
  overXYears: {
    one: 'meer as 1 jaar',
    other: 'meer as {{count}} jaar'
  },
  almostXYears: {
    one: 'byna 1 jaar',
    other: 'byna {{count}} jaar'
  }
};
var formatDistance$2A = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1h[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'oor ' + result;
    } else {
      return result + ' gelede';
    }
  }
  return result;
};
var formatDistance$2B = formatDistance$2A;

function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // TODO: Remove String()
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats$1q = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'yyyy/MM/dd'
};
var timeFormats$1q = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$1q = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2Q = {
  date: buildFormatLongFn({
    formats: dateFormats$1q,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1q,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1q,
    defaultWidth: 'full'
  })
};
var formatLong$2R = formatLong$2Q;

var formatRelativeLocale$1i = {
  lastWeek: "'verlede' eeee 'om' p",
  yesterday: "'gister om' p",
  today: "'vandag om' p",
  tomorrow: "'môre om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var formatRelative$2A = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1i[token];
};
var formatRelative$2B = formatRelative$2A;

function buildLocalizeFn(args) {
  return function (dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
    var valuesArray;
    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
    return valuesArray[index];
  };
}

var eraValues$1i = {
  narrow: ['vC', 'nC'],
  abbreviated: ['vC', 'nC'],
  wide: ['voor Christus', 'na Christus']
};
var quarterValues$1i = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1ste kwartaal', '2de kwartaal', '3de kwartaal', '4de kwartaal']
};
var monthValues$1i = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mrt', 'Apr', 'Mei', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Des'],
  wide: ['Januarie', 'Februarie', 'Maart', 'April', 'Mei', 'Junie', 'Julie', 'Augustus', 'September', 'Oktober', 'November', 'Desember']
};
var dayValues$1i = {
  narrow: ['S', 'M', 'D', 'W', 'D', 'V', 'S'],
  short: ['So', 'Ma', 'Di', 'Wo', 'Do', 'Vr', 'Sa'],
  abbreviated: ['Son', 'Maa', 'Din', 'Woe', 'Don', 'Vry', 'Sat'],
  wide: ['Sondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrydag', 'Saterdag']
};
var dayPeriodValues$1i = {
  narrow: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'middaguur',
    morning: 'oggend',
    afternoon: 'middag',
    evening: 'laat middag',
    night: 'aand'
  },
  abbreviated: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'middaguur',
    morning: 'oggend',
    afternoon: 'middag',
    evening: 'laat middag',
    night: 'aand'
  },
  wide: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'middaguur',
    morning: 'oggend',
    afternoon: 'middag',
    evening: 'laat middag',
    night: 'aand'
  }
};
var formattingDayPeriodValues$13 = {
  narrow: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'uur die middag',
    morning: 'uur die oggend',
    afternoon: 'uur die middag',
    evening: 'uur die aand',
    night: 'uur die aand'
  },
  abbreviated: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'uur die middag',
    morning: 'uur die oggend',
    afternoon: 'uur die middag',
    evening: 'uur die aand',
    night: 'uur die aand'
  },
  wide: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'uur die middag',
    morning: 'uur die oggend',
    afternoon: 'uur die middag',
    evening: 'uur die aand',
    night: 'uur die aand'
  }
};
var ordinalNumber$1i = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 < 20) {
    switch (rem100) {
      case 1:
      case 8:
        return number + 'ste';
      default:
        return number + 'de';
    }
  }
  return number + 'ste';
};
var localize$2A = {
  ordinalNumber: ordinalNumber$1i,
  era: buildLocalizeFn({
    values: eraValues$1i,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1i,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1i,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1i,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1i,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$13,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2B = localize$2A;

function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return undefined;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}

function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

var matchOrdinalNumberPattern$1h = /^(\d+)(ste|de)?/i;
var parseOrdinalNumberPattern$1h = /\d+/i;
var matchEraPatterns$1h = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?C\.?)/,
  wide: /^((voor|na) Christus)/
};
var parseEraPatterns$1h = {
  any: [/^v/, /^n/]
};
var matchQuarterPatterns$1h = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](st|d)e kwartaal/i
};
var parseQuarterPatterns$1h = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1h = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
  wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i
};
var parseMonthPatterns$1h = {
  narrow: [/^J/i, /^F/i, /^M/i, /^A/i, /^M/i, /^J/i, /^J/i, /^A/i, /^S/i, /^O/i, /^N/i, /^D/i],
  any: [/^Jan/i, /^Feb/i, /^Mrt/i, /^Apr/i, /^Mei/i, /^Jun/i, /^Jul/i, /^Aug/i, /^Sep/i, /^Okt/i, /^Nov/i, /^Dec/i]
};
var matchDayPatterns$1h = {
  narrow: /^[smdwv]/i,
  short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
  abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
  wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i
};
var parseDayPatterns$1h = {
  narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],
  any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i]
};
var matchDayPeriodPatterns$1h = {
  any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i
};
var parseDayPeriodPatterns$1h = {
  any: {
    am: /^vm/i,
    pm: /^nm/i,
    midnight: /^middernag/i,
    noon: /^middaguur/i,
    morning: /oggend/i,
    afternoon: /middag/i,
    evening: /laat middag/i,
    night: /aand/i
  }
};
var match$2y = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1h,
    parsePattern: parseOrdinalNumberPattern$1h,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1h,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1h,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1h,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1h,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1h,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1h,
    defaultParseWidth: 'any'
  })
};
var match$2z = match$2y;

/**
 * @type {Locale}
 * @category Locales
 * @summary Afrikaans locale.
 * @language Afrikaans
 * @iso-639-2 afr
 * @author Marnus Weststrate [@marnusw]{@link https://github.com/marnusw}
 */
var locale$2U = {
  code: 'af',
  formatDistance: formatDistance$2B,
  formatLong: formatLong$2R,
  formatRelative: formatRelative$2B,
  localize: localize$2B,
  match: match$2z,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$2V = locale$2U;

var formatDistanceLocale$1g = {
  lessThanXSeconds: {
    one: 'أقل من ثانية',
    two: 'أقل من ثانيتين',
    threeToTen: 'أقل من {{count}} ثواني',
    other: 'أقل من {{count}} ثانية'
  },
  xSeconds: {
    one: 'ثانية واحدة',
    two: 'ثانيتان',
    threeToTen: '{{count}} ثواني',
    other: '{{count}} ثانية'
  },
  halfAMinute: 'نصف دقيقة',
  lessThanXMinutes: {
    one: 'أقل من دقيقة',
    two: 'أقل من دقيقتين',
    threeToTen: 'أقل من {{count}} دقائق',
    other: 'أقل من {{count}} دقيقة'
  },
  xMinutes: {
    one: 'دقيقة واحدة',
    two: 'دقيقتان',
    threeToTen: '{{count}} دقائق',
    other: '{{count}} دقيقة'
  },
  aboutXHours: {
    one: 'ساعة واحدة تقريباً',
    two: 'ساعتين تقريبا',
    threeToTen: '{{count}} ساعات تقريباً',
    other: '{{count}} ساعة تقريباً'
  },
  xHours: {
    one: 'ساعة واحدة',
    two: 'ساعتان',
    threeToTen: '{{count}} ساعات',
    other: '{{count}} ساعة'
  },
  xDays: {
    one: 'يوم واحد',
    two: 'يومان',
    threeToTen: '{{count}} أيام',
    other: '{{count}} يوم'
  },
  aboutXWeeks: {
    one: 'أسبوع واحد تقريبا',
    two: 'أسبوعين تقريبا',
    threeToTen: '{{count}} أسابيع تقريبا',
    other: '{{count}} أسبوعا تقريبا'
  },
  xWeeks: {
    one: 'أسبوع واحد',
    two: 'أسبوعان',
    threeToTen: '{{count}} أسابيع',
    other: '{{count}} أسبوعا'
  },
  aboutXMonths: {
    one: 'شهر واحد تقريباً',
    two: 'شهرين تقريبا',
    threeToTen: '{{count}} أشهر تقريبا',
    other: '{{count}} شهرا تقريباً'
  },
  xMonths: {
    one: 'شهر واحد',
    two: 'شهران',
    threeToTen: '{{count}} أشهر',
    other: '{{count}} شهرا'
  },
  aboutXYears: {
    one: 'سنة واحدة تقريباً',
    two: 'سنتين تقريبا',
    threeToTen: '{{count}} سنوات تقريباً',
    other: '{{count}} سنة تقريباً'
  },
  xYears: {
    one: 'سنة واحد',
    two: 'سنتان',
    threeToTen: '{{count}} سنوات',
    other: '{{count}} سنة'
  },
  overXYears: {
    one: 'أكثر من سنة',
    two: 'أكثر من سنتين',
    threeToTen: 'أكثر من {{count}} سنوات',
    other: 'أكثر من {{count}} سنة'
  },
  almostXYears: {
    one: 'ما يقارب سنة واحدة',
    two: 'ما يقارب سنتين',
    threeToTen: 'ما يقارب {{count}} سنوات',
    other: 'ما يقارب {{count}} سنة'
  }
};
var formatDistance$2y = function formatDistance(token, count, options) {
  var usageGroup = formatDistanceLocale$1g[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'خلال ' + result;
    } else {
      return 'منذ ' + result;
    }
  }
  return result;
};
var formatDistance$2z = formatDistance$2y;

var dateFormats$1p = {
  full: 'EEEE، do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var timeFormats$1p = {
  full: 'HH:mm:ss',
  long: 'HH:mm:ss',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$1p = {
  full: "{{date}} 'عند الساعة' {{time}}",
  long: "{{date}} 'عند الساعة' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2O = {
  date: buildFormatLongFn({
    formats: dateFormats$1p,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1p,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1p,
    defaultWidth: 'full'
  })
};
var formatLong$2P = formatLong$2O;

var formatRelativeLocale$1h = {
  lastWeek: "eeee 'الماضي عند الساعة' p",
  yesterday: "'الأمس عند الساعة' p",
  today: "'اليوم عند الساعة' p",
  tomorrow: "'غدا عند الساعة' p",
  nextWeek: "eeee 'القادم عند الساعة' p",
  other: 'P'
};
var formatRelative$2y = function formatRelative(token) {
  return formatRelativeLocale$1h[token];
};
var formatRelative$2z = formatRelative$2y;

var eraValues$1h = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م.', 'ب.م.'],
  wide: ['قبل الميلاد', 'بعد الميلاد']
};
var quarterValues$1h = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
  wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
};
var monthValues$1h = {
  narrow: ['ي', 'ف', 'م', 'أ', 'م', 'ي', 'ي', 'أ', 'س', 'أ', 'ن', 'د'],
  abbreviated: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],
  wide: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
};
var dayValues$1h = {
  narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  abbreviated: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
};
var dayPeriodValues$1h = {
  narrow: {
    am: 'ص',
    pm: 'م',
    morning: 'الصباح',
    noon: 'الظهر',
    afternoon: 'بعد الظهر',
    evening: 'المساء',
    night: 'الليل',
    midnight: 'منتصف الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    morning: 'الصباح',
    noon: 'الظهر',
    afternoon: 'بعد الظهر',
    evening: 'المساء',
    night: 'الليل',
    midnight: 'منتصف الليل'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    morning: 'الصباح',
    noon: 'الظهر',
    afternoon: 'بعد الظهر',
    evening: 'المساء',
    night: 'الليل',
    midnight: 'منتصف الليل'
  }
};
var formattingDayPeriodValues$12 = {
  narrow: {
    am: 'ص',
    pm: 'م',
    morning: 'في الصباح',
    noon: 'الظهر',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل',
    midnight: 'منتصف الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    morning: 'في الصباح',
    noon: 'الظهر',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل',
    midnight: 'منتصف الليل'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    morning: 'في الصباح',
    noon: 'الظهر',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل',
    midnight: 'منتصف الليل'
  }
};
var ordinalNumber$1h = function ordinalNumber(num) {
  return String(num);
};
var localize$2y = {
  ordinalNumber: ordinalNumber$1h,
  era: buildLocalizeFn({
    values: eraValues$1h,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1h,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1h,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1h,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1h,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$12,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2z = localize$2y;

var matchOrdinalNumberPattern$1g = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1g = /\d+/i;
var matchEraPatterns$1g = {
  narrow: /[قب]/,
  abbreviated: /[قب]\.م\./,
  wide: /(قبل|بعد) الميلاد/
};
var parseEraPatterns$1g = {
  any: [/قبل/, /بعد/]
};
var matchQuarterPatterns$1g = {
  narrow: /^[1234]/i,
  abbreviated: /ر[1234]/,
  wide: /الربع (الأول|الثاني|الثالث|الرابع)/
};
var parseQuarterPatterns$1g = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1g = {
  narrow: /^[أيفمسند]/,
  abbreviated: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
  wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
var parseMonthPatterns$1g = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^يناير/i, /^فبراير/i, /^مارس/i, /^أبريل/i, /^مايو/i, /^يونيو/i, /^يوليو/i, /^أغسطس/i, /^سبتمبر/i, /^أكتوبر/i, /^نوفمبر/i, /^ديسمبر/i]
};
var matchDayPatterns$1g = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var parseDayPatterns$1g = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var matchDayPeriodPatterns$1g = {
  narrow: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/,
  any: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/
};
var parseDayPeriodPatterns$1g = {
  any: {
    am: /^ص/,
    pm: /^م/,
    midnight: /منتصف الليل/,
    noon: /الظهر/,
    afternoon: /بعد الظهر/,
    morning: /في الصباح/,
    evening: /في المساء/,
    night: /في الليل/
  }
};
var match$2w = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1g,
    parsePattern: parseOrdinalNumberPattern$1g,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1g,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1g,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1g,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1g,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1g,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1g,
    defaultParseWidth: 'any'
  })
};
var match$2x = match$2w;

/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Modern Standard Arabic - Al-fussha).
 * @language Modern Standard Arabic
 * @iso-639-2 ara
 * @author Abdallah Hassan [@AbdallahAHO]{@link https://github.com/AbdallahAHO}
 * @author Koussay Haj Kacem [@essana3]{@link https://github.com/essana3}
 */
var locale$2S = {
  code: 'ar',
  formatDistance: formatDistance$2z,
  formatLong: formatLong$2P,
  formatRelative: formatRelative$2z,
  localize: localize$2z,
  match: match$2x,
  options: {
    weekStartsOn: 6 /* Saturday */,
    firstWeekContainsDate: 1
  }
};
var locale$2T = locale$2S;

var formatDistanceLocale$1f = {
  lessThanXSeconds: {
    one: 'أقل من ثانية واحدة',
    two: 'أقل من ثانتين',
    threeToTen: 'أقل من {{count}} ثواني',
    other: 'أقل من {{count}} ثانية'
  },
  xSeconds: {
    one: 'ثانية واحدة',
    two: 'ثانتين',
    threeToTen: '{{count}} ثواني',
    other: '{{count}} ثانية'
  },
  halfAMinute: 'نصف دقيقة',
  lessThanXMinutes: {
    one: 'أقل من دقيقة',
    two: 'أقل من دقيقتين',
    threeToTen: 'أقل من {{count}} دقائق',
    other: 'أقل من {{count}} دقيقة'
  },
  xMinutes: {
    one: 'دقيقة واحدة',
    two: 'دقيقتين',
    threeToTen: '{{count}} دقائق',
    other: '{{count}} دقيقة'
  },
  aboutXHours: {
    one: 'ساعة واحدة تقريباً',
    two: 'ساعتين تقريباً',
    threeToTen: '{{count}} ساعات تقريباً',
    other: '{{count}} ساعة تقريباً'
  },
  xHours: {
    one: 'ساعة واحدة',
    two: 'ساعتين',
    threeToTen: '{{count}} ساعات',
    other: '{{count}} ساعة'
  },
  xDays: {
    one: 'يوم واحد',
    two: 'يومين',
    threeToTen: '{{count}} أيام',
    other: '{{count}} يوم'
  },
  aboutXWeeks: {
    one: 'أسبوع واحد تقريباً',
    two: 'أسبوعين تقريباً',
    threeToTen: '{{count}} أسابيع تقريباً',
    other: '{{count}} أسبوع تقريباً'
  },
  xWeeks: {
    one: 'أسبوع واحد',
    two: 'أسبوعين',
    threeToTen: '{{count}} أسابيع',
    other: '{{count}} أسبوع'
  },
  aboutXMonths: {
    one: 'شهر واحد تقريباً',
    two: 'شهرين تقريباً',
    threeToTen: '{{count}} أشهر تقريباً',
    other: '{{count}} شهر تقريباً'
  },
  xMonths: {
    one: 'شهر واحد',
    two: 'شهرين',
    threeToTen: '{{count}} أشهر',
    other: '{{count}} شهر'
  },
  aboutXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  },
  xYears: {
    one: 'عام واحد',
    two: 'عامين',
    threeToTen: '{{count}} أعوام',
    other: '{{count}} عام'
  },
  overXYears: {
    one: 'أكثر من عام',
    two: 'أكثر من عامين',
    threeToTen: 'أكثر من {{count}} أعوام',
    other: 'أكثر من {{count}} عام'
  },
  almostXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  }
};
var formatDistance$2w = function formatDistance(token, count, options) {
  options = options || {};
  var usageGroup = formatDistanceLocale$1f[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'في خلال ' + result;
    } else {
      return 'منذ ' + result;
    }
  }
  return result;
};
var formatDistance$2x = formatDistance$2w;

var dateFormats$1o = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$1o = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1o = {
  full: "{{date}} 'عند' {{time}}",
  long: "{{date}} 'عند' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2M = {
  date: buildFormatLongFn({
    formats: dateFormats$1o,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1o,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1o,
    defaultWidth: 'full'
  })
};
var formatLong$2N = formatLong$2M;

var formatRelativeLocale$1g = {
  lastWeek: "'أخر' eeee 'عند' p",
  yesterday: "'أمس عند' p",
  today: "'اليوم عند' p",
  tomorrow: "'غداً عند' p",
  nextWeek: "eeee 'عند' p",
  other: 'P'
};
var formatRelative$2w = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1g[token];
};
var formatRelative$2x = formatRelative$2w;

var eraValues$1g = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م.', 'ب.م.'],
  wide: ['قبل الميلاد', 'بعد الميلاد']
};
var quarterValues$1g = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
  wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
};
var monthValues$1g = {
  narrow: ['ج', 'ف', 'م', 'أ', 'م', 'ج', 'ج', 'أ', 'س', 'أ', 'ن', 'د'],
  abbreviated: ['جانـ', 'فيفـ', 'مارس', 'أفريل', 'مايـ', 'جوانـ', 'جويـ', 'أوت', 'سبتـ', 'أكتـ', 'نوفـ', 'ديسـ'],
  wide: ['جانفي', 'فيفري', 'مارس', 'أفريل', 'ماي', 'جوان', 'جويلية', 'أوت', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
};
var dayValues$1g = {
  narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  abbreviated: ['أحد', 'اثنـ', 'ثلا', 'أربـ', 'خميـ', 'جمعة', 'سبت'],
  wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
};
var dayPeriodValues$1g = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  }
};
var formattingDayPeriodValues$11 = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'في الصباح',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'في الصباح',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  }
};
var ordinalNumber$1g = function ordinalNumber(dirtyNumber) {
  return String(dirtyNumber);
};
var localize$2w = {
  ordinalNumber: ordinalNumber$1g,
  era: buildLocalizeFn({
    values: eraValues$1g,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1g,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1g,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1g,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1g,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$11,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2x = localize$2w;

var matchOrdinalNumberPattern$1f = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1f = /\d+/i;
var matchEraPatterns$1f = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
var parseEraPatterns$1f = {
  any: [/^قبل/i, /^بعد/i]
};
var matchQuarterPatterns$1f = {
  narrow: /^[1234]/i,
  abbreviated: /^ر[1234]/i,
  wide: /^الربع [1234]/i
};
var parseQuarterPatterns$1f = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1f = {
  narrow: /^[جفمأسند]/i,
  abbreviated: /^(جان|فيف|مار|أفر|ماي|جوا|جوي|أوت|سبت|أكت|نوف|ديس)/i,
  wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/i
};
var parseMonthPatterns$1f = {
  narrow: [/^ج/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ج/i, /^ج/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^جان/i, /^فيف/i, /^مار/i, /^أفر/i, /^ماي/i, /^جوا/i, /^جوي/i, /^أوت/i, /^سبت/i, /^أكت/i, /^نوف/i, /^ديس/i]
};
var matchDayPatterns$1f = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var parseDayPatterns$1f = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var matchDayPeriodPatterns$1f = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$1f = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$2u = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1f,
    parsePattern: parseOrdinalNumberPattern$1f,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1f,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1f,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return Number(index) + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1f,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1f,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1f,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1f,
    defaultParseWidth: 'any'
  })
};
var match$2v = match$2u;

/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Algerian Arabic).
 * @language Algerian Arabic
 * @iso-639-2 ara
 * @author Badreddine Boumaza [@badre429]{@link https://github.com/badre429}
 * @author Ahmed ElShahat [@elshahat]{@link https://github.com/elshahat}
 */
var locale$2Q = {
  code: 'ar-DZ',
  formatDistance: formatDistance$2x,
  formatLong: formatLong$2N,
  formatRelative: formatRelative$2x,
  localize: localize$2x,
  match: match$2v,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$2R = locale$2Q;

var formatDistanceLocale$1e = {
  lessThanXSeconds: {
    one: 'أقل من ثانية',
    two: 'أقل من ثانيتين',
    threeToTen: 'أقل من {{count}} ثواني',
    other: 'أقل من {{count}} ثانية'
  },
  xSeconds: {
    one: 'ثانية',
    two: 'ثانيتين',
    threeToTen: '{{count}} ثواني',
    other: '{{count}} ثانية'
  },
  halfAMinute: 'نص دقيقة',
  lessThanXMinutes: {
    one: 'أقل من دقيقة',
    two: 'أقل من دقيقتين',
    threeToTen: 'أقل من {{count}} دقايق',
    other: 'أقل من {{count}} دقيقة'
  },
  xMinutes: {
    one: 'دقيقة',
    two: 'دقيقتين',
    threeToTen: '{{count}} دقايق',
    other: '{{count}} دقيقة'
  },
  aboutXHours: {
    one: 'حوالي ساعة',
    two: 'حوالي ساعتين',
    threeToTen: 'حوالي {{count}} ساعات',
    other: 'حوالي {{count}} ساعة'
  },
  xHours: {
    one: 'ساعة',
    two: 'ساعتين',
    threeToTen: '{{count}} ساعات',
    other: '{{count}} ساعة'
  },
  xDays: {
    one: 'يوم',
    two: 'يومين',
    threeToTen: '{{count}} أيام',
    other: '{{count}} يوم'
  },
  aboutXWeeks: {
    one: 'حوالي أسبوع',
    two: 'حوالي أسبوعين',
    threeToTen: 'حوالي {{count}} أسابيع',
    other: 'حوالي {{count}} أسبوع'
  },
  xWeeks: {
    one: 'أسبوع',
    two: 'أسبوعين',
    threeToTen: '{{count}} أسابيع',
    other: '{{count}} أسبوع'
  },
  aboutXMonths: {
    one: 'حوالي شهر',
    two: 'حوالي شهرين',
    threeToTen: 'حوالي {{count}} أشهر',
    other: 'حوالي {{count}} شهر'
  },
  xMonths: {
    one: 'شهر',
    two: 'شهرين',
    threeToTen: '{{count}} أشهر',
    other: '{{count}} شهر'
  },
  aboutXYears: {
    one: 'حوالي سنة',
    two: 'حوالي سنتين',
    threeToTen: 'حوالي {{count}} سنين',
    other: 'حوالي {{count}} سنة'
  },
  xYears: {
    one: 'عام',
    two: 'عامين',
    threeToTen: '{{count}} أعوام',
    other: '{{count}} عام'
  },
  overXYears: {
    one: 'أكثر من سنة',
    two: 'أكثر من سنتين',
    threeToTen: 'أكثر من {{count}} سنين',
    other: 'أكثر من {{count}} سنة'
  },
  almostXYears: {
    one: 'عام تقريبًا',
    two: 'عامين تقريبًا',
    threeToTen: '{{count}} أعوام تقريبًا',
    other: '{{count}} عام تقريبًا'
  }
};
var formatDistance$2u = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1e[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0641\u064A \u062E\u0644\u0627\u0644 ".concat(result);
    } else {
      return "\u0645\u0646\u0630 ".concat(result);
    }
  }
  return result;
};
var formatDistance$2v = formatDistance$2u;

var dateFormats$1n = {
  full: 'EEEE، do MMMM y',
  long: 'do MMMM y',
  medium: 'dd/MMM/y',
  short: 'd/MM/y'
};
var timeFormats$1n = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1n = {
  full: "{{date}} 'الساعة' {{time}}",
  long: "{{date}} 'الساعة' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2K = {
  date: buildFormatLongFn({
    formats: dateFormats$1n,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1n,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1n,
    defaultWidth: 'full'
  })
};
var formatLong$2L = formatLong$2K;

var formatRelativeLocale$1f = {
  lastWeek: "eeee 'اللي جاي الساعة' p",
  yesterday: "'إمبارح الساعة' p",
  today: "'النهاردة الساعة' p",
  tomorrow: "'بكرة الساعة' p",
  nextWeek: "eeee 'الساعة' p",
  other: 'P'
};
var formatRelative$2u = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1f[token];
};
var formatRelative$2v = formatRelative$2u;

var eraValues$1f = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م', 'ب.م'],
  wide: ['قبل الميلاد', 'بعد الميلاد']
};
var quarterValues$1f = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
  wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
};
var monthValues$1f = {
  narrow: ['ي', 'ف', 'م', 'أ', 'م', 'ي', 'ي', 'أ', 'س', 'أ', 'ن', 'د'],
  abbreviated: ['ينا', 'فبر', 'مارس', 'أبريل', 'مايو', 'يونـ', 'يولـ', 'أغسـ', 'سبتـ', 'أكتـ', 'نوفـ', 'ديسـ'],
  wide: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
};
var dayValues$1f = {
  narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  abbreviated: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
};
var dayPeriodValues$1f = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءً',
    night: 'ليلاً'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهراً',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءً',
    night: 'ليلاً'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهراً',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءً',
    night: 'ليلاً'
  }
};
var formattingDayPeriodValues$10 = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'في الصباح',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهراً',
    morning: 'في الصباح',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    morning: 'في الصباح',
    noon: 'ظهراً',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل'
  }
};
var ordinalNumber$1f = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$2u = {
  ordinalNumber: ordinalNumber$1f,
  era: buildLocalizeFn({
    values: eraValues$1f,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1f,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1f,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1f,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1f,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$10,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2v = localize$2u;

var matchOrdinalNumberPattern$1e = /^(\d+)/;
var parseOrdinalNumberPattern$1e = /\d+/i;
var matchEraPatterns$1e = {
  narrow: /^(ق|ب)/g,
  abbreviated: /^(ق.م|ب.م)/g,
  wide: /^(قبل الميلاد|بعد الميلاد)/g
};
var parseEraPatterns$1e = {
  any: [/^ق/g, /^ب/g]
};
var matchQuarterPatterns$1e = {
  narrow: /^[1234]/,
  abbreviated: /^ر[1234]/,
  wide: /^الربع (الأول|الثاني|الثالث|الرابع)/
};
var parseQuarterPatterns$1e = {
  wide: [/الربع الأول/, /الربع الثاني/, /الربع الثالث/, /الربع الرابع/],
  any: [/1/, /2/, /3/, /4/]
};
var matchMonthPatterns$1e = {
  narrow: /^(ي|ف|م|أ|س|ن|د)/,
  abbreviated: /^(ينا|فبر|مارس|أبريل|مايو|يونـ|يولـ|أغسـ|سبتـ|أكتـ|نوفـ|ديسـ)/,
  wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
var parseMonthPatterns$1e = {
  narrow: [/^ي/, /^ف/, /^م/, /^أ/, /^م/, /^ي/, /^ي/, /^أ/, /^س/, /^أ/, /^ن/, /^د/],
  any: [/^ينا/, /^فبر/, /^مارس/, /^أبريل/, /^مايو/, /^يون/, /^يول/, /^أغس/, /^سبت/, /^أكت/, /^نوف/, /^ديس/]
};
var matchDayPatterns$1e = {
  narrow: /^(ح|ن|ث|ر|خ|ج|س)/,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/
};
var parseDayPatterns$1e = {
  narrow: [/^ح/, /^ن/, /^ث/, /^ر/, /^خ/, /^ج/, /^س/],
  any: [/أحد/, /اثنين/, /ثلاثاء/, /أربعاء/, /خميس/, /جمعة/, /سبت/]
};
var matchDayPeriodPatterns$1e = {
  narrow: /^(ص|م|ن|ظ|في الصباح|بعد الظهر|في المساء|في الليل)/,
  abbreviated: /^(ص|م|نصف الليل|ظهراً|في الصباح|بعد الظهر|في المساء|في الليل)/,
  wide: /^(ص|م|نصف الليل|في الصباح|ظهراً|بعد الظهر|في المساء|في الليل)/,
  any: /^(ص|م|صباح|ظهر|مساء|ليل)/
};
var parseDayPeriodPatterns$1e = {
  any: {
    am: /^ص/,
    pm: /^م/,
    midnight: /^ن/,
    noon: /^ظ/,
    morning: /^ص/,
    afternoon: /^بعد/,
    evening: /^م/,
    night: /^ل/
  }
};
var match$2s = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1e,
    parsePattern: parseOrdinalNumberPattern$1e,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1e,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1e,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1e,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1e,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1e,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1e,
    defaultParseWidth: 'any'
  })
};
var match$2t = match$2s;

/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Egypt).
 * @language Arabic
 * @iso-639-2 ara
 * @author AbdAllah AbdElFattah [@AbdAllahAbdElFattah13]{@link https://github.com/AbdAllahAbdElFattah13}
 */
var locale$2O = {
  code: 'ar-EG',
  formatDistance: formatDistance$2v,
  formatLong: formatLong$2L,
  formatRelative: formatRelative$2v,
  localize: localize$2v,
  match: match$2t,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$2P = locale$2O;

var formatDistanceLocale$1d = {
  lessThanXSeconds: {
    one: 'أقل من ثانية واحدة',
    two: 'أقل من ثانتين',
    threeToTen: 'أقل من {{count}} ثواني',
    other: 'أقل من {{count}} ثانية'
  },
  xSeconds: {
    one: 'ثانية واحدة',
    two: 'ثانتين',
    threeToTen: '{{count}} ثواني',
    other: '{{count}} ثانية'
  },
  halfAMinute: 'نصف دقيقة',
  lessThanXMinutes: {
    one: 'أقل من دقيقة',
    two: 'أقل من دقيقتين',
    threeToTen: 'أقل من {{count}} دقائق',
    other: 'أقل من {{count}} دقيقة'
  },
  xMinutes: {
    one: 'دقيقة واحدة',
    two: 'دقيقتين',
    threeToTen: '{{count}} دقائق',
    other: '{{count}} دقيقة'
  },
  aboutXHours: {
    one: 'ساعة واحدة تقريباً',
    two: 'ساعتين تقريباً',
    threeToTen: '{{count}} ساعات تقريباً',
    other: '{{count}} ساعة تقريباً'
  },
  xHours: {
    one: 'ساعة واحدة',
    two: 'ساعتين',
    threeToTen: '{{count}} ساعات',
    other: '{{count}} ساعة'
  },
  xDays: {
    one: 'يوم واحد',
    two: 'يومين',
    threeToTen: '{{count}} أيام',
    other: '{{count}} يوم'
  },
  aboutXWeeks: {
    one: 'أسبوع واحد تقريباً',
    two: 'أسبوعين تقريباً',
    threeToTen: '{{count}} أسابيع تقريباً',
    other: '{{count}} أسبوع تقريباً'
  },
  xWeeks: {
    one: 'أسبوع واحد',
    two: 'أسبوعين',
    threeToTen: '{{count}} أسابيع',
    other: '{{count}} أسبوع'
  },
  aboutXMonths: {
    one: 'شهر واحد تقريباً',
    two: 'شهرين تقريباً',
    threeToTen: '{{count}} أشهر تقريباً',
    other: '{{count}} شهر تقريباً'
  },
  xMonths: {
    one: 'شهر واحد',
    two: 'شهرين',
    threeToTen: '{{count}} أشهر',
    other: '{{count}} شهر'
  },
  aboutXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  },
  xYears: {
    one: 'عام واحد',
    two: 'عامين',
    threeToTen: '{{count}} أعوام',
    other: '{{count}} عام'
  },
  overXYears: {
    one: 'أكثر من عام',
    two: 'أكثر من عامين',
    threeToTen: 'أكثر من {{count}} أعوام',
    other: 'أكثر من {{count}} عام'
  },
  almostXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  }
};
var formatDistance$2s = function formatDistance(token, count, options) {
  options = options || {};
  var usageGroup = formatDistanceLocale$1d[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'في خلال ' + result;
    } else {
      return 'منذ ' + result;
    }
  }
  return result;
};
var formatDistance$2t = formatDistance$2s;

var dateFormats$1m = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$1m = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1m = {
  full: "{{date}} 'عند' {{time}}",
  long: "{{date}} 'عند' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2I = {
  date: buildFormatLongFn({
    formats: dateFormats$1m,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1m,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1m,
    defaultWidth: 'full'
  })
};
var formatLong$2J = formatLong$2I;

var formatRelativeLocale$1e = {
  lastWeek: "'أخر' eeee 'عند' p",
  yesterday: "'أمس عند' p",
  today: "'اليوم عند' p",
  tomorrow: "'غداً عند' p",
  nextWeek: "eeee 'عند' p",
  other: 'P'
};
var formatRelative$2s = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1e[token];
};
var formatRelative$2t = formatRelative$2s;

var eraValues$1e = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م.', 'ب.م.'],
  wide: ['قبل الميلاد', 'بعد الميلاد']
};
var quarterValues$1e = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
  wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
};
var monthValues$1e = {
  narrow: ['ي', 'ف', 'م', 'أ', 'م', 'ي', 'ي', 'غ', 'ش', 'أ', 'ن', 'د'],
  abbreviated: ['ينا', 'فبر', 'مارس', 'أبريل', 'ماي', 'يونـ', 'يولـ', 'غشت', 'شتنـ', 'أكتـ', 'نونـ', 'دجنـ'],
  wide: ['يناير', 'فبراير', 'مارس', 'أبريل', 'ماي', 'يونيو', 'يوليوز', 'غشت', 'شتنبر', 'أكتوبر', 'نونبر', 'دجنبر']
};
var dayValues$1e = {
  narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  abbreviated: ['أحد', 'اثنـ', 'ثلا', 'أربـ', 'خميـ', 'جمعة', 'سبت'],
  wide: ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
};
var dayPeriodValues$1e = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  }
};
var formattingDayPeriodValues$$ = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'في الصباح',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'في الصباح',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  }
};
var ordinalNumber$1e = function ordinalNumber(dirtyNumber) {
  return String(dirtyNumber);
};
var localize$2s = {
  ordinalNumber: ordinalNumber$1e,
  era: buildLocalizeFn({
    values: eraValues$1e,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1e,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1e,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1e,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1e,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$$,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2t = localize$2s;

var matchOrdinalNumberPattern$1d = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1d = /\d+/i;
var matchEraPatterns$1d = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
var parseEraPatterns$1d = {
  any: [/^قبل/i, /^بعد/i]
};
var matchQuarterPatterns$1d = {
  narrow: /^[1234]/i,
  abbreviated: /^ر[1234]/i,
  wide: /^الربع [1234]/i
};
var parseQuarterPatterns$1d = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1d = {
  narrow: /^[يفمأمسند]/i,
  abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i,
  wide: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i
};
var parseMonthPatterns$1d = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^غ/i, /^ش/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^ين/i, /^فب/i, /^مار/i, /^أب/i, /^ماي/i, /^يون/i, /^يول/i, /^غشت/i, /^ش/i, /^أك/i, /^ن/i, /^د/i]
};
var matchDayPatterns$1d = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|إثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|إثن|ثلا|أرب|خمي|جمعة|سبت)/i,
  wide: /^(الأحد|الإثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var parseDayPatterns$1d = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الإثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^إث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var matchDayPeriodPatterns$1d = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$1d = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$2q = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1d,
    parsePattern: parseOrdinalNumberPattern$1d,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1d,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1d,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return Number(index) + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1d,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1d,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1d,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1d,
    defaultParseWidth: 'any'
  })
};
var match$2r = match$2q;

/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Moroccan Arabic).
 * @language Moroccan Arabic
 * @iso-639-2 ara
 * @author Achraf Rrami [@rramiachraf]{@link https://github.com/rramiachraf}
 */
var locale$2M = {
  code: 'ar-MA',
  formatDistance: formatDistance$2t,
  formatLong: formatLong$2J,
  formatRelative: formatRelative$2t,
  localize: localize$2t,
  match: match$2r,
  options: {
    // Monday is 1
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
var locale$2N = locale$2M;

var formatDistanceLocale$1c = {
  lessThanXSeconds: {
    one: 'أقل من ثانية واحدة',
    two: 'أقل من ثانتين',
    threeToTen: 'أقل من {{count}} ثواني',
    other: 'أقل من {{count}} ثانية'
  },
  xSeconds: {
    one: 'ثانية واحدة',
    two: 'ثانتين',
    threeToTen: '{{count}} ثواني',
    other: '{{count}} ثانية'
  },
  halfAMinute: 'نصف دقيقة',
  lessThanXMinutes: {
    one: 'أقل من دقيقة',
    two: 'أقل من دقيقتين',
    threeToTen: 'أقل من {{count}} دقائق',
    other: 'أقل من {{count}} دقيقة'
  },
  xMinutes: {
    one: 'دقيقة واحدة',
    two: 'دقيقتين',
    threeToTen: '{{count}} دقائق',
    other: '{{count}} دقيقة'
  },
  aboutXHours: {
    one: 'ساعة واحدة تقريباً',
    two: 'ساعتين تقريباً',
    threeToTen: '{{count}} ساعات تقريباً',
    other: '{{count}} ساعة تقريباً'
  },
  xHours: {
    one: 'ساعة واحدة',
    two: 'ساعتين',
    threeToTen: '{{count}} ساعات',
    other: '{{count}} ساعة'
  },
  xDays: {
    one: 'يوم واحد',
    two: 'يومين',
    threeToTen: '{{count}} أيام',
    other: '{{count}} يوم'
  },
  aboutXWeeks: {
    one: 'أسبوع واحد تقريباً',
    two: 'أسبوعين تقريباً',
    threeToTen: '{{count}} أسابيع تقريباً',
    other: '{{count}} أسبوع تقريباً'
  },
  xWeeks: {
    one: 'أسبوع واحد',
    two: 'أسبوعين',
    threeToTen: '{{count}} أسابيع',
    other: '{{count}} أسبوع'
  },
  aboutXMonths: {
    one: 'شهر واحد تقريباً',
    two: 'شهرين تقريباً',
    threeToTen: '{{count}} أشهر تقريباً',
    other: '{{count}} شهر تقريباً'
  },
  xMonths: {
    one: 'شهر واحد',
    two: 'شهرين',
    threeToTen: '{{count}} أشهر',
    other: '{{count}} شهر'
  },
  aboutXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  },
  xYears: {
    one: 'عام واحد',
    two: 'عامين',
    threeToTen: '{{count}} أعوام',
    other: '{{count}} عام'
  },
  overXYears: {
    one: 'أكثر من عام',
    two: 'أكثر من عامين',
    threeToTen: 'أكثر من {{count}} أعوام',
    other: 'أكثر من {{count}} عام'
  },
  almostXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  }
};
var formatDistance$2q = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1c[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'في خلال ' + result;
    } else {
      return 'منذ ' + result;
    }
  }
  return result;
};
var formatDistance$2r = formatDistance$2q;

var dateFormats$1l = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$1l = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1l = {
  full: "{{date}} 'عند' {{time}}",
  long: "{{date}} 'عند' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2G = {
  date: buildFormatLongFn({
    formats: dateFormats$1l,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1l,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1l,
    defaultWidth: 'full'
  })
};
var formatLong$2H = formatLong$2G;

var formatRelativeLocale$1d = {
  lastWeek: "'أخر' eeee 'عند' p",
  yesterday: "'أمس عند' p",
  today: "'اليوم عند' p",
  tomorrow: "'غداً عند' p",
  nextWeek: "eeee 'عند' p",
  other: 'P'
};
var formatRelative$2q = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1d[token];
};
var formatRelative$2r = formatRelative$2q;

var eraValues$1d = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م.', 'ب.م.'],
  wide: ['قبل الميلاد', 'بعد الميلاد']
};
var quarterValues$1d = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
  wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
};
var monthValues$1d = {
  narrow: ['ي', 'ف', 'م', 'أ', 'م', 'ي', 'ي', 'أ', 'س', 'أ', 'ن', 'د'],
  abbreviated: ['ينا', 'فبر', 'مارس', 'أبريل', 'مايو', 'يونـ', 'يولـ', 'أغسـ', 'سبتـ', 'أكتـ', 'نوفـ', 'ديسـ'],
  wide: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
};
var dayValues$1d = {
  narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  abbreviated: ['أحد', 'اثنـ', 'ثلا', 'أربـ', 'خميـ', 'جمعة', 'سبت'],
  wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
};
var dayPeriodValues$1d = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  }
};
var formattingDayPeriodValues$_ = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'في الصباح',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'في الصباح',
    afternoon: 'بعد الظهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  }
};
var ordinalNumber$1d = function ordinalNumber(dirtyNumber) {
  return String(dirtyNumber);
};
var localize$2q = {
  ordinalNumber: ordinalNumber$1d,
  era: buildLocalizeFn({
    values: eraValues$1d,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1d,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1d,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1d,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1d,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$_,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2r = localize$2q;

var matchOrdinalNumberPattern$1c = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1c = /\d+/i;
var matchEraPatterns$1c = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
var parseEraPatterns$1c = {
  any: [/^قبل/i, /^بعد/i]
};
var matchQuarterPatterns$1c = {
  narrow: /^[1234]/i,
  abbreviated: /^ر[1234]/i,
  wide: /^الربع [1234]/i
};
var parseQuarterPatterns$1c = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1c = {
  narrow: /^[يفمأمسند]/i,
  abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,
  wide: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i
};
var parseMonthPatterns$1c = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^ين/i, /^ف/i, /^مار/i, /^أب/i, /^ماي/i, /^يون/i, /^يول/i, /^أغ/i, /^س/i, /^أك/i, /^ن/i, /^د/i]
};
var matchDayPatterns$1c = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var parseDayPatterns$1c = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var matchDayPeriodPatterns$1c = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$1c = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$2o = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1c,
    parsePattern: parseOrdinalNumberPattern$1c,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1c,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1c,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1c,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1c,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1c,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1c,
    defaultParseWidth: 'any'
  })
};
var match$2p = match$2o;

/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Sauid Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Dhaifallah Alwadani [@dalwadani]{@link https://github.com/dalwadani}
 */
var locale$2K = {
  code: 'ar-SA',
  formatDistance: formatDistance$2r,
  formatLong: formatLong$2H,
  formatRelative: formatRelative$2r,
  localize: localize$2r,
  match: match$2p,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$2L = locale$2K;

var formatDistanceLocale$1b = {
  lessThanXSeconds: {
    one: 'أقل من ثانية',
    two: 'أقل من زوز ثواني',
    threeToTen: 'أقل من {{count}} ثواني',
    other: 'أقل من {{count}} ثانية'
  },
  xSeconds: {
    one: 'ثانية',
    two: 'زوز ثواني',
    threeToTen: '{{count}} ثواني',
    other: '{{count}} ثانية'
  },
  halfAMinute: 'نص دقيقة',
  lessThanXMinutes: {
    one: 'أقل من دقيقة',
    two: 'أقل من دقيقتين',
    threeToTen: 'أقل من {{count}} دقايق',
    other: 'أقل من {{count}} دقيقة'
  },
  xMinutes: {
    one: 'دقيقة',
    two: 'دقيقتين',
    threeToTen: '{{count}} دقايق',
    other: '{{count}} دقيقة'
  },
  aboutXHours: {
    one: 'ساعة تقريب',
    two: 'ساعتين تقريب',
    threeToTen: '{{count}} سوايع تقريب',
    other: '{{count}} ساعة تقريب'
  },
  xHours: {
    one: 'ساعة',
    two: 'ساعتين',
    threeToTen: '{{count}} سوايع',
    other: '{{count}} ساعة'
  },
  xDays: {
    one: 'نهار',
    two: 'نهارين',
    threeToTen: '{{count}} أيام',
    other: '{{count}} يوم'
  },
  aboutXWeeks: {
    one: 'جمعة تقريب',
    two: 'جمعتين تقريب',
    threeToTen: '{{count}} جماع تقريب',
    other: '{{count}} جمعة تقريب'
  },
  xWeeks: {
    one: 'جمعة',
    two: 'جمعتين',
    threeToTen: '{{count}} جماع',
    other: '{{count}} جمعة'
  },
  aboutXMonths: {
    one: 'شهر تقريب',
    two: 'شهرين تقريب',
    threeToTen: '{{count}} أشهرة تقريب',
    other: '{{count}} شهر تقريب'
  },
  xMonths: {
    one: 'شهر',
    two: 'شهرين',
    threeToTen: '{{count}} أشهرة',
    other: '{{count}} شهر'
  },
  aboutXYears: {
    one: 'عام تقريب',
    two: 'عامين تقريب',
    threeToTen: '{{count}} أعوام تقريب',
    other: '{{count}} عام تقريب'
  },
  xYears: {
    one: 'عام',
    two: 'عامين',
    threeToTen: '{{count}} أعوام',
    other: '{{count}} عام'
  },
  overXYears: {
    one: 'أكثر من عام',
    two: 'أكثر من عامين',
    threeToTen: 'أكثر من {{count}} أعوام',
    other: 'أكثر من {{count}} عام'
  },
  almostXYears: {
    one: 'عام تقريب',
    two: 'عامين تقريب',
    threeToTen: '{{count}} أعوام تقريب',
    other: '{{count}} عام تقريب'
  }
};
var formatDistance$2o = function formatDistance(token, count, options) {
  var usageGroup = formatDistanceLocale$1b[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'في ' + result;
    } else {
      return 'عندو ' + result;
    }
  }
  return result;
};
var formatDistance$2p = formatDistance$2o;

var dateFormats$1k = {
  full: 'EEEE، do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var timeFormats$1k = {
  full: 'HH:mm:ss',
  long: 'HH:mm:ss',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$1k = {
  full: "{{date}} 'مع' {{time}}",
  long: "{{date}} 'مع' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2E = {
  date: buildFormatLongFn({
    formats: dateFormats$1k,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1k,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1k,
    defaultWidth: 'full'
  })
};
var formatLong$2F = formatLong$2E;

var formatRelativeLocale$1c = {
  lastWeek: "eeee 'إلي فات مع' p",
  yesterday: "'البارح مع' p",
  today: "'اليوم مع' p",
  tomorrow: "'غدوة مع' p",
  nextWeek: "eeee 'الجمعة الجاية مع' p 'نهار'",
  other: 'P'
};
var formatRelative$2o = function formatRelative(token) {
  return formatRelativeLocale$1c[token];
};
var formatRelative$2p = formatRelative$2o;

var eraValues$1c = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م.', 'ب.م.'],
  wide: ['قبل الميلاد', 'بعد الميلاد']
};
var quarterValues$1c = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
  wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
};
var monthValues$1c = {
  narrow: ['د', 'ن', 'أ', 'س', 'أ', 'ج', 'ج', 'م', 'أ', 'م', 'ف', 'ج'],
  abbreviated: ['جانفي', 'فيفري', 'مارس', 'أفريل', 'ماي', 'جوان', 'جويلية', 'أوت', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],
  wide: ['جانفي', 'فيفري', 'مارس', 'أفريل', 'ماي', 'جوان', 'جويلية', 'أوت', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
};
var dayValues$1c = {
  narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  abbreviated: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
};
var dayPeriodValues$1c = {
  narrow: {
    am: 'ص',
    pm: 'ع',
    morning: 'الصباح',
    noon: 'القايلة',
    afternoon: 'بعد القايلة',
    evening: 'العشية',
    night: 'الليل',
    midnight: 'نص الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'ع',
    morning: 'الصباح',
    noon: 'القايلة',
    afternoon: 'بعد القايلة',
    evening: 'العشية',
    night: 'الليل',
    midnight: 'نص الليل'
  },
  wide: {
    am: 'ص',
    pm: 'ع',
    morning: 'الصباح',
    noon: 'القايلة',
    afternoon: 'بعد القايلة',
    evening: 'العشية',
    night: 'الليل',
    midnight: 'نص الليل'
  }
};
var formattingDayPeriodValues$Z = {
  narrow: {
    am: 'ص',
    pm: 'ع',
    morning: 'في الصباح',
    noon: 'في القايلة',
    afternoon: 'بعد القايلة',
    evening: 'في العشية',
    night: 'في الليل',
    midnight: 'نص الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'ع',
    morning: 'في الصباح',
    noon: 'في القايلة',
    afternoon: 'بعد القايلة',
    evening: 'في العشية',
    night: 'في الليل',
    midnight: 'نص الليل'
  },
  wide: {
    am: 'ص',
    pm: 'ع',
    morning: 'في الصباح',
    noon: 'في القايلة',
    afternoon: 'بعد القايلة',
    evening: 'في العشية',
    night: 'في الليل',
    midnight: 'نص الليل'
  }
};
var ordinalNumber$1c = function ordinalNumber(num) {
  return String(num);
};
var localize$2o = {
  ordinalNumber: ordinalNumber$1c,
  era: buildLocalizeFn({
    values: eraValues$1c,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1c,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1c,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1c,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1c,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$Z,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2p = localize$2o;

var matchOrdinalNumberPattern$1b = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1b = /\d+/i;
var matchEraPatterns$1b = {
  narrow: /[قب]/,
  abbreviated: /[قب]\.م\./,
  wide: /(قبل|بعد) الميلاد/
};
var parseEraPatterns$1b = {
  any: [/قبل/, /بعد/]
};
var matchQuarterPatterns$1b = {
  narrow: /^[1234]/i,
  abbreviated: /ر[1234]/,
  wide: /الربع (الأول|الثاني|الثالث|الرابع)/
};
var parseQuarterPatterns$1b = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1b = {
  narrow: /^[جفمأسند]/,
  abbreviated: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
  wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
var parseMonthPatterns$1b = {
  narrow: [/^ج/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ج/i, /^ج/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^جانفي/i, /^فيفري/i, /^مارس/i, /^أفريل/i, /^ماي/i, /^جوان/i, /^جويلية/i, /^أوت/i, /^سبتمبر/i, /^أكتوبر/i, /^نوفمبر/i, /^ديسمبر/i]
};
var matchDayPatterns$1b = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var parseDayPatterns$1b = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var matchDayPeriodPatterns$1b = {
  narrow: /^(ص|ع|ن ل|ل|(في|مع) (صباح|قايلة|عشية|ليل))/,
  any: /^([صع]|نص الليل|قايلة|(في|مع) (صباح|قايلة|عشية|ليل))/
};
var parseDayPeriodPatterns$1b = {
  any: {
    am: /^ص/,
    pm: /^ع/,
    midnight: /نص الليل/,
    noon: /قايلة/,
    afternoon: /بعد القايلة/,
    morning: /صباح/,
    evening: /عشية/,
    night: /ليل/
  }
};
var match$2m = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1b,
    parsePattern: parseOrdinalNumberPattern$1b,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1b,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1b,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1b,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1b,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1b,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1b,
    defaultParseWidth: 'any'
  })
};
var match$2n = match$2m;

/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Tunisian Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Koussay Haj Kacem [@essana3]{@link https://github.com/essana3}
 */
var locale$2I = {
  code: 'ar-TN',
  formatDistance: formatDistance$2p,
  formatLong: formatLong$2F,
  formatRelative: formatRelative$2p,
  localize: localize$2p,
  match: match$2n,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$2J = locale$2I;

var formatDistanceLocale$1a = {
  lessThanXSeconds: {
    one: 'bir saniyədən az',
    other: '{{count}} bir saniyədən az'
  },
  xSeconds: {
    one: '1 saniyə',
    other: '{{count}} saniyə'
  },
  halfAMinute: 'yarım dəqiqə',
  lessThanXMinutes: {
    one: 'bir dəqiqədən az',
    other: '{{count}} bir dəqiqədən az'
  },
  xMinutes: {
    one: 'bir dəqiqə',
    other: '{{count}} dəqiqə'
  },
  aboutXHours: {
    one: 'təxminən 1 saat',
    other: 'təxminən {{count}} saat'
  },
  xHours: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  xDays: {
    one: '1 gün',
    other: '{{count}} gün'
  },
  aboutXWeeks: {
    one: 'təxminən 1 həftə',
    other: 'təxminən {{count}} həftə'
  },
  xWeeks: {
    one: '1 həftə',
    other: '{{count}} həftə'
  },
  aboutXMonths: {
    one: 'təxminən 1 ay',
    other: 'təxminən {{count}} ay'
  },
  xMonths: {
    one: '1 ay',
    other: '{{count}} ay'
  },
  aboutXYears: {
    one: 'təxminən 1 il',
    other: 'təxminən {{count}} il'
  },
  xYears: {
    one: '1 il',
    other: '{{count}} il'
  },
  overXYears: {
    one: '1 ildən çox',
    other: '{{count}} ildən çox'
  },
  almostXYears: {
    one: 'demək olar ki 1 il',
    other: 'demək olar ki {{count}} il'
  }
};
var formatDistance$2m = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1a[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' sonra';
    } else {
      return result + ' əvvəl';
    }
  }
  return result;
};
var formatDistance$2n = formatDistance$2m;

var dateFormats$1j = {
  full: "EEEE, do MMMM y 'il'",
  long: "do MMMM y 'il'",
  medium: "d MMM y 'il'",
  short: 'dd.MM.yyyy'
};
var timeFormats$1j = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$1j = {
  full: "{{date}} {{time}} - 'də'",
  long: "{{date}} {{time}} - 'də'",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2C = {
  date: buildFormatLongFn({
    formats: dateFormats$1j,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1j,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1j,
    defaultWidth: 'full'
  })
};
var formatLong$2D = formatLong$2C;

var formatRelativeLocale$1b = {
  lastWeek: "'sonuncu' eeee p -'də'",
  yesterday: "'dünən' p -'də'",
  today: "'bugün' p -'də'",
  tomorrow: "'sabah' p -'də'",
  nextWeek: "eeee p -'də'",
  other: 'P'
};
var formatRelative$2m = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1b[token];
};
var formatRelative$2n = formatRelative$2m;

var eraValues$1b = {
  narrow: ['e.ə', 'b.e'],
  abbreviated: ['e.ə', 'b.e'],
  wide: ['eramızdan əvvəl', 'bizim era']
};
var quarterValues$1b = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1ci kvartal', '2ci kvartal', '3cü kvartal', '4cü kvartal']
};
var monthValues$1b = {
  narrow: ['Y', 'F', 'M', 'A', 'M', 'İ', 'İ', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'İyun', 'İyul', 'Avq', 'Sen', 'Okt', 'Noy', 'Dek'],
  wide: ['Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'İyun', 'İyul', 'Avqust', 'Sentyabr', 'Oktyabr', 'Noyabr', 'Dekabr']
};
var dayValues$1b = {
  narrow: ['B.', 'B.e', 'Ç.a', 'Ç.', 'C.a', 'C.', 'Ş.'],
  short: ['B.', 'B.e', 'Ç.a', 'Ç.', 'C.a', 'C.', 'Ş.'],
  abbreviated: ['Baz', 'Baz.e', 'Çər.a', 'Çər', 'Cüm.a', 'Cüm', 'Şə'],
  wide: ['Bazar', 'Bazar ertəsi', 'Çərşənbə axşamı', 'Çərşənbə', 'Cümə axşamı', 'Cümə', 'Şənbə']
};
var dayPeriodValues$1b = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'gecəyarı',
    noon: 'gün',
    morning: 'səhər',
    afternoon: 'gündüz',
    evening: 'axşam',
    night: 'gecə'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gecəyarı',
    noon: 'gün',
    morning: 'səhər',
    afternoon: 'gündüz',
    evening: 'axşam',
    night: 'gecə'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gecəyarı',
    noon: 'gün',
    morning: 'səhər',
    afternoon: 'gündüz',
    evening: 'axşam',
    night: 'gecə'
  }
};
var formattingDayPeriodValues$Y = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'gecəyarı',
    noon: 'gün',
    morning: 'səhər',
    afternoon: 'gündüz',
    evening: 'axşam',
    night: 'gecə'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gecəyarı',
    noon: 'gün',
    morning: 'səhər',
    afternoon: 'gündüz',
    evening: 'axşam',
    night: 'gecə'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gecəyarı',
    noon: 'gün',
    morning: 'səhər',
    afternoon: 'gündüz',
    evening: 'axşam',
    night: 'gecə'
  }
};
var suffixes$1 = {
  1: '-inci',
  5: '-inci',
  8: '-inci',
  70: '-inci',
  80: '-inci',
  2: '-nci',
  7: '-nci',
  20: '-nci',
  50: '-nci',
  3: '-üncü',
  4: '-üncü',
  100: '-üncü',
  6: '-ncı',
  9: '-uncu',
  10: '-uncu',
  30: '-uncu',
  60: '-ıncı',
  90: '-ıncı'
};
var getSuffix = function getSuffix(number) {
  if (number === 0) {
    // special case for zero
    return number + '-ıncı';
  }
  var a = number % 10;
  var b = number % 100 - a;
  var c = number >= 100 ? 100 : null;
  if (suffixes$1[a]) {
    return suffixes$1[a];
  } else if (suffixes$1[b]) {
    return suffixes$1[b];
  } else if (c !== null) {
    return suffixes$1[c];
  }
  return '';
};
var ordinalNumber$1b = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var suffix = getSuffix(number);
  return number + suffix;
};
var localize$2m = {
  ordinalNumber: ordinalNumber$1b,
  era: buildLocalizeFn({
    values: eraValues$1b,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1b,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1b,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1b,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1b,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$Y,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2n = localize$2m;

var matchOrdinalNumberPattern$1a = /^(\d+)(-?(ci|inci|nci|uncu|üncü|ncı))?/i;
var parseOrdinalNumberPattern$1a = /\d+/i;
var matchEraPatterns$1a = {
  narrow: /^(b|a)$/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
  wide: /^(bizim eradan əvvəl|bizim era)$/i
};
var parseEraPatterns$1a = {
  any: [/^b$/i, /^(a|c)$/i]
};
var matchQuarterPatterns$1a = {
  narrow: /^[1234]$/i,
  abbreviated: /^K[1234]$/i,
  wide: /^[1234](ci)? kvartal$/i
};
var parseQuarterPatterns$1a = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1a = {
  narrow: /^[(?-i)yfmaisond]$/i,
  abbreviated: /^(Yan|Fev|Mar|Apr|May|İyun|İyul|Avq|Sen|Okt|Noy|Dek)$/i,
  wide: /^(Yanvar|Fevral|Mart|Aprel|May|İyun|İyul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i
};
var parseMonthPatterns$1a = {
  narrow: [/^[(?-i)y]$/i, /^[(?-i)f]$/i, /^[(?-i)m]$/i, /^[(?-i)a]$/i, /^[(?-i)m]$/i, /^[(?-i)i]$/i, /^[(?-i)i]$/i, /^[(?-i)a]$/i, /^[(?-i)s]$/i, /^[(?-i)o]$/i, /^[(?-i)n]$/i, /^[(?-i)d]$/i],
  abbreviated: [/^Yan$/i, /^Fev$/i, /^Mar$/i, /^Apr$/i, /^May$/i, /^İyun$/i, /^İyul$/i, /^Avg$/i, /^Sen$/i, /^Okt$/i, /^Noy$/i, /^Dek$/i],
  wide: [/^Yanvar$/i, /^Fevral$/i, /^Mart$/i, /^Aprel$/i, /^May$/i, /^İyun$/i, /^İyul$/i, /^Avgust$/i, /^Sentyabr$/i, /^Oktyabr$/i, /^Noyabr$/i, /^Dekabr$/i]
};
var matchDayPatterns$1a = {
  narrow: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
  short: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
  abbreviated: /^(Baz\.e|Çər|Çər\.a|Cüm|Cüm\.a|Şə)$/i,
  wide: /^(Bazar|Bazar ertəsi|Çərşənbə axşamı|Çərşənbə|Cümə axşamı|Cümə|Şənbə)$/i
};
var parseDayPatterns$1a = {
  narrow: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i],
  abbreviated: [/^Baz$/i, /^Baz\.e$/i, /^Çər\.a$/i, /^Çər$/i, /^Cüm\.a$/i, /^Cüm$/i, /^Şə$/i],
  wide: [/^Bazar$/i, /^Bazar ertəsi$/i, /^Çərşənbə axşamı$/i, /^Çərşənbə$/i, /^Cümə axşamı$/i, /^Cümə$/i, /^Şənbə$/i],
  any: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i]
};
var matchDayPeriodPatterns$1a = {
  narrow: /^(a|p|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,
  any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i
};
var parseDayPeriodPatterns$1a = {
  any: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /^gecəyarı$/i,
    noon: /^gün$/i,
    morning: /səhər$/i,
    afternoon: /gündüz$/i,
    evening: /axşam$/i,
    night: /gecə$/i
  }
};
var match$2k = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1a,
    parsePattern: parseOrdinalNumberPattern$1a,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1a,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1a,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1a,
    defaultParseWidth: 'narrow'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1a,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1a,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1a,
    defaultParseWidth: 'any'
  })
};
var match$2l = match$2k;

/**
 * @type {Locale}
 * @category Locales
 * @summary Azerbaijani locale.
 * @language Azerbaijani
 * @iso-639-2 aze
 */
var locale$2G = {
  code: 'az',
  formatDistance: formatDistance$2n,
  formatLong: formatLong$2D,
  formatRelative: formatRelative$2n,
  localize: localize$2n,
  match: match$2l,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
var locale$2H = locale$2G;

function declension$6(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function buildLocalizeTokenFn$4(scheme) {
  return function (count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension$6(scheme.future, count);
        } else {
          return 'праз ' + declension$6(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$6(scheme.past, count);
        } else {
          return declension$6(scheme.regular, count) + ' таму';
        }
      }
    } else {
      return declension$6(scheme.regular, count);
    }
  };
}
var halfAMinute$1 = function halfAMinute(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'праз паўхвіліны';
    } else {
      return 'паўхвіліны таму';
    }
  }
  return 'паўхвіліны';
};
var formatDistanceLocale$19 = {
  lessThanXSeconds: buildLocalizeTokenFn$4({
    regular: {
      one: 'менш за секунду',
      singularNominative: 'менш за {{count}} секунду',
      singularGenitive: 'менш за {{count}} секунды',
      pluralGenitive: 'менш за {{count}} секунд'
    },
    future: {
      one: 'менш, чым праз секунду',
      singularNominative: 'менш, чым праз {{count}} секунду',
      singularGenitive: 'менш, чым праз {{count}} секунды',
      pluralGenitive: 'менш, чым праз {{count}} секунд'
    }
  }),
  xSeconds: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: '{{count}} секунда',
      singularGenitive: '{{count}} секунды',
      pluralGenitive: '{{count}} секунд'
    },
    past: {
      singularNominative: '{{count}} секунду таму',
      singularGenitive: '{{count}} секунды таму',
      pluralGenitive: '{{count}} секунд таму'
    },
    future: {
      singularNominative: 'праз {{count}} секунду',
      singularGenitive: 'праз {{count}} секунды',
      pluralGenitive: 'праз {{count}} секунд'
    }
  }),
  halfAMinute: halfAMinute$1,
  lessThanXMinutes: buildLocalizeTokenFn$4({
    regular: {
      one: 'менш за хвіліну',
      singularNominative: 'менш за {{count}} хвіліну',
      singularGenitive: 'менш за {{count}} хвіліны',
      pluralGenitive: 'менш за {{count}} хвілін'
    },
    future: {
      one: 'менш, чым праз хвіліну',
      singularNominative: 'менш, чым праз {{count}} хвіліну',
      singularGenitive: 'менш, чым праз {{count}} хвіліны',
      pluralGenitive: 'менш, чым праз {{count}} хвілін'
    }
  }),
  xMinutes: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: '{{count}} хвіліна',
      singularGenitive: '{{count}} хвіліны',
      pluralGenitive: '{{count}} хвілін'
    },
    past: {
      singularNominative: '{{count}} хвіліну таму',
      singularGenitive: '{{count}} хвіліны таму',
      pluralGenitive: '{{count}} хвілін таму'
    },
    future: {
      singularNominative: 'праз {{count}} хвіліну',
      singularGenitive: 'праз {{count}} хвіліны',
      pluralGenitive: 'праз {{count}} хвілін'
    }
  }),
  aboutXHours: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: 'каля {{count}} гадзіны',
      singularGenitive: 'каля {{count}} гадзін',
      pluralGenitive: 'каля {{count}} гадзін'
    },
    future: {
      singularNominative: 'прыблізна праз {{count}} гадзіну',
      singularGenitive: 'прыблізна праз {{count}} гадзіны',
      pluralGenitive: 'прыблізна праз {{count}} гадзін'
    }
  }),
  xHours: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: '{{count}} гадзіна',
      singularGenitive: '{{count}} гадзіны',
      pluralGenitive: '{{count}} гадзін'
    },
    past: {
      singularNominative: '{{count}} гадзіну таму',
      singularGenitive: '{{count}} гадзіны таму',
      pluralGenitive: '{{count}} гадзін таму'
    },
    future: {
      singularNominative: 'праз {{count}} гадзіну',
      singularGenitive: 'праз {{count}} гадзіны',
      pluralGenitive: 'праз {{count}} гадзін'
    }
  }),
  xDays: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: '{{count}} дзень',
      singularGenitive: '{{count}} дні',
      pluralGenitive: '{{count}} дзён'
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: 'каля {{count}} месяца',
      // TODO
      singularGenitive: 'каля {{count}} месяцаў',
      // TODO
      pluralGenitive: 'каля {{count}} месяцаў' // TODO
    },

    future: {
      singularNominative: 'прыблізна праз {{count}} месяц',
      // TODO
      singularGenitive: 'прыблізна праз {{count}} месяцы',
      // TODO
      pluralGenitive: 'прыблізна праз {{count}} месяцаў' // TODO
    }
  }),

  xWeeks: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: '{{count}} месяц',
      singularGenitive: '{{count}} месяцы',
      pluralGenitive: '{{count}} месяцаў'
    }
  }),
  aboutXMonths: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: 'каля {{count}} месяца',
      singularGenitive: 'каля {{count}} месяцаў',
      pluralGenitive: 'каля {{count}} месяцаў'
    },
    future: {
      singularNominative: 'прыблізна праз {{count}} месяц',
      singularGenitive: 'прыблізна праз {{count}} месяцы',
      pluralGenitive: 'прыблізна праз {{count}} месяцаў'
    }
  }),
  xMonths: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: '{{count}} месяц',
      singularGenitive: '{{count}} месяцы',
      pluralGenitive: '{{count}} месяцаў'
    }
  }),
  aboutXYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: 'каля {{count}} года',
      singularGenitive: 'каля {{count}} гадоў',
      pluralGenitive: 'каля {{count}} гадоў'
    },
    future: {
      singularNominative: 'прыблізна праз {{count}} год',
      singularGenitive: 'прыблізна праз {{count}} гады',
      pluralGenitive: 'прыблізна праз {{count}} гадоў'
    }
  }),
  xYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: '{{count}} год',
      singularGenitive: '{{count}} гады',
      pluralGenitive: '{{count}} гадоў'
    }
  }),
  overXYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: 'больш за {{count}} год',
      singularGenitive: 'больш за {{count}} гады',
      pluralGenitive: 'больш за {{count}} гадоў'
    },
    future: {
      singularNominative: 'больш, чым праз {{count}} год',
      singularGenitive: 'больш, чым праз {{count}} гады',
      pluralGenitive: 'больш, чым праз {{count}} гадоў'
    }
  }),
  almostXYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: 'амаль {{count}} год',
      singularGenitive: 'амаль {{count}} гады',
      pluralGenitive: 'амаль {{count}} гадоў'
    },
    future: {
      singularNominative: 'амаль праз {{count}} год',
      singularGenitive: 'амаль праз {{count}} гады',
      pluralGenitive: 'амаль праз {{count}} гадоў'
    }
  })
};
var formatDistance$2k = function formatDistance(token, count, options) {
  options = options || {};
  return formatDistanceLocale$19[token](count, options);
};
var formatDistance$2l = formatDistance$2k;

var dateFormats$1i = {
  full: "EEEE, d MMMM y 'г.'",
  long: "d MMMM y 'г.'",
  medium: "d MMM y 'г.'",
  short: 'dd.MM.y'
};
var timeFormats$1i = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$1i = {
  any: '{{date}}, {{time}}'
};
var formatLong$2A = {
  date: buildFormatLongFn({
    formats: dateFormats$1i,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1i,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1i,
    defaultWidth: 'any'
  })
};
var formatLong$2B = formatLong$2A;

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);

  // Clone the date
  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      // eslint-disable-next-line no-console
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} - the new date with the days added
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays$1(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    // If 0 days, no-op to avoid changing times in the hour before end of DST
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */
function addMonths$1(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return date;
  }
  var dayOfMonth = date.getDate();

  // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the weeks added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks$1(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays$1(dirtyDate, days);
}

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears$1(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths$1(dirtyDate, amount * 12);
}

/**
 * Days in 1 week.
 *
 * @name daysInWeek
 * @constant
 * @type {number}
 * @default
 */

/**
 * Milliseconds in 1 minute
 *
 * @name millisecondsInMinute
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInMinute = 60000;

/**
 * Milliseconds in 1 hour
 *
 * @name millisecondsInHour
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInHour = 3600000;

/**
 * Milliseconds in 1 second
 *
 * @name millisecondsInSecond
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInSecond = 1000;

/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day (and year and month)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 *
 * @example
 * // Are 4 September and 4 October in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 *
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */
function isSameDay$1(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */
function isValid$1(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth$1(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name eachDayOfInterval
 * @category Interval Helpers
 * @summary Return the array of dates within the specified time interval.
 *
 * @description
 * Return the array of dates within the specified time interval.
 *
 * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}
 * @param {Object} [options] - an object with options.
 * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.
 * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.step` must be a number greater than 1
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * const result = eachDayOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 9, 10)
 * })
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */
function eachDayOfInterval$1(dirtyInterval, options) {
  var _options$step;
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime();

  // Throw an exception if start date is after end date or if any date is `Invalid Date`
  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError('Invalid interval');
  }
  var dates = [];
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);
  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');
  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setDate(currentDate.getDate() + step);
    currentDate.setHours(0, 0, 0, 0);
  }
  return dates;
}

/**
 * @name eachWeekOfInterval
 * @category Interval Helpers
 * @summary Return the array of weeks within the specified time interval.
 *
 * @description
 * Return the array of weeks within the specified time interval.
 *
 * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // Each week within interval 6 October 2014 - 23 November 2014:
 * const result = eachWeekOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 10, 23)
 * })
 * //=> [
 * //   Sun Oct 05 2014 00:00:00,
 * //   Sun Oct 12 2014 00:00:00,
 * //   Sun Oct 19 2014 00:00:00,
 * //   Sun Oct 26 2014 00:00:00,
 * //   Sun Nov 02 2014 00:00:00,
 * //   Sun Nov 09 2014 00:00:00,
 * //   Sun Nov 16 2014 00:00:00,
 * //   Sun Nov 23 2014 00:00:00
 * // ]
 */
function eachWeekOfInterval(dirtyInterval, options) {
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime();

  // Throw an exception if start date is after end date or if any date is `Invalid Date`
  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError('Invalid interval');
  }
  var startDateWeek = startOfWeek(startDate, options);
  var endDateWeek = startOfWeek(endDate, options);

  // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet
  startDateWeek.setHours(15);
  endDateWeek.setHours(15);
  endTime = endDateWeek.getTime();
  var weeks = [];
  var currentWeek = startDateWeek;
  while (currentWeek.getTime() <= endTime) {
    currentWeek.setHours(0);
    weeks.push(toDate(currentWeek));
    currentWeek = addWeeks$1(currentWeek, 1);
    currentWeek.setHours(15);
  }
  return weeks;
}

/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfMonth$1(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
function endOfYear$1(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name startOfYear
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */
function startOfYear$1(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name eachYearOfInterval
 * @category Interval Helpers
 * @summary Return the array of yearly timestamps within the specified time interval.
 *
 * @description
 * Return the array of yearly timestamps within the specified time interval.
 *
 * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}
 * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // Each year between 6 February 2014 and 10 August 2017:
 * const result = eachYearOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2017, 7, 10)
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Thu Jan 01 2015 00:00:00,
 * //   Fri Jan 01 2016 00:00:00,
 * //   Sun Jan 01 2017 00:00:00
 * // ]
 */
function eachYearOfInterval$1(dirtyInterval) {
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime();

  // Throw an exception if start date is after end date or if any date is `Invalid Date`
  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError('Invalid interval');
  }
  var dates = [];
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  currentDate.setMonth(0, 1);
  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setFullYear(currentDate.getFullYear() + 1);
  }
  return dates;
}

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

var MILLISECONDS_IN_DAY = 86400000;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

var MILLISECONDS_IN_WEEK$2 = 604800000;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
}

function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

var MILLISECONDS_IN_WEEK$1 = 604800000;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = '0' + output;
  }
  return sign + output;
}

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */
var formatters$2 = {
  // Year
  y: function y(date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

    var signedYear = date.getUTCFullYear();
    // Returns 1 for 1 BC (which is year 0 in JavaScript)
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();
      case 'aaa':
        return dayPeriodEnumValue;
      case 'aaaaa':
        return dayPeriodEnumValue[0];
      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var formatters$3 = formatters$2;

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

var formatters = {
  // Era
  G: function G(date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });
      // A, B
      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });
      // Anno Domini, Before Christ
      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  // Year
  y: function y(date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear();
      // Returns 1 for 1 BC (which is year 0 in JavaScript)
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }
    return formatters$3.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    // Returns 1 for 1 BC (which is year 0 in JavaScript)
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

    // Two digit year
    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }

    // Ordinal number
    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    }

    // Padding
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);

    // Padding
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04
      case 'QQ':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4
      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });
      // 1st quarter, 2nd quarter, ...
      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04
      case 'qq':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4
      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });
      // 1st quarter, 2nd quarter, ...
      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Month
  M: function M(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      case 'M':
      case 'MM':
        return formatters$3.M(date, token);
      // 1st, 2nd, ..., 12th
      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec
      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // J, F, ..., D
      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });
      // January, February, ..., December
      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12
      case 'LL':
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th
      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec
      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // J, F, ..., D
      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });
      // January, February, ..., December
      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize, options) {
    var week = getUTCWeek(date, options);
    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize) {
    var isoWeek = getUTCISOWeek(date);
    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d(date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }
    return formatters$3.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T
      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu
      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday
      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value
      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th
      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });
      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T
      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu
      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday
      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value
      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th
      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });
      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // T
      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });
      // Tu
      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });
      // Tuesday
      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02
      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd
      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });
      // Tue
      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T
      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu
      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday
      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM or PM
  a: function a(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();
      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }
    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();
      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Hour [1-12]
  h: function h(date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return formatters$3.h(date, token);
  },
  // Hour [0-23]
  H: function H(date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }
    return formatters$3.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize) {
    var hours = date.getUTCHours() % 12;
    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;
    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m(date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }
    return formatters$3.m(date, token);
  },
  // Second
  s: function s(date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }
    return formatters$3.s(date, token);
  },
  // Fraction of second
  S: function S(date, token) {
    return formatters$3.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return 'Z';
    }
    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);

      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);

      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long
      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long
      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters$1 = formatters;

var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });
    case 'PP':
      return formatLong.date({
        width: 'medium'
      });
    case 'PPP':
      return formatLong.date({
        width: 'long'
      });
    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
};
var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });
    case 'pp':
      return formatLong.time({
        width: 'medium'
      });
    case 'ppp':
      return formatLong.time({
        width: 'long'
      });
    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;
    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;
    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;
    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }
  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters$1 = longFormatters;

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

var formatDistanceLocale$18 = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
var formatDistance$2i = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$18[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }
  return result;
};
var formatDistance$2j = formatDistance$2i;

var dateFormats$1h = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$1h = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1h = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2y = {
  date: buildFormatLongFn({
    formats: dateFormats$1h,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1h,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1h,
    defaultWidth: 'full'
  })
};
var formatLong$2z = formatLong$2y;

var formatRelativeLocale$1a = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
var formatRelative$2k = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1a[token];
};
var formatRelative$2l = formatRelative$2k;

var eraValues$1a = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues$1a = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$1a = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues$1a = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues$1a = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues$X = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};
var ordinalNumber$1a = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';
      case 2:
        return number + 'nd';
      case 3:
        return number + 'rd';
    }
  }
  return number + 'th';
};
var localize$2k = {
  ordinalNumber: ordinalNumber$1a,
  era: buildLocalizeFn({
    values: eraValues$1a,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1a,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1a,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1a,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1a,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$X,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2l = localize$2k;

var matchOrdinalNumberPattern$19 = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$19 = /\d+/i;
var matchEraPatterns$19 = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns$19 = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$19 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns$19 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$19 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns$19 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$19 = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns$19 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$19 = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$19 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$2i = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$19,
    parsePattern: parseOrdinalNumberPattern$19,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$19,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$19,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$19,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$19,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$19,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$19,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$19,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$19,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$19,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$19,
    defaultParseWidth: 'any'
  })
};
var match$2j = match$2i;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale$2F = {
  code: 'en-US',
  formatDistance: formatDistance$2j,
  formatLong: formatLong$2z,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var defaultLocale$1 = locale$2F;

// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;

/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format$1(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions = getDefaultOptions();
  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale$1;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  if (!locale.localize) {
    throw new RangeError('locale must contain localize property');
  }
  if (!locale.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid$1(originalDate)) {
    throw new RangeError('Invalid time value');
  }

  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale.formatLong);
    }
    return substring;
  }).join('').match(formattingTokensRegExp$1).map(function (substring) {
    // Replace two single quote characters with one single quote character
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }
    var formatter = formatters$1[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }
    return substring;
  }).join('');
  return result;
}
function cleanEscapedString$1(input) {
  var matched = input.match(escapedStringRegExp$1);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp$1, "'");
}

function assign$1(target, object) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}

/**
 * @name getDate
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the day of month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * const result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */
function getDate$1(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var dayOfMonth = date.getDate();
  return dayOfMonth;
}

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the hours
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * const result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */
function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}

/**
 * @name getMinutes
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the minutes
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */
function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}

/**
 * @name getMonth
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which month is 29 February 2012?
 * const result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
function getMonth$1(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  return month;
}

/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the seconds
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */
function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}

/**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
 *
 * @param {Date|Number} date - the given date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @returns {Number} the local week-numbering year
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */
function getWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var defaultOptions = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

/**
 * @name startOfWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Return the start of a local week-numbering year for the given date.
 *
 * @description
 * Return the start of a local week-numbering year.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @returns {Date} the start of a week-numbering year
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 *
 * @example
 * // The start of an a week-numbering year for 2 July 2005 with default settings:
 * const result = startOfWeekYear(new Date(2005, 6, 2))
 * //=> Sun Dec 26 2004 00:00:00
 *
 * @example
 * // The start of a week-numbering year for 2 July 2005
 * // if Monday is the first day of week
 * // and 4 January is always in the first week of the year:
 * const result = startOfWeekYear(new Date(2005, 6, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  var date = startOfWeek(firstWeek, options);
  return date;
}

var MILLISECONDS_IN_WEEK = 604800000;

/**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
 *
 * @param {Date|Number} date - the given date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @returns {Number} the week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */

function getWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which year is 2 July 2014?
 * const result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
function getYear$1(dirtyDate) {
  requiredArgs(1, arguments);
  return toDate(dirtyDate).getFullYear();
}

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter$1(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore$1(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$1(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf$1(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /*#__PURE__*/function () {
  function Setter() {
    _classCallCheck(this, Setter);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter;
}();
var ValueSetter = /*#__PURE__*/function (_Setter) {
  _inherits(ValueSetter, _Setter);
  var _super = _createSuper(ValueSetter);
  function ValueSetter(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter;
}(Setter);
var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
  _inherits(DateToSystemTimezoneSetter, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter);
  function DateToSystemTimezoneSetter() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter, [{
    key: "set",
    value: function set(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter;
}(Setter);

var Parser = /*#__PURE__*/function () {
  function Parser() {
    _classCallCheck(this, Parser);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser, [{
    key: "run",
    value: function run(dateString, token, match, options) {
      var result = this.parse(dateString, token, match, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser;
}();

var EraParser = /*#__PURE__*/function (_Parser) {
  _inherits(EraParser, _Parser);
  var _super = _createSuper(EraParser);
  function EraParser() {
    var _this;
    _classCallCheck(this, EraParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
    return _this;
  }
  _createClass(EraParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return match.era(dateString, {
            width: 'abbreviated'
          }) || match.era(dateString, {
            width: 'narrow'
          });
        // A, B
        case 'GGGGG':
          return match.era(dateString, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ
        case 'GGGG':
        default:
          return match.era(dateString, {
            width: 'wide'
          }) || match.era(dateString, {
            width: 'abbreviated'
          }) || match.era(dateString, {
            width: 'narrow'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser;
}(Parser);

var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59

  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999

  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
};

var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }

  // Input is 'Z'
  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case 'morning':
      return 4;
    case 'evening':
      return 17;
    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12;
    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
var YearParser = /*#__PURE__*/function (_Parser) {
  _inherits(YearParser, _Parser);
  var _super = _createSuper(YearParser);
  function YearParser() {
    var _this;
    _classCallCheck(this, YearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(YearParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy'
        };
      };
      switch (token) {
        case 'y':
          return mapValue(parseNDigits(4, dateString), valueCallback);
        case 'yo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'year'
          }), valueCallback);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser;
}(Parser);

// Local week-numbering year
var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(LocalWeekYearParser, _Parser);
  var _super = _createSuper(LocalWeekYearParser);
  function LocalWeekYearParser() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
    return _this;
  }
  _createClass(LocalWeekYearParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY'
        };
      };
      switch (token) {
        case 'Y':
          return mapValue(parseNDigits(4, dateString), valueCallback);
        case 'Yo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'year'
          }), valueCallback);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser;
}(Parser);

var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOWeekYearParser, _Parser);
  var _super = _createSuper(ISOWeekYearParser);
  function ISOWeekYearParser() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ISOWeekYearParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      if (token === 'R') {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser;
}(Parser);

var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(ExtendedYearParser, _Parser);
  var _super = _createSuper(ExtendedYearParser);
  function ExtendedYearParser() {
    var _this;
    _classCallCheck(this, ExtendedYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ExtendedYearParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      if (token === 'u') {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser;
}(Parser);

var QuarterParser = /*#__PURE__*/function (_Parser) {
  _inherits(QuarterParser, _Parser);
  var _super = _createSuper(QuarterParser);
  function QuarterParser() {
    var _this;
    _classCallCheck(this, QuarterParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(QuarterParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ':
          // 01, 02, 03, 04
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case 'Qo':
          return match.ordinalNumber(dateString, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4
        case 'QQQ':
          return match.quarter(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case 'QQQQQ':
          return match.quarter(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...
        case 'QQQQ':
        default:
          return match.quarter(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.quarter(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser;
}(Parser);

var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
  _inherits(StandAloneQuarterParser, _Parser);
  var _super = _createSuper(StandAloneQuarterParser);
  function StandAloneQuarterParser() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(StandAloneQuarterParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq':
          // 01, 02, 03, 04
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case 'qo':
          return match.ordinalNumber(dateString, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4
        case 'qqq':
          return match.quarter(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case 'qqqqq':
          return match.quarter(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...
        case 'qqqq':
        default:
          return match.quarter(dateString, {
            width: 'wide',
            context: 'standalone'
          }) || match.quarter(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser;
}(Parser);

var MonthParser = /*#__PURE__*/function (_Parser) {
  _inherits(MonthParser, _Parser);
  var _super = _createSuper(MonthParser);
  function MonthParser() {
    var _this;
    _classCallCheck(this, MonthParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
        // 01, 02, ..., 12
        case 'MM':
          return mapValue(parseNDigits(2, dateString), valueCallback);
        // 1st, 2nd, ..., 12th
        case 'Mo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'month'
          }), valueCallback);
        // Jan, Feb, ..., Dec
        case 'MMM':
          return match.month(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // J, F, ..., D
        case 'MMMMM':
          return match.month(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December
        case 'MMMM':
        default:
          return match.month(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.month(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser;
}(Parser);

var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
  _inherits(StandAloneMonthParser, _Parser);
  var _super = _createSuper(StandAloneMonthParser);
  function StandAloneMonthParser() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(StandAloneMonthParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
        // 01, 02, ..., 12
        case 'LL':
          return mapValue(parseNDigits(2, dateString), valueCallback);
        // 1st, 2nd, ..., 12th
        case 'Lo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'month'
          }), valueCallback);
        // Jan, Feb, ..., Dec
        case 'LLL':
          return match.month(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // J, F, ..., D
        case 'LLLLL':
          return match.month(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December
        case 'LLLL':
        default:
          return match.month(dateString, {
            width: 'wide',
            context: 'standalone'
          }) || match.month(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser;
}(Parser);

function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

var LocalWeekParser = /*#__PURE__*/function (_Parser) {
  _inherits(LocalWeekParser, _Parser);
  var _super = _createSuper(LocalWeekParser);
  function LocalWeekParser() {
    var _this;
    _classCallCheck(this, LocalWeekParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
    return _this;
  }
  _createClass(LocalWeekParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, dateString);
        case 'wo':
          return match.ordinalNumber(dateString, {
            unit: 'week'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser;
}(Parser);

function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

var ISOWeekParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOWeekParser, _Parser);
  var _super = _createSuper(ISOWeekParser);
  function ISOWeekParser() {
    var _this;
    _classCallCheck(this, ISOWeekParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ISOWeekParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, dateString);
        case 'Io':
          return match.ordinalNumber(dateString, {
            unit: 'week'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser;
}(Parser);

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

// Day of the month
var DateParser = /*#__PURE__*/function (_Parser) {
  _inherits(DateParser, _Parser);
  var _super = _createSuper(DateParser);
  function DateParser() {
    var _this;
    _classCallCheck(this, DateParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(DateParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, dateString);
        case 'do':
          return match.ordinalNumber(dateString, {
            unit: 'date'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser;
}(Parser);

var DayOfYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(DayOfYearParser, _Parser);
  var _super = _createSuper(DayOfYearParser);
  function DayOfYearParser() {
    var _this;
    _classCallCheck(this, DayOfYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(DayOfYearParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case 'Do':
          return match.ordinalNumber(dateString, {
            unit: 'date'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser;
}(Parser);

function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

var DayParser = /*#__PURE__*/function (_Parser) {
  _inherits(DayParser, _Parser);
  var _super = _createSuper(DayParser);
  function DayParser() {
    var _this;
    _classCallCheck(this, DayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(DayParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // T
        case 'EEEEE':
          return match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu
        case 'EEEEEE':
          return match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday
        case 'EEEE':
        default:
          return match.day(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser;
}(Parser);

var LocalDayParser = /*#__PURE__*/function (_Parser) {
  _inherits(LocalDayParser, _Parser);
  var _super = _createSuper(LocalDayParser);
  function LocalDayParser() {
    var _this;
    _classCallCheck(this, LocalDayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
    return _this;
  }
  _createClass(LocalDayParser, [{
    key: "parse",
    value: function parse(dateString, token, match, options) {
      var valueCallback = function valueCallback(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case 'e':
        case 'ee':
          // 03
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        // 3rd
        case 'eo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'day'
          }), valueCallback);
        // Tue
        case 'eee':
          return match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // T
        case 'eeeee':
          return match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu
        case 'eeeeee':
          return match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday
        case 'eeee':
        default:
          return match.day(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser;
}(Parser);

var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
  _inherits(StandAloneLocalDayParser, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser);
  function StandAloneLocalDayParser() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
    return _this;
  }
  _createClass(StandAloneLocalDayParser, [{
    key: "parse",
    value: function parse(dateString, token, match, options) {
      var valueCallback = function valueCallback(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case 'c':
        case 'cc':
          // 03
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        // 3rd
        case 'co':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'day'
          }), valueCallback);
        // Tue
        case 'ccc':
          return match.day(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'short',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // T
        case 'ccccc':
          return match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu
        case 'cccccc':
          return match.day(dateString, {
            width: 'short',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tuesday
        case 'cccc':
        default:
          return match.day(dateString, {
            width: 'wide',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'short',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser;
}(Parser);

function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

var ISODayParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISODayParser, _Parser);
  var _super = _createSuper(ISODayParser);
  function ISODayParser() {
    var _this;
    _classCallCheck(this, ISODayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ISODayParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        // 2
        case 'i':
        case 'ii':
          // 02
          return parseNDigits(token.length, dateString);
        // 2nd
        case 'io':
          return match.ordinalNumber(dateString, {
            unit: 'day'
          });
        // Tue
        case 'iii':
          return mapValue(match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
        // T
        case 'iiiii':
          return mapValue(match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
        // Tu
        case 'iiiiii':
          return mapValue(match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
        // Tuesday
        case 'iiii':
        default:
          return mapValue(match.day(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser;
}(Parser);

var AMPMParser = /*#__PURE__*/function (_Parser) {
  _inherits(AMPMParser, _Parser);
  var _super = _createSuper(AMPMParser);
  function AMPMParser() {
    var _this;
    _classCallCheck(this, AMPMParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
    return _this;
  }
  _createClass(AMPMParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'aaaaa':
          return match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'aaaa':
        default:
          return match.dayPeriod(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser;
}(Parser);

var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
  _inherits(AMPMMidnightParser, _Parser);
  var _super = _createSuper(AMPMMidnightParser);
  function AMPMMidnightParser() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
    return _this;
  }
  _createClass(AMPMMidnightParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'bbbbb':
          return match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'bbbb':
        default:
          return match.dayPeriod(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser;
}(Parser);

var DayPeriodParser = /*#__PURE__*/function (_Parser) {
  _inherits(DayPeriodParser, _Parser);
  var _super = _createSuper(DayPeriodParser);
  function DayPeriodParser() {
    var _this;
    _classCallCheck(this, DayPeriodParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
    return _this;
  }
  _createClass(DayPeriodParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'BBBBB':
          return match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'BBBB':
        default:
          return match.dayPeriod(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser;
}(Parser);

var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour1to12Parser, _Parser);
  var _super = _createSuper(Hour1to12Parser);
  function Hour1to12Parser() {
    var _this;
    _classCallCheck(this, Hour1to12Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
    return _this;
  }
  _createClass(Hour1to12Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case 'ho':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser;
}(Parser);

var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour0to23Parser, _Parser);
  var _super = _createSuper(Hour0to23Parser);
  function Hour0to23Parser() {
    var _this;
    _classCallCheck(this, Hour0to23Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
    return _this;
  }
  _createClass(Hour0to23Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case 'Ho':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser;
}(Parser);

var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour0To11Parser, _Parser);
  var _super = _createSuper(Hour0To11Parser);
  function Hour0To11Parser() {
    var _this;
    _classCallCheck(this, Hour0To11Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
    return _this;
  }
  _createClass(Hour0To11Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case 'Ko':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser;
}(Parser);

var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour1To24Parser, _Parser);
  var _super = _createSuper(Hour1To24Parser);
  function Hour1To24Parser() {
    var _this;
    _classCallCheck(this, Hour1To24Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
    return _this;
  }
  _createClass(Hour1To24Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case 'ko':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser;
}(Parser);

var MinuteParser = /*#__PURE__*/function (_Parser) {
  _inherits(MinuteParser, _Parser);
  var _super = _createSuper(MinuteParser);
  function MinuteParser() {
    var _this;
    _classCallCheck(this, MinuteParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
    return _this;
  }
  _createClass(MinuteParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, dateString);
        case 'mo':
          return match.ordinalNumber(dateString, {
            unit: 'minute'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser;
}(Parser);

var SecondParser = /*#__PURE__*/function (_Parser) {
  _inherits(SecondParser, _Parser);
  var _super = _createSuper(SecondParser);
  function SecondParser() {
    var _this;
    _classCallCheck(this, SecondParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
    return _this;
  }
  _createClass(SecondParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, dateString);
        case 'so':
          return match.ordinalNumber(dateString, {
            unit: 'second'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser;
}(Parser);

var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
  _inherits(FractionOfSecondParser, _Parser);
  var _super = _createSuper(FractionOfSecondParser);
  function FractionOfSecondParser() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
    return _this;
  }
  _createClass(FractionOfSecondParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      var valueCallback = function valueCallback(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser;
}(Parser);

var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOTimezoneWithZParser, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser);
  function ISOTimezoneWithZParser() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'x']);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case 'XXXX':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case 'XXXXX':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser;
}(Parser);

var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOTimezoneParser, _Parser);
  var _super = _createSuper(ISOTimezoneParser);
  function ISOTimezoneParser() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'X']);
    return _this;
  }
  _createClass(ISOTimezoneParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case 'xxxx':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case 'xxxxx':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser;
}(Parser);

var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
  _inherits(TimestampSecondsParser, _Parser);
  var _super = _createSuper(TimestampSecondsParser);
  function TimestampSecondsParser() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
    return _this;
  }
  _createClass(TimestampSecondsParser, [{
    key: "parse",
    value: function parse(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value * 1000), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser;
}(Parser);

var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
  _inherits(TimestampMillisecondsParser, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser);
  function TimestampMillisecondsParser() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
    return _this;
  }
  _createClass(TimestampMillisecondsParser, [{
    key: "parse",
    value: function parse(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser;
}(Parser);

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */
function parse$1(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions = getDefaultOptions();
  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale$1;
  if (!locale.match) {
    throw new RangeError('locale must contain match property');
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  if (formatString === '') {
    if (dateString === '') {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale
  };

  // If timezone isn't specified, it will be set to the system timezone
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters$1) {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale.formatLong);
    }
    return substring;
  }).join('').match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens),
    _step;
  try {
    var _loop = function _loop() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function (usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
        if (!parseResult) {
          return {
            v: new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }

        // Replace two single quote characters with one single quote character
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }

        // Cut token from string, or, if string doesn't match the token, return Invalid Date
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();
      if (_typeof(_ret) === "object") return _ret.v;
    }

    // Check if the remaining input contains something other than whitespace
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function (setter) {
    return setter.priority;
  }).sort(function (a, b) {
    return b - a;
  }).filter(function (priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function (priority) {
    return setters.filter(function (setter) {
      return setter.priority === priority;
    }).sort(function (a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function (setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }

  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      // Result is tuple (date, flags)
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign$1(flags, result[1]);
        // Result is date
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month (and year)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */
function isSameMonth$1(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

/**
 * @name subDays
 * @category Day Helpers
 * @summary Subtract the specified number of days from the given date.
 *
 * @description
 * Subtract the specified number of days from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the days subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 10 days from 1 September 2014:
 * const result = subDays(new Date(2014, 8, 1), 10)
 * //=> Fri Aug 22 2014 00:00:00
 */
function subDays$1(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays$1(dirtyDate, -amount);
}

/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set February to 1 September 2014:
 * const result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */
function setMonth$1(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  // Set the last day of the new month
  // if the original date was the last day of the longer month
  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

/**
 * @name setHours
 * @category Hour Helpers
 * @summary Set the hours to the given date.
 *
 * @description
 * Set the hours to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} hours - the hours of the new date
 * @returns {Date} the new date with the hours set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 4 hours to 1 September 2014 11:30:00:
 * const result = setHours(new Date(2014, 8, 1, 11, 30), 4)
 * //=> Mon Sep 01 2014 04:30:00
 */
function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}

/**
 * @name setMinutes
 * @category Minute Helpers
 * @summary Set the minutes to the given date.
 *
 * @description
 * Set the minutes to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} minutes - the minutes of the new date
 * @returns {Date} the new date with the minutes set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 45 minutes to 1 September 2014 11:30:40:
 * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:45:40
 */
function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}

/**
 * @name setSeconds
 * @category Second Helpers
 * @summary Set the seconds to the given date.
 *
 * @description
 * Set the seconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} seconds - the seconds of the new date
 * @returns {Date} the new date with the seconds set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 45 seconds to 1 September 2014 11:30:40:
 * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:30:45
 */
function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}

/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * const result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */
function setYear$1(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear);

  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  date.setFullYear(year);
  return date;
}

/**
 * @name subMonths
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * const result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */
function subMonths$1(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths$1(dirtyDate, -amount);
}

/**
 * @name subYears
 * @category Year Helpers
 * @summary Subtract the specified number of years from the given date.
 *
 * @description
 * Subtract the specified number of years from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 years from 1 September 2014:
 * const result = subYears(new Date(2014, 8, 1), 5)
 * //=> Tue Sep 01 2009 00:00:00
 */
function subYears$1(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears$1(dirtyDate, -amount);
}

function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
  requiredArgs(2, arguments);
  var dateLeftStartOfWeek = startOfUTCWeek(dirtyDateLeft, options);
  var dateRightStartOfWeek = startOfUTCWeek(dirtyDateRight, options);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}

var accusativeWeekdays$7 = ['нядзелю', 'панядзелак', 'аўторак', 'сераду', 'чацвер', 'пятніцу', 'суботу'];
function lastWeek$3(day) {
  var weekday = accusativeWeekdays$7[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у мінулую " + weekday + " а' p";
    case 1:
    case 2:
    case 4:
      return "'у мінулы " + weekday + " а' p";
  }
}
function thisWeek$8(day) {
  var weekday = accusativeWeekdays$7[day];
  return "'у " + weekday + " а' p";
}
function nextWeek$3(day) {
  var weekday = accusativeWeekdays$7[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у наступную " + weekday + " а' p";
    case 1:
    case 2:
    case 4:
      return "'у наступны " + weekday + " а' p";
  }
}
var lastWeekFormat$2 = function lastWeekFormat(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek$8(day);
  } else {
    return lastWeek$3(day);
  }
};
var nextWeekFormat$2 = function nextWeekFormat(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek$8(day);
  } else {
    return nextWeek$3(day);
  }
};
var formatRelativeLocale$19 = {
  lastWeek: lastWeekFormat$2,
  yesterday: "'учора а' p",
  today: "'сёння а' p",
  tomorrow: "'заўтра а' p",
  nextWeek: nextWeekFormat$2,
  other: 'P'
};
var formatRelative$2i = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$19[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$2j = formatRelative$2i;

var eraValues$19 = {
  narrow: ['да н.э.', 'н.э.'],
  abbreviated: ['да н. э.', 'н. э.'],
  wide: ['да нашай эры', 'нашай эры']
};
var quarterValues$19 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-ы кв.', '2-і кв.', '3-і кв.', '4-ы кв.'],
  wide: ['1-ы квартал', '2-і квартал', '3-і квартал', '4-ы квартал']
};
var monthValues$19 = {
  narrow: ['С', 'Л', 'С', 'К', 'М', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],
  abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'май', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'снеж.'],
  wide: ['студзень', 'люты', 'сакавік', 'красавік', 'май', 'чэрвень', 'ліпень', 'жнівень', 'верасень', 'кастрычнік', 'лістапад', 'снежань']
};
var formattingMonthValues$i = {
  narrow: ['С', 'Л', 'С', 'К', 'М', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],
  abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'мая', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'снеж.'],
  wide: ['студзеня', 'лютага', 'сакавіка', 'красавіка', 'мая', 'чэрвеня', 'ліпеня', 'жніўня', 'верасня', 'кастрычніка', 'лістапада', 'снежня']
};
var dayValues$19 = {
  narrow: ['Н', 'П', 'А', 'С', 'Ч', 'П', 'С'],
  short: ['нд', 'пн', 'аў', 'ср', 'чц', 'пт', 'сб'],
  abbreviated: ['нядз', 'пан', 'аўт', 'сер', 'чац', 'пят', 'суб'],
  wide: ['нядзеля', 'панядзелак', 'аўторак', 'серада', 'чацвер', 'пятніца', 'субота']
};
var dayPeriodValues$19 = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дзень',
    evening: 'веч.',
    night: 'ноч'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дзень',
    evening: 'веч.',
    night: 'ноч'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўнач',
    noon: 'поўдзень',
    morning: 'раніца',
    afternoon: 'дзень',
    evening: 'вечар',
    night: 'ноч'
  }
};
var formattingDayPeriodValues$W = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночы'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночы'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўнач',
    noon: 'поўдзень',
    morning: 'раніцы',
    afternoon: 'дня',
    evening: 'вечара',
    night: 'ночы'
  }
};
var ordinalNumber$19 = function ordinalNumber(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;

  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 верасня)
   *  Incorrect: `do MMMM` (4-га верасня)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do дзень месяца`)
   *  library will produce:            `5-га дзень месяца`
   *  but correct spelling should be:  `5-ы дзень месяца`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */
  if (unit === 'date') {
    suffix = '-га';
  } else if (unit === 'hour' || unit === 'minute' || unit === 'second') {
    suffix = '-я';
  } else {
    suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? '-і' : '-ы';
  }
  return number + suffix;
};
var localize$2i = {
  ordinalNumber: ordinalNumber$19,
  era: buildLocalizeFn({
    values: eraValues$19,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$19,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$19,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$i,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$19,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$19,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$W,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2j = localize$2i;

var matchOrdinalNumberPattern$18 = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
var parseOrdinalNumberPattern$18 = /\d+/i;
var matchEraPatterns$18 = {
  narrow: /^((да )?н\.?\s?э\.?)/i,
  abbreviated: /^((да )?н\.?\s?э\.?)/i,
  wide: /^(да нашай эры|нашай эры|наша эра)/i
};
var parseEraPatterns$18 = {
  any: [/^д/i, /^н/i]
};
var matchQuarterPatterns$18 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
  wide: /^[1234](-?[ыі]?)? квартал/i
};
var parseQuarterPatterns$18 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$18 = {
  narrow: /^[слкмчжв]/i,
  abbreviated: /^(студз|лют|сак|крас|ма[йя]|чэрв|ліп|жн|вер|кастр|ліст|снеж)\.?/i,
  wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|ма[йя]|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|снеж(ань|ня))/i
};
var parseMonthPatterns$18 = {
  narrow: [/^с/i, /^л/i, /^с/i, /^к/i, /^м/i, /^ч/i, /^л/i, /^ж/i, /^в/i, /^к/i, /^л/i, /^с/i],
  any: [/^ст/i, /^лю/i, /^са/i, /^кр/i, /^ма/i, /^ч/i, /^ліп/i, /^ж/i, /^в/i, /^ка/i, /^ліс/i, /^сн/i]
};
var matchDayPatterns$18 = {
  narrow: /^[нпасч]/i,
  short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
  abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцв|чац|птн|пят|суб).?/i,
  wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацв(ер|ярга)|пятніц[аы]|субот[аы])/i
};
var parseDayPatterns$18 = {
  narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
};
var matchDayPeriodPatterns$18 = {
  narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
};
var parseDayPeriodPatterns$18 = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^поўн/i,
    noon: /^поўд/i,
    morning: /^р/i,
    afternoon: /^д[зн]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var match$2g = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$18,
    parsePattern: parseOrdinalNumberPattern$18,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$18,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$18,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$18,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$18,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$18,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$18,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$18,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$18,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$18,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$18,
    defaultParseWidth: 'any'
  })
};
var match$2h = match$2g;

/**
 * @type {Locale}
 * @category Locales
 * @summary Belarusian locale.
 * @language Belarusian
 * @iso-639-2 bel
 * @author Kiryl Anokhin [@alyrik]{@link https://github.com/alyrik}
 * @author Martin Wind [@arvigeus]{@link https://github.com/mawi12345}
 */
var locale$2D = {
  code: 'be',
  formatDistance: formatDistance$2l,
  formatLong: formatLong$2B,
  formatRelative: formatRelative$2j,
  localize: localize$2j,
  match: match$2h,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$2E = locale$2D;

function declension$5(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function buildLocalizeTokenFn$3(scheme) {
  return function (count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension$5(scheme.future, count);
        } else {
          return 'праз ' + declension$5(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$5(scheme.past, count);
        } else {
          return declension$5(scheme.regular, count) + ' таму';
        }
      }
    } else {
      return declension$5(scheme.regular, count);
    }
  };
}
var halfAMinute = function halfAMinute(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'праз паўхвіліны';
    } else {
      return 'паўхвіліны таму';
    }
  }
  return 'паўхвіліны';
};
var formatDistanceLocale$17 = {
  lessThanXSeconds: buildLocalizeTokenFn$3({
    regular: {
      one: 'менш за секунду',
      singularNominative: 'менш за {{count}} секунду',
      singularGenitive: 'менш за {{count}} секунды',
      pluralGenitive: 'менш за {{count}} секунд'
    },
    future: {
      one: 'менш, чым праз секунду',
      singularNominative: 'менш, чым праз {{count}} секунду',
      singularGenitive: 'менш, чым праз {{count}} секунды',
      pluralGenitive: 'менш, чым праз {{count}} секунд'
    }
  }),
  xSeconds: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: '{{count}} секунда',
      singularGenitive: '{{count}} секунды',
      pluralGenitive: '{{count}} секунд'
    },
    past: {
      singularNominative: '{{count}} секунду таму',
      singularGenitive: '{{count}} секунды таму',
      pluralGenitive: '{{count}} секунд таму'
    },
    future: {
      singularNominative: 'праз {{count}} секунду',
      singularGenitive: 'праз {{count}} секунды',
      pluralGenitive: 'праз {{count}} секунд'
    }
  }),
  halfAMinute: halfAMinute,
  lessThanXMinutes: buildLocalizeTokenFn$3({
    regular: {
      one: 'менш за хвіліну',
      singularNominative: 'менш за {{count}} хвіліну',
      singularGenitive: 'менш за {{count}} хвіліны',
      pluralGenitive: 'менш за {{count}} хвілін'
    },
    future: {
      one: 'менш, чым праз хвіліну',
      singularNominative: 'менш, чым праз {{count}} хвіліну',
      singularGenitive: 'менш, чым праз {{count}} хвіліны',
      pluralGenitive: 'менш, чым праз {{count}} хвілін'
    }
  }),
  xMinutes: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: '{{count}} хвіліна',
      singularGenitive: '{{count}} хвіліны',
      pluralGenitive: '{{count}} хвілін'
    },
    past: {
      singularNominative: '{{count}} хвіліну таму',
      singularGenitive: '{{count}} хвіліны таму',
      pluralGenitive: '{{count}} хвілін таму'
    },
    future: {
      singularNominative: 'праз {{count}} хвіліну',
      singularGenitive: 'праз {{count}} хвіліны',
      pluralGenitive: 'праз {{count}} хвілін'
    }
  }),
  aboutXHours: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: 'каля {{count}} гадзіны',
      singularGenitive: 'каля {{count}} гадзін',
      pluralGenitive: 'каля {{count}} гадзін'
    },
    future: {
      singularNominative: 'прыблізна праз {{count}} гадзіну',
      singularGenitive: 'прыблізна праз {{count}} гадзіны',
      pluralGenitive: 'прыблізна праз {{count}} гадзін'
    }
  }),
  xHours: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: '{{count}} гадзіна',
      singularGenitive: '{{count}} гадзіны',
      pluralGenitive: '{{count}} гадзін'
    },
    past: {
      singularNominative: '{{count}} гадзіну таму',
      singularGenitive: '{{count}} гадзіны таму',
      pluralGenitive: '{{count}} гадзін таму'
    },
    future: {
      singularNominative: 'праз {{count}} гадзіну',
      singularGenitive: 'праз {{count}} гадзіны',
      pluralGenitive: 'праз {{count}} гадзін'
    }
  }),
  xDays: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: '{{count}} дзень',
      singularGenitive: '{{count}} дні',
      pluralGenitive: '{{count}} дзён'
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: 'каля {{count}} месяца',
      // TODO
      singularGenitive: 'каля {{count}} месяцаў',
      // TODO
      pluralGenitive: 'каля {{count}} месяцаў' // TODO
    },

    future: {
      singularNominative: 'прыблізна праз {{count}} месяц',
      // TODO
      singularGenitive: 'прыблізна праз {{count}} месяцы',
      // TODO
      pluralGenitive: 'прыблізна праз {{count}} месяцаў' // TODO
    }
  }),

  xWeeks: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: '{{count}} месяц',
      singularGenitive: '{{count}} месяцы',
      pluralGenitive: '{{count}} месяцаў'
    }
  }),
  aboutXMonths: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: 'каля {{count}} месяца',
      singularGenitive: 'каля {{count}} месяцаў',
      pluralGenitive: 'каля {{count}} месяцаў'
    },
    future: {
      singularNominative: 'прыблізна праз {{count}} месяц',
      singularGenitive: 'прыблізна праз {{count}} месяцы',
      pluralGenitive: 'прыблізна праз {{count}} месяцаў'
    }
  }),
  xMonths: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: '{{count}} месяц',
      singularGenitive: '{{count}} месяцы',
      pluralGenitive: '{{count}} месяцаў'
    }
  }),
  aboutXYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: 'каля {{count}} года',
      singularGenitive: 'каля {{count}} гадоў',
      pluralGenitive: 'каля {{count}} гадоў'
    },
    future: {
      singularNominative: 'прыблізна праз {{count}} год',
      singularGenitive: 'прыблізна праз {{count}} гады',
      pluralGenitive: 'прыблізна праз {{count}} гадоў'
    }
  }),
  xYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: '{{count}} год',
      singularGenitive: '{{count}} гады',
      pluralGenitive: '{{count}} гадоў'
    }
  }),
  overXYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: 'больш за {{count}} год',
      singularGenitive: 'больш за {{count}} гады',
      pluralGenitive: 'больш за {{count}} гадоў'
    },
    future: {
      singularNominative: 'больш, чым праз {{count}} год',
      singularGenitive: 'больш, чым праз {{count}} гады',
      pluralGenitive: 'больш, чым праз {{count}} гадоў'
    }
  }),
  almostXYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: 'амаль {{count}} год',
      singularGenitive: 'амаль {{count}} гады',
      pluralGenitive: 'амаль {{count}} гадоў'
    },
    future: {
      singularNominative: 'амаль праз {{count}} год',
      singularGenitive: 'амаль праз {{count}} гады',
      pluralGenitive: 'амаль праз {{count}} гадоў'
    }
  })
};
var formatDistance$2g = function formatDistance(token, count, options) {
  options = options || {};
  return formatDistanceLocale$17[token](count, options);
};
var formatDistance$2h = formatDistance$2g;

var dateFormats$1g = {
  full: "EEEE, d MMMM y 'г.'",
  long: "d MMMM y 'г.'",
  medium: "d MMM y 'г.'",
  short: 'dd.MM.y'
};
var timeFormats$1g = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$1g = {
  any: '{{date}}, {{time}}'
};
var formatLong$2w = {
  date: buildFormatLongFn({
    formats: dateFormats$1g,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1g,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1g,
    defaultWidth: 'any'
  })
};
var formatLong$2x = formatLong$2w;

var accusativeWeekdays$6 = ['нядзелю', 'панядзелак', 'аўторак', 'сераду', 'чацьвер', 'пятніцу', 'суботу'];
function lastWeek$2(day) {
  var weekday = accusativeWeekdays$6[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у мінулую " + weekday + " а' p";
    case 1:
    case 2:
    case 4:
      return "'у мінулы " + weekday + " а' p";
  }
}
function thisWeek$7(day) {
  var weekday = accusativeWeekdays$6[day];
  return "'у " + weekday + " а' p";
}
function nextWeek$2(day) {
  var weekday = accusativeWeekdays$6[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у наступную " + weekday + " а' p";
    case 1:
    case 2:
    case 4:
      return "'у наступны " + weekday + " а' p";
  }
}
var lastWeekFormat$1 = function lastWeekFormat(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek$7(day);
  } else {
    return lastWeek$2(day);
  }
};
var nextWeekFormat$1 = function nextWeekFormat(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek$7(day);
  } else {
    return nextWeek$2(day);
  }
};
var formatRelativeLocale$18 = {
  lastWeek: lastWeekFormat$1,
  yesterday: "'учора а' p",
  today: "'сёньня а' p",
  tomorrow: "'заўтра а' p",
  nextWeek: nextWeekFormat$1,
  other: 'P'
};
var formatRelative$2g = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$18[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$2h = formatRelative$2g;

var eraValues$18 = {
  narrow: ['да н.э.', 'н.э.'],
  abbreviated: ['да н. э.', 'н. э.'],
  wide: ['да нашай эры', 'нашай эры']
};
var quarterValues$18 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-ы кв.', '2-і кв.', '3-і кв.', '4-ы кв.'],
  wide: ['1-ы квартал', '2-і квартал', '3-і квартал', '4-ы квартал']
};
var monthValues$18 = {
  narrow: ['С', 'Л', 'С', 'К', 'Т', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],
  abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'трав.', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'сьнеж.'],
  wide: ['студзень', 'люты', 'сакавік', 'красавік', 'травень', 'чэрвень', 'ліпень', 'жнівень', 'верасень', 'кастрычнік', 'лістапад', 'сьнежань']
};
var formattingMonthValues$h = {
  narrow: ['С', 'Л', 'С', 'К', 'Т', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],
  abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'трав.', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'сьнеж.'],
  wide: ['студзеня', 'лютага', 'сакавіка', 'красавіка', 'траўня', 'чэрвеня', 'ліпеня', 'жніўня', 'верасня', 'кастрычніка', 'лістапада', 'сьнежня']
};
var dayValues$18 = {
  narrow: ['Н', 'П', 'А', 'С', 'Ч', 'П', 'С'],
  short: ['нд', 'пн', 'аў', 'ср', 'чц', 'пт', 'сб'],
  abbreviated: ['нядз', 'пан', 'аўт', 'сер', 'чаць', 'пят', 'суб'],
  wide: ['нядзеля', 'панядзелак', 'аўторак', 'серада', 'чацьвер', 'пятніца', 'субота']
};
var dayPeriodValues$18 = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дзень',
    evening: 'веч.',
    night: 'ноч'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дзень',
    evening: 'веч.',
    night: 'ноч'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўнач',
    noon: 'поўдзень',
    morning: 'раніца',
    afternoon: 'дзень',
    evening: 'вечар',
    night: 'ноч'
  }
};
var formattingDayPeriodValues$V = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночы'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўн.',
    noon: 'поўд.',
    morning: 'ран.',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночы'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'поўнач',
    noon: 'поўдзень',
    morning: 'раніцы',
    afternoon: 'дня',
    evening: 'вечара',
    night: 'ночы'
  }
};
var ordinalNumber$18 = function ordinalNumber(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;

  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 верасня)
   *  Incorrect: `do MMMM` (4-га верасня)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do дзень месяца`)
   *  library will produce:            `5-га дзень месяца`
   *  but correct spelling should be:  `5-ы дзень месяца`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */
  if (unit === 'date') {
    suffix = '-га';
  } else if (unit === 'hour' || unit === 'minute' || unit === 'second') {
    suffix = '-я';
  } else {
    suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? '-і' : '-ы';
  }
  return number + suffix;
};
var localize$2g = {
  ordinalNumber: ordinalNumber$18,
  era: buildLocalizeFn({
    values: eraValues$18,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$18,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$18,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$h,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$18,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$18,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$V,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2h = localize$2g;

var matchOrdinalNumberPattern$17 = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
var parseOrdinalNumberPattern$17 = /\d+/i;
var matchEraPatterns$17 = {
  narrow: /^((да )?н\.?\s?э\.?)/i,
  abbreviated: /^((да )?н\.?\s?э\.?)/i,
  wide: /^(да нашай эры|нашай эры|наша эра)/i
};
var parseEraPatterns$17 = {
  any: [/^д/i, /^н/i]
};
var matchQuarterPatterns$17 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
  wide: /^[1234](-?[ыі]?)? квартал/i
};
var parseQuarterPatterns$17 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$17 = {
  narrow: /^[слкмчжв]/i,
  abbreviated: /^(студз|лют|сак|крас|тр(ав)?|чэрв|ліп|жн|вер|кастр|ліст|сьнеж)\.?/i,
  wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|тра(вень|ўня)|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|сьнеж(ань|ня))/i
};
var parseMonthPatterns$17 = {
  narrow: [/^с/i, /^л/i, /^с/i, /^к/i, /^т/i, /^ч/i, /^л/i, /^ж/i, /^в/i, /^к/i, /^л/i, /^с/i],
  any: [/^ст/i, /^лю/i, /^са/i, /^кр/i, /^тр/i, /^ч/i, /^ліп/i, /^ж/i, /^в/i, /^ка/i, /^ліс/i, /^сн/i]
};
var matchDayPatterns$17 = {
  narrow: /^[нпасч]/i,
  short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
  abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцьв|чаць|птн|пят|суб).?/i,
  wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацьв(ер|ярга)|пятніц[аы]|субот[аы])/i
};
var parseDayPatterns$17 = {
  narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
};
var matchDayPeriodPatterns$17 = {
  narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
};
var parseDayPeriodPatterns$17 = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^поўн/i,
    noon: /^поўд/i,
    morning: /^р/i,
    afternoon: /^д[зн]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var match$2e = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$17,
    parsePattern: parseOrdinalNumberPattern$17,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$17,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$17,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$17,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$17,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$17,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$17,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$17,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$17,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$17,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$17,
    defaultParseWidth: 'any'
  })
};
var match$2f = match$2e;

/**
 * @type {Locale}
 * @category Locales
 * @summary Belarusian Classic locale.
 * @language Belarusian Classic
 * @iso-639-2 bel
 * @author Ryhor Nopears [@nopears]{@link https://github.com/nopears}
 */
var locale$2B = {
  code: 'be-tarask',
  formatDistance: formatDistance$2h,
  formatLong: formatLong$2x,
  formatRelative: formatRelative$2h,
  localize: localize$2h,
  match: match$2f,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$2C = locale$2B;

var formatDistanceLocale$16 = {
  lessThanXSeconds: {
    one: 'по-малко от секунда',
    other: 'по-малко от {{count}} секунди'
  },
  xSeconds: {
    one: '1 секунда',
    other: '{{count}} секунди'
  },
  halfAMinute: 'половин минута',
  lessThanXMinutes: {
    one: 'по-малко от минута',
    other: 'по-малко от {{count}} минути'
  },
  xMinutes: {
    one: '1 минута',
    other: '{{count}} минути'
  },
  aboutXHours: {
    one: 'около час',
    other: 'около {{count}} часа'
  },
  xHours: {
    one: '1 час',
    other: '{{count}} часа'
  },
  xDays: {
    one: '1 ден',
    other: '{{count}} дни'
  },
  aboutXWeeks: {
    one: 'около седмица',
    other: 'около {{count}} седмици'
  },
  xWeeks: {
    one: '1 седмица',
    other: '{{count}} седмици'
  },
  aboutXMonths: {
    one: 'около месец',
    other: 'около {{count}} месеца'
  },
  xMonths: {
    one: '1 месец',
    other: '{{count}} месеца'
  },
  aboutXYears: {
    one: 'около година',
    other: 'около {{count}} години'
  },
  xYears: {
    one: '1 година',
    other: '{{count}} години'
  },
  overXYears: {
    one: 'над година',
    other: 'над {{count}} години'
  },
  almostXYears: {
    one: 'почти година',
    other: 'почти {{count}} години'
  }
};
var formatDistance$2e = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$16[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'след ' + result;
    } else {
      return 'преди ' + result;
    }
  }
  return result;
};
var formatDistance$2f = formatDistance$2e;

var dateFormats$1f = {
  full: 'EEEE, dd MMMM yyyy',
  long: 'dd MMMM yyyy',
  medium: 'dd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$1f = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$1f = {
  any: '{{date}} {{time}}'
};
var formatLong$2u = {
  date: buildFormatLongFn({
    formats: dateFormats$1f,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1f,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1f,
    defaultWidth: 'any'
  })
};
var formatLong$2v = formatLong$2u;

// Adapted from the `ru` translation

var weekdays$3 = ['неделя', 'понеделник', 'вторник', 'сряда', 'четвъртък', 'петък', 'събота'];
function lastWeek$1(day) {
  var weekday = weekdays$3[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'миналата " + weekday + " в' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'миналия " + weekday + " в' p";
  }
}
function thisWeek$6(day) {
  var weekday = weekdays$3[day];
  if (day === 2 /* Tue */) {
    return "'във " + weekday + " в' p";
  } else {
    return "'в " + weekday + " в' p";
  }
}
function nextWeek$1(day) {
  var weekday = weekdays$3[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'следващата " + weekday + " в' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'следващия " + weekday + " в' p";
  }
}
var lastWeekFormatToken = function lastWeekFormatToken(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek$6(day);
  } else {
    return lastWeek$1(day);
  }
};
var nextWeekFormatToken = function nextWeekFormatToken(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek$6(day);
  } else {
    return nextWeek$1(day);
  }
};
var formatRelativeLocale$17 = {
  lastWeek: lastWeekFormatToken,
  yesterday: "'вчера в' p",
  today: "'днес в' p",
  tomorrow: "'утре в' p",
  nextWeek: nextWeekFormatToken,
  other: 'P'
};
var formatRelative$2e = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$17[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$2f = formatRelative$2e;

var eraValues$17 = {
  narrow: ['пр.н.е.', 'н.е.'],
  abbreviated: ['преди н. е.', 'н. е.'],
  wide: ['преди новата ера', 'новата ера']
};
var quarterValues$17 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-во тримес.', '2-ро тримес.', '3-то тримес.', '4-то тримес.'],
  wide: ['1-во тримесечие', '2-ро тримесечие', '3-то тримесечие', '4-то тримесечие']
};
var monthValues$17 = {
  abbreviated: ['яну', 'фев', 'мар', 'апр', 'май', 'юни', 'юли', 'авг', 'сеп', 'окт', 'ное', 'дек'],
  wide: ['януари', 'февруари', 'март', 'април', 'май', 'юни', 'юли', 'август', 'септември', 'октомври', 'ноември', 'декември']
};
var dayValues$17 = {
  narrow: ['Н', 'П', 'В', 'С', 'Ч', 'П', 'С'],
  short: ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
  abbreviated: ['нед', 'пон', 'вто', 'сря', 'чет', 'пет', 'съб'],
  wide: ['неделя', 'понеделник', 'вторник', 'сряда', 'четвъртък', 'петък', 'събота']
};
var dayPeriodValues$17 = {
  wide: {
    am: 'преди обяд',
    pm: 'след обяд',
    midnight: 'в полунощ',
    noon: 'на обяд',
    morning: 'сутринта',
    afternoon: 'следобед',
    evening: 'вечерта',
    night: 'през нощта'
  }
};
function isFeminine(unit) {
  return unit === 'year' || unit === 'week' || unit === 'minute' || unit === 'second';
}
function isNeuter(unit) {
  return unit === 'quarter';
}
function numberWithSuffix(number, unit, masculine, feminine, neuter) {
  var suffix = isNeuter(unit) ? neuter : isFeminine(unit) ? feminine : masculine;
  return number + '-' + suffix;
}
var ordinalNumber$17 = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (number === 0) {
    return numberWithSuffix(0, unit, 'ев', 'ева', 'ево');
  } else if (number % 1000 === 0) {
    return numberWithSuffix(number, unit, 'ен', 'на', 'но');
  } else if (number % 100 === 0) {
    return numberWithSuffix(number, unit, 'тен', 'тна', 'тно');
  }
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return numberWithSuffix(number, unit, 'ви', 'ва', 'во');
      case 2:
        return numberWithSuffix(number, unit, 'ри', 'ра', 'ро');
      case 7:
      case 8:
        return numberWithSuffix(number, unit, 'ми', 'ма', 'мо');
    }
  }
  return numberWithSuffix(number, unit, 'ти', 'та', 'то');
};
var localize$2e = {
  ordinalNumber: ordinalNumber$17,
  era: buildLocalizeFn({
    values: eraValues$17,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$17,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$17,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$17,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$17,
    defaultWidth: 'wide'
  })
};
var localize$2f = localize$2e;

var matchOrdinalNumberPattern$16 = /^(\d+)(-?[врмт][аи]|-?т?(ен|на)|-?(ев|ева))?/i;
var parseOrdinalNumberPattern$16 = /\d+/i;
var matchEraPatterns$16 = {
  narrow: /^((пр)?н\.?\s?е\.?)/i,
  abbreviated: /^((пр)?н\.?\s?е\.?)/i,
  wide: /^(преди новата ера|новата ера|нова ера)/i
};
var parseEraPatterns$16 = {
  any: [/^п/i, /^н/i]
};
var matchQuarterPatterns$16 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[врт]?o?)? тримес.?/i,
  wide: /^[1234](-?[врт]?о?)? тримесечие/i
};
var parseQuarterPatterns$16 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchDayPatterns$16 = {
  narrow: /^[нпвсч]/i,
  short: /^(нд|пн|вт|ср|чт|пт|сб)/i,
  abbreviated: /^(нед|пон|вто|сря|чет|пет|съб)/i,
  wide: /^(неделя|понеделник|вторник|сряда|четвъртък|петък|събота)/i
};
var parseDayPatterns$16 = {
  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[ъб]/i]
};
var matchMonthPatterns$16 = {
  abbreviated: /^(яну|фев|мар|апр|май|юни|юли|авг|сеп|окт|ное|дек)/i,
  wide: /^(януари|февруари|март|април|май|юни|юли|август|септември|октомври|ноември|декември)/i
};
var parseMonthPatterns$16 = {
  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^май/i, /^юн/i, /^юл/i, /^ав/i, /^се/i, /^окт/i, /^но/i, /^де/i]
};
var matchDayPeriodPatterns$16 = {
  any: /^(преди о|след о|в по|на о|през|веч|сут|следо)/i
};
var parseDayPeriodPatterns$16 = {
  any: {
    am: /^преди о/i,
    pm: /^след о/i,
    midnight: /^в пол/i,
    noon: /^на об/i,
    morning: /^сут/i,
    afternoon: /^следо/i,
    evening: /^веч/i,
    night: /^през н/i
  }
};
var match$2c = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$16,
    parsePattern: parseOrdinalNumberPattern$16,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$16,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$16,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$16,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$16,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$16,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$16,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$16,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$16,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$16,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$16,
    defaultParseWidth: 'any'
  })
};
var match$2d = match$2c;

/**
 * @type {Locale}
 * @category Locales
 * @summary Bulgarian locale.
 * @language Bulgarian
 * @iso-639-2 bul
 * @author Nikolay Stoynov [@arvigeus]{@link https://github.com/arvigeus}
 * @author Tsvetan Ovedenski [@fintara]{@link https://github.com/fintara}
 */
var locale$2z = {
  code: 'bg',
  formatDistance: formatDistance$2f,
  formatLong: formatLong$2v,
  formatRelative: formatRelative$2f,
  localize: localize$2f,
  match: match$2d,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$2A = locale$2z;

var numberValues$1 = {
  locale: {
    '1': '১',
    '2': '২',
    '3': '৩',
    '4': '৪',
    '5': '৫',
    '6': '৬',
    '7': '৭',
    '8': '৮',
    '9': '৯',
    '0': '০'
  },
  number: {
    '১': '1',
    '২': '2',
    '৩': '3',
    '৪': '4',
    '৫': '5',
    '৬': '6',
    '৭': '7',
    '৮': '8',
    '৯': '9',
    '০': '0'
  }
};
var eraValues$16 = {
  narrow: ['খ্রিঃপূঃ', 'খ্রিঃ'],
  abbreviated: ['খ্রিঃপূর্ব', 'খ্রিঃ'],
  wide: ['খ্রিস্টপূর্ব', 'খ্রিস্টাব্দ']
};
var quarterValues$16 = {
  narrow: ['১', '২', '৩', '৪'],
  abbreviated: ['১ত্রৈ', '২ত্রৈ', '৩ত্রৈ', '৪ত্রৈ'],
  wide: ['১ম ত্রৈমাসিক', '২য় ত্রৈমাসিক', '৩য় ত্রৈমাসিক', '৪র্থ ত্রৈমাসিক']
};
var monthValues$16 = {
  narrow: ['জানু', 'ফেব্রু', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'আগস্ট', 'সেপ্ট', 'অক্টো', 'নভে', 'ডিসে'],
  abbreviated: ['জানু', 'ফেব্রু', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'আগস্ট', 'সেপ্ট', 'অক্টো', 'নভে', 'ডিসে'],
  wide: ['জানুয়ারি', 'ফেব্রুয়ারি', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'আগস্ট', 'সেপ্টেম্বর', 'অক্টোবর', 'নভেম্বর', 'ডিসেম্বর']
};
var dayValues$16 = {
  narrow: ['র', 'সো', 'ম', 'বু', 'বৃ', 'শু', 'শ'],
  short: ['রবি', 'সোম', 'মঙ্গল', 'বুধ', 'বৃহ', 'শুক্র', 'শনি'],
  abbreviated: ['রবি', 'সোম', 'মঙ্গল', 'বুধ', 'বৃহ', 'শুক্র', 'শনি'],
  wide: ['রবিবার', 'সোমবার', 'মঙ্গলবার', 'বুধবার', 'বৃহস্পতিবার ', 'শুক্রবার', 'শনিবার']
};
var dayPeriodValues$16 = {
  narrow: {
    am: 'পূ',
    pm: 'অপ',
    midnight: 'মধ্যরাত',
    noon: 'মধ্যাহ্ন',
    morning: 'সকাল',
    afternoon: 'বিকাল',
    evening: 'সন্ধ্যা',
    night: 'রাত'
  },
  abbreviated: {
    am: 'পূর্বাহ্ন',
    pm: 'অপরাহ্ন',
    midnight: 'মধ্যরাত',
    noon: 'মধ্যাহ্ন',
    morning: 'সকাল',
    afternoon: 'বিকাল',
    evening: 'সন্ধ্যা',
    night: 'রাত'
  },
  wide: {
    am: 'পূর্বাহ্ন',
    pm: 'অপরাহ্ন',
    midnight: 'মধ্যরাত',
    noon: 'মধ্যাহ্ন',
    morning: 'সকাল',
    afternoon: 'বিকাল',
    evening: 'সন্ধ্যা',
    night: 'রাত'
  }
};
var formattingDayPeriodValues$U = {
  narrow: {
    am: 'পূ',
    pm: 'অপ',
    midnight: 'মধ্যরাত',
    noon: 'মধ্যাহ্ন',
    morning: 'সকাল',
    afternoon: 'বিকাল',
    evening: 'সন্ধ্যা',
    night: 'রাত'
  },
  abbreviated: {
    am: 'পূর্বাহ্ন',
    pm: 'অপরাহ্ন',
    midnight: 'মধ্যরাত',
    noon: 'মধ্যাহ্ন',
    morning: 'সকাল',
    afternoon: 'বিকাল',
    evening: 'সন্ধ্যা',
    night: 'রাত'
  },
  wide: {
    am: 'পূর্বাহ্ন',
    pm: 'অপরাহ্ন',
    midnight: 'মধ্যরাত',
    noon: 'মধ্যাহ্ন',
    morning: 'সকাল',
    afternoon: 'বিকাল',
    evening: 'সন্ধ্যা',
    night: 'রাত'
  }
};
function dateOrdinalNumber(number, localeNumber) {
  if (number > 18 && number <= 31) {
    return localeNumber + 'শে';
  } else {
    switch (number) {
      case 1:
        return localeNumber + 'লা';
      case 2:
      case 3:
        return localeNumber + 'রা';
      case 4:
        return localeNumber + 'ঠা';
      default:
        return localeNumber + 'ই';
    }
  }
}
var ordinalNumber$16 = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var localeNumber = numberToLocale$1(number);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (unit === 'date') {
    return dateOrdinalNumber(number, localeNumber);
  }
  if (number > 10 || number === 0) return localeNumber + 'তম';
  var rem10 = number % 10;
  switch (rem10) {
    case 2:
    case 3:
      return localeNumber + 'য়';
    case 4:
      return localeNumber + 'র্থ';
    case 6:
      return localeNumber + 'ষ্ঠ';
    default:
      return localeNumber + 'ম';
  }
};

// function localeToNumber(locale: string): number {
//   const enNumber = locale.toString().replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
//     return numberValues.number[match as keyof typeof numberValues.number]
//   })
//   return Number(enNumber)
// }

function numberToLocale$1(enNumber) {
  return enNumber.toString().replace(/\d/g, function (match) {
    return numberValues$1.locale[match];
  });
}
var localize$2c = {
  ordinalNumber: ordinalNumber$16,
  era: buildLocalizeFn({
    values: eraValues$16,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$16,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$16,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$16,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$16,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$U,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2d = localize$2c;

var formatDistanceLocale$15 = {
  lessThanXSeconds: {
    one: 'প্রায় ১ সেকেন্ড',
    other: 'প্রায় {{count}} সেকেন্ড'
  },
  xSeconds: {
    one: '১ সেকেন্ড',
    other: '{{count}} সেকেন্ড'
  },
  halfAMinute: 'আধ মিনিট',
  lessThanXMinutes: {
    one: 'প্রায় ১ মিনিট',
    other: 'প্রায় {{count}} মিনিট'
  },
  xMinutes: {
    one: '১ মিনিট',
    other: '{{count}} মিনিট'
  },
  aboutXHours: {
    one: 'প্রায় ১ ঘন্টা',
    other: 'প্রায় {{count}} ঘন্টা'
  },
  xHours: {
    one: '১ ঘন্টা',
    other: '{{count}} ঘন্টা'
  },
  xDays: {
    one: '১ দিন',
    other: '{{count}} দিন'
  },
  aboutXWeeks: {
    one: 'প্রায় ১ সপ্তাহ',
    other: 'প্রায় {{count}} সপ্তাহ'
  },
  xWeeks: {
    one: '১ সপ্তাহ',
    other: '{{count}} সপ্তাহ'
  },
  aboutXMonths: {
    one: 'প্রায় ১ মাস',
    other: 'প্রায় {{count}} মাস'
  },
  xMonths: {
    one: '১ মাস',
    other: '{{count}} মাস'
  },
  aboutXYears: {
    one: 'প্রায় ১ বছর',
    other: 'প্রায় {{count}} বছর'
  },
  xYears: {
    one: '১ বছর',
    other: '{{count}} বছর'
  },
  overXYears: {
    one: '১ বছরের বেশি',
    other: '{{count}} বছরের বেশি'
  },
  almostXYears: {
    one: 'প্রায় ১ বছর',
    other: 'প্রায় {{count}} বছর'
  }
};
var formatDistance$2c = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$15[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', numberToLocale$1(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' এর মধ্যে';
    } else {
      return result + ' আগে';
    }
  }
  return result;
};
var formatDistance$2d = formatDistance$2c;

var dateFormats$1e = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$1e = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1e = {
  full: "{{date}} {{time}} 'সময়'",
  long: "{{date}} {{time}} 'সময়'",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2s = {
  date: buildFormatLongFn({
    formats: dateFormats$1e,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1e,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1e,
    defaultWidth: 'full'
  })
};
var formatLong$2t = formatLong$2s;

var formatRelativeLocale$16 = {
  lastWeek: "'গত' eeee 'সময়' p",
  yesterday: "'গতকাল' 'সময়' p",
  today: "'আজ' 'সময়' p",
  tomorrow: "'আগামীকাল' 'সময়' p",
  nextWeek: "eeee 'সময়' p",
  other: 'P'
};
var formatRelative$2c = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$16[token];
};
var formatRelative$2d = formatRelative$2c;

var matchOrdinalNumberPattern$15 = /^(\d+)(ম|য়|র্থ|ষ্ঠ|শে|ই|তম)?/i;
var parseOrdinalNumberPattern$15 = /\d+/i;
var matchEraPatterns$15 = {
  narrow: /^(খ্রিঃপূঃ|খ্রিঃ)/i,
  abbreviated: /^(খ্রিঃপূর্ব|খ্রিঃ)/i,
  wide: /^(খ্রিস্টপূর্ব|খ্রিস্টাব্দ)/i
};
var parseEraPatterns$15 = {
  narrow: [/^খ্রিঃপূঃ/i, /^খ্রিঃ/i],
  abbreviated: [/^খ্রিঃপূর্ব/i, /^খ্রিঃ/i],
  wide: [/^খ্রিস্টপূর্ব/i, /^খ্রিস্টাব্দ/i]
};
var matchQuarterPatterns$15 = {
  narrow: /^[১২৩৪]/i,
  abbreviated: /^[১২৩৪]ত্রৈ/i,
  wide: /^[১২৩৪](ম|য়|র্থ)? ত্রৈমাসিক/i
};
var parseQuarterPatterns$15 = {
  any: [/১/i, /২/i, /৩/i, /৪/i]
};
var matchMonthPatterns$15 = {
  narrow: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
  abbreviated: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
  wide: /^(জানুয়ারি|ফেব্রুয়ারি|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্টেম্বর|অক্টোবর|নভেম্বর|ডিসেম্বর)/i
};
var parseMonthPatterns$15 = {
  any: [/^জানু/i, /^ফেব্রু/i, /^মার্চ/i, /^এপ্রিল/i, /^মে/i, /^জুন/i, /^জুলাই/i, /^আগস্ট/i, /^সেপ্ট/i, /^অক্টো/i, /^নভে/i, /^ডিসে/i]
};
var matchDayPatterns$15 = {
  narrow: /^(র|সো|ম|বু|বৃ|শু|শ)+/i,
  short: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
  abbreviated: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
  wide: /^(রবিবার|সোমবার|মঙ্গলবার|বুধবার|বৃহস্পতিবার |শুক্রবার|শনিবার)+/i
};
var parseDayPatterns$15 = {
  narrow: [/^র/i, /^সো/i, /^ম/i, /^বু/i, /^বৃ/i, /^শু/i, /^শ/i],
  short: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],
  abbreviated: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],
  wide: [/^রবিবার/i, /^সোমবার/i, /^মঙ্গলবার/i, /^বুধবার/i, /^বৃহস্পতিবার /i, /^শুক্রবার/i, /^শনিবার/i]
};
var matchDayPeriodPatterns$15 = {
  narrow: /^(পূ|অপ|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
  abbreviated: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
  wide: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i
};
var parseDayPeriodPatterns$15 = {
  any: {
    am: /^পূ/i,
    pm: /^অপ/i,
    midnight: /^মধ্যরাত/i,
    noon: /^মধ্যাহ্ন/i,
    morning: /সকাল/i,
    afternoon: /বিকাল/i,
    evening: /সন্ধ্যা/i,
    night: /রাত/i
  }
};
var match$2a = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$15,
    parsePattern: parseOrdinalNumberPattern$15,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$15,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$15,
    defaultParseWidth: 'wide'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$15,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$15,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$15,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$15,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$15,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$15,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$15,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$15,
    defaultParseWidth: 'any'
  })
};
var match$2b = match$2a;

/**
 * @type {Locale}
 * @category Locales
 * @summary Bengali locale.
 * @language Bengali
 * @iso-639-2 ben
 * @author Touhidur Rahman [@touhidrahman]{@link https://github.com/touhidrahman}
 * @author Farhad Yasir [@nutboltu]{@link https://github.com/nutboltu}
 */
var locale$2x = {
  code: 'bn',
  formatDistance: formatDistance$2d,
  formatLong: formatLong$2t,
  formatRelative: formatRelative$2d,
  localize: localize$2d,
  match: match$2b,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$2y = locale$2x;

var formatDistanceLocale$14 = {
  lessThanXSeconds: {
    one: {
      standalone: 'manje od 1 sekunde',
      withPrepositionAgo: 'manje od 1 sekunde',
      withPrepositionIn: 'manje od 1 sekundu'
    },
    dual: 'manje od {{count}} sekunde',
    other: 'manje od {{count}} sekundi'
  },
  xSeconds: {
    one: {
      standalone: '1 sekunda',
      withPrepositionAgo: '1 sekunde',
      withPrepositionIn: '1 sekundu'
    },
    dual: '{{count}} sekunde',
    other: '{{count}} sekundi'
  },
  halfAMinute: 'pola minute',
  lessThanXMinutes: {
    one: {
      standalone: 'manje od 1 minute',
      withPrepositionAgo: 'manje od 1 minute',
      withPrepositionIn: 'manje od 1 minutu'
    },
    dual: 'manje od {{count}} minute',
    other: 'manje od {{count}} minuta'
  },
  xMinutes: {
    one: {
      standalone: '1 minuta',
      withPrepositionAgo: '1 minute',
      withPrepositionIn: '1 minutu'
    },
    dual: '{{count}} minute',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: {
      standalone: 'oko 1 sat',
      withPrepositionAgo: 'oko 1 sat',
      withPrepositionIn: 'oko 1 sat'
    },
    dual: 'oko {{count}} sata',
    other: 'oko {{count}} sati'
  },
  xHours: {
    one: {
      standalone: '1 sat',
      withPrepositionAgo: '1 sat',
      withPrepositionIn: '1 sat'
    },
    dual: '{{count}} sata',
    other: '{{count}} sati'
  },
  xDays: {
    one: {
      standalone: '1 dan',
      withPrepositionAgo: '1 dan',
      withPrepositionIn: '1 dan'
    },
    dual: '{{count}} dana',
    other: '{{count}} dana'
  },
  aboutXWeeks: {
    one: {
      standalone: 'oko 1 sedmicu',
      withPrepositionAgo: 'oko 1 sedmicu',
      withPrepositionIn: 'oko 1 sedmicu'
    },
    dual: 'oko {{count}} sedmice',
    other: 'oko {{count}} sedmice'
  },
  xWeeks: {
    one: {
      standalone: '1 sedmicu',
      withPrepositionAgo: '1 sedmicu',
      withPrepositionIn: '1 sedmicu'
    },
    dual: '{{count}} sedmice',
    other: '{{count}} sedmice'
  },
  aboutXMonths: {
    one: {
      standalone: 'oko 1 mjesec',
      withPrepositionAgo: 'oko 1 mjesec',
      withPrepositionIn: 'oko 1 mjesec'
    },
    dual: 'oko {{count}} mjeseca',
    other: 'oko {{count}} mjeseci'
  },
  xMonths: {
    one: {
      standalone: '1 mjesec',
      withPrepositionAgo: '1 mjesec',
      withPrepositionIn: '1 mjesec'
    },
    dual: '{{count}} mjeseca',
    other: '{{count}} mjeseci'
  },
  aboutXYears: {
    one: {
      standalone: 'oko 1 godinu',
      withPrepositionAgo: 'oko 1 godinu',
      withPrepositionIn: 'oko 1 godinu'
    },
    dual: 'oko {{count}} godine',
    other: 'oko {{count}} godina'
  },
  xYears: {
    one: {
      standalone: '1 godina',
      withPrepositionAgo: '1 godine',
      withPrepositionIn: '1 godinu'
    },
    dual: '{{count}} godine',
    other: '{{count}} godina'
  },
  overXYears: {
    one: {
      standalone: 'preko 1 godinu',
      withPrepositionAgo: 'preko 1 godinu',
      withPrepositionIn: 'preko 1 godinu'
    },
    dual: 'preko {{count}} godine',
    other: 'preko {{count}} godina'
  },
  almostXYears: {
    one: {
      standalone: 'gotovo 1 godinu',
      withPrepositionAgo: 'gotovo 1 godinu',
      withPrepositionIn: 'gotovo 1 godinu'
    },
    dual: 'gotovo {{count}} godine',
    other: 'gotovo {{count}} godina'
  }
};
var formatDistance$2a = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$14[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'za ' + result;
    } else {
      return 'prije ' + result;
    }
  }
  return result;
};
var formatDistance$2b = formatDistance$2a;

var dateFormats$1d = {
  full: 'EEEE, d. MMMM yyyy.',
  long: 'd. MMMM yyyy.',
  medium: 'd. MMM yy.',
  short: 'dd. MM. yy.'
};
var timeFormats$1d = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$1d = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$2q = {
  date: buildFormatLongFn({
    formats: dateFormats$1d,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1d,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1d,
    defaultWidth: 'full'
  })
};
var formatLong$2r = formatLong$2q;

var formatRelativeLocale$15 = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'prošle nedjelje u' p";
      case 3:
        return "'prošle srijede u' p";
      case 6:
        return "'prošle subote u' p";
      default:
        return "'prošli' EEEE 'u' p";
    }
  },
  yesterday: "'juče u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'sljedeće nedjelje u' p";
      case 3:
        return "'sljedeću srijedu u' p";
      case 6:
        return "'sljedeću subotu u' p";
      default:
        return "'sljedeći' EEEE 'u' p";
    }
  },
  other: 'P'
};
var formatRelative$2a = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$15[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$2b = formatRelative$2a;

var eraValues$15 = {
  narrow: ['pr.n.e.', 'AD'],
  abbreviated: ['pr. Hr.', 'po. Hr.'],
  wide: ['Prije Hrista', 'Poslije Hrista']
};
var quarterValues$15 = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$15 = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'juni', 'juli', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var formattingMonthValues$g = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'juni', 'juli', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var dayValues$15 = {
  narrow: ['N', 'P', 'U', 'S', 'Č', 'P', 'S'],
  short: ['ned', 'pon', 'uto', 'sre', 'čet', 'pet', 'sub'],
  abbreviated: ['ned', 'pon', 'uto', 'sre', 'čet', 'pet', 'sub'],
  wide: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota']
};
var dayPeriodValues$15 = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'poslije podne',
    evening: 'uveče',
    night: 'noću'
  }
};
var formattingDayPeriodValues$T = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'poslije podne',
    evening: 'uveče',
    night: 'noću'
  }
};
var ordinalNumber$15 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return String(number) + '.';
};
var localize$2a = {
  ordinalNumber: ordinalNumber$15,
  era: buildLocalizeFn({
    values: eraValues$15,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$15,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$15,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$g,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$15,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$15,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$T,
    defaultFormattingWidth: 'wide'
  })
};
var localize$2b = localize$2a;

var matchOrdinalNumberPattern$14 = /^(\d+)\./i;
var parseOrdinalNumberPattern$14 = /\d+/i;
var matchEraPatterns$14 = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Prije Hrista|prije nove ere|Poslije Hrista|nova era)/i
};
var parseEraPatterns$14 = {
  any: [/^pr/i, /^(po|nova)/i]
};
var matchQuarterPatterns$14 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var parseQuarterPatterns$14 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$14 = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(juni|juna)|(juli|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
var parseMonthPatterns$14 = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$14 = {
  narrow: /^[npusčc]/i,
  short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
};
var parseDayPatterns$14 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$14 = {
  any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|poslije podne|ujutru)/i
};
var parseDayPeriodPatterns$14 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(uvece|uveče)/i,
    night: /(nocu|noću)/i
  }
};
var match$28 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$14,
    parsePattern: parseOrdinalNumberPattern$14,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$14,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$14,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$14,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$14,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$14,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$14,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$14,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$14,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$14,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$14,
    defaultParseWidth: 'any'
  })
};
var match$29 = match$28;

/**
 * @type {Locale}
 * @category Locales
 * @summary Bosnian locale.
 * @language Bosnian
 * @iso-639-2 bos
 * @author Branislav Lazić [@branislavlazic]{@link https://github.com/branislavlazic}
 */
var locale$2v = {
  code: 'bs',
  formatDistance: formatDistance$2b,
  formatLong: formatLong$2r,
  formatRelative: formatRelative$2b,
  localize: localize$2b,
  match: match$29,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2w = locale$2v;

/**
 * Davant de les xifres que es diuen amb vocal inicial, 1 i 11, s'apostrofen els articles el i la i la preposició de igual que si estiguessin escrits amb lletres.
 *    l'1 de juliol ('l'u')
 *    l'11 de novembre ('l'onze')
 *    l'11a clàusula del contracte ('l'onzena')
 *    la contractació d'11 jugadors ('d'onze')
 *    l'aval d'11.000 socis ('d'onze mil')
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=apostrofaci%25F3+davant+xifres&action=Principal&method=detall_completa&numPagina=1&idHit=11236&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=11236&titol=apostrofaci%F3%20davant%20de%20xifres%20%2F%20apostrofaci%F3%20davant%20de%201%20i%2011&numeroResultat=1&clickLink=detall&tipusCerca=cerca.normes
 */

var formatDistanceLocale$13 = {
  lessThanXSeconds: {
    one: "menys d'un segon",
    eleven: "menys d'onze segons",
    other: 'menys de {{count}} segons'
  },
  xSeconds: {
    one: '1 segon',
    other: '{{count}} segons'
  },
  halfAMinute: 'mig minut',
  lessThanXMinutes: {
    one: "menys d'un minut",
    eleven: "menys d'onze minuts",
    other: 'menys de {{count}} minuts'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minuts'
  },
  aboutXHours: {
    one: 'aproximadament una hora',
    other: 'aproximadament {{count}} hores'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} hores'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dies'
  },
  aboutXWeeks: {
    one: 'aproximadament una setmana',
    other: 'aproximadament {{count}} setmanes'
  },
  xWeeks: {
    one: '1 setmana',
    other: '{{count}} setmanes'
  },
  aboutXMonths: {
    one: 'aproximadament un mes',
    other: 'aproximadament {{count}} mesos'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} mesos'
  },
  aboutXYears: {
    one: 'aproximadament un any',
    other: 'aproximadament {{count}} anys'
  },
  xYears: {
    one: '1 any',
    other: '{{count}} anys'
  },
  overXYears: {
    one: "més d'un any",
    eleven: "més d'onze anys",
    other: 'més de {{count}} anys'
  },
  almostXYears: {
    one: 'gairebé un any',
    other: 'gairebé {{count}} anys'
  }
};
var formatDistance$28 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$13[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 11 && tokenValue.eleven) {
    result = tokenValue.eleven;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'fa ' + result;
    }
  }
  return result;
};
var formatDistance$29 = formatDistance$28;

var dateFormats$1c = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$1c = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$1c = {
  full: "{{date}} 'a les' {{time}}",
  long: "{{date}} 'a les' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2o = {
  date: buildFormatLongFn({
    formats: dateFormats$1c,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1c,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1c,
    defaultWidth: 'full'
  })
};
var formatLong$2p = formatLong$2o;

var formatRelativeLocale$14 = {
  lastWeek: "'el' eeee 'passat a la' LT",
  yesterday: "'ahir a la' p",
  today: "'avui a la' p",
  tomorrow: "'demà a la' p",
  nextWeek: "eeee 'a la' p",
  other: 'P'
};
var formatRelativeLocalePlural$3 = {
  lastWeek: "'el' eeee 'passat a les' p",
  yesterday: "'ahir a les' p",
  today: "'avui a les' p",
  tomorrow: "'demà a les' p",
  nextWeek: "eeee 'a les' p",
  other: 'P'
};
var formatRelative$28 = function formatRelative(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelativeLocalePlural$3[token];
  }
  return formatRelativeLocale$14[token];
};
var formatRelative$29 = formatRelative$28;

/**
 * General information
 * Reference: https://aplicacions.llengua.gencat.cat
 * Reference: https://www.uoc.edu/portal/ca/servei-linguistic/convencions/abreviacions/simbols/simbols-habituals.html
 */
/**
 * Abans de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abans+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6876&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6876&titol=abans%20de%20Crist%20(abreviatura)%20/%20abans%20de%20Crist%20(sigla)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 * Desprest de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=despr%E9s+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6879&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6879&titol=despr%E9s%20de%20Crist%20(sigla)%20/%20despr%E9s%20de%20Crist%20(abreviatura)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 */
var eraValues$14 = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a. de C.', 'd. de C.'],
  wide: ['abans de Crist', 'després de Crist']
};
var quarterValues$14 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1r trimestre', '2n trimestre', '3r trimestre', '4t trimestre']
};

/**
 * Dins d'un text convé fer servir la forma sencera dels mesos, ja que sempre és més clar el mot sencer que l'abreviatura, encara que aquesta sigui força coneguda.
 * Cal reservar, doncs, les abreviatures per a les llistes o classificacions, els gràfics, les taules o quadres estadístics, els textos publicitaris, etc.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviacions+mesos&action=Principal&method=detall_completa&numPagina=1&idHit=8402&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8402&titol=abreviatures%20dels%20mesos%20de%20l%27any&numeroResultat=5&clickLink=detall&tipusCerca=cerca.fitxes
 */
var monthValues$14 = {
  narrow: ['GN', 'FB', 'MÇ', 'AB', 'MG', 'JN', 'JL', 'AG', 'ST', 'OC', 'NV', 'DS'],
  /**
   * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formació d'abreviatures.
   * S'escriu la primera síl·laba i les consonants de la síl·laba següent anteriors a la primera vocal.
   * Els mesos de març, maig i juny no s'abreugen perquè són paraules d'una sola síl·laba.
   */
  abbreviated: ['gen.', 'febr.', 'març', 'abr.', 'maig', 'juny', 'jul.', 'ag.', 'set.', 'oct.', 'nov.', 'des.'],
  wide: ['gener', 'febrer', 'març', 'abril', 'maig', 'juny', 'juliol', 'agost', 'setembre', 'octubre', 'novembre', 'desembre']
};

/**
 * Les abreviatures dels dies de la setmana comencen totes amb la lletra d.
 * Tot seguit porten la consonant següent a la i, excepte en el cas de dimarts, dimecres i diumenge, en què aquesta consonant és la m i, per tant, hi podria haver confusió.
 * Per evitar-ho, s'ha substituït la m per una t (en el cas de dimarts), una c (en el cas de dimecres) i una g (en el cas de diumenge), respectivament.
 *
 * Seguint la norma general d'ús de les abreviatures, les dels dies de la setmana sempre porten punt final.
 * Igualment, van amb la primera lletra en majúscula quan la paraula sencera també hi aniria.
 * En canvi, van amb la primera lletra en minúscula quan la inicial de la paraula sencera també hi aniria.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviatures+dies&action=Principal&method=detall_completa&numPagina=1&idHit=8387&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8387&titol=abreviatures%20dels%20dies%20de%20la%20setmana&numeroResultat=1&clickLink=detall&tipusCerca=cerca.tot
 */
var dayValues$14 = {
  narrow: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
  short: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
  abbreviated: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
  wide: ['diumenge', 'dilluns', 'dimarts', 'dimecres', 'dijous', 'divendres', 'dissabte']
};

/**
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?action=Principal&method=detall&input_cercar=parts+del+dia&numPagina=1&database=FITXES_PUB&idFont=12801&idHit=12801&tipusFont=Fitxes+de+l%27Optimot&numeroResultat=1&databases_avansada=&categories_avansada=&clickLink=detall&titol=Nom+de+les+parts+del+dia&tematica=&tipusCerca=cerca.fitxes
 */
var dayPeriodValues$14 = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'mitjanit',
    noon: 'migdia',
    morning: 'matí',
    afternoon: 'tarda',
    evening: 'vespre',
    night: 'nit'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'mitjanit',
    noon: 'migdia',
    morning: 'matí',
    afternoon: 'tarda',
    evening: 'vespre',
    night: 'nit'
  },
  wide: {
    am: 'ante meridiem',
    pm: 'post meridiem',
    midnight: 'mitjanit',
    noon: 'migdia',
    morning: 'matí',
    afternoon: 'tarda',
    evening: 'vespre',
    night: 'nit'
  }
};
var formattingDayPeriodValues$S = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'de la mitjanit',
    noon: 'del migdia',
    morning: 'del matí',
    afternoon: 'de la tarda',
    evening: 'del vespre',
    night: 'de la nit'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'de la mitjanit',
    noon: 'del migdia',
    morning: 'del matí',
    afternoon: 'de la tarda',
    evening: 'del vespre',
    night: 'de la nit'
  },
  wide: {
    am: 'ante meridiem',
    pm: 'post meridiem',
    midnight: 'de la mitjanit',
    noon: 'del migdia',
    morning: 'del matí',
    afternoon: 'de la tarda',
    evening: 'del vespre',
    night: 'de la nit'
  }
};

/**
 * Quan van en singular, els nombres ordinals es representen, en forma d’abreviatura, amb la xifra seguida de l’última lletra del mot desplegat.
 * És optatiu posar punt després de la lletra.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/pdf/abrevia.pdf#page=18
 */
var ordinalNumber$14 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'r';
      case 2:
        return number + 'n';
      case 3:
        return number + 'r';
      case 4:
        return number + 't';
    }
  }
  return number + 'è';
};
var localize$28 = {
  ordinalNumber: ordinalNumber$14,
  era: buildLocalizeFn({
    values: eraValues$14,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$14,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$14,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$14,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$14,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$S,
    defaultFormattingWidth: 'wide'
  })
};
var localize$29 = localize$28;

var matchOrdinalNumberPattern$13 = /^(\d+)(è|r|n|r|t)?/i;
var parseOrdinalNumberPattern$13 = /\d+/i;
var matchEraPatterns$13 = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a. de C.|d. de C.)/i,
  wide: /^(abans de Crist|despr[eé]s de Crist)/i
};
var parseEraPatterns$13 = {
  narrow: [/^aC/i, /^dC/i],
  abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],
  wide: [/^(abans de Crist)/i, /^(despr[eé]s de Crist)/i]
};
var matchQuarterPatterns$13 = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](è|r|n|r|t)? trimestre/i
};
var parseQuarterPatterns$13 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$13 = {
  narrow: /^(GN|FB|MÇ|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
  abbreviated: /^(gen.|febr.|març|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
  wide: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i
};
var parseMonthPatterns$13 = {
  narrow: [/^GN/i, /^FB/i, /^MÇ/i, /^AB/i, /^MG/i, /^JN/i, /^JL/i, /^AG/i, /^ST/i, /^OC/i, /^NV/i, /^DS/i],
  abbreviated: [/^gen./i, /^febr./i, /^març/i, /^abr./i, /^maig/i, /^juny/i, /^jul./i, /^ag./i, /^set./i, /^oct./i, /^nov./i, /^des./i],
  wide: [/^gener/i, /^febrer/i, /^març/i, /^abril/i, /^maig/i, /^juny/i, /^juliol/i, /^agost/i, /^setembre/i, /^octubre/i, /^novembre/i, /^desembre/i]
};
var matchDayPatterns$13 = {
  narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i
};
var parseDayPatterns$13 = {
  narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
  abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
  wide: [/^diumenge/i, /^dilluns/i, /^dimarts/i, /^dimecres/i, /^dijous/i, /^divendres/i, /^disssabte/i]
};
var matchDayPeriodPatterns$13 = {
  narrow: /^(a|p|mn|md|(del|de la) (matí|tarda|vespre|nit))/i,
  abbreviated: /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i,
  wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i
};
var parseDayPeriodPatterns$13 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mitjanit/i,
    noon: /^migdia/i,
    morning: /matí/i,
    afternoon: /tarda/i,
    evening: /vespre/i,
    night: /nit/i
  }
};
var match$26 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$13,
    parsePattern: parseOrdinalNumberPattern$13,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$13,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$13,
    defaultParseWidth: 'wide'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$13,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$13,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$13,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$13,
    defaultParseWidth: 'wide'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$13,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$13,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$13,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$13,
    defaultParseWidth: 'any'
  })
};
var match$27 = match$26;

/**
 * @type {Locale}
 * @category Locales
 * @summary Catalan locale.
 * @language Catalan
 * @iso-639-2 cat
 * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
 * @author Alex Vizcaino [@avizcaino]{@link https://github.com/avizcaino}
 */
var locale$2t = {
  code: 'ca',
  formatDistance: formatDistance$29,
  formatLong: formatLong$2p,
  formatRelative: formatRelative$29,
  localize: localize$29,
  match: match$27,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2u = locale$2t;

// throw new Error('ca locale is currently unavailable. Please check the progress of converting this locale to v2.0.0 in this issue on Github: TBA')

var formatDistanceLocale$12 = {
  lessThanXSeconds: {
    one: {
      regular: 'méně než sekunda',
      past: 'před méně než sekundou',
      future: 'za méně než sekundu'
    },
    few: {
      regular: 'méně než {{count}} sekundy',
      past: 'před méně než {{count}} sekundami',
      future: 'za méně než {{count}} sekundy'
    },
    many: {
      regular: 'méně než {{count}} sekund',
      past: 'před méně než {{count}} sekundami',
      future: 'za méně než {{count}} sekund'
    }
  },
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'před sekundou',
      future: 'za sekundu'
    },
    few: {
      regular: '{{count}} sekundy',
      past: 'před {{count}} sekundami',
      future: 'za {{count}} sekundy'
    },
    many: {
      regular: '{{count}} sekund',
      past: 'před {{count}} sekundami',
      future: 'za {{count}} sekund'
    }
  },
  halfAMinute: {
    type: 'other',
    other: {
      regular: 'půl minuty',
      past: 'před půl minutou',
      future: 'za půl minuty'
    }
  },
  lessThanXMinutes: {
    one: {
      regular: 'méně než minuta',
      past: 'před méně než minutou',
      future: 'za méně než minutu'
    },
    few: {
      regular: 'méně než {{count}} minuty',
      past: 'před méně než {{count}} minutami',
      future: 'za méně než {{count}} minuty'
    },
    many: {
      regular: 'méně než {{count}} minut',
      past: 'před méně než {{count}} minutami',
      future: 'za méně než {{count}} minut'
    }
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'před minutou',
      future: 'za minutu'
    },
    few: {
      regular: '{{count}} minuty',
      past: 'před {{count}} minutami',
      future: 'za {{count}} minuty'
    },
    many: {
      regular: '{{count}} minut',
      past: 'před {{count}} minutami',
      future: 'za {{count}} minut'
    }
  },
  aboutXHours: {
    one: {
      regular: 'přibližně hodina',
      past: 'přibližně před hodinou',
      future: 'přibližně za hodinu'
    },
    few: {
      regular: 'přibližně {{count}} hodiny',
      past: 'přibližně před {{count}} hodinami',
      future: 'přibližně za {{count}} hodiny'
    },
    many: {
      regular: 'přibližně {{count}} hodin',
      past: 'přibližně před {{count}} hodinami',
      future: 'přibližně za {{count}} hodin'
    }
  },
  xHours: {
    one: {
      regular: 'hodina',
      past: 'před hodinou',
      future: 'za hodinu'
    },
    few: {
      regular: '{{count}} hodiny',
      past: 'před {{count}} hodinami',
      future: 'za {{count}} hodiny'
    },
    many: {
      regular: '{{count}} hodin',
      past: 'před {{count}} hodinami',
      future: 'za {{count}} hodin'
    }
  },
  xDays: {
    one: {
      regular: 'den',
      past: 'před dnem',
      future: 'za den'
    },
    few: {
      regular: '{{count}} dny',
      past: 'před {{count}} dny',
      future: 'za {{count}} dny'
    },
    many: {
      regular: '{{count}} dní',
      past: 'před {{count}} dny',
      future: 'za {{count}} dní'
    }
  },
  aboutXWeeks: {
    one: {
      regular: 'přibližně týden',
      past: 'přibližně před týdnem',
      future: 'přibližně za týden'
    },
    few: {
      regular: 'přibližně {{count}} týdny',
      past: 'přibližně před {{count}} týdny',
      future: 'přibližně za {{count}} týdny'
    },
    many: {
      regular: 'přibližně {{count}} týdnů',
      past: 'přibližně před {{count}} týdny',
      future: 'přibližně za {{count}} týdnů'
    }
  },
  xWeeks: {
    one: {
      regular: 'týden',
      past: 'před týdnem',
      future: 'za týden'
    },
    few: {
      regular: '{{count}} týdny',
      past: 'před {{count}} týdny',
      future: 'za {{count}} týdny'
    },
    many: {
      regular: '{{count}} týdnů',
      past: 'před {{count}} týdny',
      future: 'za {{count}} týdnů'
    }
  },
  aboutXMonths: {
    one: {
      regular: 'přibližně měsíc',
      past: 'přibližně před měsícem',
      future: 'přibližně za měsíc'
    },
    few: {
      regular: 'přibližně {{count}} měsíce',
      past: 'přibližně před {{count}} měsíci',
      future: 'přibližně za {{count}} měsíce'
    },
    many: {
      regular: 'přibližně {{count}} měsíců',
      past: 'přibližně před {{count}} měsíci',
      future: 'přibližně za {{count}} měsíců'
    }
  },
  xMonths: {
    one: {
      regular: 'měsíc',
      past: 'před měsícem',
      future: 'za měsíc'
    },
    few: {
      regular: '{{count}} měsíce',
      past: 'před {{count}} měsíci',
      future: 'za {{count}} měsíce'
    },
    many: {
      regular: '{{count}} měsíců',
      past: 'před {{count}} měsíci',
      future: 'za {{count}} měsíců'
    }
  },
  aboutXYears: {
    one: {
      regular: 'přibližně rok',
      past: 'přibližně před rokem',
      future: 'přibližně za rok'
    },
    few: {
      regular: 'přibližně {{count}} roky',
      past: 'přibližně před {{count}} roky',
      future: 'přibližně za {{count}} roky'
    },
    many: {
      regular: 'přibližně {{count}} roků',
      past: 'přibližně před {{count}} roky',
      future: 'přibližně za {{count}} roků'
    }
  },
  xYears: {
    one: {
      regular: 'rok',
      past: 'před rokem',
      future: 'za rok'
    },
    few: {
      regular: '{{count}} roky',
      past: 'před {{count}} roky',
      future: 'za {{count}} roky'
    },
    many: {
      regular: '{{count}} roků',
      past: 'před {{count}} roky',
      future: 'za {{count}} roků'
    }
  },
  overXYears: {
    one: {
      regular: 'více než rok',
      past: 'před více než rokem',
      future: 'za více než rok'
    },
    few: {
      regular: 'více než {{count}} roky',
      past: 'před více než {{count}} roky',
      future: 'za více než {{count}} roky'
    },
    many: {
      regular: 'více než {{count}} roků',
      past: 'před více než {{count}} roky',
      future: 'za více než {{count}} roků'
    }
  },
  almostXYears: {
    one: {
      regular: 'skoro rok',
      past: 'skoro před rokem',
      future: 'skoro za rok'
    },
    few: {
      regular: 'skoro {{count}} roky',
      past: 'skoro před {{count}} roky',
      future: 'skoro za {{count}} roky'
    },
    many: {
      regular: 'skoro {{count}} roků',
      past: 'skoro před {{count}} roky',
      future: 'skoro za {{count}} roků'
    }
  }
};
var formatDistance$26 = function formatDistance(token, count, options) {
  var pluralResult;
  var tokenValue = formatDistanceLocale$12[token];

  // cs pluralization
  if (tokenValue.type === 'other') {
    pluralResult = tokenValue.other;
  } else if (count === 1) {
    pluralResult = tokenValue.one;
  } else if (count > 1 && count < 5) {
    pluralResult = tokenValue.few;
  } else {
    pluralResult = tokenValue.many;
  }

  // times
  var suffixExist = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
  var comparison = options === null || options === void 0 ? void 0 : options.comparison;
  var timeResult;
  if (suffixExist && comparison === -1) {
    timeResult = pluralResult.past;
  } else if (suffixExist && comparison === 1) {
    timeResult = pluralResult.future;
  } else {
    timeResult = pluralResult.regular;
  }
  return timeResult.replace('{{count}}', String(count));
};
var formatDistance$27 = formatDistance$26;

var dateFormats$1b = {
  full: 'EEEE, d. MMMM yyyy',
  long: 'd. MMMM yyyy',
  medium: 'd. M. yyyy',
  short: 'dd.MM.yyyy'
};
var timeFormats$1b = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$1b = {
  full: "{{date}} 'v' {{time}}",
  long: "{{date}} 'v' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2m = {
  date: buildFormatLongFn({
    formats: dateFormats$1b,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1b,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1b,
    defaultWidth: 'full'
  })
};
var formatLong$2n = formatLong$2m;

var accusativeWeekdays$5 = ['neděli', 'pondělí', 'úterý', 'středu', 'čtvrtek', 'pátek', 'sobotu'];
var formatRelativeLocale$13 = {
  lastWeek: "'poslední' eeee 've' p",
  yesterday: "'včera v' p",
  today: "'dnes v' p",
  tomorrow: "'zítra v' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    return "'v " + accusativeWeekdays$5[day] + " o' p";
  },
  other: 'P'
};
var formatRelative$26 = function formatRelative(token, date) {
  var format = formatRelativeLocale$13[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$27 = formatRelative$26;

var eraValues$13 = {
  narrow: ['př. n. l.', 'n. l.'],
  abbreviated: ['př. n. l.', 'n. l.'],
  wide: ['před naším letopočtem', 'našeho letopočtu']
};
var quarterValues$13 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. čtvrtletí', '2. čtvrtletí', '3. čtvrtletí', '4. čtvrtletí'],
  wide: ['1. čtvrtletí', '2. čtvrtletí', '3. čtvrtletí', '4. čtvrtletí']
};
var monthValues$13 = {
  narrow: ['L', 'Ú', 'B', 'D', 'K', 'Č', 'Č', 'S', 'Z', 'Ř', 'L', 'P'],
  abbreviated: ['led', 'úno', 'bře', 'dub', 'kvě', 'čvn', 'čvc', 'srp', 'zář', 'říj', 'lis', 'pro'],
  wide: ['leden', 'únor', 'březen', 'duben', 'květen', 'červen', 'červenec', 'srpen', 'září', 'říjen', 'listopad', 'prosinec']
};
var formattingMonthValues$f = {
  narrow: ['L', 'Ú', 'B', 'D', 'K', 'Č', 'Č', 'S', 'Z', 'Ř', 'L', 'P'],
  abbreviated: ['led', 'úno', 'bře', 'dub', 'kvě', 'čvn', 'čvc', 'srp', 'zář', 'říj', 'lis', 'pro'],
  wide: ['ledna', 'února', 'března', 'dubna', 'května', 'června', 'července', 'srpna', 'září', 'října', 'listopadu', 'prosince']
};
var dayValues$13 = {
  narrow: ['ne', 'po', 'út', 'st', 'čt', 'pá', 'so'],
  short: ['ne', 'po', 'út', 'st', 'čt', 'pá', 'so'],
  abbreviated: ['ned', 'pon', 'úte', 'stř', 'čtv', 'pát', 'sob'],
  wide: ['neděle', 'pondělí', 'úterý', 'středa', 'čtvrtek', 'pátek', 'sobota']
};
var dayPeriodValues$13 = {
  narrow: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  wide: {
    am: 'dopoledne',
    pm: 'odpoledne',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  }
};
var formattingDayPeriodValues$R = {
  narrow: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  wide: {
    am: 'dopoledne',
    pm: 'odpoledne',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  }
};
var ordinalNumber$13 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$26 = {
  ordinalNumber: ordinalNumber$13,
  era: buildLocalizeFn({
    values: eraValues$13,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$13,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$13,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$f,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$13,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$13,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$R,
    defaultFormattingWidth: 'wide'
  })
};
var localize$27 = localize$26;

var matchOrdinalNumberPattern$12 = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$12 = /\d+/i;
var matchEraPatterns$12 = {
  narrow: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(p[řr](\.|ed) Kristem|p[řr](\.|ed) na[šs][íi]m letopo[čc]tem|po Kristu|na[šs]eho letopo[čc]tu)/i
};
var parseEraPatterns$12 = {
  any: [/^p[řr]/i, /^(po|n)/i]
};
var matchQuarterPatterns$12 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\. [čc]tvrtlet[íi]/i,
  wide: /^[1234]\. [čc]tvrtlet[íi]/i
};
var parseQuarterPatterns$12 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$12 = {
  narrow: /^[lúubdkčcszřrlp]/i,
  abbreviated: /^(led|[úu]no|b[řr]e|dub|kv[ěe]|[čc]vn|[čc]vc|srp|z[áa][řr]|[řr][íi]j|lis|pro)/i,
  wide: /^(leden|ledna|[úu]nora?|b[řr]ezen|b[řr]ezna|duben|dubna|kv[ěe]ten|kv[ěe]tna|[čc]erven(ec|ce)?|[čc]ervna|srpen|srpna|z[áa][řr][íi]|[řr][íi]jen|[řr][íi]jna|listopad(a|u)?|prosinec|prosince)/i
};
var parseMonthPatterns$12 = {
  narrow: [/^l/i, /^[úu]/i, /^b/i, /^d/i, /^k/i, /^[čc]/i, /^[čc]/i, /^s/i, /^z/i, /^[řr]/i, /^l/i, /^p/i],
  any: [/^led/i, /^[úu]n/i, /^b[řr]e/i, /^dub/i, /^kv[ěe]/i, /^[čc]vn|[čc]erven(?!\w)|[čc]ervna/i, /^[čc]vc|[čc]erven(ec|ce)/i, /^srp/i, /^z[áa][řr]/i, /^[řr][íi]j/i, /^lis/i, /^pro/i]
};
var matchDayPatterns$12 = {
  narrow: /^[npuúsčps]/i,
  short: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
  abbreviated: /^(ned|pon|[úu]te|st[rř]|[čc]tv|p[áa]t|sob)/i,
  wide: /^(ned[ěe]le|pond[ěe]l[íi]|[úu]ter[ýy]|st[řr]eda|[čc]tvrtek|p[áa]tek|sobota)/i
};
var parseDayPatterns$12 = {
  narrow: [/^n/i, /^p/i, /^[úu]/i, /^s/i, /^[čc]/i, /^p/i, /^s/i],
  any: [/^ne/i, /^po/i, /^[úu]t/i, /^st/i, /^[čc]t/i, /^p[áa]/i, /^so/i]
};
var matchDayPeriodPatterns$12 = {
  any: /^dopoledne|dop\.?|odpoledne|odp\.?|p[ůu]lnoc|poledne|r[áa]no|odpoledne|ve[čc]er|(v )?noci?/i
};
var parseDayPeriodPatterns$12 = {
  any: {
    am: /^dop/i,
    pm: /^odp/i,
    midnight: /^p[ůu]lnoc/i,
    noon: /^poledne/i,
    morning: /r[áa]no/i,
    afternoon: /odpoledne/i,
    evening: /ve[čc]er/i,
    night: /noc/i
  }
};
var match$24 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$12,
    parsePattern: parseOrdinalNumberPattern$12,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$12,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$12,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$12,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$12,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$12,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$12,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$12,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$12,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$12,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$12,
    defaultParseWidth: 'any'
  })
};
var match$25 = match$24;

/**
 * @type {Locale}
 * @category Locales
 * @summary Czech locale.
 * @language Czech
 * @iso-639-2 ces
 * @author David Rus [@davidrus]{@link https://github.com/davidrus}
 * @author Pavel Hrách [@SilenY]{@link https://github.com/SilenY}
 * @author Jozef Bíroš [@JozefBiros]{@link https://github.com/JozefBiros}
 */
var locale$2r = {
  code: 'cs',
  formatDistance: formatDistance$27,
  formatLong: formatLong$2n,
  formatRelative: formatRelative$27,
  localize: localize$27,
  match: match$25,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2s = locale$2r;

var formatDistanceLocale$11 = {
  lessThanXSeconds: {
    one: 'llai na eiliad',
    other: 'llai na {{count}} eiliad'
  },
  xSeconds: {
    one: '1 eiliad',
    other: '{{count}} eiliad'
  },
  halfAMinute: 'hanner munud',
  lessThanXMinutes: {
    one: 'llai na munud',
    two: 'llai na 2 funud',
    other: 'llai na {{count}} munud'
  },
  xMinutes: {
    one: '1 munud',
    two: '2 funud',
    other: '{{count}} munud'
  },
  aboutXHours: {
    one: 'tua 1 awr',
    other: 'tua {{count}} awr'
  },
  xHours: {
    one: '1 awr',
    other: '{{count}} awr'
  },
  xDays: {
    one: '1 diwrnod',
    two: '2 ddiwrnod',
    other: '{{count}} diwrnod'
  },
  aboutXWeeks: {
    one: 'tua 1 wythnos',
    two: 'tua pythefnos',
    other: 'tua {{count}} wythnos'
  },
  xWeeks: {
    one: '1 wythnos',
    two: 'pythefnos',
    other: '{{count}} wythnos'
  },
  aboutXMonths: {
    one: 'tua 1 mis',
    two: 'tua 2 fis',
    other: 'tua {{count}} mis'
  },
  xMonths: {
    one: '1 mis',
    two: '2 fis',
    other: '{{count}} mis'
  },
  aboutXYears: {
    one: 'tua 1 flwyddyn',
    two: 'tua 2 flynedd',
    other: 'tua {{count}} mlynedd'
  },
  xYears: {
    one: '1 flwyddyn',
    two: '2 flynedd',
    other: '{{count}} mlynedd'
  },
  overXYears: {
    one: 'dros 1 flwyddyn',
    two: 'dros 2 flynedd',
    other: 'dros {{count}} mlynedd'
  },
  almostXYears: {
    one: 'bron 1 flwyddyn',
    two: 'bron 2 flynedd',
    other: 'bron {{count}} mlynedd'
  }
};
var formatDistance$24 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$11[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'mewn ' + result;
    } else {
      return result + ' yn ôl';
    }
  }
  return result;
};
var formatDistance$25 = formatDistance$24;

var dateFormats$1a = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$1a = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1a = {
  full: "{{date}} 'am' {{time}}",
  long: "{{date}} 'am' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2k = {
  date: buildFormatLongFn({
    formats: dateFormats$1a,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1a,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1a,
    defaultWidth: 'full'
  })
};
var formatLong$2l = formatLong$2k;

var formatRelativeLocale$12 = {
  lastWeek: "eeee 'diwethaf am' p",
  yesterday: "'ddoe am' p",
  today: "'heddiw am' p",
  tomorrow: "'yfory am' p",
  nextWeek: "eeee 'am' p",
  other: 'P'
};
var formatRelative$24 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$12[token];
};
var formatRelative$25 = formatRelative$24;

var eraValues$12 = {
  narrow: ['C', 'O'],
  abbreviated: ['CC', 'OC'],
  wide: ['Cyn Crist', 'Ar ôl Crist']
};
var quarterValues$12 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Ch1', 'Ch2', 'Ch3', 'Ch4'],
  wide: ['Chwarter 1af', '2ail chwarter', '3ydd chwarter', '4ydd chwarter']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$12 = {
  narrow: ['I', 'Ch', 'Ma', 'E', 'Mi', 'Me', 'G', 'A', 'Md', 'H', 'T', 'Rh'],
  abbreviated: ['Ion', 'Chwe', 'Maw', 'Ebr', 'Mai', 'Meh', 'Gor', 'Aws', 'Med', 'Hyd', 'Tach', 'Rhag'],
  wide: ['Ionawr', 'Chwefror', 'Mawrth', 'Ebrill', 'Mai', 'Mehefin', 'Gorffennaf', 'Awst', 'Medi', 'Hydref', 'Tachwedd', 'Rhagfyr']
};
var dayValues$12 = {
  narrow: ['S', 'Ll', 'M', 'M', 'I', 'G', 'S'],
  short: ['Su', 'Ll', 'Ma', 'Me', 'Ia', 'Gw', 'Sa'],
  abbreviated: ['Sul', 'Llun', 'Maw', 'Mer', 'Iau', 'Gwe', 'Sad'],
  wide: ['dydd Sul', 'dydd Llun', 'dydd Mawrth', 'dydd Mercher', 'dydd Iau', 'dydd Gwener', 'dydd Sadwrn']
};
var dayPeriodValues$12 = {
  narrow: {
    am: 'b',
    pm: 'h',
    midnight: 'hn',
    noon: 'hd',
    morning: 'bore',
    afternoon: 'prynhawn',
    evening: "gyda'r nos",
    night: 'nos'
  },
  abbreviated: {
    am: 'yb',
    pm: 'yh',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'bore',
    afternoon: 'prynhawn',
    evening: "gyda'r nos",
    night: 'nos'
  },
  wide: {
    am: 'y.b.',
    pm: 'y.h.',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'bore',
    afternoon: 'prynhawn',
    evening: "gyda'r nos",
    night: 'nos'
  }
};
var formattingDayPeriodValues$Q = {
  narrow: {
    am: 'b',
    pm: 'h',
    midnight: 'hn',
    noon: 'hd',
    morning: 'yn y bore',
    afternoon: 'yn y prynhawn',
    evening: "gyda'r nos",
    night: 'yn y nos'
  },
  abbreviated: {
    am: 'yb',
    pm: 'yh',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'yn y bore',
    afternoon: 'yn y prynhawn',
    evening: "gyda'r nos",
    night: 'yn y nos'
  },
  wide: {
    am: 'y.b.',
    pm: 'y.h.',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'yn y bore',
    afternoon: 'yn y prynhawn',
    evening: "gyda'r nos",
    night: 'yn y nos'
  }
};
var ordinalNumber$12 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  if (number < 20) {
    switch (number) {
      case 0:
        return number + 'fed';
      case 1:
        return number + 'af';
      case 2:
        return number + 'ail';
      case 3:
      case 4:
        return number + 'ydd';
      case 5:
      case 6:
        return number + 'ed';
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 15:
      case 18:
        return number + 'fed';
      case 11:
      case 13:
      case 14:
      case 16:
      case 17:
      case 19:
        return number + 'eg';
    }
  } else if (number >= 50 && number <= 60 || number === 80 || number >= 100) {
    return number + 'fed';
  }
  return number + 'ain';
};
var localize$24 = {
  ordinalNumber: ordinalNumber$12,
  era: buildLocalizeFn({
    values: eraValues$12,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$12,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$12,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$12,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$12,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$Q,
    defaultFormattingWidth: 'wide'
  })
};
var localize$25 = localize$24;

var matchOrdinalNumberPattern$11 = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
var parseOrdinalNumberPattern$11 = /\d+/i;
var matchEraPatterns$11 = {
  narrow: /^(c|o)/i,
  abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
  wide: /^(cyn christ|ar ôl crist|ar ol crist)/i
};
var parseEraPatterns$11 = {
  wide: [/^c/i, /^(ar ôl crist|ar ol crist)/i],
  any: [/^c/i, /^o/i]
};
var matchQuarterPatterns$11 = {
  narrow: /^[1234]/i,
  abbreviated: /^ch[1234]/i,
  wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
};
var parseQuarterPatterns$11 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$11 = {
  narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
  abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
  wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
};
var parseMonthPatterns$11 = {
  narrow: [/^i/i, /^ch/i, /^m/i, /^e/i, /^m/i, /^m/i, /^g/i, /^a/i, /^m/i, /^h/i, /^t/i, /^rh/i],
  any: [/^io/i, /^ch/i, /^maw/i, /^e/i, /^mai/i, /^meh/i, /^g/i, /^a/i, /^med/i, /^h/i, /^t/i, /^rh/i]
};
var matchDayPatterns$11 = {
  narrow: /^(s|ll|m|i|g)/i,
  short: /^(su|ll|ma|me|ia|gw|sa)/i,
  abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
  wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
};
var parseDayPatterns$11 = {
  narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
  wide: [/^dydd su/i, /^dydd ll/i, /^dydd ma/i, /^dydd me/i, /^dydd i/i, /^dydd g/i, /^dydd sa/i],
  any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i]
};
var matchDayPeriodPatterns$11 = {
  narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
  any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
};
var parseDayPeriodPatterns$11 = {
  any: {
    am: /^b|(y\.?\s?b\.?)/i,
    pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
    midnight: /^hn|hanner nos/i,
    noon: /^hd|hanner dydd/i,
    morning: /bore/i,
    afternoon: /prynhawn/i,
    evening: /^gyda'r nos$/i,
    night: /blah/i
  }
};
var match$22 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$11,
    parsePattern: parseOrdinalNumberPattern$11,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$11,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$11,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$11,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$11,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$11,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$11,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$11,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$11,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$11,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$11,
    defaultParseWidth: 'any'
  })
};
var match$23 = match$22;

/**
 * @type {Locale}
 * @category Locales
 * @summary Welsh locale.
 * @language Welsh
 * @iso-639-2 cym
 * @author Elwyn Malethan [@elmomalmo]{@link https://github.com/elmomalmo}
 */
var locale$2p = {
  code: 'cy',
  formatDistance: formatDistance$25,
  formatLong: formatLong$2l,
  formatRelative: formatRelative$25,
  localize: localize$25,
  match: match$23,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$2q = locale$2p;

var formatDistanceLocale$10 = {
  lessThanXSeconds: {
    one: 'mindre end ét sekund',
    other: 'mindre end {{count}} sekunder'
  },
  xSeconds: {
    one: '1 sekund',
    other: '{{count}} sekunder'
  },
  halfAMinute: 'ét halvt minut',
  lessThanXMinutes: {
    one: 'mindre end ét minut',
    other: 'mindre end {{count}} minutter'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minutter'
  },
  aboutXHours: {
    one: 'cirka 1 time',
    other: 'cirka {{count}} timer'
  },
  xHours: {
    one: '1 time',
    other: '{{count}} timer'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dage'
  },
  aboutXWeeks: {
    one: 'cirka 1 uge',
    other: 'cirka {{count}} uger'
  },
  xWeeks: {
    one: '1 uge',
    other: '{{count}} uger'
  },
  aboutXMonths: {
    one: 'cirka 1 måned',
    other: 'cirka {{count}} måneder'
  },
  xMonths: {
    one: '1 måned',
    other: '{{count}} måneder'
  },
  aboutXYears: {
    one: 'cirka 1 år',
    other: 'cirka {{count}} år'
  },
  xYears: {
    one: '1 år',
    other: '{{count}} år'
  },
  overXYears: {
    one: 'over 1 år',
    other: 'over {{count}} år'
  },
  almostXYears: {
    one: 'næsten 1 år',
    other: 'næsten {{count}} år'
  }
};
var formatDistance$22 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$10[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' siden';
    }
  }
  return result;
};
var formatDistance$23 = formatDistance$22;

var dateFormats$19 = {
  full: "EEEE 'den' d. MMMM y",
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd/MM/y'
};
var timeFormats$19 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$19 = {
  full: "{{date}} 'kl'. {{time}}",
  long: "{{date}} 'kl'. {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$2i = {
  date: buildFormatLongFn({
    formats: dateFormats$19,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$19,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$19,
    defaultWidth: 'full'
  })
};
var formatLong$2j = formatLong$2i;

var formatRelativeLocale$11 = {
  lastWeek: "'sidste' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "'på' eeee 'kl.' p",
  other: 'P'
};
var formatRelative$22 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$11[token];
};
var formatRelative$23 = formatRelative$22;

var eraValues$11 = {
  narrow: ['fvt', 'vt'],
  abbreviated: ['f.v.t.', 'v.t.'],
  wide: ['før vesterlandsk tidsregning', 'vesterlandsk tidsregning']
};
var quarterValues$11 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. kvt.', '2. kvt.', '3. kvt.', '4. kvt.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$11 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januar', 'februar', 'marts', 'april', 'maj', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'december']
};

// Note that 'Days - abbreviated - Formatting' has periods at the end.
// https://www.unicode.org/cldr/charts/32/summary/da.html#1760
// This makes grammatical sense in danish, as most abbreviations have periods.
var dayValues$11 = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['sø', 'ma', 'ti', 'on', 'to', 'fr', 'lø'],
  abbreviated: ['søn.', 'man.', 'tir.', 'ons.', 'tor.', 'fre.', 'lør.'],
  wide: ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag']
};
var dayPeriodValues$11 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  }
};
var formattingDayPeriodValues$P = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  }
};
var ordinalNumber$11 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$22 = {
  ordinalNumber: ordinalNumber$11,
  era: buildLocalizeFn({
    values: eraValues$11,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$11,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$11,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$11,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$11,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$P,
    defaultFormattingWidth: 'wide'
  })
};
var localize$23 = localize$22;

var matchOrdinalNumberPattern$10 = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$10 = /\d+/i;
var matchEraPatterns$10 = {
  narrow: /^(fKr|fvt|eKr|vt)/i,
  abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
  wide: /^(f.Kr.|før vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
};
var parseEraPatterns$10 = {
  any: [/^f/i, /^(v|e)/i]
};
var matchQuarterPatterns$10 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]. kvt\./i,
  wide: /^[1234]\.? kvartal/i
};
var parseQuarterPatterns$10 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$10 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
};
var parseMonthPatterns$10 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$10 = {
  narrow: /^[smtofl]/i,
  short: /^(søn.|man.|tir.|ons.|tor.|fre.|lør.)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var parseDayPatterns$10 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns$10 = {
  narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
  any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
};
var parseDayPeriodPatterns$10 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /midnat/i,
    noon: /middag/i,
    morning: /morgen/i,
    afternoon: /eftermiddag/i,
    evening: /aften/i,
    night: /nat/i
  }
};
var match$20 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$10,
    parsePattern: parseOrdinalNumberPattern$10,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$10,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$10,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$10,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$10,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$10,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$10,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$10,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$10,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$10,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$10,
    defaultParseWidth: 'any'
  })
};
var match$21 = match$20;

/**
 * @type {Locale}
 * @category Locales
 * @summary Danish locale.
 * @language Danish
 * @iso-639-2 dan
 * @author Mathias Wøbbe [@MathiasKandelborg]{@link https://github.com/MathiasKandelborg}
 * @author Anders B. Hansen [@Andersbiha]{@link https://github.com/Andersbiha}
 * @author [@kgram]{@link https://github.com/kgram}
 * @author [@stefanbugge]{@link https://github.com/stefanbugge}
 */
var locale$2n = {
  code: 'da',
  formatDistance: formatDistance$23,
  formatLong: formatLong$2j,
  formatRelative: formatRelative$23,
  localize: localize$23,
  match: match$21,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2o = locale$2n;

var formatDistanceLocale$$ = {
  lessThanXSeconds: {
    standalone: {
      one: 'weniger als 1 Sekunde',
      other: 'weniger als {{count}} Sekunden'
    },
    withPreposition: {
      one: 'weniger als 1 Sekunde',
      other: 'weniger als {{count}} Sekunden'
    }
  },
  xSeconds: {
    standalone: {
      one: '1 Sekunde',
      other: '{{count}} Sekunden'
    },
    withPreposition: {
      one: '1 Sekunde',
      other: '{{count}} Sekunden'
    }
  },
  halfAMinute: {
    standalone: 'halbe Minute',
    withPreposition: 'halben Minute'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'weniger als 1 Minute',
      other: 'weniger als {{count}} Minuten'
    },
    withPreposition: {
      one: 'weniger als 1 Minute',
      other: 'weniger als {{count}} Minuten'
    }
  },
  xMinutes: {
    standalone: {
      one: '1 Minute',
      other: '{{count}} Minuten'
    },
    withPreposition: {
      one: '1 Minute',
      other: '{{count}} Minuten'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'etwa 1 Stunde',
      other: 'etwa {{count}} Stunden'
    },
    withPreposition: {
      one: 'etwa 1 Stunde',
      other: 'etwa {{count}} Stunden'
    }
  },
  xHours: {
    standalone: {
      one: '1 Stunde',
      other: '{{count}} Stunden'
    },
    withPreposition: {
      one: '1 Stunde',
      other: '{{count}} Stunden'
    }
  },
  xDays: {
    standalone: {
      one: '1 Tag',
      other: '{{count}} Tage'
    },
    withPreposition: {
      one: '1 Tag',
      other: '{{count}} Tagen'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'etwa 1 Woche',
      other: 'etwa {{count}} Wochen'
    },
    withPreposition: {
      one: 'etwa 1 Woche',
      other: 'etwa {{count}} Wochen'
    }
  },
  xWeeks: {
    standalone: {
      one: '1 Woche',
      other: '{{count}} Wochen'
    },
    withPreposition: {
      one: '1 Woche',
      other: '{{count}} Wochen'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'etwa 1 Monat',
      other: 'etwa {{count}} Monate'
    },
    withPreposition: {
      one: 'etwa 1 Monat',
      other: 'etwa {{count}} Monaten'
    }
  },
  xMonths: {
    standalone: {
      one: '1 Monat',
      other: '{{count}} Monate'
    },
    withPreposition: {
      one: '1 Monat',
      other: '{{count}} Monaten'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'etwa 1 Jahr',
      other: 'etwa {{count}} Jahre'
    },
    withPreposition: {
      one: 'etwa 1 Jahr',
      other: 'etwa {{count}} Jahren'
    }
  },
  xYears: {
    standalone: {
      one: '1 Jahr',
      other: '{{count}} Jahre'
    },
    withPreposition: {
      one: '1 Jahr',
      other: '{{count}} Jahren'
    }
  },
  overXYears: {
    standalone: {
      one: 'mehr als 1 Jahr',
      other: 'mehr als {{count}} Jahre'
    },
    withPreposition: {
      one: 'mehr als 1 Jahr',
      other: 'mehr als {{count}} Jahren'
    }
  },
  almostXYears: {
    standalone: {
      one: 'fast 1 Jahr',
      other: 'fast {{count}} Jahre'
    },
    withPreposition: {
      one: 'fast 1 Jahr',
      other: 'fast {{count}} Jahren'
    }
  }
};
var formatDistance$20 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = options !== null && options !== void 0 && options.addSuffix ? formatDistanceLocale$$[token].withPreposition : formatDistanceLocale$$[token].standalone;
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return 'vor ' + result;
    }
  }
  return result;
};
var formatDistance$21 = formatDistance$20;

// DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
var dateFormats$18 = {
  full: 'EEEE, do MMMM y',
  // Montag, 7. Januar 2018
  long: 'do MMMM y',
  // 7. Januar 2018
  medium: 'do MMM y',
  // 7. Jan. 2018
  short: 'dd.MM.y' // 07.01.2018
};

var timeFormats$18 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$18 = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$2g = {
  date: buildFormatLongFn({
    formats: dateFormats$18,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$18,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$18,
    defaultWidth: 'full'
  })
};
var formatLong$2h = formatLong$2g;

var formatRelativeLocale$10 = {
  lastWeek: "'letzten' eeee 'um' p",
  yesterday: "'gestern um' p",
  today: "'heute um' p",
  tomorrow: "'morgen um' p",
  nextWeek: "eeee 'um' p",
  other: 'P'
};
var formatRelative$20 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$10[token];
};
var formatRelative$21 = formatRelative$20;

var eraValues$10 = {
  narrow: ['v.Chr.', 'n.Chr.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['vor Christus', 'nach Christus']
};
var quarterValues$10 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
};

// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$10 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  wide: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};

// https://st.unicode.org/cldr-apps/v#/de/Gregorian/
var formattingMonthValues$e = {
  narrow: monthValues$10.narrow,
  abbreviated: ['Jan.', 'Feb.', 'März', 'Apr.', 'Mai', 'Juni', 'Juli', 'Aug.', 'Sep.', 'Okt.', 'Nov.', 'Dez.'],
  wide: monthValues$10.wide
};
var dayValues$10 = {
  narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  short: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
  abbreviated: ['So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.'],
  wide: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag']
};

// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
var dayPeriodValues$10 = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachm.',
    evening: 'Abend',
    night: 'Nacht'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  }
};
var formattingDayPeriodValues$O = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachm.',
    evening: 'abends',
    night: 'nachts'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  }
};
var ordinalNumber$10 = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$20 = {
  ordinalNumber: ordinalNumber$10,
  era: buildLocalizeFn({
    values: eraValues$10,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$10,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$10,
    formattingValues: formattingMonthValues$e,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$10,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$10,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$O,
    defaultFormattingWidth: 'wide'
  })
};
var localize$21 = localize$20;

var matchOrdinalNumberPattern$$ = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$$ = /\d+/i;
var matchEraPatterns$$ = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
};
var parseEraPatterns$$ = {
  any: [/^v/i, /^n/i]
};
var matchQuarterPatterns$$ = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i
};
var parseQuarterPatterns$$ = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$$ = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(j[aä]n|feb|mär[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
  wide: /^(januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
};
var parseMonthPatterns$$ = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^j[aä]/i, /^f/i, /^mär/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$$ = {
  narrow: /^[smdmf]/i,
  short: /^(so|mo|di|mi|do|fr|sa)/i,
  abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
  wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
};
var parseDayPatterns$$ = {
  any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$$ = {
  narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
};
var parseDayPeriodPatterns$$ = {
  any: {
    am: /^v/i,
    pm: /^n/i,
    midnight: /^Mitte/i,
    noon: /^Mitta/i,
    morning: /morgens/i,
    afternoon: /nachmittags/i,
    // will never be matched. Afternoon is matched by `pm`
    evening: /abends/i,
    night: /nachts/i // will never be matched. Night is matched by `pm`
  }
};

var match$1_ = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$$,
    parsePattern: parseOrdinalNumberPattern$$,
    valueCallback: function valueCallback(value) {
      return parseInt(value);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$$,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$$,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$$,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$$,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$$,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$$,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$$,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$$,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$$,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$$,
    defaultParseWidth: 'any'
  })
};
var match$1$ = match$1_;

/**
 * @type {Locale}
 * @category Locales
 * @summary German locale.
 * @language German
 * @iso-639-2 deu
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Asia [@asia-t]{@link https://github.com/asia-t}
 * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
 * @author RomanErnst [@pex]{@link https://github.com/pex}
 * @author Philipp Keck [@Philipp91]{@link https://github.com/Philipp91}
 */
var locale$2l = {
  code: 'de',
  formatDistance: formatDistance$21,
  formatLong: formatLong$2h,
  formatRelative: formatRelative$21,
  localize: localize$21,
  match: match$1$,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2m = locale$2l;

var eraValues$$ = {
  narrow: ['v.Chr.', 'n.Chr.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['vor Christus', 'nach Christus']
};
var quarterValues$$ = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
};

// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$$ = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jän', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  wide: ['Jänner', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};

// https://st.unicode.org/cldr-apps/v#/de_AT/Gregorian/
var formattingMonthValues$d = {
  narrow: monthValues$$.narrow,
  abbreviated: ['Jän.', 'Feb.', 'März', 'Apr.', 'Mai', 'Juni', 'Juli', 'Aug.', 'Sep.', 'Okt.', 'Nov.', 'Dez.'],
  wide: monthValues$$.wide
};
var dayValues$$ = {
  narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  short: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
  abbreviated: ['So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.'],
  wide: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag']
};

// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
var dayPeriodValues$$ = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachm.',
    evening: 'Abend',
    night: 'Nacht'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  }
};
var formattingDayPeriodValues$N = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachm.',
    evening: 'abends',
    night: 'nachts'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  }
};
var ordinalNumber$$ = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$1_ = {
  ordinalNumber: ordinalNumber$$,
  era: buildLocalizeFn({
    values: eraValues$$,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$$,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$$,
    formattingValues: formattingMonthValues$d,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$$,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$$,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$N,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1$ = localize$1_;

/**
 * @type {Locale}
 * @category Locales
 * @summary German locale (Austria).
 * @language German
 * @iso-639-2 deu
 * @author Christoph Tobias Stenglein [@cstenglein]{@link https://github.com/cstenglein}
 */
var locale$2j = {
  code: 'de-AT',
  formatDistance: formatDistance$21,
  formatLong: formatLong$2h,
  formatRelative: formatRelative$21,
  localize: localize$1$,
  match: match$1$,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2k = locale$2j;

var formatDistanceLocale$_ = {
  lessThanXSeconds: {
    one: 'λιγότερο από ένα δευτερόλεπτο',
    other: 'λιγότερο από {{count}} δευτερόλεπτα'
  },
  xSeconds: {
    one: '1 δευτερόλεπτο',
    other: '{{count}} δευτερόλεπτα'
  },
  halfAMinute: 'μισό λεπτό',
  lessThanXMinutes: {
    one: 'λιγότερο από ένα λεπτό',
    other: 'λιγότερο από {{count}} λεπτά'
  },
  xMinutes: {
    one: '1 λεπτό',
    other: '{{count}} λεπτά'
  },
  aboutXHours: {
    one: 'περίπου 1 ώρα',
    other: 'περίπου {{count}} ώρες'
  },
  xHours: {
    one: '1 ώρα',
    other: '{{count}} ώρες'
  },
  xDays: {
    one: '1 ημέρα',
    other: '{{count}} ημέρες'
  },
  aboutXWeeks: {
    one: 'περίπου 1 εβδομάδα',
    other: 'περίπου {{count}} εβδομάδες'
  },
  xWeeks: {
    one: '1 εβδομάδα',
    other: '{{count}} εβδομάδες'
  },
  aboutXMonths: {
    one: 'περίπου 1 μήνας',
    other: 'περίπου {{count}} μήνες'
  },
  xMonths: {
    one: '1 μήνας',
    other: '{{count}} μήνες'
  },
  aboutXYears: {
    one: 'περίπου 1 χρόνο',
    other: 'περίπου {{count}} χρόνια'
  },
  xYears: {
    one: '1 χρόνο',
    other: '{{count}} χρόνια'
  },
  overXYears: {
    one: 'πάνω από 1 χρόνο',
    other: 'πάνω από {{count}} χρόνια'
  },
  almostXYears: {
    one: 'περίπου 1 χρόνο',
    other: 'περίπου {{count}} χρόνια'
  }
};
var formatDistance$1_ = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$_[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'σε ' + result;
    } else {
      return result + ' πριν';
    }
  }
  return result;
};
var formatDistance$1$ = formatDistance$1_;

var dateFormats$17 = {
  full: 'EEEE, d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'd/M/yy'
};
var timeFormats$17 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$17 = {
  full: '{{date}} - {{time}}',
  long: '{{date}} - {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2e = {
  date: buildFormatLongFn({
    formats: dateFormats$17,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$17,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$17,
    defaultWidth: 'full'
  })
};
var formatLong$2f = formatLong$2e;

var formatRelativeLocale$$ = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 6:
        //Σάββατο
        return "'το προηγούμενο' eeee 'στις' p";
      default:
        return "'την προηγούμενη' eeee 'στις' p";
    }
  },
  yesterday: "'χθες στις' p",
  today: "'σήμερα στις' p",
  tomorrow: "'αύριο στις' p",
  nextWeek: "eeee 'στις' p",
  other: 'P'
};
var formatRelative$1_ = function formatRelative(token, date) {
  var format = formatRelativeLocale$$[token];
  if (typeof format === 'function') return format(date);
  return format;
};
var formatRelative$1$ = formatRelative$1_;

var eraValues$_ = {
  narrow: ['πΧ', 'μΧ'],
  abbreviated: ['π.Χ.', 'μ.Χ.'],
  wide: ['προ Χριστού', 'μετά Χριστόν']
};
var quarterValues$_ = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Τ1', 'Τ2', 'Τ3', 'Τ4'],
  wide: ['1ο τρίμηνο', '2ο τρίμηνο', '3ο τρίμηνο', '4ο τρίμηνο']
};
var monthValues$_ = {
  narrow: ['Ι', 'Φ', 'Μ', 'Α', 'Μ', 'Ι', 'Ι', 'Α', 'Σ', 'Ο', 'Ν', 'Δ'],
  abbreviated: ['Ιαν', 'Φεβ', 'Μάρ', 'Απρ', 'Μάι', 'Ιούν', 'Ιούλ', 'Αύγ', 'Σεπ', 'Οκτ', 'Νοέ', 'Δεκ'],
  wide: ['Ιανουάριος', 'Φεβρουάριος', 'Μάρτιος', 'Απρίλιος', 'Μάιος', 'Ιούνιος', 'Ιούλιος', 'Αύγουστος', 'Σεπτέμβριος', 'Οκτώβριος', 'Νοέμβριος', 'Δεκέμβριος']
};
var formattingMonthValues$c = {
  narrow: ['Ι', 'Φ', 'Μ', 'Α', 'Μ', 'Ι', 'Ι', 'Α', 'Σ', 'Ο', 'Ν', 'Δ'],
  abbreviated: ['Ιαν', 'Φεβ', 'Μαρ', 'Απρ', 'Μαΐ', 'Ιουν', 'Ιουλ', 'Αυγ', 'Σεπ', 'Οκτ', 'Νοε', 'Δεκ'],
  wide: ['Ιανουαρίου', 'Φεβρουαρίου', 'Μαρτίου', 'Απριλίου', 'Μαΐου', 'Ιουνίου', 'Ιουλίου', 'Αυγούστου', 'Σεπτεμβρίου', 'Οκτωβρίου', 'Νοεμβρίου', 'Δεκεμβρίου']
};
var dayValues$_ = {
  narrow: ['Κ', 'Δ', 'T', 'Τ', 'Π', 'Π', 'Σ'],
  short: ['Κυ', 'Δε', 'Τρ', 'Τε', 'Πέ', 'Πα', 'Σά'],
  abbreviated: ['Κυρ', 'Δευ', 'Τρί', 'Τετ', 'Πέμ', 'Παρ', 'Σάβ'],
  wide: ['Κυριακή', 'Δευτέρα', 'Τρίτη', 'Τετάρτη', 'Πέμπτη', 'Παρασκευή', 'Σάββατο']
};
var dayPeriodValues$_ = {
  narrow: {
    am: 'πμ',
    pm: 'μμ',
    midnight: 'μεσάνυχτα',
    noon: 'μεσημέρι',
    morning: 'πρωί',
    afternoon: 'απόγευμα',
    evening: 'βράδυ',
    night: 'νύχτα'
  },
  abbreviated: {
    am: 'π.μ.',
    pm: 'μ.μ.',
    midnight: 'μεσάνυχτα',
    noon: 'μεσημέρι',
    morning: 'πρωί',
    afternoon: 'απόγευμα',
    evening: 'βράδυ',
    night: 'νύχτα'
  },
  wide: {
    am: 'π.μ.',
    pm: 'μ.μ.',
    midnight: 'μεσάνυχτα',
    noon: 'μεσημέρι',
    morning: 'πρωί',
    afternoon: 'απόγευμα',
    evening: 'βράδυ',
    night: 'νύχτα'
  }
};
var ordinalNumber$_ = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var suffix;
  if (unit === 'year' || unit === 'month') {
    suffix = 'ος';
  } else if (unit === 'week' || unit === 'dayOfYear' || unit === 'day' || unit === 'hour' || unit === 'date') {
    suffix = 'η';
  } else {
    suffix = 'ο';
  }
  return number + suffix;
};
var localize$1Y = {
  ordinalNumber: ordinalNumber$_,
  era: buildLocalizeFn({
    values: eraValues$_,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$_,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$_,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$c,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$_,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$_,
    defaultWidth: 'wide'
  })
};
var localize$1Z = localize$1Y;

var matchOrdinalNumberPattern$_ = /^(\d+)(ος|η|ο)?/i;
var parseOrdinalNumberPattern$_ = /\d+/i;
var matchEraPatterns$_ = {
  narrow: /^(πΧ|μΧ)/i,
  abbreviated: /^(π\.?\s?χ\.?|π\.?\s?κ\.?\s?χ\.?|μ\.?\s?χ\.?|κ\.?\s?χ\.?)/i,
  wide: /^(προ Χριστο(ύ|υ)|πριν απ(ό|ο) την Κοιν(ή|η) Χρονολογ(ί|ι)α|μετ(ά|α) Χριστ(ό|ο)ν|Κοιν(ή|η) Χρονολογ(ί|ι)α)/i
};
var parseEraPatterns$_ = {
  any: [/^π/i, /^(μ|κ)/i]
};
var matchQuarterPatterns$_ = {
  narrow: /^[1234]/i,
  abbreviated: /^τ[1234]/i,
  wide: /^[1234]ο? τρ(ί|ι)μηνο/i
};
var parseQuarterPatterns$_ = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$_ = {
  narrow: /^[ιφμαμιιασονδ]/i,
  abbreviated: /^(ιαν|φεβ|μ[άα]ρ|απρ|μ[άα][ιΐ]|ιο[ύυ]ν|ιο[ύυ]λ|α[ύυ]γ|σεπ|οκτ|νο[έε]|δεκ)/i,
  wide: /^(μ[άα][ιΐ]|α[ύυ]γο[υύ]στ)(ος|ου)|(ιανου[άα]ρ|φεβρου[άα]ρ|μ[άα]ρτ|απρ[ίι]λ|ιο[ύυ]ν|ιο[ύυ]λ|σεπτ[έε]μβρ|οκτ[ώω]βρ|νο[έε]μβρ|δεκ[έε]μβρ)(ιος|ίου)/i
};
var parseMonthPatterns$_ = {
  narrow: [/^ι/i, /^φ/i, /^μ/i, /^α/i, /^μ/i, /^ι/i, /^ι/i, /^α/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i],
  any: [/^ια/i, /^φ/i, /^μ[άα]ρ/i, /^απ/i, /^μ[άα][ιΐ]/i, /^ιο[ύυ]ν/i, /^ιο[ύυ]λ/i, /^α[ύυ]/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i]
};
var matchDayPatterns$_ = {
  narrow: /^[κδτπσ]/i,
  short: /^(κυ|δε|τρ|τε|π[εέ]|π[αά]|σ[αά])/i,
  abbreviated: /^(κυρ|δευ|τρι|τετ|πεμ|παρ|σαβ)/i,
  wide: /^(κυριακ(ή|η)|δευτ(έ|ε)ρα|τρ(ί|ι)τη|τετ(ά|α)ρτη|π(έ|ε)μπτη|παρασκευ(ή|η)|σ(ά|α)ββατο)/i
};
var parseDayPatterns$_ = {
  narrow: [/^κ/i, /^δ/i, /^τ/i, /^τ/i, /^π/i, /^π/i, /^σ/i],
  any: [/^κ/i, /^δ/i, /^τρ/i, /^τε/i, /^π[εέ]/i, /^π[αά]/i, /^σ/i]
};
var matchDayPeriodPatterns$_ = {
  narrow: /^(πμ|μμ|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i,
  any: /^([πμ]\.?\s?μ\.?|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i
};
var parseDayPeriodPatterns$_ = {
  any: {
    am: /^πμ|π\.\s?μ\./i,
    pm: /^μμ|μ\.\s?μ\./i,
    midnight: /^μεσάν/i,
    noon: /^μεσημ(έ|ε)/i,
    morning: /πρω(ί|ι)/i,
    afternoon: /απ(ό|ο)γευμα/i,
    evening: /βρ(ά|α)δυ/i,
    night: /ν(ύ|υ)χτα/i
  }
};
var match$1Y = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$_,
    parsePattern: parseOrdinalNumberPattern$_,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$_,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$_,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$_,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$_,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$_,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$_,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$_,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$_,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$_,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$_,
    defaultParseWidth: 'any'
  })
};
var match$1Z = match$1Y;

/**
 * @type {Locale}
 * @category Locales
 * @summary Greek locale.
 * @language Greek
 * @iso-639-2 ell
 * @author Fanis Katsimpas [@fanixk]{@link https://github.com/fanixk}
 * @author Theodoros Orfanidis [@teoulas]{@link https://github.com/teoulas}
 */
var locale$2h = {
  code: 'el',
  formatDistance: formatDistance$1$,
  formatLong: formatLong$2f,
  formatRelative: formatRelative$1$,
  localize: localize$1Z,
  match: match$1Z,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2i = locale$2h;

var dateFormats$16 = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$16 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$16 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2c = {
  date: buildFormatLongFn({
    formats: dateFormats$16,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$16,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$16,
    defaultWidth: 'full'
  })
};
var formatLong$2d = formatLong$2c;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (Australia).
 * @language English
 * @iso-639-2 eng
 * @author Julien Malige [@JulienMalige]{@link https://github.com/JulienMalige}
 */
var locale$2f = {
  code: 'en-AU',
  formatDistance: formatDistance$2j,
  formatLong: formatLong$2d,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2g = locale$2f;

var formatDistanceLocale$Z = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: 'a second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: 'a minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about an hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: 'an hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: 'a day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about a week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: 'a week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about a month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: 'a month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about a year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: 'a year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over a year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost a year',
    other: 'almost {{count}} years'
  }
};
var formatDistance$1Y = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$Z[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }
  return result;
};
var formatDistance$1Z = formatDistance$1Y;

var dateFormats$15 = {
  full: 'EEEE, MMMM do, yyyy',
  long: 'MMMM do, yyyy',
  medium: 'MMM d, yyyy',
  short: 'yyyy-MM-dd'
};
var timeFormats$15 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$15 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2a = {
  date: buildFormatLongFn({
    formats: dateFormats$15,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$15,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$15,
    defaultWidth: 'full'
  })
};
var formatLong$2b = formatLong$2a;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (Canada).
 * @language English
 * @iso-639-2 eng
 * @author Mark Owsiak [@markowsiak]{@link https://github.com/markowsiak}
 * @author Marco Imperatore [@mimperatore]{@link https://github.com/mimperatore}
 */
var locale$2d = {
  code: 'en-CA',
  formatDistance: formatDistance$1Z,
  formatLong: formatLong$2b,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$2e = locale$2d;

var dateFormats$14 = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$14 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$14 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$28 = {
  date: buildFormatLongFn({
    formats: dateFormats$14,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$14,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$14,
    defaultWidth: 'full'
  })
};
var formatLong$29 = formatLong$28;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United Kingdom).
 * @language English
 * @iso-639-2 eng
 * @author Alex [@glintik]{@link https://github.com/glintik}
 */
var locale$2b = {
  code: 'en-GB',
  formatDistance: formatDistance$2j,
  formatLong: formatLong$29,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2c = locale$2b;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (Ireland).
 * @language English
 * @iso-639-2 eng
 * @author Tetiana [@tan75]{@link https://github.com/tan75}
 */
var locale$29 = {
  code: 'en-IE',
  formatDistance: formatDistance$2j,
  formatLong: formatLong$29,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2a = locale$29;

var dateFormats$13 = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM, yyyy',
  medium: 'd MMM, yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$13 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$13 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$26 = {
  date: buildFormatLongFn({
    formats: dateFormats$13,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$13,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$13,
    defaultWidth: 'full'
  })
};
var formatLong$27 = formatLong$26;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (India).
 * @language English
 * @iso-639-2 eng
 * @author Galeel Bhasha Satthar [@gbhasha]{@link https://github.com/gbhasha}
 */
var locale$27 = {
  code: 'en-IN',
  formatDistance: formatDistance$2j,
  formatLong: formatLong$27,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 1,
    // Monday is the first day of the week.
    firstWeekContainsDate: 4 // The week that contains Jan 4th is the first week of the year.
  }
};

var locale$28 = locale$27;

var dateFormats$12 = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$12 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$12 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$24 = {
  date: buildFormatLongFn({
    formats: dateFormats$12,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$12,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$12,
    defaultWidth: 'full'
  })
};
var formatLong$25 = formatLong$24;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (New Zealand).
 * @language English
 * @iso-639-2 eng
 * @author Murray Lucas [@muntact]{@link https://github.com/muntact}
 */
var locale$25 = {
  code: 'en-NZ',
  formatDistance: formatDistance$2j,
  formatLong: formatLong$25,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$26 = locale$25;

var dateFormats$11 = {
  full: 'EEEE, dd MMMM yyyy',
  long: 'dd MMMM yyyy',
  medium: 'dd MMM yyyy',
  short: 'yyyy/MM/dd'
};
var timeFormats$11 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$11 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$22 = {
  date: buildFormatLongFn({
    formats: dateFormats$11,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$11,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$11,
    defaultWidth: 'full'
  })
};
var formatLong$23 = formatLong$22;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (South Africa).
 * @language English
 * @iso-639-2 eng
 * @author Shaila Kavrakova [@shaykav]{@link https://github.com/shaykav}
 */
var locale$23 = {
  code: 'en-ZA',
  formatDistance: formatDistance$2j,
  formatLong: formatLong$23,
  formatRelative: formatRelative$2l,
  localize: localize$2l,
  match: match$2j,
  options: {
    weekStartsOn: 0,
    // Sunday is the first day of the week.
    firstWeekContainsDate: 1 // The week that contains Jan 1st is the first week of the year.
  }
};

var locale$24 = locale$23;

var formatDistanceLocale$Y = {
  lessThanXSeconds: {
    one: 'malpli ol sekundo',
    other: 'malpli ol {{count}} sekundoj'
  },
  xSeconds: {
    one: '1 sekundo',
    other: '{{count}} sekundoj'
  },
  halfAMinute: 'duonminuto',
  lessThanXMinutes: {
    one: 'malpli ol minuto',
    other: 'malpli ol {{count}} minutoj'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutoj'
  },
  aboutXHours: {
    one: 'proksimume 1 horo',
    other: 'proksimume {{count}} horoj'
  },
  xHours: {
    one: '1 horo',
    other: '{{count}} horoj'
  },
  xDays: {
    one: '1 tago',
    other: '{{count}} tagoj'
  },
  aboutXMonths: {
    one: 'proksimume 1 monato',
    other: 'proksimume {{count}} monatoj'
  },
  xWeeks: {
    one: '1 semajno',
    other: '{{count}} semajnoj'
  },
  aboutXWeeks: {
    one: 'proksimume 1 semajno',
    other: 'proksimume {{count}} semajnoj'
  },
  xMonths: {
    one: '1 monato',
    other: '{{count}} monatoj'
  },
  aboutXYears: {
    one: 'proksimume 1 jaro',
    other: 'proksimume {{count}} jaroj'
  },
  xYears: {
    one: '1 jaro',
    other: '{{count}} jaroj'
  },
  overXYears: {
    one: 'pli ol 1 jaro',
    other: 'pli ol {{count}} jaroj'
  },
  almostXYears: {
    one: 'preskaŭ 1 jaro',
    other: 'preskaŭ {{count}} jaroj'
  }
};
var formatDistance$1W = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$Y[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options !== null && options !== void 0 && options.comparison && options.comparison > 0) {
      return 'post ' + result;
    } else {
      return 'antaŭ ' + result;
    }
  }
  return result;
};
var formatDistance$1X = formatDistance$1W;

var dateFormats$10 = {
  full: "EEEE, do 'de' MMMM y",
  long: 'y-MMMM-dd',
  medium: 'y-MMM-dd',
  short: 'yyyy-MM-dd'
};
var timeFormats$10 = {
  full: "Ho 'horo kaj' m:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$10 = {
  any: '{{date}} {{time}}'
};
var formatLong$20 = {
  date: buildFormatLongFn({
    formats: dateFormats$10,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$10,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$10,
    defaultWidth: 'any'
  })
};
var formatLong$21 = formatLong$20;

var formatRelativeLocale$_ = {
  lastWeek: "'pasinta' eeee 'je' p",
  yesterday: "'hieraŭ je' p",
  today: "'hodiaŭ je' p",
  tomorrow: "'morgaŭ je' p",
  nextWeek: "eeee 'je' p",
  other: 'P'
};
var formatRelative$1Y = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$_[token];
};
var formatRelative$1Z = formatRelative$1Y;

var eraValues$Z = {
  narrow: ['aK', 'pK'],
  abbreviated: ['a.K.E.', 'p.K.E.'],
  wide: ['antaŭ Komuna Erao', 'Komuna Erao']
};
var quarterValues$Z = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1-a kvaronjaro', '2-a kvaronjaro', '3-a kvaronjaro', '4-a kvaronjaro']
};
var monthValues$Z = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'aŭg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januaro', 'februaro', 'marto', 'aprilo', 'majo', 'junio', 'julio', 'aŭgusto', 'septembro', 'oktobro', 'novembro', 'decembro']
};
var dayValues$Z = {
  narrow: ['D', 'L', 'M', 'M', 'Ĵ', 'V', 'S'],
  short: ['di', 'lu', 'ma', 'me', 'ĵa', 've', 'sa'],
  abbreviated: ['dim', 'lun', 'mar', 'mer', 'ĵaŭ', 'ven', 'sab'],
  wide: ['dimanĉo', 'lundo', 'mardo', 'merkredo', 'ĵaŭdo', 'vendredo', 'sabato']
};
var dayPeriodValues$Z = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'noktomezo',
    noon: 'tagmezo',
    morning: 'matene',
    afternoon: 'posttagmeze',
    evening: 'vespere',
    night: 'nokte'
  },
  abbreviated: {
    am: 'a.t.m.',
    pm: 'p.t.m.',
    midnight: 'noktomezo',
    noon: 'tagmezo',
    morning: 'matene',
    afternoon: 'posttagmeze',
    evening: 'vespere',
    night: 'nokte'
  },
  wide: {
    am: 'antaŭtagmeze',
    pm: 'posttagmeze',
    midnight: 'noktomezo',
    noon: 'tagmezo',
    morning: 'matene',
    afternoon: 'posttagmeze',
    evening: 'vespere',
    night: 'nokte'
  }
};
var ordinalNumber$Z = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '-a';
};
var localize$1W = {
  ordinalNumber: ordinalNumber$Z,
  era: buildLocalizeFn({
    values: eraValues$Z,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$Z,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$Z,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$Z,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$Z,
    defaultWidth: 'wide'
  })
};
var localize$1X = localize$1W;

var matchOrdinalNumberPattern$Z = /^(\d+)(-?a)?/i;
var parseOrdinalNumberPattern$Z = /\d+/i;
var matchEraPatterns$Z = {
  narrow: /^([ap]k)/i,
  abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
  wide: /^((antaǔ |post )?komuna erao)/i
};
var parseEraPatterns$Z = {
  any: [/^a/i, /^[kp]/i]
};
var matchQuarterPatterns$Z = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](-?a)? kvaronjaro/i
};
var parseQuarterPatterns$Z = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$Z = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(ŭ|ux|uh|u)g|sep|okt|nov|dec)/i,
  wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(ŭ|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i
};
var parseMonthPatterns$Z = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^a(u|ŭ)/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$Z = {
  narrow: /^[dlmĵjvs]/i,
  short: /^(di|lu|ma|me|(ĵ|jx|jh|j)a|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)|ven|sab)/i,
  wide: /^(diman(ĉ|cx|ch|c)o|lundo|mardo|merkredo|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)do|vendredo|sabato)/i
};
var parseDayPatterns$Z = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|ĵ)/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|ĵ)/i, /^v/i, /^s/i]
};
var matchDayPeriodPatterns$Z = {
  narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  abbreviated: /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  wide: /^(anta(ŭ|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i
};
var parseDayPeriodPatterns$Z = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^noktom/i,
    noon: /^t/i,
    morning: /^m/i,
    afternoon: /^posttagmeze/i,
    evening: /^v/i,
    night: /^n/i
  }
};
var match$1W = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$Z,
    parsePattern: parseOrdinalNumberPattern$Z,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$Z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$Z,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$Z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$Z,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$Z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$Z,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$Z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$Z,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$Z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$Z,
    defaultParseWidth: 'any'
  })
};
var match$1X = match$1W;

/**
 * @type {Locale}
 * @category Locales
 * @summary Esperanto locale.
 * @language Esperanto
 * @iso-639-2 epo
 * @author date-fns
 */
var locale$21 = {
  code: 'eo',
  formatDistance: formatDistance$1X,
  formatLong: formatLong$21,
  formatRelative: formatRelative$1Z,
  localize: localize$1X,
  match: match$1X,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$22 = locale$21;

var formatDistanceLocale$X = {
  lessThanXSeconds: {
    one: 'menos de un segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'medio minuto',
  lessThanXMinutes: {
    one: 'menos de un minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'alrededor de 1 hora',
    other: 'alrededor de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 día',
    other: '{{count}} días'
  },
  aboutXWeeks: {
    one: 'alrededor de 1 semana',
    other: 'alrededor de {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'alrededor de 1 mes',
    other: 'alrededor de {{count}} meses'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'alrededor de 1 año',
    other: 'alrededor de {{count}} años'
  },
  xYears: {
    one: '1 año',
    other: '{{count}} años'
  },
  overXYears: {
    one: 'más de 1 año',
    other: 'más de {{count}} años'
  },
  almostXYears: {
    one: 'casi 1 año',
    other: 'casi {{count}} años'
  }
};
var formatDistance$1U = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$X[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'hace ' + result;
    }
  }
  return result;
};
var formatDistance$1V = formatDistance$1U;

var dateFormats$$ = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$$ = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$$ = {
  full: "{{date}} 'a las' {{time}}",
  long: "{{date}} 'a las' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1_ = {
  date: buildFormatLongFn({
    formats: dateFormats$$,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$$,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$$,
    defaultWidth: 'full'
  })
};
var formatLong$1$ = formatLong$1_;

var formatRelativeLocale$Z = {
  lastWeek: "'el' eeee 'pasado a la' p",
  yesterday: "'ayer a la' p",
  today: "'hoy a la' p",
  tomorrow: "'mañana a la' p",
  nextWeek: "eeee 'a la' p",
  other: 'P'
};
var formatRelativeLocalePlural$2 = {
  lastWeek: "'el' eeee 'pasado a las' p",
  yesterday: "'ayer a las' p",
  today: "'hoy a las' p",
  tomorrow: "'mañana a las' p",
  nextWeek: "eeee 'a las' p",
  other: 'P'
};
var formatRelative$1W = function formatRelative(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelativeLocalePlural$2[token];
  } else {
    return formatRelativeLocale$Z[token];
  }
};
var formatRelative$1X = formatRelative$1W;

var eraValues$Y = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'después de cristo']
};
var quarterValues$Y = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$Y = {
  narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'],
  wide: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']
};
var dayValues$Y = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['do', 'lu', 'ma', 'mi', 'ju', 'vi', 'sá'],
  abbreviated: ['dom', 'lun', 'mar', 'mié', 'jue', 'vie', 'sáb'],
  wide: ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado']
};
var dayPeriodValues$Y = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'mañana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'mañana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'mañana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  }
};
var formattingDayPeriodValues$M = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'de la mañana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'de la mañana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'de la mañana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  }
};
var ordinalNumber$Y = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'º';
};
var localize$1U = {
  ordinalNumber: ordinalNumber$Y,
  era: buildLocalizeFn({
    values: eraValues$Y,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$Y,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$Y,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$Y,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$Y,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$M,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1V = localize$1U;

var matchOrdinalNumberPattern$Y = /^(\d+)(º)?/i;
var parseOrdinalNumberPattern$Y = /\d+/i;
var matchEraPatterns$Y = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
};
var parseEraPatterns$Y = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes de la era com[uú]n)/i, /^(despu[eé]s de cristo|era com[uú]n)/i]
};
var matchQuarterPatterns$Y = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns$Y = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$Y = {
  narrow: /^[efmajsond]/i,
  abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
  wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
};
var parseMonthPatterns$Y = {
  narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
};
var matchDayPatterns$Y = {
  narrow: /^[dlmjvs]/i,
  short: /^(do|lu|ma|mi|ju|vi|s[áa])/i,
  abbreviated: /^(dom|lun|mar|mi[ée]|jue|vie|s[áa]b)/i,
  wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i
};
var parseDayPatterns$Y = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
};
var matchDayPeriodPatterns$Y = {
  narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
  any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
};
var parseDayPeriodPatterns$Y = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /mañana/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noche/i
  }
};
var match$1U = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$Y,
    parsePattern: parseOrdinalNumberPattern$Y,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$Y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$Y,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$Y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$Y,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$Y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$Y,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$Y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$Y,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$Y,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$Y,
    defaultParseWidth: 'any'
  })
};
var match$1V = match$1U;

/**
 * @type {Locale}
 * @category Locales
 * @summary Spanish locale.
 * @language Spanish
 * @iso-639-2 spa
 * @author Juan Angosto [@juanangosto]{@link https://github.com/juanangosto}
 * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
 * @author Fernando Agüero [@fjaguero]{@link https://github.com/fjaguero}
 * @author Gastón Haro [@harogaston]{@link https://github.com/harogaston}
 * @author Yago Carballo [@YagoCarballo]{@link https://github.com/YagoCarballo}
 */
var locale$1$ = {
  code: 'es',
  formatDistance: formatDistance$1V,
  formatLong: formatLong$1$,
  formatRelative: formatRelative$1X,
  localize: localize$1V,
  match: match$1V,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$20 = locale$1$;

var formatDistanceLocale$W = {
  lessThanXSeconds: {
    standalone: {
      one: 'vähem kui üks sekund',
      other: 'vähem kui {{count}} sekundit'
    },
    withPreposition: {
      one: 'vähem kui ühe sekundi',
      other: 'vähem kui {{count}} sekundi'
    }
  },
  xSeconds: {
    standalone: {
      one: 'üks sekund',
      other: '{{count}} sekundit'
    },
    withPreposition: {
      one: 'ühe sekundi',
      other: '{{count}} sekundi'
    }
  },
  halfAMinute: {
    standalone: 'pool minutit',
    withPreposition: 'poole minuti'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'vähem kui üks minut',
      other: 'vähem kui {{count}} minutit'
    },
    withPreposition: {
      one: 'vähem kui ühe minuti',
      other: 'vähem kui {{count}} minuti'
    }
  },
  xMinutes: {
    standalone: {
      one: 'üks minut',
      other: '{{count}} minutit'
    },
    withPreposition: {
      one: 'ühe minuti',
      other: '{{count}} minuti'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'umbes üks tund',
      other: 'umbes {{count}} tundi'
    },
    withPreposition: {
      one: 'umbes ühe tunni',
      other: 'umbes {{count}} tunni'
    }
  },
  xHours: {
    standalone: {
      one: 'üks tund',
      other: '{{count}} tundi'
    },
    withPreposition: {
      one: 'ühe tunni',
      other: '{{count}} tunni'
    }
  },
  xDays: {
    standalone: {
      one: 'üks päev',
      other: '{{count}} päeva'
    },
    withPreposition: {
      one: 'ühe päeva',
      other: '{{count}} päeva'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'umbes üks nädal',
      other: 'umbes {{count}} nädalat'
    },
    withPreposition: {
      one: 'umbes ühe nädala',
      other: 'umbes {{count}} nädala'
    }
  },
  xWeeks: {
    standalone: {
      one: 'üks nädal',
      other: '{{count}} nädalat'
    },
    withPreposition: {
      one: 'ühe nädala',
      other: '{{count}} nädala'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'umbes üks kuu',
      other: 'umbes {{count}} kuud'
    },
    withPreposition: {
      one: 'umbes ühe kuu',
      other: 'umbes {{count}} kuu'
    }
  },
  xMonths: {
    standalone: {
      one: 'üks kuu',
      other: '{{count}} kuud'
    },
    withPreposition: {
      one: 'ühe kuu',
      other: '{{count}} kuu'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'umbes üks aasta',
      other: 'umbes {{count}} aastat'
    },
    withPreposition: {
      one: 'umbes ühe aasta',
      other: 'umbes {{count}} aasta'
    }
  },
  xYears: {
    standalone: {
      one: 'üks aasta',
      other: '{{count}} aastat'
    },
    withPreposition: {
      one: 'ühe aasta',
      other: '{{count}} aasta'
    }
  },
  overXYears: {
    standalone: {
      one: 'rohkem kui üks aasta',
      other: 'rohkem kui {{count}} aastat'
    },
    withPreposition: {
      one: 'rohkem kui ühe aasta',
      other: 'rohkem kui {{count}} aasta'
    }
  },
  almostXYears: {
    standalone: {
      one: 'peaaegu üks aasta',
      other: 'peaaegu {{count}} aastat'
    },
    withPreposition: {
      one: 'peaaegu ühe aasta',
      other: 'peaaegu {{count}} aasta'
    }
  }
};
var formatDistance$1S = function formatDistance(token, count, options) {
  var usageGroup = options !== null && options !== void 0 && options.addSuffix ? formatDistanceLocale$W[token].withPreposition : formatDistanceLocale$W[token].standalone;
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' pärast';
    } else {
      return result + ' eest';
    }
  }
  return result;
};
var formatDistance$1T = formatDistance$1S;

var dateFormats$_ = {
  full: 'EEEE, d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y'
};
var timeFormats$_ = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$_ = {
  full: "{{date}} 'kell' {{time}}",
  long: "{{date}} 'kell' {{time}}",
  medium: '{{date}}. {{time}}',
  short: '{{date}}. {{time}}'
};
var formatLong$1Y = {
  date: buildFormatLongFn({
    formats: dateFormats$_,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$_,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$_,
    defaultWidth: 'full'
  })
};
var formatLong$1Z = formatLong$1Y;

var formatRelativeLocale$Y = {
  lastWeek: "'eelmine' eeee 'kell' p",
  yesterday: "'eile kell' p",
  today: "'täna kell' p",
  tomorrow: "'homme kell' p",
  nextWeek: "'järgmine' eeee 'kell' p",
  other: 'P'
};
var formatRelative$1U = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$Y[token];
};
var formatRelative$1V = formatRelative$1U;

var eraValues$X = {
  narrow: ['e.m.a', 'm.a.j'],
  abbreviated: ['e.m.a', 'm.a.j'],
  wide: ['enne meie ajaarvamist', 'meie ajaarvamise järgi']
};
var quarterValues$X = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$X = {
  narrow: ['J', 'V', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jaan', 'veebr', 'märts', 'apr', 'mai', 'juuni', 'juuli', 'aug', 'sept', 'okt', 'nov', 'dets'],
  wide: ['jaanuar', 'veebruar', 'märts', 'aprill', 'mai', 'juuni', 'juuli', 'august', 'september', 'oktoober', 'november', 'detsember']
};
var dayValues$X = {
  narrow: ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
  short: ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
  abbreviated: ['pühap.', 'esmasp.', 'teisip.', 'kolmap.', 'neljap.', 'reede.', 'laup.'],
  wide: ['pühapäev', 'esmaspäev', 'teisipäev', 'kolmapäev', 'neljapäev', 'reede', 'laupäev']
};
var dayPeriodValues$X = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesköö',
    noon: 'keskpäev',
    morning: 'hommik',
    afternoon: 'pärastlõuna',
    evening: 'õhtu',
    night: 'öö'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesköö',
    noon: 'keskpäev',
    morning: 'hommik',
    afternoon: 'pärastlõuna',
    evening: 'õhtu',
    night: 'öö'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesköö',
    noon: 'keskpäev',
    morning: 'hommik',
    afternoon: 'pärastlõuna',
    evening: 'õhtu',
    night: 'öö'
  }
};
var formattingDayPeriodValues$L = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'keskööl',
    noon: 'keskpäeval',
    morning: 'hommikul',
    afternoon: 'pärastlõunal',
    evening: 'õhtul',
    night: 'öösel'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'keskööl',
    noon: 'keskpäeval',
    morning: 'hommikul',
    afternoon: 'pärastlõunal',
    evening: 'õhtul',
    night: 'öösel'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'keskööl',
    noon: 'keskpäeval',
    morning: 'hommikul',
    afternoon: 'pärastlõunal',
    evening: 'õhtul',
    night: 'öösel'
  }
};
var ordinalNumber$X = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$1S = {
  ordinalNumber: ordinalNumber$X,
  era: buildLocalizeFn({
    values: eraValues$X,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$X,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$X,
    defaultWidth: 'wide',
    formattingValues: monthValues$X,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$X,
    defaultWidth: 'wide',
    formattingValues: dayValues$X,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$X,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$L,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1T = localize$1S;

var matchOrdinalNumberPattern$X = /^\d+\./i;
var parseOrdinalNumberPattern$X = /\d+/i;
var matchEraPatterns$X = {
  narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  wide: /^(enne meie ajaarvamist|meie ajaarvamise järgi|enne Kristust|pärast Kristust)/i
};
var parseEraPatterns$X = {
  any: [/^e/i, /^(m|p)/i]
};
var matchQuarterPatterns$X = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var parseQuarterPatterns$X = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$X = {
  narrow: /^[jvmasond]/i,
  abbreviated: /^(jaan|veebr|märts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets)/i,
  wide: /^(jaanuar|veebruar|märts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember)/i
};
var parseMonthPatterns$X = {
  narrow: [/^j/i, /^v/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^v/i, /^mär/i, /^ap/i, /^mai/i, /^juun/i, /^juul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$X = {
  narrow: /^[petknrl]/i,
  short: /^[petknrl]/i,
  abbreviated: /^(püh?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
  wide: /^(pühapäev|esmaspäev|teisipäev|kolmapäev|neljapäev|reede|laupäev)/i
};
var parseDayPatterns$X = {
  any: [/^p/i, /^e/i, /^t/i, /^k/i, /^n/i, /^r/i, /^l/i]
};
var matchDayPeriodPatterns$X = {
  any: /^(am|pm|keskööl?|keskpäev(al)?|hommik(ul)?|pärastlõunal?|õhtul?|öö(sel)?)/i
};
var parseDayPeriodPatterns$X = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^keskö/i,
    noon: /^keskp/i,
    morning: /hommik/i,
    afternoon: /pärastlõuna/i,
    evening: /õhtu/i,
    night: /öö/i
  }
};
var match$1S = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$X,
    parsePattern: parseOrdinalNumberPattern$X,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$X,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$X,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$X,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$X,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$X,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$X,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$X,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$X,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$X,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$X,
    defaultParseWidth: 'any'
  })
};
var match$1T = match$1S;

/**
 * @type {Locale}
 * @category Locales
 * @summary Estonian locale.
 * @language Estonian
 * @iso-639-2 est
 * @author Priit Hansen [@HansenPriit]{@link https://github.com/priithansen}
 */
var locale$1Z = {
  code: 'et',
  formatDistance: formatDistance$1T,
  formatLong: formatLong$1Z,
  formatRelative: formatRelative$1V,
  localize: localize$1T,
  match: match$1T,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1_ = locale$1Z;

var formatDistanceLocale$V = {
  lessThanXSeconds: {
    one: 'segundo bat baino gutxiago',
    other: '{{count}} segundo baino gutxiago'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundo'
  },
  halfAMinute: 'minutu erdi',
  lessThanXMinutes: {
    one: 'minutu bat baino gutxiago',
    other: '{{count}} minutu baino gutxiago'
  },
  xMinutes: {
    one: '1 minutu',
    other: '{{count}} minutu'
  },
  aboutXHours: {
    one: '1 ordu gutxi gorabehera',
    other: '{{count}} ordu gutxi gorabehera'
  },
  xHours: {
    one: '1 ordu',
    other: '{{count}} ordu'
  },
  xDays: {
    one: '1 egun',
    other: '{{count}} egun'
  },
  aboutXWeeks: {
    one: 'aste 1 inguru',
    other: '{{count}} aste inguru'
  },
  xWeeks: {
    one: '1 aste',
    other: '{{count}} astean'
  },
  aboutXMonths: {
    one: '1 hilabete gutxi gorabehera',
    other: '{{count}} hilabete gutxi gorabehera'
  },
  xMonths: {
    one: '1 hilabete',
    other: '{{count}} hilabete'
  },
  aboutXYears: {
    one: '1 urte gutxi gorabehera',
    other: '{{count}} urte gutxi gorabehera'
  },
  xYears: {
    one: '1 urte',
    other: '{{count}} urte'
  },
  overXYears: {
    one: '1 urte baino gehiago',
    other: '{{count}} urte baino gehiago'
  },
  almostXYears: {
    one: 'ia 1 urte',
    other: 'ia {{count}} urte'
  }
};
var formatDistance$1Q = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$V[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'duela ' + result;
    }
  }
  return result;
};
var formatDistance$1R = formatDistance$1Q;

var dateFormats$Z = {
  full: "EEEE, y'ko' MMMM'ren' d'a' y'ren'",
  long: "y'ko' MMMM'ren' d'a'",
  medium: 'y MMM d',
  short: 'yy/MM/dd'
};
var timeFormats$Z = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$Z = {
  full: "{{date}} 'tan' {{time}}",
  long: "{{date}} 'tan' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1W = {
  date: buildFormatLongFn({
    formats: dateFormats$Z,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$Z,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$Z,
    defaultWidth: 'full'
  })
};
var formatLong$1X = formatLong$1W;

var formatRelativeLocale$X = {
  lastWeek: "'joan den' eeee, LT",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: 'eeee, p',
  other: 'P'
};
var formatRelativeLocalePlural$1 = {
  lastWeek: "'joan den' eeee, p",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: 'eeee, p',
  other: 'P'
};
var formatRelative$1S = function formatRelative(token, date) {
  if (date.getUTCHours() !== 1) {
    return formatRelativeLocalePlural$1[token];
  }
  return formatRelativeLocale$X[token];
};
var formatRelative$1T = formatRelative$1S;

var eraValues$W = {
  narrow: ['k.a.', 'k.o.'],
  abbreviated: ['k.a.', 'k.o.'],
  wide: ['kristo aurretik', 'kristo ondoren']
};
var quarterValues$W = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1H', '2H', '3H', '4H'],
  wide: ['1. hiruhilekoa', '2. hiruhilekoa', '3. hiruhilekoa', '4. hiruhilekoa']
};
var monthValues$W = {
  narrow: ['u', 'o', 'm', 'a', 'm', 'e', 'u', 'a', 'i', 'u', 'a', 'a'],
  abbreviated: ['urt', 'ots', 'mar', 'api', 'mai', 'eka', 'uzt', 'abu', 'ira', 'urr', 'aza', 'abe'],
  wide: ['urtarrila', 'otsaila', 'martxoa', 'apirila', 'maiatza', 'ekaina', 'uztaila', 'abuztua', 'iraila', 'urria', 'azaroa', 'abendua']
};
var dayValues$W = {
  narrow: ['i', 'a', 'a', 'a', 'o', 'o', 'l'],
  short: ['ig', 'al', 'as', 'az', 'og', 'or', 'lr'],
  abbreviated: ['iga', 'ast', 'ast', 'ast', 'ost', 'ost', 'lar'],
  wide: ['igandea', 'astelehena', 'asteartea', 'asteazkena', 'osteguna', 'ostirala', 'larunbata']
};
var dayPeriodValues$W = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'ge',
    noon: 'eg',
    morning: 'goiza',
    afternoon: 'arratsaldea',
    evening: 'arratsaldea',
    night: 'gaua'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goiza',
    afternoon: 'arratsaldea',
    evening: 'arratsaldea',
    night: 'gaua'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goiza',
    afternoon: 'arratsaldea',
    evening: 'arratsaldea',
    night: 'gaua'
  }
};
var formattingDayPeriodValues$K = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'ge',
    noon: 'eg',
    morning: 'goizean',
    afternoon: 'arratsaldean',
    evening: 'arratsaldean',
    night: 'gauean'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goizean',
    afternoon: 'arratsaldean',
    evening: 'arratsaldean',
    night: 'gauean'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goizean',
    afternoon: 'arratsaldean',
    evening: 'arratsaldean',
    night: 'gauean'
  }
};
var ordinalNumber$W = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$1Q = {
  ordinalNumber: ordinalNumber$W,
  era: buildLocalizeFn({
    values: eraValues$W,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$W,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$W,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$W,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$W,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$K,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1R = localize$1Q;

var matchOrdinalNumberPattern$W = /^(\d+)(.)?/i;
var parseOrdinalNumberPattern$W = /\d+/i;
var matchEraPatterns$W = {
  narrow: /^(k.a.|k.o.)/i,
  abbreviated: /^(k.a.|k.o.)/i,
  wide: /^(kristo aurretik|kristo ondoren)/i
};
var parseEraPatterns$W = {
  narrow: [/^k.a./i, /^k.o./i],
  abbreviated: [/^(k.a.)/i, /^(k.o.)/i],
  wide: [/^(kristo aurretik)/i, /^(kristo ondoren)/i]
};
var matchQuarterPatterns$W = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]H/i,
  wide: /^[1234](.)? hiruhilekoa/i
};
var parseQuarterPatterns$W = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$W = {
  narrow: /^[uomaei]/i,
  abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
  wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i
};
var parseMonthPatterns$W = {
  narrow: [/^u/i, /^o/i, /^m/i, /^a/i, /^m/i, /^e/i, /^u/i, /^a/i, /^i/i, /^u/i, /^a/i, /^a/i],
  any: [/^urt/i, /^ots/i, /^mar/i, /^api/i, /^mai/i, /^eka/i, /^uzt/i, /^abu/i, /^ira/i, /^urr/i, /^aza/i, /^abe/i]
};
var matchDayPatterns$W = {
  narrow: /^[iaol]/i,
  short: /^(ig|al|as|az|og|or|lr)/i,
  abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
  wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i
};
var parseDayPatterns$W = {
  narrow: [/^i/i, /^a/i, /^a/i, /^a/i, /^o/i, /^o/i, /^l/i],
  short: [/^ig/i, /^al/i, /^as/i, /^az/i, /^og/i, /^or/i, /^lr/i],
  abbreviated: [/^iga/i, /^ast/i, /^ast/i, /^ast/i, /^ost/i, /^ost/i, /^lar/i],
  wide: [/^igandea/i, /^astelehena/i, /^asteartea/i, /^asteazkena/i, /^osteguna/i, /^ostirala/i, /^larunbata/i]
};
var matchDayPeriodPatterns$W = {
  narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
  any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i
};
var parseDayPeriodPatterns$W = {
  narrow: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^ge/i,
    noon: /^eg/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  },
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^gauerdia/i,
    noon: /^eguerdia/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  }
};
var match$1Q = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$W,
    parsePattern: parseOrdinalNumberPattern$W,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$W,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$W,
    defaultParseWidth: 'wide'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$W,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$W,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$W,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$W,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$W,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$W,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$W,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$W,
    defaultParseWidth: 'any'
  })
};
var match$1R = match$1Q;

/**
 * @type {Locale}
 * @category Locales
 * @summary Basque locale.
 * @language Basque
 * @iso-639-2 eus
 * @author Jacob Söderblom [@JacobSoderblom]{@link https://github.com/JacobSoderblom}
 */
var locale$1X = {
  code: 'eu',
  formatDistance: formatDistance$1R,
  formatLong: formatLong$1X,
  formatRelative: formatRelative$1T,
  localize: localize$1R,
  match: match$1R,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1Y = locale$1X;

var formatDistanceLocale$U = {
  lessThanXSeconds: {
    one: 'کمتر از یک ثانیه',
    other: 'کمتر از {{count}} ثانیه'
  },
  xSeconds: {
    one: '1 ثانیه',
    other: '{{count}} ثانیه'
  },
  halfAMinute: 'نیم دقیقه',
  lessThanXMinutes: {
    one: 'کمتر از یک دقیقه',
    other: 'کمتر از {{count}} دقیقه'
  },
  xMinutes: {
    one: '1 دقیقه',
    other: '{{count}} دقیقه'
  },
  aboutXHours: {
    one: 'حدود 1 ساعت',
    other: 'حدود {{count}} ساعت'
  },
  xHours: {
    one: '1 ساعت',
    other: '{{count}} ساعت'
  },
  xDays: {
    one: '1 روز',
    other: '{{count}} روز'
  },
  aboutXWeeks: {
    one: 'حدود 1 هفته',
    other: 'حدود {{count}} هفته'
  },
  xWeeks: {
    one: '1 هفته',
    other: '{{count}} هفته'
  },
  aboutXMonths: {
    one: 'حدود 1 ماه',
    other: 'حدود {{count}} ماه'
  },
  xMonths: {
    one: '1 ماه',
    other: '{{count}} ماه'
  },
  aboutXYears: {
    one: 'حدود 1 سال',
    other: 'حدود {{count}} سال'
  },
  xYears: {
    one: '1 سال',
    other: '{{count}} سال'
  },
  overXYears: {
    one: 'بیشتر از 1 سال',
    other: 'بیشتر از {{count}} سال'
  },
  almostXYears: {
    one: 'نزدیک 1 سال',
    other: 'نزدیک {{count}} سال'
  }
};
var formatDistance$1O = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$U[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'در ' + result;
    } else {
      return result + ' قبل';
    }
  }
  return result;
};
var formatDistance$1P = formatDistance$1O;

var dateFormats$Y = {
  full: 'EEEE do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'yyyy/MM/dd'
};
var timeFormats$Y = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$Y = {
  full: "{{date}} 'در' {{time}}",
  long: "{{date}} 'در' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1U = {
  date: buildFormatLongFn({
    formats: dateFormats$Y,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$Y,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$Y,
    defaultWidth: 'full'
  })
};
var formatLong$1V = formatLong$1U;

var formatRelativeLocale$W = {
  lastWeek: "eeee 'گذشته در' p",
  yesterday: "'دیروز در' p",
  today: "'امروز در' p",
  tomorrow: "'فردا در' p",
  nextWeek: "eeee 'در' p",
  other: 'P'
};
var formatRelative$1Q = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$W[token];
};
var formatRelative$1R = formatRelative$1Q;

var eraValues$V = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م.', 'ب.م.'],
  wide: ['قبل از میلاد', 'بعد از میلاد']
};
var quarterValues$V = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['س‌م1', 'س‌م2', 'س‌م3', 'س‌م4'],
  wide: ['سه‌ماهه 1', 'سه‌ماهه 2', 'سه‌ماهه 3', 'سه‌ماهه 4']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$V = {
  narrow: ['ژ', 'ف', 'م', 'آ', 'م', 'ج', 'ج', 'آ', 'س', 'ا', 'ن', 'د'],
  abbreviated: ['ژانـ', 'فور', 'مارس', 'آپر', 'می', 'جون', 'جولـ', 'آگو', 'سپتـ', 'اکتـ', 'نوامـ', 'دسامـ'],
  wide: ['ژانویه', 'فوریه', 'مارس', 'آپریل', 'می', 'جون', 'جولای', 'آگوست', 'سپتامبر', 'اکتبر', 'نوامبر', 'دسامبر']
};
var dayValues$V = {
  narrow: ['ی', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
  short: ['1ش', '2ش', '3ش', '4ش', '5ش', 'ج', 'ش'],
  abbreviated: ['یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه', 'شنبه'],
  wide: ['یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه', 'شنبه']
};
var dayPeriodValues$V = {
  narrow: {
    am: 'ق',
    pm: 'ب',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'ص',
    afternoon: 'ب.ظ.',
    evening: 'ع',
    night: 'ش'
  },
  abbreviated: {
    am: 'ق.ظ.',
    pm: 'ب.ظ.',
    midnight: 'نیمه‌شب',
    noon: 'ظهر',
    morning: 'صبح',
    afternoon: 'بعدازظهر',
    evening: 'عصر',
    night: 'شب'
  },
  wide: {
    am: 'قبل‌ازظهر',
    pm: 'بعدازظهر',
    midnight: 'نیمه‌شب',
    noon: 'ظهر',
    morning: 'صبح',
    afternoon: 'بعدازظهر',
    evening: 'عصر',
    night: 'شب'
  }
};
var formattingDayPeriodValues$J = {
  narrow: {
    am: 'ق',
    pm: 'ب',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'ص',
    afternoon: 'ب.ظ.',
    evening: 'ع',
    night: 'ش'
  },
  abbreviated: {
    am: 'ق.ظ.',
    pm: 'ب.ظ.',
    midnight: 'نیمه‌شب',
    noon: 'ظهر',
    morning: 'صبح',
    afternoon: 'بعدازظهر',
    evening: 'عصر',
    night: 'شب'
  },
  wide: {
    am: 'قبل‌ازظهر',
    pm: 'بعدازظهر',
    midnight: 'نیمه‌شب',
    noon: 'ظهر',
    morning: 'صبح',
    afternoon: 'بعدازظهر',
    evening: 'عصر',
    night: 'شب'
  }
};
var ordinalNumber$V = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$1O = {
  ordinalNumber: ordinalNumber$V,
  era: buildLocalizeFn({
    values: eraValues$V,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$V,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$V,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$V,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$V,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$J,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1P = localize$1O;

var matchOrdinalNumberPattern$V = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$V = /\d+/i;
var matchEraPatterns$V = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?د\.?\s?م\.?|م\.?\s?|د\.?\s?م\.?)/i,
  wide: /^(قبل از میلاد|قبل از دوران مشترک|میلادی|دوران مشترک|بعد از میلاد)/i
};
var parseEraPatterns$V = {
  any: [/^قبل/i, /^بعد/i]
};
var matchQuarterPatterns$V = {
  narrow: /^[1234]/i,
  abbreviated: /^س‌م[1234]/i,
  wide: /^سه‌ماهه [1234]/i
};
var parseQuarterPatterns$V = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$V = {
  narrow: /^[جژفمآاماسند]/i,
  abbreviated: /^(جنو|ژانـ|ژانویه|فوریه|فور|مارس|آوریل|آپر|مه|می|ژوئن|جون|جول|جولـ|ژوئیه|اوت|آگو|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نوامـ|دسامبر|دسامـ|دسم)/i,
  wide: /^(ژانویه|جنوری|فبروری|فوریه|مارچ|مارس|آپریل|اپریل|ایپریل|آوریل|مه|می|ژوئن|جون|جولای|ژوئیه|آگست|اگست|آگوست|اوت|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نومبر|دسامبر|دسمبر)/i
};
var parseMonthPatterns$V = {
  narrow: [/^(ژ|ج)/i, /^ف/i, /^م/i, /^(آ|ا)/i, /^م/i, /^(ژ|ج)/i, /^(ج|ژ)/i, /^(آ|ا)/i, /^س/i, /^ا/i, /^ن/i, /^د/i],
  any: [/^ژا/i, /^ف/i, /^ما/i, /^آپ/i, /^(می|مه)/i, /^(ژوئن|جون)/i, /^(ژوئی|جول)/i, /^(اوت|آگ)/i, /^س/i, /^(اوک|اک)/i, /^ن/i, /^د/i]
};
var matchDayPatterns$V = {
  narrow: /^[شیدسچپج]/i,
  short: /^(ش|ج|1ش|2ش|3ش|4ش|5ش)/i,
  abbreviated: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i,
  wide: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i
};
var parseDayPatterns$V = {
  narrow: [/^ی/i, /^دو/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
  any: [/^(ی|1ش|یکشنبه)/i, /^(د|2ش|دوشنبه)/i, /^(س|3ش|سه‌شنبه)/i, /^(چ|4ش|چهارشنبه)/i, /^(پ|5ش|پنجشنبه)/i, /^(ج|جمعه)/i, /^(ش|شنبه)/i]
};
var matchDayPeriodPatterns$V = {
  narrow: /^(ب|ق|ن|ظ|ص|ب.ظ.|ع|ش)/i,
  abbreviated: /^(ق.ظ.|ب.ظ.|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i,
  wide: /^(قبل‌ازظهر|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i
};
var parseDayPeriodPatterns$V = {
  any: {
    am: /^(ق|ق.ظ.|قبل‌ازظهر)/i,
    pm: /^(ب|ب.ظ.|بعدازظهر)/i,
    midnight: /^(‌نیمه‌شب|ن)/i,
    noon: /^(ظ|ظهر)/i,
    morning: /(ص|صبح)/i,
    afternoon: /(ب|ب.ظ.|بعدازظهر)/i,
    evening: /(ع|عصر)/i,
    night: /(ش|شب)/i
  }
};
var match$1O = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$V,
    parsePattern: parseOrdinalNumberPattern$V,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$V,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$V,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$V,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$V,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$V,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$V,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$V,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$V,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$V,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$V,
    defaultParseWidth: 'any'
  })
};
var match$1P = match$1O;

/**
 * @type {Locale}
 * @category Locales
 * @summary Persian/Farsi locale (Iran).
 * @language Persian
 * @iso-639-2 ira
 * @author Morteza Ziyae [@mort3za]{@link https://github.com/mort3za}
 */
var locale$1V = {
  code: 'fa-IR',
  formatDistance: formatDistance$1P,
  formatLong: formatLong$1V,
  formatRelative: formatRelative$1R,
  localize: localize$1P,
  match: match$1P,
  options: {
    weekStartsOn: 6 /* Saturday */,
    firstWeekContainsDate: 1
  }
};
var locale$1W = locale$1V;

function futureSeconds(text) {
  return text.replace(/sekuntia?/, 'sekunnin');
}
function futureMinutes(text) {
  return text.replace(/minuuttia?/, 'minuutin');
}
function futureHours(text) {
  return text.replace(/tuntia?/, 'tunnin');
}
function futureDays(text) {
  return text.replace(/päivää?/, 'päivän');
}
function futureWeeks(text) {
  return text.replace(/(viikko|viikkoa)/, 'viikon');
}
function futureMonths(text) {
  return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');
}
function futureYears(text) {
  return text.replace(/(vuosi|vuotta)/, 'vuoden');
}
var formatDistanceLocale$T = {
  lessThanXSeconds: {
    one: 'alle sekunti',
    other: 'alle {{count}} sekuntia',
    futureTense: futureSeconds
  },
  xSeconds: {
    one: 'sekunti',
    other: '{{count}} sekuntia',
    futureTense: futureSeconds
  },
  halfAMinute: {
    one: 'puoli minuuttia',
    other: 'puoli minuuttia',
    futureTense: function futureTense(_text) {
      return 'puolen minuutin';
    }
  },
  lessThanXMinutes: {
    one: 'alle minuutti',
    other: 'alle {{count}} minuuttia',
    futureTense: futureMinutes
  },
  xMinutes: {
    one: 'minuutti',
    other: '{{count}} minuuttia',
    futureTense: futureMinutes
  },
  aboutXHours: {
    one: 'noin tunti',
    other: 'noin {{count}} tuntia',
    futureTense: futureHours
  },
  xHours: {
    one: 'tunti',
    other: '{{count}} tuntia',
    futureTense: futureHours
  },
  xDays: {
    one: 'päivä',
    other: '{{count}} päivää',
    futureTense: futureDays
  },
  aboutXWeeks: {
    one: 'noin viikko',
    other: 'noin {{count}} viikkoa',
    futureTense: futureWeeks
  },
  xWeeks: {
    one: 'viikko',
    other: '{{count}} viikkoa',
    futureTense: futureWeeks
  },
  aboutXMonths: {
    one: 'noin kuukausi',
    other: 'noin {{count}} kuukautta',
    futureTense: futureMonths
  },
  xMonths: {
    one: 'kuukausi',
    other: '{{count}} kuukautta',
    futureTense: futureMonths
  },
  aboutXYears: {
    one: 'noin vuosi',
    other: 'noin {{count}} vuotta',
    futureTense: futureYears
  },
  xYears: {
    one: 'vuosi',
    other: '{{count}} vuotta',
    futureTense: futureYears
  },
  overXYears: {
    one: 'yli vuosi',
    other: 'yli {{count}} vuotta',
    futureTense: futureYears
  },
  almostXYears: {
    one: 'lähes vuosi',
    other: 'lähes {{count}} vuotta',
    futureTense: futureYears
  }
};
var formatDistance$1M = function formatDistance(token, count, options) {
  var tokenValue = formatDistanceLocale$T[token];
  var result = count === 1 ? tokenValue.one : tokenValue.other.replace('{{count}}', String(count));
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return tokenValue.futureTense(result) + ' kuluttua';
    } else {
      return result + ' sitten';
    }
  }
  return result;
};
var formatDistance$1N = formatDistance$1M;

var dateFormats$X = {
  full: 'eeee d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'd.M.y'
};
var timeFormats$X = {
  full: 'HH.mm.ss zzzz',
  long: 'HH.mm.ss z',
  medium: 'HH.mm.ss',
  short: 'HH.mm'
};
var dateTimeFormats$X = {
  full: "{{date}} 'klo' {{time}}",
  long: "{{date}} 'klo' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1S = {
  date: buildFormatLongFn({
    formats: dateFormats$X,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$X,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$X,
    defaultWidth: 'full'
  })
};
var formatLong$1T = formatLong$1S;

var formatRelativeLocale$V = {
  lastWeek: "'viime' eeee 'klo' p",
  yesterday: "'eilen klo' p",
  today: "'tänään klo' p",
  tomorrow: "'huomenna klo' p",
  nextWeek: "'ensi' eeee 'klo' p",
  other: 'P'
};
var formatRelative$1O = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$V[token];
};
var formatRelative$1P = formatRelative$1O;

var eraValues$U = {
  narrow: ['eaa.', 'jaa.'],
  abbreviated: ['eaa.', 'jaa.'],
  wide: ['ennen ajanlaskun alkua', 'jälkeen ajanlaskun alun']
};
var quarterValues$U = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartaali', '2. kvartaali', '3. kvartaali', '4. kvartaali']
};
var monthValues$U = {
  narrow: ['T', 'H', 'M', 'H', 'T', 'K', 'H', 'E', 'S', 'L', 'M', 'J'],
  abbreviated: ['tammi', 'helmi', 'maalis', 'huhti', 'touko', 'kesä', 'heinä', 'elo', 'syys', 'loka', 'marras', 'joulu'],
  wide: ['tammikuu', 'helmikuu', 'maaliskuu', 'huhtikuu', 'toukokuu', 'kesäkuu', 'heinäkuu', 'elokuu', 'syyskuu', 'lokakuu', 'marraskuu', 'joulukuu']
};
var formattingMonthValues$b = {
  narrow: monthValues$U.narrow,
  abbreviated: monthValues$U.abbreviated,
  wide: ['tammikuuta', 'helmikuuta', 'maaliskuuta', 'huhtikuuta', 'toukokuuta', 'kesäkuuta', 'heinäkuuta', 'elokuuta', 'syyskuuta', 'lokakuuta', 'marraskuuta', 'joulukuuta']
};
var dayValues$U = {
  narrow: ['S', 'M', 'T', 'K', 'T', 'P', 'L'],
  short: ['su', 'ma', 'ti', 'ke', 'to', 'pe', 'la'],
  abbreviated: ['sunn.', 'maan.', 'tiis.', 'kesk.', 'torst.', 'perj.', 'la'],
  wide: ['sunnuntai', 'maanantai', 'tiistai', 'keskiviikko', 'torstai', 'perjantai', 'lauantai']
};
var formattingDayValues$3 = {
  narrow: dayValues$U.narrow,
  short: dayValues$U.short,
  abbreviated: dayValues$U.abbreviated,
  wide: ['sunnuntaina', 'maanantaina', 'tiistaina', 'keskiviikkona', 'torstaina', 'perjantaina', 'lauantaina']
};
var dayPeriodValues$U = {
  narrow: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiyö',
    noon: 'keskipäivä',
    morning: 'ap',
    afternoon: 'ip',
    evening: 'illalla',
    night: 'yöllä'
  },
  abbreviated: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiyö',
    noon: 'keskipäivä',
    morning: 'ap',
    afternoon: 'ip',
    evening: 'illalla',
    night: 'yöllä'
  },
  wide: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiyöllä',
    noon: 'keskipäivällä',
    morning: 'aamupäivällä',
    afternoon: 'iltapäivällä',
    evening: 'illalla',
    night: 'yöllä'
  }
};
var ordinalNumber$U = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$1M = {
  ordinalNumber: ordinalNumber$U,
  era: buildLocalizeFn({
    values: eraValues$U,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$U,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$U,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$b,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$U,
    defaultWidth: 'wide',
    formattingValues: formattingDayValues$3,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$U,
    defaultWidth: 'wide'
  })
};
var localize$1N = localize$1M;

var matchOrdinalNumberPattern$U = /^(\d+)(\.)/i;
var parseOrdinalNumberPattern$U = /\d+/i;
var matchEraPatterns$U = {
  narrow: /^(e|j)/i,
  abbreviated: /^(eaa.|jaa.)/i,
  wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
};
var parseEraPatterns$U = {
  any: [/^e/i, /^j/i]
};
var matchQuarterPatterns$U = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\.? kvartaali/i
};
var parseQuarterPatterns$U = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$U = {
  narrow: /^[thmkeslj]/i,
  abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
  wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
};
var parseMonthPatterns$U = {
  narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i],
  any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i]
};
var matchDayPatterns$U = {
  narrow: /^[smtkpl]/i,
  short: /^(su|ma|ti|ke|to|pe|la)/i,
  abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
  wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
};
var parseDayPatterns$U = {
  narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
};
var matchDayPeriodPatterns$U = {
  narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
  any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
};
var parseDayPeriodPatterns$U = {
  any: {
    am: /^ap/i,
    pm: /^ip/i,
    midnight: /^keskiyö/i,
    noon: /^keskipäivä/i,
    morning: /aamupäivällä/i,
    afternoon: /iltapäivällä/i,
    evening: /illalla/i,
    night: /yöllä/i
  }
};
var match$1M = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$U,
    parsePattern: parseOrdinalNumberPattern$U,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$U,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$U,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$U,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$U,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$U,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$U,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$U,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$U,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$U,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$U,
    defaultParseWidth: 'any'
  })
};
var match$1N = match$1M;

/**
 * @type {Locale}
 * @category Locales
 * @summary Finnish locale.
 * @language Finnish
 * @iso-639-2 fin
 * @author Pyry-Samuli Lahti [@Pyppe]{@link https://github.com/Pyppe}
 * @author Edo Rivai [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Samu Juvonen [@sjuvonen]{@link https://github.com/sjuvonen}
 */
var locale$1T = {
  code: 'fi',
  formatDistance: formatDistance$1N,
  formatLong: formatLong$1T,
  formatRelative: formatRelative$1P,
  localize: localize$1N,
  match: match$1N,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1U = locale$1T;

var formatDistanceLocale$S = {
  lessThanXSeconds: {
    one: 'moins d’une seconde',
    other: 'moins de {{count}} secondes'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} secondes'
  },
  halfAMinute: '30 secondes',
  lessThanXMinutes: {
    one: 'moins d’une minute',
    other: 'moins de {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'environ 1 heure',
    other: 'environ {{count}} heures'
  },
  xHours: {
    one: '1 heure',
    other: '{{count}} heures'
  },
  xDays: {
    one: '1 jour',
    other: '{{count}} jours'
  },
  aboutXWeeks: {
    one: 'environ 1 semaine',
    other: 'environ {{count}} semaines'
  },
  xWeeks: {
    one: '1 semaine',
    other: '{{count}} semaines'
  },
  aboutXMonths: {
    one: 'environ 1 mois',
    other: 'environ {{count}} mois'
  },
  xMonths: {
    one: '1 mois',
    other: '{{count}} mois'
  },
  aboutXYears: {
    one: 'environ 1 an',
    other: 'environ {{count}} ans'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ans'
  },
  overXYears: {
    one: 'plus d’un an',
    other: 'plus de {{count}} ans'
  },
  almostXYears: {
    one: 'presqu’un an',
    other: 'presque {{count}} ans'
  }
};
var formatDistance$1K = function formatDistance(token, count, options) {
  var result;
  var form = formatDistanceLocale$S[token];
  if (typeof form === 'string') {
    result = form;
  } else if (count === 1) {
    result = form.one;
  } else {
    result = form.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'dans ' + result;
    } else {
      return 'il y a ' + result;
    }
  }
  return result;
};
var formatDistance$1L = formatDistance$1K;

var dateFormats$W = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$W = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$W = {
  full: "{{date}} 'à' {{time}}",
  long: "{{date}} 'à' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1Q = {
  date: buildFormatLongFn({
    formats: dateFormats$W,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$W,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$W,
    defaultWidth: 'full'
  })
};
var formatLong$1R = formatLong$1Q;

var formatRelativeLocale$U = {
  lastWeek: "eeee 'dernier à' p",
  yesterday: "'hier à' p",
  today: "'aujourd’hui à' p",
  tomorrow: "'demain à' p'",
  nextWeek: "eeee 'prochain à' p",
  other: 'P'
};
var formatRelative$1M = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$U[token];
};
var formatRelative$1N = formatRelative$1M;

var eraValues$T = {
  narrow: ['av. J.-C', 'ap. J.-C'],
  abbreviated: ['av. J.-C', 'ap. J.-C'],
  wide: ['avant Jésus-Christ', 'après Jésus-Christ']
};
var quarterValues$T = {
  narrow: ['T1', 'T2', 'T3', 'T4'],
  abbreviated: ['1er trim.', '2ème trim.', '3ème trim.', '4ème trim.'],
  wide: ['1er trimestre', '2ème trimestre', '3ème trimestre', '4ème trimestre']
};
var monthValues$T = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juil.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'],
  wide: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
};
var dayValues$T = {
  narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  short: ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'],
  abbreviated: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],
  wide: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
};
var dayPeriodValues$T = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'mat.',
    afternoon: 'ap.m.',
    evening: 'soir',
    night: 'mat.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'matin',
    afternoon: 'après-midi',
    evening: 'soir',
    night: 'matin'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'du matin',
    afternoon: 'de l’après-midi',
    evening: 'du soir',
    night: 'du matin'
  }
};
var ordinalNumber$T = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (number === 0) return '0';
  var feminineUnits = ['year', 'week', 'hour', 'minute', 'second'];
  var suffix;
  if (number === 1) {
    suffix = unit && feminineUnits.includes(unit) ? 'ère' : 'er';
  } else {
    suffix = 'ème';
  }
  return number + suffix;
};
var localize$1K = {
  ordinalNumber: ordinalNumber$T,
  era: buildLocalizeFn({
    values: eraValues$T,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$T,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$T,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$T,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$T,
    defaultWidth: 'wide'
  })
};
var localize$1L = localize$1K;

var matchOrdinalNumberPattern$T = /^(\d+)(ième|ère|ème|er|e)?/i;
var parseOrdinalNumberPattern$T = /\d+/i;
var matchEraPatterns$T = {
  narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
  abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
};
var parseEraPatterns$T = {
  any: [/^av/i, /^ap/i]
};
var matchQuarterPatterns$T = {
  narrow: /^T?[1234]/i,
  abbreviated: /^[1234](er|ème|e)? trim\.?/i,
  wide: /^[1234](er|ème|e)? trimestre/i
};
var parseQuarterPatterns$T = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$T = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
  wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
};
var parseMonthPatterns$T = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$T = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|lu|ma|me|je|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
  wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
};
var parseDayPatterns$T = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
};
var matchDayPeriodPatterns$T = {
  narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
  any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
};
var parseDayPeriodPatterns$T = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /soir/i,
    night: /nuit/i
  }
};
var match$1K = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$T,
    parsePattern: parseOrdinalNumberPattern$T,
    valueCallback: function valueCallback(value) {
      return parseInt(value);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$T,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$T,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$T,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$T,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$T,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$T,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$T,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$T,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$T,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$T,
    defaultParseWidth: 'any'
  })
};
var match$1L = match$1K;

/**
 * @type {Locale}
 * @category Locales
 * @summary French locale.
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author François B [@fbonzon]{@link https://github.com/fbonzon}
 */
var locale$1R = {
  code: 'fr',
  formatDistance: formatDistance$1L,
  formatLong: formatLong$1R,
  formatRelative: formatRelative$1N,
  localize: localize$1L,
  match: match$1L,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1S = locale$1R;

var dateFormats$V = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'yy-MM-dd'
};
var timeFormats$V = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$V = {
  full: "{{date}} 'à' {{time}}",
  long: "{{date}} 'à' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1O = {
  date: buildFormatLongFn({
    formats: dateFormats$V,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$V,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$V,
    defaultWidth: 'full'
  })
};
var formatLong$1P = formatLong$1O;

// Same as fr
/**
 * @type {Locale}
 * @category Locales
 * @summary French locale (Canada).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author François B [@fbonzon]{@link https://github.com/fbonzon}
 * @author Gabriele Petrioli [@gpetrioli]{@link https://github.com/gpetrioli}
 */
var locale$1P = {
  code: 'fr-CA',
  formatDistance: formatDistance$1L,
  formatLong: formatLong$1P,
  formatRelative: formatRelative$1N,
  localize: localize$1L,
  match: match$1L,
  // Unique for fr-CA
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$1Q = locale$1P;

var dateFormats$U = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.y'
};
var timeFormats$U = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$U = {
  full: "{{date}} 'à' {{time}}",
  long: "{{date}} 'à' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1M = {
  date: buildFormatLongFn({
    formats: dateFormats$U,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$U,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$U,
    defaultWidth: 'full'
  })
};
var formatLong$1N = formatLong$1M;

var formatRelativeLocale$T = {
  lastWeek: "eeee 'la semaine dernière à' p",
  yesterday: "'hier à' p",
  today: "'aujourd’hui à' p",
  tomorrow: "'demain à' p'",
  nextWeek: "eeee 'la semaine prochaine à' p",
  other: 'P'
};
var formatRelative$1K = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$T[token];
};
var formatRelative$1L = formatRelative$1K;

// Same as fr
/**
 * @type {Locale}
 * @category Locales
 * @summary French locale (Switzerland).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author François B [@fbonzon]{@link https://github.com/fbonzon}
 * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
 * @author Alex Hoeing [@dcbn]{@link https://github.com/dcbn}
 */
var locale$1N = {
  code: 'fr-CH',
  formatDistance: formatDistance$1L,
  formatLong: formatLong$1N,
  formatRelative: formatRelative$1L,
  localize: localize$1L,
  match: match$1L,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1O = locale$1N;

var formatDistanceLocale$R = {
  lessThanXSeconds: {
    one: 'minder as 1 sekonde',
    other: 'minder as {{count}} sekonden'
  },
  xSeconds: {
    one: '1 sekonde',
    other: '{{count}} sekonden'
  },
  halfAMinute: 'oardel minút',
  lessThanXMinutes: {
    one: 'minder as 1 minút',
    other: 'minder as {{count}} minuten'
  },
  xMinutes: {
    one: '1 minút',
    other: '{{count}} minuten'
  },
  aboutXHours: {
    one: 'sawat 1 oere',
    other: 'sawat {{count}} oere'
  },
  xHours: {
    one: '1 oere',
    other: '{{count}} oere'
  },
  xDays: {
    one: '1 dei',
    other: '{{count}} dagen'
  },
  aboutXWeeks: {
    one: 'sawat 1 wike',
    other: 'sawat {{count}} wiken'
  },
  xWeeks: {
    one: '1 wike',
    other: '{{count}} wiken'
  },
  aboutXMonths: {
    one: 'sawat 1 moanne',
    other: 'sawat {{count}} moannen'
  },
  xMonths: {
    one: '1 moanne',
    other: '{{count}} moannen'
  },
  aboutXYears: {
    one: 'sawat 1 jier',
    other: 'sawat {{count}} jier'
  },
  xYears: {
    one: '1 jier',
    other: '{{count}} jier'
  },
  overXYears: {
    one: 'mear as 1 jier',
    other: 'mear as {{count}}s jier'
  },
  almostXYears: {
    one: 'hast 1 jier',
    other: 'hast {{count}} jier'
  }
};
var formatDistance$1I = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$R[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'oer ' + result;
    } else {
      return result + ' lyn';
    }
  }
  return result;
};
var formatDistance$1J = formatDistance$1I;

var dateFormats$T = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd-MM-y'
};
var timeFormats$T = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$T = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1K = {
  date: buildFormatLongFn({
    formats: dateFormats$T,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$T,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$T,
    defaultWidth: 'full'
  })
};
var formatLong$1L = formatLong$1K;

var formatRelativeLocale$S = {
  lastWeek: "'ôfrûne' eeee 'om' p",
  yesterday: "'juster om' p",
  today: "'hjoed om' p",
  tomorrow: "'moarn om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var formatRelative$1I = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$S[token];
};
var formatRelative$1J = formatRelative$1I;

var eraValues$S = {
  narrow: ['f.K.', 'n.K.'],
  abbreviated: ['f.Kr.', 'n.Kr.'],
  wide: ['foar Kristus', 'nei Kristus']
};
var quarterValues$S = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1e fearnsjier', '2e fearnsjier', '3e fearnsjier', '4e fearnsjier']
};
var monthValues$S = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mai.', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
  wide: ['jannewaris', 'febrewaris', 'maart', 'april', 'maaie', 'juny', 'july', 'augustus', 'septimber', 'oktober', 'novimber', 'desimber']
};
var dayValues$S = {
  narrow: ['s', 'm', 't', 'w', 't', 'f', 's'],
  short: ['si', 'mo', 'ti', 'wo', 'to', 'fr', 'so'],
  abbreviated: ['snein', 'moa', 'tii', 'woa', 'ton', 'fre', 'sneon'],
  wide: ['snein', 'moandei', 'tiisdei', 'woansdei', 'tongersdei', 'freed', 'sneon']
};
var dayPeriodValues$S = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'middei',
    morning: 'moarns',
    afternoon: 'middeis',
    evening: 'jûns',
    night: 'nachts'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'middei',
    morning: 'moarns',
    afternoon: 'middeis',
    evening: 'jûns',
    night: 'nachts'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'middei',
    morning: 'moarns',
    afternoon: 'middeis',
    evening: 'jûns',
    night: 'nachts'
  }
};
var ordinalNumber$S = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'e';
};
var localize$1I = {
  ordinalNumber: ordinalNumber$S,
  era: buildLocalizeFn({
    values: eraValues$S,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$S,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$S,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$S,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$S,
    defaultWidth: 'wide'
  })
};
var localize$1J = localize$1I;

var matchOrdinalNumberPattern$S = /^(\d+)e?/i;
var parseOrdinalNumberPattern$S = /\d+/i;
var matchEraPatterns$S = {
  narrow: /^([fn]\.? ?K\.?)/,
  abbreviated: /^([fn]\. ?Kr\.?)/,
  wide: /^((foar|nei) Kristus)/
};
var parseEraPatterns$S = {
  any: [/^f/, /^n/]
};
var matchQuarterPatterns$S = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e fearnsjier/i
};
var parseQuarterPatterns$S = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$S = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mai.|jun.|jul.|aug.|sep.|okt.|nov.|des.)/i,
  wide: /^(jannewaris|febrewaris|maart|april|maaie|juny|july|augustus|septimber|oktober|novimber|desimber)/i
};
var parseMonthPatterns$S = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^des/i]
};
var matchDayPatterns$S = {
  narrow: /^[smtwf]/i,
  short: /^(si|mo|ti|wo|to|fr|so)/i,
  abbreviated: /^(snein|moa|tii|woa|ton|fre|sneon)/i,
  wide: /^(snein|moandei|tiisdei|woansdei|tongersdei|freed|sneon)/i
};
var parseDayPatterns$S = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^sn/i, /^mo/i, /^ti/i, /^wo/i, /^to/i, /^fr/i, /^sn/i]
};
var matchDayPeriodPatterns$S = {
  any: /^(am|pm|middernacht|middeis|moarns|middei|jûns|nachts)/i
};
var parseDayPeriodPatterns$S = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^middei/i,
    morning: /moarns/i,
    afternoon: /^middeis/i,
    evening: /jûns/i,
    night: /nachts/i
  }
};
var match$1I = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$S,
    parsePattern: parseOrdinalNumberPattern$S,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$S,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$S,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$S,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$S,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$S,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$S,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$S,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$S,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$S,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$S,
    defaultParseWidth: 'any'
  })
};
var match$1J = match$1I;

/**
 * @type {Locale}
 * @category Locales
 * @summary Western Frisian locale (Netherlands).
 * @language West Frisian
 * @iso-639-2 fry
 * @author Damon Asberg [@damon02]{@link https://github.com/damon02}
 */
var locale$1L = {
  code: 'fy',
  formatDistance: formatDistance$1J,
  formatLong: formatLong$1L,
  formatRelative: formatRelative$1J,
  localize: localize$1J,
  match: match$1J,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1M = locale$1L;

var formatDistanceLocale$Q = {
  lessThanXSeconds: {
    one: 'nas lugha na diog',
    other: 'nas lugha na {{count}} diogan'
  },
  xSeconds: {
    one: '1 diog',
    two: '2 dhiog',
    twenty: '20 diog',
    other: '{{count}} diogan'
  },
  halfAMinute: 'leth mhionaid',
  lessThanXMinutes: {
    one: 'nas lugha na mionaid',
    other: 'nas lugha na {{count}} mionaidean'
  },
  xMinutes: {
    one: '1 mionaid',
    two: '2 mhionaid',
    twenty: '20 mionaid',
    other: '{{count}} mionaidean'
  },
  aboutXHours: {
    one: 'mu uair de thìde',
    other: 'mu {{count}} uairean de thìde'
  },
  xHours: {
    one: '1 uair de thìde',
    two: '2 uair de thìde',
    twenty: '20 uair de thìde',
    other: '{{count}} uairean de thìde'
  },
  xDays: {
    one: '1 là',
    other: '{{count}} là'
  },
  aboutXWeeks: {
    one: 'mu 1 seachdain',
    other: 'mu {{count}} seachdainean'
  },
  xWeeks: {
    one: '1 seachdain',
    other: '{{count}} seachdainean'
  },
  aboutXMonths: {
    one: 'mu mhìos',
    other: 'mu {{count}} mìosan'
  },
  xMonths: {
    one: '1 mìos',
    other: '{{count}} mìosan'
  },
  aboutXYears: {
    one: 'mu bhliadhna',
    other: 'mu {{count}} bliadhnaichean'
  },
  xYears: {
    one: '1 bhliadhna',
    other: '{{count}} bliadhna'
  },
  overXYears: {
    one: 'còrr is bliadhna',
    other: 'còrr is {{count}} bliadhnaichean'
  },
  almostXYears: {
    one: 'cha mhòr bliadhna',
    other: 'cha mhòr {{count}} bliadhnaichean'
  }
};
var formatDistance$1G = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$Q[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else if (count === 20 && !!tokenValue.twenty) {
    result = tokenValue.twenty;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ann an ' + result;
    } else {
      return 'o chionn ' + result;
    }
  }
  return result;
};
var formatDistance$1H = formatDistance$1G;

var dateFormats$S = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$S = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$S = {
  full: "{{date}} 'aig' {{time}}",
  long: "{{date}} 'aig' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1I = {
  date: buildFormatLongFn({
    formats: dateFormats$S,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$S,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$S,
    defaultWidth: 'full'
  })
};
var formatLong$1J = formatLong$1I;

var formatRelativeLocale$R = {
  lastWeek: "'mu dheireadh' eeee 'aig' p",
  //FIX
  yesterday: "'an-dè aig' p",
  today: "'an-diugh aig' p",
  tomorrow: "'a-màireach aig' p",
  nextWeek: "eeee 'aig' p",
  other: 'P'
};
var formatRelative$1G = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$R[token];
};
var formatRelative$1H = formatRelative$1G;

var eraValues$R = {
  narrow: ['R', 'A'],
  abbreviated: ['RC', 'AD'],
  wide: ['ro Chrìosta', 'anno domini']
};
var quarterValues$R = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['C1', 'C2', 'C3', 'C4'],
  wide: ["a' chiad chairteal", 'an dàrna cairteal', 'an treas cairteal', 'an ceathramh cairteal']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$R = {
  narrow: ['F', 'G', 'M', 'G', 'C', 'Ò', 'I', 'L', 'S', 'D', 'S', 'D'],
  abbreviated: ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'],
  wide: ['Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd']
};
var dayValues$R = {
  narrow: ['D', 'L', 'M', 'C', 'A', 'H', 'S'],
  short: ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'],
  abbreviated: ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
  wide: ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne']
};
var dayPeriodValues$R = {
  narrow: {
    am: 'm',
    pm: 'f',
    midnight: 'm.o.',
    noon: 'm.l.',
    morning: 'madainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'oidhche'
  },
  abbreviated: {
    am: 'M.',
    pm: 'F.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan là',
    morning: 'madainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'oidhche'
  },
  wide: {
    am: 'm.',
    pm: 'f.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan là',
    morning: 'madainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'oidhche'
  }
};
var formattingDayPeriodValues$I = {
  narrow: {
    am: 'm',
    pm: 'f',
    midnight: 'm.o.',
    noon: 'm.l.',
    morning: 'sa mhadainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'air an oidhche'
  },
  abbreviated: {
    am: 'M.',
    pm: 'F.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan là',
    morning: 'sa mhadainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'air an oidhche'
  },
  wide: {
    am: 'm.',
    pm: 'f.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan là',
    morning: 'sa mhadainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'air an oidhche'
  }
};
var ordinalNumber$R = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'd';
      case 2:
        return number + 'na';
    }
  }
  if (rem100 === 12) {
    return number + 'na';
  }
  return number + 'mh';
};
var localize$1G = {
  ordinalNumber: ordinalNumber$R,
  era: buildLocalizeFn({
    values: eraValues$R,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$R,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$R,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$R,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$R,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$I,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1H = localize$1G;

var matchOrdinalNumberPattern$R = /^(\d+)(d|na|tr|mh)?/i;
var parseOrdinalNumberPattern$R = /\d+/i;
var matchEraPatterns$R = {
  narrow: /^(r|a)/i,
  abbreviated: /^(r\.?\s?c\.?|r\.?\s?a\.?\s?c\.?|a\.?\s?d\.?|a\.?\s?c\.?)/i,
  wide: /^(ro Chrìosta|ron aois choitchinn|anno domini|aois choitcheann)/i
};
var parseEraPatterns$R = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$R = {
  narrow: /^[1234]/i,
  abbreviated: /^c[1234]/i,
  wide: /^[1234](cd|na|tr|mh)? cairteal/i
};
var parseQuarterPatterns$R = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$R = {
  narrow: /^[fgmcòilsd]/i,
  abbreviated: /^(faoi|gear|màrt|gibl|cèit|ògmh|iuch|lùn|sult|dàmh|samh|dùbh)/i,
  wide: /^(am faoilleach|an gearran|am màrt|an giblean|an cèitean|an t-Ògmhios|an t-Iuchar|an lùnastal|an t-Sultain|an dàmhair|an t-Samhain|an dùbhlachd)/i
};
var parseMonthPatterns$R = {
  narrow: [/^f/i, /^g/i, /^m/i, /^g/i, /^c/i, /^ò/i, /^i/i, /^l/i, /^s/i, /^d/i, /^s/i, /^d/i],
  any: [/^fa/i, /^ge/i, /^mà/i, /^gi/i, /^c/i, /^ò/i, /^i/i, /^l/i, /^su/i, /^d/i, /^sa/i, /^d/i]
};
var matchDayPatterns$R = {
  narrow: /^[dlmcahs]/i,
  short: /^(dò|lu|mà|ci|ar|ha|sa)/i,
  abbreviated: /^(did|dil|dim|dic|dia|dih|dis)/i,
  wide: /^(didòmhnaich|diluain|dimàirt|diciadain|diardaoin|dihaoine|disathairne)/i
};
var parseDayPatterns$R = {
  narrow: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i],
  any: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i]
};
var matchDayPeriodPatterns$R = {
  narrow: /^(a|p|mi|n|(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
  any: /^([ap]\.?\s?m\.?|meadhan oidhche|meadhan là|(san|aig) (madainn|feasgar|feasgar|oidhche))/i
};
var parseDayPeriodPatterns$R = {
  any: {
    am: /^m/i,
    pm: /^f/i,
    midnight: /^meadhan oidhche/i,
    noon: /^meadhan là/i,
    morning: /sa mhadainn/i,
    afternoon: /feasgar/i,
    evening: /feasgar/i,
    night: /air an oidhche/i
  }
};
var match$1G = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$R,
    parsePattern: parseOrdinalNumberPattern$R,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$R,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$R,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$R,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$R,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$R,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$R,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$R,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$R,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$R,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$R,
    defaultParseWidth: 'any'
  })
};
var match$1H = match$1G;

/**
 * @type {Locale}
 * @category Locales
 * @summary Scottish Gaelic.
 * @language Scottish Gaelic
 * @iso-639-2 gla
 * @author Lee Driscoll [@leedriscoll]{@link https://github.com/leedriscoll}
 */
var locale$1J = {
  code: 'gd',
  formatDistance: formatDistance$1H,
  formatLong: formatLong$1J,
  formatRelative: formatRelative$1H,
  localize: localize$1H,
  match: match$1H,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$1K = locale$1J;

var formatDistanceLocale$P = {
  lessThanXSeconds: {
    one: 'menos dun segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'medio minuto',
  lessThanXMinutes: {
    one: 'menos dun minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'arredor dunha hora',
    other: 'arredor de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 día',
    other: '{{count}} días'
  },
  aboutXWeeks: {
    one: 'arredor dunha semana',
    other: 'arredor de {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'arredor de 1 mes',
    other: 'arredor de {{count}} meses'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'arredor dun ano',
    other: 'arredor de {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'máis dun ano',
    other: 'máis de {{count}} anos'
  },
  almostXYears: {
    one: 'case un ano',
    other: 'case {{count}} anos'
  }
};
var formatDistance$1E = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$P[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'hai ' + result;
    }
  }
  return result;
};
var formatDistance$1F = formatDistance$1E;

var dateFormats$R = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$R = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$R = {
  full: "{{date}} 'ás' {{time}}",
  long: "{{date}} 'ás' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1G = {
  date: buildFormatLongFn({
    formats: dateFormats$R,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$R,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$R,
    defaultWidth: 'full'
  })
};
var formatLong$1H = formatLong$1G;

var formatRelativeLocale$Q = {
  lastWeek: "'o' eeee 'pasado á' LT",
  yesterday: "'onte á' p",
  today: "'hoxe á' p",
  tomorrow: "'mañá á' p",
  nextWeek: "eeee 'á' p",
  other: 'P'
};
var formatRelativeLocalePlural = {
  lastWeek: "'o' eeee 'pasado ás' p",
  yesterday: "'onte ás' p",
  today: "'hoxe ás' p",
  tomorrow: "'mañá ás' p",
  nextWeek: "eeee 'ás' p",
  other: 'P'
};
var formatRelative$1E = function formatRelative(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelativeLocalePlural[token];
  }
  return formatRelativeLocale$Q[token];
};
var formatRelative$1F = formatRelative$1E;

var eraValues$Q = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'despois de cristo']
};
var quarterValues$Q = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$Q = {
  narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['xan', 'feb', 'mar', 'abr', 'mai', 'xun', 'xul', 'ago', 'set', 'out', 'nov', 'dec'],
  wide: ['xaneiro', 'febreiro', 'marzo', 'abril', 'maio', 'xuño', 'xullo', 'agosto', 'setembro', 'outubro', 'novembro', 'decembro']
};
var dayValues$Q = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['do', 'lu', 'ma', 'me', 'xo', 've', 'sa'],
  abbreviated: ['dom', 'lun', 'mar', 'mer', 'xov', 'ven', 'sab'],
  wide: ['domingo', 'luns', 'martes', 'mércores', 'xoves', 'venres', 'sábado']
};
var dayPeriodValues$Q = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'mañá',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoite',
    noon: 'mediodía',
    morning: 'mañá',
    afternoon: 'tarde',
    evening: 'tardiña',
    night: 'noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoite',
    noon: 'mediodía',
    morning: 'mañá',
    afternoon: 'tarde',
    evening: 'tardiña',
    night: 'noite'
  }
};
var formattingDayPeriodValues$H = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'da mañá',
    afternoon: 'da tarde',
    evening: 'da tardiña',
    night: 'da noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoite',
    noon: 'mediodía',
    morning: 'da mañá',
    afternoon: 'da tarde',
    evening: 'da tardiña',
    night: 'da noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoite',
    noon: 'mediodía',
    morning: 'da mañá',
    afternoon: 'da tarde',
    evening: 'da tardiña',
    night: 'da noite'
  }
};
var ordinalNumber$Q = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'º';
};
var localize$1E = {
  ordinalNumber: ordinalNumber$Q,
  era: buildLocalizeFn({
    values: eraValues$Q,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$Q,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$Q,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$Q,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$Q,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$H,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1F = localize$1E;

var matchOrdinalNumberPattern$Q = /^(\d+)(º)?/i;
var parseOrdinalNumberPattern$Q = /\d+/i;
var matchEraPatterns$Q = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era com[uú]n|despois de cristo|era com[uú]n)/i
};
var parseEraPatterns$Q = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes da era com[uú]n)/i, /^(despois de cristo|era com[uú]n)/i]
};
var matchQuarterPatterns$Q = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns$Q = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$Q = {
  narrow: /^[xfmasond]/i,
  abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
  wide: /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro)/i
};
var parseMonthPatterns$Q = {
  narrow: [/^x/i, /^f/i, /^m/i, /^a/i, /^m/i, /^x/i, /^x/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^xan/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^xun/i, /^xul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dec/i]
};
var matchDayPatterns$Q = {
  narrow: /^[dlmxvs]/i,
  short: /^(do|lu|ma|me|xo|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
  wide: /^(domingo|luns|martes|m[eé]rcores|xoves|venres|s[áa]bado)/i
};
var parseDayPatterns$Q = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^x/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^me/i, /^xo/i, /^ve/i, /^sa/i]
};
var matchDayPeriodPatterns$Q = {
  narrow: /^(a|p|mn|md|(da|[aá]s) (mañ[aá]|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|medianoite|mediod[ií]a|(da|[aá]s) (mañ[aá]|tarde|noite))/i
};
var parseDayPeriodPatterns$Q = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /mañ[aá]/i,
    afternoon: /tarde/i,
    evening: /tardiña/i,
    night: /noite/i
  }
};
var match$1E = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$Q,
    parsePattern: parseOrdinalNumberPattern$Q,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$Q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$Q,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$Q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$Q,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$Q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$Q,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$Q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$Q,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$Q,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$Q,
    defaultParseWidth: 'any'
  })
};
var match$1F = match$1E;

/**
 * @type {Locale}
 * @category Locales
 * @summary Galician locale.
 * @language Galician
 * @iso-639-2 glg
 * @author Alberto Doval - Cocodin Technology[@cocodinTech]{@link https://github.com/cocodinTech}
 * @author Fidel Pita [@fidelpita]{@link https://github.com/fidelpita}
 */
var locale$1H = {
  code: 'gl',
  formatDistance: formatDistance$1F,
  formatLong: formatLong$1H,
  formatRelative: formatRelative$1F,
  localize: localize$1F,
  match: match$1F,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1I = locale$1H;

// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
var formatDistanceLocale$O = {
  lessThanXSeconds: {
    one: 'હમણાં',
    // CLDR #1461
    other: '​આશરે {{count}} સેકંડ'
  },
  xSeconds: {
    one: '1 સેકંડ',
    other: '{{count}} સેકંડ'
  },
  halfAMinute: 'અડધી મિનિટ',
  lessThanXMinutes: {
    one: 'આ મિનિટ',
    // CLDR #1448
    other: '​આશરે {{count}} મિનિટ'
  },
  xMinutes: {
    one: '1 મિનિટ',
    other: '{{count}} મિનિટ'
  },
  aboutXHours: {
    one: '​આશરે 1 કલાક',
    other: '​આશરે {{count}} કલાક'
  },
  xHours: {
    one: '1 કલાક',
    other: '{{count}} કલાક'
  },
  xDays: {
    one: '1 દિવસ',
    other: '{{count}} દિવસ'
  },
  aboutXWeeks: {
    one: 'આશરે 1 અઠવાડિયું',
    other: 'આશરે {{count}} અઠવાડિયા'
  },
  xWeeks: {
    one: '1 અઠવાડિયું',
    other: '{{count}} અઠવાડિયા'
  },
  aboutXMonths: {
    one: 'આશરે 1 મહિનો',
    other: 'આશરે {{count}} મહિના'
  },
  xMonths: {
    one: '1 મહિનો',
    other: '{{count}} મહિના'
  },
  aboutXYears: {
    one: 'આશરે 1 વર્ષ',
    other: 'આશરે {{count}} વર્ષ'
  },
  xYears: {
    one: '1 વર્ષ',
    other: '{{count}} વર્ષ'
  },
  overXYears: {
    one: '1 વર્ષથી વધુ',
    other: '{{count}} વર્ષથી વધુ'
  },
  almostXYears: {
    one: 'લગભગ 1 વર્ષ',
    other: 'લગભગ {{count}} વર્ષ'
  }
};
var formatDistance$1C = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$O[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'માં';
    } else {
      return result + ' પહેલાં';
    }
  }
  return result;
};
var formatDistance$1D = formatDistance$1C;

var dateFormats$Q = {
  full: 'EEEE, d MMMM, y',
  // CLDR #1825
  long: 'd MMMM, y',
  // CLDR #1826
  medium: 'd MMM, y',
  // CLDR #1827
  short: 'd/M/yy' // CLDR #1828
};

var timeFormats$Q = {
  full: 'hh:mm:ss a zzzz',
  // CLDR #1829
  long: 'hh:mm:ss a z',
  // CLDR #1830
  medium: 'hh:mm:ss a',
  // CLDR #1831
  short: 'hh:mm a' // CLDR #1832
};

var dateTimeFormats$Q = {
  full: '{{date}} {{time}}',
  // CLDR #1833
  long: '{{date}} {{time}}',
  // CLDR #1834
  medium: '{{date}} {{time}}',
  // CLDR #1835
  short: '{{date}} {{time}}' // CLDR #1836
};

var formatLong$1E = {
  date: buildFormatLongFn({
    formats: dateFormats$Q,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$Q,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$Q,
    defaultWidth: 'full'
  })
};
var formatLong$1F = formatLong$1E;

// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html

var formatRelativeLocale$P = {
  lastWeek: "'પાછલા' eeee p",
  // CLDR #1384
  yesterday: "'ગઈકાલે' p",
  // CLDR #1409
  today: "'આજે' p",
  // CLDR #1410
  tomorrow: "'આવતીકાલે' p",
  // CLDR #1411
  nextWeek: 'eeee p',
  // CLDR #1386
  other: 'P'
};
var formatRelative$1C = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$P[token];
};
var formatRelative$1D = formatRelative$1C;

// #1621 - #1630
var eraValues$P = {
  narrow: ['ઈસપૂ', 'ઈસ'],
  abbreviated: ['ઈ.સ.પૂર્વે', 'ઈ.સ.'],
  wide: ['ઈસવીસન પૂર્વે', 'ઈસવીસન']
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1631 - #1654
var quarterValues$P = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1લો ત્રિમાસ', '2જો ત્રિમાસ', '3જો ત્રિમાસ', '4થો ત્રિમાસ']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1655 - #1726
var monthValues$P = {
  narrow: ['જા', 'ફે', 'મા', 'એ', 'મે', 'જૂ', 'જુ', 'ઓ', 'સ', 'ઓ', 'ન', 'ડિ'],
  abbreviated: ['જાન્યુ', 'ફેબ્રુ', 'માર્ચ', 'એપ્રિલ', 'મે', 'જૂન', 'જુલાઈ', 'ઑગસ્ટ', 'સપ્ટે', 'ઓક્ટો', 'નવે', 'ડિસે'],
  wide: ['જાન્યુઆરી', 'ફેબ્રુઆરી', 'માર્ચ', 'એપ્રિલ', 'મે', 'જૂન', 'જુલાઇ', 'ઓગસ્ટ', 'સપ્ટેમ્બર', 'ઓક્ટોબર', 'નવેમ્બર', 'ડિસેમ્બર']
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1727 - #1768
var dayValues$P = {
  narrow: ['ર', 'સો', 'મં', 'બુ', 'ગુ', 'શુ', 'શ'],
  short: ['ર', 'સો', 'મં', 'બુ', 'ગુ', 'શુ', 'શ'],
  abbreviated: ['રવિ', 'સોમ', 'મંગળ', 'બુધ', 'ગુરુ', 'શુક્ર', 'શનિ'],
  wide: ['રવિવાર' /* Sunday */, 'સોમવાર' /* Monday */, 'મંગળવાર' /* Tuesday */, 'બુધવાર' /* Wednesday */, 'ગુરુવાર' /* Thursday */, 'શુક્રવાર' /* Friday */, 'શનિવાર' /* Saturday */]
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1783 - #1824
var dayPeriodValues$P = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'મ.રાત્રિ',
    noon: 'બ.',
    morning: 'સવારે',
    afternoon: 'બપોરે',
    evening: 'સાંજે',
    night: 'રાત્રે'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '​મધ્યરાત્રિ',
    noon: 'બપોરે',
    morning: 'સવારે',
    afternoon: 'બપોરે',
    evening: 'સાંજે',
    night: 'રાત્રે'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: '​મધ્યરાત્રિ',
    noon: 'બપોરે',
    morning: 'સવારે',
    afternoon: 'બપોરે',
    evening: 'સાંજે',
    night: 'રાત્રે'
  }
};
var formattingDayPeriodValues$G = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'મ.રાત્રિ',
    noon: 'બપોરે',
    morning: 'સવારે',
    afternoon: 'બપોરે',
    evening: 'સાંજે',
    night: 'રાત્રે'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'મધ્યરાત્રિ',
    noon: 'બપોરે',
    morning: 'સવારે',
    afternoon: 'બપોરે',
    evening: 'સાંજે',
    night: 'રાત્રે'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: '​મધ્યરાત્રિ',
    noon: 'બપોરે',
    morning: 'સવારે',
    afternoon: 'બપોરે',
    evening: 'સાંજે',
    night: 'રાત્રે'
  }
};
var ordinalNumber$P = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$1C = {
  ordinalNumber: ordinalNumber$P,
  era: buildLocalizeFn({
    values: eraValues$P,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$P,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$P,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$P,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$P,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$G,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1D = localize$1C;

var matchOrdinalNumberPattern$P = /^(\d+)(લ|જ|થ|ઠ્ઠ|મ)?/i;
var parseOrdinalNumberPattern$P = /\d+/i;
var matchEraPatterns$P = {
  narrow: /^(ઈસપૂ|ઈસ)/i,
  abbreviated: /^(ઈ\.સ\.પૂર્વે|ઈ\.સ\.)/i,
  wide: /^(ઈસવીસન\sપૂર્વે|ઈસવીસન)/i
};
var parseEraPatterns$P = {
  any: [/^ઈસપૂ/i, /^ઈસ/i]
};
var matchQuarterPatterns$P = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](લો|જો|થો)? ત્રિમાસ/i
};
var parseQuarterPatterns$P = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$P = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[જાફેમાએમેજૂજુઓસઓનડિ]/i,
  abbreviated: /^(જાન્યુ|ફેબ્રુ|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઈ|ઑગસ્ટ|સપ્ટે|ઓક્ટો|નવે|ડિસે)/i,
  wide: /^(જાન્યુઆરી|ફેબ્રુઆરી|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઇ|ઓગસ્ટ|સપ્ટેમ્બર|ઓક્ટોબર|નવેમ્બર|ડિસેમ્બર)/i
};
var parseMonthPatterns$P = {
  narrow: [/^જા/i, /^ફે/i, /^મા/i, /^એ/i, /^મે/i, /^જૂ/i, /^જુ/i, /^ઑગ/i, /^સ/i, /^ઓક્ટો/i, /^ન/i, /^ડિ/i],
  any: [/^જા/i, /^ફે/i, /^મા/i, /^એ/i, /^મે/i, /^જૂ/i, /^જુ/i, /^ઑગ/i, /^સ/i, /^ઓક્ટો/i, /^ન/i, /^ડિ/i]
};
var matchDayPatterns$P = {
  narrow: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
  short: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
  abbreviated: /^(રવિ|સોમ|મંગળ|બુધ|ગુરુ|શુક્ર|શનિ)/i,
  wide: /^(રવિવાર|સોમવાર|મંગળવાર|બુધવાર|ગુરુવાર|શુક્રવાર|શનિવાર)/i
};
var parseDayPatterns$P = {
  narrow: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i],
  any: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i]
};
var matchDayPeriodPatterns$P = {
  narrow: /^(a|p|મ\.?|સ|બ|સાં|રા)/i,
  any: /^(a|p|મ\.?|સ|બ|સાં|રા)/i
};
var parseDayPeriodPatterns$P = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^મ\.?/i,
    noon: /^બ/i,
    morning: /સ/i,
    afternoon: /બ/i,
    evening: /સાં/i,
    night: /રા/i
  }
};
var match$1C = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$P,
    parsePattern: parseOrdinalNumberPattern$P,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$P,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$P,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$P,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$P,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$P,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$P,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$P,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$P,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$P,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$P,
    defaultParseWidth: 'any'
  })
};
var match$1D = match$1C;

/**
 * @type {Locale}
 * @category Locales
 * @summary Gujarati locale (India).
 * @language Gujarati
 * @iso-639-2 guj
 * @author Manaday Mavani [@ManadayM]{@link https://github.com/manadaym}
 */
var locale$1F = {
  code: 'gu',
  formatDistance: formatDistance$1D,
  formatLong: formatLong$1F,
  formatRelative: formatRelative$1D,
  localize: localize$1D,
  match: match$1D,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1G = locale$1F;

var formatDistanceLocale$N = {
  lessThanXSeconds: {
    one: 'פחות משנייה',
    two: 'פחות משתי שניות',
    other: 'פחות מ־{{count}} שניות'
  },
  xSeconds: {
    one: 'שנייה',
    two: 'שתי שניות',
    other: '{{count}} שניות'
  },
  halfAMinute: 'חצי דקה',
  lessThanXMinutes: {
    one: 'פחות מדקה',
    two: 'פחות משתי דקות',
    other: 'פחות מ־{{count}} דקות'
  },
  xMinutes: {
    one: 'דקה',
    two: 'שתי דקות',
    other: '{{count}} דקות'
  },
  aboutXHours: {
    one: 'כשעה',
    two: 'כשעתיים',
    other: 'כ־{{count}} שעות'
  },
  xHours: {
    one: 'שעה',
    two: 'שעתיים',
    other: '{{count}} שעות'
  },
  xDays: {
    one: 'יום',
    two: 'יומיים',
    other: '{{count}} ימים'
  },
  aboutXWeeks: {
    one: 'כשבוע',
    two: 'כשבועיים',
    other: 'כ־{{count}} שבועות'
  },
  xWeeks: {
    one: 'שבוע',
    two: 'שבועיים',
    other: '{{count}} שבועות'
  },
  aboutXMonths: {
    one: 'כחודש',
    two: 'כחודשיים',
    other: 'כ־{{count}} חודשים'
  },
  xMonths: {
    one: 'חודש',
    two: 'חודשיים',
    other: '{{count}} חודשים'
  },
  aboutXYears: {
    one: 'כשנה',
    two: 'כשנתיים',
    other: 'כ־{{count}} שנים'
  },
  xYears: {
    one: 'שנה',
    two: 'שנתיים',
    other: '{{count}} שנים'
  },
  overXYears: {
    one: 'יותר משנה',
    two: 'יותר משנתיים',
    other: 'יותר מ־{{count}} שנים'
  },
  almostXYears: {
    one: 'כמעט שנה',
    two: 'כמעט שנתיים',
    other: 'כמעט {{count}} שנים'
  }
};
var formatDistance$1A = function formatDistance(token, count, options) {
  // Return word instead of `in one day` or `one day ago`
  if (token === 'xDays' && options !== null && options !== void 0 && options.addSuffix && count <= 2) {
    if (options.comparison && options.comparison > 0) {
      return count === 1 ? 'מחר' : 'מחרתיים';
    }
    return count === 1 ? 'אתמול' : 'שלשום';
  }
  var result;
  var tokenValue = formatDistanceLocale$N[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'בעוד ' + result;
    } else {
      return 'לפני ' + result;
    }
  }
  return result;
};
var formatDistance$1B = formatDistance$1A;

var dateFormats$P = {
  full: 'EEEE, d בMMMM y',
  long: 'd בMMMM y',
  medium: 'd בMMM y',
  short: 'd.M.y'
};
var timeFormats$P = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$P = {
  full: "{{date}} 'בשעה' {{time}}",
  long: "{{date}} 'בשעה' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1C = {
  date: buildFormatLongFn({
    formats: dateFormats$P,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$P,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$P,
    defaultWidth: 'full'
  })
};
var formatLong$1D = formatLong$1C;

var formatRelativeLocale$O = {
  lastWeek: "eeee 'שעבר בשעה' p",
  yesterday: "'אתמול בשעה' p",
  today: "'היום בשעה' p",
  tomorrow: "'מחר בשעה' p",
  nextWeek: "eeee 'בשעה' p",
  other: 'P'
};
var formatRelative$1A = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$O[token];
};
var formatRelative$1B = formatRelative$1A;

var eraValues$O = {
  narrow: ['לפנה״ס', 'לספירה'],
  abbreviated: ['לפנה״ס', 'לספירה'],
  wide: ['לפני הספירה', 'לספירה']
};
var quarterValues$O = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['רבעון 1', 'רבעון 2', 'רבעון 3', 'רבעון 4']
};
var monthValues$O = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['ינו׳', 'פבר׳', 'מרץ', 'אפר׳', 'מאי', 'יוני', 'יולי', 'אוג׳', 'ספט׳', 'אוק׳', 'נוב׳', 'דצמ׳'],
  wide: ['ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני', 'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר']
};
var dayValues$O = {
  narrow: ['א׳', 'ב׳', 'ג׳', 'ד׳', 'ה׳', 'ו׳', 'ש׳'],
  short: ['א׳', 'ב׳', 'ג׳', 'ד׳', 'ה׳', 'ו׳', 'ש׳'],
  abbreviated: ['יום א׳', 'יום ב׳', 'יום ג׳', 'יום ד׳', 'יום ה׳', 'יום ו׳', 'שבת'],
  wide: ['יום ראשון', 'יום שני', 'יום שלישי', 'יום רביעי', 'יום חמישי', 'יום שישי', 'יום שבת']
};
var dayPeriodValues$O = {
  narrow: {
    am: 'לפנה״צ',
    pm: 'אחה״צ',
    midnight: 'חצות',
    noon: 'צהריים',
    morning: 'בוקר',
    afternoon: 'אחר הצהריים',
    evening: 'ערב',
    night: 'לילה'
  },
  abbreviated: {
    am: 'לפנה״צ',
    pm: 'אחה״צ',
    midnight: 'חצות',
    noon: 'צהריים',
    morning: 'בוקר',
    afternoon: 'אחר הצהריים',
    evening: 'ערב',
    night: 'לילה'
  },
  wide: {
    am: 'לפנה״צ',
    pm: 'אחה״צ',
    midnight: 'חצות',
    noon: 'צהריים',
    morning: 'בוקר',
    afternoon: 'אחר הצהריים',
    evening: 'ערב',
    night: 'לילה'
  }
};
var formattingDayPeriodValues$F = {
  narrow: {
    am: 'לפנה״צ',
    pm: 'אחה״צ',
    midnight: 'חצות',
    noon: 'צהריים',
    morning: 'בבוקר',
    afternoon: 'בצהריים',
    evening: 'בערב',
    night: 'בלילה'
  },
  abbreviated: {
    am: 'לפנה״צ',
    pm: 'אחה״צ',
    midnight: 'חצות',
    noon: 'צהריים',
    morning: 'בבוקר',
    afternoon: 'אחר הצהריים',
    evening: 'בערב',
    night: 'בלילה'
  },
  wide: {
    am: 'לפנה״צ',
    pm: 'אחה״צ',
    midnight: 'חצות',
    noon: 'צהריים',
    morning: 'בבוקר',
    afternoon: 'אחר הצהריים',
    evening: 'בערב',
    night: 'בלילה'
  }
};
var ordinalNumber$O = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);

  // We only show words till 10
  if (number <= 0 || number > 10) return String(number);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var isFemale = ['year', 'hour', 'minute', 'second'].indexOf(unit) >= 0;
  var male = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שביעי', 'שמיני', 'תשיעי', 'עשירי'];
  var female = ['ראשונה', 'שנייה', 'שלישית', 'רביעית', 'חמישית', 'שישית', 'שביעית', 'שמינית', 'תשיעית', 'עשירית'];
  var index = number - 1;
  return isFemale ? female[index] : male[index];
};
var localize$1A = {
  ordinalNumber: ordinalNumber$O,
  era: buildLocalizeFn({
    values: eraValues$O,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$O,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$O,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$O,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$O,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$F,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1B = localize$1A;

var matchOrdinalNumberPattern$O = /^(\d+|(ראשון|שני|שלישי|רביעי|חמישי|שישי|שביעי|שמיני|תשיעי|עשירי|ראשונה|שנייה|שלישית|רביעית|חמישית|שישית|שביעית|שמינית|תשיעית|עשירית))/i;
var parseOrdinalNumberPattern$O = /^(\d+|רא|שנ|של|רב|ח|שי|שב|שמ|ת|ע)/i;
var matchEraPatterns$O = {
  narrow: /^ל(ספירה|פנה״ס)/i,
  abbreviated: /^ל(ספירה|פנה״ס)/i,
  wide: /^ל(פני ה)?ספירה/i
};
var parseEraPatterns$O = {
  any: [/^לפ/i, /^לס/i]
};
var matchQuarterPatterns$O = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^רבעון [1234]/i
};
var parseQuarterPatterns$O = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$O = {
  narrow: /^\d+/i,
  abbreviated: /^(ינו|פבר|מרץ|אפר|מאי|יוני|יולי|אוג|ספט|אוק|נוב|דצמ)׳?/i,
  wide: /^(ינואר|פברואר|מרץ|אפריל|מאי|יוני|יולי|אוגוסט|ספטמבר|אוקטובר|נובמבר|דצמבר)/i
};
var parseMonthPatterns$O = {
  narrow: [/^1$/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ינ/i, /^פ/i, /^מר/i, /^אפ/i, /^מא/i, /^יונ/i, /^יול/i, /^אוג/i, /^ס/i, /^אוק/i, /^נ/i, /^ד/i]
};
var matchDayPatterns$O = {
  narrow: /^[אבגדהוש]׳/i,
  short: /^[אבגדהוש]׳/i,
  abbreviated: /^(שבת|יום (א|ב|ג|ד|ה|ו)׳)/i,
  wide: /^יום (ראשון|שני|שלישי|רביעי|חמישי|שישי|שבת)/i
};
var parseDayPatterns$O = {
  abbreviated: [/א׳$/i, /ב׳$/i, /ג׳$/i, /ד׳$/i, /ה׳$/i, /ו׳$/i, /^ש/i],
  wide: [/ן$/i, /ני$/i, /לישי$/i, /עי$/i, /מישי$/i, /שישי$/i, /ת$/i],
  any: [/^א/i, /^ב/i, /^ג/i, /^ד/i, /^ה/i, /^ו/i, /^ש/i]
};
var matchDayPeriodPatterns$O = {
  any: /^(אחר ה|ב)?(חצות|צהריים|בוקר|ערב|לילה|אחה״צ|לפנה״צ)/i
};
var parseDayPeriodPatterns$O = {
  any: {
    am: /^לפ/i,
    pm: /^אחה/i,
    midnight: /^ח/i,
    noon: /^צ/i,
    morning: /בוקר/i,
    afternoon: /בצ|אחר/i,
    evening: /ערב/i,
    night: /לילה/i
  }
};
var ordinalName = ['רא', 'שנ', 'של', 'רב', 'ח', 'שי', 'שב', 'שמ', 'ת', 'ע'];
var match$1A = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$O,
    parsePattern: parseOrdinalNumberPattern$O,
    valueCallback: function valueCallback(value) {
      var number = parseInt(value, 10);
      return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$O,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$O,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$O,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$O,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$O,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$O,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$O,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$O,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$O,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$O,
    defaultParseWidth: 'any'
  })
};
var match$1B = match$1A;

/**
 * @type {Locale}
 * @category Locales
 * @summary Hebrew locale.
 * @language Hebrew
 * @iso-639-2 heb
 * @author Nir Lahad [@nirlah]{@link https://github.com/nirlah}
 */
var locale$1D = {
  code: 'he',
  formatDistance: formatDistance$1B,
  formatLong: formatLong$1D,
  formatRelative: formatRelative$1B,
  localize: localize$1B,
  match: match$1B,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$1E = locale$1D;

var numberValues = {
  locale: {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
  },
  number: {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
  }
};

// CLDR #1585 - #1592
var eraValues$N = {
  narrow: ['ईसा-पूर्व', 'ईस्वी'],
  abbreviated: ['ईसा-पूर्व', 'ईस्वी'],
  wide: ['ईसा-पूर्व', 'ईसवी सन']
};

// CLDR #1593 - #1616
var quarterValues$N = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ति1', 'ति2', 'ति3', 'ति4'],
  wide: ['पहली तिमाही', 'दूसरी तिमाही', 'तीसरी तिमाही', 'चौथी तिमाही']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
// https://www.unicode.org/cldr/charts/32/summary/hi.html
// CLDR #1617 - #1688
var monthValues$N = {
  narrow: ['ज', 'फ़', 'मा', 'अ', 'मई', 'जू', 'जु', 'अग', 'सि', 'अक्टू', 'न', 'दि'],
  abbreviated: ['जन', 'फ़र', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुल', 'अग', 'सित', 'अक्टू', 'नव', 'दिस'],
  wide: ['जनवरी', 'फ़रवरी', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुलाई', 'अगस्त', 'सितंबर', 'अक्टूबर', 'नवंबर', 'दिसंबर']
};

// CLDR #1689 - #1744
var dayValues$N = {
  narrow: ['र', 'सो', 'मं', 'बु', 'गु', 'शु', 'श'],
  short: ['र', 'सो', 'मं', 'बु', 'गु', 'शु', 'श'],
  abbreviated: ['रवि', 'सोम', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि'],
  wide: ['रविवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'गुरुवार', 'शुक्रवार', 'शनिवार']
};
var dayPeriodValues$N = {
  narrow: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  abbreviated: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  wide: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  }
};
var formattingDayPeriodValues$E = {
  narrow: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  abbreviated: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  wide: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  }
};
var ordinalNumber$N = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return numberToLocale(number);
};
function localeToNumber(locale) {
  var enNumber = locale.toString().replace(/[१२३४५६७८९०]/g, function (match) {
    return numberValues.number[match];
  });
  return Number(enNumber);
}
function numberToLocale(enNumber) {
  return enNumber.toString().replace(/\d/g, function (match) {
    return numberValues.locale[match];
  });
}
var localize$1y = {
  ordinalNumber: ordinalNumber$N,
  era: buildLocalizeFn({
    values: eraValues$N,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$N,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$N,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$N,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$N,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$E,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1z = localize$1y;

var formatDistanceLocale$M = {
  lessThanXSeconds: {
    one: '१ सेकंड से कम',
    // CLDR #1310
    other: '{{count}} सेकंड से कम'
  },
  xSeconds: {
    one: '१ सेकंड',
    other: '{{count}} सेकंड'
  },
  halfAMinute: 'आधा मिनट',
  lessThanXMinutes: {
    one: '१ मिनट से कम',
    other: '{{count}} मिनट से कम'
  },
  xMinutes: {
    one: '१ मिनट',
    // CLDR #1307
    other: '{{count}} मिनट'
  },
  aboutXHours: {
    one: 'लगभग १ घंटा',
    other: 'लगभग {{count}} घंटे'
  },
  xHours: {
    one: '१ घंटा',
    // CLDR #1304
    other: '{{count}} घंटे' // CLDR #4467
  },

  xDays: {
    one: '१ दिन',
    // CLDR #1286
    other: '{{count}} दिन'
  },
  aboutXWeeks: {
    one: 'लगभग १ सप्ताह',
    other: 'लगभग {{count}} सप्ताह'
  },
  xWeeks: {
    one: '१ सप्ताह',
    other: '{{count}} सप्ताह'
  },
  aboutXMonths: {
    one: 'लगभग १ महीना',
    other: 'लगभग {{count}} महीने'
  },
  xMonths: {
    one: '१ महीना',
    other: '{{count}} महीने'
  },
  aboutXYears: {
    one: 'लगभग १ वर्ष',
    other: 'लगभग {{count}} वर्ष' // CLDR #4823
  },

  xYears: {
    one: '१ वर्ष',
    other: '{{count}} वर्ष'
  },
  overXYears: {
    one: '१ वर्ष से अधिक',
    other: '{{count}} वर्ष से अधिक'
  },
  almostXYears: {
    one: 'लगभग १ वर्ष',
    other: 'लगभग {{count}} वर्ष'
  }
};
var formatDistance$1y = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$M[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', numberToLocale(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'मे ';
    } else {
      return result + ' पहले';
    }
  }
  return result;
};
var formatDistance$1z = formatDistance$1y;

var dateFormats$O = {
  full: 'EEEE, do MMMM, y',
  // CLDR #1787
  long: 'do MMMM, y',
  // CLDR #1788
  medium: 'd MMM, y',
  // CLDR #1789
  short: 'dd/MM/yyyy' // CLDR #1790
};

var timeFormats$O = {
  full: 'h:mm:ss a zzzz',
  // CLDR #1791
  long: 'h:mm:ss a z',
  // CLDR #1792
  medium: 'h:mm:ss a',
  // CLDR #1793
  short: 'h:mm a' // CLDR #1794
};

var dateTimeFormats$O = {
  full: "{{date}} 'को' {{time}}",
  // CLDR #1795
  long: "{{date}} 'को' {{time}}",
  // CLDR #1796
  medium: '{{date}}, {{time}}',
  // CLDR #1797
  short: '{{date}}, {{time}}' // CLDR #1798
};

var formatLong$1A = {
  date: buildFormatLongFn({
    formats: dateFormats$O,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$O,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$O,
    defaultWidth: 'full'
  })
};
var formatLong$1B = formatLong$1A;

var formatRelativeLocale$N = {
  lastWeek: "'पिछले' eeee p",
  yesterday: "'कल' p",
  today: "'आज' p",
  tomorrow: "'कल' p",
  nextWeek: "eeee 'को' p",
  other: 'P'
};
var formatRelative$1y = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$N[token];
};
var formatRelative$1z = formatRelative$1y;

var matchOrdinalNumberPattern$N = /^[०१२३४५६७८९]+/i;
var parseOrdinalNumberPattern$N = /^[०१२३४५६७८९]+/i;
var matchEraPatterns$N = {
  narrow: /^(ईसा-पूर्व|ईस्वी)/i,
  abbreviated: /^(ईसा\.?\s?पूर्व\.?|ईसा\.?)/i,
  wide: /^(ईसा-पूर्व|ईसवी पूर्व|ईसवी सन|ईसवी)/i
};
var parseEraPatterns$N = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$N = {
  narrow: /^[1234]/i,
  abbreviated: /^ति[1234]/i,
  wide: /^[1234](पहली|दूसरी|तीसरी|चौथी)? तिमाही/i
};
var parseQuarterPatterns$N = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$N = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[जफ़माअप्मईजूनजुअगसिअक्तनदि]/i,
  abbreviated: /^(जन|फ़र|मार्च|अप्|मई|जून|जुल|अग|सित|अक्तू|नव|दिस)/i,
  wide: /^(जनवरी|फ़रवरी|मार्च|अप्रैल|मई|जून|जुलाई|अगस्त|सितंबर|अक्तूबर|नवंबर|दिसंबर)/i
};
var parseMonthPatterns$N = {
  narrow: [/^ज/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^न/i, /^दि/i],
  any: [/^जन/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^नव/i, /^दिस/i]
};
var matchDayPatterns$N = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[रविसोममंगलबुधगुरुशुक्रशनि]/i,
  short: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
  abbreviated: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
  wide: /^(रविवार|सोमवार|मंगलवार|बुधवार|गुरुवार|शुक्रवार|शनिवार)/i
};
var parseDayPatterns$N = {
  narrow: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i],
  any: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i]
};
var matchDayPeriodPatterns$N = {
  narrow: /^(पू|अ|म|द.\?|सु|दो|शा|रा)/i,
  any: /^(पूर्वाह्न|अपराह्न|म|द.\?|सु|दो|शा|रा)/i
};
var parseDayPeriodPatterns$N = {
  any: {
    am: /^पूर्वाह्न/i,
    pm: /^अपराह्न/i,
    midnight: /^मध्य/i,
    noon: /^दो/i,
    morning: /सु/i,
    afternoon: /दो/i,
    evening: /शा/i,
    night: /रा/i
  }
};
var match$1y = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$N,
    parsePattern: parseOrdinalNumberPattern$N,
    valueCallback: localeToNumber
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$N,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$N,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$N,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$N,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$N,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$N,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$N,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$N,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$N,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$N,
    defaultParseWidth: 'any'
  })
};
var match$1z = match$1y;

/**
 * @type {Locale}
 * @category Locales
 * @summary Hindi locale (India).
 * @language Hindi
 * @iso-639-2 hin
 * @author Mukesh Mandiwal [@mukeshmandiwal]{@link https://github.com/mukeshmandiwal}
 */
var locale$1B = {
  code: 'hi',
  formatDistance: formatDistance$1z,
  formatLong: formatLong$1B,
  formatRelative: formatRelative$1z,
  localize: localize$1z,
  match: match$1z,
  options: {
    weekStartsOn: 0 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1C = locale$1B;

var formatDistanceLocale$L = {
  lessThanXSeconds: {
    one: {
      standalone: 'manje od 1 sekunde',
      withPrepositionAgo: 'manje od 1 sekunde',
      withPrepositionIn: 'manje od 1 sekundu'
    },
    dual: 'manje od {{count}} sekunde',
    other: 'manje od {{count}} sekundi'
  },
  xSeconds: {
    one: {
      standalone: '1 sekunda',
      withPrepositionAgo: '1 sekunde',
      withPrepositionIn: '1 sekundu'
    },
    dual: '{{count}} sekunde',
    other: '{{count}} sekundi'
  },
  halfAMinute: 'pola minute',
  lessThanXMinutes: {
    one: {
      standalone: 'manje od 1 minute',
      withPrepositionAgo: 'manje od 1 minute',
      withPrepositionIn: 'manje od 1 minutu'
    },
    dual: 'manje od {{count}} minute',
    other: 'manje od {{count}} minuta'
  },
  xMinutes: {
    one: {
      standalone: '1 minuta',
      withPrepositionAgo: '1 minute',
      withPrepositionIn: '1 minutu'
    },
    dual: '{{count}} minute',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: {
      standalone: 'oko 1 sat',
      withPrepositionAgo: 'oko 1 sat',
      withPrepositionIn: 'oko 1 sat'
    },
    dual: 'oko {{count}} sata',
    other: 'oko {{count}} sati'
  },
  xHours: {
    one: {
      standalone: '1 sat',
      withPrepositionAgo: '1 sat',
      withPrepositionIn: '1 sat'
    },
    dual: '{{count}} sata',
    other: '{{count}} sati'
  },
  xDays: {
    one: {
      standalone: '1 dan',
      withPrepositionAgo: '1 dan',
      withPrepositionIn: '1 dan'
    },
    dual: '{{count}} dana',
    other: '{{count}} dana'
  },
  aboutXWeeks: {
    one: {
      standalone: 'oko 1 tjedan',
      withPrepositionAgo: 'oko 1 tjedan',
      withPrepositionIn: 'oko 1 tjedan'
    },
    dual: 'oko {{count}} tjedna',
    other: 'oko {{count}} tjedana'
  },
  xWeeks: {
    one: {
      standalone: '1 tjedan',
      withPrepositionAgo: '1 tjedan',
      withPrepositionIn: '1 tjedan'
    },
    dual: '{{count}} tjedna',
    other: '{{count}} tjedana'
  },
  aboutXMonths: {
    one: {
      standalone: 'oko 1 mjesec',
      withPrepositionAgo: 'oko 1 mjesec',
      withPrepositionIn: 'oko 1 mjesec'
    },
    dual: 'oko {{count}} mjeseca',
    other: 'oko {{count}} mjeseci'
  },
  xMonths: {
    one: {
      standalone: '1 mjesec',
      withPrepositionAgo: '1 mjesec',
      withPrepositionIn: '1 mjesec'
    },
    dual: '{{count}} mjeseca',
    other: '{{count}} mjeseci'
  },
  aboutXYears: {
    one: {
      standalone: 'oko 1 godinu',
      withPrepositionAgo: 'oko 1 godinu',
      withPrepositionIn: 'oko 1 godinu'
    },
    dual: 'oko {{count}} godine',
    other: 'oko {{count}} godina'
  },
  xYears: {
    one: {
      standalone: '1 godina',
      withPrepositionAgo: '1 godine',
      withPrepositionIn: '1 godinu'
    },
    dual: '{{count}} godine',
    other: '{{count}} godina'
  },
  overXYears: {
    one: {
      standalone: 'preko 1 godinu',
      withPrepositionAgo: 'preko 1 godinu',
      withPrepositionIn: 'preko 1 godinu'
    },
    dual: 'preko {{count}} godine',
    other: 'preko {{count}} godina'
  },
  almostXYears: {
    one: {
      standalone: 'gotovo 1 godinu',
      withPrepositionAgo: 'gotovo 1 godinu',
      withPrepositionIn: 'gotovo 1 godinu'
    },
    dual: 'gotovo {{count}} godine',
    other: 'gotovo {{count}} godina'
  }
};
var formatDistance$1w = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$L[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'za ' + result;
    } else {
      return 'prije ' + result;
    }
  }
  return result;
};
var formatDistance$1x = formatDistance$1w;

var dateFormats$N = {
  full: 'EEEE, d. MMMM y.',
  long: 'd. MMMM y.',
  medium: 'd. MMM y.',
  short: 'dd. MM. y.'
};
var timeFormats$N = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$N = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1y = {
  date: buildFormatLongFn({
    formats: dateFormats$N,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$N,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$N,
    defaultWidth: 'full'
  })
};
var formatLong$1z = formatLong$1y;

var formatRelativeLocale$M = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'prošlu nedjelju u' p";
      case 3:
        return "'prošlu srijedu u' p";
      case 6:
        return "'prošlu subotu u' p";
      default:
        return "'prošli' EEEE 'u' p";
    }
  },
  yesterday: "'jučer u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'iduću nedjelju u' p";
      case 3:
        return "'iduću srijedu u' p";
      case 6:
        return "'iduću subotu u' p";
      default:
        return "'prošli' EEEE 'u' p";
    }
  },
  other: 'P'
};
var formatRelative$1w = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$M[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$1x = formatRelative$1w;

var eraValues$M = {
  narrow: ['pr.n.e.', 'AD'],
  abbreviated: ['pr. Kr.', 'po. Kr.'],
  wide: ['Prije Krista', 'Poslije Krista']
};
var quarterValues$M = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$M = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['sij', 'velj', 'ožu', 'tra', 'svi', 'lip', 'srp', 'kol', 'ruj', 'lis', 'stu', 'pro'],
  wide: ['siječanj', 'veljača', 'ožujak', 'travanj', 'svibanj', 'lipanj', 'srpanj', 'kolovoz', 'rujan', 'listopad', 'studeni', 'prosinac']
};
var formattingMonthValues$a = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['sij', 'velj', 'ožu', 'tra', 'svi', 'lip', 'srp', 'kol', 'ruj', 'lis', 'stu', 'pro'],
  wide: ['siječnja', 'veljače', 'ožujka', 'travnja', 'svibnja', 'lipnja', 'srpnja', 'kolovoza', 'rujna', 'listopada', 'studenog', 'prosinca']
};
var dayValues$M = {
  narrow: ['N', 'P', 'U', 'S', 'Č', 'P', 'S'],
  short: ['ned', 'pon', 'uto', 'sri', 'čet', 'pet', 'sub'],
  abbreviated: ['ned', 'pon', 'uto', 'sri', 'čet', 'pet', 'sub'],
  wide: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota']
};
var formattingDayPeriodValues$D = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'navečer',
    night: 'noću'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'navečer',
    night: 'noću'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'poslije podne',
    evening: 'navečer',
    night: 'noću'
  }
};
var dayPeriodValues$M = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'navečer',
    night: 'noću'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'navečer',
    night: 'noću'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'poslije podne',
    evening: 'navečer',
    night: 'noću'
  }
};
var ordinalNumber$M = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$1w = {
  ordinalNumber: ordinalNumber$M,
  era: buildLocalizeFn({
    values: eraValues$M,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$M,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$M,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$a,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$M,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$M,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$D,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1x = localize$1w;

var matchOrdinalNumberPattern$M = /^(\d+)\./i;
var parseOrdinalNumberPattern$M = /\d+/i;
var matchEraPatterns$M = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
  wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i
};
var parseEraPatterns$M = {
  any: [/^pr/i, /^(po|nova)/i]
};
var matchQuarterPatterns$M = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var parseQuarterPatterns$M = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$M = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(sij|velj|(ožu|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
  wide: /^((siječanj|siječnja|sijecanj|sijecnja)|(veljača|veljače|veljaca|veljace)|(ožujak|ožujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i
};
var parseMonthPatterns$M = {
  narrow: [/1/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i, /8/i, /9/i, /10/i, /11/i, /12/i],
  abbreviated: [/^sij/i, /^velj/i, /^(ožu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i],
  wide: [/^sij/i, /^velj/i, /^(ožu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i]
};
var matchDayPatterns$M = {
  narrow: /^[npusčc]/i,
  short: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
};
var parseDayPatterns$M = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$M = {
  any: /^(am|pm|ponoc|ponoć|(po)?podne|navecer|navečer|noću|poslije podne|ujutro)/i
};
var parseDayPeriodPatterns$M = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(navece|naveče)/i,
    night: /(nocu|noću)/i
  }
};
var match$1w = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$M,
    parsePattern: parseOrdinalNumberPattern$M,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$M,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$M,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$M,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$M,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$M,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$M,
    defaultParseWidth: 'wide'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$M,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$M,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$M,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$M,
    defaultParseWidth: 'any'
  })
};
var match$1x = match$1w;

/**
 * @type {Locale}
 * @category Locales
 * @summary Croatian locale.
 * @language Croatian
 * @iso-639-2 hrv
 * @author Matija Marohnić [@silvenon]{@link https://github.com/silvenon}
 * @author Manico [@manico]{@link https://github.com/manico}
 * @author Ivan Jeržabek [@jerzabek]{@link https://github.com/jerzabek}
 */
var locale$1z = {
  code: 'hr',
  formatDistance: formatDistance$1x,
  formatLong: formatLong$1z,
  formatRelative: formatRelative$1x,
  localize: localize$1x,
  match: match$1x,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1A = locale$1z;

var formatDistanceLocale$K = {
  lessThanXSeconds: {
    one: 'mwens pase yon segond',
    other: 'mwens pase {{count}} segond'
  },
  xSeconds: {
    one: '1 segond',
    other: '{{count}} segond'
  },
  halfAMinute: '30 segond',
  lessThanXMinutes: {
    one: 'mwens pase yon minit',
    other: 'mwens pase {{count}} minit'
  },
  xMinutes: {
    one: '1 minit',
    other: '{{count}} minit'
  },
  aboutXHours: {
    one: 'anviwon inè',
    other: 'anviwon {{count}} è'
  },
  xHours: {
    one: '1 lè',
    other: '{{count}} lè'
  },
  xDays: {
    one: '1 jou',
    other: '{{count}} jou'
  },
  aboutXWeeks: {
    one: 'anviwon 1 semèn',
    other: 'anviwon {{count}} semèn'
  },
  xWeeks: {
    one: '1 semèn',
    other: '{{count}} semèn'
  },
  aboutXMonths: {
    one: 'anviwon 1 mwa',
    other: 'anviwon {{count}} mwa'
  },
  xMonths: {
    one: '1 mwa',
    other: '{{count}} mwa'
  },
  aboutXYears: {
    one: 'anviwon 1 an',
    other: 'anviwon {{count}} an'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} an'
  },
  overXYears: {
    one: 'plis pase 1 an',
    other: 'plis pase {{count}} an'
  },
  almostXYears: {
    one: 'prèske 1 an',
    other: 'prèske {{count}} an'
  }
};
var formatDistance$1u = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$K[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'nan ' + result;
    } else {
      return 'sa fè ' + result;
    }
  }
  return result;
};
var formatDistance$1v = formatDistance$1u;

var dateFormats$M = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$M = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$M = {
  full: "{{date}} 'nan lè' {{time}}",
  long: "{{date}} 'nan lè' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1w = {
  date: buildFormatLongFn({
    formats: dateFormats$M,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$M,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$M,
    defaultWidth: 'full'
  })
};
var formatLong$1x = formatLong$1w;

var formatRelativeLocale$L = {
  lastWeek: "eeee 'pase nan lè' p",
  yesterday: "'yè nan lè' p",
  today: "'jodi a' p",
  tomorrow: "'demen nan lè' p'",
  nextWeek: "eeee 'pwochen nan lè' p",
  other: 'P'
};
var formatRelative$1u = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$L[token];
};
var formatRelative$1v = formatRelative$1u;

var eraValues$L = {
  narrow: ['av. J.-K', 'ap. J.-K'],
  abbreviated: ['av. J.-K', 'ap. J.-K'],
  wide: ['anvan Jezi Kris', 'apre Jezi Kris']
};
var quarterValues$L = {
  narrow: ['T1', 'T2', 'T3', 'T4'],
  abbreviated: ['1ye trim.', '2yèm trim.', '3yèm trim.', '4yèm trim.'],
  wide: ['1ye trimès', '2yèm trimès', '3yèm trimès', '4yèm trimès']
};
var monthValues$L = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'O', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'fevr.', 'mas', 'avr.', 'me', 'jen', 'jiyè', 'out', 'sept.', 'okt.', 'nov.', 'des.'],
  wide: ['janvye', 'fevrye', 'mas', 'avril', 'me', 'jen', 'jiyè', 'out', 'septanm', 'oktòb', 'novanm', 'desanm']
};
var dayValues$L = {
  narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  short: ['di', 'le', 'ma', 'mè', 'je', 'va', 'sa'],
  abbreviated: ['dim.', 'len.', 'mad.', 'mèk.', 'jed.', 'van.', 'sam.'],
  wide: ['dimanch', 'lendi', 'madi', 'mèkredi', 'jedi', 'vandredi', 'samdi']
};
var dayPeriodValues$L = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minwit',
    noon: 'midi',
    morning: 'mat.',
    afternoon: 'ap.m.',
    evening: 'swa',
    night: 'mat.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minwit',
    noon: 'midi',
    morning: 'maten',
    afternoon: 'aprèmidi',
    evening: 'swa',
    night: 'maten'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minwit',
    noon: 'midi',
    morning: 'nan maten',
    afternoon: 'nan aprèmidi',
    evening: 'nan aswè',
    night: 'nan maten'
  }
};
var ordinalNumber$L = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  if (number === 0) return String(number);
  var suffix = number === 1 ? 'ye' : 'yèm';
  return number + suffix;
};
var localize$1u = {
  ordinalNumber: ordinalNumber$L,
  era: buildLocalizeFn({
    values: eraValues$L,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$L,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$L,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$L,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$L,
    defaultWidth: 'wide'
  })
};
var localize$1v = localize$1u;

var matchOrdinalNumberPattern$L = /^(\d+)(ye|yèm)?/i;
var parseOrdinalNumberPattern$L = /\d+/i;
var matchEraPatterns$L = {
  narrow: /^(av\.J\.K|ap\.J\.K|ap\.J\.-K)/i,
  abbreviated: /^(av\.J\.-K|av\.J-K|apr\.J\.-K|apr\.J-K|ap\.J-K)/i,
  wide: /^(avan Jezi Kris|apre Jezi Kris)/i
};
var parseEraPatterns$L = {
  any: [/^av/i, /^ap/i]
};
var matchQuarterPatterns$L = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](ye|yèm)? trimès/i
};
var parseQuarterPatterns$L = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$L = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|fevr|mas|avr|me|jen|jiyè|out|sept|okt|nov|des)\.?/i,
  wide: /^(janvye|fevrye|mas|avril|me|jen|jiyè|out|septanm|oktòb|novanm|desanm)/i
};
var parseMonthPatterns$L = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^av/i, /^me/i, /^je/i, /^ji/i, /^ou/i, /^s/i, /^ok/i, /^n/i, /^d/i]
};
var matchDayPatterns$L = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|le|ma|me|je|va|sa)/i,
  abbreviated: /^(dim|len|mad|mèk|jed|van|sam)\.?/i,
  wide: /^(dimanch|lendi|madi|mèkredi|jedi|vandredi|samdi)/i
};
var parseDayPatterns$L = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^le/i, /^ma/i, /^mè/i, /^je/i, /^va/i, /^sa/i]
};
var matchDayPeriodPatterns$L = {
  narrow: /^(a|p|minwit|midi|mat\.?|ap\.?m\.?|swa)/i,
  any: /^([ap]\.?\s?m\.?|nan maten|nan aprèmidi|nan aswè)/i
};
var parseDayPeriodPatterns$L = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /sw/i,
    night: /nwit/i
  }
};
var match$1u = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$L,
    parsePattern: parseOrdinalNumberPattern$L,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$L,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$L,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$L,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$L,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$L,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$L,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$L,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$L,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$L,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$L,
    defaultParseWidth: 'any'
  })
};
var match$1v = match$1u;

/**
 * @type {Locale}
 * @category Locales
 * @summary Haitian Creole locale.
 * @language Haitian Creole
 * @iso-639-2 hat
 * @author Rubens Mariuzzo [@rmariuzzo]{@link https://github.com/rmariuzzo}
 * @author Watson Marcelain [@watsongm24]{@link https://github.com/watsongm24}
 */
var locale$1x = {
  code: 'ht',
  formatDistance: formatDistance$1v,
  formatLong: formatLong$1x,
  formatRelative: formatRelative$1v,
  localize: localize$1v,
  match: match$1v,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1y = locale$1x;

var translations$1 = {
  about: 'körülbelül',
  over: 'több mint',
  almost: 'majdnem',
  lessthan: 'kevesebb mint'
};
var withoutSuffixes = {
  xseconds: ' másodperc',
  halfaminute: 'fél perc',
  xminutes: ' perc',
  xhours: ' óra',
  xdays: ' nap',
  xweeks: ' hét',
  xmonths: ' hónap',
  xyears: ' év'
};
var withSuffixes = {
  xseconds: {
    '-1': ' másodperccel ezelőtt',
    '1': ' másodperc múlva',
    '0': ' másodperce'
  },
  halfaminute: {
    '-1': 'fél perccel ezelőtt',
    '1': 'fél perc múlva',
    '0': 'fél perce'
  },
  xminutes: {
    '-1': ' perccel ezelőtt',
    '1': ' perc múlva',
    '0': ' perce'
  },
  xhours: {
    '-1': ' órával ezelőtt',
    '1': ' óra múlva',
    '0': ' órája'
  },
  xdays: {
    '-1': ' nappal ezelőtt',
    '1': ' nap múlva',
    '0': ' napja'
  },
  xweeks: {
    '-1': ' héttel ezelőtt',
    '1': ' hét múlva',
    '0': ' hete'
  },
  xmonths: {
    '-1': ' hónappal ezelőtt',
    '1': ' hónap múlva',
    '0': ' hónapja'
  },
  xyears: {
    '-1': ' évvel ezelőtt',
    '1': ' év múlva',
    '0': ' éve'
  }
};
var formatDistance$1s = function formatDistance(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], '') : token;
  var addSuffix = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
  var key = unit.toLowerCase();
  var comparison = (options === null || options === void 0 ? void 0 : options.comparison) || 0;
  var translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];
  var result = key === 'halfaminute' ? translated : count + translated;
  if (adverb) {
    var adv = adverb[0].toLowerCase();
    result = translations$1[adv] + ' ' + result;
  }
  return result;
};
var formatDistance$1t = formatDistance$1s;

var dateFormats$L = {
  full: 'y. MMMM d., EEEE',
  long: 'y. MMMM d.',
  medium: 'y. MMM d.',
  short: 'y. MM. dd.'
};
var timeFormats$L = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$L = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1u = {
  date: buildFormatLongFn({
    formats: dateFormats$L,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$L,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$L,
    defaultWidth: 'full'
  })
};
var formatLong$1v = formatLong$1u;

var accusativeWeekdays$4 = ['vasárnap', 'hétfőn', 'kedden', 'szerdán', 'csütörtökön', 'pénteken', 'szombaton'];
function week(isFuture) {
  return function (date) {
    var weekday = accusativeWeekdays$4[date.getUTCDay()];
    var prefix = isFuture ? '' : "'múlt' ";
    return "".concat(prefix, "'").concat(weekday, "' p'-kor'");
  };
}
var formatRelativeLocale$K = {
  lastWeek: week(false),
  yesterday: "'tegnap' p'-kor'",
  today: "'ma' p'-kor'",
  tomorrow: "'holnap' p'-kor'",
  nextWeek: week(true),
  other: 'P'
};
var formatRelative$1s = function formatRelative(token, date) {
  var format = formatRelativeLocale$K[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$1t = formatRelative$1s;

var eraValues$K = {
  narrow: ['ie.', 'isz.'],
  abbreviated: ['i. e.', 'i. sz.'],
  wide: ['Krisztus előtt', 'időszámításunk szerint']
};
var quarterValues$K = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. n.év', '2. n.év', '3. n.év', '4. n.év'],
  wide: ['1. negyedév', '2. negyedév', '3. negyedév', '4. negyedév']
};
var formattingQuarterValues$3 = {
  narrow: ['I.', 'II.', 'III.', 'IV.'],
  abbreviated: ['I. n.év', 'II. n.év', 'III. n.év', 'IV. n.év'],
  wide: ['I. negyedév', 'II. negyedév', 'III. negyedév', 'IV. negyedév']
};
var monthValues$K = {
  narrow: ['J', 'F', 'M', 'Á', 'M', 'J', 'J', 'A', 'Sz', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'febr.', 'márc.', 'ápr.', 'máj.', 'jún.', 'júl.', 'aug.', 'szept.', 'okt.', 'nov.', 'dec.'],
  wide: ['január', 'február', 'március', 'április', 'május', 'június', 'július', 'augusztus', 'szeptember', 'október', 'november', 'december']
};
var dayValues$K = {
  narrow: ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Sz'],
  short: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
  abbreviated: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
  wide: ['vasárnap', 'hétfő', 'kedd', 'szerda', 'csütörtök', 'péntek', 'szombat']
};
var dayPeriodValues$K = {
  narrow: {
    am: 'de.',
    pm: 'du.',
    midnight: 'éjfél',
    noon: 'dél',
    morning: 'reggel',
    afternoon: 'du.',
    evening: 'este',
    night: 'éjjel'
  },
  abbreviated: {
    am: 'de.',
    pm: 'du.',
    midnight: 'éjfél',
    noon: 'dél',
    morning: 'reggel',
    afternoon: 'du.',
    evening: 'este',
    night: 'éjjel'
  },
  wide: {
    am: 'de.',
    pm: 'du.',
    midnight: 'éjfél',
    noon: 'dél',
    morning: 'reggel',
    afternoon: 'délután',
    evening: 'este',
    night: 'éjjel'
  }
};
var ordinalNumber$K = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$1s = {
  ordinalNumber: ordinalNumber$K,
  era: buildLocalizeFn({
    values: eraValues$K,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$K,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    },
    formattingValues: formattingQuarterValues$3,
    defaultFormattingWidth: 'wide'
  }),
  month: buildLocalizeFn({
    values: monthValues$K,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$K,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$K,
    defaultWidth: 'wide'
  })
};
var localize$1t = localize$1s;

var matchOrdinalNumberPattern$K = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$K = /\d+/i;
var matchEraPatterns$K = {
  narrow: /^(ie\.|isz\.)/i,
  abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
  wide: /^(Krisztus előtt|időszámításunk előtt|időszámításunk szerint|i\. sz\.)/i
};
var parseEraPatterns$K = {
  narrow: [/ie/i, /isz/i],
  abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
  any: [/előtt/i, /(szerint|i. sz.)/i]
};
var matchQuarterPatterns$K = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^[1234]?\.?\s?n\.év/i,
  wide: /^([1234]|I|II|III|IV)?\.?\s?negyedév/i
};
var parseQuarterPatterns$K = {
  any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i]
};
var matchMonthPatterns$K = {
  narrow: /^[jfmaásond]|sz/i,
  abbreviated: /^(jan\.?|febr\.?|márc\.?|ápr\.?|máj\.?|jún\.?|júl\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
  wide: /^(január|február|március|április|május|június|július|augusztus|szeptember|október|november|december)/i
};
var parseMonthPatterns$K = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a|á/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s|sz/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^már/i, /^áp/i, /^máj/i, /^jún/i, /^júl/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$K = {
  narrow: /^([vhkpc]|sz|cs|sz)/i,
  short: /^([vhkp]|sze|cs|szo)/i,
  abbreviated: /^([vhkp]|sze|cs|szo)/i,
  wide: /^(vasárnap|hétfő|kedd|szerda|csütörtök|péntek|szombat)/i
};
var parseDayPatterns$K = {
  narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
  any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i]
};
var matchDayPeriodPatterns$K = {
  any: /^((de|du)\.?|éjfél|délután|dél|reggel|este|éjjel)/i
};
var parseDayPeriodPatterns$K = {
  any: {
    am: /^de\.?/i,
    pm: /^du\.?/i,
    midnight: /^éjf/i,
    noon: /^dé/i,
    morning: /reg/i,
    afternoon: /^délu\.?/i,
    evening: /es/i,
    night: /éjj/i
  }
};
var match$1s = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$K,
    parsePattern: parseOrdinalNumberPattern$K,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$K,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$K,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$K,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$K,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$K,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$K,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$K,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$K,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$K,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$K,
    defaultParseWidth: 'any'
  })
};
var match$1t = match$1s;

/**
 * @type {Locale}
 * @category Locales
 * @summary Hungarian locale.
 * @language Hungarian
 * @iso-639-2 hun
 * @author Pavlo Shpak [@pshpak]{@link https://github.com/pshpak}
 * @author Eduardo Pardo [@eduardopsll]{@link https://github.com/eduardopsll}
 * @author Zoltan Szepesi [@twodcube]{@link https://github.com/twodcube}
 */
var locale$1v = {
  code: 'hu',
  formatDistance: formatDistance$1t,
  formatLong: formatLong$1v,
  formatRelative: formatRelative$1t,
  localize: localize$1t,
  match: match$1t,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1w = locale$1v;

var formatDistanceLocale$J = {
  lessThanXSeconds: {
    one: 'ավելի քիչ քան 1 վայրկյան',
    other: 'ավելի քիչ քան {{count}} վայրկյան'
  },
  xSeconds: {
    one: '1 վայրկյան',
    other: '{{count}} վայրկյան'
  },
  halfAMinute: 'կես րոպե',
  lessThanXMinutes: {
    one: 'ավելի քիչ քան 1 րոպե',
    other: 'ավելի քիչ քան {{count}} րոպե'
  },
  xMinutes: {
    one: '1 րոպե',
    other: '{{count}} րոպե'
  },
  aboutXHours: {
    one: 'մոտ 1 ժամ',
    other: 'մոտ {{count}} ժամ'
  },
  xHours: {
    one: '1 ժամ',
    other: '{{count}} ժամ'
  },
  xDays: {
    one: '1 օր',
    other: '{{count}} օր'
  },
  aboutXWeeks: {
    one: 'մոտ 1 շաբաթ',
    other: 'մոտ {{count}} շաբաթ'
  },
  xWeeks: {
    one: '1 շաբաթ',
    other: '{{count}} շաբաթ'
  },
  aboutXMonths: {
    one: 'մոտ 1 ամիս',
    other: 'մոտ {{count}} ամիս'
  },
  xMonths: {
    one: '1 ամիս',
    other: '{{count}} ամիս'
  },
  aboutXYears: {
    one: 'մոտ 1 տարի',
    other: 'մոտ {{count}} տարի'
  },
  xYears: {
    one: '1 տարի',
    other: '{{count}} տարի'
  },
  overXYears: {
    one: 'ավելի քան 1 տարի',
    other: 'ավելի քան {{count}} տարի'
  },
  almostXYears: {
    one: 'համարյա 1 տարի',
    other: 'համարյա {{count}} տարի'
  }
};
var formatDistance$1q = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$J[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' հետո';
    } else {
      return result + ' առաջ';
    }
  }
  return result;
};
var formatDistance$1r = formatDistance$1q;

var dateFormats$K = {
  full: 'd MMMM, y, EEEE',
  long: 'd MMMM, y',
  medium: 'd MMM, y',
  short: 'dd.MM.yyyy'
};
var timeFormats$K = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$K = {
  full: "{{date}} 'ժ․'{{time}}",
  long: "{{date}} 'ժ․'{{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1s = {
  date: buildFormatLongFn({
    formats: dateFormats$K,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$K,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$K,
    defaultWidth: 'full'
  })
};
var formatLong$1t = formatLong$1s;

var formatRelativeLocale$J = {
  lastWeek: "'նախորդ' eeee p'֊ին'",
  yesterday: "'երեկ' p'֊ին'",
  today: "'այսօր' p'֊ին'",
  tomorrow: "'վաղը' p'֊ին'",
  nextWeek: "'հաջորդ' eeee p'֊ին'",
  other: 'P'
};
var formatRelative$1q = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$J[token];
};
var formatRelative$1r = formatRelative$1q;

var eraValues$J = {
  narrow: ['Ք', 'Մ'],
  abbreviated: ['ՔԱ', 'ՄԹ'],
  wide: ['Քրիստոսից առաջ', 'Մեր թվարկության']
};
var quarterValues$J = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Ք1', 'Ք2', 'Ք3', 'Ք4'],
  wide: ['1֊ին քառորդ', '2֊րդ քառորդ', '3֊րդ քառորդ', '4֊րդ քառորդ']
};
var monthValues$J = {
  narrow: ['Հ', 'Փ', 'Մ', 'Ա', 'Մ', 'Հ', 'Հ', 'Օ', 'Ս', 'Հ', 'Ն', 'Դ'],
  abbreviated: ['հուն', 'փետ', 'մար', 'ապր', 'մայ', 'հուն', 'հուլ', 'օգս', 'սեպ', 'հոկ', 'նոյ', 'դեկ'],
  wide: ['հունվար', 'փետրվար', 'մարտ', 'ապրիլ', 'մայիս', 'հունիս', 'հուլիս', 'օգոստոս', 'սեպտեմբեր', 'հոկտեմբեր', 'նոյեմբեր', 'դեկտեմբեր']
};
var dayValues$J = {
  narrow: ['Կ', 'Ե', 'Ե', 'Չ', 'Հ', 'Ո', 'Շ'],
  short: ['կր', 'եր', 'եք', 'չք', 'հգ', 'ուր', 'շբ'],
  abbreviated: ['կիր', 'երկ', 'երք', 'չոր', 'հնգ', 'ուրբ', 'շաբ'],
  wide: ['կիրակի', 'երկուշաբթի', 'երեքշաբթի', 'չորեքշաբթի', 'հինգշաբթի', 'ուրբաթ', 'շաբաթ']
};
var dayPeriodValues$J = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'կեսգշ',
    noon: 'կեսօր',
    morning: 'առավոտ',
    afternoon: 'ցերեկ',
    evening: 'երեկո',
    night: 'գիշեր'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'կեսգիշեր',
    noon: 'կեսօր',
    morning: 'առավոտ',
    afternoon: 'ցերեկ',
    evening: 'երեկո',
    night: 'գիշեր'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'կեսգիշեր',
    noon: 'կեսօր',
    morning: 'առավոտ',
    afternoon: 'ցերեկ',
    evening: 'երեկո',
    night: 'գիշեր'
  }
};
var formattingDayPeriodValues$C = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'կեսգշ',
    noon: 'կեսօր',
    morning: 'առավոտը',
    afternoon: 'ցերեկը',
    evening: 'երեկոյան',
    night: 'գիշերը'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'կեսգիշերին',
    noon: 'կեսօրին',
    morning: 'առավոտը',
    afternoon: 'ցերեկը',
    evening: 'երեկոյան',
    night: 'գիշերը'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'կեսգիշերին',
    noon: 'կեսօրին',
    morning: 'առավոտը',
    afternoon: 'ցերեկը',
    evening: 'երեկոյան',
    night: 'գիշերը'
  }
};
var ordinalNumber$J = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;
  if (rem100 < 10) {
    if (rem100 % 10 === 1) {
      return number + '֊ին';
    }
  }
  return number + '֊րդ';
};
var localize$1q = {
  ordinalNumber: ordinalNumber$J,
  era: buildLocalizeFn({
    values: eraValues$J,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$J,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$J,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$J,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$J,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$C,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1r = localize$1q;

var matchOrdinalNumberPattern$J = /^(\d+)((-|֊)?(ին|րդ))?/i;
var parseOrdinalNumberPattern$J = /\d+/i;
var matchEraPatterns$J = {
  narrow: /^(Ք|Մ)/i,
  abbreviated: /^(Ք\.?\s?Ա\.?|Մ\.?\s?Թ\.?\s?Ա\.?|Մ\.?\s?Թ\.?|Ք\.?\s?Հ\.?)/i,
  wide: /^(քրիստոսից առաջ|մեր թվարկությունից առաջ|մեր թվարկության|քրիստոսից հետո)/i
};
var parseEraPatterns$J = {
  any: [/^ք/i, /^մ/i]
};
var matchQuarterPatterns$J = {
  narrow: /^[1234]/i,
  abbreviated: /^ք[1234]/i,
  wide: /^[1234]((-|֊)?(ին|րդ)) քառորդ/i
};
var parseQuarterPatterns$J = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$J = {
  narrow: /^[հփմաօսնդ]/i,
  abbreviated: /^(հուն|փետ|մար|ապր|մայ|հուն|հուլ|օգս|սեպ|հոկ|նոյ|դեկ)/i,
  wide: /^(հունվար|փետրվար|մարտ|ապրիլ|մայիս|հունիս|հուլիս|օգոստոս|սեպտեմբեր|հոկտեմբեր|նոյեմբեր|դեկտեմբեր)/i
};
var parseMonthPatterns$J = {
  narrow: [/^հ/i, /^փ/i, /^մ/i, /^ա/i, /^մ/i, /^հ/i, /^հ/i, /^օ/i, /^ս/i, /^հ/i, /^ն/i, /^դ/i],
  any: [/^հու/i, /^փ/i, /^մար/i, /^ա/i, /^մայ/i, /^հուն/i, /^հուլ/i, /^օ/i, /^ս/i, /^հոկ/i, /^ն/i, /^դ/i]
};
var matchDayPatterns$J = {
  narrow: /^[եչհոշկ]/i,
  short: /^(կր|եր|եք|չք|հգ|ուր|շբ)/i,
  abbreviated: /^(կիր|երկ|երք|չոր|հնգ|ուրբ|շաբ)/i,
  wide: /^(կիրակի|երկուշաբթի|երեքշաբթի|չորեքշաբթի|հինգշաբթի|ուրբաթ|շաբաթ)/i
};
var parseDayPatterns$J = {
  narrow: [/^կ/i, /^ե/i, /^ե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
  short: [/^կ/i, /^եր/i, /^եք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
  abbreviated: [/^կ/i, /^երկ/i, /^երք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
  wide: [/^կ/i, /^երկ/i, /^երե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i]
};
var matchDayPeriodPatterns$J = {
  narrow: /^([ap]|կեսգշ|կեսօր|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i,
  any: /^([ap]\.?\s?m\.?|կեսգիշեր(ին)?|կեսօր(ին)?|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i
};
var parseDayPeriodPatterns$J = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /կեսգիշեր/i,
    noon: /կեսօր/i,
    morning: /առավոտ/i,
    afternoon: /ցերեկ/i,
    evening: /երեկո/i,
    night: /գիշեր/i
  }
};
var match$1q = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$J,
    parsePattern: parseOrdinalNumberPattern$J,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$J,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$J,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$J,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$J,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$J,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$J,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$J,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$J,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$J,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$J,
    defaultParseWidth: 'any'
  })
};
var match$1r = match$1q;

/**
 * @type {Locale}
 * @category Locales
 * @summary Armenian locale
 * @language Armenian
 * @iso-639-2 arm
 * @author Alex Igityan [@alexigityan]{@link https://github.com/alexigityan}
 */
var locale$1t = {
  code: 'hy',
  formatDistance: formatDistance$1r,
  formatLong: formatLong$1t,
  formatRelative: formatRelative$1r,
  localize: localize$1r,
  match: match$1r,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1u = locale$1t;

var formatDistanceLocale$I = {
  lessThanXSeconds: {
    one: 'kurang dari 1 detik',
    other: 'kurang dari {{count}} detik'
  },
  xSeconds: {
    one: '1 detik',
    other: '{{count}} detik'
  },
  halfAMinute: 'setengah menit',
  lessThanXMinutes: {
    one: 'kurang dari 1 menit',
    other: 'kurang dari {{count}} menit'
  },
  xMinutes: {
    one: '1 menit',
    other: '{{count}} menit'
  },
  aboutXHours: {
    one: 'sekitar 1 jam',
    other: 'sekitar {{count}} jam'
  },
  xHours: {
    one: '1 jam',
    other: '{{count}} jam'
  },
  xDays: {
    one: '1 hari',
    other: '{{count}} hari'
  },
  aboutXWeeks: {
    one: 'sekitar 1 minggu',
    other: 'sekitar {{count}} minggu'
  },
  xWeeks: {
    one: '1 minggu',
    other: '{{count}} minggu'
  },
  aboutXMonths: {
    one: 'sekitar 1 bulan',
    other: 'sekitar {{count}} bulan'
  },
  xMonths: {
    one: '1 bulan',
    other: '{{count}} bulan'
  },
  aboutXYears: {
    one: 'sekitar 1 tahun',
    other: 'sekitar {{count}} tahun'
  },
  xYears: {
    one: '1 tahun',
    other: '{{count}} tahun'
  },
  overXYears: {
    one: 'lebih dari 1 tahun',
    other: 'lebih dari {{count}} tahun'
  },
  almostXYears: {
    one: 'hampir 1 tahun',
    other: 'hampir {{count}} tahun'
  }
};
var formatDistance$1o = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$I[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'dalam waktu ' + result;
    } else {
      return result + ' yang lalu';
    }
  }
  return result;
};
var formatDistance$1p = formatDistance$1o;

var dateFormats$J = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'd/M/yyyy'
};
var timeFormats$J = {
  full: 'HH.mm.ss',
  long: 'HH.mm.ss',
  medium: 'HH.mm',
  short: 'HH.mm'
};
var dateTimeFormats$J = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1q = {
  date: buildFormatLongFn({
    formats: dateFormats$J,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$J,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$J,
    defaultWidth: 'full'
  })
};
var formatLong$1r = formatLong$1q;

var formatRelativeLocale$I = {
  lastWeek: "eeee 'lalu pukul' p",
  yesterday: "'Kemarin pukul' p",
  today: "'Hari ini pukul' p",
  tomorrow: "'Besok pukul' p",
  nextWeek: "eeee 'pukul' p",
  other: 'P'
};
var formatRelative$1o = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$I[token];
};
var formatRelative$1p = formatRelative$1o;

// https://www.unicode.org/cldr/charts/32/summary/id.html
var eraValues$I = {
  narrow: ['SM', 'M'],
  abbreviated: ['SM', 'M'],
  wide: ['Sebelum Masehi', 'Masehi']
};
var quarterValues$I = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['Kuartal ke-1', 'Kuartal ke-2', 'Kuartal ke-3', 'Kuartal ke-4']
};

// Note: in Indonesian, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$I = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agt', 'Sep', 'Okt', 'Nov', 'Des'],
  wide: ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
};
var dayValues$I = {
  narrow: ['M', 'S', 'S', 'R', 'K', 'J', 'S'],
  short: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
  abbreviated: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
  wide: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu']
};
var dayPeriodValues$I = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  }
};
var formattingDayPeriodValues$B = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  }
};
var ordinalNumber$I = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  // Can't use "pertama", "kedua" because can't be parsed

  return 'ke-' + number;
};
var localize$1o = {
  ordinalNumber: ordinalNumber$I,
  era: buildLocalizeFn({
    values: eraValues$I,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$I,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$I,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$I,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$I,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$B,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1p = localize$1o;

var matchOrdinalNumberPattern$I = /^ke-(\d+)?/i;
var parseOrdinalNumberPattern$I = /\d+/i;
var matchEraPatterns$I = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
  wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
};
var parseEraPatterns$I = {
  any: [/^s/i, /^(m|e)/i]
};
var matchQuarterPatterns$I = {
  narrow: /^[1234]/i,
  abbreviated: /^K-?\s[1234]/i,
  wide: /^Kuartal ke-?\s?[1234]/i
};
var parseQuarterPatterns$I = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$I = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
  wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
};
var parseMonthPatterns$I = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$I = {
  narrow: /^[srkjm]/i,
  short: /^(min|sen|sel|rab|kam|jum|sab)/i,
  abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
  wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
};
var parseDayPatterns$I = {
  narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var matchDayPeriodPatterns$I = {
  narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
};
var parseDayPeriodPatterns$I = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pagi/i,
    afternoon: /siang/i,
    evening: /sore/i,
    night: /malam/i
  }
};
var match$1o = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$I,
    parsePattern: parseOrdinalNumberPattern$I,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$I,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$I,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$I,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$I,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$I,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$I,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$I,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$I,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$I,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$I,
    defaultParseWidth: 'any'
  })
};
var match$1p = match$1o;

/**
 * @type {Locale}
 * @category Locales
 * @summary Indonesian locale.
 * @language Indonesian
 * @iso-639-2 ind
 * @author Rahmat Budiharso [@rbudiharso]{@link https://github.com/rbudiharso}
 * @author Benget Nata [@bentinata]{@link https://github.com/bentinata}
 * @author Budi Irawan [@deerawan]{@link https://github.com/deerawan}
 * @author Try Ajitiono [@imballinst]{@link https://github.com/imballinst}
 */
var locale$1r = {
  code: 'id',
  formatDistance: formatDistance$1p,
  formatLong: formatLong$1r,
  formatRelative: formatRelative$1p,
  localize: localize$1p,
  match: match$1p,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1s = locale$1r;

var formatDistanceLocale$H = {
  lessThanXSeconds: {
    one: 'minna en 1 sekúnda',
    other: 'minna en {{count}} sekúndur'
  },
  xSeconds: {
    one: '1 sekúnda',
    other: '{{count}} sekúndur'
  },
  halfAMinute: 'hálf mínúta',
  lessThanXMinutes: {
    one: 'minna en 1 mínúta',
    other: 'minna en {{count}} mínútur'
  },
  xMinutes: {
    one: '1 mínúta',
    other: '{{count}} mínútur'
  },
  aboutXHours: {
    one: 'u.þ.b. 1 klukkustund',
    other: 'u.þ.b. {{count}} klukkustundir'
  },
  xHours: {
    one: '1 klukkustund',
    other: '{{count}} klukkustundir'
  },
  xDays: {
    one: '1 dagur',
    other: '{{count}} dagar'
  },
  aboutXWeeks: {
    one: 'um viku',
    other: 'um {{count}} vikur'
  },
  xWeeks: {
    one: '1 viku',
    other: '{{count}} vikur'
  },
  aboutXMonths: {
    one: 'u.þ.b. 1 mánuður',
    other: 'u.þ.b. {{count}} mánuðir'
  },
  xMonths: {
    one: '1 mánuður',
    other: '{{count}} mánuðir'
  },
  aboutXYears: {
    one: 'u.þ.b. 1 ár',
    other: 'u.þ.b. {{count}} ár'
  },
  xYears: {
    one: '1 ár',
    other: '{{count}} ár'
  },
  overXYears: {
    one: 'meira en 1 ár',
    other: 'meira en {{count}} ár'
  },
  almostXYears: {
    one: 'næstum 1 ár',
    other: 'næstum {{count}} ár'
  }
};
var formatDistance$1m = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$H[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'í ' + result;
    } else {
      return result + ' síðan';
    }
  }
  return result;
};
var formatDistance$1n = formatDistance$1m;

var dateFormats$I = {
  full: 'EEEE, do MMMM y',
  long: 'do MMMM y',
  medium: 'do MMM y',
  short: 'd.MM.y'
};
var timeFormats$I = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$I = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1o = {
  date: buildFormatLongFn({
    formats: dateFormats$I,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$I,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$I,
    defaultWidth: 'full'
  })
};
var formatLong$1p = formatLong$1o;

var formatRelativeLocale$H = {
  lastWeek: "'síðasta' dddd 'kl.' p",
  yesterday: "'í gær kl.' p",
  today: "'í dag kl.' p",
  tomorrow: "'á morgun kl.' p",
  nextWeek: "dddd 'kl.' p",
  other: 'P'
};
var formatRelative$1m = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$H[token];
};
var formatRelative$1n = formatRelative$1m;

var eraValues$H = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['fyrir Krist', 'eftir Krist']
};
var quarterValues$H = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1F', '2F', '3F', '4F'],
  wide: ['1. fjórðungur', '2. fjórðungur', '3. fjórðungur', '4. fjórðungur']
};
var monthValues$H = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'Á', 'S', 'Ó', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apríl', 'maí', 'júní', 'júlí', 'ágúst', 'sept.', 'okt.', 'nóv.', 'des.'],
  wide: ['janúar', 'febrúar', 'mars', 'apríl', 'maí', 'júní', 'júlí', 'ágúst', 'september', 'október', 'nóvember', 'desember']
};
var dayValues$H = {
  narrow: ['S', 'M', 'Þ', 'M', 'F', 'F', 'L'],
  short: ['Su', 'Má', 'Þr', 'Mi', 'Fi', 'Fö', 'La'],
  abbreviated: ['sun.', 'mán.', 'þri.', 'mið.', 'fim.', 'fös.', 'lau.'],
  wide: ['sunnudagur', 'mánudagur', 'þriðjudagur', 'miðvikudagur', 'fimmtudagur', 'föstudagur', 'laugardagur']
};
var dayPeriodValues$H = {
  narrow: {
    am: 'f',
    pm: 'e',
    midnight: 'miðnætti',
    noon: 'hádegi',
    morning: 'morgunn',
    afternoon: 'síðdegi',
    evening: 'kvöld',
    night: 'nótt'
  },
  abbreviated: {
    am: 'f.h.',
    pm: 'e.h.',
    midnight: 'miðnætti',
    noon: 'hádegi',
    morning: 'morgunn',
    afternoon: 'síðdegi',
    evening: 'kvöld',
    night: 'nótt'
  },
  wide: {
    am: 'fyrir hádegi',
    pm: 'eftir hádegi',
    midnight: 'miðnætti',
    noon: 'hádegi',
    morning: 'morgunn',
    afternoon: 'síðdegi',
    evening: 'kvöld',
    night: 'nótt'
  }
};
var formattingDayPeriodValues$A = {
  narrow: {
    am: 'f',
    pm: 'e',
    midnight: 'á miðnætti',
    noon: 'á hádegi',
    morning: 'að morgni',
    afternoon: 'síðdegis',
    evening: 'um kvöld',
    night: 'um nótt'
  },
  abbreviated: {
    am: 'f.h.',
    pm: 'e.h.',
    midnight: 'á miðnætti',
    noon: 'á hádegi',
    morning: 'að morgni',
    afternoon: 'síðdegis',
    evening: 'um kvöld',
    night: 'um nótt'
  },
  wide: {
    am: 'fyrir hádegi',
    pm: 'eftir hádegi',
    midnight: 'á miðnætti',
    noon: 'á hádegi',
    morning: 'að morgni',
    afternoon: 'síðdegis',
    evening: 'um kvöld',
    night: 'um nótt'
  }
};
var ordinalNumber$H = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$1m = {
  ordinalNumber: ordinalNumber$H,
  era: buildLocalizeFn({
    values: eraValues$H,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$H,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$H,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$H,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$H,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$A,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1n = localize$1m;

var matchOrdinalNumberPattern$H = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$H = /\d+(\.)?/i;
var matchEraPatterns$H = {
  narrow: /^(f\.Kr\.|e\.Kr\.)/i,
  abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
  wide: /^(fyrir Krist|eftir Krist)/i
};
var parseEraPatterns$H = {
  any: [/^(f\.Kr\.)/i, /^(e\.Kr\.)/i]
};
var matchQuarterPatterns$H = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^q[1234]\.?/i,
  wide: /^[1234]\.? fjórðungur/i
};
var parseQuarterPatterns$H = {
  any: [/1\.?/i, /2\.?/i, /3\.?/i, /4\.?/i]
};
var matchMonthPatterns$H = {
  narrow: /^[jfmásónd]/i,
  abbreviated: /^(jan\.|feb\.|mars\.|apríl\.|maí|júní|júlí|águst|sep\.|oct\.|nov\.|dec\.)/i,
  wide: /^(januar|febrúar|mars|apríl|maí|júní|júlí|águst|september|október|nóvember|desember)/i
};
var parseMonthPatterns$H = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^á/i, /^s/i, /^ó/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maí/i, /^jún/i, /^júl/i, /^áu/i, /^s/i, /^ó/i, /^n/i, /^d/i]
};
var matchDayPatterns$H = {
  narrow: /^[smtwf]/i,
  short: /^(su|má|þr|mi|fi|fö|la)/i,
  abbreviated: /^(sun|mán|þri|mið|fim|fös|lau)\.?/i,
  wide: /^(sunnudagur|mánudagur|þriðjudagur|miðvikudagur|fimmtudagur|föstudagur|laugardagur)/i
};
var parseDayPatterns$H = {
  narrow: [/^s/i, /^m/i, /^þ/i, /^m/i, /^f/i, /^f/i, /^l/i],
  any: [/^su/i, /^má/i, /^þr/i, /^mi/i, /^fi/i, /^fö/i, /^la/i]
};
var matchDayPeriodPatterns$H = {
  narrow: /^(f|e|síðdegis|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i,
  any: /^(fyrir hádegi|eftir hádegi|[ef]\.?h\.?|síðdegis|morgunn|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i
};
var parseDayPeriodPatterns$H = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^mi/i,
    noon: /^há/i,
    morning: /morgunn/i,
    afternoon: /síðdegi/i,
    evening: /kvöld/i,
    night: /nótt/i
  }
};
var match$1m = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$H,
    parsePattern: parseOrdinalNumberPattern$H,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$H,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$H,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$H,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$H,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$H,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$H,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$H,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$H,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$H,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$H,
    defaultParseWidth: 'any'
  })
};
var match$1n = match$1m;

/**
 * @type {Locale}
 * @category Locales
 * @summary Icelandic locale.
 * @language Icelandic
 * @iso-639-2 isl
 * @author Derek Blank [@derekblank]{@link https://github.com/derekblank}
 * @author Arnór Ýmir [@lamayg]{@link https://github.com/lamayg}
 */
var locale$1p = {
  code: 'is',
  formatDistance: formatDistance$1n,
  formatLong: formatLong$1p,
  formatRelative: formatRelative$1n,
  localize: localize$1n,
  match: match$1n,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1q = locale$1p;

var formatDistanceLocale$G = {
  lessThanXSeconds: {
    one: 'meno di un secondo',
    other: 'meno di {{count}} secondi'
  },
  xSeconds: {
    one: 'un secondo',
    other: '{{count}} secondi'
  },
  halfAMinute: 'alcuni secondi',
  lessThanXMinutes: {
    one: 'meno di un minuto',
    other: 'meno di {{count}} minuti'
  },
  xMinutes: {
    one: 'un minuto',
    other: '{{count}} minuti'
  },
  aboutXHours: {
    one: "circa un'ora",
    other: 'circa {{count}} ore'
  },
  xHours: {
    one: "un'ora",
    other: '{{count}} ore'
  },
  xDays: {
    one: 'un giorno',
    other: '{{count}} giorni'
  },
  aboutXWeeks: {
    one: 'circa una settimana',
    other: 'circa {{count}} settimane'
  },
  xWeeks: {
    one: 'una settimana',
    other: '{{count}} settimane'
  },
  aboutXMonths: {
    one: 'circa un mese',
    other: 'circa {{count}} mesi'
  },
  xMonths: {
    one: 'un mese',
    other: '{{count}} mesi'
  },
  aboutXYears: {
    one: 'circa un anno',
    other: 'circa {{count}} anni'
  },
  xYears: {
    one: 'un anno',
    other: '{{count}} anni'
  },
  overXYears: {
    one: 'più di un anno',
    other: 'più di {{count}} anni'
  },
  almostXYears: {
    one: 'quasi un anno',
    other: 'quasi {{count}} anni'
  }
};
var formatDistance$1k = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$G[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'tra ' + result;
    } else {
      return result + ' fa';
    }
  }
  return result;
};
var formatDistance$1l = formatDistance$1k;

var dateFormats$H = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$H = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$H = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1m = {
  date: buildFormatLongFn({
    formats: dateFormats$H,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$H,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$H,
    defaultWidth: 'full'
  })
};
var formatLong$1n = formatLong$1m;

var weekdays$2 = ['domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato'];
function _lastWeek$4(day) {
  switch (day) {
    case 0:
      return "'domenica scorsa alle' p";
    default:
      return "'" + weekdays$2[day] + " scorso alle' p";
  }
}
function thisWeek$5(day) {
  return "'" + weekdays$2[day] + " alle' p";
}
function _nextWeek$4(day) {
  switch (day) {
    case 0:
      return "'domenica prossima alle' p";
    default:
      return "'" + weekdays$2[day] + " prossimo alle' p";
  }
}
var formatRelativeLocale$G = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$5(day);
    } else {
      return _lastWeek$4(day);
    }
  },
  yesterday: "'ieri alle' p",
  today: "'oggi alle' p",
  tomorrow: "'domani alle' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$5(day);
    } else {
      return _nextWeek$4(day);
    }
  },
  other: 'P'
};
var formatRelative$1k = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$G[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$1l = formatRelative$1k;

var eraValues$G = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a.C.', 'd.C.'],
  wide: ['avanti Cristo', 'dopo Cristo']
};
var quarterValues$G = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$G = {
  narrow: ['G', 'F', 'M', 'A', 'M', 'G', 'L', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['gen', 'feb', 'mar', 'apr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic'],
  wide: ['gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre']
};
var dayValues$G = {
  narrow: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
  short: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
  abbreviated: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
  wide: ['domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato']
};
var dayPeriodValues$G = {
  narrow: {
    am: 'm.',
    pm: 'p.',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  }
};
var formattingDayPeriodValues$z = {
  narrow: {
    am: 'm.',
    pm: 'p.',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  }
};
var ordinalNumber$G = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return String(number);
};
var localize$1k = {
  ordinalNumber: ordinalNumber$G,
  era: buildLocalizeFn({
    values: eraValues$G,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$G,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$G,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$G,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$G,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$z,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1l = localize$1k;

var matchOrdinalNumberPattern$G = /^(\d+)(º)?/i;
var parseOrdinalNumberPattern$G = /\d+/i;
var matchEraPatterns$G = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
  wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
};
var parseEraPatterns$G = {
  any: [/^a/i, /^(d|e)/i]
};
var matchQuarterPatterns$G = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns$G = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$G = {
  narrow: /^[gfmalsond]/i,
  abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
  wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
};
var parseMonthPatterns$G = {
  narrow: [/^g/i, /^f/i, /^m/i, /^a/i, /^m/i, /^g/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ge/i, /^f/i, /^mar/i, /^ap/i, /^mag/i, /^gi/i, /^l/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$G = {
  narrow: /^[dlmgvs]/i,
  short: /^(do|lu|ma|me|gi|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
  wide: /^(domenica|luned[i|ì]|marted[i|ì]|mercoled[i|ì]|gioved[i|ì]|venerd[i|ì]|sabato)/i
};
var parseDayPatterns$G = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i]
};
var matchDayPeriodPatterns$G = {
  narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
  any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
};
var parseDayPeriodPatterns$G = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mezza/i,
    noon: /^mezzo/i,
    morning: /mattina/i,
    afternoon: /pomeriggio/i,
    evening: /sera/i,
    night: /notte/i
  }
};
var match$1k = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$G,
    parsePattern: parseOrdinalNumberPattern$G,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$G,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$G,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$G,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$G,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$G,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$G,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$G,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$G,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$G,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$G,
    defaultParseWidth: 'any'
  })
};
var match$1l = match$1k;

/**
 * @type {Locale}
 * @category Locales
 * @summary Italian locale.
 * @language Italian
 * @iso-639-2 ita
 * @author Alberto Restifo [@albertorestifo]{@link https://github.com/albertorestifo}
 * @author Giovanni Polimeni [@giofilo]{@link https://github.com/giofilo}
 * @author Vincenzo Carrese [@vin-car]{@link https://github.com/vin-car}
 */
var locale$1n = {
  code: 'it',
  formatDistance: formatDistance$1l,
  formatLong: formatLong$1n,
  formatRelative: formatRelative$1l,
  localize: localize$1l,
  match: match$1l,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1o = locale$1n;

var dateFormats$G = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.y'
};
var timeFormats$G = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$G = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1k = {
  date: buildFormatLongFn({
    formats: dateFormats$G,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$G,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$G,
    defaultWidth: 'full'
  })
};
var formatLong$1l = formatLong$1k;

/**
 * @type {Locale}
 * @category Locales
 * @summary Italian locale (Switzerland).
 * @language Italian
 * @iso-639-2 ita
 * @author Mike Peyer [@maic66]{@link https://github.com/maic66}
 */
var locale$1l = {
  code: 'it-CH',
  formatDistance: formatDistance$1l,
  formatLong: formatLong$1l,
  formatRelative: formatRelative$1l,
  localize: localize$1l,
  match: match$1l,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$1m = locale$1l;

var formatDistanceLocale$F = {
  lessThanXSeconds: {
    one: '1秒未満',
    other: '{{count}}秒未満',
    oneWithSuffix: '約1秒',
    otherWithSuffix: '約{{count}}秒'
  },
  xSeconds: {
    one: '1秒',
    other: '{{count}}秒'
  },
  halfAMinute: '30秒',
  lessThanXMinutes: {
    one: '1分未満',
    other: '{{count}}分未満',
    oneWithSuffix: '約1分',
    otherWithSuffix: '約{{count}}分'
  },
  xMinutes: {
    one: '1分',
    other: '{{count}}分'
  },
  aboutXHours: {
    one: '約1時間',
    other: '約{{count}}時間'
  },
  xHours: {
    one: '1時間',
    other: '{{count}}時間'
  },
  xDays: {
    one: '1日',
    other: '{{count}}日'
  },
  aboutXWeeks: {
    one: '約1週間',
    other: '約{{count}}週間'
  },
  xWeeks: {
    one: '1週間',
    other: '{{count}}週間'
  },
  aboutXMonths: {
    one: '約1か月',
    other: '約{{count}}か月'
  },
  xMonths: {
    one: '1か月',
    other: '{{count}}か月'
  },
  aboutXYears: {
    one: '約1年',
    other: '約{{count}}年'
  },
  xYears: {
    one: '1年',
    other: '{{count}}年'
  },
  overXYears: {
    one: '1年以上',
    other: '{{count}}年以上'
  },
  almostXYears: {
    one: '1年近く',
    other: '{{count}}年近く'
  }
};
var formatDistance$1i = function formatDistance(token, count, options) {
  options = options || {};
  var result;
  var tokenValue = formatDistanceLocale$F[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', String(count));
    }
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '後';
    } else {
      return result + '前';
    }
  }
  return result;
};
var formatDistance$1j = formatDistance$1i;

var dateFormats$F = {
  full: 'y年M月d日EEEE',
  long: 'y年M月d日',
  medium: 'y/MM/dd',
  short: 'y/MM/dd'
};
var timeFormats$F = {
  full: 'H時mm分ss秒 zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$F = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1i = {
  date: buildFormatLongFn({
    formats: dateFormats$F,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$F,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$F,
    defaultWidth: 'full'
  })
};
var formatLong$1j = formatLong$1i;

var formatRelativeLocale$F = {
  lastWeek: '先週のeeeeのp',
  yesterday: '昨日のp',
  today: '今日のp',
  tomorrow: '明日のp',
  nextWeek: '翌週のeeeeのp',
  other: 'P'
};
var formatRelative$1i = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$F[token];
};
var formatRelative$1j = formatRelative$1i;

var eraValues$F = {
  narrow: ['BC', 'AC'],
  abbreviated: ['紀元前', '西暦'],
  wide: ['紀元前', '西暦']
};
var quarterValues$F = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['第1四半期', '第2四半期', '第3四半期', '第4四半期']
};
var monthValues$F = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']
};
var dayValues$F = {
  narrow: ['日', '月', '火', '水', '木', '金', '土'],
  short: ['日', '月', '火', '水', '木', '金', '土'],
  abbreviated: ['日', '月', '火', '水', '木', '金', '土'],
  wide: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日']
};
var dayPeriodValues$F = {
  narrow: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  abbreviated: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  wide: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  }
};
var formattingDayPeriodValues$y = {
  narrow: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  abbreviated: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  wide: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  }
};
var ordinalNumber$F = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case 'year':
      return "".concat(number, "\u5E74");
    case 'quarter':
      return "\u7B2C".concat(number, "\u56DB\u534A\u671F");
    case 'month':
      return "".concat(number, "\u6708");
    case 'week':
      return "\u7B2C".concat(number, "\u9031");
    case 'date':
      return "".concat(number, "\u65E5");
    case 'hour':
      return "".concat(number, "\u6642");
    case 'minute':
      return "".concat(number, "\u5206");
    case 'second':
      return "".concat(number, "\u79D2");
    default:
      return "".concat(number);
  }
};
var localize$1i = {
  ordinalNumber: ordinalNumber$F,
  era: buildLocalizeFn({
    values: eraValues$F,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$F,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$F,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$F,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$F,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$y,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1j = localize$1i;

var matchOrdinalNumberPattern$F = /^第?\d+(年|四半期|月|週|日|時|分|秒)?/i;
var parseOrdinalNumberPattern$F = /\d+/i;
var matchEraPatterns$F = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(紀元[前後]|西暦)/i,
  wide: /^(紀元[前後]|西暦)/i
};
var parseEraPatterns$F = {
  narrow: [/^B/i, /^A/i],
  any: [/^(紀元前)/i, /^(西暦|紀元後)/i]
};
var matchQuarterPatterns$F = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^第[1234一二三四１２３４]四半期/i
};
var parseQuarterPatterns$F = {
  any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
};
var matchMonthPatterns$F = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])月/i,
  wide: /^([123456789]|1[012])月/i
};
var parseMonthPatterns$F = {
  any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var matchDayPatterns$F = {
  narrow: /^[日月火水木金土]/,
  short: /^[日月火水木金土]/,
  abbreviated: /^[日月火水木金土]/,
  wide: /^[日月火水木金土]曜日/
};
var parseDayPatterns$F = {
  any: [/^日/, /^月/, /^火/, /^水/, /^木/, /^金/, /^土/]
};
var matchDayPeriodPatterns$F = {
  any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i
};
var parseDayPeriodPatterns$F = {
  any: {
    am: /^(A|午前)/i,
    pm: /^(P|午後)/i,
    midnight: /^深夜|真夜中/i,
    noon: /^正午/i,
    morning: /^朝/i,
    afternoon: /^午後/i,
    evening: /^夜/i,
    night: /^深夜/i
  }
};
var match$1i = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$F,
    parsePattern: parseOrdinalNumberPattern$F,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$F,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$F,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$F,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$F,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$F,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$F,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$F,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$F,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$F,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$F,
    defaultParseWidth: 'any'
  })
};
var match$1j = match$1i;

/**
 * @type {Locale}
 * @category Locales
 * @summary Japanese locale.
 * @language Japanese
 * @iso-639-2 jpn
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Yamagishi Kazutoshi [@ykzts]{@link https://github.com/ykzts}
 * @author Luca Ban [@mesqueeb]{@link https://github.com/mesqueeb}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
 */
var locale$1j = {
  code: 'ja',
  formatDistance: formatDistance$1j,
  formatLong: formatLong$1j,
  formatRelative: formatRelative$1j,
  localize: localize$1j,
  match: match$1j,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$1k = locale$1j;

var formatDistanceLocale$E = {
  lessThanXSeconds: {
    one: '1びょうみまん',
    other: '{{count}}びょうみまん',
    oneWithSuffix: 'やく1びょう',
    otherWithSuffix: 'やく{{count}}びょう'
  },
  xSeconds: {
    one: '1びょう',
    other: '{{count}}びょう'
  },
  halfAMinute: '30びょう',
  lessThanXMinutes: {
    one: '1ぷんみまん',
    other: '{{count}}ふんみまん',
    oneWithSuffix: 'やく1ぷん',
    otherWithSuffix: 'やく{{count}}ふん'
  },
  xMinutes: {
    one: '1ぷん',
    other: '{{count}}ふん'
  },
  aboutXHours: {
    one: 'やく1じかん',
    other: 'やく{{count}}じかん'
  },
  xHours: {
    one: '1じかん',
    other: '{{count}}じかん'
  },
  xDays: {
    one: '1にち',
    other: '{{count}}にち'
  },
  aboutXWeeks: {
    one: 'やく1しゅうかん',
    other: 'やく{{count}}しゅうかん'
  },
  xWeeks: {
    one: '1しゅうかん',
    other: '{{count}}しゅうかん'
  },
  aboutXMonths: {
    one: 'やく1かげつ',
    other: 'やく{{count}}かげつ'
  },
  xMonths: {
    one: '1かげつ',
    other: '{{count}}かげつ'
  },
  aboutXYears: {
    one: 'やく1ねん',
    other: 'やく{{count}}ねん'
  },
  xYears: {
    one: '1ねん',
    other: '{{count}}ねん'
  },
  overXYears: {
    one: '1ねんいじょう',
    other: '{{count}}ねんいじょう'
  },
  almostXYears: {
    one: '1ねんちかく',
    other: '{{count}}ねんちかく'
  }
};
var formatDistance$1g = function formatDistance(token, count, options) {
  options = options || {};
  var result;
  var tokenValue = formatDistanceLocale$E[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', String(count));
    }
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'あと';
    } else {
      return result + 'まえ';
    }
  }
  return result;
};
var formatDistance$1h = formatDistance$1g;

var dateFormats$E = {
  full: 'yねんMがつdにちEEEE',
  long: 'yねんMがつdにち',
  medium: 'y/MM/dd',
  short: 'y/MM/dd'
};
var timeFormats$E = {
  full: 'Hじmmふんssびょう zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$E = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$1g = {
  date: buildFormatLongFn({
    formats: dateFormats$E,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$E,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$E,
    defaultWidth: 'full'
  })
};
var formatLong$1h = formatLong$1g;

var formatRelativeLocale$E = {
  lastWeek: 'せんしゅうのeeeeのp',
  yesterday: 'きのうのp',
  today: 'きょうのp',
  tomorrow: 'あしたのp',
  nextWeek: 'よくしゅうのeeeeのp',
  other: 'P'
};
var formatRelative$1g = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$E[token];
};
var formatRelative$1h = formatRelative$1g;

var eraValues$E = {
  narrow: ['BC', 'AC'],
  abbreviated: ['きげんぜん', 'せいれき'],
  wide: ['きげんぜん', 'せいれき']
};
var quarterValues$E = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['だい1しはんき', 'だい2しはんき', 'だい3しはんき', 'だい4しはんき']
};
var monthValues$E = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1がつ', '2がつ', '3がつ', '4がつ', '5がつ', '6がつ', '7がつ', '8がつ', '9がつ', '10がつ', '11がつ', '12がつ'],
  wide: ['1がつ', '2がつ', '3がつ', '4がつ', '5がつ', '6がつ', '7がつ', '8がつ', '9がつ', '10がつ', '11がつ', '12がつ']
};
var dayValues$E = {
  narrow: ['にち', 'げつ', 'か', 'すい', 'もく', 'きん', 'ど'],
  short: ['にち', 'げつ', 'か', 'すい', 'もく', 'きん', 'ど'],
  abbreviated: ['にち', 'げつ', 'か', 'すい', 'もく', 'きん', 'ど'],
  wide: ['にちようび', 'げつようび', 'かようび', 'すいようび', 'もくようび', 'きんようび', 'どようび']
};
var dayPeriodValues$E = {
  narrow: {
    am: 'ごぜん',
    pm: 'ごご',
    midnight: 'しんや',
    noon: 'しょうご',
    morning: 'あさ',
    afternoon: 'ごご',
    evening: 'よる',
    night: 'しんや'
  },
  abbreviated: {
    am: 'ごぜん',
    pm: 'ごご',
    midnight: 'しんや',
    noon: 'しょうご',
    morning: 'あさ',
    afternoon: 'ごご',
    evening: 'よる',
    night: 'しんや'
  },
  wide: {
    am: 'ごぜん',
    pm: 'ごご',
    midnight: 'しんや',
    noon: 'しょうご',
    morning: 'あさ',
    afternoon: 'ごご',
    evening: 'よる',
    night: 'しんや'
  }
};
var formattingDayPeriodValues$x = {
  narrow: {
    am: 'ごぜん',
    pm: 'ごご',
    midnight: 'しんや',
    noon: 'しょうご',
    morning: 'あさ',
    afternoon: 'ごご',
    evening: 'よる',
    night: 'しんや'
  },
  abbreviated: {
    am: 'ごぜん',
    pm: 'ごご',
    midnight: 'しんや',
    noon: 'しょうご',
    morning: 'あさ',
    afternoon: 'ごご',
    evening: 'よる',
    night: 'しんや'
  },
  wide: {
    am: 'ごぜん',
    pm: 'ごご',
    midnight: 'しんや',
    noon: 'しょうご',
    morning: 'あさ',
    afternoon: 'ごご',
    evening: 'よる',
    night: 'しんや'
  }
};
var ordinalNumber$E = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case 'year':
      return "".concat(number, "\u306D\u3093");
    case 'quarter':
      return "\u3060\u3044".concat(number, "\u3057\u306F\u3093\u304D");
    case 'month':
      return "".concat(number, "\u304C\u3064");
    case 'week':
      return "\u3060\u3044".concat(number, "\u3057\u3085\u3046");
    case 'date':
      return "".concat(number, "\u306B\u3061");
    case 'hour':
      return "".concat(number, "\u3058");
    case 'minute':
      return "".concat(number, "\u3075\u3093");
    case 'second':
      return "".concat(number, "\u3073\u3087\u3046");
    default:
      return "".concat(number);
  }
};
var localize$1g = {
  ordinalNumber: ordinalNumber$E,
  era: buildLocalizeFn({
    values: eraValues$E,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$E,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$E,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$E,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$E,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$x,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1h = localize$1g;

var matchOrdinalNumberPattern$E = /^だ?い?\d+(ねん|しはんき|がつ|しゅう|にち|じ|ふん|びょう)?/i;
var parseOrdinalNumberPattern$E = /\d+/i;
var matchEraPatterns$E = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(きげん[前後]|せいれき)/i,
  wide: /^(きげん[前後]|せいれき)/i
};
var parseEraPatterns$E = {
  narrow: [/^B/i, /^A/i],
  any: [/^(きげんぜん)/i, /^(せいれき|きげんご)/i]
};
var matchQuarterPatterns$E = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^だい[1234一二三四１２３４]しはんき/i
};
var parseQuarterPatterns$E = {
  any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
};
var matchMonthPatterns$E = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])がつ/i,
  wide: /^([123456789]|1[012])がつ/i
};
var parseMonthPatterns$E = {
  any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var matchDayPatterns$E = {
  narrow: /^(にち|げつ|か|すい|もく|きん|ど)/,
  short: /^(にち|げつ|か|すい|もく|きん|ど)/,
  abbreviated: /^(にち|げつ|か|すい|もく|きん|ど)/,
  wide: /^(にち|げつ|か|すい|もく|きん|ど)ようび/
};
var parseDayPatterns$E = {
  any: [/^にち/, /^げつ/, /^か/, /^すい/, /^もく/, /^きん/, /^ど/]
};
var matchDayPeriodPatterns$E = {
  any: /^(AM|PM|ごぜん|ごご|しょうご|しんや|まよなか|よる|あさ)/i
};
var parseDayPeriodPatterns$E = {
  any: {
    am: /^(A|ごぜん)/i,
    pm: /^(P|ごご)/i,
    midnight: /^しんや|まよなか/i,
    noon: /^しょうご/i,
    morning: /^あさ/i,
    afternoon: /^ごご/i,
    evening: /^よる/i,
    night: /^しんや/i
  }
};
var match$1g = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$E,
    parsePattern: parseOrdinalNumberPattern$E,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$E,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$E,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$E,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$E,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$E,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$E,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$E,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$E,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$E,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$E,
    defaultParseWidth: 'any'
  })
};
var match$1h = match$1g;

/**
 * @type {Locale}
 * @category Locales
 * @summary Japanese (Hiragana) locale.
 * @language Japanese (Hiragana)
 * @iso-639-2 jpn
 * @author Eri Hiramatsu [@Eritutteo]{@link https://github.com/Eritutteo}
 */
var locale$1h = {
  code: 'ja-Hira',
  formatDistance: formatDistance$1h,
  formatLong: formatLong$1h,
  formatRelative: formatRelative$1h,
  localize: localize$1h,
  match: match$1h,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$1i = locale$1h;

var formatDistanceLocale$D = {
  lessThanXSeconds: {
    past: '{{count}} წამზე ნაკლები ხნის წინ',
    present: '{{count}} წამზე ნაკლები',
    future: '{{count}} წამზე ნაკლებში'
  },
  xSeconds: {
    past: '{{count}} წამის წინ',
    present: '{{count}} წამი',
    future: '{{count}} წამში'
  },
  halfAMinute: {
    past: 'ნახევარი წუთის წინ',
    present: 'ნახევარი წუთი',
    future: 'ნახევარი წუთში'
  },
  lessThanXMinutes: {
    past: '{{count}} წუთზე ნაკლები ხნის წინ',
    present: '{{count}} წუთზე ნაკლები',
    future: '{{count}} წუთზე ნაკლებში'
  },
  xMinutes: {
    past: '{{count}} წუთის წინ',
    present: '{{count}} წუთი',
    future: '{{count}} წუთში'
  },
  aboutXHours: {
    past: 'დაახლოებით {{count}} საათის წინ',
    present: 'დაახლოებით {{count}} საათი',
    future: 'დაახლოებით {{count}} საათში'
  },
  xHours: {
    past: '{{count}} საათის წინ',
    present: '{{count}} საათი',
    future: '{{count}} საათში'
  },
  xDays: {
    past: '{{count}} დღის წინ',
    present: '{{count}} დღე',
    future: '{{count}} დღეში'
  },
  aboutXWeeks: {
    past: 'დაახლოებით {{count}} კვირას წინ',
    present: 'დაახლოებით {{count}} კვირა',
    future: 'დაახლოებით {{count}} კვირაში'
  },
  xWeeks: {
    past: '{{count}} კვირას კვირა',
    present: '{{count}} კვირა',
    future: '{{count}} კვირაში'
  },
  aboutXMonths: {
    past: 'დაახლოებით {{count}} თვის წინ',
    present: 'დაახლოებით {{count}} თვე',
    future: 'დაახლოებით {{count}} თვეში'
  },
  xMonths: {
    past: '{{count}} თვის წინ',
    present: '{{count}} თვე',
    future: '{{count}} თვეში'
  },
  aboutXYears: {
    past: 'დაახლოებით {{count}} წლის წინ',
    present: 'დაახლოებით {{count}} წელი',
    future: 'დაახლოებით {{count}} წელში'
  },
  xYears: {
    past: '{{count}} წლის წინ',
    present: '{{count}} წელი',
    future: '{{count}} წელში'
  },
  overXYears: {
    past: '{{count}} წელზე მეტი ხნის წინ',
    present: '{{count}} წელზე მეტი',
    future: '{{count}} წელზე მეტი ხნის შემდეგ'
  },
  almostXYears: {
    past: 'თითქმის {{count}} წლის წინ',
    present: 'თითქმის {{count}} წელი',
    future: 'თითქმის {{count}} წელში'
  }
};
var formatDistance$1e = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$D[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (options !== null && options !== void 0 && options.addSuffix && options.comparison && options.comparison > 0) {
    result = tokenValue.future.replace('{{count}}', String(count));
  } else if (options !== null && options !== void 0 && options.addSuffix) {
    result = tokenValue.past.replace('{{count}}', String(count));
  } else {
    result = tokenValue.present.replace('{{count}}', String(count));
  }
  return result;
};
var formatDistance$1f = formatDistance$1e;

var dateFormats$D = {
  full: 'EEEE, do MMMM, y',
  long: 'do, MMMM, y',
  medium: 'd, MMM, y',
  short: 'dd/MM/yyyy'
};
var timeFormats$D = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$D = {
  full: "{{date}} {{time}}'-ზე'",
  long: "{{date}} {{time}}'-ზე'",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1e = {
  date: buildFormatLongFn({
    formats: dateFormats$D,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$D,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$D,
    defaultWidth: 'full'
  })
};
var formatLong$1f = formatLong$1e;

var formatRelativeLocale$D = {
  lastWeek: "'წინა' eeee p'-ზე'",
  yesterday: "'გუშინ' p'-ზე'",
  today: "'დღეს' p'-ზე'",
  tomorrow: "'ხვალ' p'-ზე'",
  nextWeek: "'შემდეგი' eeee p'-ზე'",
  other: 'P'
};
var formatRelative$1e = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$D[token];
};
var formatRelative$1f = formatRelative$1e;

var eraValues$D = {
  narrow: ['ჩ.წ-მდე', 'ჩ.წ'],
  abbreviated: ['ჩვ.წ-მდე', 'ჩვ.წ'],
  wide: ['ჩვენს წელთაღრიცხვამდე', 'ჩვენი წელთაღრიცხვით']
};
var quarterValues$D = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-ლი კვ', '2-ე კვ', '3-ე კვ', '4-ე კვ'],
  wide: ['1-ლი კვარტალი', '2-ე კვარტალი', '3-ე კვარტალი', '4-ე კვარტალი']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$D = {
  narrow: ['ია', 'თე', 'მა', 'აპ', 'მს', 'ვნ', 'ვლ', 'აგ', 'სე', 'ოქ', 'ნო', 'დე'],
  abbreviated: ['იან', 'თებ', 'მარ', 'აპრ', 'მაი', 'ივნ', 'ივლ', 'აგვ', 'სექ', 'ოქტ', 'ნოე', 'დეკ'],
  wide: ['იანვარი', 'თებერვალი', 'მარტი', 'აპრილი', 'მაისი', 'ივნისი', 'ივლისი', 'აგვისტო', 'სექტემბერი', 'ოქტომბერი', 'ნოემბერი', 'დეკემბერი']
};
var dayValues$D = {
  narrow: ['კვ', 'ორ', 'სა', 'ოთ', 'ხუ', 'პა', 'შა'],
  short: ['კვი', 'ორშ', 'სამ', 'ოთხ', 'ხუთ', 'პარ', 'შაბ'],
  abbreviated: ['კვი', 'ორშ', 'სამ', 'ოთხ', 'ხუთ', 'პარ', 'შაბ'],
  wide: ['კვირა', 'ორშაბათი', 'სამშაბათი', 'ოთხშაბათი', 'ხუთშაბათი', 'პარასკევი', 'შაბათი']
};
var dayPeriodValues$D = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'შუაღამე',
    noon: 'შუადღე',
    morning: 'დილა',
    afternoon: 'საღამო',
    evening: 'საღამო',
    night: 'ღამე'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'შუაღამე',
    noon: 'შუადღე',
    morning: 'დილა',
    afternoon: 'საღამო',
    evening: 'საღამო',
    night: 'ღამე'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'შუაღამე',
    noon: 'შუადღე',
    morning: 'დილა',
    afternoon: 'საღამო',
    evening: 'საღამო',
    night: 'ღამე'
  }
};
var formattingDayPeriodValues$w = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'შუაღამით',
    noon: 'შუადღისას',
    morning: 'დილით',
    afternoon: 'ნაშუადღევს',
    evening: 'საღამოს',
    night: 'ღამით'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'შუაღამით',
    noon: 'შუადღისას',
    morning: 'დილით',
    afternoon: 'ნაშუადღევს',
    evening: 'საღამოს',
    night: 'ღამით'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'შუაღამით',
    noon: 'შუადღისას',
    morning: 'დილით',
    afternoon: 'ნაშუადღევს',
    evening: 'საღამოს',
    night: 'ღამით'
  }
};
var ordinalNumber$D = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  if (number === 1) {
    return number + '-ლი';
  }
  return number + '-ე';
};
var localize$1e = {
  ordinalNumber: ordinalNumber$D,
  era: buildLocalizeFn({
    values: eraValues$D,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$D,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$D,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$D,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$D,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$w,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1f = localize$1e;

var matchOrdinalNumberPattern$D = /^(\d+)(-ლი|-ე)?/i;
var parseOrdinalNumberPattern$D = /\d+/i;
var matchEraPatterns$D = {
  narrow: /^(ჩვ?\.წ)/i,
  abbreviated: /^(ჩვ?\.წ)/i,
  wide: /^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე|ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i
};
var parseEraPatterns$D = {
  any: [/^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე)/i, /^(ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i]
};
var matchQuarterPatterns$D = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-(ლი|ე)? კვ/i,
  wide: /^[1234]-(ლი|ე)? კვარტალი/i
};
var parseQuarterPatterns$D = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$D = {
  any: /^(ია|თე|მა|აპ|მს|ვნ|ვლ|აგ|სე|ოქ|ნო|დე)/i
};
var parseMonthPatterns$D = {
  any: [/^ია/i, /^თ/i, /^მარ/i, /^აპ/i, /^მაი/i, /^ი?ვნ/i, /^ი?ვლ/i, /^აგ/i, /^ს/i, /^ო/i, /^ნ/i, /^დ/i]
};
var matchDayPatterns$D = {
  narrow: /^(კვ|ორ|სა|ოთ|ხუ|პა|შა)/i,
  short: /^(კვი|ორშ|სამ|ოთხ|ხუთ|პარ|შაბ)/i,
  wide: /^(კვირა|ორშაბათი|სამშაბათი|ოთხშაბათი|ხუთშაბათი|პარასკევი|შაბათი)/i
};
var parseDayPatterns$D = {
  any: [/^კვ/i, /^ორ/i, /^სა/i, /^ოთ/i, /^ხუ/i, /^პა/i, /^შა/i]
};
var matchDayPeriodPatterns$D = {
  any: /^([ap]\.?\s?m\.?|შუაღ|დილ)/i
};
var parseDayPeriodPatterns$D = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^შუაღ/i,
    noon: /^შუადღ/i,
    morning: /^დილ/i,
    afternoon: /ნაშუადღევს/i,
    evening: /საღამო/i,
    night: /ღამ/i
  }
};
var match$1e = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$D,
    parsePattern: parseOrdinalNumberPattern$D,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$D,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$D,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$D,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$D,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$D,
    defaultMatchWidth: 'any',
    parsePatterns: parseMonthPatterns$D,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$D,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$D,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$D,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$D,
    defaultParseWidth: 'any'
  })
};
var match$1f = match$1e;

/**
 * @type {Locale}
 * @category Locales
 * @summary Georgian locale.
 * @language Georgian
 * @iso-639-2 geo
 * @author Lado Lomidze [@Landish]{@link https://github.com/Landish}
 * @author Nick Shvelidze [@shvelo]{@link https://github.com/shvelo}
 */
var locale$1f = {
  code: 'ka',
  formatDistance: formatDistance$1f,
  formatLong: formatLong$1f,
  formatRelative: formatRelative$1f,
  localize: localize$1f,
  match: match$1f,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1g = locale$1f;

var formatDistanceLocale$C = {
  lessThanXSeconds: {
    regular: {
      one: '1 секундтан аз',
      singularNominative: '{{count}} секундтан аз',
      singularGenitive: '{{count}} секундтан аз',
      pluralGenitive: '{{count}} секундтан аз'
    },
    future: {
      one: 'бір секундтан кейін',
      singularNominative: '{{count}} секундтан кейін',
      singularGenitive: '{{count}} секундтан кейін',
      pluralGenitive: '{{count}} секундтан кейін'
    }
  },
  xSeconds: {
    regular: {
      singularNominative: '{{count}} секунд',
      singularGenitive: '{{count}} секунд',
      pluralGenitive: '{{count}} секунд'
    },
    past: {
      singularNominative: '{{count}} секунд бұрын',
      singularGenitive: '{{count}} секунд бұрын',
      pluralGenitive: '{{count}} секунд бұрын'
    },
    future: {
      singularNominative: '{{count}} секундтан кейін',
      singularGenitive: '{{count}} секундтан кейін',
      pluralGenitive: '{{count}} секундтан кейін'
    }
  },
  halfAMinute: function halfAMinute(options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return 'жарты минут ішінде';
      } else {
        return 'жарты минут бұрын';
      }
    }
    return 'жарты минут';
  },
  lessThanXMinutes: {
    regular: {
      one: '1 минуттан аз',
      singularNominative: '{{count}} минуттан аз',
      singularGenitive: '{{count}} минуттан аз',
      pluralGenitive: '{{count}} минуттан аз'
    },
    future: {
      one: 'минуттан кем ',
      singularNominative: '{{count}} минуттан кем',
      singularGenitive: '{{count}} минуттан кем',
      pluralGenitive: '{{count}} минуттан кем'
    }
  },
  xMinutes: {
    regular: {
      singularNominative: '{{count}} минут',
      singularGenitive: '{{count}} минут',
      pluralGenitive: '{{count}} минут'
    },
    past: {
      singularNominative: '{{count}} минут бұрын',
      singularGenitive: '{{count}} минут бұрын',
      pluralGenitive: '{{count}} минут бұрын'
    },
    future: {
      singularNominative: '{{count}} минуттан кейін',
      singularGenitive: '{{count}} минуттан кейін',
      pluralGenitive: '{{count}} минуттан кейін'
    }
  },
  aboutXHours: {
    regular: {
      singularNominative: 'шамамен {{count}} сағат',
      singularGenitive: 'шамамен {{count}} сағат',
      pluralGenitive: 'шамамен {{count}} сағат'
    },
    future: {
      singularNominative: 'шамамен {{count}} сағаттан кейін',
      singularGenitive: 'шамамен {{count}} сағаттан кейін',
      pluralGenitive: 'шамамен {{count}} сағаттан кейін'
    }
  },
  xHours: {
    regular: {
      singularNominative: '{{count}} сағат',
      singularGenitive: '{{count}} сағат',
      pluralGenitive: '{{count}} сағат'
    }
  },
  xDays: {
    regular: {
      singularNominative: '{{count}} күн',
      singularGenitive: '{{count}} күн',
      pluralGenitive: '{{count}} күн'
    },
    future: {
      singularNominative: '{{count}} күннен кейін',
      singularGenitive: '{{count}} күннен кейін',
      pluralGenitive: '{{count}} күннен кейін'
    }
  },
  aboutXWeeks: {
    type: 'weeks',
    one: 'шамамен 1 апта',
    other: 'шамамен {{count}} апта'
  },
  xWeeks: {
    type: 'weeks',
    one: '1 апта',
    other: '{{count}} апта'
  },
  aboutXMonths: {
    regular: {
      singularNominative: 'шамамен {{count}} ай',
      singularGenitive: 'шамамен {{count}} ай',
      pluralGenitive: 'шамамен {{count}} ай'
    },
    future: {
      singularNominative: 'шамамен {{count}} айдан кейін',
      singularGenitive: 'шамамен {{count}} айдан кейін',
      pluralGenitive: 'шамамен {{count}} айдан кейін'
    }
  },
  xMonths: {
    regular: {
      singularNominative: '{{count}} ай',
      singularGenitive: '{{count}} ай',
      pluralGenitive: '{{count}} ай'
    }
  },
  aboutXYears: {
    regular: {
      singularNominative: 'шамамен {{count}} жыл',
      singularGenitive: 'шамамен {{count}} жыл',
      pluralGenitive: 'шамамен {{count}} жыл'
    },
    future: {
      singularNominative: 'шамамен {{count}} жылдан кейін',
      singularGenitive: 'шамамен {{count}} жылдан кейін',
      pluralGenitive: 'шамамен {{count}} жылдан кейін'
    }
  },
  xYears: {
    regular: {
      singularNominative: '{{count}} жыл',
      singularGenitive: '{{count}} жыл',
      pluralGenitive: '{{count}} жыл'
    },
    future: {
      singularNominative: '{{count}} жылдан кейін',
      singularGenitive: '{{count}} жылдан кейін',
      pluralGenitive: '{{count}} жылдан кейін'
    }
  },
  overXYears: {
    regular: {
      singularNominative: '{{count}} жылдан астам',
      singularGenitive: '{{count}} жылдан астам',
      pluralGenitive: '{{count}} жылдан астам'
    },
    future: {
      singularNominative: '{{count}} жылдан астам',
      singularGenitive: '{{count}} жылдан астам',
      pluralGenitive: '{{count}} жылдан астам'
    }
  },
  almostXYears: {
    regular: {
      singularNominative: '{{count}} жылға жақын',
      singularGenitive: '{{count}} жылға жақын',
      pluralGenitive: '{{count}} жылға жақын'
    },
    future: {
      singularNominative: '{{count}} жылдан кейін',
      singularGenitive: '{{count}} жылдан кейін',
      pluralGenitive: '{{count}} жылдан кейін'
    }
  }
};
function declension$4(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one && count === 1) return scheme.one;
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
var formatDistance$1c = function formatDistance(token, count, options) {
  var tokenValue = formatDistanceLocale$C[token];
  if (typeof tokenValue === 'function') return tokenValue(options);
  if (tokenValue.type === 'weeks') {
    return count === 1 ? tokenValue.one : tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (tokenValue.future) {
        return declension$4(tokenValue.future, count);
      } else {
        return declension$4(tokenValue.regular, count) + ' кейін';
      }
    } else {
      if (tokenValue.past) {
        return declension$4(tokenValue.past, count);
      } else {
        return declension$4(tokenValue.regular, count) + ' бұрын';
      }
    }
  } else {
    return declension$4(tokenValue.regular, count);
  }
};
var formatDistance$1d = formatDistance$1c;

var dateFormats$C = {
  full: "EEEE, do MMMM y 'ж.'",
  long: "do MMMM y 'ж.'",
  medium: "d MMM y 'ж.'",
  short: 'dd.MM.yyyy'
};
var timeFormats$C = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$C = {
  any: '{{date}}, {{time}}'
};
var formatLong$1c = {
  date: buildFormatLongFn({
    formats: dateFormats$C,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$C,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$C,
    defaultWidth: 'any'
  })
};
var formatLong$1d = formatLong$1c;

var accusativeWeekdays$3 = ['жексенбіде', 'дүйсенбіде', 'сейсенбіде', 'сәрсенбіде', 'бейсенбіде', 'жұмада', 'сенбіде'];
function _lastWeek$3(day) {
  var weekday = accusativeWeekdays$3[day];
  return "'өткен " + weekday + " сағат' p'-де'";
}
function thisWeek$4(day) {
  var weekday = accusativeWeekdays$3[day];
  return "'" + weekday + " сағат' p'-де'";
}
function _nextWeek$3(day) {
  var weekday = accusativeWeekdays$3[day];
  return "'келесі " + weekday + " сағат' p'-де'";
}
var formatRelativeLocale$C = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$4(day);
    } else {
      return _lastWeek$3(day);
    }
  },
  yesterday: "'кеше сағат' p'-де'",
  today: "'бүгін сағат' p'-де'",
  tomorrow: "'ертең сағат' p'-де'",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$4(day);
    } else {
      return _nextWeek$3(day);
    }
  },
  other: 'P'
};
var formatRelative$1c = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$C[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$1d = formatRelative$1c;

var eraValues$C = {
  narrow: ['б.з.д.', 'б.з.'],
  abbreviated: ['б.з.д.', 'б.з.'],
  wide: ['біздің заманымызға дейін', 'біздің заманымыз']
};
var quarterValues$C = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-ші тоқ.', '2-ші тоқ.', '3-ші тоқ.', '4-ші тоқ.'],
  wide: ['1-ші тоқсан', '2-ші тоқсан', '3-ші тоқсан', '4-ші тоқсан']
};
var monthValues$C = {
  narrow: ['Қ', 'А', 'Н', 'С', 'М', 'М', 'Ш', 'Т', 'Қ', 'Қ', 'Қ', 'Ж'],
  abbreviated: ['қаң', 'ақп', 'нау', 'сәу', 'мам', 'мау', 'шіл', 'там', 'қыр', 'қаз', 'қар', 'жел'],
  wide: ['қаңтар', 'ақпан', 'наурыз', 'сәуір', 'мамыр', 'маусым', 'шілде', 'тамыз', 'қыркүйек', 'қазан', 'қараша', 'желтоқсан']
};
var formattingMonthValues$9 = {
  narrow: ['Қ', 'А', 'Н', 'С', 'М', 'М', 'Ш', 'Т', 'Қ', 'Қ', 'Қ', 'Ж'],
  abbreviated: ['қаң', 'ақп', 'нау', 'сәу', 'мам', 'мау', 'шіл', 'там', 'қыр', 'қаз', 'қар', 'жел'],
  wide: ['қаңтар', 'ақпан', 'наурыз', 'сәуір', 'мамыр', 'маусым', 'шілде', 'тамыз', 'қыркүйек', 'қазан', 'қараша', 'желтоқсан']
};
var dayValues$C = {
  narrow: ['Ж', 'Д', 'С', 'С', 'Б', 'Ж', 'С'],
  short: ['жс', 'дс', 'сс', 'ср', 'бс', 'жм', 'сб'],
  abbreviated: ['жс', 'дс', 'сс', 'ср', 'бс', 'жм', 'сб'],
  wide: ['жексенбі', 'дүйсенбі', 'сейсенбі', 'сәрсенбі', 'бейсенбі', 'жұма', 'сенбі']
};
var dayPeriodValues$C = {
  narrow: {
    am: 'ТД',
    pm: 'ТК',
    midnight: 'түн ортасы',
    noon: 'түс',
    morning: 'таң',
    afternoon: 'күндіз',
    evening: 'кеш',
    night: 'түн'
  },
  wide: {
    am: 'ТД',
    pm: 'ТК',
    midnight: 'түн ортасы',
    noon: 'түс',
    morning: 'таң',
    afternoon: 'күндіз',
    evening: 'кеш',
    night: 'түн'
  }
};
var formattingDayPeriodValues$v = {
  narrow: {
    am: 'ТД',
    pm: 'ТК',
    midnight: 'түн ортасында',
    noon: 'түс',
    morning: 'таң',
    afternoon: 'күн',
    evening: 'кеш',
    night: 'түн'
  },
  wide: {
    am: 'ТД',
    pm: 'ТК',
    midnight: 'түн ортасында',
    noon: 'түсте',
    morning: 'таңертең',
    afternoon: 'күндіз',
    evening: 'кеште',
    night: 'түнде'
  }
};
var suffixes = {
  0: '-ші',
  1: '-ші',
  2: '-ші',
  3: '-ші',
  4: '-ші',
  5: '-ші',
  6: '-шы',
  7: '-ші',
  8: '-ші',
  9: '-шы',
  10: '-шы',
  20: '-шы',
  30: '-шы',
  40: '-шы',
  50: '-ші',
  60: '-шы',
  70: '-ші',
  80: '-ші',
  90: '-шы',
  100: '-ші'
};
var ordinalNumber$C = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var mod10 = number % 10;
  var b = number >= 100 ? 100 : null;
  var suffix = suffixes[number] || suffixes[mod10] || b && suffixes[b] || '';
  return number + suffix;
};
var localize$1c = {
  ordinalNumber: ordinalNumber$C,
  era: buildLocalizeFn({
    values: eraValues$C,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$C,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$C,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$9,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$C,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$C,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$v,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1d = localize$1c;

var matchOrdinalNumberPattern$C = /^(\d+)(-?(ші|шы))?/i;
var parseOrdinalNumberPattern$C = /\d+/i;
var matchEraPatterns$C = {
  narrow: /^((б )?з\.?\s?д\.?)/i,
  abbreviated: /^((б )?з\.?\s?д\.?)/i,
  wide: /^(біздің заманымызға дейін|біздің заманымыз|біздің заманымыздан)/i
};
var parseEraPatterns$C = {
  any: [/^б/i, /^з/i]
};
var matchQuarterPatterns$C = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?ші)? тоқ.?/i,
  wide: /^[1234](-?ші)? тоқсан/i
};
var parseQuarterPatterns$C = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$C = {
  narrow: /^(қ|а|н|с|м|мау|ш|т|қыр|қаз|қар|ж)/i,
  abbreviated: /^(қаң|ақп|нау|сәу|мам|мау|шіл|там|қыр|қаз|қар|жел)/i,
  wide: /^(қаңтар|ақпан|наурыз|сәуір|мамыр|маусым|шілде|тамыз|қыркүйек|қазан|қараша|желтоқсан)/i
};
var parseMonthPatterns$C = {
  narrow: [/^қ/i, /^а/i, /^н/i, /^с/i, /^м/i, /^м/i, /^ш/i, /^т/i, /^қ/i, /^қ/i, /^қ/i, /^ж/i],
  abbreviated: [/^қаң/i, /^ақп/i, /^нау/i, /^сәу/i, /^мам/i, /^мау/i, /^шіл/i, /^там/i, /^қыр/i, /^қаз/i, /^қар/i, /^жел/i],
  any: [/^қ/i, /^а/i, /^н/i, /^с/i, /^м/i, /^м/i, /^ш/i, /^т/i, /^қ/i, /^қ/i, /^қ/i, /^ж/i]
};
var matchDayPatterns$C = {
  narrow: /^(ж|д|с|с|б|ж|с)/i,
  short: /^(жс|дс|сс|ср|бс|жм|сб)/i,
  wide: /^(жексенбі|дүйсенбі|сейсенбі|сәрсенбі|бейсенбі|жұма|сенбі)/i
};
var parseDayPatterns$C = {
  narrow: [/^ж/i, /^д/i, /^с/i, /^с/i, /^б/i, /^ж/i, /^с/i],
  short: [/^жс/i, /^дс/i, /^сс/i, /^ср/i, /^бс/i, /^жм/i, /^сб/i],
  any: [/^ж[ек]/i, /^д[үй]/i, /^сe[й]/i, /^сә[р]/i, /^б[ей]/i, /^ж[ұм]/i, /^се[н]/i]
};
var matchDayPeriodPatterns$C = {
  narrow: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
  wide: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
  any: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i
};
var parseDayPeriodPatterns$C = {
  any: {
    am: /^ТД/i,
    pm: /^ТК/i,
    midnight: /^түн орта/i,
    noon: /^күндіз/i,
    morning: /таң/i,
    afternoon: /түс/i,
    evening: /кеш/i,
    night: /түн/i
  }
};
var match$1c = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$C,
    parsePattern: parseOrdinalNumberPattern$C,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$C,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$C,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$C,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$C,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$C,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$C,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$C,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$C,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$C,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$C,
    defaultParseWidth: 'any'
  })
};
var match$1d = match$1c;

/**
 * @type {Locale}
 * @category Locales
 * @summary Kazakh locale.
 * @language Kazakh
 * @iso-639-2 kaz
 * @author Nikita Bayev [@drugoi]{@link https://github.com/drugoi}
 */
var locale$1d = {
  code: 'kk',
  formatDistance: formatDistance$1d,
  formatLong: formatLong$1d,
  formatRelative: formatRelative$1d,
  localize: localize$1d,
  match: match$1d,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1e = locale$1d;

var formatDistanceLocale$B = {
  lessThanXSeconds: 'តិចជាង {{count}} វិនាទី',
  xSeconds: '{{count}} វិនាទី',
  halfAMinute: 'កន្លះនាទី',
  lessThanXMinutes: 'តិចជាង {{count}} នាទី',
  xMinutes: '{{count}} នាទី',
  aboutXHours: 'ប្រហែល {{count}} ម៉ោង',
  xHours: '{{count}} ម៉ោង',
  xDays: '{{count}} ថ្ងៃ',
  aboutXWeeks: 'ប្រហែល {{count}} សប្តាហ៍',
  xWeeks: '{{count}} សប្តាហ៍',
  aboutXMonths: 'ប្រហែល {{count}} ខែ',
  xMonths: '{{count}} ខែ',
  aboutXYears: 'ប្រហែល {{count}} ឆ្នាំ',
  xYears: '{{count}} ឆ្នាំ',
  overXYears: 'ជាង {{count}} ឆ្នាំ',
  almostXYears: 'ជិត {{count}} ឆ្នាំ'
};
var formatDistance$1a = function formatDistance(token, count, options) {
  var tokenValue = formatDistanceLocale$B[token];
  var result = tokenValue;
  if (typeof count === 'number') {
    result = result.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ក្នុងរយៈពេល ' + result;
    } else {
      return result + 'មុន';
    }
  }
  return result;
};
var formatDistance$1b = formatDistance$1a;

var dateFormats$B = {
  full: 'EEEE do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var timeFormats$B = {
  full: 'h:mm:ss a',
  long: 'h:mm:ss a',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$B = {
  full: "{{date}} 'ម៉ោង' {{time}}",
  long: "{{date}} 'ម៉ោង' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1a = {
  date: buildFormatLongFn({
    formats: dateFormats$B,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$B,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$B,
    defaultWidth: 'full'
  })
};
var formatLong$1b = formatLong$1a;

var formatRelativeLocale$B = {
  lastWeek: "'ថ្ងៃ'eeee'ស​ប្តា​ហ៍​មុនម៉ោង' p",
  yesterday: "'ម្សិលមិញនៅម៉ោង' p",
  today: "'ថ្ងៃនេះម៉ោង' p",
  tomorrow: "'ថ្ងៃស្អែកម៉ោង' p",
  nextWeek: "'ថ្ងៃ'eeee'ស​ប្តា​ហ៍​ក្រោយម៉ោង' p",
  other: 'P'
};
var formatRelative$1a = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$B[token];
};
var formatRelative$1b = formatRelative$1a;

var eraValues$B = {
  narrow: ['ម.គស', 'គស'],
  abbreviated: ['មុនគ.ស', 'គ.ស'],
  wide: ['មុនគ្រិស្តសករាជ', 'នៃគ្រិស្តសករាជ']
};
var quarterValues$B = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['ត្រីមាសទី 1', 'ត្រីមាសទី 2', 'ត្រីមាសទី 3', 'ត្រីមាសទី 4']
};
var monthValues$B = {
  narrow: ['ម.ក', 'ក.ម', 'មិ', 'ម.ស', 'ឧ.ស', 'ម.ថ', 'ក.ដ', 'សី', 'កញ', 'តុ', 'វិ', 'ធ'],
  abbreviated: ['មករា', 'កុម្ភៈ', 'មីនា', 'មេសា', 'ឧសភា', 'មិថុនា', 'កក្កដា', 'សីហា', 'កញ្ញា', 'តុលា', 'វិច្ឆិកា', 'ធ្នូ'],
  wide: ['មករា', 'កុម្ភៈ', 'មីនា', 'មេសា', 'ឧសភា', 'មិថុនា', 'កក្កដា', 'សីហា', 'កញ្ញា', 'តុលា', 'វិច្ឆិកា', 'ធ្នូ']
};
var dayValues$B = {
  narrow: ['អា', 'ច', 'អ', 'ព', 'ព្រ', 'សុ', 'ស'],
  short: ['អា', 'ច', 'អ', 'ព', 'ព្រ', 'សុ', 'ស'],
  abbreviated: ['អា', 'ច', 'អ', 'ព', 'ព្រ', 'សុ', 'ស'],
  wide: ['អាទិត្យ', 'ចន្ទ', 'អង្គារ', 'ពុធ', 'ព្រហស្បតិ៍', 'សុក្រ', 'សៅរ៍']
};
var dayPeriodValues$B = {
  narrow: {
    am: 'ព្រឹក',
    pm: 'ល្ងាច',
    midnight: '​ពេលកណ្ដាលអធ្រាត្រ',
    noon: 'ពេលថ្ងៃត្រង់',
    morning: 'ពេលព្រឹក',
    afternoon: 'ពេលរសៀល',
    evening: 'ពេលល្ងាច',
    night: 'ពេលយប់'
  },
  abbreviated: {
    am: 'ព្រឹក',
    pm: 'ល្ងាច',
    midnight: '​ពេលកណ្ដាលអធ្រាត្រ',
    noon: 'ពេលថ្ងៃត្រង់',
    morning: 'ពេលព្រឹក',
    afternoon: 'ពេលរសៀល',
    evening: 'ពេលល្ងាច',
    night: 'ពេលយប់'
  },
  wide: {
    am: 'ព្រឹក',
    pm: 'ល្ងាច',
    midnight: '​ពេលកណ្ដាលអធ្រាត្រ',
    noon: 'ពេលថ្ងៃត្រង់',
    morning: 'ពេលព្រឹក',
    afternoon: 'ពេលរសៀល',
    evening: 'ពេលល្ងាច',
    night: 'ពេលយប់'
  }
};
var formattingDayPeriodValues$u = {
  narrow: {
    am: 'ព្រឹក',
    pm: 'ល្ងាច',
    midnight: '​ពេលកណ្ដាលអធ្រាត្រ',
    noon: 'ពេលថ្ងៃត្រង់',
    morning: 'ពេលព្រឹក',
    afternoon: 'ពេលរសៀល',
    evening: 'ពេលល្ងាច',
    night: 'ពេលយប់'
  },
  abbreviated: {
    am: 'ព្រឹក',
    pm: 'ល្ងាច',
    midnight: '​ពេលកណ្ដាលអធ្រាត្រ',
    noon: 'ពេលថ្ងៃត្រង់',
    morning: 'ពេលព្រឹក',
    afternoon: 'ពេលរសៀល',
    evening: 'ពេលល្ងាច',
    night: 'ពេលយប់'
  },
  wide: {
    am: 'ព្រឹក',
    pm: 'ល្ងាច',
    midnight: '​ពេលកណ្ដាលអធ្រាត្រ',
    noon: 'ពេលថ្ងៃត្រង់',
    morning: 'ពេលព្រឹក',
    afternoon: 'ពេលរសៀល',
    evening: 'ពេលល្ងាច',
    night: 'ពេលយប់'
  }
};
var ordinalNumber$B = function ordinalNumber(dirtyNumber, _) {
  var number = Number(dirtyNumber);
  return number.toString();
};
var localize$1a = {
  ordinalNumber: ordinalNumber$B,
  era: buildLocalizeFn({
    values: eraValues$B,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$B,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$B,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$B,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$B,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$u,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1b = localize$1a;

var matchOrdinalNumberPattern$B = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$B = /\d+/i;
var matchEraPatterns$B = {
  narrow: /^(ម\.)?គស/i,
  abbreviated: /^(មុន)?គ\.ស/i,
  wide: /^(មុន|នៃ)គ្រិស្តសករាជ/i
};
var parseEraPatterns$B = {
  any: [/^(ម|មុន)គ\.?ស/i, /^(នៃ)?គ\.?ស/i]
};
var matchQuarterPatterns$B = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^(ត្រីមាស)(ទី)?\s?[1234]/i
};
var parseQuarterPatterns$B = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$B = {
  narrow: /^(ម\.ក|ក\.ម|មិ|ម\.ស|ឧ\.ស|ម\.ថ|ក\.ដ|សី|កញ|តុ|វិ|ធ)/i,
  abbreviated: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i,
  wide: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i
};
var parseMonthPatterns$B = {
  narrow: [/^ម\.ក/i, /^ក\.ម/i, /^មិ/i, /^ម\.ស/i, /^ឧ\.ស/i, /^ម\.ថ/i, /^ក\.ដ/i, /^សី/i, /^កញ/i, /^តុ/i, /^វិ/i, /^ធ/i],
  any: [/^មក/i, /^កុ/i, /^មីន/i, /^មេ/i, /^ឧស/i, /^មិថ/i, /^កក/i, /^សី/i, /^កញ/i, /^តុ/i, /^វិច/i, /^ធ/i]
};
var matchDayPatterns$B = {
  narrow: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
  short: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
  abbreviated: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
  wide: /^(អាទិត្យ|ចន្ទ|អង្គារ|ពុធ|ព្រហស្បតិ៍|សុក្រ|សៅរ៍)/i
};
var parseDayPatterns$B = {
  narrow: [/^អា/i, /^ច/i, /^អ/i, /^ព/i, /^ព្រ/i, /^សុ/i, /^ស/i],
  any: [/^អា/i, /^ច/i, /^អ/i, /^ព/i, /^ព្រ/i, /^សុ/i, /^សៅ/i]
};
var matchDayPeriodPatterns$B = {
  narrow: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i,
  any: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i
};
var parseDayPeriodPatterns$B = {
  any: {
    am: /^ព្រឹក/i,
    pm: /^ល្ងាច/i,
    midnight: /^ពេលកណ្ដាលអធ្រាត្រ/i,
    noon: /^ពេលថ្ងៃត្រង់/i,
    morning: /ពេលព្រឹក/i,
    afternoon: /ពេលរសៀល/i,
    evening: /ពេលល្ងាច/i,
    night: /ពេលយប់/i
  }
};
var match$1a = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$B,
    parsePattern: parseOrdinalNumberPattern$B,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$B,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$B,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$B,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$B,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$B,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$B,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$B,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$B,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$B,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$B,
    defaultParseWidth: 'any'
  })
};
var match$1b = match$1a;

/**
 * @type {Locale}
 * @category Locales
 * @summary Khmer locale (Cambodian).
 * @language Khmer
 * @iso-639-2 khm
 * @author Seanghay Yath [@seanghay]{@link https://github.com/seanghay}
 */
var locale$1b = {
  code: 'km',
  formatDistance: formatDistance$1b,
  formatLong: formatLong$1b,
  formatRelative: formatRelative$1b,
  localize: localize$1b,
  match: match$1b,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$1c = locale$1b;

// note: no implementation for weeks

var formatDistanceLocale$A = {
  lessThanXSeconds: {
    one: {
      default: '1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
      future: '1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
      past: '1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ'
    },
    other: {
      default: '{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
      future: '{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
      past: '{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ'
    }
  },
  xSeconds: {
    one: {
      default: '1 ಸೆಕೆಂಡ್',
      future: '1 ಸೆಕೆಂಡ್‌ನಲ್ಲಿ',
      past: '1 ಸೆಕೆಂಡ್ ಹಿಂದೆ'
    },
    other: {
      default: '{{count}} ಸೆಕೆಂಡುಗಳು',
      future: '{{count}} ಸೆಕೆಂಡ್‌ಗಳಲ್ಲಿ',
      past: '{{count}} ಸೆಕೆಂಡ್ ಹಿಂದೆ'
    }
  },
  halfAMinute: {
    other: {
      default: 'ಅರ್ಧ ನಿಮಿಷ',
      future: 'ಅರ್ಧ ನಿಮಿಷದಲ್ಲಿ',
      past: 'ಅರ್ಧ ನಿಮಿಷದ ಹಿಂದೆ'
    }
  },
  lessThanXMinutes: {
    one: {
      default: '1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
      future: '1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
      past: '1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ'
    },
    other: {
      default: '{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
      future: '{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
      past: '{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ'
    }
  },
  xMinutes: {
    one: {
      default: '1 ನಿಮಿಷ',
      future: '1 ನಿಮಿಷದಲ್ಲಿ',
      past: '1 ನಿಮಿಷದ ಹಿಂದೆ'
    },
    other: {
      default: '{{count}} ನಿಮಿಷಗಳು',
      future: '{{count}} ನಿಮಿಷಗಳಲ್ಲಿ',
      past: '{{count}} ನಿಮಿಷಗಳ ಹಿಂದೆ'
    }
  },
  aboutXHours: {
    one: {
      default: 'ಸುಮಾರು 1 ಗಂಟೆ',
      future: 'ಸುಮಾರು 1 ಗಂಟೆಯಲ್ಲಿ',
      past: 'ಸುಮಾರು 1 ಗಂಟೆ ಹಿಂದೆ'
    },
    other: {
      default: 'ಸುಮಾರು {{count}} ಗಂಟೆಗಳು',
      future: 'ಸುಮಾರು {{count}} ಗಂಟೆಗಳಲ್ಲಿ',
      past: 'ಸುಮಾರು {{count}} ಗಂಟೆಗಳ ಹಿಂದೆ'
    }
  },
  xHours: {
    one: {
      default: '1 ಗಂಟೆ',
      future: '1 ಗಂಟೆಯಲ್ಲಿ',
      past: '1 ಗಂಟೆ ಹಿಂದೆ'
    },
    other: {
      default: '{{count}} ಗಂಟೆಗಳು',
      future: '{{count}} ಗಂಟೆಗಳಲ್ಲಿ',
      past: '{{count}} ಗಂಟೆಗಳ ಹಿಂದೆ'
    }
  },
  xDays: {
    one: {
      default: '1 ದಿನ',
      future: '1 ದಿನದಲ್ಲಿ',
      past: '1 ದಿನದ ಹಿಂದೆ'
    },
    other: {
      default: '{{count}} ದಿನಗಳು',
      future: '{{count}} ದಿನಗಳಲ್ಲಿ',
      past: '{{count}} ದಿನಗಳ ಹಿಂದೆ'
    }
  },
  // TODO
  // aboutXWeeks: {},

  // TODO
  // xWeeks: {},

  aboutXMonths: {
    one: {
      default: 'ಸುಮಾರು 1 ತಿಂಗಳು',
      future: 'ಸುಮಾರು 1 ತಿಂಗಳಲ್ಲಿ',
      past: 'ಸುಮಾರು 1 ತಿಂಗಳ ಹಿಂದೆ'
    },
    other: {
      default: 'ಸುಮಾರು {{count}} ತಿಂಗಳು',
      future: 'ಸುಮಾರು {{count}} ತಿಂಗಳುಗಳಲ್ಲಿ',
      past: 'ಸುಮಾರು {{count}} ತಿಂಗಳುಗಳ ಹಿಂದೆ'
    }
  },
  xMonths: {
    one: {
      default: '1 ತಿಂಗಳು',
      future: '1 ತಿಂಗಳಲ್ಲಿ',
      past: '1 ತಿಂಗಳ ಹಿಂದೆ'
    },
    other: {
      default: '{{count}} ತಿಂಗಳು',
      future: '{{count}} ತಿಂಗಳುಗಳಲ್ಲಿ',
      past: '{{count}} ತಿಂಗಳುಗಳ ಹಿಂದೆ'
    }
  },
  aboutXYears: {
    one: {
      default: 'ಸುಮಾರು 1 ವರ್ಷ',
      future: 'ಸುಮಾರು 1 ವರ್ಷದಲ್ಲಿ',
      past: 'ಸುಮಾರು 1 ವರ್ಷದ ಹಿಂದೆ'
    },
    other: {
      default: 'ಸುಮಾರು {{count}} ವರ್ಷಗಳು',
      future: 'ಸುಮಾರು {{count}} ವರ್ಷಗಳಲ್ಲಿ',
      past: 'ಸುಮಾರು {{count}} ವರ್ಷಗಳ ಹಿಂದೆ'
    }
  },
  xYears: {
    one: {
      default: '1 ವರ್ಷ',
      future: '1 ವರ್ಷದಲ್ಲಿ',
      past: '1 ವರ್ಷದ ಹಿಂದೆ'
    },
    other: {
      default: '{{count}} ವರ್ಷಗಳು',
      future: '{{count}} ವರ್ಷಗಳಲ್ಲಿ',
      past: '{{count}} ವರ್ಷಗಳ ಹಿಂದೆ'
    }
  },
  overXYears: {
    one: {
      default: '1 ವರ್ಷದ ಮೇಲೆ',
      future: '1 ವರ್ಷದ ಮೇಲೆ',
      past: '1 ವರ್ಷದ ಮೇಲೆ'
    },
    other: {
      default: '{{count}} ವರ್ಷಗಳ ಮೇಲೆ',
      future: '{{count}} ವರ್ಷಗಳ ಮೇಲೆ',
      past: '{{count}} ವರ್ಷಗಳ ಮೇಲೆ'
    }
  },
  almostXYears: {
    one: {
      default: 'ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ',
      future: 'ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ',
      past: 'ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ'
    },
    other: {
      default: 'ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ',
      future: 'ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ',
      past: 'ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ'
    }
  }
};
function getResultByTense(parentToken, options) {
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return parentToken.future;
    } else {
      return parentToken.past;
    }
  }
  return parentToken.default;
}
var formatDistance$18 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$A[token];
  if (tokenValue.one && count === 1) {
    result = getResultByTense(tokenValue.one, options);
  } else {
    result = getResultByTense(tokenValue.other, options);
  }
  return result.replace('{{count}}', String(count));
};
var formatDistance$19 = formatDistance$18;

var dateFormats$A = {
  full: 'EEEE, MMMM d, y',
  // CLDR 1816
  long: 'MMMM d, y',
  // CLDR 1817
  medium: 'MMM d, y',
  // CLDR 1818
  short: 'd/M/yy' // CLDR 1819
};

var timeFormats$A = {
  full: 'hh:mm:ss a zzzz',
  // CLDR 1820
  long: 'hh:mm:ss a z',
  // CLDR 1821
  medium: 'hh:mm:ss a',
  // CLDR 1822
  short: 'hh:mm a' // CLDR 1823
};

var dateTimeFormats$A = {
  full: '{{date}} {{time}}',
  // CLDR 1824
  long: '{{date}} {{time}}',
  // CLDR 1825
  medium: '{{date}} {{time}}',
  // CLDR 1826
  short: '{{date}} {{time}}' // CLDR 1827
};

var formatLong$18 = {
  date: buildFormatLongFn({
    formats: dateFormats$A,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$A,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$A,
    defaultWidth: 'full'
  })
};
var formatLong$19 = formatLong$18;

var formatRelativeLocale$A = {
  lastWeek: "'ಕಳೆದ' eeee p 'ಕ್ಕೆ'",
  yesterday: "'ನಿನ್ನೆ' p 'ಕ್ಕೆ'",
  today: "'ಇಂದು' p 'ಕ್ಕೆ'",
  tomorrow: "'ನಾಳೆ' p 'ಕ್ಕೆ'",
  nextWeek: "eeee p 'ಕ್ಕೆ'",
  other: 'P'
};
var formatRelative$18 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$A[token];
};
var formatRelative$19 = formatRelative$18;

var eraValues$A = {
  narrow: ['ಕ್ರಿ.ಪೂ', 'ಕ್ರಿ.ಶ'],
  abbreviated: ['ಕ್ರಿ.ಪೂ', 'ಕ್ರಿ.ಶ'],
  // CLDR #1618, #1620
  wide: ['ಕ್ರಿಸ್ತ ಪೂರ್ವ', 'ಕ್ರಿಸ್ತ ಶಕ'] // CLDR #1614, #1616
};

var quarterValues$A = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ತ್ರೈ 1', 'ತ್ರೈ 2', 'ತ್ರೈ 3', 'ತ್ರೈ 4'],
  // CLDR #1630 - #1638
  wide: ['1ನೇ ತ್ರೈಮಾಸಿಕ', '2ನೇ ತ್ರೈಮಾಸಿಕ', '3ನೇ ತ್ರೈಮಾಸಿಕ', '4ನೇ ತ್ರೈಮಾಸಿಕ'] // CLDR #1622 - #1629
};

// CLDR #1646 - #1717
var monthValues$A = {
  narrow: ['ಜ', 'ಫೆ', 'ಮಾ', 'ಏ', 'ಮೇ', 'ಜೂ', 'ಜು', 'ಆ', 'ಸೆ', 'ಅ', 'ನ', 'ಡಿ'],
  abbreviated: ['ಜನ', 'ಫೆಬ್ರ', 'ಮಾರ್ಚ್', 'ಏಪ್ರಿ', 'ಮೇ', 'ಜೂನ್', 'ಜುಲೈ', 'ಆಗ', 'ಸೆಪ್ಟೆಂ', 'ಅಕ್ಟೋ', 'ನವೆಂ', 'ಡಿಸೆಂ'],
  wide: ['ಜನವರಿ', 'ಫೆಬ್ರವರಿ', 'ಮಾರ್ಚ್', 'ಏಪ್ರಿಲ್', 'ಮೇ', 'ಜೂನ್', 'ಜುಲೈ', 'ಆಗಸ್ಟ್', 'ಸೆಪ್ಟೆಂಬರ್', 'ಅಕ್ಟೋಬರ್', 'ನವೆಂಬರ್', 'ಡಿಸೆಂಬರ್']
};

// CLDR #1718 - #1773
var dayValues$A = {
  narrow: ['ಭಾ', 'ಸೋ', 'ಮಂ', 'ಬು', 'ಗು', 'ಶು', 'ಶ'],
  short: ['ಭಾನು', 'ಸೋಮ', 'ಮಂಗಳ', 'ಬುಧ', 'ಗುರು', 'ಶುಕ್ರ', 'ಶನಿ'],
  abbreviated: ['ಭಾನು', 'ಸೋಮ', 'ಮಂಗಳ', 'ಬುಧ', 'ಗುರು', 'ಶುಕ್ರ', 'ಶನಿ'],
  wide: ['ಭಾನುವಾರ', 'ಸೋಮವಾರ', 'ಮಂಗಳವಾರ', 'ಬುಧವಾರ', 'ಗುರುವಾರ', 'ಶುಕ್ರವಾರ', 'ಶನಿವಾರ']
};

// CLDR #1774 - #1815
var dayPeriodValues$A = {
  narrow: {
    am: 'ಪೂರ್ವಾಹ್ನ',
    pm: 'ಅಪರಾಹ್ನ',
    midnight: 'ಮಧ್ಯರಾತ್ರಿ',
    noon: 'ಮಧ್ಯಾಹ್ನ',
    morning: 'ಬೆಳಗ್ಗೆ',
    afternoon: 'ಮಧ್ಯಾಹ್ನ',
    evening: 'ಸಂಜೆ',
    night: 'ರಾತ್ರಿ'
  },
  abbreviated: {
    am: 'ಪೂರ್ವಾಹ್ನ',
    pm: 'ಅಪರಾಹ್ನ',
    midnight: 'ಮಧ್ಯರಾತ್ರಿ',
    noon: 'ಮಧ್ಯಾನ್ಹ',
    morning: 'ಬೆಳಗ್ಗೆ',
    afternoon: 'ಮಧ್ಯಾನ್ಹ',
    evening: 'ಸಂಜೆ',
    night: 'ರಾತ್ರಿ'
  },
  wide: {
    am: 'ಪೂರ್ವಾಹ್ನ',
    pm: 'ಅಪರಾಹ್ನ',
    midnight: 'ಮಧ್ಯರಾತ್ರಿ',
    noon: 'ಮಧ್ಯಾನ್ಹ',
    morning: 'ಬೆಳಗ್ಗೆ',
    afternoon: 'ಮಧ್ಯಾನ್ಹ',
    evening: 'ಸಂಜೆ',
    night: 'ರಾತ್ರಿ'
  }
};
var formattingDayPeriodValues$t = {
  narrow: {
    am: 'ಪೂ',
    pm: 'ಅ',
    midnight: 'ಮಧ್ಯರಾತ್ರಿ',
    noon: 'ಮಧ್ಯಾನ್ಹ',
    morning: 'ಬೆಳಗ್ಗೆ',
    afternoon: 'ಮಧ್ಯಾನ್ಹ',
    evening: 'ಸಂಜೆ',
    night: 'ರಾತ್ರಿ'
  },
  abbreviated: {
    am: 'ಪೂರ್ವಾಹ್ನ',
    pm: 'ಅಪರಾಹ್ನ',
    midnight: 'ಮಧ್ಯ ರಾತ್ರಿ',
    noon: 'ಮಧ್ಯಾನ್ಹ',
    morning: 'ಬೆಳಗ್ಗೆ',
    afternoon: 'ಮಧ್ಯಾನ್ಹ',
    evening: 'ಸಂಜೆ',
    night: 'ರಾತ್ರಿ'
  },
  wide: {
    am: 'ಪೂರ್ವಾಹ್ನ',
    pm: 'ಅಪರಾಹ್ನ',
    midnight: 'ಮಧ್ಯ ರಾತ್ರಿ',
    noon: 'ಮಧ್ಯಾನ್ಹ',
    morning: 'ಬೆಳಗ್ಗೆ',
    afternoon: 'ಮಧ್ಯಾನ್ಹ',
    evening: 'ಸಂಜೆ',
    night: 'ರಾತ್ರಿ'
  }
};
var ordinalNumber$A = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'ನೇ';
};
var localize$18 = {
  ordinalNumber: ordinalNumber$A,
  era: buildLocalizeFn({
    values: eraValues$A,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$A,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$A,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$A,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$A,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$t,
    defaultFormattingWidth: 'wide'
  })
};
var localize$19 = localize$18;

var matchOrdinalNumberPattern$A = /^(\d+)(ನೇ|ನೆ)?/i;
var parseOrdinalNumberPattern$A = /\d+/i;
var matchEraPatterns$A = {
  narrow: /^(ಕ್ರಿ.ಪೂ|ಕ್ರಿ.ಶ)/i,
  abbreviated: /^(ಕ್ರಿ\.?\s?ಪೂ\.?|ಕ್ರಿ\.?\s?ಶ\.?|ಪ್ರ\.?\s?ಶ\.?)/i,
  wide: /^(ಕ್ರಿಸ್ತ ಪೂರ್ವ|ಕ್ರಿಸ್ತ ಶಕ|ಪ್ರಸಕ್ತ ಶಕ)/i
};
var parseEraPatterns$A = {
  any: [/^ಪೂ/i, /^(ಶ|ಪ್ರ)/i]
};
var matchQuarterPatterns$A = {
  narrow: /^[1234]/i,
  abbreviated: /^ತ್ರೈ[1234]|ತ್ರೈ [1234]| [1234]ತ್ರೈ/i,
  wide: /^[1234](ನೇ)? ತ್ರೈಮಾಸಿಕ/i
};
var parseQuarterPatterns$A = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$A = {
  narrow: /^(ಜೂ|ಜು|ಜ|ಫೆ|ಮಾ|ಏ|ಮೇ|ಆ|ಸೆ|ಅ|ನ|ಡಿ)/i,
  abbreviated: /^(ಜನ|ಫೆಬ್ರ|ಮಾರ್ಚ್|ಏಪ್ರಿ|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗ|ಸೆಪ್ಟೆಂ|ಅಕ್ಟೋ|ನವೆಂ|ಡಿಸೆಂ)/i,
  wide: /^(ಜನವರಿ|ಫೆಬ್ರವರಿ|ಮಾರ್ಚ್|ಏಪ್ರಿಲ್|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗಸ್ಟ್|ಸೆಪ್ಟೆಂಬರ್|ಅಕ್ಟೋಬರ್|ನವೆಂಬರ್|ಡಿಸೆಂಬರ್)/i
};
var parseMonthPatterns$A = {
  narrow: [/^ಜ$/i, /^ಫೆ/i, /^ಮಾ/i, /^ಏ/i, /^ಮೇ/i, /^ಜೂ/i, /^ಜು$/i, /^ಆ/i, /^ಸೆ/i, /^ಅ/i, /^ನ/i, /^ಡಿ/i],
  any: [/^ಜನ/i, /^ಫೆ/i, /^ಮಾ/i, /^ಏ/i, /^ಮೇ/i, /^ಜೂನ್/i, /^ಜುಲೈ/i, /^ಆ/i, /^ಸೆ/i, /^ಅ/i, /^ನ/i, /^ಡಿ/i]
};
var matchDayPatterns$A = {
  narrow: /^(ಭಾ|ಸೋ|ಮ|ಬು|ಗು|ಶು|ಶ)/i,
  short: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
  abbreviated: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
  wide: /^(ಭಾನುವಾರ|ಸೋಮವಾರ|ಮಂಗಳವಾರ|ಬುಧವಾರ|ಗುರುವಾರ|ಶುಕ್ರವಾರ|ಶನಿವಾರ)/i
};
var parseDayPatterns$A = {
  narrow: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i],
  any: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i]
};
var matchDayPeriodPatterns$A = {
  narrow: /^(ಪೂ|ಅ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i,
  any: /^(ಪೂರ್ವಾಹ್ನ|ಅಪರಾಹ್ನ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i
};
var parseDayPeriodPatterns$A = {
  any: {
    am: /^ಪೂ/i,
    pm: /^ಅ/i,
    midnight: /ಮಧ್ಯರಾತ್ರಿ/i,
    noon: /ಮಧ್ಯಾನ್ಹ/i,
    morning: /ಬೆಳಗ್ಗೆ/i,
    afternoon: /ಮಧ್ಯಾನ್ಹ/i,
    evening: /ಸಂಜೆ/i,
    night: /ರಾತ್ರಿ/i
  }
};
var match$18 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$A,
    parsePattern: parseOrdinalNumberPattern$A,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$A,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$A,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$A,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$A,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$A,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$A,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$A,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$A,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$A,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$A,
    defaultParseWidth: 'any'
  })
};
var match$19 = match$18;

/**
 * @type {Locale}
 * @category Locales
 * @summary Kannada locale (India).
 * @language Kannada
 * @iso-639-2 kan
 * @author Manjunatha Gouli [@developergouli]{@link https://github.com/developergouli}
 */
var locale$19 = {
  code: 'kn',
  formatDistance: formatDistance$19,
  formatLong: formatLong$19,
  formatRelative: formatRelative$19,
  localize: localize$19,
  match: match$19,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$1a = locale$19;

var formatDistanceLocale$z = {
  lessThanXSeconds: {
    one: '1초 미만',
    other: '{{count}}초 미만'
  },
  xSeconds: {
    one: '1초',
    other: '{{count}}초'
  },
  halfAMinute: '30초',
  lessThanXMinutes: {
    one: '1분 미만',
    other: '{{count}}분 미만'
  },
  xMinutes: {
    one: '1분',
    other: '{{count}}분'
  },
  aboutXHours: {
    one: '약 1시간',
    other: '약 {{count}}시간'
  },
  xHours: {
    one: '1시간',
    other: '{{count}}시간'
  },
  xDays: {
    one: '1일',
    other: '{{count}}일'
  },
  aboutXWeeks: {
    one: '약 1주',
    other: '약 {{count}}주'
  },
  xWeeks: {
    one: '1주',
    other: '{{count}}주'
  },
  aboutXMonths: {
    one: '약 1개월',
    other: '약 {{count}}개월'
  },
  xMonths: {
    one: '1개월',
    other: '{{count}}개월'
  },
  aboutXYears: {
    one: '약 1년',
    other: '약 {{count}}년'
  },
  xYears: {
    one: '1년',
    other: '{{count}}년'
  },
  overXYears: {
    one: '1년 이상',
    other: '{{count}}년 이상'
  },
  almostXYears: {
    one: '거의 1년',
    other: '거의 {{count}}년'
  }
};
var formatDistance$16 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$z[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' 후';
    } else {
      return result + ' 전';
    }
  }
  return result;
};
var formatDistance$17 = formatDistance$16;

var dateFormats$z = {
  full: 'y년 M월 d일 EEEE',
  long: 'y년 M월 d일',
  medium: 'y.MM.dd',
  short: 'y.MM.dd'
};
var timeFormats$z = {
  full: 'a H시 mm분 ss초 zzzz',
  long: 'a H:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$z = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$16 = {
  date: buildFormatLongFn({
    formats: dateFormats$z,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$z,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$z,
    defaultWidth: 'full'
  })
};
var formatLong$17 = formatLong$16;

var formatRelativeLocale$z = {
  lastWeek: "'지난' eeee p",
  yesterday: "'어제' p",
  today: "'오늘' p",
  tomorrow: "'내일' p",
  nextWeek: "'다음' eeee p",
  other: 'P'
};
var formatRelative$16 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$z[token];
};
var formatRelative$17 = formatRelative$16;

var eraValues$z = {
  narrow: ['BC', 'AD'],
  abbreviated: ['BC', 'AD'],
  wide: ['기원전', '서기']
};
var quarterValues$z = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1분기', '2분기', '3분기', '4분기']
};
var monthValues$z = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
  wide: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']
};
var dayValues$z = {
  narrow: ['일', '월', '화', '수', '목', '금', '토'],
  short: ['일', '월', '화', '수', '목', '금', '토'],
  abbreviated: ['일', '월', '화', '수', '목', '금', '토'],
  wide: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']
};
var dayPeriodValues$z = {
  narrow: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  abbreviated: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  wide: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  }
};
var formattingDayPeriodValues$s = {
  narrow: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  abbreviated: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  wide: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  }
};
var ordinalNumber$z = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case 'minute':
    case 'second':
      return String(number);
    case 'date':
      return number + '일';
    default:
      return number + '번째';
  }
};
var localize$16 = {
  ordinalNumber: ordinalNumber$z,
  era: buildLocalizeFn({
    values: eraValues$z,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$z,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$z,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$z,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$z,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$s,
    defaultFormattingWidth: 'wide'
  })
};
var localize$17 = localize$16;

var matchOrdinalNumberPattern$z = /^(\d+)(일|번째)?/i;
var parseOrdinalNumberPattern$z = /\d+/i;
var matchEraPatterns$z = {
  narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(기원전|서기)/i
};
var parseEraPatterns$z = {
  any: [/^(bc|기원전)/i, /^(ad|서기)/i]
};
var matchQuarterPatterns$z = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]사?분기/i
};
var parseQuarterPatterns$z = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$z = {
  narrow: /^(1[012]|[123456789])/,
  abbreviated: /^(1[012]|[123456789])월/i,
  wide: /^(1[012]|[123456789])월/i
};
var parseMonthPatterns$z = {
  any: [/^1월?$/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var matchDayPatterns$z = {
  narrow: /^[일월화수목금토]/,
  short: /^[일월화수목금토]/,
  abbreviated: /^[일월화수목금토]/,
  wide: /^[일월화수목금토]요일/
};
var parseDayPatterns$z = {
  any: [/^일/, /^월/, /^화/, /^수/, /^목/, /^금/, /^토/]
};
var matchDayPeriodPatterns$z = {
  any: /^(am|pm|오전|오후|자정|정오|아침|저녁|밤)/i
};
var parseDayPeriodPatterns$z = {
  any: {
    am: /^(am|오전)/i,
    pm: /^(pm|오후)/i,
    midnight: /^자정/i,
    noon: /^정오/i,
    morning: /^아침/i,
    afternoon: /^오후/i,
    evening: /^저녁/i,
    night: /^밤/i
  }
};
var match$16 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$z,
    parsePattern: parseOrdinalNumberPattern$z,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$z,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$z,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$z,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$z,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$z,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$z,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$z,
    defaultParseWidth: 'any'
  })
};
var match$17 = match$16;

/**
 * @type {Locale}
 * @category Locales
 * @summary Korean locale.
 * @language Korean
 * @iso-639-2 kor
 * @author Hong Chulju [@angdev]{@link https://github.com/angdev}
 * @author Lee Seoyoen [@iamssen]{@link https://github.com/iamssen}
 * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
 */
var locale$17 = {
  code: 'ko',
  formatDistance: formatDistance$17,
  formatLong: formatLong$17,
  formatRelative: formatRelative$17,
  localize: localize$17,
  match: match$17,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$18 = locale$17;

var formatDistanceLocale$y = {
  lessThanXSeconds: {
    standalone: {
      one: 'manner wéi eng Sekonn',
      other: 'manner wéi {{count}} Sekonnen'
    },
    withPreposition: {
      one: 'manner wéi enger Sekonn',
      other: 'manner wéi {{count}} Sekonnen'
    }
  },
  xSeconds: {
    standalone: {
      one: 'eng Sekonn',
      other: '{{count}} Sekonnen'
    },
    withPreposition: {
      one: 'enger Sekonn',
      other: '{{count}} Sekonnen'
    }
  },
  halfAMinute: {
    standalone: 'eng hallef Minutt',
    withPreposition: 'enger hallwer Minutt'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'manner wéi eng Minutt',
      other: 'manner wéi {{count}} Minutten'
    },
    withPreposition: {
      one: 'manner wéi enger Minutt',
      other: 'manner wéi {{count}} Minutten'
    }
  },
  xMinutes: {
    standalone: {
      one: 'eng Minutt',
      other: '{{count}} Minutten'
    },
    withPreposition: {
      one: 'enger Minutt',
      other: '{{count}} Minutten'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'ongeféier eng Stonn',
      other: 'ongeféier {{count}} Stonnen'
    },
    withPreposition: {
      one: 'ongeféier enger Stonn',
      other: 'ongeféier {{count}} Stonnen'
    }
  },
  xHours: {
    standalone: {
      one: 'eng Stonn',
      other: '{{count}} Stonnen'
    },
    withPreposition: {
      one: 'enger Stonn',
      other: '{{count}} Stonnen'
    }
  },
  xDays: {
    standalone: {
      one: 'een Dag',
      other: '{{count}} Deeg'
    },
    withPreposition: {
      one: 'engem Dag',
      other: '{{count}} Deeg'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'ongeféier eng Woch',
      other: 'ongeféier {{count}} Wochen'
    },
    withPreposition: {
      one: 'ongeféier enger Woche',
      other: 'ongeféier {{count}} Wochen'
    }
  },
  xWeeks: {
    standalone: {
      one: 'eng Woch',
      other: '{{count}} Wochen'
    },
    withPreposition: {
      one: 'enger Woch',
      other: '{{count}} Wochen'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'ongeféier ee Mount',
      other: 'ongeféier {{count}} Méint'
    },
    withPreposition: {
      one: 'ongeféier engem Mount',
      other: 'ongeféier {{count}} Méint'
    }
  },
  xMonths: {
    standalone: {
      one: 'ee Mount',
      other: '{{count}} Méint'
    },
    withPreposition: {
      one: 'engem Mount',
      other: '{{count}} Méint'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'ongeféier ee Joer',
      other: 'ongeféier {{count}} Joer'
    },
    withPreposition: {
      one: 'ongeféier engem Joer',
      other: 'ongeféier {{count}} Joer'
    }
  },
  xYears: {
    standalone: {
      one: 'ee Joer',
      other: '{{count}} Joer'
    },
    withPreposition: {
      one: 'engem Joer',
      other: '{{count}} Joer'
    }
  },
  overXYears: {
    standalone: {
      one: 'méi wéi ee Joer',
      other: 'méi wéi {{count}} Joer'
    },
    withPreposition: {
      one: 'méi wéi engem Joer',
      other: 'méi wéi {{count}} Joer'
    }
  },
  almostXYears: {
    standalone: {
      one: 'bal ee Joer',
      other: 'bal {{count}} Joer'
    },
    withPreposition: {
      one: 'bal engem Joer',
      other: 'bal {{count}} Joer'
    }
  }
};
var EXCEPTION_CONSONANTS = ['d', 'h', 'n', 't', 'z'];
var VOWELS = ['a,', 'e', 'i', 'o', 'u'];
var DIGITS_SPOKEN_N_NEEDED = [0, 1, 2, 3, 8, 9];
var FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED = [40, 50, 60, 70];

// Eifeler Regel
function isFinalNNeeded(nextWords) {
  var firstLetter = nextWords.charAt(0).toLowerCase();
  if (VOWELS.indexOf(firstLetter) != -1 || EXCEPTION_CONSONANTS.indexOf(firstLetter) != -1) {
    return true;
  }

  // Numbers would need to converted into words for checking.
  // Therefore, I have listed the digits that require a preceeding n with a few exceptions.
  var firstWord = nextWords.split(' ')[0];
  var number = parseInt(firstWord);
  if (!isNaN(number) && DIGITS_SPOKEN_N_NEEDED.indexOf(number % 10) != -1 && FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED.indexOf(parseInt(firstWord.substring(0, 2))) == -1) {
    return true;
  }

  // Omit other checks as they are not expected here.
  return false;
}
var formatDistance$14 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$y[token];
  var usageGroup = options !== null && options !== void 0 && options.addSuffix ? tokenValue.withPreposition : tokenValue.standalone;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'a' + (isFinalNNeeded(result) ? 'n' : '') + ' ' + result;
    } else {
      return 'viru' + (isFinalNNeeded(result) ? 'n' : '') + ' ' + result;
    }
  }
  return result;
};
var formatDistance$15 = formatDistance$14;

var dateFormats$y = {
  full: 'EEEE, do MMMM y',
  // Méindeg, 7. Januar 2018
  long: 'do MMMM y',
  // 7. Januar 2018
  medium: 'do MMM y',
  // 7. Jan 2018
  short: 'dd.MM.yy' // 07.01.18
};

var timeFormats$y = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$y = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$14 = {
  date: buildFormatLongFn({
    formats: dateFormats$y,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$y,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$y,
    defaultWidth: 'full'
  })
};
var formatLong$15 = formatLong$14;

var formatRelativeLocale$y = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    var result = "'läschte";
    if (day === 2 || day === 4) {
      // Eifeler Regel: Add an n before the consonant d; Here "Dënschdeg" "and Donneschde".
      result += 'n';
    }
    result += "' eeee 'um' p";
    return result;
  },
  yesterday: "'gëschter um' p",
  today: "'haut um' p",
  tomorrow: "'moien um' p",
  nextWeek: "eeee 'um' p",
  other: 'P'
};
var formatRelative$14 = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$y[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$15 = formatRelative$14;

var eraValues$y = {
  narrow: ['v.Chr.', 'n.Chr.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['viru Christus', 'no Christus']
};
var quarterValues$y = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
};
var monthValues$y = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mäe', 'Abr', 'Mee', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  wide: ['Januar', 'Februar', 'Mäerz', 'Abrëll', 'Mee', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};
var dayValues$y = {
  narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  short: ['So', 'Mé', 'Dë', 'Më', 'Do', 'Fr', 'Sa'],
  abbreviated: ['So.', 'Mé.', 'Dë.', 'Më.', 'Do.', 'Fr.', 'Sa.'],
  wide: ['Sonndeg', 'Méindeg', 'Dënschdeg', 'Mëttwoch', 'Donneschdeg', 'Freideg', 'Samschdeg']
};
var dayPeriodValues$y = {
  narrow: {
    am: 'mo.',
    pm: 'nomë.',
    midnight: 'Mëtternuecht',
    noon: 'Mëtteg',
    morning: 'Moien',
    afternoon: 'Nomëtteg',
    evening: 'Owend',
    night: 'Nuecht'
  },
  abbreviated: {
    am: 'moies',
    pm: 'nomëttes',
    midnight: 'Mëtternuecht',
    noon: 'Mëtteg',
    morning: 'Moien',
    afternoon: 'Nomëtteg',
    evening: 'Owend',
    night: 'Nuecht'
  },
  wide: {
    am: 'moies',
    pm: 'nomëttes',
    midnight: 'Mëtternuecht',
    noon: 'Mëtteg',
    morning: 'Moien',
    afternoon: 'Nomëtteg',
    evening: 'Owend',
    night: 'Nuecht'
  }
};
var formattingDayPeriodValues$r = {
  narrow: {
    am: 'mo.',
    pm: 'nom.',
    midnight: 'Mëtternuecht',
    noon: 'mëttes',
    morning: 'moies',
    afternoon: 'nomëttes',
    evening: 'owes',
    night: 'nuets'
  },
  abbreviated: {
    am: 'moies',
    pm: 'nomëttes',
    midnight: 'Mëtternuecht',
    noon: 'mëttes',
    morning: 'moies',
    afternoon: 'nomëttes',
    evening: 'owes',
    night: 'nuets'
  },
  wide: {
    am: 'moies',
    pm: 'nomëttes',
    midnight: 'Mëtternuecht',
    noon: 'mëttes',
    morning: 'moies',
    afternoon: 'nomëttes',
    evening: 'owes',
    night: 'nuets'
  }
};
var ordinalNumber$y = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$14 = {
  ordinalNumber: ordinalNumber$y,
  era: buildLocalizeFn({
    values: eraValues$y,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$y,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$y,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$y,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$y,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$r,
    defaultFormattingWidth: 'wide'
  })
};
var localize$15 = localize$14;

var matchOrdinalNumberPattern$y = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$y = /\d+/i;
var matchEraPatterns$y = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(viru Christus|virun eiser Zäitrechnung|no Christus|eiser Zäitrechnung)/i
};
var parseEraPatterns$y = {
  any: [/^v/i, /^n/i]
};
var matchQuarterPatterns$y = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i
};
var parseQuarterPatterns$y = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$y = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mäe|abr|mee|jun|jul|aug|sep|okt|nov|dez)/i,
  wide: /^(januar|februar|mäerz|abrëll|mee|juni|juli|august|september|oktober|november|dezember)/i
};
var parseMonthPatterns$y = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mä/i, /^ab/i, /^me/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$y = {
  narrow: /^[smdf]/i,
  short: /^(so|mé|dë|më|do|fr|sa)/i,
  abbreviated: /^(son?|méi?|dën?|mët?|don?|fre?|sam?)\.?/i,
  wide: /^(sonndeg|méindeg|dënschdeg|mëttwoch|donneschdeg|freideg|samschdeg)/i
};
var parseDayPatterns$y = {
  any: [/^so/i, /^mé/i, /^dë/i, /^më/i, /^do/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$y = {
  narrow: /^(mo\.?|nomë\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
  abbreviated: /^(moi\.?|nomët\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
  wide: /^(moies|nomëttes|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i
};
var parseDayPeriodPatterns$y = {
  any: {
    am: /^m/i,
    pm: /^n/i,
    midnight: /^Mëtter/i,
    noon: /^mëttes/i,
    morning: /moies/i,
    afternoon: /nomëttes/i,
    // will never be matched. Afternoon is matched by `pm`
    evening: /owes/i,
    night: /nuets/i // will never be matched. Night is matched by `pm`
  }
};

var match$14 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$y,
    parsePattern: parseOrdinalNumberPattern$y,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$y,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$y,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$y,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$y,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$y,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$y,
    defaultParseWidth: 'any'
  })
};
var match$15 = match$14;

/**
 * @type {Locale}
 * @category Locales
 * @summary Luxembourgish locale.
 * @language Luxembourgish
 * @iso-639-2 ltz
 * @author Daniel Waxweiler [@dwaxweiler]{@link https://github.com/dwaxweiler}
 */
var locale$15 = {
  code: 'lb',
  formatDistance: formatDistance$15,
  formatLong: formatLong$15,
  formatRelative: formatRelative$15,
  localize: localize$15,
  match: match$15,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$16 = locale$15;

var translations = {
  xseconds_other: 'sekundė_sekundžių_sekundes',
  xminutes_one: 'minutė_minutės_minutę',
  xminutes_other: 'minutės_minučių_minutes',
  xhours_one: 'valanda_valandos_valandą',
  xhours_other: 'valandos_valandų_valandas',
  xdays_one: 'diena_dienos_dieną',
  xdays_other: 'dienos_dienų_dienas',
  xweeks_one: 'savaitė_savaitės_savaitę',
  xweeks_other: 'savaitės_savaičių_savaites',
  xmonths_one: 'mėnuo_mėnesio_mėnesį',
  xmonths_other: 'mėnesiai_mėnesių_mėnesius',
  xyears_one: 'metai_metų_metus',
  xyears_other: 'metai_metų_metus',
  about: 'apie',
  over: 'daugiau nei',
  almost: 'beveik',
  lessthan: 'mažiau nei'
};
var translateSeconds = function translateSeconds(_number, addSuffix, _key, isFuture) {
  if (!addSuffix) {
    return 'kelios sekundės';
  } else {
    return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
  }
};
var translateSingular = function translateSingular(_number, addSuffix, key, isFuture) {
  return !addSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
};
var translate = function translate(number, addSuffix, key, isFuture) {
  var result = number + ' ';
  if (number === 1) {
    return result + translateSingular(number, addSuffix, key, isFuture);
  } else if (!addSuffix) {
    return result + (special(number) ? forms(key)[1] : forms(key)[0]);
  } else {
    if (isFuture) {
      return result + forms(key)[1];
    } else {
      return result + (special(number) ? forms(key)[1] : forms(key)[2]);
    }
  }
};
function special(number) {
  return number % 10 === 0 || number > 10 && number < 20;
}
function forms(key) {
  return translations[key].split('_');
}
var formatDistanceLocale$x = {
  lessThanXSeconds: {
    one: translateSeconds,
    other: translate
  },
  xSeconds: {
    one: translateSeconds,
    other: translate
  },
  halfAMinute: 'pusė minutės',
  lessThanXMinutes: {
    one: translateSingular,
    other: translate
  },
  xMinutes: {
    one: translateSingular,
    other: translate
  },
  aboutXHours: {
    one: translateSingular,
    other: translate
  },
  xHours: {
    one: translateSingular,
    other: translate
  },
  xDays: {
    one: translateSingular,
    other: translate
  },
  aboutXWeeks: {
    one: translateSingular,
    other: translate
  },
  xWeeks: {
    one: translateSingular,
    other: translate
  },
  aboutXMonths: {
    one: translateSingular,
    other: translate
  },
  xMonths: {
    one: translateSingular,
    other: translate
  },
  aboutXYears: {
    one: translateSingular,
    other: translate
  },
  xYears: {
    one: translateSingular,
    other: translate
  },
  overXYears: {
    one: translateSingular,
    other: translate
  },
  almostXYears: {
    one: translateSingular,
    other: translate
  }
};
var formatDistance$12 = function formatDistance(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], '') : token;
  var isFuture = (options === null || options === void 0 ? void 0 : options.comparison) !== undefined && options.comparison > 0;
  var result;
  var tokenValue = formatDistanceLocale$x[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + '_one', isFuture);
  } else {
    result = tokenValue.other(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + '_other', isFuture);
  }
  if (adverb) {
    var _key2 = adverb[0].toLowerCase();
    result = translations[_key2] + ' ' + result;
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'po ' + result;
    } else {
      return 'prieš ' + result;
    }
  }
  return result;
};
var formatDistance$13 = formatDistance$12;

var dateFormats$x = {
  full: "y 'm'. MMMM d 'd'., EEEE",
  long: "y 'm'. MMMM d 'd'.",
  medium: 'y-MM-dd',
  short: 'y-MM-dd'
};
var timeFormats$x = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$x = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$12 = {
  date: buildFormatLongFn({
    formats: dateFormats$x,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$x,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$x,
    defaultWidth: 'full'
  })
};
var formatLong$13 = formatLong$12;

var formatRelativeLocale$x = {
  lastWeek: "'Praėjusį' eeee p",
  yesterday: "'Vakar' p",
  today: "'Šiandien' p",
  tomorrow: "'Rytoj' p",
  nextWeek: 'eeee p',
  other: 'P'
};
var formatRelative$12 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$x[token];
};
var formatRelative$13 = formatRelative$12;

var eraValues$x = {
  narrow: ['pr. Kr.', 'po Kr.'],
  abbreviated: ['pr. Kr.', 'po Kr.'],
  wide: ['prieš Kristų', 'po Kristaus']
};
var quarterValues$x = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I ketv.', 'II ketv.', 'III ketv.', 'IV ketv.'],
  wide: ['I ketvirtis', 'II ketvirtis', 'III ketvirtis', 'IV ketvirtis']
};
var formattingQuarterValues$2 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I k.', 'II k.', 'III k.', 'IV k.'],
  wide: ['I ketvirtis', 'II ketvirtis', 'III ketvirtis', 'IV ketvirtis']
};
var monthValues$x = {
  narrow: ['S', 'V', 'K', 'B', 'G', 'B', 'L', 'R', 'R', 'S', 'L', 'G'],
  abbreviated: ['saus.', 'vas.', 'kov.', 'bal.', 'geg.', 'birž.', 'liep.', 'rugp.', 'rugs.', 'spal.', 'lapkr.', 'gruod.'],
  wide: ['sausis', 'vasaris', 'kovas', 'balandis', 'gegužė', 'birželis', 'liepa', 'rugpjūtis', 'rugsėjis', 'spalis', 'lapkritis', 'gruodis']
};
var formattingMonthValues$8 = {
  narrow: ['S', 'V', 'K', 'B', 'G', 'B', 'L', 'R', 'R', 'S', 'L', 'G'],
  abbreviated: ['saus.', 'vas.', 'kov.', 'bal.', 'geg.', 'birž.', 'liep.', 'rugp.', 'rugs.', 'spal.', 'lapkr.', 'gruod.'],
  wide: ['sausio', 'vasario', 'kovo', 'balandžio', 'gegužės', 'birželio', 'liepos', 'rugpjūčio', 'rugsėjo', 'spalio', 'lapkričio', 'gruodžio']
};
var dayValues$x = {
  narrow: ['S', 'P', 'A', 'T', 'K', 'P', 'Š'],
  short: ['Sk', 'Pr', 'An', 'Tr', 'Kt', 'Pn', 'Št'],
  abbreviated: ['sk', 'pr', 'an', 'tr', 'kt', 'pn', 'št'],
  wide: ['sekmadienis', 'pirmadienis', 'antradienis', 'trečiadienis', 'ketvirtadienis', 'penktadienis', 'šeštadienis']
};
var formattingDayValues$2 = {
  narrow: ['S', 'P', 'A', 'T', 'K', 'P', 'Š'],
  short: ['Sk', 'Pr', 'An', 'Tr', 'Kt', 'Pn', 'Št'],
  abbreviated: ['sk', 'pr', 'an', 'tr', 'kt', 'pn', 'št'],
  wide: ['sekmadienį', 'pirmadienį', 'antradienį', 'trečiadienį', 'ketvirtadienį', 'penktadienį', 'šeštadienį']
};
var dayPeriodValues$x = {
  narrow: {
    am: 'pr. p.',
    pm: 'pop.',
    midnight: 'vidurnaktis',
    noon: 'vidurdienis',
    morning: 'rytas',
    afternoon: 'diena',
    evening: 'vakaras',
    night: 'naktis'
  },
  abbreviated: {
    am: 'priešpiet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'vidurdienis',
    morning: 'rytas',
    afternoon: 'diena',
    evening: 'vakaras',
    night: 'naktis'
  },
  wide: {
    am: 'priešpiet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'vidurdienis',
    morning: 'rytas',
    afternoon: 'diena',
    evening: 'vakaras',
    night: 'naktis'
  }
};
var formattingDayPeriodValues$q = {
  narrow: {
    am: 'pr. p.',
    pm: 'pop.',
    midnight: 'vidurnaktis',
    noon: 'perpiet',
    morning: 'rytas',
    afternoon: 'popietė',
    evening: 'vakaras',
    night: 'naktis'
  },
  abbreviated: {
    am: 'priešpiet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'perpiet',
    morning: 'rytas',
    afternoon: 'popietė',
    evening: 'vakaras',
    night: 'naktis'
  },
  wide: {
    am: 'priešpiet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'perpiet',
    morning: 'rytas',
    afternoon: 'popietė',
    evening: 'vakaras',
    night: 'naktis'
  }
};
var ordinalNumber$x = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '-oji';
};
var localize$12 = {
  ordinalNumber: ordinalNumber$x,
  era: buildLocalizeFn({
    values: eraValues$x,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$x,
    defaultWidth: 'wide',
    formattingValues: formattingQuarterValues$2,
    defaultFormattingWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$x,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$8,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$x,
    defaultWidth: 'wide',
    formattingValues: formattingDayValues$2,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$x,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$q,
    defaultFormattingWidth: 'wide'
  })
};
var localize$13 = localize$12;

var matchOrdinalNumberPattern$x = /^(\d+)(-oji)?/i;
var parseOrdinalNumberPattern$x = /\d+/i;
var matchEraPatterns$x = {
  narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
  abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|mūsų eroje)/i,
  wide: /^(prieš Kristų|prieš mūsų erą|po Kristaus|mūsų eroje)/i
};
var parseEraPatterns$x = {
  wide: [/prieš/i, /(po|mūsų)/i],
  any: [/^pr/i, /^(po|m)/i]
};
var matchQuarterPatterns$x = {
  narrow: /^([1234])/i,
  abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
  wide: /^(I|II|III|IV)\s?ketvirtis/i
};
var parseQuarterPatterns$x = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/I$/i, /II$/i, /III/i, /IV/i]
};
var matchMonthPatterns$x = {
  narrow: /^[svkbglr]/i,
  abbreviated: /^(saus\.|vas\.|kov\.|bal\.|geg\.|birž\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
  wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|balandž?i(s|o)|gegužės?|birželi(s|o)|liep(a|os)|rugpjū(t|č)i(s|o)|rugsėj(is|o)|spali(s|o)|lapkri(t|č)i(s|o)|gruodž?i(s|o))/i
};
var parseMonthPatterns$x = {
  narrow: [/^s/i, /^v/i, /^k/i, /^b/i, /^g/i, /^b/i, /^l/i, /^r/i, /^r/i, /^s/i, /^l/i, /^g/i],
  any: [/^saus/i, /^vas/i, /^kov/i, /^bal/i, /^geg/i, /^birž/i, /^liep/i, /^rugp/i, /^rugs/i, /^spal/i, /^lapkr/i, /^gruod/i]
};
var matchDayPatterns$x = {
  narrow: /^[spatkš]/i,
  short: /^(sk|pr|an|tr|kt|pn|št)/i,
  abbreviated: /^(sk|pr|an|tr|kt|pn|št)/i,
  wide: /^(sekmadien(is|į)|pirmadien(is|į)|antradien(is|į)|trečiadien(is|į)|ketvirtadien(is|į)|penktadien(is|į)|šeštadien(is|į))/i
};
var parseDayPatterns$x = {
  narrow: [/^s/i, /^p/i, /^a/i, /^t/i, /^k/i, /^p/i, /^š/i],
  wide: [/^se/i, /^pi/i, /^an/i, /^tr/i, /^ke/i, /^pe/i, /^še/i],
  any: [/^sk/i, /^pr/i, /^an/i, /^tr/i, /^kt/i, /^pn/i, /^št/i]
};
var matchDayPeriodPatterns$x = {
  narrow: /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i,
  any: /^(priešpiet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i
};
var parseDayPeriodPatterns$x = {
  narrow: {
    am: /^pr/i,
    pm: /^pop./i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietė)/i,
    evening: /vakaras/i,
    night: /naktis/i
  },
  any: {
    am: /^pr/i,
    pm: /^popiet$/i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietė)/i,
    evening: /vakaras/i,
    night: /naktis/i
  }
};
var match$12 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$x,
    parsePattern: parseOrdinalNumberPattern$x,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$x,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$x,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$x,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$x,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$x,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$x,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$x,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$x,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$x,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$x,
    defaultParseWidth: 'any'
  })
};
var match$13 = match$12;

/**
 * @type {Locale}
 * @category Locales
 * @summary Lithuanian locale.
 * @language Lithuanian
 * @iso-639-2 lit
 * @author Pavlo Shpak [@pshpak]{@link https://github.com/pshpak}
 * @author Eduardo Pardo [@eduardopsll]{@link https://github.com/eduardopsll}
 */
var locale$13 = {
  code: 'lt',
  formatDistance: formatDistance$13,
  formatLong: formatLong$13,
  formatRelative: formatRelative$13,
  localize: localize$13,
  match: match$13,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$14 = locale$13;

function buildLocalizeTokenFn$2(schema) {
  return function (count, options) {
    if (count === 1) {
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.one[0].replace('{{time}}', schema.one[2]);
      } else {
        return schema.one[0].replace('{{time}}', schema.one[1]);
      }
    } else {
      var rem = count % 10 === 1 && count % 100 !== 11;
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.other[0].replace('{{time}}', rem ? schema.other[3] : schema.other[4]).replace('{{count}}', String(count));
      } else {
        return schema.other[0].replace('{{time}}', rem ? schema.other[1] : schema.other[2]).replace('{{count}}', String(count));
      }
    }
  };
}
var formatDistanceLocale$w = {
  lessThanXSeconds: buildLocalizeTokenFn$2({
    one: ['mazāk par {{time}}', 'sekundi', 'sekundi'],
    other: ['mazāk nekā {{count}} {{time}}', 'sekunde', 'sekundes', 'sekundes', 'sekundēm']
  }),
  xSeconds: buildLocalizeTokenFn$2({
    one: ['1 {{time}}', 'sekunde', 'sekundes'],
    other: ['{{count}} {{time}}', 'sekunde', 'sekundes', 'sekundes', 'sekundēm']
  }),
  halfAMinute: function halfAMinute(_count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      return 'pusminūtes';
    } else {
      return 'pusminūte';
    }
  },
  lessThanXMinutes: buildLocalizeTokenFn$2({
    one: ['mazāk par {{time}}', 'minūti', 'minūti'],
    other: ['mazāk nekā {{count}} {{time}}', 'minūte', 'minūtes', 'minūtes', 'minūtēm']
  }),
  xMinutes: buildLocalizeTokenFn$2({
    one: ['1 {{time}}', 'minūte', 'minūtes'],
    other: ['{{count}} {{time}}', 'minūte', 'minūtes', 'minūtes', 'minūtēm']
  }),
  aboutXHours: buildLocalizeTokenFn$2({
    one: ['apmēram 1 {{time}}', 'stunda', 'stundas'],
    other: ['apmēram {{count}} {{time}}', 'stunda', 'stundas', 'stundas', 'stundām']
  }),
  xHours: buildLocalizeTokenFn$2({
    one: ['1 {{time}}', 'stunda', 'stundas'],
    other: ['{{count}} {{time}}', 'stunda', 'stundas', 'stundas', 'stundām']
  }),
  xDays: buildLocalizeTokenFn$2({
    one: ['1 {{time}}', 'diena', 'dienas'],
    other: ['{{count}} {{time}}', 'diena', 'dienas', 'dienas', 'dienām']
  }),
  aboutXWeeks: buildLocalizeTokenFn$2({
    one: ['apmēram 1 {{time}}', 'nedēļa', 'nedēļas'],
    other: ['apmēram {{count}} {{time}}', 'nedēļa', 'nedēļu', 'nedēļas', 'nedēļām']
  }),
  xWeeks: buildLocalizeTokenFn$2({
    one: ['1 {{time}}', 'nedēļa', 'nedēļas'],
    other: ['{{count}} {{time}}',
    // TODO
    'nedēļa', 'nedēļu', 'nedēļas', 'nedēļām']
  }),
  aboutXMonths: buildLocalizeTokenFn$2({
    one: ['apmēram 1 {{time}}', 'mēnesis', 'mēneša'],
    other: ['apmēram {{count}} {{time}}', 'mēnesis', 'mēneši', 'mēneša', 'mēnešiem']
  }),
  xMonths: buildLocalizeTokenFn$2({
    one: ['1 {{time}}', 'mēnesis', 'mēneša'],
    other: ['{{count}} {{time}}', 'mēnesis', 'mēneši', 'mēneša', 'mēnešiem']
  }),
  aboutXYears: buildLocalizeTokenFn$2({
    one: ['apmēram 1 {{time}}', 'gads', 'gada'],
    other: ['apmēram {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  }),
  xYears: buildLocalizeTokenFn$2({
    one: ['1 {{time}}', 'gads', 'gada'],
    other: ['{{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  }),
  overXYears: buildLocalizeTokenFn$2({
    one: ['ilgāk par 1 {{time}}', 'gadu', 'gadu'],
    other: ['vairāk nekā {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  }),
  almostXYears: buildLocalizeTokenFn$2({
    one: ['gandrīz 1 {{time}}', 'gads', 'gada'],
    other: ['vairāk nekā {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  })
};
var formatDistance$10 = function formatDistance(token, count, options) {
  var result = formatDistanceLocale$w[token](count, options);
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'pēc ' + result;
    } else {
      return 'pirms ' + result;
    }
  }
  return result;
};
var formatDistance$11 = formatDistance$10;

var dateFormats$w = {
  full: "EEEE, y. 'gada' d. MMMM",
  long: "y. 'gada' d. MMMM",
  medium: 'dd.MM.y.',
  short: 'dd.MM.y.'
};
var timeFormats$w = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$w = {
  full: "{{date}} 'plkst.' {{time}}",
  long: "{{date}} 'plkst.' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$10 = {
  date: buildFormatLongFn({
    formats: dateFormats$w,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$w,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$w,
    defaultWidth: 'full'
  })
};
var formatLong$11 = formatLong$10;

var weekdays$1 = ['svētdienā', 'pirmdienā', 'otrdienā', 'trešdienā', 'ceturtdienā', 'piektdienā', 'sestdienā'];
var formatRelativeLocale$w = {
  lastWeek: function lastWeek(date, baseDate, options) {
    if (isSameUTCWeek(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }
    var weekday = weekdays$1[date.getUTCDay()];
    return "'Pagājušā " + weekday + " plkst.' p";
  },
  yesterday: "'Vakar plkst.' p",
  today: "'Šodien plkst.' p",
  tomorrow: "'Rīt plkst.' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    if (isSameUTCWeek(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }
    var weekday = weekdays$1[date.getUTCDay()];
    return "'Nākamajā " + weekday + " plkst.' p";
  },
  other: 'P'
};
var formatRelative$10 = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$w[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$11 = formatRelative$10;

var eraValues$w = {
  narrow: ['p.m.ē', 'm.ē'],
  abbreviated: ['p. m. ē.', 'm. ē.'],
  wide: ['pirms mūsu ēras', 'mūsu ērā']
};
var quarterValues$w = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. cet.', '2. cet.', '3. cet.', '4. cet.'],
  wide: ['pirmais ceturksnis', 'otrais ceturksnis', 'trešais ceturksnis', 'ceturtais ceturksnis']
};
var formattingQuarterValues$1 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. cet.', '2. cet.', '3. cet.', '4. cet.'],
  wide: ['pirmajā ceturksnī', 'otrajā ceturksnī', 'trešajā ceturksnī', 'ceturtajā ceturksnī']
};
var monthValues$w = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'febr.', 'marts', 'apr.', 'maijs', 'jūn.', 'jūl.', 'aug.', 'sept.', 'okt.', 'nov.', 'dec.'],
  wide: ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris']
};
var formattingMonthValues$7 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'febr.', 'martā', 'apr.', 'maijs', 'jūn.', 'jūl.', 'aug.', 'sept.', 'okt.', 'nov.', 'dec.'],
  wide: ['janvārī', 'februārī', 'martā', 'aprīlī', 'maijā', 'jūnijā', 'jūlijā', 'augustā', 'septembrī', 'oktobrī', 'novembrī', 'decembrī']
};
var dayValues$w = {
  narrow: ['S', 'P', 'O', 'T', 'C', 'P', 'S'],
  short: ['Sv', 'P', 'O', 'T', 'C', 'Pk', 'S'],
  abbreviated: ['svētd.', 'pirmd.', 'otrd.', 'trešd.', 'ceturtd.', 'piektd.', 'sestd.'],
  wide: ['svētdiena', 'pirmdiena', 'otrdiena', 'trešdiena', 'ceturtdiena', 'piektdiena', 'sestdiena']
};
var formattingDayValues$1 = {
  narrow: ['S', 'P', 'O', 'T', 'C', 'P', 'S'],
  short: ['Sv', 'P', 'O', 'T', 'C', 'Pk', 'S'],
  abbreviated: ['svētd.', 'pirmd.', 'otrd.', 'trešd.', 'ceturtd.', 'piektd.', 'sestd.'],
  wide: ['svētdienā', 'pirmdienā', 'otrdienā', 'trešdienā', 'ceturtdienā', 'piektdienā', 'sestdienā']
};
var dayPeriodValues$w = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rīts',
    afternoon: 'diena',
    evening: 'vakars',
    night: 'nakts'
  },
  abbreviated: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rīts',
    afternoon: 'pēcpusd.',
    evening: 'vakars',
    night: 'nakts'
  },
  wide: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusnakts',
    noon: 'pusdienlaiks',
    morning: 'rīts',
    afternoon: 'pēcpusdiena',
    evening: 'vakars',
    night: 'nakts'
  }
};
var formattingDayPeriodValues$p = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rītā',
    afternoon: 'dienā',
    evening: 'vakarā',
    night: 'naktī'
  },
  abbreviated: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rītā',
    afternoon: 'pēcpusd.',
    evening: 'vakarā',
    night: 'naktī'
  },
  wide: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusnaktī',
    noon: 'pusdienlaikā',
    morning: 'rītā',
    afternoon: 'pēcpusdienā',
    evening: 'vakarā',
    night: 'naktī'
  }
};
var ordinalNumber$w = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$10 = {
  ordinalNumber: ordinalNumber$w,
  era: buildLocalizeFn({
    values: eraValues$w,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$w,
    defaultWidth: 'wide',
    formattingValues: formattingQuarterValues$1,
    defaultFormattingWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$w,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$7,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$w,
    defaultWidth: 'wide',
    formattingValues: formattingDayValues$1,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$w,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$p,
    defaultFormattingWidth: 'wide'
  })
};
var localize$11 = localize$10;

var matchOrdinalNumberPattern$w = /^(\d+)\./i;
var parseOrdinalNumberPattern$w = /\d+/i;
var matchEraPatterns$w = {
  narrow: /^(p\.m\.ē|m\.ē)/i,
  abbreviated: /^(p\. m\. ē\.|m\. ē\.)/i,
  wide: /^(pirms mūsu ēras|mūsu ērā)/i
};
var parseEraPatterns$w = {
  any: [/^p/i, /^m/i]
};
var matchQuarterPatterns$w = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](\. cet\.)/i,
  wide: /^(pirma(is|jā)|otra(is|jā)|treša(is|jā)|ceturta(is|jā)) ceturksn(is|ī)/i
};
var parseQuarterPatterns$w = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i],
  abbreviated: [/^1/i, /^2/i, /^3/i, /^4/i],
  wide: [/^p/i, /^o/i, /^t/i, /^c/i]
};
var matchMonthPatterns$w = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv\.|febr\.|marts|apr\.|maijs|jūn\.|jūl\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
  wide: /^(janvār(is|ī)|februār(is|ī)|mart[sā]|aprīl(is|ī)|maij[sā]|jūnij[sā]|jūlij[sā]|august[sā]|septembr(is|ī)|oktobr(is|ī)|novembr(is|ī)|decembr(is|ī))/i
};
var parseMonthPatterns$w = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jūn/i, /^jūl/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$w = {
  narrow: /^[spotc]/i,
  short: /^(sv|pi|o|t|c|pk|s)/i,
  abbreviated: /^(svētd\.|pirmd\.|otrd.\|trešd\.|ceturtd\.|piektd\.|sestd\.)/i,
  wide: /^(svētdien(a|ā)|pirmdien(a|ā)|otrdien(a|ā)|trešdien(a|ā)|ceturtdien(a|ā)|piektdien(a|ā)|sestdien(a|ā))/i
};
var parseDayPatterns$w = {
  narrow: [/^s/i, /^p/i, /^o/i, /^t/i, /^c/i, /^p/i, /^s/i],
  any: [/^sv/i, /^pi/i, /^o/i, /^t/i, /^c/i, /^p/i, /^se/i]
};
var matchDayPeriodPatterns$w = {
  narrow: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|dien(a|ā)|vakar(s|ā)|nakt(s|ī))/,
  abbreviated: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|pēcpusd\.|vakar(s|ā)|nakt(s|ī))/,
  wide: /^(am|pm|pusnakt(s|ī)|pusdienlaik(s|ā)|rīt(s|ā)|pēcpusdien(a|ā)|vakar(s|ā)|nakt(s|ī))/i
};
var parseDayPeriodPatterns$w = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^pusn/i,
    noon: /^pusd/i,
    morning: /^r/i,
    afternoon: /^(d|pēc)/i,
    evening: /^v/i,
    night: /^n/i
  }
};
var match$10 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$w,
    parsePattern: parseOrdinalNumberPattern$w,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$w,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$w,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$w,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$w,
    defaultParseWidth: 'wide',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$w,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$w,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$w,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$w,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$w,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$w,
    defaultParseWidth: 'any'
  })
};
var match$11 = match$10;

/**
 * @type {Locale}
 * @category Locales
 * @summary Latvian locale (Latvia).
 * @language Latvian
 * @iso-639-2 lav
 * @author Rūdolfs Puķītis [@prudolfs]{@link https://github.com/prudolfs}
 */
var locale$11 = {
  code: 'lv',
  formatDistance: formatDistance$11,
  formatLong: formatLong$11,
  formatRelative: formatRelative$11,
  localize: localize$11,
  match: match$11,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$12 = locale$11;

var formatDistanceLocale$v = {
  lessThanXSeconds: {
    one: 'помалку од секунда',
    other: 'помалку од {{count}} секунди'
  },
  xSeconds: {
    one: '1 секунда',
    other: '{{count}} секунди'
  },
  halfAMinute: 'половина минута',
  lessThanXMinutes: {
    one: 'помалку од минута',
    other: 'помалку од {{count}} минути'
  },
  xMinutes: {
    one: '1 минута',
    other: '{{count}} минути'
  },
  aboutXHours: {
    one: 'околу 1 час',
    other: 'околу {{count}} часа'
  },
  xHours: {
    one: '1 час',
    other: '{{count}} часа'
  },
  xDays: {
    one: '1 ден',
    other: '{{count}} дена'
  },
  aboutXWeeks: {
    one: 'околу 1 недела',
    other: 'околу {{count}} месеци'
  },
  xWeeks: {
    one: '1 недела',
    other: '{{count}} недели'
  },
  aboutXMonths: {
    one: 'околу 1 месец',
    other: 'околу {{count}} недели'
  },
  xMonths: {
    one: '1 месец',
    other: '{{count}} месеци'
  },
  aboutXYears: {
    one: 'околу 1 година',
    other: 'околу {{count}} години'
  },
  xYears: {
    one: '1 година',
    other: '{{count}} години'
  },
  overXYears: {
    one: 'повеќе од 1 година',
    other: 'повеќе од {{count}} години'
  },
  almostXYears: {
    one: 'безмалку 1 година',
    other: 'безмалку {{count}} години'
  }
};
var formatDistance$_ = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$v[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'за ' + result;
    } else {
      return 'пред ' + result;
    }
  }
  return result;
};
var formatDistance$$ = formatDistance$_;

var dateFormats$v = {
  full: 'EEEE, dd MMMM yyyy',
  long: 'dd MMMM yyyy',
  medium: 'dd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$v = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$v = {
  any: '{{date}} {{time}}'
};
var formatLong$_ = {
  date: buildFormatLongFn({
    formats: dateFormats$v,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$v,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$v,
    defaultWidth: 'any'
  })
};
var formatLong$$ = formatLong$_;

var weekdays = ['недела', 'понеделник', 'вторник', 'среда', 'четврток', 'петок', 'сабота'];
function _lastWeek$2(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'минатата " + weekday + " во' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'минатиот " + weekday + " во' p";
  }
}
function thisWeek$3(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'ова " + weekday + " вo' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'овој " + weekday + " вo' p";
  }
}
function _nextWeek$2(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'следната " + weekday + " вo' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'следниот " + weekday + " вo' p";
  }
}
var formatRelativeLocale$v = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$3(day);
    } else {
      return _lastWeek$2(day);
    }
  },
  yesterday: "'вчера во' p",
  today: "'денес во' p",
  tomorrow: "'утре во' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$3(day);
    } else {
      return _nextWeek$2(day);
    }
  },
  other: 'P'
};
var formatRelative$_ = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$v[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$$ = formatRelative$_;

var eraValues$v = {
  narrow: ['пр.н.е.', 'н.е.'],
  abbreviated: ['пред н. е.', 'н. е.'],
  wide: ['пред нашата ера', 'нашата ера']
};
var quarterValues$v = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-ви кв.', '2-ри кв.', '3-ти кв.', '4-ти кв.'],
  wide: ['1-ви квартал', '2-ри квартал', '3-ти квартал', '4-ти квартал']
};
var monthValues$v = {
  abbreviated: ['јан', 'фев', 'мар', 'апр', 'мај', 'јун', 'јул', 'авг', 'септ', 'окт', 'ноем', 'дек'],
  wide: ['јануари', 'февруари', 'март', 'април', 'мај', 'јуни', 'јули', 'август', 'септември', 'октомври', 'ноември', 'декември']
};
var dayValues$v = {
  narrow: ['Н', 'П', 'В', 'С', 'Ч', 'П', 'С'],
  short: ['не', 'по', 'вт', 'ср', 'че', 'пе', 'са'],
  abbreviated: ['нед', 'пон', 'вто', 'сре', 'чет', 'пет', 'саб'],
  wide: ['недела', 'понеделник', 'вторник', 'среда', 'четврток', 'петок', 'сабота']
};
var dayPeriodValues$v = {
  wide: {
    am: 'претпладне',
    pm: 'попладне',
    midnight: 'полноќ',
    noon: 'напладне',
    morning: 'наутро',
    afternoon: 'попладне',
    evening: 'навечер',
    night: 'ноќе'
  }
};
var ordinalNumber$v = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + '-ви';
      case 2:
        return number + '-ри';
      case 7:
      case 8:
        return number + '-ми';
    }
  }
  return number + '-ти';
};
var localize$_ = {
  ordinalNumber: ordinalNumber$v,
  era: buildLocalizeFn({
    values: eraValues$v,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$v,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$v,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$v,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$v,
    defaultWidth: 'wide'
  })
};
var localize$$ = localize$_;

var matchOrdinalNumberPattern$v = /^(\d+)(-?[врмт][и])?/i;
var parseOrdinalNumberPattern$v = /\d+/i;
var matchEraPatterns$v = {
  narrow: /^((пр)?н\.?\s?е\.?)/i,
  abbreviated: /^((пр)?н\.?\s?е\.?)/i,
  wide: /^(пред нашата ера|нашата ера)/i
};
var parseEraPatterns$v = {
  any: [/^п/i, /^н/i]
};
var matchQuarterPatterns$v = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[врт]?и?)? кв.?/i,
  wide: /^[1234](-?[врт]?и?)? квартал/i
};
var parseQuarterPatterns$v = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchDayPatterns$v = {
  narrow: /^[нпвсч]/i,
  short: /^(не|по|вт|ср|че|пе|са)/i,
  abbreviated: /^(нед|пон|вто|сре|чет|пет|саб)/i,
  wide: /^(недела|понеделник|вторник|среда|четврток|петок|сабота)/i
};
var parseDayPatterns$v = {
  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[аб]/i]
};
var matchMonthPatterns$v = {
  abbreviated: /^(јан|фев|мар|апр|мај|јун|јул|авг|сеп|окт|ноем|дек)/i,
  wide: /^(јануари|февруари|март|април|мај|јуни|јули|август|септември|октомври|ноември|декември)/i
};
var parseMonthPatterns$v = {
  any: [/^ја/i, /^Ф/i, /^мар/i, /^ап/i, /^мај/i, /^јун/i, /^јул/i, /^ав/i, /^се/i, /^окт/i, /^но/i, /^де/i]
};
var matchDayPeriodPatterns$v = {
  any: /^(претп|попл|полноќ|утро|пладне|вечер|ноќ)/i
};
var parseDayPeriodPatterns$v = {
  any: {
    am: /претпладне/i,
    pm: /попладне/i,
    midnight: /полноќ/i,
    noon: /напладне/i,
    morning: /наутро/i,
    afternoon: /попладне/i,
    evening: /навечер/i,
    night: /ноќе/i
  }
};
var match$_ = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$v,
    parsePattern: parseOrdinalNumberPattern$v,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$v,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$v,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$v,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$v,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$v,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$v,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$v,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$v,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$v,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$v,
    defaultParseWidth: 'any'
  })
};
var match$$ = match$_;

/**
 * @type {Locale}
 * @category Locales
 * @summary Macedonian locale.
 * @language Macedonian
 * @iso-639-2 mkd
 * @author Petar Vlahu [@vlahupetar]{@link https://github.com/vlahupetar}
 * @author Altrim Beqiri [@altrim]{@link https://github.com/altrim}
 */
var locale$$ = {
  code: 'mk',
  formatDistance: formatDistance$$,
  formatLong: formatLong$$,
  formatRelative: formatRelative$$,
  localize: localize$$,
  match: match$$,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$10 = locale$$;

var formatDistanceLocale$u = {
  lessThanXSeconds: {
    one: 'секунд хүрэхгүй',
    other: '{{count}} секунд хүрэхгүй'
  },
  xSeconds: {
    one: '1 секунд',
    other: '{{count}} секунд'
  },
  halfAMinute: 'хагас минут',
  lessThanXMinutes: {
    one: 'минут хүрэхгүй',
    other: '{{count}} минут хүрэхгүй'
  },
  xMinutes: {
    one: '1 минут',
    other: '{{count}} минут'
  },
  aboutXHours: {
    one: 'ойролцоогоор 1 цаг',
    other: 'ойролцоогоор {{count}} цаг'
  },
  xHours: {
    one: '1 цаг',
    other: '{{count}} цаг'
  },
  xDays: {
    one: '1 өдөр',
    other: '{{count}} өдөр'
  },
  aboutXWeeks: {
    one: 'ойролцоогоор 1 долоо хоног',
    other: 'ойролцоогоор {{count}} долоо хоног'
  },
  xWeeks: {
    one: '1 долоо хоног',
    other: '{{count}} долоо хоног'
  },
  aboutXMonths: {
    one: 'ойролцоогоор 1 сар',
    other: 'ойролцоогоор {{count}} сар'
  },
  xMonths: {
    one: '1 сар',
    other: '{{count}} сар'
  },
  aboutXYears: {
    one: 'ойролцоогоор 1 жил',
    other: 'ойролцоогоор {{count}} жил'
  },
  xYears: {
    one: '1 жил',
    other: '{{count}} жил'
  },
  overXYears: {
    one: '1 жил гаран',
    other: '{{count}} жил гаран'
  },
  almostXYears: {
    one: 'бараг 1 жил',
    other: 'бараг {{count}} жил'
  }
};
var formatDistance$Y = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$u[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    /**
     * Append genitive case
     */
    var words = result.split(' ');
    var lastword = words.pop();
    result = words.join(' ');
    switch (lastword) {
      case 'секунд':
        result += ' секундийн';
        break;
      case 'минут':
        result += ' минутын';
        break;
      case 'цаг':
        result += ' цагийн';
        break;
      case 'өдөр':
        result += ' өдрийн';
        break;
      case 'сар':
        result += ' сарын';
        break;
      case 'жил':
        result += ' жилийн';
        break;
      case 'хоног':
        result += ' хоногийн';
        break;
      case 'гаран':
        result += ' гараны';
        break;
      case 'хүрэхгүй':
        result += ' хүрэхгүй хугацааны';
        break;
      default:
        result += lastword + '-н';
    }
    if (options.comparison && options.comparison > 0) {
      return result + ' дараа';
    } else {
      return result + ' өмнө';
    }
  }
  return result;
};
var formatDistance$Z = formatDistance$Y;

var dateFormats$u = {
  full: "y 'оны' MMMM'ын' d, EEEE 'гараг'",
  long: "y 'оны' MMMM'ын' d",
  medium: "y 'оны' MMM'ын' d",
  short: 'y.MM.dd'
};
var timeFormats$u = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$u = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$Y = {
  date: buildFormatLongFn({
    formats: dateFormats$u,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$u,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$u,
    defaultWidth: 'full'
  })
};
var formatLong$Z = formatLong$Y;

var formatRelativeLocale$u = {
  lastWeek: "'өнгөрсөн' eeee 'гарагийн' p 'цагт'",
  yesterday: "'өчигдөр' p 'цагт'",
  today: "'өнөөдөр' p 'цагт'",
  tomorrow: "'маргааш' p 'цагт'",
  nextWeek: "'ирэх' eeee 'гарагийн' p 'цагт'",
  other: 'P'
};
var formatRelative$Y = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$u[token];
};
var formatRelative$Z = formatRelative$Y;

var eraValues$u = {
  narrow: ['НТӨ', 'НТ'],
  abbreviated: ['НТӨ', 'НТ'],
  wide: ['нийтийн тооллын өмнөх', 'нийтийн тооллын']
};
var quarterValues$u = {
  narrow: ['I', 'II', 'III', 'IV'],
  abbreviated: ['I улирал', 'II улирал', 'III улирал', 'IV улирал'],
  wide: ['1-р улирал', '2-р улирал', '3-р улирал', '4-р улирал']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$u = {
  narrow: ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'],
  abbreviated: ['1-р сар', '2-р сар', '3-р сар', '4-р сар', '5-р сар', '6-р сар', '7-р сар', '8-р сар', '9-р сар', '10-р сар', '11-р сар', '12-р сар'],
  wide: ['Нэгдүгээр сар', 'Хоёрдугаар сар', 'Гуравдугаар сар', 'Дөрөвдүгээр сар', 'Тавдугаар сар', 'Зургаадугаар сар', 'Долоодугаар сар', 'Наймдугаар сар', 'Есдүгээр сар', 'Аравдугаар сар', 'Арваннэгдүгээр сар', 'Арван хоёрдугаар сар']
};
var formattingMonthValues$6 = {
  narrow: ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'],
  abbreviated: ['1-р сар', '2-р сар', '3-р сар', '4-р сар', '5-р сар', '6-р сар', '7-р сар', '8-р сар', '9-р сар', '10-р сар', '11-р сар', '12-р сар'],
  wide: ['нэгдүгээр сар', 'хоёрдугаар сар', 'гуравдугаар сар', 'дөрөвдүгээр сар', 'тавдугаар сар', 'зургаадугаар сар', 'долоодугаар сар', 'наймдугаар сар', 'есдүгээр сар', 'аравдугаар сар', 'арваннэгдүгээр сар', 'арван хоёрдугаар сар']
};
var dayValues$u = {
  narrow: ['Н', 'Д', 'М', 'Л', 'П', 'Б', 'Б'],
  short: ['Ня', 'Да', 'Мя', 'Лх', 'Пү', 'Ба', 'Бя'],
  abbreviated: ['Ням', 'Дав', 'Мяг', 'Лха', 'Пүр', 'Баа', 'Бям'],
  wide: ['Ням', 'Даваа', 'Мягмар', 'Лхагва', 'Пүрэв', 'Баасан', 'Бямба']
};
var formattingDayValues = {
  narrow: ['Н', 'Д', 'М', 'Л', 'П', 'Б', 'Б'],
  short: ['Ня', 'Да', 'Мя', 'Лх', 'Пү', 'Ба', 'Бя'],
  abbreviated: ['Ням', 'Дав', 'Мяг', 'Лха', 'Пүр', 'Баа', 'Бям'],
  wide: ['ням', 'даваа', 'мягмар', 'лхагва', 'пүрэв', 'баасан', 'бямба']
};
var dayPeriodValues$u = {
  narrow: {
    am: 'ү.ө.',
    pm: 'ү.х.',
    midnight: 'шөнө дунд',
    noon: 'үд дунд',
    morning: 'өглөө',
    afternoon: 'өдөр',
    evening: 'орой',
    night: 'шөнө'
  },
  abbreviated: {
    am: 'ү.ө.',
    pm: 'ү.х.',
    midnight: 'шөнө дунд',
    noon: 'үд дунд',
    morning: 'өглөө',
    afternoon: 'өдөр',
    evening: 'орой',
    night: 'шөнө'
  },
  wide: {
    am: 'ү.ө.',
    pm: 'ү.х.',
    midnight: 'шөнө дунд',
    noon: 'үд дунд',
    morning: 'өглөө',
    afternoon: 'өдөр',
    evening: 'орой',
    night: 'шөнө'
  }
};
var ordinalNumber$u = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$Y = {
  ordinalNumber: ordinalNumber$u,
  era: buildLocalizeFn({
    values: eraValues$u,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$u,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$u,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$6,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$u,
    defaultWidth: 'wide',
    formattingValues: formattingDayValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$u,
    defaultWidth: 'wide'
  })
};
var localize$Z = localize$Y;

var matchOrdinalNumberPattern$u = /\d+/i;
var parseOrdinalNumberPattern$u = /\d+/i;
var matchEraPatterns$u = {
  narrow: /^(нтө|нт)/i,
  abbreviated: /^(нтө|нт)/i,
  wide: /^(нийтийн тооллын өмнө|нийтийн тооллын)/i
};
var parseEraPatterns$u = {
  any: [/^(нтө|нийтийн тооллын өмнө)/i, /^(нт|нийтийн тооллын)/i]
};
var matchQuarterPatterns$u = {
  narrow: /^(iv|iii|ii|i)/i,
  abbreviated: /^(iv|iii|ii|i) улирал/i,
  wide: /^[1-4]-р улирал/i
};
var parseQuarterPatterns$u = {
  any: [/^(i(\s|$)|1)/i, /^(ii(\s|$)|2)/i, /^(iii(\s|$)|3)/i, /^(iv(\s|$)|4)/i]
};
var matchMonthPatterns$u = {
  narrow: /^(xii|xi|x|ix|viii|vii|vi|v|iv|iii|ii|i)/i,
  abbreviated: /^(1-р сар|2-р сар|3-р сар|4-р сар|5-р сар|6-р сар|7-р сар|8-р сар|9-р сар|10-р сар|11-р сар|12-р сар)/i,
  wide: /^(нэгдүгээр сар|хоёрдугаар сар|гуравдугаар сар|дөрөвдүгээр сар|тавдугаар сар|зургаадугаар сар|долоодугаар сар|наймдугаар сар|есдүгээр сар|аравдугаар сар|арван нэгдүгээр сар|арван хоёрдугаар сар)/i
};
var parseMonthPatterns$u = {
  narrow: [/^i$/i, /^ii$/i, /^iii$/i, /^iv$/i, /^v$/i, /^vi$/i, /^vii$/i, /^viii$/i, /^ix$/i, /^x$/i, /^xi$/i, /^xii$/i],
  any: [/^(1|нэгдүгээр)/i, /^(2|хоёрдугаар)/i, /^(3|гуравдугаар)/i, /^(4|дөрөвдүгээр)/i, /^(5|тавдугаар)/i, /^(6|зургаадугаар)/i, /^(7|долоодугаар)/i, /^(8|наймдугаар)/i, /^(9|есдүгээр)/i, /^(10|аравдугаар)/i, /^(11|арван нэгдүгээр)/i, /^(12|арван хоёрдугаар)/i]
};
var matchDayPatterns$u = {
  narrow: /^[ндмлпбб]/i,
  short: /^(ня|да|мя|лх|пү|ба|бя)/i,
  abbreviated: /^(ням|дав|мяг|лха|пүр|баа|бям)/i,
  wide: /^(ням|даваа|мягмар|лхагва|пүрэв|баасан|бямба)/i
};
var parseDayPatterns$u = {
  narrow: [/^н/i, /^д/i, /^м/i, /^л/i, /^п/i, /^б/i, /^б/i],
  any: [/^ня/i, /^да/i, /^мя/i, /^лх/i, /^пү/i, /^ба/i, /^бя/i]
};
var matchDayPeriodPatterns$u = {
  narrow: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i,
  any: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i
};
var parseDayPeriodPatterns$u = {
  any: {
    am: /^ү\.ө\./i,
    pm: /^ү\.х\./i,
    midnight: /^шөнө дунд/i,
    noon: /^үд дунд/i,
    morning: /өглөө/i,
    afternoon: /өдөр/i,
    evening: /орой/i,
    night: /шөнө/i
  }
};
var match$Y = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$u,
    parsePattern: parseOrdinalNumberPattern$u,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$u,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$u,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$u,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$u,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$u,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$u,
    defaultParseWidth: 'any'
  })
};
var match$Z = match$Y;

/**
 * @type {Locale}
 * @category Locales
 * @summary Mongolian locale.
 * @language Mongolian
 * @iso-639-2 mon
 * @author Bilguun Ochirbat [@bilguun0203]{@link https://github.com/bilguun0203}
 */
var locale$Z = {
  code: 'mn',
  formatDistance: formatDistance$Z,
  formatLong: formatLong$Z,
  formatRelative: formatRelative$Z,
  localize: localize$Z,
  match: match$Z,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$_ = locale$Z;

var formatDistanceLocale$t = {
  lessThanXSeconds: {
    one: 'kurang dari 1 saat',
    other: 'kurang dari {{count}} saat'
  },
  xSeconds: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  halfAMinute: 'setengah minit',
  lessThanXMinutes: {
    one: 'kurang dari 1 minit',
    other: 'kurang dari {{count}} minit'
  },
  xMinutes: {
    one: '1 minit',
    other: '{{count}} minit'
  },
  aboutXHours: {
    one: 'sekitar 1 jam',
    other: 'sekitar {{count}} jam'
  },
  xHours: {
    one: '1 jam',
    other: '{{count}} jam'
  },
  xDays: {
    one: '1 hari',
    other: '{{count}} hari'
  },
  aboutXWeeks: {
    one: 'sekitar 1 minggu',
    other: 'sekitar {{count}} minggu'
  },
  xWeeks: {
    one: '1 minggu',
    other: '{{count}} minggu'
  },
  aboutXMonths: {
    one: 'sekitar 1 bulan',
    other: 'sekitar {{count}} bulan'
  },
  xMonths: {
    one: '1 bulan',
    other: '{{count}} bulan'
  },
  aboutXYears: {
    one: 'sekitar 1 tahun',
    other: 'sekitar {{count}} tahun'
  },
  xYears: {
    one: '1 tahun',
    other: '{{count}} tahun'
  },
  overXYears: {
    one: 'lebih dari 1 tahun',
    other: 'lebih dari {{count}} tahun'
  },
  almostXYears: {
    one: 'hampir 1 tahun',
    other: 'hampir {{count}} tahun'
  }
};
var formatDistance$W = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$t[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'dalam masa ' + result;
    } else {
      return result + ' yang lalu';
    }
  }
  return result;
};
var formatDistance$X = formatDistance$W;

var dateFormats$t = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'd/M/yyyy'
};
var timeFormats$t = {
  full: 'HH.mm.ss',
  long: 'HH.mm.ss',
  medium: 'HH.mm',
  short: 'HH.mm'
};
var dateTimeFormats$t = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$W = {
  date: buildFormatLongFn({
    formats: dateFormats$t,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$t,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$t,
    defaultWidth: 'full'
  })
};
var formatLong$X = formatLong$W;

var formatRelativeLocale$t = {
  lastWeek: "eeee 'lepas pada jam' p",
  yesterday: "'Semalam pada jam' p",
  today: "'Hari ini pada jam' p",
  tomorrow: "'Esok pada jam' p",
  nextWeek: "eeee 'pada jam' p",
  other: 'P'
};
var formatRelative$W = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$t[token];
};
var formatRelative$X = formatRelative$W;

// https://www.unicode.org/cldr/charts/32/summary/ms.html
var eraValues$t = {
  narrow: ['SM', 'M'],
  abbreviated: ['SM', 'M'],
  wide: ['Sebelum Masihi', 'Masihi']
};
var quarterValues$t = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['S1', 'S2', 'S3', 'S4'],
  wide: ['Suku pertama', 'Suku kedua', 'Suku ketiga', 'Suku keempat']
};

// Note: in Malay, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$t = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'O', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun', 'Jul', 'Ogo', 'Sep', 'Okt', 'Nov', 'Dis'],
  wide: ['Januari', 'Februari', 'Mac', 'April', 'Mei', 'Jun', 'Julai', 'Ogos', 'September', 'Oktober', 'November', 'Disember']
};
var dayValues$t = {
  narrow: ['A', 'I', 'S', 'R', 'K', 'J', 'S'],
  short: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
  abbreviated: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
  wide: ['Ahad', 'Isnin', 'Selasa', 'Rabu', 'Khamis', 'Jumaat', 'Sabtu']
};
var dayPeriodValues$t = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'tgh malam',
    noon: 'tgh hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  }
};
var formattingDayPeriodValues$o = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  }
};
var ordinalNumber$t = function ordinalNumber(dirtyNumber, _options) {
  // Can't use "pertama", "kedua" because can't be parsed
  return 'ke-' + Number(dirtyNumber);
};
var localize$W = {
  ordinalNumber: ordinalNumber$t,
  era: buildLocalizeFn({
    values: eraValues$t,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$t,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$t,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$t,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$t,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$o,
    defaultFormattingWidth: 'wide'
  })
};
var localize$X = localize$W;

var matchOrdinalNumberPattern$t = /^ke-(\d+)?/i;
var parseOrdinalNumberPattern$t = /petama|\d+/i;
var matchEraPatterns$t = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
  wide: /^(sebelum masihi|masihi)/i
};
var parseEraPatterns$t = {
  any: [/^s/i, /^(m)/i]
};
var matchQuarterPatterns$t = {
  narrow: /^[1234]/i,
  abbreviated: /^S[1234]/i,
  wide: /Suku (pertama|kedua|ketiga|keempat)/i
};
var parseQuarterPatterns$t = {
  any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i]
};
var matchMonthPatterns$t = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
  wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
};
var parseMonthPatterns$t = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^og/i, /^s/i, /^ok/i, /^n/i, /^d/i]
};
var matchDayPatterns$t = {
  narrow: /^[aisrkj]/i,
  short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
};
var parseDayPatterns$t = {
  narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var matchDayPeriodPatterns$t = {
  narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
};
var parseDayPeriodPatterns$t = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pa/i,
    afternoon: /tengah h/i,
    evening: /pe/i,
    night: /m/i
  }
};
var match$W = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$t,
    parsePattern: parseOrdinalNumberPattern$t,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$t,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$t,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$t,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$t,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$t,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$t,
    defaultParseWidth: 'any'
  })
};
var match$X = match$W;

/**
 * @type {Locale}
 * @category Locales
 * @summary Malay locale.
 * @language Malay
 * @iso-639-2 msa
 * @author Ruban Selvarajah [@Zyten]{@link https://github.com/Zyten}
 */
var locale$X = {
  code: 'ms',
  formatDistance: formatDistance$X,
  formatLong: formatLong$X,
  formatRelative: formatRelative$X,
  localize: localize$X,
  match: match$X,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$Y = locale$X;

var formatDistanceLocale$s = {
  lessThanXSeconds: {
    one: 'inqas minn sekonda',
    other: 'inqas minn {{count}} sekondi'
  },
  xSeconds: {
    one: 'sekonda',
    other: '{{count}} sekondi'
  },
  halfAMinute: 'nofs minuta',
  lessThanXMinutes: {
    one: 'inqas minn minuta',
    other: 'inqas minn {{count}} minuti'
  },
  xMinutes: {
    one: 'minuta',
    other: '{{count}} minuti'
  },
  aboutXHours: {
    one: 'madwar siegħa',
    other: 'madwar {{count}} siegħat'
  },
  xHours: {
    one: 'siegħa',
    other: '{{count}} siegħat'
  },
  xDays: {
    one: 'ġurnata',
    other: '{{count}} ġranet'
  },
  aboutXWeeks: {
    one: 'madwar ġimgħa',
    other: 'madwar {{count}} ġimgħat'
  },
  xWeeks: {
    one: 'ġimgħa',
    other: '{{count}} ġimgħat'
  },
  aboutXMonths: {
    one: 'madwar xahar',
    other: 'madwar {{count}} xhur'
  },
  xMonths: {
    one: 'xahar',
    other: '{{count}} xhur'
  },
  aboutXYears: {
    one: 'madwar sena',
    two: 'madwar sentejn',
    other: 'madwar {{count}} snin'
  },
  xYears: {
    one: 'sena',
    two: 'sentejn',
    other: '{{count}} snin'
  },
  overXYears: {
    one: 'aktar minn sena',
    two: 'aktar minn sentejn',
    other: 'aktar minn {{count}} snin'
  },
  almostXYears: {
    one: 'kważi sena',
    two: 'kważi sentejn',
    other: 'kważi {{count}} snin'
  }
};
var formatDistance$U = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$s[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "f'" + result;
    } else {
      return result + ' ilu';
    }
  }
  return result;
};
var formatDistance$V = formatDistance$U;

var dateFormats$s = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$s = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$s = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$U = {
  date: buildFormatLongFn({
    formats: dateFormats$s,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$s,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$s,
    defaultWidth: 'full'
  })
};
var formatLong$V = formatLong$U;

var formatRelativeLocale$s = {
  lastWeek: "eeee 'li għadda' 'fil-'p",
  yesterday: "'Il-bieraħ fil-'p",
  today: "'Illum fil-'p",
  tomorrow: "'Għada fil-'p",
  nextWeek: "eeee 'fil-'p",
  other: 'P'
};
var formatRelative$U = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$s[token];
};
var formatRelative$V = formatRelative$U;

var eraValues$s = {
  narrow: ['Q', 'W'],
  abbreviated: ['QK', 'WK'],
  wide: ['qabel Kristu', 'wara Kristu']
};
var quarterValues$s = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1. kwart', '2. kwart', '3. kwart', '4. kwart']
};
var monthValues$s = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'Ġ', 'L', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Fra', 'Mar', 'Apr', 'Mej', 'Ġun', 'Lul', 'Aww', 'Set', 'Ott', 'Nov', 'Diċ'],
  wide: ['Jannar', 'Frar', 'Marzu', 'April', 'Mejju', 'Ġunju', 'Lulju', 'Awwissu', 'Settembru', 'Ottubru', 'Novembru', 'Diċembru']
};
var dayValues$s = {
  narrow: ['Ħ', 'T', 'T', 'E', 'Ħ', 'Ġ', 'S'],
  short: ['Ħa', 'Tn', 'Tl', 'Er', 'Ħa', 'Ġi', 'Si'],
  abbreviated: ['Ħad', 'Tne', 'Tli', 'Erb', 'Ħam', 'Ġim', 'Sib'],
  wide: ['Il-Ħadd', 'It-Tnejn', 'It-Tlieta', 'L-Erbgħa', 'Il-Ħamis', 'Il-Ġimgħa', 'Is-Sibt']
};
var dayPeriodValues$s = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'nofsillejl',
    noon: 'nofsinhar',
    morning: 'għodwa',
    afternoon: 'wara nofsinhar',
    evening: 'filgħaxija',
    night: 'lejl'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'nofsillejl',
    noon: 'nofsinhar',
    morning: 'għodwa',
    afternoon: 'wara nofsinhar',
    evening: 'filgħaxija',
    night: 'lejl'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'nofsillejl',
    noon: 'nofsinhar',
    morning: 'għodwa',
    afternoon: 'wara nofsinhar',
    evening: 'filgħaxija',
    night: 'lejl'
  }
};
var formattingDayPeriodValues$n = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: 'filgħodu',
    afternoon: 'wara nofsinhar',
    evening: 'filgħaxija',
    night: 'billejl'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: 'filgħodu',
    afternoon: 'wara nofsinhar',
    evening: 'filgħaxija',
    night: 'billejl'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: 'filgħodu',
    afternoon: 'wara nofsinhar',
    evening: 'filgħaxija',
    night: 'billejl'
  }
};
var ordinalNumber$s = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'º';
};
var localize$U = {
  ordinalNumber: ordinalNumber$s,
  era: buildLocalizeFn({
    values: eraValues$s,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$s,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$s,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$s,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$s,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$n,
    defaultFormattingWidth: 'wide'
  })
};
var localize$V = localize$U;

var matchOrdinalNumberPattern$s = /^(\d+)(º)?/i;
var parseOrdinalNumberPattern$s = /\d+/i;
var matchEraPatterns$s = {
  narrow: /^(q|w)/i,
  abbreviated: /^(q\.?\s?k\.?|b\.?\s?c\.?\s?e\.?|w\.?\s?k\.?)/i,
  wide: /^(qabel kristu|before common era|wara kristu|common era)/i
};
var parseEraPatterns$s = {
  any: [/^(q|b)/i, /^(w|c)/i]
};
var matchQuarterPatterns$s = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](\.)? kwart/i
};
var parseQuarterPatterns$s = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$s = {
  narrow: /^[jfmaglsond]/i,
  abbreviated: /^(jan|fra|mar|apr|mej|ġun|lul|aww|set|ott|nov|diċ)/i,
  wide: /^(jannar|frar|marzu|april|mejju|ġunju|lulju|awwissu|settembru|ottubru|novembru|diċembru)/i
};
var parseMonthPatterns$s = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^ġ/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mej/i, /^ġ/i, /^l/i, /^aw/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$s = {
  narrow: /^[ħteġs]/i,
  short: /^(ħa|tn|tl|er|ħa|ġi|si)/i,
  abbreviated: /^(ħad|tne|tli|erb|ħam|ġim|sib)/i,
  wide: /^(il-ħadd|it-tnejn|it-tlieta|l-erbgħa|il-ħamis|il-ġimgħa|is-sibt)/i
};
var parseDayPatterns$s = {
  narrow: [/^ħ/i, /^t/i, /^t/i, /^e/i, /^ħ/i, /^ġ/i, /^s/i],
  any: [/^(il-)?ħad/i, /^(it-)?tn/i, /^(it-)?tl/i, /^(l-)?er/i, /^(il-)?ham/i, /^(il-)?ġi/i, /^(is-)?si/i]
};
var matchDayPeriodPatterns$s = {
  narrow: /^(a|p|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i,
  any: /^([ap]\.?\s?m\.?|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i
};
var parseDayPeriodPatterns$s = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^f'nofsillejl/i,
    noon: /^f'nofsinhar/i,
    morning: /għodwa/i,
    afternoon: /wara(\s.*)nofsinhar/i,
    evening: /filgħaxija/i,
    night: /lejl/i
  }
};
var match$U = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$s,
    parsePattern: parseOrdinalNumberPattern$s,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$s,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$s,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$s,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$s,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$s,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$s,
    defaultParseWidth: 'any'
  })
};
var match$V = match$U;

/**
 * @type {Locale}
 * @category Locales
 * @summary Maltese locale.
 * @language Maltese
 * @iso-639-2 mlt
 * @author Andras Matzon [@amatzon](@link https://github.com/amatzon)
 * @author Bryan Borg [@bryanMt](@link https://github.com/bryanMt)
 */
var locale$V = {
  code: 'mt',
  formatDistance: formatDistance$V,
  formatLong: formatLong$V,
  formatRelative: formatRelative$V,
  localize: localize$V,
  match: match$V,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$W = locale$V;

var formatDistanceLocale$r = {
  lessThanXSeconds: {
    one: 'mindre enn ett sekund',
    other: 'mindre enn {{count}} sekunder'
  },
  xSeconds: {
    one: 'ett sekund',
    other: '{{count}} sekunder'
  },
  halfAMinute: 'et halvt minutt',
  lessThanXMinutes: {
    one: 'mindre enn ett minutt',
    other: 'mindre enn {{count}} minutter'
  },
  xMinutes: {
    one: 'ett minutt',
    other: '{{count}} minutter'
  },
  aboutXHours: {
    one: 'omtrent en time',
    other: 'omtrent {{count}} timer'
  },
  xHours: {
    one: 'en time',
    other: '{{count}} timer'
  },
  xDays: {
    one: 'en dag',
    other: '{{count}} dager'
  },
  aboutXWeeks: {
    one: 'omtrent en uke',
    other: 'omtrent {{count}} uker'
  },
  xWeeks: {
    one: 'en uke',
    other: '{{count}} uker'
  },
  aboutXMonths: {
    one: 'omtrent en måned',
    other: 'omtrent {{count}} måneder'
  },
  xMonths: {
    one: 'en måned',
    other: '{{count}} måneder'
  },
  aboutXYears: {
    one: 'omtrent ett år',
    other: 'omtrent {{count}} år'
  },
  xYears: {
    one: 'ett år',
    other: '{{count}} år'
  },
  overXYears: {
    one: 'over ett år',
    other: 'over {{count}} år'
  },
  almostXYears: {
    one: 'nesten ett år',
    other: 'nesten {{count}} år'
  }
};
var formatDistance$S = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$r[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' siden';
    }
  }
  return result;
};
var formatDistance$T = formatDistance$S;

var dateFormats$r = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y'
};
var timeFormats$r = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$r = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$S = {
  date: buildFormatLongFn({
    formats: dateFormats$r,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$r,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$r,
    defaultWidth: 'full'
  })
};
var formatLong$T = formatLong$S;

var formatRelativeLocale$r = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
var formatRelative$S = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$r[token];
};
var formatRelative$T = formatRelative$S;

var eraValues$r = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['før Kristus', 'etter Kristus']
};
var quarterValues$r = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$r = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'mai', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
  wide: ['januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember']
};
var dayValues$r = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['sø', 'ma', 'ti', 'on', 'to', 'fr', 'lø'],
  abbreviated: ['søn', 'man', 'tir', 'ons', 'tor', 'fre', 'lør'],
  wide: ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag']
};
var dayPeriodValues$r = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natten'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natten'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morgenen',
    afternoon: 'på ettermiddagen',
    evening: 'på kvelden',
    night: 'på natten'
  }
};
var ordinalNumber$r = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$S = {
  ordinalNumber: ordinalNumber$r,
  era: buildLocalizeFn({
    values: eraValues$r,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$r,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$r,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$r,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$r,
    defaultWidth: 'wide'
  })
};
var localize$T = localize$S;

var matchOrdinalNumberPattern$r = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$r = /\d+/i;
var matchEraPatterns$r = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
var parseEraPatterns$r = {
  any: [/^f/i, /^e/i]
};
var matchQuarterPatterns$r = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var parseQuarterPatterns$r = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$r = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var parseMonthPatterns$r = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$r = {
  narrow: /^[smtofl]/i,
  short: /^(sø|ma|ti|on|to|fr|lø)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var parseDayPatterns$r = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns$r = {
  narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
};
var parseDayPeriodPatterns$r = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var match$S = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$r,
    parsePattern: parseOrdinalNumberPattern$r,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$r,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$r,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$r,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$r,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$r,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$r,
    defaultParseWidth: 'any'
  })
};
var match$T = match$S;

/**
 * @type {Locale}
 * @category Locales
 * @summary Norwegian Bokmål locale.
 * @language Norwegian Bokmål
 * @iso-639-2 nob
 * @author Hans-Kristian Koren [@Hanse]{@link https://github.com/Hanse}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Dag Stuan [@dagstuan]{@link https://github.com/dagstuan}
 */
var locale$T = {
  code: 'nb',
  formatDistance: formatDistance$T,
  formatLong: formatLong$T,
  formatRelative: formatRelative$T,
  localize: localize$T,
  match: match$T,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$U = locale$T;

var formatDistanceLocale$q = {
  lessThanXSeconds: {
    one: 'minder dan een seconde',
    other: 'minder dan {{count}} seconden'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} seconden'
  },
  halfAMinute: 'een halve minuut',
  lessThanXMinutes: {
    one: 'minder dan een minuut',
    other: 'minder dan {{count}} minuten'
  },
  xMinutes: {
    one: 'een minuut',
    other: '{{count}} minuten'
  },
  aboutXHours: {
    one: 'ongeveer 1 uur',
    other: 'ongeveer {{count}} uur'
  },
  xHours: {
    one: '1 uur',
    other: '{{count}} uur'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dagen'
  },
  aboutXWeeks: {
    one: 'ongeveer 1 week',
    other: 'ongeveer {{count}} weken'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weken'
  },
  aboutXMonths: {
    one: 'ongeveer 1 maand',
    other: 'ongeveer {{count}} maanden'
  },
  xMonths: {
    one: '1 maand',
    other: '{{count}} maanden'
  },
  aboutXYears: {
    one: 'ongeveer 1 jaar',
    other: 'ongeveer {{count}} jaar'
  },
  xYears: {
    one: '1 jaar',
    other: '{{count}} jaar'
  },
  overXYears: {
    one: 'meer dan 1 jaar',
    other: 'meer dan {{count}} jaar'
  },
  almostXYears: {
    one: 'bijna 1 jaar',
    other: 'bijna {{count}} jaar'
  }
};
var formatDistance$Q = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$q[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'over ' + result;
    } else {
      return result + ' geleden';
    }
  }
  return result;
};
var formatDistance$R = formatDistance$Q;

var dateFormats$q = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd-MM-y'
};
var timeFormats$q = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$q = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$Q = {
  date: buildFormatLongFn({
    formats: dateFormats$q,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$q,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$q,
    defaultWidth: 'full'
  })
};
var formatLong$R = formatLong$Q;

var formatRelativeLocale$q = {
  lastWeek: "'afgelopen' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var formatRelative$Q = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$q[token];
};
var formatRelative$R = formatRelative$Q;

var eraValues$q = {
  narrow: ['v.C.', 'n.C.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['voor Christus', 'na Christus']
};
var quarterValues$q = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1e kwartaal', '2e kwartaal', '3e kwartaal', '4e kwartaal']
};
var monthValues$q = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december']
};
var dayValues$q = {
  narrow: ['Z', 'M', 'D', 'W', 'D', 'V', 'Z'],
  short: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
  abbreviated: ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'],
  wide: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag']
};
var dayPeriodValues$q = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  }
};
var ordinalNumber$q = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'e';
};
var localize$Q = {
  ordinalNumber: ordinalNumber$q,
  era: buildLocalizeFn({
    values: eraValues$q,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$q,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$q,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$q,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$q,
    defaultWidth: 'wide'
  })
};
var localize$R = localize$Q;

var matchOrdinalNumberPattern$q = /^(\d+)e?/i;
var parseOrdinalNumberPattern$q = /\d+/i;
var matchEraPatterns$q = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/
};
var parseEraPatterns$q = {
  any: [/^v/, /^n/]
};
var matchQuarterPatterns$q = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i
};
var parseQuarterPatterns$q = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$q = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
var parseMonthPatterns$q = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
};
var matchDayPatterns$q = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
var parseDayPatterns$q = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
};
var matchDayPeriodPatterns$q = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
var parseDayPeriodPatterns$q = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i
  }
};
var match$Q = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$q,
    parsePattern: parseOrdinalNumberPattern$q,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$q,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$q,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$q,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$q,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$q,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$q,
    defaultParseWidth: 'any'
  })
};
var match$R = match$Q;

/**
 * @type {Locale}
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
 * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
 * @author Lode Vanhove [@bitcrumb]{@link https://github.com/bitcrumb}
 * @author Edo Rivai [@edorivai]{@link https://github.com/edorivai}
 * @author Niels Keurentjes [@curry684]{@link https://github.com/curry684}
 * @author Stefan Vermaas [@stefanvermaas]{@link https://github.com/stefanvermaas}
 */
var locale$R = {
  code: 'nl',
  formatDistance: formatDistance$R,
  formatLong: formatLong$R,
  formatRelative: formatRelative$R,
  localize: localize$R,
  match: match$R,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$S = locale$R;

var formatDistanceLocale$p = {
  lessThanXSeconds: {
    one: 'minder dan een seconde',
    other: 'minder dan {{count}} seconden'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} seconden'
  },
  halfAMinute: 'een halve minuut',
  lessThanXMinutes: {
    one: 'minder dan een minuut',
    other: 'minder dan {{count}} minuten'
  },
  xMinutes: {
    one: 'een minuut',
    other: '{{count}} minuten'
  },
  aboutXHours: {
    one: 'ongeveer 1 uur',
    other: 'ongeveer {{count}} uur'
  },
  xHours: {
    one: '1 uur',
    other: '{{count}} uur'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dagen'
  },
  aboutXWeeks: {
    one: 'ongeveer 1 week',
    other: 'ongeveer {{count}} weken'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weken'
  },
  aboutXMonths: {
    one: 'ongeveer 1 maand',
    other: 'ongeveer {{count}} maanden'
  },
  xMonths: {
    one: '1 maand',
    other: '{{count}} maanden'
  },
  aboutXYears: {
    one: 'ongeveer 1 jaar',
    other: 'ongeveer {{count}} jaar'
  },
  xYears: {
    one: '1 jaar',
    other: '{{count}} jaar'
  },
  overXYears: {
    one: 'meer dan 1 jaar',
    other: 'meer dan {{count}} jaar'
  },
  almostXYears: {
    one: 'bijna 1 jaar',
    other: 'bijna {{count}} jaar'
  }
};
var formatDistance$O = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$p[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'over ' + result;
    } else {
      return result + ' geleden';
    }
  }
  return result;
};
var formatDistance$P = formatDistance$O;

var dateFormats$p = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.y'
};
var timeFormats$p = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$p = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$O = {
  date: buildFormatLongFn({
    formats: dateFormats$p,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$p,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$p,
    defaultWidth: 'full'
  })
};
var formatLong$P = formatLong$O;

var formatRelativeLocale$p = {
  lastWeek: "'vorige' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var formatRelative$O = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$p[token];
};
var formatRelative$P = formatRelative$O;

var eraValues$p = {
  narrow: ['v.C.', 'n.C.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['voor Christus', 'na Christus']
};
var quarterValues$p = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1e kwartaal', '2e kwartaal', '3e kwartaal', '4e kwartaal']
};
var monthValues$p = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december']
};
var dayValues$p = {
  narrow: ['Z', 'M', 'D', 'W', 'D', 'V', 'Z'],
  short: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
  abbreviated: ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'],
  wide: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag']
};
var dayPeriodValues$p = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middag',
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middag',
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middag',
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  }
};
var ordinalNumber$p = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'e';
};
var localize$O = {
  ordinalNumber: ordinalNumber$p,
  era: buildLocalizeFn({
    values: eraValues$p,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$p,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$p,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$p,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$p,
    defaultWidth: 'wide'
  })
};
var localize$P = localize$O;

var matchOrdinalNumberPattern$p = /^(\d+)e?/i;
var parseOrdinalNumberPattern$p = /\d+/i;
var matchEraPatterns$p = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/
};
var parseEraPatterns$p = {
  any: [/^v/, /^n/]
};
var matchQuarterPatterns$p = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i
};
var parseQuarterPatterns$p = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$p = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
var parseMonthPatterns$p = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
};
var matchDayPatterns$p = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
var parseDayPatterns$p = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
};
var matchDayPeriodPatterns$p = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
var parseDayPeriodPatterns$p = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i
  }
};
var match$O = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$p,
    parsePattern: parseOrdinalNumberPattern$p,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$p,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$p,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$p,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$p,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$p,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$p,
    defaultParseWidth: 'any'
  })
};
var match$P = match$O;

/**
 * @type {Locale}
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
 * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
 * @author Lode Vanhove [@bitcrumb]{@link https://github.com/bitcrumb}
 * @author Alex Hoeing [@dcbn]{@link https://github.com/dcbn}
 */
var locale$P = {
  code: 'nl-BE',
  formatDistance: formatDistance$P,
  formatLong: formatLong$P,
  formatRelative: formatRelative$P,
  localize: localize$P,
  match: match$P,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$Q = locale$P;

var formatDistanceLocale$o = {
  lessThanXSeconds: {
    one: 'mindre enn eitt sekund',
    other: 'mindre enn {{count}} sekund'
  },
  xSeconds: {
    one: 'eitt sekund',
    other: '{{count}} sekund'
  },
  halfAMinute: 'eit halvt minutt',
  lessThanXMinutes: {
    one: 'mindre enn eitt minutt',
    other: 'mindre enn {{count}} minutt'
  },
  xMinutes: {
    one: 'eitt minutt',
    other: '{{count}} minutt'
  },
  aboutXHours: {
    one: 'omtrent ein time',
    other: 'omtrent {{count}} timar'
  },
  xHours: {
    one: 'ein time',
    other: '{{count}} timar'
  },
  xDays: {
    one: 'ein dag',
    other: '{{count}} dagar'
  },
  aboutXWeeks: {
    one: 'omtrent ei veke',
    other: 'omtrent {{count}} veker'
  },
  xWeeks: {
    one: 'ei veke',
    other: '{{count}} veker'
  },
  aboutXMonths: {
    one: 'omtrent ein månad',
    other: 'omtrent {{count}} månader'
  },
  xMonths: {
    one: 'ein månad',
    other: '{{count}} månader'
  },
  aboutXYears: {
    one: 'omtrent eitt år',
    other: 'omtrent {{count}} år'
  },
  xYears: {
    one: 'eitt år',
    other: '{{count}} år'
  },
  overXYears: {
    one: 'over eitt år',
    other: 'over {{count}} år'
  },
  almostXYears: {
    one: 'nesten eitt år',
    other: 'nesten {{count}} år'
  }
};
var wordMapping$1 = ['null', 'ein', 'to', 'tre', 'fire', 'fem', 'seks', 'sju', 'åtte', 'ni', 'ti', 'elleve', 'tolv'];
var formatDistance$M = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$o[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    if (options && options.onlyNumeric) {
      result = tokenValue.other.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', count < 13 ? wordMapping$1[count] : String(count));
    }
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' sidan';
    }
  }
  return result;
};
var formatDistance$N = formatDistance$M;

var dateFormats$o = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y'
};
var timeFormats$o = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$o = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$M = {
  date: buildFormatLongFn({
    formats: dateFormats$o,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$o,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$o,
    defaultWidth: 'full'
  })
};
var formatLong$N = formatLong$M;

var formatRelativeLocale$o = {
  lastWeek: "'førre' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
var formatRelative$M = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$o[token];
};
var formatRelative$N = formatRelative$M;

var eraValues$o = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['før Kristus', 'etter Kristus']
};
var quarterValues$o = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$o = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'mai', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
  wide: ['januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember']
};
var dayValues$o = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['su', 'må', 'ty', 'on', 'to', 'fr', 'lau'],
  abbreviated: ['sun', 'mån', 'tys', 'ons', 'tor', 'fre', 'laur'],
  wide: ['sundag', 'måndag', 'tysdag', 'onsdag', 'torsdag', 'fredag', 'laurdag']
};
var dayPeriodValues$o = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natta'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natta'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morgonen',
    afternoon: 'på ettermiddagen',
    evening: 'på kvelden',
    night: 'på natta'
  }
};
var ordinalNumber$o = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$M = {
  ordinalNumber: ordinalNumber$o,
  era: buildLocalizeFn({
    values: eraValues$o,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$o,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$o,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$o,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$o,
    defaultWidth: 'wide'
  })
};
var localize$N = localize$M;

var matchOrdinalNumberPattern$o = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$o = /\d+/i;
var matchEraPatterns$o = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
var parseEraPatterns$o = {
  any: [/^f/i, /^e/i]
};
var matchQuarterPatterns$o = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var parseQuarterPatterns$o = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$o = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var parseMonthPatterns$o = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$o = {
  narrow: /^[smtofl]/i,
  short: /^(su|må|ty|on|to|fr|la)/i,
  abbreviated: /^(sun|mån|tys|ons|tor|fre|laur)/i,
  wide: /^(sundag|måndag|tysdag|onsdag|torsdag|fredag|laurdag)/i
};
var parseDayPatterns$o = {
  any: [/^s/i, /^m/i, /^ty/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns$o = {
  narrow: /^(midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta))/i
};
var parseDayPeriodPatterns$o = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var match$M = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$o,
    parsePattern: parseOrdinalNumberPattern$o,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$o,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$o,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$o,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$o,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$o,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$o,
    defaultParseWidth: 'any'
  })
};
var match$N = match$M;

/**
 * @type {Locale}
 * @category Locales
 * @summary Norwegian Nynorsk locale.
 * @language Norwegian Nynorsk
 * @iso-639-2 nno
 * @author Mats Byrkjeland [@draperunner]{@link https://github.com/draperunner}
 */
var locale$N = {
  code: 'nn',
  formatDistance: formatDistance$N,
  formatLong: formatLong$N,
  formatRelative: formatRelative$N,
  localize: localize$N,
  match: match$N,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$O = locale$N;

var formatDistanceLocale$n = {
  lessThanXSeconds: {
    one: 'mens d’una segonda',
    other: 'mens de {{count}} segondas'
  },
  xSeconds: {
    one: '1 segonda',
    other: '{{count}} segondas'
  },
  halfAMinute: '30 segondas',
  lessThanXMinutes: {
    one: 'mens d’una minuta',
    other: 'mens de {{count}} minutas'
  },
  xMinutes: {
    one: '1 minuta',
    other: '{{count}} minutas'
  },
  aboutXHours: {
    one: 'environ 1 ora',
    other: 'environ {{count}} oras'
  },
  xHours: {
    one: '1 ora',
    other: '{{count}} oras'
  },
  xDays: {
    one: '1 jorn',
    other: '{{count}} jorns'
  },
  aboutXWeeks: {
    one: 'environ 1 setmana',
    other: 'environ {{count}} setmanas'
  },
  xWeeks: {
    one: '1 setmana',
    other: '{{count}} setmanas'
  },
  aboutXMonths: {
    one: 'environ 1 mes',
    other: 'environ {{count}} meses'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'environ 1 an',
    other: 'environ {{count}} ans'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ans'
  },
  overXYears: {
    one: 'mai d’un an',
    other: 'mai de {{count}} ans'
  },
  almostXYears: {
    one: 'gaireben un an',
    other: 'gaireben {{count}} ans'
  }
};
var formatDistance$K = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$n[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'd’aquí ' + result;
    } else {
      return 'fa ' + result;
    }
  }
  return result;
};
var formatDistance$L = formatDistance$K;

var dateFormats$n = {
  full: "EEEE d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$n = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$n = {
  full: "{{date}} 'a' {{time}}",
  long: "{{date}} 'a' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$K = {
  date: buildFormatLongFn({
    formats: dateFormats$n,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$n,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$n,
    defaultWidth: 'full'
  })
};
var formatLong$L = formatLong$K;

var formatRelativeLocale$n = {
  lastWeek: "eeee 'passat a' p",
  yesterday: "'ièr a' p",
  today: "'uèi a' p",
  tomorrow: "'deman a' p",
  nextWeek: "eeee 'a' p",
  other: 'P'
};
var formatRelative$K = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$n[token];
};
var formatRelative$L = formatRelative$K;

var eraValues$n = {
  narrow: ['ab. J.C.', 'apr. J.C.'],
  abbreviated: ['ab. J.C.', 'apr. J.C.'],
  wide: ['abans Jèsus-Crist', 'après Jèsus-Crist']
};
var quarterValues$n = {
  narrow: ['T1', 'T2', 'T3', 'T4'],
  abbreviated: ['1èr trim.', '2nd trim.', '3en trim.', '4en trim.'],
  wide: ['1èr trimèstre', '2nd trimèstre', '3en trimèstre', '4en trimèstre']
};
var monthValues$n = {
  narrow: ['GN', 'FB', 'MÇ', 'AB', 'MA', 'JN', 'JL', 'AG', 'ST', 'OC', 'NV', 'DC'],
  abbreviated: ['gen.', 'febr.', 'març', 'abr.', 'mai', 'junh', 'jul.', 'ag.', 'set.', 'oct.', 'nov.', 'dec.'],
  wide: ['genièr', 'febrièr', 'març', 'abril', 'mai', 'junh', 'julhet', 'agost', 'setembre', 'octòbre', 'novembre', 'decembre']
};
var dayValues$n = {
  narrow: ['dg.', 'dl.', 'dm.', 'dc.', 'dj.', 'dv.', 'ds.'],
  short: ['dg.', 'dl.', 'dm.', 'dc.', 'dj.', 'dv.', 'ds.'],
  abbreviated: ['dg.', 'dl.', 'dm.', 'dc.', 'dj.', 'dv.', 'ds.'],
  wide: ['dimenge', 'diluns', 'dimars', 'dimècres', 'dijòus', 'divendres', 'dissabte']
};
var dayPeriodValues$n = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'mièjanuèch',
    noon: 'miègjorn',
    morning: 'matin',
    afternoon: 'aprèp-miègjorn',
    evening: 'vèspre',
    night: 'nuèch'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'mièjanuèch',
    noon: 'miègjorn',
    morning: 'matin',
    afternoon: 'aprèp-miègjorn',
    evening: 'vèspre',
    night: 'nuèch'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'mièjanuèch',
    noon: 'miègjorn',
    morning: 'matin',
    afternoon: 'aprèp-miègjorn',
    evening: 'vèspre',
    night: 'nuèch'
  }
};
var formattingDayPeriodValues$m = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'mièjanuèch',
    noon: 'miègjorn',
    morning: 'del matin',
    afternoon: 'de l’aprèp-miègjorn',
    evening: 'del ser',
    night: 'de la nuèch'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mièjanuèch',
    noon: 'miègjorn',
    morning: 'del matin',
    afternoon: 'de l’aprèp-miègjorn',
    evening: 'del ser',
    night: 'de la nuèch'
  },
  wide: {
    am: 'ante meridiem',
    pm: 'post meridiem',
    midnight: 'mièjanuèch',
    noon: 'miègjorn',
    morning: 'del matin',
    afternoon: 'de l’aprèp-miègjorn',
    evening: 'del ser',
    night: 'de la nuèch'
  }
};
var ordinalNumber$n = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var ordinal;
  switch (number) {
    case 1:
      ordinal = 'èr';
      break;
    case 2:
      ordinal = 'nd';
      break;
    default:
      ordinal = 'en';
  }

  // feminine for year, week, hour, minute, second
  if (unit === 'year' || unit === 'week' || unit === 'hour' || unit === 'minute' || unit === 'second') {
    ordinal += 'a';
  }
  return number + ordinal;
};
var localize$K = {
  ordinalNumber: ordinalNumber$n,
  era: buildLocalizeFn({
    values: eraValues$n,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$n,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$n,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$n,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$n,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$m,
    defaultFormattingWidth: 'wide'
  })
};
var localize$L = localize$K;

var matchOrdinalNumberPattern$n = /^(\d+)(èr|nd|en)?[a]?/i;
var parseOrdinalNumberPattern$n = /\d+/i;
var matchEraPatterns$n = {
  narrow: /^(ab\.J\.C|apr\.J\.C|apr\.J\.-C)/i,
  abbreviated: /^(ab\.J\.-C|ab\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(abans Jèsus-Crist|après Jèsus-Crist)/i
};
var parseEraPatterns$n = {
  any: [/^ab/i, /^ap/i]
};
var matchQuarterPatterns$n = {
  narrow: /^T[1234]/i,
  abbreviated: /^[1234](èr|nd|en)? trim\.?/i,
  wide: /^[1234](èr|nd|en)? trimèstre/i
};
var parseQuarterPatterns$n = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$n = {
  narrow: /^(GN|FB|MÇ|AB|MA|JN|JL|AG|ST|OC|NV|DC)/i,
  abbreviated: /^(gen|febr|març|abr|mai|junh|jul|ag|set|oct|nov|dec)\.?/i,
  wide: /^(genièr|febrièr|març|abril|mai|junh|julhet|agost|setembre|octòbre|novembre|decembre)/i
};
var parseMonthPatterns$n = {
  any: [/^g/i, /^f/i, /^ma[r?]|MÇ/i, /^ab/i, /^ma[i?]/i, /^ju[n?]|JN/i, /^ju[l?]|JL/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$n = {
  narrow: /^d[glmcjvs]\.?/i,
  short: /^d[glmcjvs]\.?/i,
  abbreviated: /^d[glmcjvs]\.?/i,
  wide: /^(dimenge|diluns|dimars|dimècres|dijòus|divendres|dissabte)/i
};
var parseDayPatterns$n = {
  narrow: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  short: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  abbreviated: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  any: [/^dg|dime/i, /^dl|dil/i, /^dm|dima/i, /^dc|dimè/i, /^dj|dij/i, /^dv|div/i, /^ds|dis/i]
};
var matchDayPeriodPatterns$n = {
  any: /(^(a\.?m|p\.?m))|(ante meridiem|post meridiem)|((del |de la |de l’)(matin|aprèp-miègjorn|vèspre|ser|nuèch))/i
};
var parseDayPeriodPatterns$n = {
  any: {
    am: /(^a)|ante meridiem/i,
    pm: /(^p)|post meridiem/i,
    midnight: /^mièj/i,
    noon: /^mièg/i,
    morning: /matin/i,
    afternoon: /aprèp-miègjorn/i,
    evening: /vèspre|ser/i,
    night: /nuèch/i
  }
};
var match$K = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$n,
    parsePattern: parseOrdinalNumberPattern$n,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$n,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$n,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$n,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$n,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$n,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$n,
    defaultParseWidth: 'any'
  })
};
var match$L = match$K;

/**
 * @type {Locale}
 * @category Locales
 * @summary Occitan locale.
 * @language Occitan
 * @iso-639-2 oci
 * @author Quentin PAGÈS
 */
var locale$L = {
  code: 'oc',
  formatDistance: formatDistance$L,
  formatLong: formatLong$L,
  formatRelative: formatRelative$L,
  localize: localize$L,
  match: match$L,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$M = locale$L;

var formatDistanceLocale$m = {
  lessThanXSeconds: {
    one: {
      regular: 'mniej niż sekunda',
      past: 'mniej niż sekundę',
      future: 'mniej niż sekundę'
    },
    twoFour: 'mniej niż {{count}} sekundy',
    other: 'mniej niż {{count}} sekund'
  },
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'sekundę',
      future: 'sekundę'
    },
    twoFour: '{{count}} sekundy',
    other: '{{count}} sekund'
  },
  halfAMinute: {
    one: 'pół minuty',
    twoFour: 'pół minuty',
    other: 'pół minuty'
  },
  lessThanXMinutes: {
    one: {
      regular: 'mniej niż minuta',
      past: 'mniej niż minutę',
      future: 'mniej niż minutę'
    },
    twoFour: 'mniej niż {{count}} minuty',
    other: 'mniej niż {{count}} minut'
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'minutę',
      future: 'minutę'
    },
    twoFour: '{{count}} minuty',
    other: '{{count}} minut'
  },
  aboutXHours: {
    one: {
      regular: 'około godziny',
      past: 'około godziny',
      future: 'około godzinę'
    },
    twoFour: 'około {{count}} godziny',
    other: 'około {{count}} godzin'
  },
  xHours: {
    one: {
      regular: 'godzina',
      past: 'godzinę',
      future: 'godzinę'
    },
    twoFour: '{{count}} godziny',
    other: '{{count}} godzin'
  },
  xDays: {
    one: {
      regular: 'dzień',
      past: 'dzień',
      future: '1 dzień'
    },
    twoFour: '{{count}} dni',
    other: '{{count}} dni'
  },
  aboutXWeeks: {
    one: 'około tygodnia',
    twoFour: 'około {{count}} tygodni',
    other: 'około {{count}} tygodni'
  },
  xWeeks: {
    one: 'tydzień',
    twoFour: '{{count}} tygodnie',
    other: '{{count}} tygodni'
  },
  aboutXMonths: {
    one: 'około miesiąc',
    twoFour: 'około {{count}} miesiące',
    other: 'około {{count}} miesięcy'
  },
  xMonths: {
    one: 'miesiąc',
    twoFour: '{{count}} miesiące',
    other: '{{count}} miesięcy'
  },
  aboutXYears: {
    one: 'około rok',
    twoFour: 'około {{count}} lata',
    other: 'około {{count}} lat'
  },
  xYears: {
    one: 'rok',
    twoFour: '{{count}} lata',
    other: '{{count}} lat'
  },
  overXYears: {
    one: 'ponad rok',
    twoFour: 'ponad {{count}} lata',
    other: 'ponad {{count}} lat'
  },
  almostXYears: {
    one: 'prawie rok',
    twoFour: 'prawie {{count}} lata',
    other: 'prawie {{count}} lat'
  }
};
function declensionGroup$1(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }
  var rem100 = count % 100;

  // ends with 11-20
  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }
  var rem10 = rem100 % 10;

  // ends with 2, 3, 4
  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }
  return scheme.other;
}
function declension$3(scheme, count, time) {
  var group = declensionGroup$1(scheme, count);
  var finalText = typeof group === 'string' ? group : group[time];
  return finalText.replace('{{count}}', String(count));
}
var formatDistance$I = function formatDistance(token, count, options) {
  var scheme = formatDistanceLocale$m[token];
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return declension$3(scheme, count, 'regular');
  }
  if (options.comparison && options.comparison > 0) {
    return 'za ' + declension$3(scheme, count, 'future');
  } else {
    return declension$3(scheme, count, 'past') + ' temu';
  }
};
var formatDistance$J = formatDistance$I;

var dateFormats$m = {
  full: 'EEEE, do MMMM y',
  long: 'do MMMM y',
  medium: 'do MMM y',
  short: 'dd.MM.y'
};
var timeFormats$m = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$m = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$I = {
  date: buildFormatLongFn({
    formats: dateFormats$m,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$m,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$m,
    defaultWidth: 'full'
  })
};
var formatLong$J = formatLong$I;

var adjectivesLastWeek = {
  masculine: 'ostatni',
  feminine: 'ostatnia'
};
var adjectivesThisWeek = {
  masculine: 'ten',
  feminine: 'ta'
};
var adjectivesNextWeek = {
  masculine: 'następny',
  feminine: 'następna'
};
var dayGrammaticalGender = {
  0: 'feminine',
  1: 'masculine',
  2: 'masculine',
  3: 'feminine',
  4: 'masculine',
  5: 'masculine',
  6: 'feminine'
};
function dayAndTimeWithAdjective(token, date, baseDate, options) {
  var adjectives;
  if (isSameUTCWeek(date, baseDate, options)) {
    adjectives = adjectivesThisWeek;
  } else if (token === 'lastWeek') {
    adjectives = adjectivesLastWeek;
  } else if (token === 'nextWeek') {
    adjectives = adjectivesNextWeek;
  } else {
    throw new Error("Cannot determine adjectives for token ".concat(token));
  }
  var day = date.getUTCDay();
  var grammaticalGender = dayGrammaticalGender[day];
  var adjective = adjectives[grammaticalGender];
  return "'".concat(adjective, "' eeee 'o' p");
}
var formatRelativeLocale$m = {
  lastWeek: dayAndTimeWithAdjective,
  yesterday: "'wczoraj o' p",
  today: "'dzisiaj o' p",
  tomorrow: "'jutro o' p",
  nextWeek: dayAndTimeWithAdjective,
  other: 'P'
};
var formatRelative$I = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$m[token];
  if (typeof format === 'function') {
    return format(token, date, baseDate, options);
  }
  return format;
};
var formatRelative$J = formatRelative$I;

var eraValues$m = {
  narrow: ['p.n.e.', 'n.e.'],
  abbreviated: ['p.n.e.', 'n.e.'],
  wide: ['przed naszą erą', 'naszej ery']
};
var quarterValues$m = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I kw.', 'II kw.', 'III kw.', 'IV kw.'],
  wide: ['I kwartał', 'II kwartał', 'III kwartał', 'IV kwartał']
};
var monthValues$m = {
  narrow: ['S', 'L', 'M', 'K', 'M', 'C', 'L', 'S', 'W', 'P', 'L', 'G'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
  wide: ['styczeń', 'luty', 'marzec', 'kwiecień', 'maj', 'czerwiec', 'lipiec', 'sierpień', 'wrzesień', 'październik', 'listopad', 'grudzień']
};
var monthFormattingValues = {
  narrow: ['s', 'l', 'm', 'k', 'm', 'c', 'l', 's', 'w', 'p', 'l', 'g'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
  wide: ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'września', 'października', 'listopada', 'grudnia']
};
var dayValues$m = {
  narrow: ['N', 'P', 'W', 'Ś', 'C', 'P', 'S'],
  short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
};
var dayFormattingValues = {
  narrow: ['n', 'p', 'w', 'ś', 'c', 'p', 's'],
  short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
};
var dayPeriodValues$m = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'półn.',
    noon: 'poł',
    morning: 'rano',
    afternoon: 'popoł.',
    evening: 'wiecz.',
    night: 'noc'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'północ',
    noon: 'południe',
    morning: 'rano',
    afternoon: 'popołudnie',
    evening: 'wieczór',
    night: 'noc'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'północ',
    noon: 'południe',
    morning: 'rano',
    afternoon: 'popołudnie',
    evening: 'wieczór',
    night: 'noc'
  }
};
var dayPeriodFormattingValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'o półn.',
    noon: 'w poł.',
    morning: 'rano',
    afternoon: 'po poł.',
    evening: 'wiecz.',
    night: 'w nocy'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o północy',
    noon: 'w południe',
    morning: 'rano',
    afternoon: 'po południu',
    evening: 'wieczorem',
    night: 'w nocy'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o północy',
    noon: 'w południe',
    morning: 'rano',
    afternoon: 'po południu',
    evening: 'wieczorem',
    night: 'w nocy'
  }
};
var ordinalNumber$m = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$I = {
  ordinalNumber: ordinalNumber$m,
  era: buildLocalizeFn({
    values: eraValues$m,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$m,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$m,
    defaultWidth: 'wide',
    formattingValues: monthFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$m,
    defaultWidth: 'wide',
    formattingValues: dayFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$m,
    defaultWidth: 'wide',
    formattingValues: dayPeriodFormattingValues,
    defaultFormattingWidth: 'wide'
  })
};
var localize$J = localize$I;

var matchOrdinalNumberPattern$m = /^(\d+)?/i;
var parseOrdinalNumberPattern$m = /\d+/i;
var matchEraPatterns$m = {
  narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  wide: /^(przed\s*nasz(ą|a)\s*er(ą|a)|naszej\s*ery)/i
};
var parseEraPatterns$m = {
  any: [/^p/i, /^n/i]
};
var matchQuarterPatterns$m = {
  narrow: /^[1234]/i,
  abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
  wide: /^(I|II|III|IV)\s*kwarta(ł|l)/i
};
var parseQuarterPatterns$m = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
};
var matchMonthPatterns$m = {
  narrow: /^[slmkcwpg]/i,
  abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(ź|z)|lis|gru)/i,
  wide: /^(stycznia|stycze(ń|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(ń|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(ń|n)|wrze(ś|s)nia|wrzesie(ń|n)|pa(ź|z)dziernika|pa(ź|z)dziernik|listopada|listopad|grudnia|grudzie(ń|n))/i
};
var parseMonthPatterns$m = {
  narrow: [/^s/i, /^l/i, /^m/i, /^k/i, /^m/i, /^c/i, /^l/i, /^s/i, /^w/i, /^p/i, /^l/i, /^g/i],
  any: [/^st/i, /^lu/i, /^mar/i, /^k/i, /^maj/i, /^c/i, /^lip/i, /^si/i, /^w/i, /^p/i, /^lis/i, /^g/i]
};
var matchDayPatterns$m = {
  narrow: /^[npwścs]/i,
  short: /^(nie|pon|wto|(ś|s)ro|czw|pi(ą|a)|sob)/i,
  abbreviated: /^(niedz|pon|wt|(ś|s)r|czw|pt|sob)\.?/i,
  wide: /^(niedziela|poniedzia(ł|l)ek|wtorek|(ś|s)roda|czwartek|pi(ą|a)tek|sobota)/i
};
var parseDayPatterns$m = {
  narrow: [/^n/i, /^p/i, /^w/i, /^ś/i, /^c/i, /^p/i, /^s/i],
  abbreviated: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pt/i, /^so/i],
  any: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pi/i, /^so/i]
};
var matchDayPeriodPatterns$m = {
  narrow: /^(^a$|^p$|pó(ł|l)n\.?|o\s*pó(ł|l)n\.?|po(ł|l)\.?|w\s*po(ł|l)\.?|po\s*po(ł|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
  any: /^(am|pm|pó(ł|l)noc|o\s*pó(ł|l)nocy|po(ł|l)udnie|w\s*po(ł|l)udnie|popo(ł|l)udnie|po\s*po(ł|l)udniu|rano|wieczór|wieczorem|noc|w\s*nocy)/i
};
var parseDayPeriodPatterns$m = {
  narrow: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  },
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  }
};
var match$I = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$m,
    parsePattern: parseOrdinalNumberPattern$m,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$m,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$m,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$m,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$m,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$m,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$m,
    defaultParseWidth: 'any'
  })
};
var match$J = match$I;

/**
 * @type {Locale}
 * @category Locales
 * @summary Polish locale.
 * @language Polish
 * @iso-639-2 pol
 * @author Mateusz Derks [@ertrzyiks]{@link https://github.com/ertrzyiks}
 * @author Just RAG [@justrag]{@link https://github.com/justrag}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Mateusz Tokarski [@mutisz]{@link https://github.com/mutisz}
 */
var locale$J = {
  code: 'pl',
  formatDistance: formatDistance$J,
  formatLong: formatLong$J,
  formatRelative: formatRelative$J,
  localize: localize$J,
  match: match$J,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$K = locale$J;

var formatDistanceLocale$l = {
  lessThanXSeconds: {
    one: 'menos de um segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'meio minuto',
  lessThanXMinutes: {
    one: 'menos de um minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'aproximadamente 1 hora',
    other: 'aproximadamente {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dias'
  },
  aboutXWeeks: {
    one: 'aproximadamente 1 semana',
    other: 'aproximadamente {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'aproximadamente 1 mês',
    other: 'aproximadamente {{count}} meses'
  },
  xMonths: {
    one: '1 mês',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'aproximadamente 1 ano',
    other: 'aproximadamente {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'mais de 1 ano',
    other: 'mais de {{count}} anos'
  },
  almostXYears: {
    one: 'quase 1 ano',
    other: 'quase {{count}} anos'
  }
};
var formatDistance$G = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$l[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'daqui a ' + result;
    } else {
      return 'há ' + result;
    }
  }
  return result;
};
var formatDistance$H = formatDistance$G;

var dateFormats$l = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d 'de' MMM 'de' y",
  short: 'dd/MM/y'
};
var timeFormats$l = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$l = {
  full: "{{date}} 'às' {{time}}",
  long: "{{date}} 'às' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$G = {
  date: buildFormatLongFn({
    formats: dateFormats$l,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$l,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$l,
    defaultWidth: 'full'
  })
};
var formatLong$H = formatLong$G;

var formatRelativeLocale$l = {
  lastWeek: function lastWeek(date) {
    var weekday = date.getUTCDay();
    var last = weekday === 0 || weekday === 6 ? 'último' : 'última';
    return "'" + last + "' eeee 'às' p";
  },
  yesterday: "'ontem às' p",
  today: "'hoje às' p",
  tomorrow: "'amanhã às' p",
  nextWeek: "eeee 'às' p",
  other: 'P'
};
var formatRelative$G = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$l[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$H = formatRelative$G;

var eraValues$l = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a.C.', 'd.C.'],
  wide: ['antes de Cristo', 'depois de Cristo']
};
var quarterValues$l = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$l = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
  wide: ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
};
var dayValues$l = {
  narrow: ['d', 's', 't', 'q', 'q', 's', 's'],
  short: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'],
  abbreviated: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'],
  wide: ['domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado']
};
var dayPeriodValues$l = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  }
};
var formattingDayPeriodValues$l = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  }
};
var ordinalNumber$l = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'º';
};
var localize$G = {
  ordinalNumber: ordinalNumber$l,
  era: buildLocalizeFn({
    values: eraValues$l,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$l,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$l,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$l,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$l,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$l,
    defaultFormattingWidth: 'wide'
  })
};
var localize$H = localize$G;

var matchOrdinalNumberPattern$l = /^(\d+)(º|ª)?/i;
var parseOrdinalNumberPattern$l = /\d+/i;
var matchEraPatterns$l = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
};
var parseEraPatterns$l = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes da era comum)/i, /^(depois de cristo|era comum)/i]
};
var matchQuarterPatterns$l = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º|ª)? trimestre/i
};
var parseQuarterPatterns$l = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$l = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var parseMonthPatterns$l = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ab/i, /^mai/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$l = {
  narrow: /^[dstq]/i,
  short: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
  wide: /^(domingo|segunda-?\s?feira|terça-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[áa]bado)/i
};
var parseDayPatterns$l = {
  narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[áa]/i]
};
var matchDayPeriodPatterns$l = {
  narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i,
  any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i
};
var parseDayPeriodPatterns$l = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^meia/i,
    noon: /^meio/i,
    morning: /manh[ãa]/i,
    afternoon: /tarde/i,
    evening: /noite/i,
    night: /madrugada/i
  }
};
var match$G = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$l,
    parsePattern: parseOrdinalNumberPattern$l,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$l,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$l,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$l,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$l,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$l,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$l,
    defaultParseWidth: 'any'
  })
};
var match$H = match$G;

/**
 * @type {Locale}
 * @category Locales
 * @summary Portuguese locale.
 * @language Portuguese
 * @iso-639-2 por
 * @author Dário Freire [@dfreire]{@link https://github.com/dfreire}
 * @author Adrián de la Rosa [@adrm]{@link https://github.com/adrm}
 */
var locale$H = {
  code: 'pt',
  formatDistance: formatDistance$H,
  formatLong: formatLong$H,
  formatRelative: formatRelative$H,
  localize: localize$H,
  match: match$H,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$I = locale$H;

var formatDistanceLocale$k = {
  lessThanXSeconds: {
    one: 'menos de um segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'meio minuto',
  lessThanXMinutes: {
    one: 'menos de um minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'cerca de 1 hora',
    other: 'cerca de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dias'
  },
  aboutXWeeks: {
    one: 'cerca de 1 semana',
    other: 'cerca de {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'cerca de 1 mês',
    other: 'cerca de {{count}} meses'
  },
  xMonths: {
    one: '1 mês',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'cerca de 1 ano',
    other: 'cerca de {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'mais de 1 ano',
    other: 'mais de {{count}} anos'
  },
  almostXYears: {
    one: 'quase 1 ano',
    other: 'quase {{count}} anos'
  }
};
var formatDistance$E = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$k[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'em ' + result;
    } else {
      return 'há ' + result;
    }
  }
  return result;
};
var formatDistance$F = formatDistance$E;

var dateFormats$k = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var timeFormats$k = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$k = {
  full: "{{date}} 'às' {{time}}",
  long: "{{date}} 'às' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$E = {
  date: buildFormatLongFn({
    formats: dateFormats$k,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$k,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$k,
    defaultWidth: 'full'
  })
};
var formatLong$F = formatLong$E;

var formatRelativeLocale$k = {
  lastWeek: function lastWeek(date) {
    var weekday = date.getUTCDay();
    var last = weekday === 0 || weekday === 6 ? 'último' : 'última';
    return "'" + last + "' eeee 'às' p";
  },
  yesterday: "'ontem às' p",
  today: "'hoje às' p",
  tomorrow: "'amanhã às' p",
  nextWeek: "eeee 'às' p",
  other: 'P'
};
var formatRelative$E = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$k[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$F = formatRelative$E;

var eraValues$k = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'depois de cristo']
};
var quarterValues$k = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$k = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
  wide: ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
};
var dayValues$k = {
  narrow: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
  short: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sab'],
  abbreviated: ['domingo', 'segunda', 'terça', 'quarta', 'quinta', 'sexta', 'sábado'],
  wide: ['domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado']
};
var dayPeriodValues$k = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  }
};
var formattingDayPeriodValues$k = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  }
};
var ordinalNumber$k = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if ((options === null || options === void 0 ? void 0 : options.unit) === 'week') {
    return number + 'ª';
  }
  return number + 'º';
};
var localize$E = {
  ordinalNumber: ordinalNumber$k,
  era: buildLocalizeFn({
    values: eraValues$k,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$k,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$k,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$k,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$k,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$k,
    defaultFormattingWidth: 'wide'
  })
};
var localize$F = localize$E;

var matchOrdinalNumberPattern$k = /^(\d+)[ºªo]?/i;
var parseOrdinalNumberPattern$k = /\d+/i;
var matchEraPatterns$k = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
  wide: /^(antes de cristo|depois de cristo)/i
};
var parseEraPatterns$k = {
  any: [/^ac/i, /^dc/i],
  wide: [/^antes de cristo/i, /^depois de cristo/i]
};
var matchQuarterPatterns$k = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns$k = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$k = {
  narrow: /^[jfmajsond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var parseMonthPatterns$k = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^fev/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dez/i]
};
var matchDayPatterns$k = {
  narrow: /^(dom|[23456]ª?|s[aá]b)/i,
  short: /^(dom|[23456]ª?|s[aá]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aá]b)/i,
  wide: /^(domingo|(segunda|ter[cç]a|quarta|quinta|sexta)([- ]feira)?|s[aá]bado)/i
};
var parseDayPatterns$k = {
  short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[aá]b/i]
};
var matchDayPeriodPatterns$k = {
  narrow: /^(a|p|mn|md|(da) (manhã|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhã|tarde|noite))/i
};
var parseDayPeriodPatterns$k = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn|^meia[-\s]noite/i,
    noon: /^md|^meio[-\s]dia/i,
    morning: /manhã/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noite/i
  }
};
var match$E = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$k,
    parsePattern: parseOrdinalNumberPattern$k,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$k,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$k,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$k,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$k,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$k,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$k,
    defaultParseWidth: 'any'
  })
};
var match$F = match$E;

/**
 * @type {Locale}
 * @category Locales
 * @summary Portuguese locale (Brazil).
 * @language Portuguese
 * @iso-639-2 por
 * @author Lucas Duailibe [@duailibe]{@link https://github.com/duailibe}
 * @author Yago Carballo [@yagocarballo]{@link https://github.com/YagoCarballo}
 */
var locale$F = {
  code: 'pt-BR',
  formatDistance: formatDistance$F,
  formatLong: formatLong$F,
  formatRelative: formatRelative$F,
  localize: localize$F,
  match: match$F,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$G = locale$F;

var formatDistanceLocale$j = {
  lessThanXSeconds: {
    one: 'mai puțin de o secundă',
    other: 'mai puțin de {{count}} secunde'
  },
  xSeconds: {
    one: '1 secundă',
    other: '{{count}} secunde'
  },
  halfAMinute: 'jumătate de minut',
  lessThanXMinutes: {
    one: 'mai puțin de un minut',
    other: 'mai puțin de {{count}} minute'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minute'
  },
  aboutXHours: {
    one: 'circa 1 oră',
    other: 'circa {{count}} ore'
  },
  xHours: {
    one: '1 oră',
    other: '{{count}} ore'
  },
  xDays: {
    one: '1 zi',
    other: '{{count}} zile'
  },
  aboutXWeeks: {
    one: 'circa o săptămână',
    other: 'circa {{count}} săptămâni'
  },
  xWeeks: {
    one: '1 săptămână',
    other: '{{count}} săptămâni'
  },
  aboutXMonths: {
    one: 'circa 1 lună',
    other: 'circa {{count}} luni'
  },
  xMonths: {
    one: '1 lună',
    other: '{{count}} luni'
  },
  aboutXYears: {
    one: 'circa 1 an',
    other: 'circa {{count}} ani'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ani'
  },
  overXYears: {
    one: 'peste 1 an',
    other: 'peste {{count}} ani'
  },
  almostXYears: {
    one: 'aproape 1 an',
    other: 'aproape {{count}} ani'
  }
};
var formatDistance$C = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$j[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'în ' + result;
    } else {
      return result + ' în urmă';
    }
  }
  return result;
};
var formatDistance$D = formatDistance$C;

var dateFormats$j = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd.MM.yyyy'
};
var timeFormats$j = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$j = {
  full: "{{date}} 'la' {{time}}",
  long: "{{date}} 'la' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$C = {
  date: buildFormatLongFn({
    formats: dateFormats$j,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$j,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$j,
    defaultWidth: 'full'
  })
};
var formatLong$D = formatLong$C;

var formatRelativeLocale$j = {
  lastWeek: "eeee 'trecută la' p",
  yesterday: "'ieri la' p",
  today: "'astăzi la' p",
  tomorrow: "'mâine la' p",
  nextWeek: "eeee 'viitoare la' p",
  other: 'P'
};
var formatRelative$C = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$j[token];
};
var formatRelative$D = formatRelative$C;

var eraValues$j = {
  narrow: ['Î', 'D'],
  abbreviated: ['Î.d.C.', 'D.C.'],
  wide: ['Înainte de Cristos', 'După Cristos']
};
var quarterValues$j = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['primul trimestru', 'al doilea trimestru', 'al treilea trimestru', 'al patrulea trimestru']
};
var monthValues$j = {
  narrow: ['I', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['ian', 'feb', 'mar', 'apr', 'mai', 'iun', 'iul', 'aug', 'sep', 'oct', 'noi', 'dec'],
  wide: ['ianuarie', 'februarie', 'martie', 'aprilie', 'mai', 'iunie', 'iulie', 'august', 'septembrie', 'octombrie', 'noiembrie', 'decembrie']
};
var dayValues$j = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['du', 'lu', 'ma', 'mi', 'jo', 'vi', 'sâ'],
  abbreviated: ['dum', 'lun', 'mar', 'mie', 'joi', 'vin', 'sâm'],
  wide: ['duminică', 'luni', 'marți', 'miercuri', 'joi', 'vineri', 'sâmbătă']
};
var dayPeriodValues$j = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'ami',
    morning: 'dim',
    afternoon: 'da',
    evening: 's',
    night: 'n'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  }
};
var formattingDayPeriodValues$j = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  }
};
var ordinalNumber$j = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$C = {
  ordinalNumber: ordinalNumber$j,
  era: buildLocalizeFn({
    values: eraValues$j,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$j,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$j,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$j,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$j,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$j,
    defaultFormattingWidth: 'wide'
  })
};
var localize$D = localize$C;

var matchOrdinalNumberPattern$j = /^(\d+)?/i;
var parseOrdinalNumberPattern$j = /\d+/i;
var matchEraPatterns$j = {
  narrow: /^(Î|D)/i,
  abbreviated: /^(Î\.?\s?d\.?\s?C\.?|Î\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
  wide: /^(Înainte de Cristos|Înaintea erei noastre|După Cristos|Era noastră)/i
};
var parseEraPatterns$j = {
  any: [/^ÎC/i, /^DC/i],
  wide: [/^(Înainte de Cristos|Înaintea erei noastre)/i, /^(După Cristos|Era noastră)/i]
};
var matchQuarterPatterns$j = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^trimestrul [1234]/i
};
var parseQuarterPatterns$j = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$j = {
  narrow: /^[ifmaasond]/i,
  abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
  wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
};
var parseMonthPatterns$j = {
  narrow: [/^i/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ia/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^iun/i, /^iul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$j = {
  narrow: /^[dlmjvs]/i,
  short: /^(d|l|ma|mi|j|v|s)/i,
  abbreviated: /^(dum|lun|mar|mie|jo|vi|sâ)/i,
  wide: /^(duminica|luni|marţi|miercuri|joi|vineri|sâmbătă)/i
};
var parseDayPatterns$j = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i]
};
var matchDayPeriodPatterns$j = {
  narrow: /^(a|p|mn|a|(dimineaţa|după-amiaza|seara|noaptea))/i,
  any: /^([ap]\.?\s?m\.?|miezul nopții|amiaza|(dimineaţa|după-amiaza|seara|noaptea))/i
};
var parseDayPeriodPatterns$j = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /amiaza/i,
    morning: /dimineaţa/i,
    afternoon: /după-amiaza/i,
    evening: /seara/i,
    night: /noaptea/i
  }
};
var match$C = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$j,
    parsePattern: parseOrdinalNumberPattern$j,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$j,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$j,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$j,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$j,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$j,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$j,
    defaultParseWidth: 'any'
  })
};
var match$D = match$C;

/**
 * @type {Locale}
 * @category Locales
 * @summary Romanian locale.
 * @language Romanian
 * @iso-639-2 ron
 * @author Sergiu Munteanu [@jsergiu]{@link https://github.com/jsergiu}
 * @author Adrian Ocneanu [@aocneanu]{@link https://github.com/aocneanu}
 * @author Mihai Ocneanu [@gandesc]{@link https://github.com/gandesc}
 */
var locale$D = {
  code: 'ro',
  formatDistance: formatDistance$D,
  formatLong: formatLong$D,
  formatRelative: formatRelative$D,
  localize: localize$D,
  match: match$D,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$E = locale$D;

function declension$2(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function buildLocalizeTokenFn$1(scheme) {
  return function (count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension$2(scheme.future, count);
        } else {
          return 'через ' + declension$2(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$2(scheme.past, count);
        } else {
          return declension$2(scheme.regular, count) + ' назад';
        }
      }
    } else {
      return declension$2(scheme.regular, count);
    }
  };
}
var formatDistanceLocale$i = {
  lessThanXSeconds: buildLocalizeTokenFn$1({
    regular: {
      one: 'меньше секунды',
      singularNominative: 'меньше {{count}} секунды',
      singularGenitive: 'меньше {{count}} секунд',
      pluralGenitive: 'меньше {{count}} секунд'
    },
    future: {
      one: 'меньше, чем через секунду',
      singularNominative: 'меньше, чем через {{count}} секунду',
      singularGenitive: 'меньше, чем через {{count}} секунды',
      pluralGenitive: 'меньше, чем через {{count}} секунд'
    }
  }),
  xSeconds: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} секунда',
      singularGenitive: '{{count}} секунды',
      pluralGenitive: '{{count}} секунд'
    },
    past: {
      singularNominative: '{{count}} секунду назад',
      singularGenitive: '{{count}} секунды назад',
      pluralGenitive: '{{count}} секунд назад'
    },
    future: {
      singularNominative: 'через {{count}} секунду',
      singularGenitive: 'через {{count}} секунды',
      pluralGenitive: 'через {{count}} секунд'
    }
  }),
  halfAMinute: function halfAMinute(_count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return 'через полминуты';
      } else {
        return 'полминуты назад';
      }
    }
    return 'полминуты';
  },
  lessThanXMinutes: buildLocalizeTokenFn$1({
    regular: {
      one: 'меньше минуты',
      singularNominative: 'меньше {{count}} минуты',
      singularGenitive: 'меньше {{count}} минут',
      pluralGenitive: 'меньше {{count}} минут'
    },
    future: {
      one: 'меньше, чем через минуту',
      singularNominative: 'меньше, чем через {{count}} минуту',
      singularGenitive: 'меньше, чем через {{count}} минуты',
      pluralGenitive: 'меньше, чем через {{count}} минут'
    }
  }),
  xMinutes: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} минута',
      singularGenitive: '{{count}} минуты',
      pluralGenitive: '{{count}} минут'
    },
    past: {
      singularNominative: '{{count}} минуту назад',
      singularGenitive: '{{count}} минуты назад',
      pluralGenitive: '{{count}} минут назад'
    },
    future: {
      singularNominative: 'через {{count}} минуту',
      singularGenitive: 'через {{count}} минуты',
      pluralGenitive: 'через {{count}} минут'
    }
  }),
  aboutXHours: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'около {{count}} часа',
      singularGenitive: 'около {{count}} часов',
      pluralGenitive: 'около {{count}} часов'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} час',
      singularGenitive: 'приблизительно через {{count}} часа',
      pluralGenitive: 'приблизительно через {{count}} часов'
    }
  }),
  xHours: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} час',
      singularGenitive: '{{count}} часа',
      pluralGenitive: '{{count}} часов'
    }
  }),
  xDays: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} день',
      singularGenitive: '{{count}} дня',
      pluralGenitive: '{{count}} дней'
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'около {{count}} недели',
      singularGenitive: 'около {{count}} недель',
      pluralGenitive: 'около {{count}} недель'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} неделю',
      singularGenitive: 'приблизительно через {{count}} недели',
      pluralGenitive: 'приблизительно через {{count}} недель'
    }
  }),
  xWeeks: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} неделя',
      singularGenitive: '{{count}} недели',
      pluralGenitive: '{{count}} недель'
    }
  }),
  aboutXMonths: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'около {{count}} месяца',
      singularGenitive: 'около {{count}} месяцев',
      pluralGenitive: 'около {{count}} месяцев'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} месяц',
      singularGenitive: 'приблизительно через {{count}} месяца',
      pluralGenitive: 'приблизительно через {{count}} месяцев'
    }
  }),
  xMonths: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} месяц',
      singularGenitive: '{{count}} месяца',
      pluralGenitive: '{{count}} месяцев'
    }
  }),
  aboutXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'около {{count}} года',
      singularGenitive: 'около {{count}} лет',
      pluralGenitive: 'около {{count}} лет'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} год',
      singularGenitive: 'приблизительно через {{count}} года',
      pluralGenitive: 'приблизительно через {{count}} лет'
    }
  }),
  xYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} год',
      singularGenitive: '{{count}} года',
      pluralGenitive: '{{count}} лет'
    }
  }),
  overXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'больше {{count}} года',
      singularGenitive: 'больше {{count}} лет',
      pluralGenitive: 'больше {{count}} лет'
    },
    future: {
      singularNominative: 'больше, чем через {{count}} год',
      singularGenitive: 'больше, чем через {{count}} года',
      pluralGenitive: 'больше, чем через {{count}} лет'
    }
  }),
  almostXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'почти {{count}} год',
      singularGenitive: 'почти {{count}} года',
      pluralGenitive: 'почти {{count}} лет'
    },
    future: {
      singularNominative: 'почти через {{count}} год',
      singularGenitive: 'почти через {{count}} года',
      pluralGenitive: 'почти через {{count}} лет'
    }
  })
};
var formatDistance$A = function formatDistance(token, count, options) {
  return formatDistanceLocale$i[token](count, options);
};
var formatDistance$B = formatDistance$A;

var dateFormats$i = {
  full: "EEEE, d MMMM y 'г.'",
  long: "d MMMM y 'г.'",
  medium: "d MMM y 'г.'",
  short: 'dd.MM.y'
};
var timeFormats$i = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$i = {
  any: '{{date}}, {{time}}'
};
var formatLong$A = {
  date: buildFormatLongFn({
    formats: dateFormats$i,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$i,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$i,
    defaultWidth: 'any'
  })
};
var formatLong$B = formatLong$A;

var accusativeWeekdays$2 = ['воскресенье', 'понедельник', 'вторник', 'среду', 'четверг', 'пятницу', 'субботу'];
function _lastWeek$1(day) {
  var weekday = accusativeWeekdays$2[day];
  switch (day) {
    case 0:
      return "'в прошлое " + weekday + " в' p";
    case 1:
    case 2:
    case 4:
      return "'в прошлый " + weekday + " в' p";
    case 3:
    case 5:
    case 6:
      return "'в прошлую " + weekday + " в' p";
  }
}
function thisWeek$2(day) {
  var weekday = accusativeWeekdays$2[day];
  if (day === 2 /* Tue */) {
    return "'во " + weekday + " в' p";
  } else {
    return "'в " + weekday + " в' p";
  }
}
function _nextWeek$1(day) {
  var weekday = accusativeWeekdays$2[day];
  switch (day) {
    case 0:
      return "'в следующее " + weekday + " в' p";
    case 1:
    case 2:
    case 4:
      return "'в следующий " + weekday + " в' p";
    case 3:
    case 5:
    case 6:
      return "'в следующую " + weekday + " в' p";
  }
}
var formatRelativeLocale$i = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$2(day);
    } else {
      return _lastWeek$1(day);
    }
  },
  yesterday: "'вчера в' p",
  today: "'сегодня в' p",
  tomorrow: "'завтра в' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$2(day);
    } else {
      return _nextWeek$1(day);
    }
  },
  other: 'P'
};
var formatRelative$A = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$i[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$B = formatRelative$A;

var eraValues$i = {
  narrow: ['до н.э.', 'н.э.'],
  abbreviated: ['до н. э.', 'н. э.'],
  wide: ['до нашей эры', 'нашей эры']
};
var quarterValues$i = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-й кв.', '2-й кв.', '3-й кв.', '4-й кв.'],
  wide: ['1-й квартал', '2-й квартал', '3-й квартал', '4-й квартал']
};
var monthValues$i = {
  narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],
  abbreviated: ['янв.', 'фев.', 'март', 'апр.', 'май', 'июнь', 'июль', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],
  wide: ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
};
var formattingMonthValues$5 = {
  narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],
  abbreviated: ['янв.', 'фев.', 'мар.', 'апр.', 'мая', 'июн.', 'июл.', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],
  wide: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
};
var dayValues$i = {
  narrow: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С'],
  short: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
  abbreviated: ['вск', 'пнд', 'втр', 'срд', 'чтв', 'птн', 'суб'],
  wide: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота']
};
var dayPeriodValues$i = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утро',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ночь'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утро',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ночь'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полночь',
    noon: 'полдень',
    morning: 'утро',
    afternoon: 'день',
    evening: 'вечер',
    night: 'ночь'
  }
};
var formattingDayPeriodValues$i = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утра',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночи'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утра',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночи'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полночь',
    noon: 'полдень',
    morning: 'утра',
    afternoon: 'дня',
    evening: 'вечера',
    night: 'ночи'
  }
};
var ordinalNumber$i = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var suffix;
  if (unit === 'date') {
    suffix = '-е';
  } else if (unit === 'week' || unit === 'minute' || unit === 'second') {
    suffix = '-я';
  } else {
    suffix = '-й';
  }
  return number + suffix;
};
var localize$A = {
  ordinalNumber: ordinalNumber$i,
  era: buildLocalizeFn({
    values: eraValues$i,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$i,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$i,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$5,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$i,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$i,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$i,
    defaultFormattingWidth: 'wide'
  })
};
var localize$B = localize$A;

var matchOrdinalNumberPattern$i = /^(\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;
var parseOrdinalNumberPattern$i = /\d+/i;
var matchEraPatterns$i = {
  narrow: /^((до )?н\.?\s?э\.?)/i,
  abbreviated: /^((до )?н\.?\s?э\.?)/i,
  wide: /^(до нашей эры|нашей эры|наша эра)/i
};
var parseEraPatterns$i = {
  any: [/^д/i, /^н/i]
};
var matchQuarterPatterns$i = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,
  wide: /^[1234](-?[ыои]?й?)? квартал/i
};
var parseQuarterPatterns$i = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$i = {
  narrow: /^[яфмаисонд]/i,
  abbreviated: /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\.?/i,
  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i
};
var parseMonthPatterns$i = {
  narrow: [/^я/i, /^ф/i, /^м/i, /^а/i, /^м/i, /^и/i, /^и/i, /^а/i, /^с/i, /^о/i, /^н/i, /^я/i],
  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^ав/i, /^с/i, /^о/i, /^н/i, /^д/i]
};
var matchDayPatterns$i = {
  narrow: /^[впсч]/i,
  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\.?/i,
  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,
  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i
};
var parseDayPatterns$i = {
  narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
};
var matchDayPeriodPatterns$i = {
  narrow: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
  abbreviated: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
  wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i
};
var parseDayPeriodPatterns$i = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^полн/i,
    noon: /^полд/i,
    morning: /^у/i,
    afternoon: /^д[ен]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var match$A = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$i,
    parsePattern: parseOrdinalNumberPattern$i,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$i,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$i,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$i,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$i,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$i,
    defaultParseWidth: 'any'
  })
};
var match$B = match$A;

/**
 * @type {Locale}
 * @category Locales
 * @summary Russian locale.
 * @language Russian
 * @iso-639-2 rus
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale$B = {
  code: 'ru',
  formatDistance: formatDistance$B,
  formatLong: formatLong$B,
  formatRelative: formatRelative$B,
  localize: localize$B,
  match: match$B,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$C = locale$B;

function declensionGroup(scheme, count) {
  if (count === 1 && scheme.one) {
    return scheme.one;
  }
  if (count >= 2 && count <= 4 && scheme.twoFour) {
    return scheme.twoFour;
  }

  // if count === null || count === 0 || count >= 5
  return scheme.other;
}
function declension$1(scheme, count, time) {
  var group = declensionGroup(scheme, count);
  var finalText = group[time];
  return finalText.replace('{{count}}', String(count));
}
function extractPreposition(token) {
  var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {
    return !!token.match(new RegExp('^' + preposition));
  });
  return result[0];
}
function prefixPreposition(preposition) {
  var translation = '';
  if (preposition === 'almost') {
    translation = 'takmer';
  }
  if (preposition === 'about') {
    translation = 'približne';
  }
  return translation.length > 0 ? translation + ' ' : '';
}
function suffixPreposition(preposition) {
  var translation = '';
  if (preposition === 'lessThan') {
    translation = 'menej než';
  }
  if (preposition === 'over') {
    translation = 'viac než';
  }
  return translation.length > 0 ? translation + ' ' : '';
}
function lowercaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}
var formatDistanceLocale$h = {
  xSeconds: {
    one: {
      present: 'sekunda',
      past: 'sekundou',
      future: 'sekundu'
    },
    twoFour: {
      present: '{{count}} sekundy',
      past: '{{count}} sekundami',
      future: '{{count}} sekundy'
    },
    other: {
      present: '{{count}} sekúnd',
      past: '{{count}} sekundami',
      future: '{{count}} sekúnd'
    }
  },
  halfAMinute: {
    other: {
      present: 'pol minúty',
      past: 'pol minútou',
      future: 'pol minúty'
    }
  },
  xMinutes: {
    one: {
      present: 'minúta',
      past: 'minútou',
      future: 'minútu'
    },
    twoFour: {
      present: '{{count}} minúty',
      past: '{{count}} minútami',
      future: '{{count}} minúty'
    },
    other: {
      present: '{{count}} minút',
      past: '{{count}} minútami',
      future: '{{count}} minút'
    }
  },
  xHours: {
    one: {
      present: 'hodina',
      past: 'hodinou',
      future: 'hodinu'
    },
    twoFour: {
      present: '{{count}} hodiny',
      past: '{{count}} hodinami',
      future: '{{count}} hodiny'
    },
    other: {
      present: '{{count}} hodín',
      past: '{{count}} hodinami',
      future: '{{count}} hodín'
    }
  },
  xDays: {
    one: {
      present: 'deň',
      past: 'dňom',
      future: 'deň'
    },
    twoFour: {
      present: '{{count}} dni',
      past: '{{count}} dňami',
      future: '{{count}} dni'
    },
    other: {
      present: '{{count}} dní',
      past: '{{count}} dňami',
      future: '{{count}} dní'
    }
  },
  xWeeks: {
    one: {
      present: 'týždeň',
      past: 'týždňom',
      future: 'týždeň'
    },
    twoFour: {
      present: '{{count}} týždne',
      past: '{{count}} týždňami',
      future: '{{count}} týždne'
    },
    other: {
      present: '{{count}} týždňov',
      past: '{{count}} týždňami',
      future: '{{count}} týždňov'
    }
  },
  xMonths: {
    one: {
      present: 'mesiac',
      past: 'mesiacom',
      future: 'mesiac'
    },
    twoFour: {
      present: '{{count}} mesiace',
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiace'
    },
    other: {
      present: '{{count}} mesiacov',
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiacov'
    }
  },
  xYears: {
    one: {
      present: 'rok',
      past: 'rokom',
      future: 'rok'
    },
    twoFour: {
      present: '{{count}} roky',
      past: '{{count}} rokmi',
      future: '{{count}} roky'
    },
    other: {
      present: '{{count}} rokov',
      past: '{{count}} rokmi',
      future: '{{count}} rokov'
    }
  }
};
var formatDistance$y = function formatDistance(token, count, options) {
  var preposition = extractPreposition(token) || '';
  var key = lowercaseFirstLetter(token.substring(preposition.length));
  var scheme = formatDistanceLocale$h[key];
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return prefixPreposition(preposition) + suffixPreposition(preposition) + declension$1(scheme, count, 'present');
  }
  if (options.comparison && options.comparison > 0) {
    return prefixPreposition(preposition) + 'o ' + suffixPreposition(preposition) + declension$1(scheme, count, 'future');
  } else {
    return prefixPreposition(preposition) + 'pred ' + suffixPreposition(preposition) + declension$1(scheme, count, 'past');
  }
};
var formatDistance$z = formatDistance$y;

var dateFormats$h = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. M. y',
  short: 'd. M. y'
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#2149
var timeFormats$h = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1994
var dateTimeFormats$h = {
  full: '{{date}}, {{time}}',
  long: '{{date}}, {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$y = {
  date: buildFormatLongFn({
    formats: dateFormats$h,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$h,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$h,
    defaultWidth: 'full'
  })
};
var formatLong$z = formatLong$y;

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
var accusativeWeekdays$1 = ['nedeľu', 'pondelok', 'utorok', 'stredu', 'štvrtok', 'piatok', 'sobotu'];
function _lastWeek(day) {
  var weekday = accusativeWeekdays$1[day];
  switch (day) {
    case 0: /* Sun */
    case 3: /* Wed */
    case 6 /* Sat */:
      return "'minulú " + weekday + " o' p";
    default:
      return "'minulý' eeee 'o' p";
  }
}
function thisWeek$1(day) {
  var weekday = accusativeWeekdays$1[day];
  if (day === 4 /* Thu */) {
    return "'vo' eeee 'o' p";
  } else {
    return "'v " + weekday + " o' p";
  }
}
function _nextWeek(day) {
  var weekday = accusativeWeekdays$1[day];
  switch (day) {
    case 0: /* Sun */
    case 4: /* Wed */
    case 6 /* Sat */:
      return "'budúcu " + weekday + " o' p";
    default:
      return "'budúci' eeee 'o' p";
  }
}
var formatRelativeLocale$h = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$1(day);
    } else {
      return _lastWeek(day);
    }
  },
  yesterday: "'včera o' p",
  today: "'dnes o' p",
  tomorrow: "'zajtra o' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$1(day);
    } else {
      return _nextWeek(day);
    }
  },
  other: 'P'
};
var formatRelative$y = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$h[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$z = formatRelative$y;

var eraValues$h = {
  narrow: ['pred Kr.', 'po Kr.'],
  abbreviated: ['pred Kr.', 'po Kr.'],
  wide: ['pred Kristom', 'po Kristovi']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1780
var quarterValues$h = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. štvrťrok', '2. štvrťrok', '3. štvrťrok', '4. štvrťrok']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1804
var monthValues$h = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec'],
  wide: ['január', 'február', 'marec', 'apríl', 'máj', 'jún', 'júl', 'august', 'september', 'október', 'november', 'december']
};
var formattingMonthValues$4 = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januára', 'februára', 'marca', 'apríla', 'mája', 'júna', 'júla', 'augusta', 'septembra', 'októbra', 'novembra', 'decembra']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1876
var dayValues$h = {
  narrow: ['n', 'p', 'u', 's', 'š', 'p', 's'],
  short: ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so'],
  abbreviated: ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so'],
  wide: ['nedeľa', 'pondelok', 'utorok', 'streda', 'štvrtok', 'piatok', 'sobota']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1932
var dayPeriodValues$h = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'poln.',
    noon: 'pol.',
    morning: 'ráno',
    afternoon: 'pop.',
    evening: 'več.',
    night: 'noc'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'poln.',
    noon: 'pol.',
    morning: 'ráno',
    afternoon: 'popol.',
    evening: 'večer',
    night: 'noc'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'polnoc',
    noon: 'poludnie',
    morning: 'ráno',
    afternoon: 'popoludnie',
    evening: 'večer',
    night: 'noc'
  }
};
var formattingDayPeriodValues$h = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o poln.',
    noon: 'nap.',
    morning: 'ráno',
    afternoon: 'pop.',
    evening: 'več.',
    night: 'v n.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o poln.',
    noon: 'napol.',
    morning: 'ráno',
    afternoon: 'popol.',
    evening: 'večer',
    night: 'v noci'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o polnoci',
    noon: 'napoludnie',
    morning: 'ráno',
    afternoon: 'popoludní',
    evening: 'večer',
    night: 'v noci'
  }
};
var ordinalNumber$h = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$y = {
  ordinalNumber: ordinalNumber$h,
  era: buildLocalizeFn({
    values: eraValues$h,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$h,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$h,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$4,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$h,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$h,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$h,
    defaultFormattingWidth: 'wide'
  })
};
var localize$z = localize$y;

var matchOrdinalNumberPattern$h = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$h = /\d+/i;
var matchEraPatterns$h = {
  narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(pred Kristom|pred na[šs][íi]m letopo[čc]tom|po Kristovi|n[áa][šs]ho letopo[čc]tu)/i
};
var parseEraPatterns$h = {
  any: [/^pr/i, /^(po|n)/i]
};
var matchQuarterPatterns$h = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\. [šs]tvr[ťt]rok/i
};
var parseQuarterPatterns$h = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$h = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|m[áa]j|j[úu]n|j[úu]l|aug|sep|okt|nov|dec)/i,
  wide: /^(janu[áa]ra?|febru[áa]ra?|(marec|marca)|apr[íi]la?|m[áa]ja?|j[úu]na?|j[úu]la?|augusta?|(september|septembra)|(okt[óo]ber|okt[óo]bra)|(november|novembra)|(december|decembra))/i
};
var parseMonthPatterns$h = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^m[áa]j/i, /^j[úu]n/i, /^j[úu]l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$h = {
  narrow: /^[npusšp]/i,
  short: /^(ne|po|ut|st|št|pi|so)/i,
  abbreviated: /^(ne|po|ut|st|št|pi|so)/i,
  wide: /^(nede[ľl]a|pondelok|utorok|streda|[šs]tvrtok|piatok|sobota])/i
};
var parseDayPatterns$h = {
  narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^š/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(št|stv)/i, /^pi/i, /^so/i]
};
var matchDayPeriodPatterns$h = {
  narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]\.?|(v n\.?|noc))/i,
  abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]er|(v )?noci?)/i,
  any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[áa]no|popoludn(ie|í|i)|ve[čc]er|(v )?noci?)/i
};
var parseDayPeriodPatterns$h = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /poln/i,
    noon: /^(nap|(na)?pol(\.|u))/i,
    morning: /^r[áa]no/i,
    afternoon: /^pop/i,
    evening: /^ve[čc]/i,
    night: /^(noc|v n\.)/i
  }
};
var match$y = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$h,
    parsePattern: parseOrdinalNumberPattern$h,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$h,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$h,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$h,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$h,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$h,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$h,
    defaultParseWidth: 'any'
  })
};
var match$z = match$y;

/**
 * @type {Locale}
 * @category Locales
 * @summary Slovak locale.
 * @language Slovak
 * @iso-639-2 slk
 * @author Marek Suscak [@mareksuscak]{@link https://github.com/mareksuscak}
 */
var locale$z = {
  code: 'sk',
  formatDistance: formatDistance$z,
  formatLong: formatLong$z,
  formatRelative: formatRelative$z,
  localize: localize$z,
  match: match$z,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$A = locale$z;

function isPluralType$1(val) {
  return val.one !== undefined;
}
var formatDistanceLocale$g = {
  lessThanXSeconds: {
    present: {
      one: 'manj kot {{count}} sekunda',
      two: 'manj kot {{count}} sekundi',
      few: 'manj kot {{count}} sekunde',
      other: 'manj kot {{count}} sekund'
    },
    past: {
      one: 'manj kot {{count}} sekundo',
      two: 'manj kot {{count}} sekundama',
      few: 'manj kot {{count}} sekundami',
      other: 'manj kot {{count}} sekundami'
    },
    future: {
      one: 'manj kot {{count}} sekundo',
      two: 'manj kot {{count}} sekundi',
      few: 'manj kot {{count}} sekunde',
      other: 'manj kot {{count}} sekund'
    }
  },
  xSeconds: {
    present: {
      one: '{{count}} sekunda',
      two: '{{count}} sekundi',
      few: '{{count}} sekunde',
      other: '{{count}} sekund'
    },
    past: {
      one: '{{count}} sekundo',
      two: '{{count}} sekundama',
      few: '{{count}} sekundami',
      other: '{{count}} sekundami'
    },
    future: {
      one: '{{count}} sekundo',
      two: '{{count}} sekundi',
      few: '{{count}} sekunde',
      other: '{{count}} sekund'
    }
  },
  halfAMinute: 'pol minute',
  lessThanXMinutes: {
    present: {
      one: 'manj kot {{count}} minuta',
      two: 'manj kot {{count}} minuti',
      few: 'manj kot {{count}} minute',
      other: 'manj kot {{count}} minut'
    },
    past: {
      one: 'manj kot {{count}} minuto',
      two: 'manj kot {{count}} minutama',
      few: 'manj kot {{count}} minutami',
      other: 'manj kot {{count}} minutami'
    },
    future: {
      one: 'manj kot {{count}} minuto',
      two: 'manj kot {{count}} minuti',
      few: 'manj kot {{count}} minute',
      other: 'manj kot {{count}} minut'
    }
  },
  xMinutes: {
    present: {
      one: '{{count}} minuta',
      two: '{{count}} minuti',
      few: '{{count}} minute',
      other: '{{count}} minut'
    },
    past: {
      one: '{{count}} minuto',
      two: '{{count}} minutama',
      few: '{{count}} minutami',
      other: '{{count}} minutami'
    },
    future: {
      one: '{{count}} minuto',
      two: '{{count}} minuti',
      few: '{{count}} minute',
      other: '{{count}} minut'
    }
  },
  aboutXHours: {
    present: {
      one: 'približno {{count}} ura',
      two: 'približno {{count}} uri',
      few: 'približno {{count}} ure',
      other: 'približno {{count}} ur'
    },
    past: {
      one: 'približno {{count}} uro',
      two: 'približno {{count}} urama',
      few: 'približno {{count}} urami',
      other: 'približno {{count}} urami'
    },
    future: {
      one: 'približno {{count}} uro',
      two: 'približno {{count}} uri',
      few: 'približno {{count}} ure',
      other: 'približno {{count}} ur'
    }
  },
  xHours: {
    present: {
      one: '{{count}} ura',
      two: '{{count}} uri',
      few: '{{count}} ure',
      other: '{{count}} ur'
    },
    past: {
      one: '{{count}} uro',
      two: '{{count}} urama',
      few: '{{count}} urami',
      other: '{{count}} urami'
    },
    future: {
      one: '{{count}} uro',
      two: '{{count}} uri',
      few: '{{count}} ure',
      other: '{{count}} ur'
    }
  },
  xDays: {
    present: {
      one: '{{count}} dan',
      two: '{{count}} dni',
      few: '{{count}} dni',
      other: '{{count}} dni'
    },
    past: {
      one: '{{count}} dnem',
      two: '{{count}} dnevoma',
      few: '{{count}} dnevi',
      other: '{{count}} dnevi'
    },
    future: {
      one: '{{count}} dan',
      two: '{{count}} dni',
      few: '{{count}} dni',
      other: '{{count}} dni'
    }
  },
  // no tenses for weeks?
  aboutXWeeks: {
    one: 'približno {{count}} teden',
    two: 'približno {{count}} tedna',
    few: 'približno {{count}} tedne',
    other: 'približno {{count}} tednov'
  },
  // no tenses for weeks?
  xWeeks: {
    one: '{{count}} teden',
    two: '{{count}} tedna',
    few: '{{count}} tedne',
    other: '{{count}} tednov'
  },
  aboutXMonths: {
    present: {
      one: 'približno {{count}} mesec',
      two: 'približno {{count}} meseca',
      few: 'približno {{count}} mesece',
      other: 'približno {{count}} mesecev'
    },
    past: {
      one: 'približno {{count}} mesecem',
      two: 'približno {{count}} mesecema',
      few: 'približno {{count}} meseci',
      other: 'približno {{count}} meseci'
    },
    future: {
      one: 'približno {{count}} mesec',
      two: 'približno {{count}} meseca',
      few: 'približno {{count}} mesece',
      other: 'približno {{count}} mesecev'
    }
  },
  xMonths: {
    present: {
      one: '{{count}} mesec',
      two: '{{count}} meseca',
      few: '{{count}} meseci',
      other: '{{count}} mesecev'
    },
    past: {
      one: '{{count}} mesecem',
      two: '{{count}} mesecema',
      few: '{{count}} meseci',
      other: '{{count}} meseci'
    },
    future: {
      one: '{{count}} mesec',
      two: '{{count}} meseca',
      few: '{{count}} mesece',
      other: '{{count}} mesecev'
    }
  },
  aboutXYears: {
    present: {
      one: 'približno {{count}} leto',
      two: 'približno {{count}} leti',
      few: 'približno {{count}} leta',
      other: 'približno {{count}} let'
    },
    past: {
      one: 'približno {{count}} letom',
      two: 'približno {{count}} letoma',
      few: 'približno {{count}} leti',
      other: 'približno {{count}} leti'
    },
    future: {
      one: 'približno {{count}} leto',
      two: 'približno {{count}} leti',
      few: 'približno {{count}} leta',
      other: 'približno {{count}} let'
    }
  },
  xYears: {
    present: {
      one: '{{count}} leto',
      two: '{{count}} leti',
      few: '{{count}} leta',
      other: '{{count}} let'
    },
    past: {
      one: '{{count}} letom',
      two: '{{count}} letoma',
      few: '{{count}} leti',
      other: '{{count}} leti'
    },
    future: {
      one: '{{count}} leto',
      two: '{{count}} leti',
      few: '{{count}} leta',
      other: '{{count}} let'
    }
  },
  overXYears: {
    present: {
      one: 'več kot {{count}} leto',
      two: 'več kot {{count}} leti',
      few: 'več kot {{count}} leta',
      other: 'več kot {{count}} let'
    },
    past: {
      one: 'več kot {{count}} letom',
      two: 'več kot {{count}} letoma',
      few: 'več kot {{count}} leti',
      other: 'več kot {{count}} leti'
    },
    future: {
      one: 'več kot {{count}} leto',
      two: 'več kot {{count}} leti',
      few: 'več kot {{count}} leta',
      other: 'več kot {{count}} let'
    }
  },
  almostXYears: {
    present: {
      one: 'skoraj {{count}} leto',
      two: 'skoraj {{count}} leti',
      few: 'skoraj {{count}} leta',
      other: 'skoraj {{count}} let'
    },
    past: {
      one: 'skoraj {{count}} letom',
      two: 'skoraj {{count}} letoma',
      few: 'skoraj {{count}} leti',
      other: 'skoraj {{count}} leti'
    },
    future: {
      one: 'skoraj {{count}} leto',
      two: 'skoraj {{count}} leti',
      few: 'skoraj {{count}} leta',
      other: 'skoraj {{count}} let'
    }
  }
};
function getFormFromCount(count) {
  switch (count % 100) {
    case 1:
      return 'one';
    case 2:
      return 'two';
    case 3:
    case 4:
      return 'few';
    default:
      return 'other';
  }
}
var formatDistance$w = function formatDistance(token, count, options) {
  var result = '';
  var tense = 'present';
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      tense = 'future';
      result = 'čez ';
    } else {
      tense = 'past';
      result = 'pred ';
    }
  }
  var tokenValue = formatDistanceLocale$g[token];
  if (typeof tokenValue === 'string') {
    result += tokenValue;
  } else {
    var form = getFormFromCount(count);
    if (isPluralType$1(tokenValue)) {
      result += tokenValue[form].replace('{{count}}', String(count));
    } else {
      result += tokenValue[tense][form].replace('{{count}}', String(count));
    }
  }
  return result;
};
var formatDistance$x = formatDistance$w;

var dateFormats$g = {
  full: 'EEEE, dd. MMMM y',
  long: 'dd. MMMM y',
  medium: 'd. MMM y',
  short: 'd. MM. yy'
};
var timeFormats$g = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$g = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$w = {
  date: buildFormatLongFn({
    formats: dateFormats$g,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$g,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$g,
    defaultWidth: 'full'
  })
};
var formatLong$x = formatLong$w;

var formatRelativeLocale$g = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'prejšnjo nedeljo ob' p";
      case 3:
        return "'prejšnjo sredo ob' p";
      case 6:
        return "'prejšnjo soboto ob' p";
      default:
        return "'prejšnji' EEEE 'ob' p";
    }
  },
  yesterday: "'včeraj ob' p",
  today: "'danes ob' p",
  tomorrow: "'jutri ob' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'naslednjo nedeljo ob' p";
      case 3:
        return "'naslednjo sredo ob' p";
      case 6:
        return "'naslednjo soboto ob' p";
      default:
        return "'naslednji' EEEE 'ob' p";
    }
  },
  other: 'P'
};
var formatRelative$w = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$g[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$x = formatRelative$w;

var eraValues$g = {
  narrow: ['pr. n. št.', 'po n. št.'],
  abbreviated: ['pr. n. št.', 'po n. št.'],
  wide: ['pred našim štetjem', 'po našem štetju']
};
var quarterValues$g = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. čet.', '2. čet.', '3. čet.', '4. čet.'],
  wide: ['1. četrtletje', '2. četrtletje', '3. četrtletje', '4. četrtletje']
};
var monthValues$g = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januar', 'februar', 'marec', 'april', 'maj', 'junij', 'julij', 'avgust', 'september', 'oktober', 'november', 'december']
};
var dayValues$g = {
  narrow: ['n', 'p', 't', 's', 'č', 'p', 's'],
  short: ['ned.', 'pon.', 'tor.', 'sre.', 'čet.', 'pet.', 'sob.'],
  abbreviated: ['ned.', 'pon.', 'tor.', 'sre.', 'čet.', 'pet.', 'sob.'],
  wide: ['nedelja', 'ponedeljek', 'torek', 'sreda', 'četrtek', 'petek', 'sobota']
};
var dayPeriodValues$g = {
  narrow: {
    am: 'd',
    pm: 'p',
    midnight: '24.00',
    noon: '12.00',
    morning: 'j',
    afternoon: 'p',
    evening: 'v',
    night: 'n'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'poln.',
    noon: 'pold.',
    morning: 'jut.',
    afternoon: 'pop.',
    evening: 'več.',
    night: 'noč'
  },
  wide: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'polnoč',
    noon: 'poldne',
    morning: 'jutro',
    afternoon: 'popoldne',
    evening: 'večer',
    night: 'noč'
  }
};
var formattingDayPeriodValues$g = {
  narrow: {
    am: 'd',
    pm: 'p',
    midnight: '24.00',
    noon: '12.00',
    morning: 'zj',
    afternoon: 'p',
    evening: 'zv',
    night: 'po'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'opoln.',
    noon: 'opold.',
    morning: 'zjut.',
    afternoon: 'pop.',
    evening: 'zveč.',
    night: 'ponoči'
  },
  wide: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'opolnoči',
    noon: 'opoldne',
    morning: 'zjutraj',
    afternoon: 'popoldan',
    evening: 'zvečer',
    night: 'ponoči'
  }
};
var ordinalNumber$g = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$w = {
  ordinalNumber: ordinalNumber$g,
  era: buildLocalizeFn({
    values: eraValues$g,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$g,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$g,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$g,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$g,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$g,
    defaultFormattingWidth: 'wide'
  })
};
var localize$x = localize$w;

var matchOrdinalNumberPattern$g = /^(\d+)\./i;
var parseOrdinalNumberPattern$g = /\d+/i;
var matchEraPatterns$g = {
  abbreviated: /^(pr\. n\. št\.|po n\. št\.)/i,
  wide: /^(pred Kristusom|pred na[sš]im [sš]tetjem|po Kristusu|po na[sš]em [sš]tetju|na[sš]ega [sš]tetja)/i
};
var parseEraPatterns$g = {
  any: [/^pr/i, /^(po|na[sš]em)/i]
};
var matchQuarterPatterns$g = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?[čc]et\.?/i,
  wide: /^[1234]\. [čc]etrtletje/i
};
var parseQuarterPatterns$g = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$g = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
  wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i
};
var parseMonthPatterns$g = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  abbreviated: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i],
  wide: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$g = {
  narrow: /^[nptsčc]/i,
  short: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
  abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
  wide: /^(nedelja|ponedeljek|torek|sreda|[cč]etrtek|petek|sobota)/i
};
var parseDayPatterns$g = {
  narrow: [/^n/i, /^p/i, /^t/i, /^s/i, /^[cč]/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^t/i, /^sr/i, /^[cč]/i, /^pe/i, /^so/i]
};
var matchDayPeriodPatterns$g = {
  narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
  any: /^(dop\.|pop\.|o?poln(\.|o[cč]i?)|o?pold(\.|ne)|z?ve[cč](\.|er)|(po)?no[cč]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i
};
var parseDayPeriodPatterns$g = {
  narrow: {
    am: /^d/i,
    pm: /^p/i,
    midnight: /^24/i,
    noon: /^12/i,
    morning: /^(z?j)/i,
    afternoon: /^p/i,
    evening: /^(z?v)/i,
    night: /^(n|po)/i
  },
  any: {
    am: /^dop\./i,
    pm: /^pop\./i,
    midnight: /^o?poln/i,
    noon: /^o?pold/i,
    morning: /j/i,
    afternoon: /^pop\./i,
    evening: /^z?ve/i,
    night: /(po)?no/i
  }
};
var match$w = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$g,
    parsePattern: parseOrdinalNumberPattern$g,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$g,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$g,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$g,
    defaultParseWidth: 'wide'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$g,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$g,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$g,
    defaultParseWidth: 'any'
  })
};
var match$x = match$w;

/**
 * @type {Locale}
 * @category Locales
 * @summary Slovenian locale.
 * @language Slovenian
 * @iso-639-2 slv
 * @author Adam Stradovnik [@Neoglyph]{@link https://github.com/Neoglyph}
 * @author Mato Žgajner [@mzgajner]{@link https://github.com/mzgajner}
 */
var locale$x = {
  code: 'sl',
  formatDistance: formatDistance$x,
  formatLong: formatLong$x,
  formatRelative: formatRelative$x,
  localize: localize$x,
  match: match$x,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$y = locale$x;

var formatDistanceLocale$f = {
  lessThanXSeconds: {
    one: 'më pak se një sekondë',
    other: 'më pak se {{count}} sekonda'
  },
  xSeconds: {
    one: '1 sekondë',
    other: '{{count}} sekonda'
  },
  halfAMinute: 'gjysëm minuti',
  lessThanXMinutes: {
    one: 'më pak se një minute',
    other: 'më pak se {{count}} minuta'
  },
  xMinutes: {
    one: '1 minutë',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: 'rreth 1 orë',
    other: 'rreth {{count}} orë'
  },
  xHours: {
    one: '1 orë',
    other: '{{count}} orë'
  },
  xDays: {
    one: '1 ditë',
    other: '{{count}} ditë'
  },
  aboutXWeeks: {
    one: 'rreth 1 javë',
    other: 'rreth {{count}} javë'
  },
  xWeeks: {
    one: '1 javë',
    other: '{{count}} javë'
  },
  aboutXMonths: {
    one: 'rreth 1 muaj',
    other: 'rreth {{count}} muaj'
  },
  xMonths: {
    one: '1 muaj',
    other: '{{count}} muaj'
  },
  aboutXYears: {
    one: 'rreth 1 vit',
    other: 'rreth {{count}} vite'
  },
  xYears: {
    one: '1 vit',
    other: '{{count}} vite'
  },
  overXYears: {
    one: 'mbi 1 vit',
    other: 'mbi {{count}} vite'
  },
  almostXYears: {
    one: 'pothuajse 1 vit',
    other: 'pothuajse {{count}} vite'
  }
};
var formatDistance$u = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$f[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'në ' + result;
    } else {
      return result + ' më parë';
    }
  }
  return result;
};
var formatDistance$v = formatDistance$u;

var dateFormats$f = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$f = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$f = {
  full: "{{date}} 'në' {{time}}",
  long: "{{date}} 'në' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$u = {
  date: buildFormatLongFn({
    formats: dateFormats$f,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$f,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$f,
    defaultWidth: 'full'
  })
};
var formatLong$v = formatLong$u;

var formatRelativeLocale$f = {
  lastWeek: "'të' eeee 'e shkuar në' p",
  yesterday: "'dje në' p",
  today: "'sot në' p",
  tomorrow: "'nesër në' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
var formatRelative$u = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$f[token];
};
var formatRelative$v = formatRelative$u;

var eraValues$f = {
  narrow: ['P', 'M'],
  abbreviated: ['PK', 'MK'],
  wide: ['Para Krishtit', 'Mbas Krishtit']
};
var quarterValues$f = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['4-mujori I', '4-mujori II', '4-mujori III', '4-mujori IV']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$f = {
  narrow: ['J', 'S', 'M', 'P', 'M', 'Q', 'K', 'G', 'S', 'T', 'N', 'D'],
  abbreviated: ['Jan', 'Shk', 'Mar', 'Pri', 'Maj', 'Qer', 'Kor', 'Gus', 'Sht', 'Tet', 'Nën', 'Dhj'],
  wide: ['Janar', 'Shkurt', 'Mars', 'Prill', 'Maj', 'Qershor', 'Korrik', 'Gusht', 'Shtator', 'Tetor', 'Nëntor', 'Dhjetor']
};
var dayValues$f = {
  narrow: ['D', 'H', 'M', 'M', 'E', 'P', 'S'],
  short: ['Di', 'Hë', 'Ma', 'Më', 'En', 'Pr', 'Sh'],
  abbreviated: ['Die', 'Hën', 'Mar', 'Mër', 'Enj', 'Pre', 'Sht'],
  wide: ['Dielë', 'Hënë', 'Martë', 'Mërkurë', 'Enjte', 'Premte', 'Shtunë']
};
var dayPeriodValues$f = {
  narrow: {
    am: 'p',
    pm: 'm',
    midnight: 'm',
    noon: 'd',
    morning: 'mëngjes',
    afternoon: 'dite',
    evening: 'mbrëmje',
    night: 'natë'
  },
  abbreviated: {
    am: 'PD',
    pm: 'MD',
    midnight: 'mesnëtë',
    noon: 'drek',
    morning: 'mëngjes',
    afternoon: 'mbasdite',
    evening: 'mbrëmje',
    night: 'natë'
  },
  wide: {
    am: 'p.d.',
    pm: 'm.d.',
    midnight: 'mesnëtë',
    noon: 'drek',
    morning: 'mëngjes',
    afternoon: 'mbasdite',
    evening: 'mbrëmje',
    night: 'natë'
  }
};
var formattingDayPeriodValues$f = {
  narrow: {
    am: 'p',
    pm: 'm',
    midnight: 'm',
    noon: 'd',
    morning: 'në mëngjes',
    afternoon: 'në mbasdite',
    evening: 'në mbrëmje',
    night: 'në mesnatë'
  },
  abbreviated: {
    am: 'PD',
    pm: 'MD',
    midnight: 'mesnatë',
    noon: 'drek',
    morning: 'në mëngjes',
    afternoon: 'në mbasdite',
    evening: 'në mbrëmje',
    night: 'në mesnatë'
  },
  wide: {
    am: 'p.d.',
    pm: 'm.d.',
    midnight: 'mesnatë',
    noon: 'drek',
    morning: 'në mëngjes',
    afternoon: 'në mbasdite',
    evening: 'në mbrëmje',
    night: 'në mesnatë'
  }
};
var ordinalNumber$f = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if ((options === null || options === void 0 ? void 0 : options.unit) === 'hour') return String(number);
  if (number === 1) return number + '-rë';
  if (number === 4) return number + 't';
  return number + '-të';
};
var localize$u = {
  ordinalNumber: ordinalNumber$f,
  era: buildLocalizeFn({
    values: eraValues$f,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$f,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$f,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$f,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$f,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$f,
    defaultFormattingWidth: 'wide'
  })
};
var localize$v = localize$u;

var matchOrdinalNumberPattern$f = /^(\d+)(-rë|-të|t|)?/i;
var parseOrdinalNumberPattern$f = /\d+/i;
var matchEraPatterns$f = {
  narrow: /^(p|m)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(para krishtit|mbas krishtit)/i
};
var parseEraPatterns$f = {
  any: [/^b/i, /^(p|m)/i]
};
var matchQuarterPatterns$f = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]-mujori (i{1,3}|iv)/i
};
var parseQuarterPatterns$f = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$f = {
  narrow: /^[jsmpqkftnd]/i,
  abbreviated: /^(jan|shk|mar|pri|maj|qer|kor|gus|sht|tet|nën|dhj)/i,
  wide: /^(janar|shkurt|mars|prill|maj|qershor|korrik|gusht|shtator|tetor|nëntor|dhjetor)/i
};
var parseMonthPatterns$f = {
  narrow: [/^j/i, /^s/i, /^m/i, /^p/i, /^m/i, /^q/i, /^k/i, /^g/i, /^s/i, /^t/i, /^n/i, /^d/i],
  any: [/^ja/i, /^shk/i, /^mar/i, /^pri/i, /^maj/i, /^qer/i, /^kor/i, /^gu/i, /^sht/i, /^tet/i, /^n/i, /^d/i]
};
var matchDayPatterns$f = {
  narrow: /^[dhmeps]/i,
  short: /^(di|hë|ma|më|en|pr|sh)/i,
  abbreviated: /^(die|hën|mar|mër|enj|pre|sht)/i,
  wide: /^(dielë|hënë|martë|mërkurë|enjte|premte|shtunë)/i
};
var parseDayPatterns$f = {
  narrow: [/^d/i, /^h/i, /^m/i, /^m/i, /^e/i, /^p/i, /^s/i],
  any: [/^d/i, /^h/i, /^ma/i, /^më/i, /^e/i, /^p/i, /^s/i]
};
var matchDayPeriodPatterns$f = {
  narrow: /^(p|m|me|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i,
  any: /^([pm]\.?\s?d\.?|drek|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i
};
var parseDayPeriodPatterns$f = {
  any: {
    am: /^p/i,
    pm: /^m/i,
    midnight: /^me/i,
    noon: /^dr/i,
    morning: /mëngjes/i,
    afternoon: /mbasdite/i,
    evening: /mbrëmje/i,
    night: /natë/i
  }
};
var match$u = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$f,
    parsePattern: parseOrdinalNumberPattern$f,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$f,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$f,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$f,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$f,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$f,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$f,
    defaultParseWidth: 'any'
  })
};
var match$v = match$u;

/**
 * @type {Locale}
 * @category Locales
 * @summary Albanian locale.
 * @language Shqip
 * @iso-639-2 sqi
 * @author Ardit Dine [@arditdine]{@link https://github.com/arditdine}
 */
var locale$v = {
  code: 'sq',
  formatDistance: formatDistance$v,
  formatLong: formatLong$v,
  formatRelative: formatRelative$v,
  localize: localize$v,
  match: match$v,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$w = locale$v;

var formatDistanceLocale$e = {
  lessThanXSeconds: {
    one: {
      standalone: 'мање од 1 секунде',
      withPrepositionAgo: 'мање од 1 секунде',
      withPrepositionIn: 'мање од 1 секунду'
    },
    dual: 'мање од {{count}} секунде',
    other: 'мање од {{count}} секунди'
  },
  xSeconds: {
    one: {
      standalone: '1 секунда',
      withPrepositionAgo: '1 секунде',
      withPrepositionIn: '1 секунду'
    },
    dual: '{{count}} секунде',
    other: '{{count}} секунди'
  },
  halfAMinute: 'пола минуте',
  lessThanXMinutes: {
    one: {
      standalone: 'мање од 1 минуте',
      withPrepositionAgo: 'мање од 1 минуте',
      withPrepositionIn: 'мање од 1 минуту'
    },
    dual: 'мање од {{count}} минуте',
    other: 'мање од {{count}} минута'
  },
  xMinutes: {
    one: {
      standalone: '1 минута',
      withPrepositionAgo: '1 минуте',
      withPrepositionIn: '1 минуту'
    },
    dual: '{{count}} минуте',
    other: '{{count}} минута'
  },
  aboutXHours: {
    one: {
      standalone: 'око 1 сат',
      withPrepositionAgo: 'око 1 сат',
      withPrepositionIn: 'око 1 сат'
    },
    dual: 'око {{count}} сата',
    other: 'око {{count}} сати'
  },
  xHours: {
    one: {
      standalone: '1 сат',
      withPrepositionAgo: '1 сат',
      withPrepositionIn: '1 сат'
    },
    dual: '{{count}} сата',
    other: '{{count}} сати'
  },
  xDays: {
    one: {
      standalone: '1 дан',
      withPrepositionAgo: '1 дан',
      withPrepositionIn: '1 дан'
    },
    dual: '{{count}} дана',
    other: '{{count}} дана'
  },
  aboutXWeeks: {
    one: {
      standalone: 'око 1 недељу',
      withPrepositionAgo: 'око 1 недељу',
      withPrepositionIn: 'око 1 недељу'
    },
    dual: 'око {{count}} недеље',
    other: 'око {{count}} недеље'
  },
  xWeeks: {
    one: {
      standalone: '1 недељу',
      withPrepositionAgo: '1 недељу',
      withPrepositionIn: '1 недељу'
    },
    dual: '{{count}} недеље',
    other: '{{count}} недеље'
  },
  aboutXMonths: {
    one: {
      standalone: 'око 1 месец',
      withPrepositionAgo: 'око 1 месец',
      withPrepositionIn: 'око 1 месец'
    },
    dual: 'око {{count}} месеца',
    other: 'око {{count}} месеци'
  },
  xMonths: {
    one: {
      standalone: '1 месец',
      withPrepositionAgo: '1 месец',
      withPrepositionIn: '1 месец'
    },
    dual: '{{count}} месеца',
    other: '{{count}} месеци'
  },
  aboutXYears: {
    one: {
      standalone: 'око 1 годину',
      withPrepositionAgo: 'око 1 годину',
      withPrepositionIn: 'око 1 годину'
    },
    dual: 'око {{count}} године',
    other: 'око {{count}} година'
  },
  xYears: {
    one: {
      standalone: '1 година',
      withPrepositionAgo: '1 године',
      withPrepositionIn: '1 годину'
    },
    dual: '{{count}} године',
    other: '{{count}} година'
  },
  overXYears: {
    one: {
      standalone: 'преко 1 годину',
      withPrepositionAgo: 'преко 1 годину',
      withPrepositionIn: 'преко 1 годину'
    },
    dual: 'преко {{count}} године',
    other: 'преко {{count}} година'
  },
  almostXYears: {
    one: {
      standalone: 'готово 1 годину',
      withPrepositionAgo: 'готово 1 годину',
      withPrepositionIn: 'готово 1 годину'
    },
    dual: 'готово {{count}} године',
    other: 'готово {{count}} година'
  }
};
var formatDistance$s = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$e[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'за ' + result;
    } else {
      return 'пре ' + result;
    }
  }
  return result;
};
var formatDistance$t = formatDistance$s;

var dateFormats$e = {
  full: 'EEEE, d. MMMM yyyy.',
  long: 'd. MMMM yyyy.',
  medium: 'd. MMM yy.',
  short: 'dd. MM. yy.'
};
var timeFormats$e = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$e = {
  full: "{{date}} 'у' {{time}}",
  long: "{{date}} 'у' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$s = {
  date: buildFormatLongFn({
    formats: dateFormats$e,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$e,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$e,
    defaultWidth: 'full'
  })
};
var formatLong$t = formatLong$s;

var formatRelativeLocale$e = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'прошле недеље у' p";
      case 3:
        return "'прошле среде у' p";
      case 6:
        return "'прошле суботе у' p";
      default:
        return "'прошли' EEEE 'у' p";
    }
  },
  yesterday: "'јуче у' p",
  today: "'данас у' p",
  tomorrow: "'сутра у' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'следеће недеље у' p";
      case 3:
        return "'следећу среду у' p";
      case 6:
        return "'следећу суботу у' p";
      default:
        return "'следећи' EEEE 'у' p";
    }
  },
  other: 'P'
};
var formatRelative$s = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$e[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$t = formatRelative$s;

var eraValues$e = {
  narrow: ['пр.н.е.', 'АД'],
  abbreviated: ['пр. Хр.', 'по. Хр.'],
  wide: ['Пре Христа', 'После Христа']
};
var quarterValues$e = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. кв.', '2. кв.', '3. кв.', '4. кв.'],
  wide: ['1. квартал', '2. квартал', '3. квартал', '4. квартал']
};
var monthValues$e = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['јан', 'феб', 'мар', 'апр', 'мај', 'јун', 'јул', 'авг', 'сеп', 'окт', 'нов', 'дец'],
  wide: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар']
};
var formattingMonthValues$3 = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['јан', 'феб', 'мар', 'апр', 'мај', 'јун', 'јул', 'авг', 'сеп', 'окт', 'нов', 'дец'],
  wide: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар']
};
var dayValues$e = {
  narrow: ['Н', 'П', 'У', 'С', 'Ч', 'П', 'С'],
  short: ['нед', 'пон', 'уто', 'сре', 'чет', 'пет', 'суб'],
  abbreviated: ['нед', 'пон', 'уто', 'сре', 'чет', 'пет', 'суб'],
  wide: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота']
};
var formattingDayPeriodValues$e = {
  narrow: {
    am: 'АМ',
    pm: 'ПМ',
    midnight: 'поноћ',
    noon: 'подне',
    morning: 'ујутру',
    afternoon: 'поподне',
    evening: 'увече',
    night: 'ноћу'
  },
  abbreviated: {
    am: 'АМ',
    pm: 'ПМ',
    midnight: 'поноћ',
    noon: 'подне',
    morning: 'ујутру',
    afternoon: 'поподне',
    evening: 'увече',
    night: 'ноћу'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'поноћ',
    noon: 'подне',
    morning: 'ујутру',
    afternoon: 'после подне',
    evening: 'увече',
    night: 'ноћу'
  }
};
var dayPeriodValues$e = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'поноћ',
    noon: 'подне',
    morning: 'ујутру',
    afternoon: 'поподне',
    evening: 'увече',
    night: 'ноћу'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'поноћ',
    noon: 'подне',
    morning: 'ујутру',
    afternoon: 'поподне',
    evening: 'увече',
    night: 'ноћу'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'поноћ',
    noon: 'подне',
    morning: 'ујутру',
    afternoon: 'после подне',
    evening: 'увече',
    night: 'ноћу'
  }
};
var ordinalNumber$e = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$s = {
  ordinalNumber: ordinalNumber$e,
  era: buildLocalizeFn({
    values: eraValues$e,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$e,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$e,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$3,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$e,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$e,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$e,
    defaultFormattingWidth: 'wide'
  })
};
var localize$t = localize$s;

var matchOrdinalNumberPattern$e = /^(\d+)\./i;
var parseOrdinalNumberPattern$e = /\d+/i;
var matchEraPatterns$e = {
  narrow: /^(пр\.н\.е\.|АД)/i,
  abbreviated: /^(пр\.\s?Хр\.|по\.\s?Хр\.)/i,
  wide: /^(Пре Христа|пре нове ере|После Христа|нова ера)/i
};
var parseEraPatterns$e = {
  any: [/^пр/i, /^(по|нова)/i]
};
var matchQuarterPatterns$e = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?кв\.?/i,
  wide: /^[1234]\. квартал/i
};
var parseQuarterPatterns$e = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$e = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(јан|феб|мар|апр|мај|јун|јул|авг|сеп|окт|нов|дец)/i,
  wide: /^((јануар|јануара)|(фебруар|фебруара)|(март|марта)|(април|априла)|(мја|маја)|(јун|јуна)|(јул|јула)|(август|августа)|(септембар|септембра)|(октобар|октобра)|(новембар|новембра)|(децембар|децембра))/i
};
var parseMonthPatterns$e = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ја/i, /^ф/i, /^мар/i, /^ап/i, /^мај/i, /^јун/i, /^јул/i, /^авг/i, /^с/i, /^о/i, /^н/i, /^д/i]
};
var matchDayPatterns$e = {
  narrow: /^[пусчн]/i,
  short: /^(нед|пон|уто|сре|чет|пет|суб)/i,
  abbreviated: /^(нед|пон|уто|сре|чет|пет|суб)/i,
  wide: /^(недеља|понедељак|уторак|среда|четвртак|петак|субота)/i
};
var parseDayPatterns$e = {
  narrow: [/^п/i, /^у/i, /^с/i, /^ч/i, /^п/i, /^с/i, /^н/i],
  any: [/^нед/i, /^пон/i, /^уто/i, /^сре/i, /^чет/i, /^пет/i, /^суб/i]
};
var matchDayPeriodPatterns$e = {
  any: /^(ам|пм|поноћ|(по)?подне|увече|ноћу|после подне|ујутру)/i
};
var parseDayPeriodPatterns$e = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^поно/i,
    noon: /^под/i,
    morning: /ујутру/i,
    afternoon: /(после\s|по)+подне/i,
    evening: /(увече)/i,
    night: /(ноћу)/i
  }
};
var match$s = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$e,
    parsePattern: parseOrdinalNumberPattern$e,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$e,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$e,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$e,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$e,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$e,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$e,
    defaultParseWidth: 'any'
  })
};
var match$t = match$s;

/**
 * @type {Locale}
 * @category Locales
 * @summary Serbian cyrillic locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor Radivojević [@rogyvoje]{@link https://github.com/rogyvoje}
 */
var locale$t = {
  code: 'sr',
  formatDistance: formatDistance$t,
  formatLong: formatLong$t,
  formatRelative: formatRelative$t,
  localize: localize$t,
  match: match$t,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$u = locale$t;

var formatDistanceLocale$d = {
  lessThanXSeconds: {
    one: {
      standalone: 'manje od 1 sekunde',
      withPrepositionAgo: 'manje od 1 sekunde',
      withPrepositionIn: 'manje od 1 sekundu'
    },
    dual: 'manje od {{count}} sekunde',
    other: 'manje od {{count}} sekundi'
  },
  xSeconds: {
    one: {
      standalone: '1 sekunda',
      withPrepositionAgo: '1 sekunde',
      withPrepositionIn: '1 sekundu'
    },
    dual: '{{count}} sekunde',
    other: '{{count}} sekundi'
  },
  halfAMinute: 'pola minute',
  lessThanXMinutes: {
    one: {
      standalone: 'manje od 1 minute',
      withPrepositionAgo: 'manje od 1 minute',
      withPrepositionIn: 'manje od 1 minutu'
    },
    dual: 'manje od {{count}} minute',
    other: 'manje od {{count}} minuta'
  },
  xMinutes: {
    one: {
      standalone: '1 minuta',
      withPrepositionAgo: '1 minute',
      withPrepositionIn: '1 minutu'
    },
    dual: '{{count}} minute',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: {
      standalone: 'oko 1 sat',
      withPrepositionAgo: 'oko 1 sat',
      withPrepositionIn: 'oko 1 sat'
    },
    dual: 'oko {{count}} sata',
    other: 'oko {{count}} sati'
  },
  xHours: {
    one: {
      standalone: '1 sat',
      withPrepositionAgo: '1 sat',
      withPrepositionIn: '1 sat'
    },
    dual: '{{count}} sata',
    other: '{{count}} sati'
  },
  xDays: {
    one: {
      standalone: '1 dan',
      withPrepositionAgo: '1 dan',
      withPrepositionIn: '1 dan'
    },
    dual: '{{count}} dana',
    other: '{{count}} dana'
  },
  aboutXWeeks: {
    one: {
      standalone: 'oko 1 nedelju',
      withPrepositionAgo: 'oko 1 nedelju',
      withPrepositionIn: 'oko 1 nedelju'
    },
    dual: 'oko {{count}} nedelje',
    other: 'oko {{count}} nedelje'
  },
  xWeeks: {
    one: {
      standalone: '1 nedelju',
      withPrepositionAgo: '1 nedelju',
      withPrepositionIn: '1 nedelju'
    },
    dual: '{{count}} nedelje',
    other: '{{count}} nedelje'
  },
  aboutXMonths: {
    one: {
      standalone: 'oko 1 mesec',
      withPrepositionAgo: 'oko 1 mesec',
      withPrepositionIn: 'oko 1 mesec'
    },
    dual: 'oko {{count}} meseca',
    other: 'oko {{count}} meseci'
  },
  xMonths: {
    one: {
      standalone: '1 mesec',
      withPrepositionAgo: '1 mesec',
      withPrepositionIn: '1 mesec'
    },
    dual: '{{count}} meseca',
    other: '{{count}} meseci'
  },
  aboutXYears: {
    one: {
      standalone: 'oko 1 godinu',
      withPrepositionAgo: 'oko 1 godinu',
      withPrepositionIn: 'oko 1 godinu'
    },
    dual: 'oko {{count}} godine',
    other: 'oko {{count}} godina'
  },
  xYears: {
    one: {
      standalone: '1 godina',
      withPrepositionAgo: '1 godine',
      withPrepositionIn: '1 godinu'
    },
    dual: '{{count}} godine',
    other: '{{count}} godina'
  },
  overXYears: {
    one: {
      standalone: 'preko 1 godinu',
      withPrepositionAgo: 'preko 1 godinu',
      withPrepositionIn: 'preko 1 godinu'
    },
    dual: 'preko {{count}} godine',
    other: 'preko {{count}} godina'
  },
  almostXYears: {
    one: {
      standalone: 'gotovo 1 godinu',
      withPrepositionAgo: 'gotovo 1 godinu',
      withPrepositionIn: 'gotovo 1 godinu'
    },
    dual: 'gotovo {{count}} godine',
    other: 'gotovo {{count}} godina'
  }
};
var formatDistance$q = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$d[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'za ' + result;
    } else {
      return 'pre ' + result;
    }
  }
  return result;
};
var formatDistance$r = formatDistance$q;

var dateFormats$d = {
  full: 'EEEE, d. MMMM yyyy.',
  long: 'd. MMMM yyyy.',
  medium: 'd. MMM yy.',
  short: 'dd. MM. yy.'
};
var timeFormats$d = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$d = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$q = {
  date: buildFormatLongFn({
    formats: dateFormats$d,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$d,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$d,
    defaultWidth: 'full'
  })
};
var formatLong$r = formatLong$q;

var formatRelativeLocale$d = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'prošle nedelje u' p";
      case 3:
        return "'prošle srede u' p";
      case 6:
        return "'prošle subote u' p";
      default:
        return "'prošli' EEEE 'u' p";
    }
  },
  yesterday: "'juče u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'sledeće nedelje u' p";
      case 3:
        return "'sledeću sredu u' p";
      case 6:
        return "'sledeću subotu u' p";
      default:
        return "'sledeći' EEEE 'u' p";
    }
  },
  other: 'P'
};
var formatRelative$q = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale$d[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
var formatRelative$r = formatRelative$q;

var eraValues$d = {
  narrow: ['pr.n.e.', 'AD'],
  abbreviated: ['pr. Hr.', 'po. Hr.'],
  wide: ['Pre Hrista', 'Posle Hrista']
};
var quarterValues$d = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$d = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var formattingMonthValues$2 = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var dayValues$d = {
  narrow: ['N', 'P', 'U', 'S', 'Č', 'P', 'S'],
  short: ['ned', 'pon', 'uto', 'sre', 'čet', 'pet', 'sub'],
  abbreviated: ['ned', 'pon', 'uto', 'sre', 'čet', 'pet', 'sub'],
  wide: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota']
};
var formattingDayPeriodValues$d = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'posle podne',
    evening: 'uveče',
    night: 'noću'
  }
};
var dayPeriodValues$d = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveče',
    night: 'noću'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoć',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'posle podne',
    evening: 'uveče',
    night: 'noću'
  }
};
var ordinalNumber$d = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$q = {
  ordinalNumber: ordinalNumber$d,
  era: buildLocalizeFn({
    values: eraValues$d,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$d,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$d,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$2,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$d,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$d,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$d,
    defaultFormattingWidth: 'wide'
  })
};
var localize$r = localize$q;

var matchOrdinalNumberPattern$d = /^(\d+)\./i;
var parseOrdinalNumberPattern$d = /\d+/i;
var matchEraPatterns$d = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i
};
var parseEraPatterns$d = {
  any: [/^pr/i, /^(po|nova)/i]
};
var matchQuarterPatterns$d = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var parseQuarterPatterns$d = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$d = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
var parseMonthPatterns$d = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$d = {
  narrow: /^[npusčc]/i,
  short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  wide: /^(nedelja|ponedeljak|utorak|sreda|(četvrtak|cetvrtak)|petak|subota)/i
};
var parseDayPatterns$d = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$d = {
  any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|posle podne|ujutru)/i
};
var parseDayPeriodPatterns$d = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(posle\s|po)+podne/i,
    evening: /(uvece|uveče)/i,
    night: /(nocu|noću)/i
  }
};
var match$q = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$d,
    parsePattern: parseOrdinalNumberPattern$d,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$d,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$d,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$d,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$d,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$d,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$d,
    defaultParseWidth: 'any'
  })
};
var match$r = match$q;

/**
 * @type {Locale}
 * @category Locales
 * @summary Serbian latin locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor Radivojević [@rogyvoje]{@link https://github.com/rogyvoje}
 */
var locale$r = {
  code: 'sr-Latn',
  formatDistance: formatDistance$r,
  formatLong: formatLong$r,
  formatRelative: formatRelative$r,
  localize: localize$r,
  match: match$r,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$s = locale$r;

var formatDistanceLocale$c = {
  lessThanXSeconds: {
    one: 'mindre än en sekund',
    other: 'mindre än {{count}} sekunder'
  },
  xSeconds: {
    one: 'en sekund',
    other: '{{count}} sekunder'
  },
  halfAMinute: 'en halv minut',
  lessThanXMinutes: {
    one: 'mindre än en minut',
    other: 'mindre än {{count}} minuter'
  },
  xMinutes: {
    one: 'en minut',
    other: '{{count}} minuter'
  },
  aboutXHours: {
    one: 'ungefär en timme',
    other: 'ungefär {{count}} timmar'
  },
  xHours: {
    one: 'en timme',
    other: '{{count}} timmar'
  },
  xDays: {
    one: 'en dag',
    other: '{{count}} dagar'
  },
  aboutXWeeks: {
    one: 'ungefär en vecka',
    other: 'ungefär {{count}} vecka'
  },
  xWeeks: {
    one: 'en vecka',
    other: '{{count}} vecka'
  },
  aboutXMonths: {
    one: 'ungefär en månad',
    other: 'ungefär {{count}} månader'
  },
  xMonths: {
    one: 'en månad',
    other: '{{count}} månader'
  },
  aboutXYears: {
    one: 'ungefär ett år',
    other: 'ungefär {{count}} år'
  },
  xYears: {
    one: 'ett år',
    other: '{{count}} år'
  },
  overXYears: {
    one: 'över ett år',
    other: 'över {{count}} år'
  },
  almostXYears: {
    one: 'nästan ett år',
    other: 'nästan {{count}} år'
  }
};
var wordMapping = ['noll', 'en', 'två', 'tre', 'fyra', 'fem', 'sex', 'sju', 'åtta', 'nio', 'tio', 'elva', 'tolv'];
var formatDistance$o = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$c[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    if (options && options.onlyNumeric) {
      result = tokenValue.other.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', count < 13 ? wordMapping[count] : String(count));
    }
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' sedan';
    }
  }
  return result;
};
var formatDistance$p = formatDistance$o;

var dateFormats$c = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'y-MM-dd'
};
var timeFormats$c = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$c = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$o = {
  date: buildFormatLongFn({
    formats: dateFormats$c,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$c,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$c,
    defaultWidth: 'full'
  })
};
var formatLong$p = formatLong$o;

var formatRelativeLocale$c = {
  lastWeek: "'i' EEEE's kl.' p",
  yesterday: "'igår kl.' p",
  today: "'idag kl.' p",
  tomorrow: "'imorgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
var formatRelative$o = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$c[token];
};
var formatRelative$p = formatRelative$o;

var eraValues$c = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['före Kristus', 'efter Kristus']
};
var quarterValues$c = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1:a kvartalet', '2:a kvartalet', '3:e kvartalet', '4:e kvartalet']
};
var monthValues$c = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'maj', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december']
};
var dayValues$c = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['sö', 'må', 'ti', 'on', 'to', 'fr', 'lö'],
  abbreviated: ['sön', 'mån', 'tis', 'ons', 'tors', 'fre', 'lör'],
  wide: ['söndag', 'måndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'lördag']
};

// https://www.unicode.org/cldr/charts/32/summary/sv.html#1888
var dayPeriodValues$c = {
  narrow: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morg.',
    afternoon: 'efterm.',
    evening: 'kväll',
    night: 'natt'
  },
  abbreviated: {
    am: 'f.m.',
    pm: 'e.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morgon',
    afternoon: 'efterm.',
    evening: 'kväll',
    night: 'natt'
  },
  wide: {
    am: 'förmiddag',
    pm: 'eftermiddag',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morgon',
    afternoon: 'eftermiddag',
    evening: 'kväll',
    night: 'natt'
  }
};
var formattingDayPeriodValues$c = {
  narrow: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på efterm.',
    evening: 'på kvällen',
    night: 'på natten'
  },
  abbreviated: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på efterm.',
    evening: 'på kvällen',
    night: 'på natten'
  },
  wide: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morgonen',
    afternoon: 'på eftermiddagen',
    evening: 'på kvällen',
    night: 'på natten'
  }
};
var ordinalNumber$c = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
      case 2:
        return number + ':a';
    }
  }
  return number + ':e';
};
var localize$o = {
  ordinalNumber: ordinalNumber$c,
  era: buildLocalizeFn({
    values: eraValues$c,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$c,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$c,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$c,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$c,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$c,
    defaultFormattingWidth: 'wide'
  })
};
var localize$p = localize$o;

var matchOrdinalNumberPattern$c = /^(\d+)(:a|:e)?/i;
var parseOrdinalNumberPattern$c = /\d+/i;
var matchEraPatterns$c = {
  narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  wide: /^(före Kristus|före vår tid|efter Kristus|vår tid)/i
};
var parseEraPatterns$c = {
  any: [/^f/i, /^[ev]/i]
};
var matchQuarterPatterns$c = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](:a|:e)? kvartalet/i
};
var parseQuarterPatterns$c = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$c = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar[s]?|apr|maj|jun[i]?|jul[i]?|aug|sep|okt|nov|dec)\.?/i,
  wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
};
var parseMonthPatterns$c = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$c = {
  narrow: /^[smtofl]/i,
  short: /^(sö|må|ti|on|to|fr|lö)/i,
  abbreviated: /^(sön|mån|tis|ons|tors|fre|lör)/i,
  wide: /^(söndag|måndag|tisdag|onsdag|torsdag|fredag|lördag)/i
};
var parseDayPatterns$c = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns$c = {
  any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(på) (morgonen|eftermiddagen|kvällen|natten))/i
};
var parseDayPeriodPatterns$c = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /eftermiddag/i,
    evening: /kväll/i,
    night: /natt/i
  }
};
var match$o = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$c,
    parsePattern: parseOrdinalNumberPattern$c,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$c,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$c,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$c,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$c,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$c,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$c,
    defaultParseWidth: 'any'
  })
};
var match$p = match$o;

/**
 * @type {Locale}
 * @category Locales
 * @summary Swedish locale.
 * @language Swedish
 * @iso-639-2 swe
 * @author Johannes Ulén [@ejulen]{@link https://github.com/ejulen}
 * @author Alexander Nanberg [@alexandernanberg]{@link https://github.com/alexandernanberg}
 * @author Henrik Andersson [@limelights]{@link https://github.com/limelights}
 */
var locale$p = {
  code: 'sv',
  formatDistance: formatDistance$p,
  formatLong: formatLong$p,
  formatRelative: formatRelative$p,
  localize: localize$p,
  match: match$p,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$q = locale$p;

function isPluralType(val) {
  return val.one !== undefined;
}
var formatDistanceLocale$b = {
  lessThanXSeconds: {
    one: {
      default: 'ஒரு வினாடிக்கு குறைவாக',
      in: 'ஒரு வினாடிக்குள்',
      ago: 'ஒரு வினாடிக்கு முன்பு'
    },
    other: {
      default: '{{count}} வினாடிகளுக்கு குறைவாக',
      in: '{{count}} வினாடிகளுக்குள்',
      ago: '{{count}} வினாடிகளுக்கு முன்பு'
    }
  },
  xSeconds: {
    one: {
      default: '1 வினாடி',
      in: '1 வினாடியில்',
      ago: '1 வினாடி முன்பு'
    },
    other: {
      default: '{{count}} விநாடிகள்',
      in: '{{count}} வினாடிகளில்',
      ago: '{{count}} விநாடிகளுக்கு முன்பு'
    }
  },
  halfAMinute: {
    default: 'அரை நிமிடம்',
    in: 'அரை நிமிடத்தில்',
    ago: 'அரை நிமிடம் முன்பு'
  },
  lessThanXMinutes: {
    one: {
      default: 'ஒரு நிமிடத்திற்கும் குறைவாக',
      in: 'ஒரு நிமிடத்திற்குள்',
      ago: 'ஒரு நிமிடத்திற்கு முன்பு'
    },
    other: {
      default: '{{count}} நிமிடங்களுக்கும் குறைவாக',
      in: '{{count}} நிமிடங்களுக்குள்',
      ago: '{{count}} நிமிடங்களுக்கு முன்பு'
    }
  },
  xMinutes: {
    one: {
      default: '1 நிமிடம்',
      in: '1 நிமிடத்தில்',
      ago: '1 நிமிடம் முன்பு'
    },
    other: {
      default: '{{count}} நிமிடங்கள்',
      in: '{{count}} நிமிடங்களில்',
      ago: '{{count}} நிமிடங்களுக்கு முன்பு'
    }
  },
  aboutXHours: {
    one: {
      default: 'சுமார் 1 மணி நேரம்',
      in: 'சுமார் 1 மணி நேரத்தில்',
      ago: 'சுமார் 1 மணி நேரத்திற்கு முன்பு'
    },
    other: {
      default: 'சுமார் {{count}} மணி நேரம்',
      in: 'சுமார் {{count}} மணி நேரத்திற்கு முன்பு',
      ago: 'சுமார் {{count}} மணி நேரத்தில்'
    }
  },
  xHours: {
    one: {
      default: '1 மணி நேரம்',
      in: '1 மணி நேரத்தில்',
      ago: '1 மணி நேரத்திற்கு முன்பு'
    },
    other: {
      default: '{{count}} மணி நேரம்',
      in: '{{count}} மணி நேரத்தில்',
      ago: '{{count}} மணி நேரத்திற்கு முன்பு'
    }
  },
  xDays: {
    one: {
      default: '1 நாள்',
      in: '1 நாளில்',
      ago: '1 நாள் முன்பு'
    },
    other: {
      default: '{{count}} நாட்கள்',
      in: '{{count}} நாட்களில்',
      ago: '{{count}} நாட்களுக்கு முன்பு'
    }
  },
  aboutXWeeks: {
    one: {
      default: 'சுமார் 1 வாரம்',
      in: 'சுமார் 1 வாரத்தில்',
      ago: 'சுமார் 1 வாரம் முன்பு'
    },
    other: {
      default: 'சுமார் {{count}} வாரங்கள்',
      in: 'சுமார் {{count}} வாரங்களில்',
      ago: 'சுமார் {{count}} வாரங்களுக்கு முன்பு'
    }
  },
  xWeeks: {
    one: {
      default: '1 வாரம்',
      in: '1 வாரத்தில்',
      ago: '1 வாரம் முன்பு'
    },
    other: {
      default: '{{count}} வாரங்கள்',
      in: '{{count}} வாரங்களில்',
      ago: '{{count}} வாரங்களுக்கு முன்பு'
    }
  },
  aboutXMonths: {
    one: {
      default: 'சுமார் 1 மாதம்',
      in: 'சுமார் 1 மாதத்தில்',
      ago: 'சுமார் 1 மாதத்திற்கு முன்பு'
    },
    other: {
      default: 'சுமார் {{count}} மாதங்கள்',
      in: 'சுமார் {{count}} மாதங்களில்',
      ago: 'சுமார் {{count}} மாதங்களுக்கு முன்பு'
    }
  },
  xMonths: {
    one: {
      default: '1 மாதம்',
      in: '1 மாதத்தில்',
      ago: '1 மாதம் முன்பு'
    },
    other: {
      default: '{{count}} மாதங்கள்',
      in: '{{count}} மாதங்களில்',
      ago: '{{count}} மாதங்களுக்கு முன்பு'
    }
  },
  aboutXYears: {
    one: {
      default: 'சுமார் 1 வருடம்',
      in: 'சுமார் 1 ஆண்டில்',
      ago: 'சுமார் 1 வருடம் முன்பு'
    },
    other: {
      default: 'சுமார் {{count}} ஆண்டுகள்',
      in: 'சுமார் {{count}} ஆண்டுகளில்',
      ago: 'சுமார் {{count}} ஆண்டுகளுக்கு முன்பு'
    }
  },
  xYears: {
    one: {
      default: '1 வருடம்',
      in: '1 ஆண்டில்',
      ago: '1 வருடம் முன்பு'
    },
    other: {
      default: '{{count}} ஆண்டுகள்',
      in: '{{count}} ஆண்டுகளில்',
      ago: '{{count}} ஆண்டுகளுக்கு முன்பு'
    }
  },
  overXYears: {
    one: {
      default: '1 வருடத்திற்கு மேல்',
      in: '1 வருடத்திற்கும் மேலாக',
      ago: '1 வருடம் முன்பு'
    },
    other: {
      default: '{{count}} ஆண்டுகளுக்கும் மேலாக',
      in: '{{count}} ஆண்டுகளில்',
      ago: '{{count}} ஆண்டுகளுக்கு முன்பு'
    }
  },
  almostXYears: {
    one: {
      default: 'கிட்டத்தட்ட 1 வருடம்',
      in: 'கிட்டத்தட்ட 1 ஆண்டில்',
      ago: 'கிட்டத்தட்ட 1 வருடம் முன்பு'
    },
    other: {
      default: 'கிட்டத்தட்ட {{count}} ஆண்டுகள்',
      in: 'கிட்டத்தட்ட {{count}} ஆண்டுகளில்',
      ago: 'கிட்டத்தட்ட {{count}} ஆண்டுகளுக்கு முன்பு'
    }
  }
};
var formatDistance$m = function formatDistance(token, count, options) {
  var tense = options !== null && options !== void 0 && options.addSuffix ? options.comparison && options.comparison > 0 ? 'in' : 'ago' : 'default';
  var tokenValue = formatDistanceLocale$b[token];
  if (!isPluralType(tokenValue)) return tokenValue[tense];
  if (count === 1) {
    return tokenValue.one[tense];
  } else {
    return tokenValue.other[tense].replace('{{count}}', String(count));
  }
};
var formatDistance$n = formatDistance$m;

// CLDR #1846 - #1849
var dateFormats$b = {
  full: 'EEEE, d MMMM, y',
  long: 'd MMMM, y',
  medium: 'd MMM, y',
  short: 'd/M/yy'
};

// CLDR #1850 - #1853
var timeFormats$b = {
  full: 'a h:mm:ss zzzz',
  long: 'a h:mm:ss z',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var dateTimeFormats$b = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$m = {
  date: buildFormatLongFn({
    formats: dateFormats$b,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$b,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$b,
    defaultWidth: 'full'
  })
};
var formatLong$n = formatLong$m;

var formatRelativeLocale$b = {
  lastWeek: "'கடந்த' eeee p 'மணிக்கு'",
  yesterday: "'நேற்று ' p 'மணிக்கு'",
  today: "'இன்று ' p 'மணிக்கு'",
  tomorrow: "'நாளை ' p 'மணிக்கு'",
  nextWeek: "eeee p 'மணிக்கு'",
  other: 'P'
};
var formatRelative$m = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$b[token];
};
var formatRelative$n = formatRelative$m;

var eraValues$b = {
  narrow: ['கி.மு.', 'கி.பி.'],
  abbreviated: ['கி.மு.', 'கி.பி.'],
  // CLDR #1624, #1626
  wide: ['கிறிஸ்துவுக்கு முன்', 'அன்னோ டோமினி'] // CLDR #1620, #1622
};

var quarterValues$b = {
  // CLDR #1644 - #1647
  narrow: ['1', '2', '3', '4'],
  // CLDR #1636 - #1639
  abbreviated: ['காலா.1', 'காலா.2', 'காலா.3', 'காலா.4'],
  // CLDR #1628 - #1631
  wide: ['ஒன்றாம் காலாண்டு', 'இரண்டாம் காலாண்டு', 'மூன்றாம் காலாண்டு', 'நான்காம் காலாண்டு']
};
var monthValues$b = {
  // CLDR #700 - #711
  narrow: ['ஜ', 'பி', 'மா', 'ஏ', 'மே', 'ஜூ', 'ஜூ', 'ஆ', 'செ', 'அ', 'ந', 'டி'],
  // CLDR #1676 - #1687
  abbreviated: ['ஜன.', 'பிப்.', 'மார்.', 'ஏப்.', 'மே', 'ஜூன்', 'ஜூலை', 'ஆக.', 'செப்.', 'அக்.', 'நவ.', 'டிச.'],
  // CLDR #1652 - #1663
  wide: ['ஜனவரி',
  // January
  'பிப்ரவரி',
  // February
  'மார்ச்',
  // March
  'ஏப்ரல்',
  // April
  'மே',
  // May
  'ஜூன்',
  // June
  'ஜூலை',
  // July
  'ஆகஸ்ட்',
  // August
  'செப்டம்பர்',
  // September
  'அக்டோபர்',
  // October
  'நவம்பர்',
  // November
  'டிசம்பர்' // December
  ]
};

var dayValues$b = {
  // CLDR #1766 - #1772
  narrow: ['ஞா', 'தி', 'செ', 'பு', 'வி', 'வெ', 'ச'],
  // CLDR #1752 - #1758
  short: ['ஞா', 'தி', 'செ', 'பு', 'வி', 'வெ', 'ச'],
  // CLDR #1738 - #1744
  abbreviated: ['ஞாயி.', 'திங்.', 'செவ்.', 'புத.', 'வியா.', 'வெள்.', 'சனி'],
  // CLDR #1724 - #1730
  wide: ['ஞாயிறு',
  // Sunday
  'திங்கள்',
  // Monday
  'செவ்வாய்',
  // Tuesday
  'புதன்',
  // Wednesday
  'வியாழன்',
  // Thursday
  'வெள்ளி',
  // Friday
  'சனி' // Saturday
  ]
};

// CLDR #1780 - #1845
var dayPeriodValues$b = {
  narrow: {
    am: 'மு.ப',
    pm: 'பி.ப',
    midnight: 'நள்.',
    noon: 'நண்.',
    morning: 'கா.',
    afternoon: 'மதி.',
    evening: 'மா.',
    night: 'இர.'
  },
  abbreviated: {
    am: 'முற்பகல்',
    pm: 'பிற்பகல்',
    midnight: 'நள்ளிரவு',
    noon: 'நண்பகல்',
    morning: 'காலை',
    afternoon: 'மதியம்',
    evening: 'மாலை',
    night: 'இரவு'
  },
  wide: {
    am: 'முற்பகல்',
    pm: 'பிற்பகல்',
    midnight: 'நள்ளிரவு',
    noon: 'நண்பகல்',
    morning: 'காலை',
    afternoon: 'மதியம்',
    evening: 'மாலை',
    night: 'இரவு'
  }
};

// CLDR #1780 - #1845
var formattingDayPeriodValues$b = {
  narrow: {
    am: 'மு.ப',
    pm: 'பி.ப',
    midnight: 'நள்.',
    noon: 'நண்.',
    morning: 'கா.',
    afternoon: 'மதி.',
    evening: 'மா.',
    night: 'இர.'
  },
  abbreviated: {
    am: 'முற்பகல்',
    pm: 'பிற்பகல்',
    midnight: 'நள்ளிரவு',
    noon: 'நண்பகல்',
    morning: 'காலை',
    afternoon: 'மதியம்',
    evening: 'மாலை',
    night: 'இரவு'
  },
  wide: {
    am: 'முற்பகல்',
    pm: 'பிற்பகல்',
    midnight: 'நள்ளிரவு',
    noon: 'நண்பகல்',
    morning: 'காலை',
    afternoon: 'மதியம்',
    evening: 'மாலை',
    night: 'இரவு'
  }
};
var ordinalNumber$b = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$m = {
  ordinalNumber: ordinalNumber$b,
  era: buildLocalizeFn({
    values: eraValues$b,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$b,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$b,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$b,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$b,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$b,
    defaultFormattingWidth: 'wide'
  })
};
var localize$n = localize$m;

var matchOrdinalNumberPattern$b = /^(\d+)(வது)?/i;
var parseOrdinalNumberPattern$b = /\d+/i;
var matchEraPatterns$b = {
  narrow: /^(கி.மு.|கி.பி.)/i,
  abbreviated: /^(கி\.?\s?மு\.?|கி\.?\s?பி\.?)/,
  wide: /^(கிறிஸ்துவுக்கு\sமுன்|அன்னோ\sடோமினி)/i
};
var parseEraPatterns$b = {
  any: [/கி\.?\s?மு\.?/, /கி\.?\s?பி\.?/]
};
var matchQuarterPatterns$b = {
  narrow: /^[1234]/i,
  abbreviated: /^காலா.[1234]/i,
  wide: /^(ஒன்றாம்|இரண்டாம்|மூன்றாம்|நான்காம்) காலாண்டு/i
};
var parseQuarterPatterns$b = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/(1|காலா.1|ஒன்றாம்)/i, /(2|காலா.2|இரண்டாம்)/i, /(3|காலா.3|மூன்றாம்)/i, /(4|காலா.4|நான்காம்)/i]
};
var matchMonthPatterns$b = {
  narrow: /^(ஜ|பி|மா|ஏ|மே|ஜூ|ஆ|செ|அ|ந|டி)$/i,
  abbreviated: /^(ஜன.|பிப்.|மார்.|ஏப்.|மே|ஜூன்|ஜூலை|ஆக.|செப்.|அக்.|நவ.|டிச.)/i,
  wide: /^(ஜனவரி|பிப்ரவரி|மார்ச்|ஏப்ரல்|மே|ஜூன்|ஜூலை|ஆகஸ்ட்|செப்டம்பர்|அக்டோபர்|நவம்பர்|டிசம்பர்)/i
};
var parseMonthPatterns$b = {
  narrow: [/^ஜ$/i, /^பி/i, /^மா/i, /^ஏ/i, /^மே/i, /^ஜூ/i, /^ஜூ/i, /^ஆ/i, /^செ/i, /^அ/i, /^ந/i, /^டி/i],
  any: [/^ஜன/i, /^பி/i, /^மா/i, /^ஏ/i, /^மே/i, /^ஜூன்/i, /^ஜூலை/i, /^ஆ/i, /^செ/i, /^அ/i, /^ந/i, /^டி/i]
};
var matchDayPatterns$b = {
  narrow: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
  short: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
  abbreviated: /^(ஞாயி.|திங்.|செவ்.|புத.|வியா.|வெள்.|சனி)/i,
  wide: /^(ஞாயிறு|திங்கள்|செவ்வாய்|புதன்|வியாழன்|வெள்ளி|சனி)/i
};
var parseDayPatterns$b = {
  narrow: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i],
  any: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i]
};
var matchDayPeriodPatterns$b = {
  narrow: /^(மு.ப|பி.ப|நள்|நண்|காலை|மதியம்|மாலை|இரவு)/i,
  any: /^(மு.ப|பி.ப|முற்பகல்|பிற்பகல்|நள்ளிரவு|நண்பகல்|காலை|மதியம்|மாலை|இரவு)/i
};
var parseDayPeriodPatterns$b = {
  any: {
    am: /^மு/i,
    pm: /^பி/i,
    midnight: /^நள்/i,
    noon: /^நண்/i,
    morning: /காலை/i,
    afternoon: /மதியம்/i,
    evening: /மாலை/i,
    night: /இரவு/i
  }
};
var match$m = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$b,
    parsePattern: parseOrdinalNumberPattern$b,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$b,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$b,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$b,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$b,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$b,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$b,
    defaultParseWidth: 'any'
  })
};
var match$n = match$m;

/**
 * @type {Locale}
 * @category Locales
 * @summary Tamil locale (India).
 * @language Tamil
 * @iso-639-2 tam
 * @author Sibiraj [@sibiraj-s]{@link https://github.com/sibiraj-s}
 */
var locale$n = {
  code: 'ta',
  formatDistance: formatDistance$n,
  formatLong: formatLong$n,
  formatRelative: formatRelative$n,
  localize: localize$n,
  match: match$n,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$o = locale$n;

// Source: https://www.unicode.org/cldr/charts/32/summary/te.html

var formatDistanceLocale$a = {
  lessThanXSeconds: {
    standalone: {
      one: 'సెకను కన్నా తక్కువ',
      other: '{{count}} సెకన్ల కన్నా తక్కువ'
    },
    withPreposition: {
      one: 'సెకను',
      other: '{{count}} సెకన్ల'
    }
  },
  xSeconds: {
    standalone: {
      one: 'ఒక సెకను',
      // CLDR #1314
      other: '{{count}} సెకన్ల'
    },
    withPreposition: {
      one: 'ఒక సెకను',
      other: '{{count}} సెకన్ల'
    }
  },
  halfAMinute: {
    standalone: 'అర నిమిషం',
    withPreposition: 'అర నిమిషం'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'ఒక నిమిషం కన్నా తక్కువ',
      other: '{{count}} నిమిషాల కన్నా తక్కువ'
    },
    withPreposition: {
      one: 'ఒక నిమిషం',
      other: '{{count}} నిమిషాల'
    }
  },
  xMinutes: {
    standalone: {
      one: 'ఒక నిమిషం',
      // CLDR #1311
      other: '{{count}} నిమిషాలు'
    },
    withPreposition: {
      one: 'ఒక నిమిషం',
      // CLDR #1311
      other: '{{count}} నిమిషాల'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'సుమారు ఒక గంట',
      other: 'సుమారు {{count}} గంటలు'
    },
    withPreposition: {
      one: 'సుమారు ఒక గంట',
      other: 'సుమారు {{count}} గంటల'
    }
  },
  xHours: {
    standalone: {
      one: 'ఒక గంట',
      // CLDR #1308
      other: '{{count}} గంటలు'
    },
    withPreposition: {
      one: 'ఒక గంట',
      other: '{{count}} గంటల'
    }
  },
  xDays: {
    standalone: {
      one: 'ఒక రోజు',
      // CLDR #1292
      other: '{{count}} రోజులు'
    },
    withPreposition: {
      one: 'ఒక రోజు',
      other: '{{count}} రోజుల'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'సుమారు ఒక వారం',
      other: 'సుమారు {{count}} వారాలు'
    },
    withPreposition: {
      one: 'సుమారు ఒక వారం',
      other: 'సుమారు {{count}} వారాలల'
    }
  },
  xWeeks: {
    standalone: {
      one: 'ఒక వారం',
      other: '{{count}} వారాలు'
    },
    withPreposition: {
      one: 'ఒక వారం',
      other: '{{count}} వారాలల'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'సుమారు ఒక నెల',
      other: 'సుమారు {{count}} నెలలు'
    },
    withPreposition: {
      one: 'సుమారు ఒక నెల',
      other: 'సుమారు {{count}} నెలల'
    }
  },
  xMonths: {
    standalone: {
      one: 'ఒక నెల',
      // CLDR #1281
      other: '{{count}} నెలలు'
    },
    withPreposition: {
      one: 'ఒక నెల',
      other: '{{count}} నెలల'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'సుమారు ఒక సంవత్సరం',
      other: 'సుమారు {{count}} సంవత్సరాలు'
    },
    withPreposition: {
      one: 'సుమారు ఒక సంవత్సరం',
      other: 'సుమారు {{count}} సంవత్సరాల'
    }
  },
  xYears: {
    standalone: {
      one: 'ఒక సంవత్సరం',
      // CLDR #1275
      other: '{{count}} సంవత్సరాలు'
    },
    withPreposition: {
      one: 'ఒక సంవత్సరం',
      other: '{{count}} సంవత్సరాల'
    }
  },
  overXYears: {
    standalone: {
      one: 'ఒక సంవత్సరం పైగా',
      other: '{{count}} సంవత్సరాలకు పైగా'
    },
    withPreposition: {
      one: 'ఒక సంవత్సరం',
      other: '{{count}} సంవత్సరాల'
    }
  },
  almostXYears: {
    standalone: {
      one: 'దాదాపు ఒక సంవత్సరం',
      other: 'దాదాపు {{count}} సంవత్సరాలు'
    },
    withPreposition: {
      one: 'దాదాపు ఒక సంవత్సరం',
      other: 'దాదాపు {{count}} సంవత్సరాల'
    }
  }
};
var formatDistance$k = function formatDistance(token, count, options) {
  var result;
  var tokenValue = options !== null && options !== void 0 && options.addSuffix ? formatDistanceLocale$a[token].withPreposition : formatDistanceLocale$a[token].standalone;
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'లో';
    } else {
      return result + ' క్రితం';
    }
  }
  return result;
};
var formatDistance$l = formatDistance$k;

// CLDR #1807 - #1811
var dateFormats$a = {
  full: 'd, MMMM y, EEEE',
  long: 'd MMMM, y',
  medium: 'd MMM, y',
  short: 'dd-MM-yy'
};

// CLDR #1807 - #1811
var timeFormats$a = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};

// CLDR #1815 - #1818
var dateTimeFormats$a = {
  full: "{{date}} {{time}}'కి'",
  long: "{{date}} {{time}}'కి'",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$k = {
  date: buildFormatLongFn({
    formats: dateFormats$a,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$a,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$a,
    defaultWidth: 'full'
  })
};
var formatLong$l = formatLong$k;

// Source: https://www.unicode.org/cldr/charts/32/summary/te.html

var formatRelativeLocale$a = {
  lastWeek: "'గత' eeee p",
  // CLDR #1384
  yesterday: "'నిన్న' p",
  // CLDR #1393
  today: "'ఈ రోజు' p",
  // CLDR #1394
  tomorrow: "'రేపు' p",
  // CLDR #1395
  nextWeek: "'తదుపరి' eeee p",
  // CLDR #1386
  other: 'P'
};
var formatRelative$k = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$a[token];
};
var formatRelative$l = formatRelative$k;

// Source: https://dsal.uchicago.edu/dictionaries/brown/
// CLDR #1605 - #1608
var eraValues$a = {
  narrow: ['క్రీ.పూ.', 'క్రీ.శ.'],
  abbreviated: ['క్రీ.పూ.', 'క్రీ.శ.'],
  wide: ['క్రీస్తు పూర్వం', 'క్రీస్తుశకం']
};

// CLDR #1613 - #1628
var quarterValues$a = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['త్రై1', 'త్రై2', 'త్రై3', 'త్రై4'],
  wide: ['1వ త్రైమాసికం', '2వ త్రైమాసికం', '3వ త్రైమాసికం', '4వ త్రైమాసికం']
};

// CLDR #1637 - #1708
var monthValues$a = {
  narrow: ['జ', 'ఫి', 'మా', 'ఏ', 'మే', 'జూ', 'జు', 'ఆ', 'సె', 'అ', 'న', 'డి'],
  abbreviated: ['జన', 'ఫిబ్ర', 'మార్చి', 'ఏప్రి', 'మే', 'జూన్', 'జులై', 'ఆగ', 'సెప్టెం', 'అక్టో', 'నవం', 'డిసెం'],
  wide: ['జనవరి', 'ఫిబ్రవరి', 'మార్చి', 'ఏప్రిల్', 'మే', 'జూన్', 'జులై', 'ఆగస్టు', 'సెప్టెంబర్', 'అక్టోబర్', 'నవంబర్', 'డిసెంబర్']
};

// CLDR #1709 - #1764
var dayValues$a = {
  narrow: ['ఆ', 'సో', 'మ', 'బు', 'గు', 'శు', 'శ'],
  short: ['ఆది', 'సోమ', 'మంగళ', 'బుధ', 'గురు', 'శుక్ర', 'శని'],
  abbreviated: ['ఆది', 'సోమ', 'మంగళ', 'బుధ', 'గురు', 'శుక్ర', 'శని'],
  wide: ['ఆదివారం', 'సోమవారం', 'మంగళవారం', 'బుధవారం', 'గురువారం', 'శుక్రవారం', 'శనివారం']
};

// CLDR #1767 - #1806
var dayPeriodValues$a = {
  narrow: {
    am: 'పూర్వాహ్నం',
    pm: 'అపరాహ్నం',
    midnight: 'అర్ధరాత్రి',
    noon: 'మిట్టమధ్యాహ్నం',
    morning: 'ఉదయం',
    afternoon: 'మధ్యాహ్నం',
    evening: 'సాయంత్రం',
    night: 'రాత్రి'
  },
  abbreviated: {
    am: 'పూర్వాహ్నం',
    pm: 'అపరాహ్నం',
    midnight: 'అర్ధరాత్రి',
    noon: 'మిట్టమధ్యాహ్నం',
    morning: 'ఉదయం',
    afternoon: 'మధ్యాహ్నం',
    evening: 'సాయంత్రం',
    night: 'రాత్రి'
  },
  wide: {
    am: 'పూర్వాహ్నం',
    pm: 'అపరాహ్నం',
    midnight: 'అర్ధరాత్రి',
    noon: 'మిట్టమధ్యాహ్నం',
    morning: 'ఉదయం',
    afternoon: 'మధ్యాహ్నం',
    evening: 'సాయంత్రం',
    night: 'రాత్రి'
  }
};
var formattingDayPeriodValues$a = {
  narrow: {
    am: 'పూర్వాహ్నం',
    pm: 'అపరాహ్నం',
    midnight: 'అర్ధరాత్రి',
    noon: 'మిట్టమధ్యాహ్నం',
    morning: 'ఉదయం',
    afternoon: 'మధ్యాహ్నం',
    evening: 'సాయంత్రం',
    night: 'రాత్రి'
  },
  abbreviated: {
    am: 'పూర్వాహ్నం',
    pm: 'అపరాహ్నం',
    midnight: 'అర్ధరాత్రి',
    noon: 'మిట్టమధ్యాహ్నం',
    morning: 'ఉదయం',
    afternoon: 'మధ్యాహ్నం',
    evening: 'సాయంత్రం',
    night: 'రాత్రి'
  },
  wide: {
    am: 'పూర్వాహ్నం',
    pm: 'అపరాహ్నం',
    midnight: 'అర్ధరాత్రి',
    noon: 'మిట్టమధ్యాహ్నం',
    morning: 'ఉదయం',
    afternoon: 'మధ్యాహ్నం',
    evening: 'సాయంత్రం',
    night: 'రాత్రి'
  }
};
var ordinalNumber$a = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'వ';
};
var localize$k = {
  ordinalNumber: ordinalNumber$a,
  era: buildLocalizeFn({
    values: eraValues$a,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$a,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$a,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$a,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$a,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$a,
    defaultFormattingWidth: 'wide'
  })
};
var localize$l = localize$k;

var matchOrdinalNumberPattern$a = /^(\d+)(వ)?/i;
var parseOrdinalNumberPattern$a = /\d+/i;
var matchEraPatterns$a = {
  narrow: /^(క్రీ\.పూ\.|క్రీ\.శ\.)/i,
  abbreviated: /^(క్రీ\.?\s?పూ\.?|ప్ర\.?\s?శ\.?\s?పూ\.?|క్రీ\.?\s?శ\.?|సా\.?\s?శ\.?)/i,
  wide: /^(క్రీస్తు పూర్వం|ప్రస్తుత శకానికి పూర్వం|క్రీస్తు శకం|ప్రస్తుత శకం)/i
};
var parseEraPatterns$a = {
  any: [/^(పూ|శ)/i, /^సా/i]
};
var matchQuarterPatterns$a = {
  narrow: /^[1234]/i,
  abbreviated: /^త్రై[1234]/i,
  wide: /^[1234](వ)? త్రైమాసికం/i
};
var parseQuarterPatterns$a = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$a = {
  narrow: /^(జూ|జు|జ|ఫి|మా|ఏ|మే|ఆ|సె|అ|న|డి)/i,
  abbreviated: /^(జన|ఫిబ్ర|మార్చి|ఏప్రి|మే|జూన్|జులై|ఆగ|సెప్|అక్టో|నవ|డిసె)/i,
  wide: /^(జనవరి|ఫిబ్రవరి|మార్చి|ఏప్రిల్|మే|జూన్|జులై|ఆగస్టు|సెప్టెంబర్|అక్టోబర్|నవంబర్|డిసెంబర్)/i
};
var parseMonthPatterns$a = {
  narrow: [/^జ/i, /^ఫి/i, /^మా/i, /^ఏ/i, /^మే/i, /^జూ/i, /^జు/i, /^ఆ/i, /^సె/i, /^అ/i, /^న/i, /^డి/i],
  any: [/^జన/i, /^ఫి/i, /^మా/i, /^ఏ/i, /^మే/i, /^జూన్/i, /^జులై/i, /^ఆగ/i, /^సె/i, /^అ/i, /^న/i, /^డి/i]
};
var matchDayPatterns$a = {
  narrow: /^(ఆ|సో|మ|బు|గు|శు|శ)/i,
  short: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
  abbreviated: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
  wide: /^(ఆదివారం|సోమవారం|మంగళవారం|బుధవారం|గురువారం|శుక్రవారం|శనివారం)/i
};
var parseDayPatterns$a = {
  narrow: [/^ఆ/i, /^సో/i, /^మ/i, /^బు/i, /^గు/i, /^శు/i, /^శ/i],
  any: [/^ఆది/i, /^సోమ/i, /^మం/i, /^బుధ/i, /^గురు/i, /^శుక్ర/i, /^శని/i]
};
var matchDayPeriodPatterns$a = {
  narrow: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i,
  any: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i
};
var parseDayPeriodPatterns$a = {
  any: {
    am: /^పూర్వాహ్నం/i,
    pm: /^అపరాహ్నం/i,
    midnight: /^అర్ధ/i,
    noon: /^మిట్ట/i,
    morning: /ఉదయం/i,
    afternoon: /మధ్యాహ్నం/i,
    evening: /సాయంత్రం/i,
    night: /రాత్రి/i
  }
};
var match$k = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$a,
    parsePattern: parseOrdinalNumberPattern$a,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$a,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$a,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$a,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$a,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$a,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$a,
    defaultParseWidth: 'any'
  })
};
var match$l = match$k;

/**
 * @type {Locale}
 * @category Locales
 * @summary Telugu locale
 * @language Telugu
 * @iso-639-2 tel
 * @author Kranthi Lakum [@kranthilakum]{@link https://github.com/kranthilakum}
 */
var locale$l = {
  code: 'te',
  formatDistance: formatDistance$l,
  formatLong: formatLong$l,
  formatRelative: formatRelative$l,
  localize: localize$l,
  match: match$l,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$m = locale$l;

var formatDistanceLocale$9 = {
  lessThanXSeconds: {
    one: 'น้อยกว่า 1 วินาที',
    other: 'น้อยกว่า {{count}} วินาที'
  },
  xSeconds: {
    one: '1 วินาที',
    other: '{{count}} วินาที'
  },
  halfAMinute: 'ครึ่งนาที',
  lessThanXMinutes: {
    one: 'น้อยกว่า 1 นาที',
    other: 'น้อยกว่า {{count}} นาที'
  },
  xMinutes: {
    one: '1 นาที',
    other: '{{count}} นาที'
  },
  aboutXHours: {
    one: 'ประมาณ 1 ชั่วโมง',
    other: 'ประมาณ {{count}} ชั่วโมง'
  },
  xHours: {
    one: '1 ชั่วโมง',
    other: '{{count}} ชั่วโมง'
  },
  xDays: {
    one: '1 วัน',
    other: '{{count}} วัน'
  },
  aboutXWeeks: {
    one: 'ประมาณ 1 สัปดาห์',
    other: 'ประมาณ {{count}} สัปดาห์'
  },
  xWeeks: {
    one: '1 สัปดาห์',
    other: '{{count}} สัปดาห์'
  },
  aboutXMonths: {
    one: 'ประมาณ 1 เดือน',
    other: 'ประมาณ {{count}} เดือน'
  },
  xMonths: {
    one: '1 เดือน',
    other: '{{count}} เดือน'
  },
  aboutXYears: {
    one: 'ประมาณ 1 ปี',
    other: 'ประมาณ {{count}} ปี'
  },
  xYears: {
    one: '1 ปี',
    other: '{{count}} ปี'
  },
  overXYears: {
    one: 'มากกว่า 1 ปี',
    other: 'มากกว่า {{count}} ปี'
  },
  almostXYears: {
    one: 'เกือบ 1 ปี',
    other: 'เกือบ {{count}} ปี'
  }
};
var formatDistance$i = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$9[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (token === 'halfAMinute') {
        return 'ใน' + result;
      } else {
        return 'ใน ' + result;
      }
    } else {
      return result + 'ที่ผ่านมา';
    }
  }
  return result;
};
var formatDistance$j = formatDistance$i;

var dateFormats$9 = {
  full: 'วันEEEEที่ do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var timeFormats$9 = {
  full: 'H:mm:ss น. zzzz',
  long: 'H:mm:ss น. z',
  medium: 'H:mm:ss น.',
  short: 'H:mm น.'
};
var dateTimeFormats$9 = {
  full: "{{date}} 'เวลา' {{time}}",
  long: "{{date}} 'เวลา' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$i = {
  date: buildFormatLongFn({
    formats: dateFormats$9,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$9,
    defaultWidth: 'medium'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$9,
    defaultWidth: 'full'
  })
};
var formatLong$j = formatLong$i;

var formatRelativeLocale$9 = {
  lastWeek: "eeee'ที่แล้วเวลา' p",
  yesterday: "'เมื่อวานนี้เวลา' p",
  today: "'วันนี้เวลา' p",
  tomorrow: "'พรุ่งนี้เวลา' p",
  nextWeek: "eeee 'เวลา' p",
  other: 'P'
};
var formatRelative$i = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$9[token];
};
var formatRelative$j = formatRelative$i;

var eraValues$9 = {
  narrow: ['B', 'คศ'],
  abbreviated: ['BC', 'ค.ศ.'],
  wide: ['ปีก่อนคริสตกาล', 'คริสต์ศักราช']
};
var quarterValues$9 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['ไตรมาสแรก', 'ไตรมาสที่สอง', 'ไตรมาสที่สาม', 'ไตรมาสที่สี่']
};
var dayValues$9 = {
  narrow: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
  short: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
  abbreviated: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
  wide: ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์']
};
var monthValues$9 = {
  narrow: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],
  abbreviated: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],
  wide: ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
};
var dayPeriodValues$9 = {
  narrow: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'เช้า',
    afternoon: 'บ่าย',
    evening: 'เย็น',
    night: 'กลางคืน'
  },
  abbreviated: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'เช้า',
    afternoon: 'บ่าย',
    evening: 'เย็น',
    night: 'กลางคืน'
  },
  wide: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'เช้า',
    afternoon: 'บ่าย',
    evening: 'เย็น',
    night: 'กลางคืน'
  }
};
var formattingDayPeriodValues$9 = {
  narrow: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'ตอนเช้า',
    afternoon: 'ตอนกลางวัน',
    evening: 'ตอนเย็น',
    night: 'ตอนกลางคืน'
  },
  abbreviated: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'ตอนเช้า',
    afternoon: 'ตอนกลางวัน',
    evening: 'ตอนเย็น',
    night: 'ตอนกลางคืน'
  },
  wide: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'ตอนเช้า',
    afternoon: 'ตอนกลางวัน',
    evening: 'ตอนเย็น',
    night: 'ตอนกลางคืน'
  }
};
var ordinalNumber$9 = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$i = {
  ordinalNumber: ordinalNumber$9,
  era: buildLocalizeFn({
    values: eraValues$9,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$9,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$9,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$9,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$9,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$9,
    defaultFormattingWidth: 'wide'
  })
};
var localize$j = localize$i;

var matchOrdinalNumberPattern$9 = /^\d+/i;
var parseOrdinalNumberPattern$9 = /\d+/i;
var matchEraPatterns$9 = {
  narrow: /^([bB]|[aA]|คศ)/i,
  abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|ค\.?ศ\.?)/i,
  wide: /^(ก่อนคริสตกาล|คริสต์ศักราช|คริสตกาล)/i
};
var parseEraPatterns$9 = {
  any: [/^[bB]/i, /^(^[aA]|ค\.?ศ\.?|คริสตกาล|คริสต์ศักราช|)/i]
};
var matchQuarterPatterns$9 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^ไตรมาส(ที่)? ?[1234]/i
};
var parseQuarterPatterns$9 = {
  any: [/(1|แรก|หนึ่ง)/i, /(2|สอง)/i, /(3|สาม)/i, /(4|สี่)/i]
};
var matchMonthPatterns$9 = {
  narrow: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?)/i,
  abbreviated: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?')/i,
  wide: /^(มกราคม|กุมภาพันธ์|มีนาคม|เมษายน|พฤษภาคม|มิถุนายน|กรกฎาคม|สิงหาคม|กันยายน|ตุลาคม|พฤศจิกายน|ธันวาคม)/i
};
var parseMonthPatterns$9 = {
  wide: [/^มก/i, /^กุม/i, /^มี/i, /^เม/i, /^พฤษ/i, /^มิ/i, /^กรก/i, /^ส/i, /^กัน/i, /^ต/i, /^พฤศ/i, /^ธ/i],
  any: [/^ม\.?ค\.?/i, /^ก\.?พ\.?/i, /^มี\.?ค\.?/i, /^เม\.?ย\.?/i, /^พ\.?ค\.?/i, /^มิ\.?ย\.?/i, /^ก\.?ค\.?/i, /^ส\.?ค\.?/i, /^ก\.?ย\.?/i, /^ต\.?ค\.?/i, /^พ\.?ย\.?/i, /^ธ\.?ค\.?/i]
};
var matchDayPatterns$9 = {
  narrow: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  short: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  abbreviated: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  wide: /^(อาทิตย์|จันทร์|อังคาร|พุธ|พฤหัสบดี|ศุกร์|เสาร์)/i
};
var parseDayPatterns$9 = {
  wide: [/^อา/i, /^จั/i, /^อั/i, /^พุธ/i, /^พฤ/i, /^ศ/i, /^เส/i],
  any: [/^อา/i, /^จ/i, /^อ/i, /^พ(?!ฤ)/i, /^พฤ/i, /^ศ/i, /^ส/i]
};
var matchDayPeriodPatterns$9 = {
  any: /^(ก่อนเที่ยง|หลังเที่ยง|เที่ยงคืน|เที่ยง|(ตอน.*?)?.*(เที่ยง|เช้า|บ่าย|เย็น|กลางคืน))/i
};
var parseDayPeriodPatterns$9 = {
  any: {
    am: /^ก่อนเที่ยง/i,
    pm: /^หลังเที่ยง/i,
    midnight: /^เที่ยงคืน/i,
    noon: /^เที่ยง/i,
    morning: /เช้า/i,
    afternoon: /บ่าย/i,
    evening: /เย็น/i,
    night: /กลางคืน/i
  }
};
var match$i = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$9,
    parsePattern: parseOrdinalNumberPattern$9,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$9,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$9,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$9,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$9,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$9,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$9,
    defaultParseWidth: 'any'
  })
};
var match$j = match$i;

/**
 * @type {Locale}
 * @category Locales
 * @summary Thai locale.
 * @language Thai
 * @iso-639-2 tha
 * @author Athiwat Hirunworawongkun [@athivvat]{@link https://github.com/athivvat}
 * @author [@hawkup]{@link https://github.com/hawkup}
 * @author  Jirawat I. [@nodtem66]{@link https://github.com/nodtem66}
 */
var locale$j = {
  code: 'th',
  formatDistance: formatDistance$j,
  formatLong: formatLong$j,
  formatRelative: formatRelative$j,
  localize: localize$j,
  match: match$j,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$k = locale$j;

var formatDistanceLocale$8 = {
  lessThanXSeconds: {
    one: 'bir saniyeden az',
    other: '{{count}} saniyeden az'
  },
  xSeconds: {
    one: '1 saniye',
    other: '{{count}} saniye'
  },
  halfAMinute: 'yarım dakika',
  lessThanXMinutes: {
    one: 'bir dakikadan az',
    other: '{{count}} dakikadan az'
  },
  xMinutes: {
    one: '1 dakika',
    other: '{{count}} dakika'
  },
  aboutXHours: {
    one: 'yaklaşık 1 saat',
    other: 'yaklaşık {{count}} saat'
  },
  xHours: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  xDays: {
    one: '1 gün',
    other: '{{count}} gün'
  },
  aboutXWeeks: {
    one: 'yaklaşık 1 hafta',
    other: 'yaklaşık {{count}} hafta'
  },
  xWeeks: {
    one: '1 hafta',
    other: '{{count}} hafta'
  },
  aboutXMonths: {
    one: 'yaklaşık 1 ay',
    other: 'yaklaşık {{count}} ay'
  },
  xMonths: {
    one: '1 ay',
    other: '{{count}} ay'
  },
  aboutXYears: {
    one: 'yaklaşık 1 yıl',
    other: 'yaklaşık {{count}} yıl'
  },
  xYears: {
    one: '1 yıl',
    other: '{{count}} yıl'
  },
  overXYears: {
    one: '1 yıldan fazla',
    other: '{{count}} yıldan fazla'
  },
  almostXYears: {
    one: 'neredeyse 1 yıl',
    other: 'neredeyse {{count}} yıl'
  }
};
var formatDistance$g = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$8[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' sonra';
    } else {
      return result + ' önce';
    }
  }
  return result;
};
var formatDistance$h = formatDistance$g;

var dateFormats$8 = {
  full: 'd MMMM y EEEE',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.yyyy'
};
var timeFormats$8 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$8 = {
  full: "{{date}} 'saat' {{time}}",
  long: "{{date}} 'saat' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$g = {
  date: buildFormatLongFn({
    formats: dateFormats$8,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$8,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$8,
    defaultWidth: 'full'
  })
};
var formatLong$h = formatLong$g;

var formatRelativeLocale$8 = {
  lastWeek: "'geçen hafta' eeee 'saat' p",
  yesterday: "'dün saat' p",
  today: "'bugün saat' p",
  tomorrow: "'yarın saat' p",
  nextWeek: "eeee 'saat' p",
  other: 'P'
};
var formatRelative$g = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$8[token];
};
var formatRelative$h = formatRelative$g;

var eraValues$8 = {
  narrow: ['MÖ', 'MS'],
  abbreviated: ['MÖ', 'MS'],
  wide: ['Milattan Önce', 'Milattan Sonra']
};
var quarterValues$8 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1Ç', '2Ç', '3Ç', '4Ç'],
  wide: ['İlk çeyrek', 'İkinci Çeyrek', 'Üçüncü çeyrek', 'Son çeyrek']
};
var monthValues$8 = {
  narrow: ['O', 'Ş', 'M', 'N', 'M', 'H', 'T', 'A', 'E', 'E', 'K', 'A'],
  abbreviated: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],
  wide: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık']
};
var dayValues$8 = {
  narrow: ['P', 'P', 'S', 'Ç', 'P', 'C', 'C'],
  short: ['Pz', 'Pt', 'Sa', 'Ça', 'Pe', 'Cu', 'Ct'],
  abbreviated: ['Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cts'],
  wide: ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi']
};
var dayPeriodValues$8 = {
  narrow: {
    am: 'öö',
    pm: 'ös',
    midnight: 'gy',
    noon: 'ö',
    morning: 'sa',
    afternoon: 'ös',
    evening: 'ak',
    night: 'ge'
  },
  abbreviated: {
    am: 'ÖÖ',
    pm: 'ÖS',
    midnight: 'gece yarısı',
    noon: 'öğle',
    morning: 'sabah',
    afternoon: 'öğleden sonra',
    evening: 'akşam',
    night: 'gece'
  },
  wide: {
    am: 'Ö.Ö.',
    pm: 'Ö.S.',
    midnight: 'gece yarısı',
    noon: 'öğle',
    morning: 'sabah',
    afternoon: 'öğleden sonra',
    evening: 'akşam',
    night: 'gece'
  }
};
var formattingDayPeriodValues$8 = {
  narrow: {
    am: 'öö',
    pm: 'ös',
    midnight: 'gy',
    noon: 'ö',
    morning: 'sa',
    afternoon: 'ös',
    evening: 'ak',
    night: 'ge'
  },
  abbreviated: {
    am: 'ÖÖ',
    pm: 'ÖS',
    midnight: 'gece yarısı',
    noon: 'öğlen',
    morning: 'sabahleyin',
    afternoon: 'öğleden sonra',
    evening: 'akşamleyin',
    night: 'geceleyin'
  },
  wide: {
    am: 'ö.ö.',
    pm: 'ö.s.',
    midnight: 'gece yarısı',
    noon: 'öğlen',
    morning: 'sabahleyin',
    afternoon: 'öğleden sonra',
    evening: 'akşamleyin',
    night: 'geceleyin'
  }
};
var ordinalNumber$8 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var localize$g = {
  ordinalNumber: ordinalNumber$8,
  era: buildLocalizeFn({
    values: eraValues$8,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$8,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$8,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$8,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$8,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$8,
    defaultFormattingWidth: 'wide'
  })
};
var localize$h = localize$g;

var matchOrdinalNumberPattern$8 = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$8 = /\d+/i;
var matchEraPatterns$8 = {
  narrow: /^(mö|ms)/i,
  abbreviated: /^(mö|ms)/i,
  wide: /^(milattan önce|milattan sonra)/i
};
var parseEraPatterns$8 = {
  any: [/(^mö|^milattan önce)/i, /(^ms|^milattan sonra)/i]
};
var matchQuarterPatterns$8 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]ç/i,
  wide: /^((i|İ)lk|(i|İ)kinci|üçüncü|son) çeyrek/i
};
var parseQuarterPatterns$8 = {
  any: [/1/i, /2/i, /3/i, /4/i],
  abbreviated: [/1ç/i, /2ç/i, /3ç/i, /4ç/i],
  wide: [/^(i|İ)lk çeyrek/i, /(i|İ)kinci çeyrek/i, /üçüncü çeyrek/i, /son çeyrek/i]
};
var matchMonthPatterns$8 = {
  narrow: /^[oşmnhtaek]/i,
  abbreviated: /^(oca|şub|mar|nis|may|haz|tem|ağu|eyl|eki|kas|ara)/i,
  wide: /^(ocak|şubat|mart|nisan|mayıs|haziran|temmuz|ağustos|eylül|ekim|kasım|aralık)/i
};
var parseMonthPatterns$8 = {
  narrow: [/^o/i, /^ş/i, /^m/i, /^n/i, /^m/i, /^h/i, /^t/i, /^a/i, /^e/i, /^e/i, /^k/i, /^a/i],
  any: [/^o/i, /^ş/i, /^mar/i, /^n/i, /^may/i, /^h/i, /^t/i, /^ağ/i, /^ey/i, /^ek/i, /^k/i, /^ar/i]
};
var matchDayPatterns$8 = {
  narrow: /^[psçc]/i,
  short: /^(pz|pt|sa|ça|pe|cu|ct)/i,
  abbreviated: /^(paz|pzt|sal|çar|per|cum|cts)/i,
  wide: /^(pazar(?!tesi)|pazartesi|salı|çarşamba|perşembe|cuma(?!rtesi)|cumartesi)/i
};
var parseDayPatterns$8 = {
  narrow: [/^p/i, /^p/i, /^s/i, /^ç/i, /^p/i, /^c/i, /^c/i],
  any: [/^pz/i, /^pt/i, /^sa/i, /^ça/i, /^pe/i, /^cu/i, /^ct/i],
  wide: [/^pazar(?!tesi)/i, /^pazartesi/i, /^salı/i, /^çarşamba/i, /^perşembe/i, /^cuma(?!rtesi)/i, /^cumartesi/i]
};
var matchDayPeriodPatterns$8 = {
  narrow: /^(öö|ös|gy|ö|sa|ös|ak|ge)/i,
  any: /^(ö\.?\s?[ös]\.?|öğleden sonra|gece yarısı|öğle|(sabah|öğ|akşam|gece)(leyin))/i
};
var parseDayPeriodPatterns$8 = {
  any: {
    am: /^ö\.?ö\.?/i,
    pm: /^ö\.?s\.?/i,
    midnight: /^(gy|gece yarısı)/i,
    noon: /^öğ/i,
    morning: /^sa/i,
    afternoon: /^öğleden sonra/i,
    evening: /^ak/i,
    night: /^ge/i
  }
};
var match$g = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$8,
    parsePattern: parseOrdinalNumberPattern$8,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$8,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$8,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$8,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$8,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$8,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$8,
    defaultParseWidth: 'any'
  })
};
var match$h = match$g;

/**
 * @type {Locale}
 * @category Locales
 * @summary Turkish locale.
 * @language Turkish
 * @iso-639-2 tur
 * @author Alpcan Aydın [@alpcanaydin]{@link https://github.com/alpcanaydin}
 * @author Berkay Sargın [@berkaey]{@link https://github.com/berkaey}
 * @author Fatih Bulut [@bulutfatih]{@link https://github.com/bulutfatih}
 * @author Ismail Demirbilek [@dbtek]{@link https://github.com/dbtek}
 * @author İsmail Kayar [@ikayar]{@link https://github.com/ikayar}
 *
 *
 */
var locale$h = {
  code: 'tr',
  formatDistance: formatDistance$h,
  formatLong: formatLong$h,
  formatRelative: formatRelative$h,
  localize: localize$h,
  match: match$h,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$i = locale$h;

var formatDistanceLocale$7 = {
  lessThanXSeconds: {
    one: 'بىر سىكۇنت ئىچىدە',
    other: 'سىكۇنت ئىچىدە {{count}}'
  },
  xSeconds: {
    one: 'بىر سىكۇنت',
    other: 'سىكۇنت {{count}}'
  },
  halfAMinute: 'يىرىم مىنۇت',
  lessThanXMinutes: {
    one: 'بىر مىنۇت ئىچىدە',
    other: 'مىنۇت ئىچىدە {{count}}'
  },
  xMinutes: {
    one: 'بىر مىنۇت',
    other: 'مىنۇت {{count}}'
  },
  aboutXHours: {
    one: 'تەخمىنەن بىر سائەت',
    other: 'سائەت {{count}} تەخمىنەن'
  },
  xHours: {
    one: 'بىر سائەت',
    other: 'سائەت {{count}}'
  },
  xDays: {
    one: 'بىر كۈن',
    other: 'كۈن {{count}}'
  },
  aboutXWeeks: {
    one: 'تەخمىنەن بىرھەپتە',
    other: 'ھەپتە {{count}} تەخمىنەن'
  },
  xWeeks: {
    one: 'بىرھەپتە',
    other: 'ھەپتە {{count}}'
  },
  aboutXMonths: {
    one: 'تەخمىنەن بىر ئاي',
    other: 'ئاي {{count}} تەخمىنەن'
  },
  xMonths: {
    one: 'بىر ئاي',
    other: 'ئاي {{count}}'
  },
  aboutXYears: {
    one: 'تەخمىنەن بىر يىل',
    other: 'يىل {{count}} تەخمىنەن'
  },
  xYears: {
    one: 'بىر يىل',
    other: 'يىل {{count}}'
  },
  overXYears: {
    one: 'بىر يىلدىن ئارتۇق',
    other: 'يىلدىن ئارتۇق {{count}}'
  },
  almostXYears: {
    one: 'ئاساسەن بىر يىل',
    other: 'يىل {{count}} ئاساسەن'
  }
};
var formatDistance$e = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$7[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result;
    } else {
      return result + ' بولدى';
    }
  }
  return result;
};
var formatDistance$f = formatDistance$e;

var dateFormats$7 = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$7 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$7 = {
  full: "{{date}} 'دە' {{time}}",
  long: "{{date}} 'دە' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$e = {
  date: buildFormatLongFn({
    formats: dateFormats$7,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$7,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$7,
    defaultWidth: 'full'
  })
};
var formatLong$f = formatLong$e;

var formatRelativeLocale$7 = {
  lastWeek: "'ئ‍ۆتكەن' eeee 'دە' p",
  yesterday: "'تۈنۈگۈن دە' p",
  today: "'بۈگۈن دە' p",
  tomorrow: "'ئەتە دە' p",
  nextWeek: "eeee 'دە' p",
  other: 'P'
};
var formatRelative$e = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$7[token];
};
var formatRelative$f = formatRelative$e;

var eraValues$7 = {
  narrow: ['ب', 'ك'],
  abbreviated: ['ب', 'ك'],
  wide: ['مىيلادىدىن بۇرۇن', 'مىيلادىدىن كىيىن']
};
var quarterValues$7 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1', '2', '3', '4'],
  wide: ['بىرىنجى چارەك', 'ئىككىنجى چارەك', 'ئۈچىنجى چارەك', 'تۆتىنجى چارەك']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$7 = {
  narrow: ['ي', 'ف', 'م', 'ا', 'م', 'ى', 'ى', 'ا', 'س', 'ۆ', 'ن', 'د'],
  abbreviated: ['يانۋار', 'فېۋىرال', 'مارت', 'ئاپرىل', 'ماي', 'ئىيۇن', 'ئىيول', 'ئاۋغۇست', 'سىنتەبىر', 'ئۆكتەبىر', 'نويابىر', 'دىكابىر'],
  wide: ['يانۋار', 'فېۋىرال', 'مارت', 'ئاپرىل', 'ماي', 'ئىيۇن', 'ئىيول', 'ئاۋغۇست', 'سىنتەبىر', 'ئۆكتەبىر', 'نويابىر', 'دىكابىر']
};
var dayValues$7 = {
  narrow: ['ي', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
  short: ['ي', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
  abbreviated: ['يەكشەنبە', 'دۈشەنبە', 'سەيشەنبە', 'چارشەنبە', 'پەيشەنبە', 'جۈمە', 'شەنبە'],
  wide: ['يەكشەنبە', 'دۈشەنبە', 'سەيشەنبە', 'چارشەنبە', 'پەيشەنبە', 'جۈمە', 'شەنبە']
};
var dayPeriodValues$7 = {
  narrow: {
    am: 'ئە',
    pm: 'چ',
    midnight: 'ك',
    noon: 'چ',
    morning: 'ئەتىگەن',
    afternoon: 'چۈشتىن كىيىن',
    evening: 'ئاخشىم',
    night: 'كىچە'
  },
  abbreviated: {
    am: 'ئە',
    pm: 'چ',
    midnight: 'ك',
    noon: 'چ',
    morning: 'ئەتىگەن',
    afternoon: 'چۈشتىن كىيىن',
    evening: 'ئاخشىم',
    night: 'كىچە'
  },
  wide: {
    am: 'ئە',
    pm: 'چ',
    midnight: 'ك',
    noon: 'چ',
    morning: 'ئەتىگەن',
    afternoon: 'چۈشتىن كىيىن',
    evening: 'ئاخشىم',
    night: 'كىچە'
  }
};
var formattingDayPeriodValues$7 = {
  narrow: {
    am: 'ئە',
    pm: 'چ',
    midnight: 'ك',
    noon: 'چ',
    morning: 'ئەتىگەندە',
    afternoon: 'چۈشتىن كىيىن',
    evening: 'ئاخشامدا',
    night: 'كىچىدە'
  },
  abbreviated: {
    am: 'ئە',
    pm: 'چ',
    midnight: 'ك',
    noon: 'چ',
    morning: 'ئەتىگەندە',
    afternoon: 'چۈشتىن كىيىن',
    evening: 'ئاخشامدا',
    night: 'كىچىدە'
  },
  wide: {
    am: 'ئە',
    pm: 'چ',
    midnight: 'ك',
    noon: 'چ',
    morning: 'ئەتىگەندە',
    afternoon: 'چۈشتىن كىيىن',
    evening: 'ئاخشامدا',
    night: 'كىچىدە'
  }
};
var ordinalNumber$7 = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$e = {
  ordinalNumber: ordinalNumber$7,
  era: buildLocalizeFn({
    values: eraValues$7,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$7,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$7,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$7,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$7,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$7,
    defaultFormattingWidth: 'wide'
  })
};
var localize$f = localize$e;

var matchOrdinalNumberPattern$7 = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$7 = /\d+/i;
var matchEraPatterns$7 = {
  narrow: /^(ب|ك)/i,
  wide: /^(مىيلادىدىن بۇرۇن|مىيلادىدىن كىيىن)/i
};
var parseEraPatterns$7 = {
  any: [/^بۇرۇن/i, /^كىيىن/i]
};
var matchQuarterPatterns$7 = {
  narrow: /^[1234]/i,
  abbreviated: /^چ[1234]/i,
  wide: /^چارەك [1234]/i
};
var parseQuarterPatterns$7 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$7 = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[يفمئامئ‍ئاسۆند]/i,
  abbreviated: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i,
  wide: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i
};
var parseMonthPatterns$7 = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^ا/i, /^م/i, /^ى‍/i, /^ى‍/i, /^ا‍/i, /^س/i, /^ۆ/i, /^ن/i, /^د/i],
  any: [/^يان/i, /^فېۋ/i, /^مار/i, /^ئاپ/i, /^ماي/i, /^ئىيۇن/i, /^ئىيول/i, /^ئاۋ/i, /^سىن/i, /^ئۆك/i, /^نوي/i, /^دىك/i]
};
var matchDayPatterns$7 = {
  narrow: /^[دسچپجشي]/i,
  short: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
  abbreviated: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
  wide: /^(يەكشەنبە|دۈشەنبە|سەيشەنبە|چارشەنبە|پەيشەنبە|جۈمە|شەنبە)/i
};
var parseDayPatterns$7 = {
  narrow: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
  any: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i]
};
var matchDayPeriodPatterns$7 = {
  narrow: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i,
  any: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i
};
var parseDayPeriodPatterns$7 = {
  any: {
    am: /^ئە/i,
    pm: /^چ/i,
    midnight: /^ك/i,
    noon: /^چ/i,
    morning: /ئەتىگەن/i,
    afternoon: /چۈشتىن كىيىن/i,
    evening: /ئاخشىم/i,
    night: /كىچە/i
  }
};
var match$e = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$7,
    parsePattern: parseOrdinalNumberPattern$7,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$7,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$7,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$7,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$7,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$7,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$7,
    defaultParseWidth: 'any'
  })
};
var match$f = match$e;

/**
 * @type {Locale}
 * @category Locales
 * @summary Uighur locale
 * @language Uighur
 * @iso-639-2 uig
 * @author Abduwaly M. [@abduwaly]{@link https://github.com/abduwaly}
 */
var locale$f = {
  code: 'ug',
  formatDistance: formatDistance$f,
  formatLong: formatLong$f,
  formatRelative: formatRelative$f,
  localize: localize$f,
  match: match$f,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$g = locale$f;

function declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function buildLocalizeTokenFn(scheme) {
  return function (count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension(scheme.future, count);
        } else {
          return 'за ' + declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension(scheme.past, count);
        } else {
          return declension(scheme.regular, count) + ' тому';
        }
      }
    } else {
      return declension(scheme.regular, count);
    }
  };
}
var halfAtMinute = function halfAtMinute(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'за півхвилини';
    } else {
      return 'півхвилини тому';
    }
  }
  return 'півхвилини';
};
var formatDistanceLocale$6 = {
  lessThanXSeconds: buildLocalizeTokenFn({
    regular: {
      one: 'менше секунди',
      singularNominative: 'менше {{count}} секунди',
      singularGenitive: 'менше {{count}} секунд',
      pluralGenitive: 'менше {{count}} секунд'
    },
    future: {
      one: 'менше, ніж за секунду',
      singularNominative: 'менше, ніж за {{count}} секунду',
      singularGenitive: 'менше, ніж за {{count}} секунди',
      pluralGenitive: 'менше, ніж за {{count}} секунд'
    }
  }),
  xSeconds: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} секунда',
      singularGenitive: '{{count}} секунди',
      pluralGenitive: '{{count}} секунд'
    },
    past: {
      singularNominative: '{{count}} секунду тому',
      singularGenitive: '{{count}} секунди тому',
      pluralGenitive: '{{count}} секунд тому'
    },
    future: {
      singularNominative: 'за {{count}} секунду',
      singularGenitive: 'за {{count}} секунди',
      pluralGenitive: 'за {{count}} секунд'
    }
  }),
  halfAMinute: halfAtMinute,
  lessThanXMinutes: buildLocalizeTokenFn({
    regular: {
      one: 'менше хвилини',
      singularNominative: 'менше {{count}} хвилини',
      singularGenitive: 'менше {{count}} хвилин',
      pluralGenitive: 'менше {{count}} хвилин'
    },
    future: {
      one: 'менше, ніж за хвилину',
      singularNominative: 'менше, ніж за {{count}} хвилину',
      singularGenitive: 'менше, ніж за {{count}} хвилини',
      pluralGenitive: 'менше, ніж за {{count}} хвилин'
    }
  }),
  xMinutes: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} хвилина',
      singularGenitive: '{{count}} хвилини',
      pluralGenitive: '{{count}} хвилин'
    },
    past: {
      singularNominative: '{{count}} хвилину тому',
      singularGenitive: '{{count}} хвилини тому',
      pluralGenitive: '{{count}} хвилин тому'
    },
    future: {
      singularNominative: 'за {{count}} хвилину',
      singularGenitive: 'за {{count}} хвилини',
      pluralGenitive: 'за {{count}} хвилин'
    }
  }),
  aboutXHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'близько {{count}} години',
      singularGenitive: 'близько {{count}} годин',
      pluralGenitive: 'близько {{count}} годин'
    },
    future: {
      singularNominative: 'приблизно за {{count}} годину',
      singularGenitive: 'приблизно за {{count}} години',
      pluralGenitive: 'приблизно за {{count}} годин'
    }
  }),
  xHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} годину',
      singularGenitive: '{{count}} години',
      pluralGenitive: '{{count}} годин'
    }
  }),
  xDays: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} день',
      singularGenitive: '{{count}} днi',
      pluralGenitive: '{{count}} днів'
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'близько {{count}} тижня',
      singularGenitive: 'близько {{count}} тижнів',
      pluralGenitive: 'близько {{count}} тижнів'
    },
    future: {
      singularNominative: 'приблизно за {{count}} тиждень',
      singularGenitive: 'приблизно за {{count}} тижні',
      pluralGenitive: 'приблизно за {{count}} тижнів'
    }
  }),
  xWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} тиждень',
      singularGenitive: '{{count}} тижні',
      pluralGenitive: '{{count}} тижнів'
    }
  }),
  aboutXMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'близько {{count}} місяця',
      singularGenitive: 'близько {{count}} місяців',
      pluralGenitive: 'близько {{count}} місяців'
    },
    future: {
      singularNominative: 'приблизно за {{count}} місяць',
      singularGenitive: 'приблизно за {{count}} місяці',
      pluralGenitive: 'приблизно за {{count}} місяців'
    }
  }),
  xMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} місяць',
      singularGenitive: '{{count}} місяці',
      pluralGenitive: '{{count}} місяців'
    }
  }),
  aboutXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'близько {{count}} року',
      singularGenitive: 'близько {{count}} років',
      pluralGenitive: 'близько {{count}} років'
    },
    future: {
      singularNominative: 'приблизно за {{count}} рік',
      singularGenitive: 'приблизно за {{count}} роки',
      pluralGenitive: 'приблизно за {{count}} років'
    }
  }),
  xYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} рік',
      singularGenitive: '{{count}} роки',
      pluralGenitive: '{{count}} років'
    }
  }),
  overXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'більше {{count}} року',
      singularGenitive: 'більше {{count}} років',
      pluralGenitive: 'більше {{count}} років'
    },
    future: {
      singularNominative: 'більше, ніж за {{count}} рік',
      singularGenitive: 'більше, ніж за {{count}} роки',
      pluralGenitive: 'більше, ніж за {{count}} років'
    }
  }),
  almostXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'майже {{count}} рік',
      singularGenitive: 'майже {{count}} роки',
      pluralGenitive: 'майже {{count}} років'
    },
    future: {
      singularNominative: 'майже за {{count}} рік',
      singularGenitive: 'майже за {{count}} роки',
      pluralGenitive: 'майже за {{count}} років'
    }
  })
};
var formatDistance$c = function formatDistance(token, count, options) {
  options = options || {};
  return formatDistanceLocale$6[token](count, options);
};
var formatDistance$d = formatDistance$c;

var dateFormats$6 = {
  full: "EEEE, do MMMM y 'р.'",
  long: "do MMMM y 'р.'",
  medium: "d MMM y 'р.'",
  short: 'dd.MM.y'
};
var timeFormats$6 = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$6 = {
  full: "{{date}} 'о' {{time}}",
  long: "{{date}} 'о' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$c = {
  date: buildFormatLongFn({
    formats: dateFormats$6,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$6,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$6,
    defaultWidth: 'full'
  })
};
var formatLong$d = formatLong$c;

var accusativeWeekdays = ['неділю', 'понеділок', 'вівторок', 'середу', 'четвер', 'п’ятницю', 'суботу'];
function lastWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у минулу " + weekday + " о' p";
    case 1:
    case 2:
    case 4:
      return "'у минулий " + weekday + " о' p";
  }
}
function thisWeek(day) {
  var weekday = accusativeWeekdays[day];
  return "'у " + weekday + " о' p";
}
function nextWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у наступну " + weekday + " о' p";
    case 1:
    case 2:
    case 4:
      return "'у наступний " + weekday + " о' p";
  }
}
var lastWeekFormat = function lastWeekFormat(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return lastWeek(day);
  }
};
var nextWeekFormat = function nextWeekFormat(dirtyDate, baseDate, options) {
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return nextWeek(day);
  }
};
var formatRelativeLocale$6 = {
  lastWeek: lastWeekFormat,
  yesterday: "'вчора о' p",
  today: "'сьогодні о' p",
  tomorrow: "'завтра о' p",
  nextWeek: nextWeekFormat,
  other: 'P'
};
var formatRelative$c = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$6[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$d = formatRelative$c;

var eraValues$6 = {
  narrow: ['до н.е.', 'н.е.'],
  abbreviated: ['до н. е.', 'н. е.'],
  wide: ['до нашої ери', 'нашої ери']
};
var quarterValues$6 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-й кв.', '2-й кв.', '3-й кв.', '4-й кв.'],
  wide: ['1-й квартал', '2-й квартал', '3-й квартал', '4-й квартал']
};
var monthValues$6 = {
  // ДСТУ 3582:2013
  narrow: ['С', 'Л', 'Б', 'К', 'Т', 'Ч', 'Л', 'С', 'В', 'Ж', 'Л', 'Г'],
  abbreviated: ['січ.', 'лют.', 'берез.', 'квіт.', 'трав.', 'черв.', 'лип.', 'серп.', 'верес.', 'жовт.', 'листоп.', 'груд.'],
  wide: ['січень', 'лютий', 'березень', 'квітень', 'травень', 'червень', 'липень', 'серпень', 'вересень', 'жовтень', 'листопад', 'грудень']
};
var formattingMonthValues$1 = {
  narrow: ['С', 'Л', 'Б', 'К', 'Т', 'Ч', 'Л', 'С', 'В', 'Ж', 'Л', 'Г'],
  abbreviated: ['січ.', 'лют.', 'берез.', 'квіт.', 'трав.', 'черв.', 'лип.', 'серп.', 'верес.', 'жовт.', 'листоп.', 'груд.'],
  wide: ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня']
};
var dayValues$6 = {
  narrow: ['Н', 'П', 'В', 'С', 'Ч', 'П', 'С'],
  short: ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
  abbreviated: ['нед', 'пон', 'вів', 'сер', 'чтв', 'птн', 'суб'],
  wide: ['неділя', 'понеділок', 'вівторок', 'середа', 'четвер', 'п’ятниця', 'субота']
};
var dayPeriodValues$6 = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранок',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ніч'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранок',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ніч'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'північ',
    noon: 'полудень',
    morning: 'ранок',
    afternoon: 'день',
    evening: 'вечір',
    night: 'ніч'
  }
};
var formattingDayPeriodValues$6 = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранку',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночі'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранку',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночі'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'північ',
    noon: 'полудень',
    morning: 'ранку',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночі'
  }
};
var ordinalNumber$6 = function ordinalNumber(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;
  if (unit === 'date') {
    if (number === 3 || number === 23) {
      suffix = '-є';
    } else {
      suffix = '-е';
    }
  } else if (unit === 'minute' || unit === 'second' || unit === 'hour') {
    suffix = '-а';
  } else {
    suffix = '-й';
  }
  return number + suffix;
};
var localize$c = {
  ordinalNumber: ordinalNumber$6,
  era: buildLocalizeFn({
    values: eraValues$6,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$6,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$6,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$1,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$6,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$6,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$6,
    defaultFormattingWidth: 'wide'
  })
};
var localize$d = localize$c;

var matchOrdinalNumberPattern$6 = /^(\d+)(-?(е|й|є|а|я))?/i;
var parseOrdinalNumberPattern$6 = /\d+/i;
var matchEraPatterns$6 = {
  narrow: /^((до )?н\.?\s?е\.?)/i,
  abbreviated: /^((до )?н\.?\s?е\.?)/i,
  wide: /^(до нашої ери|нашої ери|наша ера)/i
};
var parseEraPatterns$6 = {
  any: [/^д/i, /^н/i]
};
var matchQuarterPatterns$6 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[иі]?й?)? кв.?/i,
  wide: /^[1234](-?[иі]?й?)? квартал/i
};
var parseQuarterPatterns$6 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$6 = {
  narrow: /^[слбктчвжг]/i,
  abbreviated: /^(січ|лют|бер(ез)?|квіт|трав|черв|лип|серп|вер(ес)?|жовт|лис(топ)?|груд)\.?/i,
  wide: /^(січень|січня|лютий|лютого|березень|березня|квітень|квітня|травень|травня|червня|червень|липень|липня|серпень|серпня|вересень|вересня|жовтень|жовтня|листопад[а]?|грудень|грудня)/i
};
var parseMonthPatterns$6 = {
  narrow: [/^с/i, /^л/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^л/i, /^с/i, /^в/i, /^ж/i, /^л/i, /^г/i],
  any: [/^сі/i, /^лю/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^лип/i, /^се/i, /^в/i, /^ж/i, /^лис/i, /^г/i]
};
var matchDayPatterns$6 = {
  narrow: /^[нпвсч]/i,
  short: /^(нд|пн|вт|ср|чт|пт|сб)\.?/i,
  abbreviated: /^(нед|пон|вів|сер|че?тв|птн?|суб)\.?/i,
  wide: /^(неділ[яі]|понеділ[ок][ка]|вівтор[ок][ка]|серед[аи]|четвер(га)?|п\W*?ятниц[яі]|субот[аи])/i
};
var parseDayPatterns$6 = {
  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н/i, /^п[он]/i, /^в/i, /^с[ер]/i, /^ч/i, /^п\W*?[ят]/i, /^с[уб]/i]
};
var matchDayPeriodPatterns$6 = {
  narrow: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
  abbreviated: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
  wide: /^([дп]п|північ|полудень|ранок|ранку|день|дня|вечір|вечора|ніч|ночі)/i
};
var parseDayPeriodPatterns$6 = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^півн/i,
    noon: /^пол/i,
    morning: /^р/i,
    afternoon: /^д[ен]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var match$c = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$6,
    parsePattern: parseOrdinalNumberPattern$6,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$6,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$6,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$6,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$6,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$6,
    defaultParseWidth: 'any'
  })
};
var match$d = match$c;

/**
 * @type {Locale}
 * @category Locales
 * @summary Ukrainian locale.
 * @language Ukrainian
 * @iso-639-2 ukr
 * @author Andrii Korzh [@korzhyk]{@link https://github.com/korzhyk}
 * @author Andriy Shcherbyak [@shcherbyakdev]{@link https://github.com/shcherbyakdev}
 */
var locale$d = {
  code: 'uk',
  formatDistance: formatDistance$d,
  formatLong: formatLong$d,
  formatRelative: formatRelative$d,
  localize: localize$d,
  match: match$d,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$e = locale$d;

var formatDistanceLocale$5 = {
  lessThanXSeconds: {
    one: 'sekunddan kam',
    other: '{{count}} sekunddan kam'
  },
  xSeconds: {
    one: '1 sekund',
    other: '{{count}} sekund'
  },
  halfAMinute: 'yarim minut',
  lessThanXMinutes: {
    one: 'bir minutdan kam',
    other: '{{count}} minutdan kam'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minut'
  },
  aboutXHours: {
    one: 'tahminan 1 soat',
    other: 'tahminan {{count}} soat'
  },
  xHours: {
    one: '1 soat',
    other: '{{count}} soat'
  },
  xDays: {
    one: '1 kun',
    other: '{{count}} kun'
  },
  aboutXWeeks: {
    one: 'tahminan 1 hafta',
    other: 'tahminan {{count}} hafta'
  },
  xWeeks: {
    one: '1 hafta',
    other: '{{count}} hafta'
  },
  aboutXMonths: {
    one: 'tahminan 1 oy',
    other: 'tahminan {{count}} oy'
  },
  xMonths: {
    one: '1 oy',
    other: '{{count}} oy'
  },
  aboutXYears: {
    one: 'tahminan 1 yil',
    other: 'tahminan {{count}} yil'
  },
  xYears: {
    one: '1 yil',
    other: '{{count}} yil'
  },
  overXYears: {
    one: "1 yildan ko'p",
    other: "{{count}} yildan ko'p"
  },
  almostXYears: {
    one: 'deyarli 1 yil',
    other: 'deyarli {{count}} yil'
  }
};
var formatDistance$a = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$5[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' dan keyin';
    } else {
      return result + ' oldin';
    }
  }
  return result;
};
var formatDistance$b = formatDistance$a;

var dateFormats$5 = {
  full: 'EEEE, do MMMM, y',
  long: 'do MMMM, y',
  medium: 'd MMM, y',
  short: 'dd/MM/yyyy'
};
var timeFormats$5 = {
  full: 'h:mm:ss zzzz',
  long: 'h:mm:ss z',
  medium: 'h:mm:ss',
  short: 'h:mm'
};
var dateTimeFormats$5 = {
  any: '{{date}}, {{time}}'
};
var formatLong$a = {
  date: buildFormatLongFn({
    formats: dateFormats$5,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$5,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$5,
    defaultWidth: 'any'
  })
};
var formatLong$b = formatLong$a;

var formatRelativeLocale$5 = {
  lastWeek: "'oldingi' eeee p 'da'",
  yesterday: "'kecha' p 'da'",
  today: "'bugun' p 'da'",
  tomorrow: "'ertaga' p 'da'",
  nextWeek: "eeee p 'da'",
  other: 'P'
};
var formatRelative$a = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$5[token];
};
var formatRelative$b = formatRelative$a;

var eraValues$5 = {
  narrow: ['M.A', 'M.'],
  abbreviated: ['M.A', 'M.'],
  wide: ['Miloddan Avvalgi', 'Milodiy']
};
var quarterValues$5 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['CH.1', 'CH.2', 'CH.3', 'CH.4'],
  wide: ['1-chi chorak', '2-chi chorak', '3-chi chorak', '4-chi chorak']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$5 = {
  narrow: ['Y', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'Iyun', 'Iyul', 'Avg', 'Sen', 'Okt', 'Noy', 'Dek'],
  wide: ['Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'Iyun', 'Iyul', 'Avgust', 'Sentabr', 'Oktabr', 'Noyabr', 'Dekabr']
};
var dayValues$5 = {
  narrow: ['Y', 'D', 'S', 'CH', 'P', 'J', 'SH'],
  short: ['Ya', 'Du', 'Se', 'Cho', 'Pa', 'Ju', 'Sha'],
  abbreviated: ['Yak', 'Dush', 'Sesh', 'Chor', 'Pay', 'Jum', 'Shan'],
  wide: ['Yakshanba', 'Dushanba', 'Seshanba', 'Chorshanba', 'Payshanba', 'Juma', 'Shanba']
};
var dayPeriodValues$5 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'y.t',
    noon: 'p.',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  }
};
var formattingDayPeriodValues$5 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'y.t',
    noon: 'p.',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  }
};
var ordinalNumber$5 = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$a = {
  ordinalNumber: ordinalNumber$5,
  era: buildLocalizeFn({
    values: eraValues$5,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$5,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$5,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$5,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$5,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$5,
    defaultFormattingWidth: 'wide'
  })
};
var localize$b = localize$a;

var matchOrdinalNumberPattern$5 = /^(\d+)(chi)?/i;
var parseOrdinalNumberPattern$5 = /\d+/i;
var matchEraPatterns$5 = {
  narrow: /^(m\.a|m\.)/i,
  abbreviated: /^(m\.a\.?\s?m\.?)/i,
  wide: /^(miloddan avval|miloddan keyin)/i
};
var parseEraPatterns$5 = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$5 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](chi)? chorak/i
};
var parseQuarterPatterns$5 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$5 = {
  narrow: /^[yfmasond]/i,
  abbreviated: /^(yan|fev|mar|apr|may|iyun|iyul|avg|sen|okt|noy|dek)/i,
  wide: /^(yanvar|fevral|mart|aprel|may|iyun|iyul|avgust|sentabr|oktabr|noyabr|dekabr)/i
};
var parseMonthPatterns$5 = {
  narrow: [/^y/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ya/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^iyun/i, /^iyul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$5 = {
  narrow: /^[ydschj]/i,
  short: /^(ya|du|se|cho|pa|ju|sha)/i,
  abbreviated: /^(yak|dush|sesh|chor|pay|jum|shan)/i,
  wide: /^(yakshanba|dushanba|seshanba|chorshanba|payshanba|juma|shanba)/i
};
var parseDayPatterns$5 = {
  narrow: [/^y/i, /^d/i, /^s/i, /^ch/i, /^p/i, /^j/i, /^sh/i],
  any: [/^ya/i, /^d/i, /^se/i, /^ch/i, /^p/i, /^j/i, /^sh/i]
};
var matchDayPeriodPatterns$5 = {
  narrow: /^(a|p|y\.t|p| (ertalab|tushdan keyin|kechqurun|tun))/i,
  any: /^([ap]\.?\s?m\.?|yarim tun|peshin| (ertalab|tushdan keyin|kechqurun|tun))/i
};
var parseDayPeriodPatterns$5 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^y\.t/i,
    noon: /^pe/i,
    morning: /ertalab/i,
    afternoon: /tushdan keyin/i,
    evening: /kechqurun/i,
    night: /tun/i
  }
};
var match$a = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$5,
    parsePattern: parseOrdinalNumberPattern$5,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$5,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$5,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$5,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$5,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$5,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$5,
    defaultParseWidth: 'any'
  })
};
var match$b = match$a;

/**
 * @type {Locale}
 * @category Locales
 * @summary Uzbek locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Mukhammadali [@mukhammadali]{@link https://github.com/Mukhammadali}
 */
var locale$b = {
  code: 'uz',
  formatDistance: formatDistance$b,
  formatLong: formatLong$b,
  formatRelative: formatRelative$b,
  localize: localize$b,
  match: match$b,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$c = locale$b;

var formatDistanceLocale$4 = {
  lessThanXSeconds: {
    one: '1 сониядан кам',
    other: '{{count}} сониядан кам'
  },
  xSeconds: {
    one: '1 сония',
    other: '{{count}} сония'
  },
  halfAMinute: 'ярим дақиқа',
  lessThanXMinutes: {
    one: '1 дақиқадан кам',
    other: '{{count}} дақиқадан кам'
  },
  xMinutes: {
    one: '1 дақиқа',
    other: '{{count}} дақиқа'
  },
  aboutXHours: {
    one: 'тахминан 1 соат',
    other: 'тахминан {{count}} соат'
  },
  xHours: {
    one: '1 соат',
    other: '{{count}} соат'
  },
  xDays: {
    one: '1 кун',
    other: '{{count}} кун'
  },
  aboutXWeeks: {
    one: 'тахминан 1 хафта',
    other: 'тахминан {{count}} хафта'
  },
  xWeeks: {
    one: '1 хафта',
    other: '{{count}} хафта'
  },
  aboutXMonths: {
    one: 'тахминан 1 ой',
    other: 'тахминан {{count}} ой'
  },
  xMonths: {
    one: '1 ой',
    other: '{{count}} ой'
  },
  aboutXYears: {
    one: 'тахминан 1 йил',
    other: 'тахминан {{count}} йил'
  },
  xYears: {
    one: '1 йил',
    other: '{{count}} йил'
  },
  overXYears: {
    one: '1 йилдан кўп',
    other: '{{count}} йилдан кўп'
  },
  almostXYears: {
    one: 'деярли 1 йил',
    other: 'деярли {{count}} йил'
  }
};
var formatDistance$8 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$4[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'дан кейин';
    } else {
      return result + ' олдин';
    }
  }
  return result;
};
var formatDistance$9 = formatDistance$8;

var dateFormats$4 = {
  full: 'EEEE, do MMMM, y',
  long: 'do MMMM, y',
  medium: 'd MMM, y',
  short: 'dd/MM/yyyy'
};
var timeFormats$4 = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$4 = {
  any: '{{date}}, {{time}}'
};
var formatLong$8 = {
  date: buildFormatLongFn({
    formats: dateFormats$4,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$4,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$4,
    defaultWidth: 'any'
  })
};
var formatLong$9 = formatLong$8;

var formatRelativeLocale$4 = {
  lastWeek: "'ўтган' eeee p 'да'",
  yesterday: "'кеча' p 'да'",
  today: "'бугун' p 'да'",
  tomorrow: "'эртага' p 'да'",
  nextWeek: "eeee p 'да'",
  other: 'P'
};
var formatRelative$8 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$4[token];
};
var formatRelative$9 = formatRelative$8;

var eraValues$4 = {
  narrow: ['М.А', 'М'],
  abbreviated: ['М.А', 'М'],
  wide: ['Милоддан Аввалги', 'Милодий']
};
var quarterValues$4 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-чор.', '2-чор.', '3-чор.', '4-чор.'],
  wide: ['1-чорак', '2-чорак', '3-чорак', '4-чорак']
};
var monthValues$4 = {
  narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],
  abbreviated: ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'],
  wide: ['январ', 'феврал', 'март', 'апрел', 'май', 'июн', 'июл', 'август', 'сентабр', 'октабр', 'ноябр', 'декабр']
};
var dayValues$4 = {
  narrow: ['Я', 'Д', 'С', 'Ч', 'П', 'Ж', 'Ш'],
  short: ['як', 'ду', 'се', 'чо', 'па', 'жу', 'ша'],
  abbreviated: ['якш', 'душ', 'сеш', 'чор', 'пай', 'жум', 'шан'],
  wide: ['якшанба', 'душанба', 'сешанба', 'чоршанба', 'пайшанба', 'жума', 'шанба']
};
var dayPeriodValues$4 = {
  any: {
    am: 'П.О.',
    pm: 'П.К.',
    midnight: 'ярим тун',
    noon: 'пешин',
    morning: 'эрталаб',
    afternoon: 'пешиндан кейин',
    evening: 'кечаси',
    night: 'тун'
  }
};
var formattingDayPeriodValues$4 = {
  any: {
    am: 'П.О.',
    pm: 'П.К.',
    midnight: 'ярим тун',
    noon: 'пешин',
    morning: 'эрталаб',
    afternoon: 'пешиндан кейин',
    evening: 'кечаси',
    night: 'тун'
  }
};
var ordinalNumber$4 = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var localize$8 = {
  ordinalNumber: ordinalNumber$4,
  era: buildLocalizeFn({
    values: eraValues$4,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$4,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$4,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$4,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$4,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$4,
    defaultFormattingWidth: 'any'
  })
};
var localize$9 = localize$8;

var matchOrdinalNumberPattern$4 = /^(\d+)(чи)?/i;
var parseOrdinalNumberPattern$4 = /\d+/i;
var matchEraPatterns$4 = {
  narrow: /^(м\.а|м\.)/i,
  abbreviated: /^(м\.а|м\.)/i,
  wide: /^(милоддан аввал|милоддан кейин)/i
};
var parseEraPatterns$4 = {
  any: [/^м/i, /^а/i]
};
var matchQuarterPatterns$4 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-чор./i,
  wide: /^[1234]-чорак/i
};
var parseQuarterPatterns$4 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$4 = {
  narrow: /^[яфмамииасонд]/i,
  abbreviated: /^(янв|фев|мар|апр|май|июн|июл|авг|сен|окт|ноя|дек)/i,
  wide: /^(январ|феврал|март|апрел|май|июн|июл|август|сентабр|октабр|ноябр|декабр)/i
};
var parseMonthPatterns$4 = {
  narrow: [/^я/i, /^ф/i, /^м/i, /^а/i, /^м/i, /^и/i, /^и/i, /^а/i, /^с/i, /^о/i, /^н/i, /^д/i],
  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^май/i, /^июн/i, /^июл/i, /^ав/i, /^с/i, /^о/i, /^н/i, /^д/i]
};
var matchDayPatterns$4 = {
  narrow: /^[ядсчпжш]/i,
  short: /^(як|ду|се|чо|па|жу|ша)/i,
  abbreviated: /^(якш|душ|сеш|чор|пай|жум|шан)/i,
  wide: /^(якшанба|душанба|сешанба|чоршанба|пайшанба|жума|шанба)/i
};
var parseDayPatterns$4 = {
  narrow: [/^я/i, /^д/i, /^с/i, /^ч/i, /^п/i, /^ж/i, /^ш/i],
  any: [/^як/i, /^ду/i, /^се/i, /^чор/i, /^пай/i, /^жу/i, /^шан/i]
};
var matchDayPeriodPatterns$4 = {
  any: /^(п\.о\.|п\.к\.|ярим тун|пешиндан кейин|(эрталаб|пешиндан кейин|кечаси|тун))/i
};
var parseDayPeriodPatterns$4 = {
  any: {
    am: /^п\.о\./i,
    pm: /^п\.к\./i,
    midnight: /^ярим тун/i,
    noon: /^пешиндан кейин/i,
    morning: /эрталаб/i,
    afternoon: /пешиндан кейин/i,
    evening: /кечаси/i,
    night: /тун/i
  }
};
var match$8 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$4,
    parsePattern: parseOrdinalNumberPattern$4,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$4,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$4,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$4,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$4,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$4,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$4,
    defaultParseWidth: 'any'
  })
};
var match$9 = match$8;

/**
 * @type {Locale}
 * @category Locales
 * @summary Uzbek Cyrillic locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Kamronbek Shodmonov [@kamronbek28]{@link https://github.com/kamronbek28}
 */
var locale$9 = {
  code: 'uz-Cyrl',
  formatDistance: formatDistance$9,
  formatLong: formatLong$9,
  formatRelative: formatRelative$9,
  localize: localize$9,
  match: match$9,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
var locale$a = locale$9;

var formatDistanceLocale$3 = {
  lessThanXSeconds: {
    one: 'dưới 1 giây',
    other: 'dưới {{count}} giây'
  },
  xSeconds: {
    one: '1 giây',
    other: '{{count}} giây'
  },
  halfAMinute: 'nửa phút',
  lessThanXMinutes: {
    one: 'dưới 1 phút',
    other: 'dưới {{count}} phút'
  },
  xMinutes: {
    one: '1 phút',
    other: '{{count}} phút'
  },
  aboutXHours: {
    one: 'khoảng 1 giờ',
    other: 'khoảng {{count}} giờ'
  },
  xHours: {
    one: '1 giờ',
    other: '{{count}} giờ'
  },
  xDays: {
    one: '1 ngày',
    other: '{{count}} ngày'
  },
  aboutXWeeks: {
    one: 'khoảng 1 tuần',
    other: 'khoảng {{count}} tuần'
  },
  xWeeks: {
    one: '1 tuần',
    other: '{{count}} tuần'
  },
  aboutXMonths: {
    one: 'khoảng 1 tháng',
    other: 'khoảng {{count}} tháng'
  },
  xMonths: {
    one: '1 tháng',
    other: '{{count}} tháng'
  },
  aboutXYears: {
    one: 'khoảng 1 năm',
    other: 'khoảng {{count}} năm'
  },
  xYears: {
    one: '1 năm',
    other: '{{count}} năm'
  },
  overXYears: {
    one: 'hơn 1 năm',
    other: 'hơn {{count}} năm'
  },
  almostXYears: {
    one: 'gần 1 năm',
    other: 'gần {{count}} năm'
  }
};
var formatDistance$6 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$3[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' nữa';
    } else {
      return result + ' trước';
    }
  }
  return result;
};
var formatDistance$7 = formatDistance$6;

var dateFormats$3 = {
  // thứ Sáu, ngày 25 tháng 08 năm 2017
  full: "EEEE, 'ngày' d MMMM 'năm' y",
  // ngày 25 tháng 08 năm 2017
  long: "'ngày' d MMMM 'năm' y",
  // 25 thg 08 năm 2017
  medium: "d MMM 'năm' y",
  // 25/08/2017
  short: 'dd/MM/y'
};
var timeFormats$3 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$3 = {
  // thứ Sáu, ngày 25 tháng 08 năm 2017 23:25:59
  full: '{{date}} {{time}}',
  // ngày 25 tháng 08 năm 2017 23:25
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$6 = {
  date: buildFormatLongFn({
    formats: dateFormats$3,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$3,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$3,
    defaultWidth: 'full'
  })
};
var formatLong$7 = formatLong$6;

var formatRelativeLocale$3 = {
  lastWeek: "eeee 'tuần trước vào lúc' p",
  yesterday: "'hôm qua vào lúc' p",
  today: "'hôm nay vào lúc' p",
  tomorrow: "'ngày mai vào lúc' p",
  nextWeek: "eeee 'tới vào lúc' p",
  other: 'P'
};
var formatRelative$6 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$3[token];
};
var formatRelative$7 = formatRelative$6;

// Capitalization reference: http://hcmup.edu.vn/index.php?option=com_content&view=article&id=4106%3Avit-hoa-trong-vn-bn-hanh-chinh&catid=2345%3Atham-kho&Itemid=4103&lang=vi&site=134
var eraValues$3 = {
  narrow: ['TCN', 'SCN'],
  abbreviated: ['trước CN', 'sau CN'],
  wide: ['trước Công Nguyên', 'sau Công Nguyên']
};
var quarterValues$3 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['Quý 1', 'Quý 2', 'Quý 3', 'Quý 4']
};
var formattingQuarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  // I notice many news outlet use this "quý II/2018"
  wide: ['quý I', 'quý II', 'quý III', 'quý IV']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$3 = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['Thg 1', 'Thg 2', 'Thg 3', 'Thg 4', 'Thg 5', 'Thg 6', 'Thg 7', 'Thg 8', 'Thg 9', 'Thg 10', 'Thg 11', 'Thg 12'],
  wide: ['Tháng Một', 'Tháng Hai', 'Tháng Ba', 'Tháng Tư', 'Tháng Năm', 'Tháng Sáu', 'Tháng Bảy', 'Tháng Tám', 'Tháng Chín', 'Tháng Mười', 'Tháng Mười Một', 'Tháng Mười Hai']
};
// In Vietnamese date formatting, month number less than 10 expected to have leading zero
var formattingMonthValues = {
  narrow: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],
  abbreviated: ['thg 1', 'thg 2', 'thg 3', 'thg 4', 'thg 5', 'thg 6', 'thg 7', 'thg 8', 'thg 9', 'thg 10', 'thg 11', 'thg 12'],
  wide: ['tháng 01', 'tháng 02', 'tháng 03', 'tháng 04', 'tháng 05', 'tháng 06', 'tháng 07', 'tháng 08', 'tháng 09', 'tháng 10', 'tháng 11', 'tháng 12']
};
var dayValues$3 = {
  narrow: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
  short: ['CN', 'Th 2', 'Th 3', 'Th 4', 'Th 5', 'Th 6', 'Th 7'],
  abbreviated: ['CN', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'],
  wide: ['Chủ Nhật', 'Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy']
};

// Vietnamese are used to AM/PM borrowing from English, hence `narrow` and
// `abbreviated` are just like English but I'm leaving the `wide`
// format being localized with abbreviations found in some systems (SÁng / CHiều);
// however, personally, I don't think `Chiều` sounds appropriate for `PM`
var dayPeriodValues$3 = {
  // narrow date period is extremely rare in Vietnamese
  // I used abbreviated form for noon, morning and afternoon
  // which are regconizable by Vietnamese, others cannot be any shorter
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'nửa đêm',
    noon: 'tr',
    morning: 'sg',
    afternoon: 'ch',
    evening: 'tối',
    night: 'đêm'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'nửa đêm',
    noon: 'trưa',
    morning: 'sáng',
    afternoon: 'chiều',
    evening: 'tối',
    night: 'đêm'
  },
  wide: {
    am: 'SA',
    pm: 'CH',
    midnight: 'nửa đêm',
    noon: 'trưa',
    morning: 'sáng',
    afternoon: 'chiều',
    evening: 'tối',
    night: 'đêm'
  }
};
var formattingDayPeriodValues$3 = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'nửa đêm',
    noon: 'tr',
    morning: 'sg',
    afternoon: 'ch',
    evening: 'tối',
    night: 'đêm'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'nửa đêm',
    noon: 'trưa',
    morning: 'sáng',
    afternoon: 'chiều',
    evening: 'tối',
    night: 'đêm'
  },
  wide: {
    am: 'SA',
    pm: 'CH',
    midnight: 'nửa đêm',
    noon: 'giữa trưa',
    morning: 'vào buổi sáng',
    afternoon: 'vào buổi chiều',
    evening: 'vào buổi tối',
    night: 'vào ban đêm'
  }
};
var ordinalNumber$3 = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (unit === 'quarter') {
    // many news outlets use "quý I"...
    switch (number) {
      case 1:
        return 'I';
      case 2:
        return 'II';
      case 3:
        return 'III';
      case 4:
        return 'IV';
    }
  } else if (unit === 'day') {
    // day of week in Vietnamese has ordinal number meaning,
    // so we should use them, else it'll sound weird
    switch (number) {
      case 1:
        return 'thứ 2';
      // meaning 2nd day but it's the first day of the week :D
      case 2:
        return 'thứ 3';
      // meaning 3rd day
      case 3:
        return 'thứ 4';
      // meaning 4th day and so on
      case 4:
        return 'thứ 5';
      case 5:
        return 'thứ 6';
      case 6:
        return 'thứ 7';
      case 7:
        return 'chủ nhật';
      // meaning Sunday, there's no 8th day :D
    }
  } else if (unit === 'week') {
    if (number === 1) {
      return 'thứ nhất';
    } else {
      return 'thứ ' + number;
    }
  } else if (unit === 'dayOfYear') {
    if (number === 1) {
      return 'đầu tiên';
    } else {
      return 'thứ ' + number;
    }
  }

  // there are no different forms of ordinal numbers in Vietnamese
  return String(number);
};
var localize$6 = {
  ordinalNumber: ordinalNumber$3,
  era: buildLocalizeFn({
    values: eraValues$3,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$3,
    defaultWidth: 'wide',
    formattingValues: formattingQuarterValues,
    defaultFormattingWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$3,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$3,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$3,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$3,
    defaultFormattingWidth: 'wide'
  })
};
var localize$7 = localize$6;

var matchOrdinalNumberPattern$3 = /^(\d+)/i;
var parseOrdinalNumberPattern$3 = /\d+/i;
var matchEraPatterns$3 = {
  narrow: /^(tcn|scn)/i,
  abbreviated: /^(trước CN|sau CN)/i,
  wide: /^(trước Công Nguyên|sau Công Nguyên)/i
};
var parseEraPatterns$3 = {
  any: [/^t/i, /^s/i]
};
var matchQuarterPatterns$3 = {
  narrow: /^([1234]|i{1,3}v?)/i,
  abbreviated: /^q([1234]|i{1,3}v?)/i,
  wide: /^quý ([1234]|i{1,3}v?)/i
};
var parseQuarterPatterns$3 = {
  any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i]
};
var matchMonthPatterns$3 = {
  // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
  // note the order of '1' since it is a sub-string of '10', so must be lower priority
  narrow: /^(0?[2-9]|10|11|12|0?1)/i,
  // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
  abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
  // note the order of 'Mười' since it is sub-string of Mười Một, so must be lower priority
  wide: /^tháng ?(Một|Hai|Ba|Tư|Năm|Sáu|Bảy|Tám|Chín|Mười|Mười ?Một|Mười ?Hai|0?[1-9](?!\d)|10|11|12)/i
};
var parseMonthPatterns$3 = {
  narrow: [/0?1$/i, /0?2/i, /3/, /4/, /5/, /6/, /7/, /8/, /9/, /10/, /11/, /12/],
  abbreviated: [/^thg[ _]?0?1(?!\d)/i, /^thg[ _]?0?2/i, /^thg[ _]?0?3/i, /^thg[ _]?0?4/i, /^thg[ _]?0?5/i, /^thg[ _]?0?6/i, /^thg[ _]?0?7/i, /^thg[ _]?0?8/i, /^thg[ _]?0?9/i, /^thg[ _]?10/i, /^thg[ _]?11/i, /^thg[ _]?12/i],
  wide: [/^tháng ?(Một|0?1(?!\d))/i, /^tháng ?(Hai|0?2)/i, /^tháng ?(Ba|0?3)/i, /^tháng ?(Tư|0?4)/i, /^tháng ?(Năm|0?5)/i, /^tháng ?(Sáu|0?6)/i, /^tháng ?(Bảy|0?7)/i, /^tháng ?(Tám|0?8)/i, /^tháng ?(Chín|0?9)/i, /^tháng ?(Mười|10)/i, /^tháng ?(Mười ?Một|11)/i, /^tháng ?(Mười ?Hai|12)/i]
};
var matchDayPatterns$3 = {
  narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
  short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  wide: /^(Chủ ?Nhật|Chúa ?Nhật|thứ ?Hai|thứ ?Ba|thứ ?Tư|thứ ?Năm|thứ ?Sáu|thứ ?Bảy)/i
};
var parseDayPatterns$3 = {
  narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  wide: [/(Chủ|Chúa) ?Nhật/i, /Hai/i, /Ba/i, /Tư/i, /Năm/i, /Sáu/i, /Bảy/i]
};
var matchDayPeriodPatterns$3 = {
  narrow: /^(a|p|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
  abbreviated: /^(am|pm|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
  wide: /^(ch[^i]*|sa|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i
};
var parseDayPeriodPatterns$3 = {
  any: {
    am: /^(a|sa)/i,
    pm: /^(p|ch[^i]*)/i,
    midnight: /nửa đêm/i,
    noon: /trưa/i,
    morning: /sáng/i,
    afternoon: /chiều/i,
    evening: /tối/i,
    night: /^đêm/i
  }
};
var match$6 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$3,
    parsePattern: parseOrdinalNumberPattern$3,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$3,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$3,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$3,
    defaultParseWidth: 'wide'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$3,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$3,
    defaultParseWidth: 'any'
  })
};
var match$7 = match$6;

/**
 * @type {Locale}
 * @category Locales
 * @summary Vietnamese locale (Vietnam).
 * @language Vietnamese
 * @iso-639-2 vie
 * @author Thanh Tran [@trongthanh]{@link https://github.com/trongthanh}
 * @author Leroy Hopson [@lihop]{@link https://github.com/lihop}
 */
var locale$7 = {
  code: 'vi',
  formatDistance: formatDistance$7,
  formatLong: formatLong$7,
  formatRelative: formatRelative$7,
  localize: localize$7,
  match: match$7,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1 /* First week of new year contains Jan 1st  */
  }
};

var locale$8 = locale$7;

var formatDistanceLocale$2 = {
  lessThanXSeconds: {
    one: '不到 1 秒',
    other: '不到 {{count}} 秒'
  },
  xSeconds: {
    one: '1 秒',
    other: '{{count}} 秒'
  },
  halfAMinute: '半分钟',
  lessThanXMinutes: {
    one: '不到 1 分钟',
    other: '不到 {{count}} 分钟'
  },
  xMinutes: {
    one: '1 分钟',
    other: '{{count}} 分钟'
  },
  xHours: {
    one: '1 小时',
    other: '{{count}} 小时'
  },
  aboutXHours: {
    one: '大约 1 小时',
    other: '大约 {{count}} 小时'
  },
  xDays: {
    one: '1 天',
    other: '{{count}} 天'
  },
  aboutXWeeks: {
    one: '大约 1 个星期',
    other: '大约 {{count}} 个星期'
  },
  xWeeks: {
    one: '1 个星期',
    other: '{{count}} 个星期'
  },
  aboutXMonths: {
    one: '大约 1 个月',
    other: '大约 {{count}} 个月'
  },
  xMonths: {
    one: '1 个月',
    other: '{{count}} 个月'
  },
  aboutXYears: {
    one: '大约 1 年',
    other: '大约 {{count}} 年'
  },
  xYears: {
    one: '1 年',
    other: '{{count}} 年'
  },
  overXYears: {
    one: '超过 1 年',
    other: '超过 {{count}} 年'
  },
  almostXYears: {
    one: '将近 1 年',
    other: '将近 {{count}} 年'
  }
};
var formatDistance$4 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$2[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '内';
    } else {
      return result + '前';
    }
  }
  return result;
};
var formatDistance$5 = formatDistance$4;

var dateFormats$2 = {
  full: "y'年'M'月'd'日' EEEE",
  long: "y'年'M'月'd'日'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var timeFormats$2 = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var dateTimeFormats$2 = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$4 = {
  date: buildFormatLongFn({
    formats: dateFormats$2,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$2,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$2,
    defaultWidth: 'full'
  })
};
var formatLong$5 = formatLong$4;

function checkWeek(date, baseDate, options) {
  var baseFormat = 'eeee p';
  if (isSameUTCWeek(date, baseDate, options)) {
    return baseFormat; // in same week
  } else if (date.getTime() > baseDate.getTime()) {
    return "'下个'" + baseFormat; // in next week
  }

  return "'上个'" + baseFormat; // in last week
}

var formatRelativeLocale$2 = {
  lastWeek: checkWeek,
  // days before yesterday, maybe in this week or last week
  yesterday: "'昨天' p",
  today: "'今天' p",
  tomorrow: "'明天' p",
  nextWeek: checkWeek,
  // days after tomorrow, maybe in this week or next week
  other: 'PP p'
};
var formatRelative$4 = function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale$2[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
var formatRelative$5 = formatRelative$4;

var eraValues$2 = {
  narrow: ['前', '公元'],
  abbreviated: ['前', '公元'],
  wide: ['公元前', '公元']
};
var quarterValues$2 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['第一季', '第二季', '第三季', '第四季'],
  wide: ['第一季度', '第二季度', '第三季度', '第四季度']
};
var monthValues$2 = {
  narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
};
var dayValues$2 = {
  narrow: ['日', '一', '二', '三', '四', '五', '六'],
  short: ['日', '一', '二', '三', '四', '五', '六'],
  abbreviated: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
  wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
};
var dayPeriodValues$2 = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  }
};
var formattingDayPeriodValues$2 = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  }
};
var ordinalNumber$2 = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case 'date':
      return number.toString() + '日';
    case 'hour':
      return number.toString() + '时';
    case 'minute':
      return number.toString() + '分';
    case 'second':
      return number.toString() + '秒';
    default:
      return '第 ' + number.toString();
  }
};
var localize$4 = {
  ordinalNumber: ordinalNumber$2,
  era: buildLocalizeFn({
    values: eraValues$2,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$2,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$2,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$2,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$2,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$2,
    defaultFormattingWidth: 'wide'
  })
};
var localize$5 = localize$4;

var matchOrdinalNumberPattern$2 = /^(第\s*)?\d+(日|时|分|秒)?/i;
var parseOrdinalNumberPattern$2 = /\d+/i;
var matchEraPatterns$2 = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var parseEraPatterns$2 = {
  any: [/^(前)/i, /^(公元)/i]
};
var matchQuarterPatterns$2 = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻钟/i
};
var parseQuarterPatterns$2 = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var matchMonthPatterns$2 = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var parseMonthPatterns$2 = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var matchDayPatterns$2 = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^周[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var parseDayPatterns$2 = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var matchDayPeriodPatterns$2 = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
};
var parseDayPeriodPatterns$2 = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var match$4 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$2,
    parsePattern: parseOrdinalNumberPattern$2,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$2,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$2,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$2,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$2,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$2,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$2,
    defaultParseWidth: 'any'
  })
};
var match$5 = match$4;

/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Simplified locale.
 * @language Chinese Simplified
 * @iso-639-2 zho
 * @author Changyu Geng [@KingMario]{@link https://github.com/KingMario}
 * @author Song Shuoyun [@fnlctrl]{@link https://github.com/fnlctrl}
 * @author sabrinaM [@sabrinamiao]{@link https://github.com/sabrinamiao}
 * @author Carney Wu [@cubicwork]{@link https://github.com/cubicwork}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 */
var locale$5 = {
  code: 'zh-CN',
  formatDistance: formatDistance$5,
  formatLong: formatLong$5,
  formatRelative: formatRelative$5,
  localize: localize$5,
  match: match$5,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$6 = locale$5;

var formatDistanceLocale$1 = {
  lessThanXSeconds: {
    one: '少於 1 秒',
    other: '少於 {{count}} 秒'
  },
  xSeconds: {
    one: '1 秒',
    other: '{{count}} 秒'
  },
  halfAMinute: '半分鐘',
  lessThanXMinutes: {
    one: '少於 1 分鐘',
    other: '少於 {{count}} 分鐘'
  },
  xMinutes: {
    one: '1 分鐘',
    other: '{{count}} 分鐘'
  },
  xHours: {
    one: '1 小時',
    other: '{{count}} 小時'
  },
  aboutXHours: {
    one: '大約 1 小時',
    other: '大約 {{count}} 小時'
  },
  xDays: {
    one: '1 天',
    other: '{{count}} 天'
  },
  aboutXWeeks: {
    one: '大約 1 個星期',
    other: '大約 {{count}} 個星期'
  },
  xWeeks: {
    one: '1 個星期',
    other: '{{count}} 個星期'
  },
  aboutXMonths: {
    one: '大約 1 個月',
    other: '大約 {{count}} 個月'
  },
  xMonths: {
    one: '1 個月',
    other: '{{count}} 個月'
  },
  aboutXYears: {
    one: '大約 1 年',
    other: '大約 {{count}} 年'
  },
  xYears: {
    one: '1 年',
    other: '{{count}} 年'
  },
  overXYears: {
    one: '超過 1 年',
    other: '超過 {{count}} 年'
  },
  almostXYears: {
    one: '將近 1 年',
    other: '將近 {{count}} 年'
  }
};
var formatDistance$2 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '內';
    } else {
      return result + '前';
    }
  }
  return result;
};
var formatDistance$3 = formatDistance$2;

var dateFormats$1 = {
  full: "y'年'M'月'd'日' EEEE",
  long: "y'年'M'月'd'日'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var timeFormats$1 = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var dateTimeFormats$1 = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$2 = {
  date: buildFormatLongFn({
    formats: dateFormats$1,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1,
    defaultWidth: 'full'
  })
};
var formatLong$3 = formatLong$2;

var formatRelativeLocale$1 = {
  lastWeek: "'上個'eeee p",
  yesterday: "'昨天' p",
  today: "'今天' p",
  tomorrow: "'明天' p",
  nextWeek: "'下個'eeee p",
  other: 'P'
};
var formatRelative$2 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1[token];
};
var formatRelative$3 = formatRelative$2;

var eraValues$1 = {
  narrow: ['前', '公元'],
  abbreviated: ['前', '公元'],
  wide: ['公元前', '公元']
};
var quarterValues$1 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['第一季', '第二季', '第三季', '第四季'],
  wide: ['第一季度', '第二季度', '第三季度', '第四季度']
};
var monthValues$1 = {
  narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
};
var dayValues$1 = {
  narrow: ['日', '一', '二', '三', '四', '五', '六'],
  short: ['日', '一', '二', '三', '四', '五', '六'],
  abbreviated: ['週日', '週一', '週二', '週三', '週四', '週五', '週六'],
  wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
};
var dayPeriodValues$1 = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '午夜',
    noon: '晌',
    morning: '早',
    afternoon: '午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '午夜',
    noon: '中午',
    morning: '上午',
    afternoon: '下午',
    evening: '晚上',
    night: '夜晚'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '午夜',
    noon: '中午',
    morning: '上午',
    afternoon: '下午',
    evening: '晚上',
    night: '夜晚'
  }
};
var formattingDayPeriodValues$1 = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '午夜',
    noon: '晌',
    morning: '早',
    afternoon: '午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '午夜',
    noon: '中午',
    morning: '上午',
    afternoon: '下午',
    evening: '晚上',
    night: '夜晚'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '午夜',
    noon: '中午',
    morning: '上午',
    afternoon: '下午',
    evening: '晚上',
    night: '夜晚'
  }
};
var ordinalNumber$1 = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case 'date':
      return number + '日';
    case 'hour':
      return number + '時';
    case 'minute':
      return number + '分';
    case 'second':
      return number + '秒';
    default:
      return '第 ' + number;
  }
};
var localize$2 = {
  ordinalNumber: ordinalNumber$1,
  era: buildLocalizeFn({
    values: eraValues$1,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$1,
    defaultFormattingWidth: 'wide'
  })
};
var localize$3 = localize$2;

var matchOrdinalNumberPattern$1 = /^(第\s*)?\d+(日|時|分|秒)?/i;
var parseOrdinalNumberPattern$1 = /\d+/i;
var matchEraPatterns$1 = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var parseEraPatterns$1 = {
  any: [/^(前)/i, /^(公元)/i]
};
var matchQuarterPatterns$1 = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]季/i,
  wide: /^第[一二三四]季度/i
};
var parseQuarterPatterns$1 = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var matchMonthPatterns$1 = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var parseMonthPatterns$1 = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var matchDayPatterns$1 = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^週[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var parseDayPatterns$1 = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var matchDayPeriodPatterns$1 = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
};
var parseDayPeriodPatterns$1 = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var match$2 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1,
    parsePattern: parseOrdinalNumberPattern$1,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1,
    defaultParseWidth: 'any'
  })
};
var match$3 = match$2;

/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author Gary Ip [@gaplo]{@link https://github.com/gaplo}
 */
var locale$3 = {
  code: 'zh-HK',
  formatDistance: formatDistance$3,
  formatLong: formatLong$3,
  formatRelative: formatRelative$3,
  localize: localize$3,
  match: match$3,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
var locale$4 = locale$3;

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: '少於 1 秒',
    other: '少於 {{count}} 秒'
  },
  xSeconds: {
    one: '1 秒',
    other: '{{count}} 秒'
  },
  halfAMinute: '半分鐘',
  lessThanXMinutes: {
    one: '少於 1 分鐘',
    other: '少於 {{count}} 分鐘'
  },
  xMinutes: {
    one: '1 分鐘',
    other: '{{count}} 分鐘'
  },
  xHours: {
    one: '1 小時',
    other: '{{count}} 小時'
  },
  aboutXHours: {
    one: '大約 1 小時',
    other: '大約 {{count}} 小時'
  },
  xDays: {
    one: '1 天',
    other: '{{count}} 天'
  },
  aboutXWeeks: {
    one: '大約 1 個星期',
    other: '大約 {{count}} 個星期'
  },
  xWeeks: {
    one: '1 個星期',
    other: '{{count}} 個星期'
  },
  aboutXMonths: {
    one: '大約 1 個月',
    other: '大約 {{count}} 個月'
  },
  xMonths: {
    one: '1 個月',
    other: '{{count}} 個月'
  },
  aboutXYears: {
    one: '大約 1 年',
    other: '大約 {{count}} 年'
  },
  xYears: {
    one: '1 年',
    other: '{{count}} 年'
  },
  overXYears: {
    one: '超過 1 年',
    other: '超過 {{count}} 年'
  },
  almostXYears: {
    one: '將近 1 年',
    other: '將近 {{count}} 年'
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '內';
    } else {
      return result + '前';
    }
  }
  return result;
};
var formatDistance$1 = formatDistance;

var dateFormats = {
  full: "y'年'M'月'd'日' EEEE",
  long: "y'年'M'月'd'日'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var timeFormats = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
var formatLong$1 = formatLong;

var formatRelativeLocale = {
  lastWeek: "'上個'eeee p",
  yesterday: "'昨天' p",
  today: "'今天' p",
  tomorrow: "'明天' p",
  nextWeek: "'下個'eeee p",
  other: 'P'
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative$1 = formatRelative;

var eraValues = {
  narrow: ['前', '公元'],
  abbreviated: ['前', '公元'],
  wide: ['公元前', '公元']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['第一刻', '第二刻', '第三刻', '第四刻'],
  wide: ['第一刻鐘', '第二刻鐘', '第三刻鐘', '第四刻鐘']
};
var monthValues = {
  narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
};
var dayValues = {
  narrow: ['日', '一', '二', '三', '四', '五', '六'],
  short: ['日', '一', '二', '三', '四', '五', '六'],
  abbreviated: ['週日', '週一', '週二', '週三', '週四', '週五', '週六'],
  wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
};
var dayPeriodValues = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case 'date':
      return number + '日';
    case 'hour':
      return number + '時';
    case 'minute':
      return number + '分';
    case 'second':
      return number + '秒';
    default:
      return '第 ' + number;
  }
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1 = localize;

var matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var parseEraPatterns = {
  any: [/^(前)/i, /^(公元)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻鐘/i
};
var parseQuarterPatterns = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var matchMonthPatterns = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var parseMonthPatterns = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var matchDayPatterns = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^週[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var parseDayPatterns = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var matchDayPeriodPatterns = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
var match$1 = match;

/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author tonypai [@tpai]{@link https://github.com/tpai}
 * @author Jack Hsu [@jackhsu978]{@link https://github.com/jackhsu978}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 */
var locale$1 = {
  code: 'zh-TW',
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
var locale$2 = locale$1;

// This file is generated automatically by `scripts/build/indices.ts`. Please, don't change it.

var Locales = /*#__PURE__*/Object.freeze({
  __proto__: null,
  af: locale$2V,
  ar: locale$2T,
  arDZ: locale$2R,
  arEG: locale$2P,
  arMA: locale$2N,
  arSA: locale$2L,
  arTN: locale$2J,
  az: locale$2H,
  be: locale$2E,
  beTarask: locale$2C,
  bg: locale$2A,
  bn: locale$2y,
  bs: locale$2w,
  ca: locale$2u,
  cs: locale$2s,
  cy: locale$2q,
  da: locale$2o,
  de: locale$2m,
  deAT: locale$2k,
  el: locale$2i,
  enAU: locale$2g,
  enCA: locale$2e,
  enGB: locale$2c,
  enIE: locale$2a,
  enIN: locale$28,
  enNZ: locale$26,
  enUS: defaultLocale$1,
  enZA: locale$24,
  eo: locale$22,
  es: locale$20,
  et: locale$1_,
  eu: locale$1Y,
  faIR: locale$1W,
  fi: locale$1U,
  fr: locale$1S,
  frCA: locale$1Q,
  frCH: locale$1O,
  fy: locale$1M,
  gd: locale$1K,
  gl: locale$1I,
  gu: locale$1G,
  he: locale$1E,
  hi: locale$1C,
  hr: locale$1A,
  ht: locale$1y,
  hu: locale$1w,
  hy: locale$1u,
  id: locale$1s,
  is: locale$1q,
  it: locale$1o,
  itCH: locale$1m,
  ja: locale$1k,
  jaHira: locale$1i,
  ka: locale$1g,
  kk: locale$1e,
  km: locale$1c,
  kn: locale$1a,
  ko: locale$18,
  lb: locale$16,
  lt: locale$14,
  lv: locale$12,
  mk: locale$10,
  mn: locale$_,
  ms: locale$Y,
  mt: locale$W,
  nb: locale$U,
  nl: locale$S,
  nlBE: locale$Q,
  nn: locale$O,
  oc: locale$M,
  pl: locale$K,
  pt: locale$I,
  ptBR: locale$G,
  ro: locale$E,
  ru: locale$C,
  sk: locale$A,
  sl: locale$y,
  sq: locale$w,
  sr: locale$u,
  srLatn: locale$s,
  sv: locale$q,
  ta: locale$o,
  te: locale$m,
  th: locale$k,
  tr: locale$i,
  ug: locale$g,
  uk: locale$e,
  uz: locale$c,
  uzCyrl: locale$a,
  vi: locale$8,
  zhCN: locale$6,
  zhHK: locale$4,
  zhTW: locale$2
});

function getDateFnsLocale(locale) {
  var _a, _b;
  var index = locale.replace('-', '');
  return (_b = (_a = Locales[index]) !== null && _a !== void 0 ? _a : Locales[index.substring(0, 2)]) !== null && _b !== void 0 ? _b : locale$2g;
}

var LocaleProvider = function LocaleProvider(props) {
  var locale = props.locale,
    children = props.children;
  var code = (locale === null || locale === void 0 ? void 0 : locale['lang']) || 'en-AU';
  // setDefaultOptions here instead of inside useEffect for first rendering
  setDefaultOptions({
    locale: getDateFnsLocale(code)
  });
  useEffect(function () {
    return function () {
      return setDefaultOptions({
        locale: getDateFnsLocale('en-AU')
      });
    };
  }, []);
  if (!code) return null;
  return /*#__PURE__*/React__default.createElement(LocaleContext.Provider, {
    value: locale
  }, children);
};
var LocaleProvider$1 = LocaleProvider;

var HeroDesignProvider = function HeroDesignProvider(props) {
  var locale = props.locale,
    children = props.children;
  return /*#__PURE__*/React__default.createElement(LocaleProvider$1, {
    locale: locale || enAUTranslations
  }, children);
};
var HeroDesignProvider$1 = HeroDesignProvider;

function ascending$1(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function descending$1(a, b) {
  return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function bisector(f) {
  let compare1, compare2, delta;

  // If an accessor is specified, promote it to a comparator. In this case we
  // can test whether the search value is (self-) comparable. We can’t do this
  // for a comparator (except for specific, known comparators) because we can’t
  // tell if the comparator is symmetric, and an asymmetric comparator can’t be
  // used to test whether a single value is comparable.
  if (f.length !== 2) {
    compare1 = ascending$1;
    compare2 = (d, x) => ascending$1(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === ascending$1 || f === descending$1 ? f : zero$1;
    compare2 = f;
    delta = f;
  }
  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return {
    left,
    center,
    right
  };
}
function zero$1() {
  return 0;
}

function number$2(x) {
  return x === null ? NaN : +x;
}

const ascendingBisect = bisector(ascending$1);
const bisectRight = ascendingBisect.right;
bisector(number$2).center;
var bisect = bisectRight;

class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, {
      _intern: {
        value: new Map()
      },
      _key: {
        value: key
      }
    });
    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}
function intern_get({
  _intern,
  _key
}, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({
  _intern,
  _key
}, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({
  _intern,
  _key
}, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

const e10 = Math.sqrt(50),
  e5 = Math.sqrt(10),
  e2 = Math.sqrt(2);
function tickSpec(start, stop, count) {
  const step = (stop - start) / Math.max(0, count),
    power = Math.floor(Math.log10(step)),
    error = step / Math.pow(10, power),
    factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
  return [i1, i2, inc];
}
function ticks(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  if (!(count > 0)) return [];
  if (start === stop) return [start];
  const reverse = stop < start,
    [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1,
    ticks = new Array(n);
  if (reverse) {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;
  } else {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;
  }
  return ticks;
}
function tickIncrement(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  return tickSpec(start, stop, count)[2];
}
function tickStep(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  const reverse = stop < start,
    inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
    n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
    range = new Array(n);
  while (++i < n) {
    range[i] = start + i * step;
  }
  return range;
}

function identity$4 (x) {
  return x;
}

var top = 1,
  right = 2,
  bottom = 3,
  left = 4,
  epsilon$2 = 1e-6;
function translateX(x) {
  return "translate(" + x + ",0)";
}
function translateY(y) {
  return "translate(0," + y + ")";
}
function number$1(scale) {
  return d => +scale(d);
}
function center(scale, offset) {
  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
  if (scale.round()) offset = Math.round(offset);
  return d => +scale(d) + offset;
}
function entering() {
  return !this.__axis;
}
function axis(orient, scale) {
  var tickArguments = [],
    tickValues = null,
    tickFormat = null,
    tickSizeInner = 6,
    tickSizeOuter = 6,
    tickPadding = 3,
    offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,
    k = orient === top || orient === left ? -1 : 1,
    x = orient === left || orient === right ? "x" : "y",
    transform = orient === top || orient === bottom ? translateX : translateY;
  function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
      format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$4 : tickFormat,
      spacing = Math.max(tickSizeInner, 0) + tickPadding,
      range = scale.range(),
      range0 = +range[0] + offset,
      range1 = +range[range.length - 1] + offset,
      position = (scale.bandwidth ? center : number$1)(scale.copy(), offset),
      selection = context.selection ? context.selection() : context,
      path = selection.selectAll(".domain").data([null]),
      tick = selection.selectAll(".tick").data(values, scale).order(),
      tickExit = tick.exit(),
      tickEnter = tick.enter().append("g").attr("class", "tick"),
      line = tick.select("line"),
      text = tick.select("text");
    path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon$2).attr("transform", function (d) {
        return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon$2).attr("transform", function (d) {
        var p = this.parentNode.__axis;
        return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset);
      });
    }
    tickExit.remove();
    path.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
    tick.attr("opacity", 1).attr("transform", function (d) {
      return transform(position(d) + offset);
    });
    line.attr(x + "2", k * tickSizeInner);
    text.attr(x, k * spacing).text(format);
    selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection.each(function () {
      this.__axis = position;
    });
  }
  axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
  };
  axis.ticks = function () {
    return tickArguments = Array.from(arguments), axis;
  };
  axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
  };
  axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
  };
  axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };
  axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };
  axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };
  axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };
  axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };
  axis.offset = function (_) {
    return arguments.length ? (offset = +_, axis) : offset;
  };
  return axis;
}
function axisBottom(scale) {
  return axis(bottom, scale);
}
function axisLeft(scale) {
  return axis(left, scale);
}

var noop$1 = {
  value: () => {}
};
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames$1(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
      i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
      T = parseTypenames$1(typename + "", _),
      t,
      i = -1,
      n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
    }
    return this;
  },
  copy: function () {
    var copy = {},
      _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};
function get$1(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}
function set$1(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace (name) {
  var prefix = name += "",
    i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {
    space: namespaces[prefix],
    local: name
  } : name; // eslint-disable-line no-prototype-builtins
}

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
      uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator (name) {
  var fullname = namespace(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

function none$2() {}
function selector (selector) {
  return selector == null ? none$2 : function () {
    return this.querySelector(selector);
  };
}

function selection_select (select) {
  if (typeof select !== "function") select = selector(select);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection$1(subgroups, this._parents);
}

// Given something array like (or null), returns something that is strictly an
// array. This is used to ensure that array-like objects passed to d3.selectAll
// or selection.selectAll are converted into proper arrays when creating a
// selection; we don’t ever want to create a selection backed by a live
// HTMLCollection or NodeList. However, note that selection.selectAll will use a
// static NodeList as a group, since it safely derived from querySelectorAll.
function array$1(x) {
  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}

function empty() {
  return [];
}
function selectorAll (selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}

function arrayAll(select) {
  return function () {
    return array$1(select.apply(this, arguments));
  };
}
function selection_selectAll (select) {
  if (typeof select === "function") select = arrayAll(select);else select = selectorAll(select);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection$1(subgroups, parents);
}

function matcher (selector) {
  return function () {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function (node) {
    return node.matches(selector);
  };
}

var find$1 = Array.prototype.find;
function childFind(match) {
  return function () {
    return find$1.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selection_selectChild (match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function () {
    return filter.call(this.children, match);
  };
}
function selection_selectChildren (match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

function selection_filter (match) {
  if (typeof match !== "function") match = matcher(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection$1(subgroups, this._parents);
}

function sparse (update) {
  return new Array(update.length);
}

function selection_enter () {
  return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
}
function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};

function constant$2 (x) {
  return function () {
    return x;
  };
}

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
    node,
    groupLength = group.length,
    dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
    node,
    nodeByKeyValue = new Map(),
    groupLength = group.length,
    dataLength = data.length,
    keyValues = new Array(groupLength),
    keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function selection_data (value, key) {
  if (!arguments.length) return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex,
    parents = this._parents,
    groups = this._groups;
  if (typeof value !== "function") value = constant$2(value);
  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
      group = groups[j],
      groupLength = group.length,
      data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
      dataLength = data.length,
      enterGroup = enter[j] = new Array(dataLength),
      updateGroup = update[j] = new Array(dataLength),
      exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }
  update = new Selection$1(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

// Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isn’t worried about “live” collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// don’t; we’d rather avoid a gratuitous copy.)
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data // Array, TypedArray, NodeList, array-like
  : Array.from(data); // Map, Set, iterable, string, or anything else
}

function selection_exit () {
  return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join (onenter, onupdate, onexit) {
  var enter = this.enter(),
    update = this,
    exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter) enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update) update = update.selection();
  }
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge (context) {
  var selection = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection$1(merges, this._parents);
}

function selection_order () {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

function selection_sort (compare) {
  if (!compare) compare = ascending;
  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection$1(sortgroups, this._parents).order();
}
function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call () {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes () {
  return Array.from(this);
}

function selection_node () {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }
  return null;
}

function selection_size () {
  let size = 0;
  for (const node of this) ++size; // eslint-disable-line no-unused-vars
  return size;
}

function selection_empty () {
  return !this.node();
}

function selection_each (callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}

function attrRemove$1(name) {
  return function () {
    this.removeAttribute(name);
  };
}
function attrRemoveNS$1(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant$1(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}
function attrConstantNS$1(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction$1(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}
function attrFunctionNS$1(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function selection_attr (name, value) {
  var fullname = namespace(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS$1 : attrRemove$1 : typeof value === "function" ? fullname.local ? attrFunctionNS$1 : attrFunction$1 : fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, value));
}

function defaultView (node) {
  return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
  || node.document && node // node is a Window
  || node.defaultView; // node is a Document
}

function styleRemove$1(name) {
  return function () {
    this.style.removeProperty(name);
  };
}
function styleConstant$1(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction$1(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}
function selection_style (name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove$1 : typeof value === "function" ? styleFunction$1 : styleConstant$1)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}
function selection_property (name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node),
    i = -1,
    n = names.length;
  while (++i < n) list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node),
    i = -1,
    n = names.length;
  while (++i < n) list.remove(names[i]);
}
function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function selection_classed (name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()),
      i = -1,
      n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}
function textConstant$1(value) {
  return function () {
    this.textContent = value;
  };
}
function textFunction$1(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function selection_text (value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction$1 : textConstant$1)(value)) : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function selection_html (value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}
function selection_raise () {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function selection_lower () {
  return this.each(lower);
}

function selection_append (name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}
function selection_insert (name, before) {
  var create = typeof name === "function" ? name : creator(name),
    select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}
function selection_remove () {
  return this.each(remove);
}

function selection_cloneShallow() {
  var clone = this.cloneNode(false),
    parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true),
    parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_clone (deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum (value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

function contextListener(listener) {
  return function (event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
      i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}
function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;else delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function () {
    var on = this.__on,
      o,
      listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      options: options
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}
function selection_on (typename, value, options) {
  var typenames = parseTypenames(typename + ""),
    i,
    n = typenames.length,
    t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
  return this;
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
    event = window.CustomEvent;
  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}
function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}
function selection_dispatch (type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}

function* selection_iterator () {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}

var root = [null];
function Selection$1(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection$1([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection$1.prototype = selection.prototype = {
  constructor: Selection$1,
  select: selection_select,
  selectAll: selection_selectAll,
  selectChild: selection_selectChild,
  selectChildren: selection_selectChildren,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  selection: selection_selection,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch,
  [Symbol.iterator]: selection_iterator
};

function select (selector) {
  return typeof selector === "string" ? new Selection$1([[document.querySelector(selector)]], [document.documentElement]) : new Selection$1([[selector]], root);
}

var nextId = 0;
function local() {
  return new Local();
}
function Local() {
  this._ = "@" + (++nextId).toString(36);
}
Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};

function define (constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*",
  reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
  reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
  reHex = /^#([0-9a-f]{3,8})$/,
  reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
  reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
  reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
  reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
  reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
  reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
define(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define(Rgb, rgb, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
    g = o.g / 255,
    b = o.b / 255,
    min = Math.min(r, g, b),
    max = Math.max(r, g, b),
    h = NaN,
    s = max - min,
    l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
      s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
      l = this.l,
      m2 = l + (l < 0.5 ? l : 1 - l) * s,
      m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

var constant$1 = (x => () => x);

function linear$1(a, d) {
  return function (t) {
    return a + t * d;
  };
}
function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear$1(a, d) : constant$1(isNaN(a) ? b : a);
}

var interpolateRgb = (function rgbGamma(y) {
  var color = gamma(y);
  function rgb$1(start, end) {
    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
      g = color(start.g, end.g),
      b = color(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb$1.gamma = rgbGamma;
  return rgb$1;
})(1);

function numberArray (a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
    c = b.slice(),
    i;
  return function (t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
    na = a ? Math.min(nb, a.length) : 0,
    x = new Array(na),
    c = new Array(nb),
    i;
  for (i = 0; i < na; ++i) x[i] = interpolate$1(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];
  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date (a, b) {
  var d = new Date();
  return a = +a, b = +b, function (t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function interpolateNumber (a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}

function object (a, b) {
  var i = {},
    c = {},
    k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};
  for (k in b) {
    if (k in a) {
      i[k] = interpolate$1(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }
  return function (t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
  reB = new RegExp(reA.source, "g");
function zero(b) {
  return function () {
    return b;
  };
}
function one(b) {
  return function (t) {
    return b(t) + "";
  };
}
function interpolateString (a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
    // scan index for next number in b
    am,
    // current match in a
    bm,
    // current match in b
    bs,
    // string preceding current number in b, if any
    i = -1,
    // index in s
    s = [],
    // string constants and placeholders
    q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: interpolateNumber(am, bm)
      });
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
    return s.join("");
  });
}

function interpolate$1 (a, b) {
  var t = typeof b,
    c;
  return b == null || t === "boolean" ? constant$1(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
}

function interpolateRound (a, b) {
  return a = +a, b = +b, function (t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

var degrees = 180 / Math.PI;
var identity$3 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose (a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var svgNode;

/* eslint-disable no-undef */
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity$3 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null) return identity$3;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$3;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
      }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: interpolateNumber(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: interpolateNumber(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
      }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function (a, b) {
    var s = [],
      // string constants and placeholders
      q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function (t) {
      var i = -1,
        n = q.length,
        o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var frame = 0,
  // is an animation frame pending?
  timeout$1 = 0,
  // is a timeout pending?
  interval = 0,
  // are any timers active?
  pokeDelay = 1000,
  // how frequently we check for clock skew
  taskHead,
  taskTail,
  clockLast = 0,
  clockNow = 0,
  clockSkew = 0,
  clock = typeof performance === "object" && performance.now ? performance : Date,
  setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
    setTimeout(f, 17);
  };
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead,
    e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout$1 = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now = clock.now(),
    delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}
function nap() {
  var t0,
    t1 = taskHead,
    t2,
    time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout$1) timeout$1 = clearTimeout(timeout$1);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout (callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(elapsed => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

var emptyOn = dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule (node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}
function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}
function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}
function create(node, id, self) {
  var schedules = node.__transition,
    tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);
  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }
  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return timeout(start);

      // Interrupt the active transition, if any.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions.
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    timeout(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
      i = -1,
      n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }
  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

function interrupt (node, name) {
  var schedules = node.__transition,
    schedule,
    active,
    empty = true,
    i;
  if (!schedules) return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty) delete node.__transition;
}

function selection_interrupt (name) {
  return this.each(function () {
    interrupt(this, name);
  });
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = set(this, id),
      tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = set(this, id),
      tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {
          name: name,
          value: value
        }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function transition_tween (name, value) {
  var id = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}
function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = set(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return get(node, id).value[name];
  };
}

function interpolate (a, b) {
  var c;
  return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
}

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, interpolate, value1) {
  var string00,
    string1 = value1 + "",
    interpolate0;
  return function () {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS(fullname, interpolate, value1) {
  var string00,
    string1 = value1 + "",
    interpolate0;
  return function () {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
      value1 = value(this),
      string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
      value1 = value(this),
      string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function transition_attr (name, value) {
  var fullname = namespace(name),
    i = fullname === "transform" ? interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}

function attrInterpolate(name, i) {
  return function (t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function (t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function transition_attrTween (name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function () {
    init(this, id).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id, value) {
  return value = +value, function () {
    init(this, id).delay = value;
  };
}
function transition_delay (value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function () {
    set(this, id).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id, value) {
  return value = +value, function () {
    set(this, id).duration = value;
  };
}
function transition_duration (value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    set(this, id).ease = value;
  };
}
function transition_ease (value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : get(this.node(), id).ease;
}

function easeVarying(id, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (typeof v !== "function") throw new Error();
    set(this, id).ease = v;
  };
}
function transition_easeVarying (value) {
  if (typeof value !== "function") throw new Error();
  return this.each(easeVarying(this._id, value));
}

function transition_filter (match) {
  if (typeof match !== "function") match = matcher(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

function transition_merge (transition) {
  if (transition._id !== this._id) throw new Error();
  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id, name, listener) {
  var on0,
    on1,
    sit = start(name) ? init : set;
  return function () {
    var schedule = sit(this, id),
      on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function transition_on (name, listener) {
  var id = this._id;
  return arguments.length < 2 ? get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}
function transition_remove () {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select (select) {
  var name = this._name,
    id = this._id;
  if (typeof select !== "function") select = selector(select);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get(node, id));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id);
}

function transition_selectAll (select) {
  var name = this._name,
    id = this._id;
  if (typeof select !== "function") select = selectorAll(select);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id);
}

var Selection = selection.prototype.constructor;
function transition_selection () {
  return new Selection(this._groups, this._parents);
}

function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = styleValue(this, name),
      string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, interpolate, value1) {
  var string00,
    string1 = value1 + "",
    interpolate0;
  return function () {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = styleValue(this, name),
      value1 = value(this),
      string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id, name) {
  var on0,
    on1,
    listener0,
    key = "style." + name,
    event = "end." + key,
    remove;
  return function () {
    var schedule = set(this, id),
      on = schedule.on,
      listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function transition_style (name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
}

function styleInterpolate(name, i, priority) {
  return function (t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function transition_styleTween (name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function transition_text (value) {
  return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}

function textInterpolate(i) {
  return function (t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function transition_textTween (value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}

function transition_transition () {
  var name = this._name,
    id0 = this._id,
    id1 = newId();
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}

function transition_end () {
  var on0,
    on1,
    that = this,
    id = that._id,
    size = that.size();
  return new Promise(function (resolve, reject) {
    var cancel = {
        value: reject
      },
      end = {
        value: function () {
          if (--size === 0) resolve();
        }
      };
    that.each(function () {
      var schedule = set(this, id),
        on = schedule.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });

    // The selection was empty, resolve end immediately
    if (size === 0) resolve();
  });
}

var id = 0;
function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}
function newId() {
  return ++id;
}
var selection_prototype = selection.prototype;
Transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  textTween: transition_textTween,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  easeVarying: transition_easeVarying,
  end: transition_end,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id} not found`);
    }
  }
  return timing;
}
function selection_transition (name) {
  var id, timing;
  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }
  return new Transition(groups, this._parents, name, id);
}

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

const pi$1 = Math.PI,
  tau$1 = 2 * pi$1,
  epsilon$1 = 1e-6,
  tauEpsilon = tau$1 - epsilon$1;
function append(strings) {
  this._ += strings[0];
  for (let i = 1, n = strings.length; i < n; ++i) {
    this._ += arguments[i] + strings[i];
  }
}
function appendRound(digits) {
  let d = Math.floor(digits);
  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
  if (d > 15) return append;
  const k = 10 ** d;
  return function (strings) {
    this._ += strings[0];
    for (let i = 1, n = strings.length; i < n; ++i) {
      this._ += Math.round(arguments[i] * k) / k + strings[i];
    }
  };
}
class Path {
  constructor(digits) {
    this._x0 = this._y0 =
    // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x, y) {
    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x, y) {
    this._append`L${this._x1 = +x},${this._y1 = +y}`;
  }
  quadraticCurveTo(x1, y1, x, y) {
    this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;
  }
  bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;
  }
  arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;

    // Is the radius negative? Error.
    if (r < 0) throw new Error(`negative radius: ${r}`);
    let x0 = this._x1,
      y0 = this._y1,
      x21 = x2 - x1,
      y21 = y2 - y1,
      x01 = x0 - x1,
      y01 = y0 - y1,
      l01_2 = x01 * x01 + y01 * y01;

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._append`M${this._x1 = x1},${this._y1 = y1}`;
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon$1)) ;

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
      this._append`L${this._x1 = x1},${this._y1 = y1}`;
    }

    // Otherwise, draw an arc!
    else {
      let x20 = x2 - x0,
        y20 = y2 - y0,
        l21_2 = x21 * x21 + y21 * y21,
        l20_2 = x20 * x20 + y20 * y20,
        l21 = Math.sqrt(l21_2),
        l01 = Math.sqrt(l01_2),
        l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
        t01 = l / l01,
        t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon$1) {
        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
      }
      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
    }
  }
  arc(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;

    // Is the radius negative? Error.
    if (r < 0) throw new Error(`negative radius: ${r}`);
    let dx = r * Math.cos(a0),
      dy = r * Math.sin(a0),
      x0 = x + dx,
      y0 = y + dy,
      cw = 1 ^ ccw,
      da = ccw ? a0 - a1 : a1 - a0;

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._append`M${x0},${y0}`;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
      this._append`L${x0},${y0}`;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau$1 + tau$1;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon$1) {
      this._append`A${r},${r},0,${+(da >= pi$1)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;
    }
  }
  rect(x, y, w, h) {
    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;
  }
  toString() {
    return this._;
  }
}

function formatDecimal (x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i,
    coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}

function exponent (x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup (grouping, thousands) {
  return function (value, width) {
    var i = value.length,
      t = [],
      j = 0,
      g = grouping[0],
      length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

function formatNumerals (numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim (s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;
      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;
      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;
function formatPrefixAuto (x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
    exponent = d[1],
    i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
    n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded (x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
    exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": x => Math.round(x).toString(2),
  "c": x => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": x => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": x => Math.round(x).toString(16).toUpperCase(),
  "x": x => Math.round(x).toString(16)
};

function identity$2 (x) {
  return x;
}

var map$1 = Array.prototype.map,
  prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale (locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$2 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + ""),
    currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
    currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
    decimal = locale.decimal === undefined ? "." : locale.decimal + "",
    numerals = locale.numerals === undefined ? identity$2 : formatNumerals(map$1.call(locale.numerals, String)),
    percent = locale.percent === undefined ? "%" : locale.percent + "",
    minus = locale.minus === undefined ? "−" : locale.minus + "",
    nan = locale.nan === undefined ? "NaN" : locale.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill,
      align = specifier.align,
      sign = specifier.sign,
      symbol = specifier.symbol,
      zero = specifier.zero,
      width = specifier.width,
      comma = specifier.comma,
      precision = specifier.precision,
      trim = specifier.trim,
      type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
      suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
      maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format(value) {
      var valuePrefix = prefix,
        valueSuffix = suffix,
        i,
        n,
        c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
        padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format.toString = function () {
      return specifier + "";
    };
    return format;
  }
  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
      e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
      k = Math.pow(10, -e),
      prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed (step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix (step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound (step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

const implicit = Symbol("implicit");
function ordinal() {
  var index = new InternMap(),
    domain = [],
    range = [],
    unknown = implicit;
  function scale(d) {
    let i = index.get(d);
    if (i === undefined) {
      if (unknown !== implicit) return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range[i % range.length];
  }
  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };
  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
    domain = scale.domain,
    ordinalRange = scale.range,
    r0 = 0,
    r1 = 1,
    step,
    bandwidth,
    round = false,
    paddingInner = 0,
    paddingOuter = 0,
    align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length,
      reverse = r1 < r0,
      start = reverse ? r1 : r0,
      stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }
  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function (_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function (_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function () {
    return bandwidth;
  };
  scale.step = function () {
    return step;
  };
  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function () {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function () {
    return pointish(copy());
  };
  return scale;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

function constants(x) {
  return function () {
    return x;
  };
}

function number(x) {
  return +x;
}

var unit = [0, 1];
function identity$1(x) {
  return x;
}
function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0],
    d1 = domain[1],
    r0 = range[0],
    r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}
function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
    d = new Array(j),
    r = new Array(j),
    i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }
  return function (x) {
    var i = bisect(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit,
    range = unit,
    interpolate = interpolate$1,
    transform,
    untransform,
    unknown,
    clamp = identity$1,
    piecewise,
    output,
    input;
  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }
  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
  };
  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
  };
  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };
  scale.rangeRound = function (_) {
    return range = Array.from(_), interpolate = interpolateRound, rescale();
  };
  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
  };
  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity$1, identity$1);
}

function tickFormat(start, stop, count, specifier) {
  var step = tickStep(start, stop, count),
    precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }
    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }
  return format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function (count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear() {
  var scale = continuous();
  scale.copy = function () {
    return copy(scale, linear());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

function constant (x) {
  return function constant() {
    return x;
  };
}

const abs = Math.abs;
const atan2 = Math.atan2;
const cos = Math.cos;
const max$1 = Math.max;
const min$1 = Math.min;
const sin = Math.sin;
const sqrt = Math.sqrt;
const epsilon = 1e-12;
const pi = Math.PI;
const halfPi = pi / 2;
const tau = 2 * pi;
function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

function withPath(shape) {
  let digits = 3;
  shape.digits = function (_) {
    if (!arguments.length) return digits;
    if (_ == null) {
      digits = null;
    } else {
      const d = Math.floor(_);
      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
      digits = d;
    }
    return shape;
  };
  return () => new Path(digits);
}

function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
    y10 = y1 - y0,
    x32 = x3 - x2,
    y32 = y3 - y2,
    t = y32 * x10 - x32 * y10;
  if (t * t < epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
    y01 = y0 - y1,
    lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
    ox = lo * y01,
    oy = -lo * x01,
    x11 = x0 + ox,
    y11 = y0 + oy,
    x10 = x1 + ox,
    y10 = y1 + oy,
    x00 = (x11 + x10) / 2,
    y00 = (y11 + y10) / 2,
    dx = x10 - x11,
    dy = y10 - y11,
    d2 = dx * dx + dy * dy,
    r = r1 - rc,
    D = x11 * y10 - x10 * y11,
    d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
    cx0 = (D * dy - dx * d) / d2,
    cy0 = (-D * dx - dy * d) / d2,
    cx1 = (D * dy + dx * d) / d2,
    cy1 = (-D * dx + dy * d) / d2,
    dx0 = cx0 - x00,
    dy0 = cy0 - y00,
    dx1 = cx1 - x00,
    dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc () {
  var innerRadius = arcInnerRadius,
    outerRadius = arcOuterRadius,
    cornerRadius = constant(0),
    padRadius = null,
    startAngle = arcStartAngle,
    endAngle = arcEndAngle,
    padAngle = arcPadAngle,
    context = null,
    path = withPath(arc);
  function arc() {
    var buffer,
      r,
      r0 = +innerRadius.apply(this, arguments),
      r1 = +outerRadius.apply(this, arguments),
      a0 = startAngle.apply(this, arguments) - halfPi,
      a1 = endAngle.apply(this, arguments) - halfPi,
      da = abs(a1 - a0),
      cw = a1 > a0;
    if (!context) context = buffer = path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
        a11 = a1,
        a00 = a0,
        a10 = a1,
        da0 = da,
        da1 = da,
        ap = padAngle.apply(this, arguments) / 2,
        rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
        rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
        rc0 = rc,
        rc1 = rc,
        t0,
        t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)),
          p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01),
        y01 = r1 * sin(a01),
        x10 = r0 * cos(a10),
        y10 = r0 * sin(a10);

      // Apply rounded corners?
      if (rc > epsilon) {
        var x11 = r1 * cos(a11),
          y11 = r1 * sin(a11),
          x00 = r0 * cos(a00),
          y00 = r0 * sin(a00),
          oc;

        // Restrict the corner radius according to the sector angle. If this
        // intersection fails, it’s probably because the arc is too small, so
        // disable the corner radius entirely.
        if (da < pi) {
          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
            var ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min$1(rc, (r0 - lc) / (kc - 1));
            rc1 = min$1(rc, (r1 - lc) / (kc + 1));
          } else {
            rc0 = rc1 = 0;
          }
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }
  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
      a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a) * r, sin(a) * r];
  };
  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
  };
  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
  };
  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
  };
  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
  };
  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
  };
  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
  };
  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}

function array (x) {
  return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
  : Array.from(x); // Map, Set, iterable, string, or anything else
}

function descending (a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function identity (d) {
  return d;
}

function pie () {
  var value = identity,
    sortValues = descending,
    sort = null,
    startAngle = constant(0),
    endAngle = constant(tau),
    padAngle = constant(0);
  function pie(data) {
    var i,
      n = (data = array(data)).length,
      j,
      k,
      sum = 0,
      index = new Array(n),
      arcs = new Array(n),
      a0 = +startAngle.apply(this, arguments),
      da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
      a1,
      p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
      pa = p * (da < 0 ? -1 : 1),
      v;
    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
  };
  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };
  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };
  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
  };
  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
  };
  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
  };
  return pie;
}

function none$1 (series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

function none (series) {
  var n = series.length,
    o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

function stackValue(d, key) {
  return d[key];
}
function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}
function stack () {
  var keys = constant([]),
    order = none,
    offset = none$1,
    value = stackValue;
  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries),
      i,
      n = sz.length,
      j = -1,
      oz;
    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
      }
    }
    for (i = 0, oz = array(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(Array.from(_)), stack) : keys;
  };
  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
  };
  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? none : typeof _ === "function" ? _ : constant(Array.from(_)), stack) : order;
  };
  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
  };
  return stack;
}

var StyledChartContainer$1 = styled.div.withConfig({
  displayName: "StyledMultiplePieChart__StyledChartContainer",
  componentId: "sc-150ux1r-0"
})(["&&{display:flex;flex-direction:column;justify-content:center;align-items:center;width:fit-content;background-color:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.chart.colors.pie.background;
});
var StyledMultiplePieChartContainer = styled.div.withConfig({
  displayName: "StyledMultiplePieChart__StyledMultiplePieChartContainer",
  componentId: "sc-150ux1r-1"
})(["&&{position:relative;width:", "px;height:", "px;}"], function (_ref2) {
  var theme = _ref2.theme,
    themeSize = _ref2.themeSize;
  return theme.__hd__.chart.sizes.pie[themeSize];
}, function (_ref3) {
  var theme = _ref3.theme,
    themeSize = _ref3.themeSize;
  return theme.__hd__.chart.sizes.pie[themeSize];
});

var HEADINGS = {
  1: 'h1',
  2: 'h2',
  3: 'h3',
  4: 'h4',
  5: 'h5'
};
var Heading = function Heading(_ref) {
  var themeLevel = _ref.themeLevel,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(HEADINGS[themeLevel], {
    className: className,
    style: style,
    id: id,
    'data-test-id': dataTestId
  }, children);
};
var StyledTitle$1 = styled(Heading).withConfig({
  displayName: "StyledTitle",
  componentId: "sc-1j7vywk-0"
})(["&&{margin:0;padding:0;", ";", ";", ";}"], function (_ref2) {
  var themeIntent = _ref2.themeIntent,
    theme = _ref2.theme;
  switch (themeIntent) {
    case 'main':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.main);
    case 'subdued':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.subdued);
  }
}, function (_ref3) {
  var themeFontWeight = _ref3.themeFontWeight,
    theme = _ref3.theme;
  switch (themeFontWeight) {
    case 'light':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.light);
    case 'regular':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.regular);
    case 'semi-bold':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.semiBold);
    case 'bold':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.bold);
  }
}, function (_ref4) {
  var themeLevel = _ref4.themeLevel,
    theme = _ref4.theme;
  switch (themeLevel) {
    case 1:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.xxxxxlarge, theme.__hd__.typography.lineHeights.xxxxxlarge);
    case 2:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.xxxxlarge, theme.__hd__.typography.lineHeights.xxxxlarge);
    case 3:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.xxxlarge, theme.__hd__.typography.lineHeights.xxxlarge);
    case 4:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.xxlarge, theme.__hd__.typography.lineHeights.xxlarge);
    case 5:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.xlarge, theme.__hd__.typography.lineHeights.xlarge);
  }
});
var StyledTitle$2 = StyledTitle$1;

var Title = function Title(_ref) {
  var _ref$level = _ref.level,
    level = _ref$level === void 0 ? 1 : _ref$level,
    children = _ref.children,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'main' : _ref$intent,
    _ref$fontWeight = _ref.fontWeight,
    fontWeight = _ref$fontWeight === void 0 ? 'semi-bold' : _ref$fontWeight,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(StyledTitle$2, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themeLevel: level,
    themeIntent: intent,
    themeFontWeight: fontWeight
  }, children);
};
var Title$1 = Title;

var textCss = css$2(["margin:0;padding:0;", ";", ";", ";"], function (_ref) {
  var themeIntent = _ref.themeIntent,
    theme = _ref.theme;
  switch (themeIntent) {
    case 'main':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.main);
    case 'body':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.body);
    case 'subdued':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.subdued);
    case 'disabled':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.disabled);
    case 'primary':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.primary);
    case 'success':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.success);
    case 'danger':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.danger);
    case 'warning':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.warning);
    case 'error':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.error);
    case 'white':
      return css$2(["color:", ";"], theme.__hd__.typography.colors.white);
  }
}, function (_ref2) {
  var themeFontWeight = _ref2.themeFontWeight,
    theme = _ref2.theme;
  switch (themeFontWeight) {
    case 'light':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.light);
    case 'regular':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.regular);
    case 'semi-bold':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.semiBold);
    case 'bold':
      return css$2(["font-weight:", ";"], theme.__hd__.typography.fontWeights.bold);
  }
}, function (_ref3) {
  var themeFontSize = _ref3.themeFontSize,
    theme = _ref3.theme;
  switch (themeFontSize) {
    case 10:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.xsmall, theme.__hd__.typography.lineHeights.xsmall);
    case 12:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.small, theme.__hd__.typography.lineHeights.small);
    case 14:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.medium, theme.__hd__.typography.lineHeights.medium);
    case 16:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.large, theme.__hd__.typography.lineHeights.large);
    case 18:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.typography.fontSizes.xlarge, theme.__hd__.typography.lineHeights.xlarge);
  }
});
// Suport inline elements:
// * Inline elements:
// * * <strong>
// * * <b>
// * * <label>
// * * <a>
// * * <span>
// * * <br>
// * * <em>
// * * <i>
var nestedInlineStyle = css$2(["> strong,> b,> label{margin:0;padding:0;font-weight:", ";}> em,> i,> span,> br{margin:0;padding:0;}> a{margin:0;padding:0;text-decoration:none;color:", ";&:hover,&:focus{color:", ";}}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.typography.fontWeights.nestedStrongTag;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.typography.colors.nestedLink;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.typography.colors.hoverNestedLink;
});
var StyledParagraphBlock = styled.p.withConfig({
  displayName: "StyledText__StyledParagraphBlock",
  componentId: "sc-8uz7gw-0"
})(["&&{", ";", ";}"], textCss, nestedInlineStyle);
var StyledDivBlock = styled.div.withConfig({
  displayName: "StyledText__StyledDivBlock",
  componentId: "sc-8uz7gw-1"
})(["&&{", ";", ";}&& > p{", ";", ";}&& > ul{margin:0;padding:0;padding-inline-start:", ";}&& > ul > li{margin:0;padding:0;}"], textCss, nestedInlineStyle, textCss, nestedInlineStyle, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.typography.space.nestedUnorderedListPaddingLeft;
});
var StyledSpanInline = styled.span.withConfig({
  displayName: "StyledText__StyledSpanInline",
  componentId: "sc-8uz7gw-2"
})(["&&{", ";", ";}"], textCss, nestedInlineStyle);
var StyledLabelInline = styled.label.withConfig({
  displayName: "StyledText__StyledLabelInline",
  componentId: "sc-8uz7gw-3"
})(["&&{", ";", ";}"], textCss, nestedInlineStyle);

var Text = function Text(_ref) {
  var children = _ref.children,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'main' : _ref$intent,
    _ref$fontSize = _ref.fontSize,
    fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
    _ref$fontWeight = _ref.fontWeight,
    fontWeight = _ref$fontWeight === void 0 ? 'regular' : _ref$fontWeight,
    _ref$tagName = _ref.tagName,
    tagName = _ref$tagName === void 0 ? 'p' : _ref$tagName,
    htmlFor = _ref.htmlFor,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var commonTextProps = {
    themeIntent: intent,
    themeFontSize: fontSize,
    themeFontWeight: fontWeight,
    as: tagName,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    'data-test-id': dataTestId,
    children: children
  };
  switch (tagName) {
    case 'div':
      return /*#__PURE__*/React__default.createElement(StyledDivBlock, Object.assign({}, commonTextProps));
    case 'p':
      return /*#__PURE__*/React__default.createElement(StyledParagraphBlock, Object.assign({}, commonTextProps));
    case 'span':
      return /*#__PURE__*/React__default.createElement(StyledSpanInline, Object.assign({}, commonTextProps));
    case 'label':
      return /*#__PURE__*/React__default.createElement(StyledLabelInline, Object.assign({}, commonTextProps, {
        htmlFor: htmlFor
      }));
  }
};
var Text$1 = Text;

var Typography = {
  Title: Title$1,
  Text: Text$1
};
var Typography$1 = Typography;

var Label$2 = styled.label.withConfig({
  displayName: "StyledCheckbox__Label",
  componentId: "sc-1b87v13-0"
})(["&&{display:inline-flex;position:relative;margin:0;padding:0;vertical-align:middle;}"]);
var LabelText = styled.span.withConfig({
  displayName: "StyledCheckbox__LabelText",
  componentId: "sc-1b87v13-1"
})(["&&{margin:0;padding:0;padding-left:", ";font-size:", ";font-weight:", ";line-height:", ";min-height:", ";color:", ";}&&::before{content:'';position:absolute;width:", ";height:", ";top:", ";left:0;border:", " solid ", ";border-radius:", ";background:", ";box-sizing:border-box;}&&:hover{cursor:pointer;}&&:hover::before{border-color:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.checkbox.space.labelPaddingLeft;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.checkbox.fontSizes["default"];
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.checkbox.fontWeights["default"];
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.checkbox.lineHeights["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.checkbox.lineHeights["default"];
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.checkbox.colors.text;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.checkbox.sizes.width;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.checkbox.sizes.height;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.checkbox.space.top;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.checkbox.borderWidths["default"];
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.checkbox.colors.defaultBorder;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.checkbox.radii["default"];
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.checkbox.colors.defaultBackground;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.checkbox.colors.checkedBorder;
});
var HiddenInput$4 = styled.input.withConfig({
  displayName: "StyledCheckbox__HiddenInput",
  componentId: "sc-1b87v13-2"
})(["&&{display:none;margin:0;padding:0;}&&:checked ~ ", "::before{border-color:", ";background:", ";}&&:checked ~ ", "::after{content:'';position:absolute;height:", ";width:", ";top:", ";left:", ";border-width:0 ", " ", " 0;border-color:", ";border-style:solid;transform:translate(-50%,-30%) rotate(45deg);box-sizing:border-box;}&&:indeterminate ~ ", "::after{content:'';position:absolute;height:", ";width:", ";top:", ";left:", ";background:", ";border-radius:", ";}&&:disabled ~ ", "{color:", ";}&&:disabled ~ ", ":hover{cursor:not-allowed;}&&:disabled ~ ", "::before{border-color:", ";background:", ";}&&:disabled ~ ", "::after{border-color:", ";}"], LabelText, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.checkbox.colors.checkedBorder;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.checkbox.colors.checkedBackground;
}, LabelText, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.checkbox.sizes.markHeight;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.checkbox.sizes.markWidth;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.checkbox.space.markTop;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.checkbox.space.markLeft;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.checkbox.borderWidths["default"];
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.checkbox.borderWidths["default"];
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.checkbox.colors.defaultCheckmark;
}, LabelText, function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.checkbox.sizes.indeterminateBoxHeight;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.checkbox.sizes.indeterminateBoxWidth;
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.checkbox.space.indeterminateBoxTop;
}, function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.checkbox.space.indeterminateBoxLeft;
}, function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.checkbox.colors.indeterminateBoxBackground;
}, function (_ref29) {
  var theme = _ref29.theme;
  return theme.__hd__.checkbox.radii.indeterminateBox;
}, LabelText, function (_ref30) {
  var theme = _ref30.theme;
  return theme.__hd__.checkbox.colors.disabledText;
}, LabelText, LabelText, function (_ref31) {
  var theme = _ref31.theme;
  return theme.__hd__.checkbox.colors.defaultBorder;
}, function (_ref32) {
  var theme = _ref32.theme;
  return theme.__hd__.checkbox.colors.disabledBackground;
}, LabelText, function (_ref33) {
  var theme = _ref33.theme;
  return theme.__hd__.checkbox.colors.disabledCheckmark;
});
var GroupWrapper$1 = styled.div.withConfig({
  displayName: "StyledCheckbox__GroupWrapper",
  componentId: "sc-1b87v13-3"
})(["&&{display:flex;margin:0;padding:0;", ";}"], function (_ref34) {
  var themeLayout = _ref34.themeLayout,
    theme = _ref34.theme;
  switch (themeLayout) {
    case 'vertical':
      return css$2(["flex-direction:column;& > ", ":not(:first-child){margin-top:", ";}"], Label$2, theme.__hd__.checkbox.space.marginTop);
    case 'horizontal':
      return css$2(["& > ", ":not(:first-child){margin-left:", ";}"], Label$2, theme.__hd__.checkbox.space.marginLeft);
  }
});
var ButtonLabel = styled.label.withConfig({
  displayName: "StyledCheckbox__ButtonLabel",
  componentId: "sc-1b87v13-4"
})(["&&{display:inline-block;margin:0;padding:0;}"]);
var ButtonLabelText = styled.span.withConfig({
  displayName: "StyledCheckbox__ButtonLabelText",
  componentId: "sc-1b87v13-5"
})(["&&{box-sizing:border-box;line-height:100%;display:flex;align-items:center;cursor:pointer;border-style:solid;border-color:", ";border-width:", ";border-radius:", ";font-weight:", ";margin:0;padding:0;color:", ";}&&:hover,&&:focus{color:", ";border-color:", ";}&&{", ";}"], function (_ref35) {
  var theme = _ref35.theme;
  return theme.__hd__.checkbox.colors.buttonDefaultBorder;
}, function (_ref36) {
  var theme = _ref36.theme;
  return theme.__hd__.checkbox.borderWidths["default"];
}, function (_ref37) {
  var theme = _ref37.theme;
  return theme.__hd__.checkbox.radii["default"];
}, function (_ref38) {
  var theme = _ref38.theme;
  return theme.__hd__.checkbox.fontWeights["default"];
}, function (_ref39) {
  var theme = _ref39.theme;
  return theme.__hd__.checkbox.colors.buttonText;
}, function (_ref40) {
  var theme = _ref40.theme;
  return theme.__hd__.checkbox.colors.buttonHover;
}, function (_ref41) {
  var theme = _ref41.theme;
  return theme.__hd__.checkbox.colors.buttonHover;
}, function (_ref42) {
  var themeSize = _ref42.themeSize,
    theme = _ref42.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["height:", ";padding:", ";font-size:", ";"], theme.__hd__.checkbox.sizes.buttonSmall, theme.__hd__.checkbox.space.buttonSmallPadding, theme.__hd__.checkbox.fontSizes.buttonsmall);
    case 'medium':
      return css$2(["height:", ";padding:", ";font-size:", ";"], theme.__hd__.checkbox.sizes.buttonMedium, theme.__hd__.checkbox.space.buttonMediumPadding, theme.__hd__.checkbox.fontSizes.buttonMedium);
    case 'large':
      return css$2(["height:", ";padding:", ";font-size:", ";"], theme.__hd__.checkbox.sizes.buttonLarge, theme.__hd__.checkbox.space.buttonLargePadding, theme.__hd__.checkbox.fontSizes.buttonLarge);
  }
});
var ButtonHiddenInput = styled.input.withConfig({
  displayName: "StyledCheckbox__ButtonHiddenInput",
  componentId: "sc-1b87v13-6"
})(["&&{opacity:0;width:0;height:0;position:absolute;margin:0;padding:0;}&&:disabled ~ ", "{color:", ";background-color:", ";border-color:", ";pointer-events:none;}&&:disabled:checked ~ ", "{color:", ";background-color:", ";border:none;}&&:checked + ", "{border-color:", ";color:", ";background:", ";}"], ButtonLabelText, function (_ref43) {
  var theme = _ref43.theme;
  return theme.__hd__.checkbox.colors.buttonDisabledText;
}, function (_ref44) {
  var theme = _ref44.theme;
  return theme.__hd__.checkbox.colors.buttonDisabledBackground;
}, function (_ref45) {
  var theme = _ref45.theme;
  return theme.__hd__.checkbox.colors.buttonDefaultBorder;
}, ButtonLabelText, function (_ref46) {
  var theme = _ref46.theme;
  return theme.__hd__.checkbox.colors.buttonDisabledSelectedText;
}, function (_ref47) {
  var theme = _ref47.theme;
  return theme.__hd__.checkbox.colors.buttonDisabledSelectedBackground;
}, ButtonLabelText, function (_ref48) {
  var theme = _ref48.theme;
  return theme.__hd__.checkbox.colors.buttonSelectedBackground;
}, function (_ref49) {
  var theme = _ref49.theme;
  return theme.__hd__.checkbox.colors.buttonSelectedText;
}, function (_ref50) {
  var theme = _ref50.theme;
  return theme.__hd__.checkbox.colors.buttonSelectedBackground;
});
var ButtonGroupWrapper = styled.div.withConfig({
  displayName: "StyledCheckbox__ButtonGroupWrapper",
  componentId: "sc-1b87v13-7"
})(["&&{display:inline-flex;flex-wrap:wrap;padding:0;", ";}"], function (_ref51) {
  var themeSize = _ref51.themeSize,
    theme = _ref51.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.checkbox.space.buttonGroupSmallMargin, theme.__hd__.checkbox.sizes.buttonGroupSmallWidth, theme.__hd__.checkbox.space.buttonSmallMargin);
    case 'medium':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.checkbox.space.buttonGroupMediumMargin, theme.__hd__.checkbox.sizes.buttonGroupMediumWidth, theme.__hd__.checkbox.space.buttonMediumMargin);
    case 'large':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.checkbox.space.buttonGroupLargeMargin, theme.__hd__.checkbox.sizes.buttonGroupLargeWidth, theme.__hd__.checkbox.space.buttonLargeMargin);
  }
});

var setIndeterminate = function setIndeterminate(target, value) {
  if (target !== null && value !== undefined) {
    // eslint-disable-next-line no-param-reassign
    target.indeterminate = value;
  }
};
var Checkbox$1 = function Checkbox(_ref) {
  var value = _ref.value,
    text = _ref.text,
    checked = _ref.checked,
    indeterminate = _ref.indeterminate,
    onChange = _ref.onChange,
    disabled = _ref.disabled,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var inputRef = React__default.useRef(null);
  React__default.useEffect(function () {
    setIndeterminate(inputRef.current, indeterminate);
  }, [indeterminate]);
  return /*#__PURE__*/React__default.createElement(Label$2, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx))
  }, /*#__PURE__*/React__default.createElement(HiddenInput$4, {
    value: value,
    type: "checkbox",
    name: name,
    checked: checked,
    ref: inputRef,
    disabled: disabled,
    onChange: onChange,
    id: id,
    "data-test-id": dataTestId
  }), /*#__PURE__*/React__default.createElement(LabelText, null, text));
};
var Checkbox$2 = Checkbox$1;

var StyledLegendDot = styled.span.withConfig({
  displayName: "StyledLegend__StyledLegendDot",
  componentId: "sc-dyfhji-0"
})(["&&{width:", "px;height:", "px;background-color:", ";border-radius:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.chart.sizes.legend.dot;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.chart.sizes.legend.dot;
}, function (_ref3) {
  var themeColor = _ref3.themeColor;
  return themeColor;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.chart.radii.legend.dotRadius;
});
var StyledLegendCircle = styled(Box$1).withConfig({
  displayName: "StyledLegend__StyledLegendCircle",
  componentId: "sc-dyfhji-1"
})(["&&{width:", ";height:", ";border-radius:", ";display:inline-flex;background-color:", ";flex-shrink:0;}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.legend.sizes.legendWidth;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.legend.sizes.legendHeight;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.legend.radii.legendCircle;
}, function (_ref8) {
  var themeColor = _ref8.themeColor;
  return themeColor;
});
var StyledLegendContainer$4 = styled(Box$1).withConfig({
  displayName: "StyledLegend__StyledLegendContainer",
  componentId: "sc-dyfhji-2"
})(["&&{display:flex;align-items:center;}&& > ", ":not(:last-child){margin-right:", ";}"], StyledLegendCircle, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.legend.space.legendCircleMarginRight;
});
var StyledLegendCheckBox = styled(Checkbox$2).withConfig({
  displayName: "StyledLegend__StyledLegendCheckBox",
  componentId: "sc-dyfhji-3"
})(["&& > ", ":hover::before{border-color:", ";}&& > ", ":checked ~ ", "::before{border-color:", ";background:", ";}"], LabelText, function (_ref10) {
  var themeColor = _ref10.themeColor;
  return themeColor;
}, HiddenInput$4, LabelText, function (_ref11) {
  var themeColor = _ref11.themeColor;
  return themeColor;
}, function (_ref12) {
  var themeColor = _ref12.themeColor;
  return themeColor;
});
var StyledLegendBox = styled(Box$1).withConfig({
  displayName: "StyledLegend__StyledLegendBox",
  componentId: "sc-dyfhji-4"
})(["&&{display:flex;align-items:center;gap:", ";", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return "".concat(theme.__hd__.columnChart.space.legendBoxGap, "px");
}, function (_ref14) {
  var themeDirection = _ref14.themeDirection;
  return themeDirection === 'vertical' && css$2(["flex-direction:column;"]);
});

var Arrow = styled.div.withConfig({
  displayName: "StyledTooltip__Arrow",
  componentId: "sc-u2o9fk-0"
})(["&&{height:", ";width:", ";position:absolute;margin:0;padding:0;}&&::before{box-sizing:border-box;position:absolute;transform:rotate(45deg);height:", ";width:", ";background:", ";content:'';}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.tooltip.sizes.arrow;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.tooltip.sizes.arrow;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.tooltip.sizes.arrow;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.tooltip.sizes.arrow;
}, function (_ref5) {
  var theme = _ref5.theme,
    variant = _ref5.variant;
  return theme.__hd__.tooltip.colors[variant].background;
});
var delayShowFrame = keyframes(["0%{opacity:0;}100%{opacity:1;}"]);
var TooltipWrapper = styled.div.withConfig({
  displayName: "StyledTooltip__TooltipWrapper",
  componentId: "sc-u2o9fk-1"
})(["&&{z-index:9999;color:", ";background:", ";margin:0;padding:", ";font-size:", ";font-weight:", ";line-height:", ";border-radius:", ";text-align:left;border-width:", ";border-style:solid;border-color:", ";box-sizing:border-box;box-shadow:", ";", ";}"], function (_ref6) {
  var theme = _ref6.theme,
    variant = _ref6.variant;
  return theme.__hd__.tooltip.colors[variant].text;
}, function (_ref7) {
  var theme = _ref7.theme,
    variant = _ref7.variant;
  return theme.__hd__.tooltip.colors[variant].background;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.tooltip.space.wrapperPadding;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.tooltip.fontSizes["default"];
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.tooltip.fontWeights["default"];
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.tooltip.lineHeights["default"];
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.tooltip.radii["default"];
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.tooltip.borderWidths["default"];
}, function (_ref14) {
  var theme = _ref14.theme,
    variant = _ref14.variant;
  return theme.__hd__.tooltip.colors[variant].border;
}, function (_ref15) {
  var theme = _ref15.theme,
    variant = _ref15.variant;
  return theme.__hd__.tooltip.shadows[variant];
}, function (_ref16) {
  var themeDelay = _ref16.themeDelay;
  if (themeDelay) {
    return css$2(["opacity:0;animation:", " 0s linear ", "ms 1 forwards;"], delayShowFrame, themeDelay);
  }
});
var TooltipContainer = styled.div.withConfig({
  displayName: "StyledTooltip__TooltipContainer",
  componentId: "sc-u2o9fk-2"
})(["&&{display:inline-block;margin:0;padding:0;}"]);

var StyledTooltip = styled(TooltipWrapper).withConfig({
  displayName: "StyledChart__StyledTooltip",
  componentId: "sc-17o0gie-0"
})(["&&{position:absolute;transform:translate(-50%,-100%);white-space:nowrap;}&&:after{content:' ';position:absolute;top:100%;left:50%;transform:translateX(-50%);border-width:", ";border-style:solid;border-color:", ";border-top-color:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.chart.sizes.tooltip.arrowSize;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.chart.colors.tooltip.foreground;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.chart.colors.tooltip.background;
});
var StyledTitleContainer = styled.div.withConfig({
  displayName: "StyledChart__StyledTitleContainer",
  componentId: "sc-17o0gie-1"
})(["&&{display:flex;flex-direction:column;justify-content:center;align-items:center;margin:", ";}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.chart.spaces.titleContainerMargin;
});
var StyledChartTitle = styled(Typography$1.Text).withConfig({
  displayName: "StyledChart__StyledChartTitle",
  componentId: "sc-17o0gie-2"
})(["&&{}"]);
var StyledChartSubTitle = styled(Typography$1.Text).withConfig({
  displayName: "StyledChart__StyledChartSubTitle",
  componentId: "sc-17o0gie-3"
})(["&&{margin:", ";}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.chart.spaces.multiplePie.subTitleMargin;
});

var Legend = function Legend(_ref) {
  var color = _ref.color,
    title = _ref.title,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'circle' : _ref$variant,
    onCheckboxChange = _ref.onCheckboxChange,
    checked = _ref.checked,
    checkboxValue = _ref.checkboxValue,
    _ref$dataTestId = _ref.dataTestId,
    dataTestId = _ref$dataTestId === void 0 ? 'legend' : _ref$dataTestId;
  var legendPrefixMapping = {
    circle: /*#__PURE__*/React__default.createElement(StyledLegendCircle, {
      "data-test-id": "".concat(dataTestId, "-prefix-").concat(checkboxValue, "-circle"),
      themeColor: color
    }),
    checkbox: /*#__PURE__*/React__default.createElement(StyledLegendCheckBox, {
      "data-test-id": "".concat(dataTestId, "-prefix-").concat(checkboxValue, "-checkbox"),
      value: checkboxValue || '',
      text: "",
      checked: checked,
      onChange: onCheckboxChange,
      themeColor: color
    })
  };
  return /*#__PURE__*/React__default.createElement(StyledLegendContainer$4, {
    "data-test-id": "".concat(dataTestId, "-").concat(checkboxValue)
  }, legendPrefixMapping[variant], /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    intent: "subdued",
    fontSize: 12,
    fontWeight: "light"
  }, title));
};
var Legend$1 = Legend;

/**
 * Custom positioning reference element.
 * @see https://floating-ui.com/docs/virtual-elements
 */
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = v => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
const oppositeAlignmentMap = {
  start: 'end',
  end: 'start'
};
function clamp$1(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === 'function' ? value(param) : value;
}
function getSide(placement) {
  return placement.split('-')[0];
}
function getAlignment(placement) {
  return placement.split('-')[1];
}
function getOppositeAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
function getAxisLength(axis) {
  return axis === 'y' ? 'height' : 'width';
}
function getSideAxis(placement) {
  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ['left', 'right'];
  const rl = ['right', 'left'];
  const tb = ['top', 'bottom'];
  const bt = ['bottom', 'top'];
  switch (side) {
    case 'top':
    case 'bottom':
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case 'left':
    case 'right':
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === 'start', rtl);
  if (alignment) {
    list = list.map(side => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== 'number' ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === 'y';
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case 'top':
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case 'bottom':
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case 'right':
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case 'left':
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case 'start':
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case 'end':
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === 'object') {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};

/**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary on each side.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = 'clippingAncestors',
    rootBoundary = 'viewport',
    elementContext = 'floating',
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === 'floating' ? 'reference' : 'floating';
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform.getClippingRect({
    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === 'floating' ? {
    ...rects.floating,
    x,
    y
  } : rects.reference;
  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow$2 = options => ({
  name: 'arrow',
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform,
      elements,
      middlewareData
    } = state;
    // Since `element` is required, we don't Partial<> the type.
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform.getDimensions(element);
    const isYAxis = axis === 'y';
    const minProp = isYAxis ? 'top' : 'left';
    const maxProp = isYAxis ? 'bottom' : 'right';
    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;

    // DOM platform can return `window` as the `offsetParent`.
    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;

    // If the padding is large enough that it causes the arrow to no longer be
    // centered, modify the padding so that it is centered.
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);

    // Make sure the arrow doesn't overflow the floating element if the center
    // point is outside the floating element's bounds.
    const min$1 = minPadding;
    const max = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset = clamp$1(min$1, center, max);

    // If the reference is small enough that the arrow's padding causes it to
    // to point to nothing for an aligned placement, adjust the offset of the
    // floating element itself. To ensure `shift()` continues to take action,
    // a single reset is performed when this is true.
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset,
        centerOffset: center - offset - alignmentOffset,
        ...(shouldAddOffset && {
          alignmentOffset
        })
      },
      reset: shouldAddOffset
    };
  }
});

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip$1 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'flip',
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = 'bestFit',
        fallbackAxisSideDirection = 'none',
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);

      // If a reset by the arrow was caused due to an alignment offset being
      // added, we should skip any logic now since `flip()` has already done its
      // work.
      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];

      // One or more sides is overflowing.
      if (!overflows.every(side => side <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          // Try next placement and re-run the lifecycle.
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }

        // First, find the candidates that fit on the mainAxis side of overflow,
        // then find the placement that fits the best on the main crossAxis side.
        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;

        // Otherwise fallback.
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case 'bestFit':
              {
                var _overflowsData$map$so;
                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                if (placement) {
                  resetPlacement = placement;
                }
                break;
              }
            case 'initialPlacement':
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};

// For type backwards-compatibility, the `OffsetOptions` type was also
// Derivable.

async function convertValueToCoords(state, options) {
  const {
    placement,
    platform,
    elements
  } = state;
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === 'y';
  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === 'number' ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === 'number') {
    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset = function (options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: 'offset',
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);

      // If the placement is the same and the arrow caused an alignment offset
      // then we don't need to change the positioning coordinates.
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};

function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || '').toLowerCase();
  }
  // Mocked nodes in testing environments may not be instances of Node. By
  // returning `#document` an infinite loop won't occur.
  // https://github.com/floating-ui/floating-ui/issues/2317
  return '#document';
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  // Browsers without `ShadowRoot` support.
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}
function isTableElement(element) {
  return ['table', 'td', 'th'].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle$1(element);

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === 'undefined' || !CSS.supports) return false;
  return CSS.supports('-webkit-backdrop-filter', 'none');
}
function isLastTraversableNode(node) {
  return ['html', 'body', '#document'].includes(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === 'html') {
    return node;
  }
  const result =
  // Step into the shadow DOM of the parent of a slotted node.
  node.assignedSlot ||
  // DOM Element detected.
  node.parentNode ||
  // ShadowRoot detected.
  isShadowRoot(node) && node.host ||
  // Fallback.
  getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  // In testing environments, the `width` and `height` properties are empty
  // strings for SVG elements, returning NaN. Fallback to `0` in this case.
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}

function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}

function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;

  // 0, NaN, or Infinity should always fallback to 1.

  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}

const noOffsets = /*#__PURE__*/createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}

function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}

const topLayerSelectors = [':popover-open', ':modal'];
function isTopLayer(floating) {
  return topLayerSelectors.some(selector => {
    try {
      return floating.matches(selector);
    } catch (e) {
      return false;
    }
  });
}

function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === 'fixed';
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}

function getClientRects(element) {
  return Array.from(element.getClientRects());
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}

// Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable.
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === 'rtl') {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}

// Returns the inner client rect, subtracting scrollbars if present.
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === 'viewport') {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === 'document') {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
}

// A "clipping ancestor" is an `overflow` element with the characteristic of
// clipping (or hiding) child elements. This returns all clipping ancestors
// of the given element up the tree.
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';
  let currentNode = elementIsFixed ? getParentNode(element) : element;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      // Drop non-containing blocks.
      result = result.filter(ancestor => ancestor !== currentNode);
    } else {
      // Record last containing block for next iteration.
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}

// Gets the maximum area that the element is visible in due to any number of
// clipping ancestors.
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}

function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}

function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === 'fixed';
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}

function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}

// Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element, polyfill) {
  const window = getWindow(element);
  if (!isHTMLElement(element) || isTopLayer(element)) {
    return window;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
    return window;
  }
  return offsetParent || getContainingBlock(element) || window;
}

const getElementRects = async function (data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      ...(await getDimensionsFn(data.floating))
    }
  };
};

function isRTL(element) {
  return getComputedStyle$1(element).direction === 'rtl';
}

const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};

// https://samthor.au/2021/observing-dom/
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }

    // Older browsers don't support a `document` as the root and will throw an
    // error.
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}

/**
 * Automatically updates the position of the floating element when necessary.
 * Should only be called when the floating element is mounted on the DOM or
 * visible on the screen.
 * @returns cleanup function that should be invoked when the floating element is
 * removed from the DOM or hidden from the screen.
 * @see https://floating-ui.com/docs/autoUpdate
 */
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === 'function',
    layoutShift = typeof IntersectionObserver === 'function',
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
  ancestors.forEach(ancestor => {
    ancestorScroll && ancestor.addEventListener('scroll', update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener('resize', update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver(_ref => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        // Prevent update loops when using the `size` middleware.
        // https://github.com/floating-ui/floating-ui/issues/1740
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach(ancestor => {
      ancestorScroll && ancestor.removeEventListener('scroll', update);
      ancestorResize && ancestor.removeEventListener('resize', update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip = flip$1;

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow$1 = arrow$2;

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 */
const computePosition = (reference, floating, options) => {
  // This caches the expensive `getClippingElementAncestors` function so that
  // multiple lifecycle resets re-use the same result. It only lives for a
  // single call. If other functions become expensive, we can add them as well.
  const cache = new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * This wraps the core `arrow` middleware to allow React refs as the element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow = options => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, 'current');
  }
  return {
    name: 'arrow',
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === 'function' ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow$1({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow$1({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};

var index$1 = typeof document !== 'undefined' ? useLayoutEffect : useEffect;

// Fork of `fast-deep-equal` that only does the comparisons we need and compares
// functions
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === 'function' && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === 'object') {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0;) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0;) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0;) {
      const key = keys[i];
      if (key === '_owner' && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }

  // biome-ignore lint/suspicious/noSelfCompare: in source
  return a !== a && b !== b;
}

function getDPR(element) {
  if (typeof window === 'undefined') {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}

function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}

function useLatestRef$1(value) {
  const ref = React.useRef(value);
  index$1(() => {
    ref.current = value;
  });
  return ref;
}

/**
 * Provides data to position a floating element.
 * @see https://floating-ui.com/docs/useFloating
 */
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React.useState(null);
  const [_floating, _setFloating] = React.useState(null);
  const setReference = React.useCallback(node => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React.useCallback(node => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React.useRef(null);
  const floatingRef = React.useRef(null);
  const dataRef = React.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef$1(whileElementsMounted);
  const platformRef = useLatestRef$1(platform);
  const update = React.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition(referenceRef.current, floatingRef.current, config).then(data => {
      const fullData = {
        ...data,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index$1(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData(data => ({
        ...data,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React.useRef(false);
  index$1(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);

  // biome-ignore lint/correctness/useExhaustiveDependencies: `hasWhileElementsMounted` is intentionally included.
  index$1(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...(getDPR(elements.floating) >= 1.5 && {
          willChange: 'transform'
        })
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}

var Portal = function Portal(_ref) {
  var children = _ref.children,
    container = _ref.container,
    _ref$withPortal = _ref.withPortal,
    withPortal = _ref$withPortal === void 0 ? false : _ref$withPortal;
  if (!withPortal || container === null) {
    return children;
  }
  return /*#__PURE__*/createPortal(children, container);
};
var Portal$1 = Portal;

var getDefaultPortalContainer = function getDefaultPortalContainer() {
  return typeof document !== 'undefined' ? document.body : null;
};

var FALLBACK_PLACEMENT_MAP$1 = {
  bottom: 'top',
  top: 'bottom',
  left: 'right',
  right: 'left'
};
var Tooltip = function Tooltip(_ref) {
  var content = _ref.content,
    _ref$placement = _ref.placement,
    placementFromProps = _ref$placement === void 0 ? 'top' : _ref$placement,
    target = _ref.target,
    _ref$interactive = _ref.interactive,
    interactive = _ref$interactive === void 0 ? false : _ref$interactive,
    _ref$interactiveTimeo = _ref.interactiveTimeout,
    interactiveTimeout = _ref$interactiveTimeo === void 0 ? 200 : _ref$interactiveTimeo,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$withPortal = _ref.withPortal,
    withPortal = _ref$withPortal === void 0 ? false : _ref$withPortal,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    controlledOpen = _ref.open,
    _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? true : _ref$visible,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'dark' : _ref$variant,
    delay = _ref.delay;
  var _a, _b;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    containerElement = _useState2[0],
    setContainerElement = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    tooltipElement = _useState4[0],
    setTooltipElement = _useState4[1];
  var _useState5 = useState(null),
    _useState6 = _slicedToArray(_useState5, 2),
    arrowElement = _useState6[0],
    setArrowElement = _useState6[1];
  var _useState7 = useState(true),
    _useState8 = _slicedToArray(_useState7, 2),
    isAnimatedEnd = _useState8[0],
    setIsAnimationEnd = _useState8[1];
  var _useState9 = useState(controlledOpen !== undefined ? controlledOpen : false),
    _useState10 = _slicedToArray(_useState9, 2),
    open = _useState10[0],
    setOpen = _useState10[1];
  var mouseEnteredContentRef = useRef(false);
  var interactiveTimerId = useRef();
  var theme = useTheme();
  var _useFloating = useFloating({
      elements: {
        reference: containerElement,
        floating: tooltipElement
      },
      strategy: 'fixed',
      placement: placementFromProps,
      middleware: [offset(theme.__hd__.tooltip.space.margin), flip({
        fallbackPlacements: [FALLBACK_PLACEMENT_MAP$1[placementFromProps]]
      }), arrow({
        element: arrowElement
      })],
      whileElementsMounted: autoUpdate
    }),
    update = _useFloating.update,
    middlewareData = _useFloating.middlewareData,
    floatingStyles = _useFloating.floatingStyles,
    uiFloatingPlacement = _useFloating.placement;
  // uiFloatingPlacement returns top, left, right, bottom and top-start, top-end,..
  var placement = uiFloatingPlacement.split('-')[0];
  var openTooltip = useCallback(function () {
    if (controlledOpen !== undefined) {
      return;
    }
    setOpen(true);
  }, [controlledOpen, setOpen]);
  var closeTooltip = useCallback(function () {
    if (controlledOpen !== undefined) {
      return;
    }
    setOpen(false);
  }, [controlledOpen, setOpen]);
  var delayCloseTooltipContent = useCallback(function () {
    if (interactive === true) {
      interactiveTimerId.current = window.setTimeout(function () {
        if (mouseEnteredContentRef.current === false) {
          closeTooltip();
        }
      }, interactiveTimeout);
    } else {
      interactiveTimerId.current = undefined;
      closeTooltip();
    }
  }, [interactive, interactiveTimeout, closeTooltip]);
  useEffect(function () {
    if (tooltipElement !== null) {
      tooltipElement.addEventListener('mouseleave', function () {
        mouseEnteredContentRef.current = false;
      });
      tooltipElement.addEventListener('mouseenter', function () {
        mouseEnteredContentRef.current = true;
      });
    }
  }, [tooltipElement]);
  useEffect(function () {
    containerElement === null || containerElement === void 0 ? void 0 : containerElement.addEventListener('mouseleave', delayCloseTooltipContent);
    tooltipElement === null || tooltipElement === void 0 ? void 0 : tooltipElement.addEventListener('mouseleave', delayCloseTooltipContent);
    return function () {
      containerElement === null || containerElement === void 0 ? void 0 : containerElement.removeEventListener('mouseleave', delayCloseTooltipContent);
      tooltipElement === null || tooltipElement === void 0 ? void 0 : tooltipElement.removeEventListener('mouseleave', delayCloseTooltipContent);
    };
  }, [containerElement, delayCloseTooltipContent, tooltipElement]);
  useEffect(function () {
    update === null || update === void 0 ? void 0 : update();
  }, [content, update]);
  useEffect(function () {
    if (controlledOpen !== undefined) {
      setOpen(controlledOpen);
    }
  }, [controlledOpen, setOpen]);
  useEffect(function () {
    return function () {
      return window.clearTimeout(interactiveTimerId.current);
    };
  }, []);
  var onMouseEnter = useCallback(function () {
    if (delay) {
      setIsAnimationEnd(false);
    }
    openTooltip();
  }, [delay, openTooltip]);
  return /*#__PURE__*/React__default.createElement(TooltipContainer, {
    ref: setContainerElement,
    onMouseEnter: onMouseEnter,
    onTouchStart: onMouseEnter,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, target, open === true && visible === true && /*#__PURE__*/React__default.createElement(Portal$1, {
    withPortal: withPortal,
    container: getDefaultPortalContainer()
  }, /*#__PURE__*/React__default.createElement(TooltipWrapper, {
    style: Object.assign(Object.assign({}, floatingStyles), {
      visibility: isAnimatedEnd ? 'visible' : 'hidden'
    }),
    ref: setTooltipElement,
    variant: variant,
    themeDelay: delay,
    onAnimationEnd: function onAnimationEnd() {
      setIsAnimationEnd(true);
    }
  }, content, /*#__PURE__*/React__default.createElement(Arrow, {
    ref: setArrowElement,
    style: _defineProperty$1({
      top: ((_a = middlewareData.arrow) === null || _a === void 0 ? void 0 : _a.y) || '',
      left: ((_b = middlewareData.arrow) === null || _b === void 0 ? void 0 : _b.x) || ''
    }, FALLBACK_PLACEMENT_MAP$1[placement], "-".concat(((arrowElement === null || arrowElement === void 0 ? void 0 : arrowElement.offsetWidth) || 0) / 2, "px")),
    variant: variant
  }))));
};
var Tooltip$1 = Tooltip;

var useLocale = function useLocale() {
  var context = useContext(LocaleContext);
  if (!context) return enAUTranslations;
  return context;
};
var useTranslation = function useTranslation() {
  var _useLocale = useLocale(),
    translations = _useLocale.translations;
  var t = useCallback(function (key) {
    return (translations === null || translations === void 0 ? void 0 : translations[key]) || key;
  }, [translations]);
  return {
    t: t
  };
};

var LegendCheckboxGroup = function LegendCheckboxGroup(props) {
  var value = props.value,
    onChange = props.onChange,
    getValue = props.getValue,
    getDisplayText = props.getDisplayText,
    data = props.data,
    getColor = props.getColor,
    viewMoreText = props.viewMoreText,
    _props$maxLegend = props.maxLegend,
    maxLegend = _props$maxLegend === void 0 ? 4 : _props$maxLegend,
    dataTestId = props['data-test-id'],
    sx = props.sx,
    className = props.className,
    id = props.id,
    _props$viewMoreDirect = props.viewMoreDirection,
    viewMoreDirection = _props$viewMoreDirect === void 0 ? 'horizontal' : _props$viewMoreDirect;
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  var dataByValue = useMemo(function () {
    return data === null || data === void 0 ? void 0 : data.reduce(function (acc, item) {
      acc[getValue(item)] = item;
      return acc;
    }, {});
  }, [data, getValue]);
  var handleCheckboxChange = function handleCheckboxChange(checkboxValue, checked) {
    if (checked) {
      onChange === null || onChange === void 0 ? void 0 : onChange([].concat(_toConsumableArray(value || []), [checkboxValue]).filter(function (item) {
        return !!(dataByValue === null || dataByValue === void 0 ? void 0 : dataByValue[item]);
      }));
    } else {
      onChange === null || onChange === void 0 ? void 0 : onChange((value || []).filter(function (item) {
        return item !== checkboxValue && !!(dataByValue === null || dataByValue === void 0 ? void 0 : dataByValue[item]);
      }));
    }
  };
  var selectedLegendByName = useMemo(function () {
    return value === null || value === void 0 ? void 0 : value.reduce(function (acc, legend) {
      acc[legend] = true;
      return acc;
    }, {});
  }, [value]);
  var slicedData = useMemo(function () {
    return data.slice(0, maxLegend);
  }, [maxLegend, data]);
  var restData = useMemo(function () {
    return data.slice(maxLegend, data.length);
  }, [maxLegend, data]);
  var renderCheckboxItem = function renderCheckboxItem(item) {
    var checkboxValue = getValue(item);
    var checked = selectedLegendByName === null || selectedLegendByName === void 0 ? void 0 : selectedLegendByName[checkboxValue];
    var displayText = getDisplayText(item);
    return /*#__PURE__*/React__default.createElement(Legend$1, {
      key: checkboxValue,
      variant: "checkbox",
      title: displayText,
      color: getColor === null || getColor === void 0 ? void 0 : getColor(item),
      checkboxValue: checkboxValue,
      checked: checked,
      onCheckboxChange: function onCheckboxChange() {
        return handleCheckboxChange(checkboxValue, !checked);
      },
      dataTestId: dataTestId || undefined
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledLegendBox, {
    "data-test-id": dataTestId,
    className: className,
    sx: sx,
    id: id
  }, slicedData.map(renderCheckboxItem), (restData === null || restData === void 0 ? void 0 : restData.length) > 0 && /*#__PURE__*/React__default.createElement(Tooltip$1, {
    variant: "light",
    target: /*#__PURE__*/React__default.createElement(Button, {
      text: viewMoreText || t('More'),
      variant: "text",
      intent: "primary",
      rightIcon: "arrow-down"
    }),
    content: /*#__PURE__*/React__default.createElement(StyledLegendBox, {
      "data-test-id": "legend-view-more-wrapper",
      themeDirection: viewMoreDirection
    }, restData === null || restData === void 0 ? void 0 : restData.map(renderCheckboxItem)),
    interactive: true,
    placement: "bottom",
    "data-test-id": "legend-view-more-text"
  }));
};
var LegendCheckboxGroup$1 = LegendCheckboxGroup;

var LegendGroup$6 = function LegendGroup(props) {
  var getDisplayText = props.getDisplayText,
    data = props.data,
    getColor = props.getColor,
    viewMoreText = props.viewMoreText,
    _props$maxLegend = props.maxLegend,
    maxLegend = _props$maxLegend === void 0 ? 4 : _props$maxLegend,
    dataTestId = props['data-test-id'],
    sx = props.sx,
    className = props.className,
    id = props.id,
    viewMoreDirection = props.viewMoreDirection;
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  var slicedData = useMemo(function () {
    return data.slice(0, maxLegend);
  }, [maxLegend, data]);
  var restData = useMemo(function () {
    return data.slice(maxLegend, data.length);
  }, [maxLegend, data]);
  var renderCheckboxItem = function renderCheckboxItem(item) {
    var displayText = getDisplayText(item);
    return /*#__PURE__*/React__default.createElement(Legend$1, {
      key: displayText,
      checkboxValue: displayText,
      variant: "circle",
      title: displayText,
      color: getColor === null || getColor === void 0 ? void 0 : getColor(item)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledLegendBox, {
    "data-test-id": dataTestId,
    className: className,
    sx: sx,
    id: id
  }, slicedData.map(renderCheckboxItem), (restData === null || restData === void 0 ? void 0 : restData.length) ? /*#__PURE__*/React__default.createElement(Tooltip$1, {
    variant: "light",
    target: /*#__PURE__*/React__default.createElement(Button, {
      text: viewMoreText || t('More'),
      variant: "text",
      intent: "primary",
      rightIcon: "arrow-down"
    }),
    content: /*#__PURE__*/React__default.createElement(StyledLegendBox, {
      "data-test-id": "legend-view-more-wrapper",
      themeDirection: viewMoreDirection
    }, restData === null || restData === void 0 ? void 0 : restData.map(renderCheckboxItem)),
    interactive: true,
    placement: "bottom",
    "data-test-id": "legend-view-more-text"
  }) : null);
};
var LegendGroup$7 = LegendGroup$6;

var usePrevious = function usePrevious(value) {
  var ref = useRef();
  useEffect(function () {
    ref.current = value;
  }, [value]);
  return ref.current;
};
var difference = function difference(array1, array2) {
  // Create an empty array to store the difference
  var diff = [];
  // Loop over the elements of the first array
  // eslint-disable-next-line no-restricted-syntax
  var _iterator = _createForOfIteratorHelper$1(array1),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var element = _step.value;
      // Check if the element is in the second array
      if (!array2.includes(element)) {
        // If not, add it to the difference array
        diff.push(element);
      }
    }
    // Return the difference array
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return diff;
};
var clamp = function clamp(val, min, max) {
  return Math.min(Math.max(val, min), max);
};
var isNull$1 = function isNull(value) {
  return value == null && value === undefined;
};
var totalOfMaxValuesFromEachRows = function totalOfMaxValuesFromEachRows(data) {
  if (data.length === 0) return 0;
  var rowsValues = new Array(data[0].data.length).fill(0).map(function (_, index) {
    return data.reduce(function (prev, curr) {
      if (isNull$1(curr.data[index])) return prev;
      return prev + curr.data[index];
    }, 0);
  });
  return Math.max.apply(Math, _toConsumableArray(rowsValues));
};
/**
 * this function to check is array 1 contain array 2 for primitive type
 */
var contains = function contains(arr1, arr2) {
  return arr2.every(function (ele) {
    return arr1.includes(ele);
  });
};
var filterElementHasNoColor = function filterElementHasNoColor(data) {
  return data.filter(function (element) {
    return element.color !== undefined;
  });
};
var getParentElement = function getParentElement(ele) {
  var parentEle = ele === null || ele === void 0 ? void 0 : ele.parentNode;
  return parentEle !== undefined ? parentEle : null;
};

var chartColors = ['violetLight30', 'orangeLight30', 'dodgerBlueLight30', 'greenLight30', 'redLight30', 'grotesqueGreenLight30', 'purpleLight30', 'blueLight30', 'pinkLight30', 'smaltLight30', 'yellowLight30', 'violetDark30', 'orangeDark30', 'dodgerBlueDark30', 'greenDark30', 'redDark30', 'grotesqueGreenDark30', 'purpleDark30', 'blueDark30', 'pinkDark30', 'smaltDark30', 'yellowDark30'];

var assert = (function (guard, msg) {
  if (guard === false) {
    throw new Error("[Hero-design] ".concat(msg));
  }
});

var getColorFromTheme = function getColorFromTheme(semanticColor, theme) {
  return theme.colors.palette[semanticColor] || semanticColor;
};
var COLOR_MESSAGE_ERROR = 'styleConfig.series should have enough color for all labels';
// Color Scale
var useColorScale = function useColorScale(labels, customColors) {
  var theme = useTheme();
  var hasCustomColors = customColors !== undefined;
  var defaultColors = useMemo(function () {
    return chartColors.slice(0, labels.length).map(function (c) {
      return getColorFromTheme(c, theme);
    });
  }, [labels.length, theme]);
  var customLabels = useMemo(function () {
    return hasCustomColors ? customColors.map(function (_ref) {
      var label = _ref.label;
      return label;
    }) : [];
  }, [customColors, hasCustomColors]);
  if (hasCustomColors) {
    // Throw error if user is incomplete fill label for the series.
    assert(customLabels.length >= labels.length && contains(customLabels, labels) && customLabels.length > 0, COLOR_MESSAGE_ERROR);
  }
  var customColorsFromTheme = useMemo(function () {
    return hasCustomColors ? customColors.map(function (_ref2) {
      var color = _ref2.color;
      return getColorFromTheme(color, theme);
    }) : [];
  }, [customColors, hasCustomColors, theme]);
  return useMemo(function () {
    return ordinal().domain(hasCustomColors ? customLabels : labels).range(hasCustomColors ? customColorsFromTheme : defaultColors);
  }, [customColorsFromTheme, customLabels, defaultColors, hasCustomColors, labels]);
};

var getDiametterFromSize$1 = function getDiametterFromSize(size, theme) {
  return theme.__hd__.chart.sizes.multiplePie[size];
};
var getStrokeWidth$1 = function getStrokeWidth(size, theme) {
  return theme.__hd__.chart.sizes.multiplePie.stokes[size];
};
var getRestHoverStrokeWidth$1 = function getRestHoverStrokeWidth(size, theme) {
  return theme.__hd__.chart.sizes.multiplePie.restHoverStrokes[size];
};
// Maximum number of pie
var MAX_ARC = 4;
var ANGLE_PADDING$1 = Math.PI / 12;
var MultiplePieChart = function MultiplePieChart(props) {
  var _a, _b, _c, _d, _e;
  var data = props.data,
    _props$sx = props.sx,
    sx = _props$sx === void 0 ? {} : _props$sx,
    style = props.style,
    dataTestId = props['data-test-id'],
    className = props.className,
    legendConfig = props.legendConfig,
    title = props.title,
    id = props.id,
    originalLabels = props.labels,
    onClick = props.onClick,
    highlightedItems = props.highlightedItems,
    styleConfig = props.styleConfig;
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    currentSlice = _useState2[0],
    setCurrentSlice = _useState2[1];
  var size = 'large';
  var theme = useTheme();
  var diametter = getDiametterFromSize$1(size, theme);
  var radius = diametter / 2;
  var strokeWidth = getStrokeWidth$1(size, theme);
  var restHoverStrokeWidth = getRestHoverStrokeWidth$1(size, theme);
  var strokeSizeDiff = (strokeWidth - restHoverStrokeWidth) / 2;
  var strokeGap = theme.__hd__.chart.spaces.multiplePie.strokeGap;
  var matchedSegmentByLabel = useMemo(function () {
    return highlightedItems === null || highlightedItems === void 0 ? void 0 : highlightedItems.reduce(function (acc, item) {
      acc[item.label] = acc[item.label] || {};
      acc[item.label][item.legend] = true;
      return acc;
    }, {});
  }, [highlightedItems]);
  var _useState3 = useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    internalSelectedLegends = _useState4[0],
    setInternalSelectedLegends = _useState4[1];
  var selectedLegends = useMemo(function () {
    return (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) ? (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.value) || internalSelectedLegends : internalSelectedLegends;
  }, [internalSelectedLegends, legendConfig]);
  var selectedLegendByName = useMemo(function () {
    return selectedLegends.reduce(function (acc, legend) {
      acc[legend] = true;
      return acc;
    }, {});
  }, [selectedLegends]);
  var labels = useMemo(function () {
    var _a;
    return (_a = data === null || data === void 0 ? void 0 : data.map(function (_ref, labelIndex) {
      var label = _ref.label;
      return {
        label: label,
        labelIndex: labelIndex
      };
    })) === null || _a === void 0 ? void 0 : _a.filter(function (_ref2) {
      var label = _ref2.label;
      return selectedLegendByName === null || selectedLegendByName === void 0 ? void 0 : selectedLegendByName[label];
    });
  }, [data, selectedLegendByName]);
  var tooltipRef = useRef(null);
  var svgRef = useRef(null);
  var pieLabels = useMemo(function () {
    return originalLabels === null || originalLabels === void 0 ? void 0 : originalLabels.slice(0, MAX_ARC);
  }, [originalLabels]);
  var calcInnerRadius = useCallback(function (index) {
    return radius - strokeWidth - index * (strokeWidth + strokeGap);
  }, [radius, strokeGap, strokeWidth]);
  var calcOuterRadius = useCallback(function (index) {
    return radius - index * (strokeWidth + strokeGap);
  }, [radius, strokeGap, strokeWidth]);
  var arcs = useMemo(function () {
    return pieLabels === null || pieLabels === void 0 ? void 0 : pieLabels.map(function (_, index) {
      return arc().innerRadius(calcInnerRadius(index)).outerRadius(calcOuterRadius(index)).cornerRadius(16).padAngle(0.045);
    });
  }, [calcInnerRadius, calcOuterRadius, pieLabels]);
  var pieGenerators = useMemo(function () {
    return pieLabels === null || pieLabels === void 0 ? void 0 : pieLabels.map(function (_, index) {
      var series = data === null || data === void 0 ? void 0 : data.map(function (item) {
        var _a;
        return (_a = item === null || item === void 0 ? void 0 : item.data) === null || _a === void 0 ? void 0 : _a[index];
      });
      var filteredSeries = series === null || series === void 0 ? void 0 : series.filter(function (value) {
        return value !== undefined;
      });
      var minValue = Math.min.apply(Math, _toConsumableArray(filteredSeries));
      var total = filteredSeries.reduce(function (acc, value) {
        return acc + value;
      }, 0);
      var minPercentage = minValue / total * 100;
      return pie().startAngle(0).padAngle(minPercentage < 5 ? ANGLE_PADDING$1 : 0).sort(null);
    });
  }, [data, pieLabels]);
  var customColors = useMemo(function () {
    return (styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series) !== undefined ? filterElementHasNoColor(styleConfig.series) : undefined;
  }, [styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series]);
  var legends = useMemo(function () {
    return data.map(function (item) {
      return item.label;
    });
  }, [data]);
  var colorScale = useColorScale(legends, customColors);
  var localRadius = useMemo(function () {
    return local();
  }, []);
  var localFilter = useMemo(function () {
    return local();
  }, []);
  useEffect(function () {
    var svg = select(svgRef.current);
    var tooltip = select(tooltipRef.current).style('position', 'fixed').style('display', 'none').style('opacity', '0%');
    arcs.forEach(function (createArc, index) {
      var g = svg.append('g').attr('transform', "translate(".concat(radius, ", ").concat(radius, ")"));
      var pieGenerator = pieGenerators[index];
      var pieArcDatums = pieGenerator.value(function (p) {
        return p.value;
      })(labels.map(function (_ref3) {
        var label = _ref3.label,
          labelIndex = _ref3.labelIndex;
        var _a, _b, _c;
        return {
          value: (_c = (_b = (_a = data === null || data === void 0 ? void 0 : data[labelIndex]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[index]) !== null && _c !== void 0 ? _c : 0,
          label: label,
          index: index,
          labelIndex: labelIndex,
          pieLabel: pieLabels === null || pieLabels === void 0 ? void 0 : pieLabels[index]
        };
      }));
      g.selectAll('path').data(pieArcDatums).enter().append('path').attr('d', function handler(d) {
        var _a;
        var innerRadius = calcInnerRadius(d.data.index);
        var outerRadius = calcOuterRadius(d.data.index);
        if (!matchedSegmentByLabel || ((_a = matchedSegmentByLabel === null || matchedSegmentByLabel === void 0 ? void 0 : matchedSegmentByLabel[d.data.pieLabel]) === null || _a === void 0 ? void 0 : _a[d.data.label])) {
          localRadius.set(this, {
            innerRadius: innerRadius,
            outerRadius: outerRadius
          });
          return createArc.innerRadius(innerRadius).outerRadius(outerRadius)(d);
        }
        localRadius.set(this, {
          innerRadius: innerRadius + strokeSizeDiff,
          outerRadius: outerRadius - strokeSizeDiff
        });
        return createArc.innerRadius(innerRadius + strokeSizeDiff).outerRadius(outerRadius - strokeSizeDiff)(d);
      }).attr('filter', function handler(d) {
        var _a;
        if ((_a = matchedSegmentByLabel === null || matchedSegmentByLabel === void 0 ? void 0 : matchedSegmentByLabel[d.data.pieLabel]) === null || _a === void 0 ? void 0 : _a[d.data.label]) {
          localFilter.set(this, theme.__hd__.chart.shadows.pie.slice);
          return theme.__hd__.chart.shadows.pie.slice;
        }
        localFilter.set(this, 'none');
        return 'none';
      }).attr('fill', function (d) {
        return colorScale(d.data.label);
      }).attr('data-test-id', function (d) {
        return dataTestId ? "".concat(dataTestId, "-arc-").concat(String(d.data.pieLabel), "-slice-").concat(String(d.data.label)) : null;
      }).style('cursor', onClick ? 'pointer' : 'unset');
      g.selectAll('path').on('mouseover', function handler() {
        var selected = arguments.length <= 1 ? undefined : arguments[1];
        select(this).raise().transition().attr('d', function (d) {
          var i = d.data.index;
          return arcs[i].innerRadius(calcInnerRadius(i)).outerRadius(calcOuterRadius(i))(d);
        });
        select(this).raise().transition('shadow').attr('filter', theme.__hd__.chart.shadows.multiplePie.slice);
        svg.selectAll('path').filter(function (d) {
          return d !== selected;
        }).transition('arc').attr('d', function (d) {
          var i = d.data.index;
          var newArc = arcs[i];
          return newArc.innerRadius(calcInnerRadius(i) + strokeSizeDiff).outerRadius(calcOuterRadius(i) - strokeSizeDiff)(d);
        });
        // show the tooltip when the mouse enters a slice
        tooltip.transition().duration(200).style('display', 'block').style('opacity', '100%');
        setCurrentSlice(selected.data);
      }).on('mousemove', function (event) {
        tooltip.style('left', "".concat(event.clientX, "px")) // position the tooltip to the right of the mouse pointer
        .style('top', "".concat(event.clientY - 12, "px")); // position the tooltip below the mouse pointer
      }).on('mouseout', function handler() {
        var originalFilter = localFilter.get(this) || 'none';
        select(this).transition('shadow').attr('filter', originalFilter);
        svg.selectAll('path').transition('arc').attr('d', function _handler(d) {
          var i = d.data.index;
          var originalRadius = localRadius.get(this);
          var newArc = arcs[i];
          return newArc.innerRadius((originalRadius === null || originalRadius === void 0 ? void 0 : originalRadius.innerRadius) || calcInnerRadius(i)).outerRadius((originalRadius === null || originalRadius === void 0 ? void 0 : originalRadius.outerRadius) || calcOuterRadius(i))(d);
        });
        tooltip.style('opacity', '0%').style('display', 'none');
        setCurrentSlice(undefined);
      }).on('click', function handler(e, selected) {
        onClick === null || onClick === void 0 ? void 0 : onClick(e, selected.data);
      });
    });
    return function () {
      svg.selectAll('*').remove();
    };
  }, [arcs, radius, data, theme.__hd__.chart.colors.pie.background, theme, labels, pieGenerators, strokeGap, strokeWidth, calcInnerRadius, calcOuterRadius, strokeSizeDiff, dataTestId, colorScale, onClick, matchedSegmentByLabel, localRadius, localFilter, pieLabels]);
  var total = useMemo(function () {
    var _a;
    if (currentSlice === undefined) return 0;
    return (_a = data === null || data === void 0 ? void 0 : data.reduce(function (acc, series) {
      var _a, _b;
      return acc + ((_b = (_a = series === null || series === void 0 ? void 0 : series.data) === null || _a === void 0 ? void 0 : _a[currentSlice.index]) !== null && _b !== void 0 ? _b : 0);
    }, 0)) !== null && _a !== void 0 ? _a : 0;
  }, [currentSlice, data]);
  var selectedValue = (_c = (_b = data === null || data === void 0 ? void 0 : data[(_a = currentSlice === null || currentSlice === void 0 ? void 0 : currentSlice.labelIndex) !== null && _a !== void 0 ? _a : -1]) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c[(_d = currentSlice === null || currentSlice === void 0 ? void 0 : currentSlice.index) !== null && _d !== void 0 ? _d : -1];
  var selectedLabel = currentSlice === null || currentSlice === void 0 ? void 0 : currentSlice.label;
  var selectedPieLabel = pieLabels === null || pieLabels === void 0 ? void 0 : pieLabels[(_e = currentSlice === null || currentSlice === void 0 ? void 0 : currentSlice.index) !== null && _e !== void 0 ? _e : -1];
  var percentage = useMemo(function () {
    if (currentSlice === undefined) return 0;
    return 100 * (selectedValue !== null && selectedValue !== void 0 ? selectedValue : 0) / total;
  }, [currentSlice, selectedValue, total]);
  var prevLegends = usePrevious(legends);
  var labelsDiff = useMemo(function () {
    return difference(legends, prevLegends || []);
  }, [legends, prevLegends]);
  useEffect(function () {
    setInternalSelectedLegends(function (prev) {
      return Array.from(new Set([].concat(_toConsumableArray(prev), _toConsumableArray(labelsDiff))));
    });
  }, [labelsDiff]);
  var renderLegend = function renderLegend() {
    if (typeof legendConfig !== 'undefined') {
      if (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) {
        return /*#__PURE__*/React__default.createElement(LegendCheckboxGroup$1, Object.assign({
          data: legends,
          getDisplayText: function getDisplayText(item) {
            return item;
          },
          getValue: function getValue(item) {
            return item;
          },
          getColor: function getColor(item) {
            return colorScale(item);
          },
          value: selectedLegends,
          onChange: setInternalSelectedLegends,
          sx: {
            mt: title ? 0 : size
          },
          "data-test-id": dataTestId ? "".concat(dataTestId, "-checkbox-legend") : undefined
        }, legendConfig));
      }
      return /*#__PURE__*/React__default.createElement(LegendGroup$7, Object.assign({
        data: legends,
        getDisplayText: function getDisplayText(item) {
          return item;
        },
        getColor: function getColor(item) {
          return colorScale(item);
        },
        sx: {
          mt: title ? 0 : size
        },
        "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined
      }, legendConfig));
    }
    return null;
  };
  return /*#__PURE__*/React__default.createElement(StyledChartContainer$1, {
    id: id,
    className: className,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), useCss(sx))
  }, /*#__PURE__*/React__default.createElement(StyledMultiplePieChartContainer, {
    themeSize: size
  }, /*#__PURE__*/React__default.createElement(StyledTooltip, {
    style: {
      display: !selectedLabel ? 'none' : undefined
    },
    ref: tooltipRef,
    variant: "light"
  }, /*#__PURE__*/React__default.createElement(Box$1, {
    sx: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React__default.createElement(StyledLegendDot, {
    themeColor: colorScale(selectedLabel || '')
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "light",
    intent: "subdued",
    sx: {
      marginLeft: 'xsmall'
    }
  }, selectedPieLabel, " | ", selectedLabel), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "light",
    tagName: "span",
    sx: {
      marginLeft: 'xsmall'
    }
  }, selectedValue), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "light",
    tagName: "span",
    sx: {
      marginLeft: 'xsmall'
    }
  }, "(", percentage === null || percentage === void 0 ? void 0 : percentage.toFixed(0), "%)"))), /*#__PURE__*/React__default.createElement("svg", {
    ref: svgRef,
    width: diametter,
    height: diametter,
    overflow: "visible"
  })), title && /*#__PURE__*/React__default.createElement(StyledTitleContainer, null, /*#__PURE__*/React__default.createElement(StyledChartTitle, {
    fontSize: 12,
    fontWeight: "semi-bold",
    "data-test-id": dataTestId ? "".concat(dataTestId, "-title") : undefined
  }, title), (pieLabels === null || pieLabels === void 0 ? void 0 : pieLabels.length) > 1 && /*#__PURE__*/React__default.createElement(StyledChartSubTitle, {
    fontSize: 10,
    fontWeight: "semi-bold"
  }, "Out to in: ", pieLabels === null || pieLabels === void 0 ? void 0 : pieLabels.join(', '))), renderLegend());
};
var MultiplePieChart$1 = MultiplePieChart;

var StyledTooltipContentWrapper$3 = styled.div.withConfig({
  displayName: "StyledColumnChart__StyledTooltipContentWrapper",
  componentId: "sc-eof6x4-0"
})(["&&{display:flex;align-items:center;justify-content:center;}&& > *:not(:last-child){margin-right:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return "".concat(theme.__hd__.columnChart.space.tooltipChildMargin, "px");
});
var StyledColumnChartContainer = styled.div.withConfig({
  displayName: "StyledColumnChart__StyledColumnChartContainer",
  componentId: "sc-eof6x4-1"
})(["&&{position:relative;height:100%;width:100%;}&& svg{position:relative;z-index:2;}&& .x-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}&& .y-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}&& .vertical-title{font-size:", ";font-weight:", ";fill:", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.columnChart.fontWeights.xAxisTick;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.columnChart.fontSizes.xAxisTick;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.columnChart.lineHeights.xAxisTick;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.columnChart.colors.xAxisTickColor;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.columnChart.fontWeights.yAxisTick;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.columnChart.fontSizes.yAxisTick;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.columnChart.lineHeights.yAxisTick;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.columnChart.colors.yAxisTickColor;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.columnChart.fontSizes.verticalTitle;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.columnChart.fontWeights.verticalTitle;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.columnChart.colors.verticalTitleFillColor;
});
var StyledLegendContainer$3 = styled.div.withConfig({
  displayName: "StyledColumnChart__StyledLegendContainer",
  componentId: "sc-eof6x4-2"
})(["&&{display:flex;flex-direction:column;align-items:center;width:100%;}&& > *:not(:last-child){margin-bottom:", ";}&& ", "{background:", ";box-shadow:", ";padding:", ";}&& ", "::before{background:", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return "".concat(theme.__hd__.columnChart.space.legendContainerChildMarginBottom, "px");
}, TooltipWrapper, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.columnChart.colors.tooltipBackgroundColor;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.columnChart.boxShadows.tooltip;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.columnChart.space.moreTooltipPadding;
}, Arrow, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.columnChart.colors.tooltipBackgroundColor;
});
var StyledNavigateButton$3 = styled(IconButton$1).withConfig({
  displayName: "StyledColumnChart__StyledNavigateButton",
  componentId: "sc-eof6x4-3"
})(["&&{width:", ";height:", ";}"], function (_ref18) {
  var theme = _ref18.theme;
  return "".concat(theme.__hd__.columnChart.sizes.navigationButton, "px");
}, function (_ref19) {
  var theme = _ref19.theme;
  return "".concat(theme.__hd__.columnChart.sizes.navigationButton, "px");
});
var StyledNavigateButtonWrapper$3 = styled(Box$1).withConfig({
  displayName: "StyledColumnChart__StyledNavigateButtonWrapper",
  componentId: "sc-eof6x4-4"
})(["&&{position:absolute;display:grid;place-items:center;top:", ";", ";z-index:3;}"], function (_ref20) {
  var themeTop = _ref20.themeTop;
  return typeof themeTop === 'number' ? "".concat(themeTop, "px") : themeTop;
}, function (_ref21) {
  var themePosition = _ref21.themePosition,
    themeLeft = _ref21.themeLeft;
  var positionMapping = {
    left: "left: ".concat(themeLeft, "px"),
    right: "right: 0"
  };
  return positionMapping[themePosition];
});

/**
 *     Finds a "nice" number approximately equal to x.
 * https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
 *
 * Reference: Paul Heckbert, "Nice Numbers for Graph Labels",
 *             Graphics Gems, pp 61-63.
 * */
var niceNum = function niceNum(localRange, round) {
  var exponent = Math.floor(Math.log(localRange) / Math.log(10));
  var fraction = localRange / Math.pow(10, exponent);
  // rewirte code with if else
  var niceFraction;
  if (round) {
    if (fraction < 1.5) {
      niceFraction = 1;
    } else if (fraction < 3) {
      niceFraction = 2;
    } else if (fraction < 7) {
      niceFraction = 5;
    } else {
      niceFraction = 10;
    }
  } else if (fraction <= 1) {
    niceFraction = 1;
  } else if (fraction <= 2) {
    niceFraction = 2;
  } else if (fraction <= 5) {
    niceFraction = 5;
  } else {
    niceFraction = 10;
  }
  return niceFraction * Math.pow(10, exponent);
};
var createNiceScale = function createNiceScale(min, max) {
  var maxTicks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
  var range = niceNum(max - min, false);
  var tickSpacing = niceNum(range / (maxTicks - 1), true);
  var niceMin = Math.floor(min / tickSpacing) * tickSpacing;
  var niceMax = Math.ceil(max / tickSpacing) * tickSpacing;
  return {
    niceMin: niceMin,
    niceMax: niceMax,
    tickSpacing: tickSpacing
  };
};

var HOVER_EFFECT_DURATION = 150;
var Rect$4 = function Rect(_ref) {
  var height = _ref.height,
    x = _ref.x,
    y = _ref.y,
    color = _ref.color,
    onMouseOver = _ref.onMouseOver,
    onMouseMove = _ref.onMouseMove,
    onMouseOut = _ref.onMouseOut,
    onClick = _ref.onClick,
    dataTestId = _ref['data-test-id'],
    className = _ref.className,
    isHovered = _ref.isHovered,
    isHighlighted = _ref.isHighlighted,
    cursor = _ref.cursor,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'large' : _ref$size;
  var theme = useTheme();
  var rectRef = useRef(null);
  var columnChartTheme = theme.__hd__.columnChart;
  var barDropShadow = columnChartTheme.boxShadows.barDropShadow;
  var barWidthMapping = columnChartTheme.sizes.barWidth;
  var barRadiusMapping = columnChartTheme.radii.bar;
  var barHoverTransformMapping = columnChartTheme.space.barHoverTransform;
  var barWidth = barWidthMapping[size];
  var barBorderRadius = barRadiusMapping[size];
  var barHoverTransform = barHoverTransformMapping[size];
  var handleIsHoveredEvent = useCallback(function (rectElement, hovered) {
    if (hovered) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('x', x || 0).attr('width', barWidth).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
      return;
    }
    if (hovered === false) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('x', (x || 0) + barHoverTransform).attr('width', barWidthMapping.inactive).attr('rx', barRadiusMapping.inactive).attr('ry', barRadiusMapping.inactive);
      return;
    }
    if (hovered === undefined) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('x', x || 0).attr('width', barWidth).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
    }
  }, [x, barWidth, barBorderRadius, barHoverTransform, barWidthMapping.inactive, barRadiusMapping.inactive]);
  var handleHighlightedEvent = useCallback(function (rectElement, highlighted, hovered) {
    if (highlighted) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('x', x || 0).attr('width', barWidth).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
      return;
    }
    if (!highlighted && hovered) {
      rectElement.transition().attr('x', x || 0).attr('width', barWidth).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
      return;
    }
    if (!highlighted && !hovered) {
      rectElement.transition().attr('x', (x || 0) + barHoverTransform).attr('width', barWidthMapping.inactive).attr('rx', barRadiusMapping.inactive).attr('ry', barRadiusMapping.inactive);
    }
  }, [barBorderRadius, barHoverTransform, barRadiusMapping.inactive, barWidth, barWidthMapping.inactive, x]);
  useLayoutEffect(function () {
    var rectElement = select(rectRef.current);
    if (typeof isHighlighted === 'undefined') {
      handleIsHoveredEvent(rectElement, isHovered);
      return;
    }
    if (typeof isHighlighted !== 'undefined') {
      handleHighlightedEvent(rectElement, isHighlighted, isHovered);
    }
  }, [handleHighlightedEvent, handleIsHoveredEvent, isHighlighted, isHovered]);
  return /*#__PURE__*/React__default.createElement("rect", {
    ref: rectRef,
    onMouseOver: onMouseOver,
    onMouseMove: onMouseMove,
    onMouseOut: onMouseOut,
    onClick: onClick,
    className: className,
    "data-test-id": dataTestId,
    y: y,
    width: barWidth,
    x: x,
    height: height < 0 ? 0 : Math.round(height),
    fill: color,
    filter: isHovered || isHighlighted ? "drop-shadow(".concat(barDropShadow, ")") : undefined,
    cursor: cursor,
    rx: barBorderRadius,
    ry: barBorderRadius
  });
};
var Rect$5 = /*#__PURE__*/memo(Rect$4);

var TotalBadge$2 = function TotalBadge(_ref) {
  var className = _ref.className,
    x = _ref.x,
    y = _ref.y,
    width = _ref.width,
    content = _ref.content,
    dataTestId = _ref['data-test-id'];
  var theme = useTheme();
  var columnChartTheme = theme.__hd__.columnChart;
  var totalSvgHeight = columnChartTheme.sizes.totalSvgHeight;
  var totalRect = columnChartTheme.radii.totalRect;
  var totalRectBorderWidth = columnChartTheme.borderWidth.totalRect;
  var totalTextFontSize = columnChartTheme.fontSizes.totalText;
  var totalTextFontWeight = columnChartTheme.fontWeights.totalText;
  var _columnChartTheme$col = columnChartTheme.colors,
    gridLineBackgroundColor = _columnChartTheme$col.gridLineBackgroundColor,
    totalBackgroundColor = _columnChartTheme$col.totalBackgroundColor;
  return /*#__PURE__*/React__default.createElement("svg", {
    className: className,
    x: x,
    y: y,
    width: width,
    height: totalSvgHeight,
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement("rect", {
    x: 1,
    y: 1,
    width: width - totalRectBorderWidth * 2,
    height: totalSvgHeight - totalRectBorderWidth * 2,
    fill: totalBackgroundColor,
    strokeWidth: totalRectBorderWidth,
    stroke: gridLineBackgroundColor,
    rx: totalRect,
    ry: totalRect
  }), /*#__PURE__*/React__default.createElement("text", {
    x: "50%",
    y: "50%",
    textAnchor: "middle",
    alignmentBaseline: "middle",
    fontSize: totalTextFontSize,
    fontWeight: totalTextFontWeight
  }, content));
};
var TotalBadge$3 = /*#__PURE__*/memo(TotalBadge$2);

var useSeries = function useSeries(_ref) {
  var legends = _ref.legends,
    maxValue = _ref.maxValue,
    minDisplayPercentage = _ref.minDisplayPercentage,
    labels = _ref.labels,
    data = _ref.data;
  var stackSeries = useMemo(function () {
    return stack().keys(legends).order(none).offset(none$1).value(function (d, key) {
      return !d.data[key] ? 0 : Math.max(Number(d.data[key]) / maxValue, minDisplayPercentage) * maxValue;
    });
  }, [legends, maxValue, minDisplayPercentage]);
  return useMemo(function () {
    return stackSeries(labels.map(function (label, index) {
      var stackedSeries = data.reduce(function (prev, next) {
        return Object.assign(Object.assign({}, prev), _defineProperty$1({}, next.label, next.data[index]));
      }, {});
      return Object.assign(Object.assign({}, stackedSeries), {
        data: stackedSeries,
        label: label
      });
    }));
  }, [data, labels, stackSeries]);
};
var useSeries$1 = useSeries;

var matchedHighlightedItems = function matchedHighlightedItems(_ref, highlightedItems) {
  var legend = _ref.legend,
    label = _ref.label;
  if (typeof highlightedItems === 'undefined') return undefined;
  var isMatchedSegmentNotEmpty = typeof highlightedItems !== 'undefined' ? highlightedItems.length > 0 : false;
  if (isMatchedSegmentNotEmpty) {
    return highlightedItems && highlightedItems.filter(function (item) {
      return item.label === label && item.legend === legend;
    }).length > 0;
  }
  return false;
};
var isActiveBar = function isActiveBar(activeBar, _ref2) {
  var legend = _ref2.legend,
    rectValue = _ref2.rectValue,
    label = _ref2.label;
  return activeBar.legend === legend && activeBar.value === rectValue && activeBar.label === label;
};
var MIN_DISPLAY_PERCENTAGE$1 = 4 / 100;
var BarArea$4 = function BarArea(_ref3) {
  var xAxisConfig = _ref3.xAxisConfig,
    height = _ref3.height,
    width = _ref3.width,
    maxValue = _ref3.maxValue,
    minValue = _ref3.minValue,
    dataTestId = _ref3['data-test-id'],
    highlightedItems = _ref3.highlightedItems,
    barConfig = _ref3.barConfig,
    onMouseOver = _ref3.onMouseOver,
    selectedLegends = _ref3.selectedLegends,
    data = _ref3.data,
    onMouseOut = _ref3.onMouseOut,
    onMouseMove = _ref3.onMouseMove,
    _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? 'large' : _ref3$size;
  var theme = useTheme();
  var columnChartTheme = theme.__hd__.columnChart;
  var _columnChartTheme$siz = columnChartTheme.sizes,
    totalLetterWidth = _columnChartTheme$siz.totalLetterWidth,
    totalSvgHeight = _columnChartTheme$siz.totalSvgHeight;
  var _columnChartTheme$spa = columnChartTheme.space,
    barMarginTop = _columnChartTheme$spa.barMarginTop,
    totalSvgHorizontalPadding = _columnChartTheme$spa.totalSvgHorizontalPadding;
  var labels = useMemo(function () {
    return (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels) || [];
  }, [xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels]);
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    activeBar = _useState2[0],
    setActiveBar = _useState2[1];
  // Data Wrangling: stack the data
  var series = useSeries$1({
    legends: selectedLegends,
    maxValue: maxValue,
    minDisplayPercentage: MIN_DISPLAY_PERCENTAGE$1,
    data: data,
    labels: labels
  });
  var yScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);
  var xScale = useMemo(function () {
    return band().domain(labels).range([0, width]);
  }, [labels, width]);
  var handleOnMouseOver = useCallback(function (e, barData) {
    var color = barData.color,
      legend = barData.legend,
      value = barData.value,
      label = barData.label,
      percent = barData.percent,
      xAxisLabel = barData.xAxisLabel;
    onMouseOver(e, {
      legend: legend,
      value: value,
      color: color,
      label: label,
      percent: percent,
      xAxisLabel: xAxisLabel
    });
    setActiveBar(barData);
  }, [onMouseOver]);
  var handleOnMouseOut = useCallback(function (e) {
    onMouseOut(e);
    setActiveBar(undefined);
  }, [onMouseOut]);
  var handleOnMouseMove = useCallback(function (e) {
    onMouseMove(e);
  }, [onMouseMove]);
  var handleOnClicked = useCallback(function (e, barData) {
    var _a;
    var legend = barData.legend,
      label = barData.label,
      value = barData.value;
    (_a = barConfig === null || barConfig === void 0 ? void 0 : barConfig.onClick) === null || _a === void 0 ? void 0 : _a.call(barConfig, e, {
      legend: legend,
      label: label,
      data: value
    });
  }, [barConfig]);
  return data.length > 0 ? /*#__PURE__*/React__default.createElement("g", null, series.map(function (subgroup) {
    return /*#__PURE__*/React__default.createElement("g", {
      key: subgroup.key,
      transform: "translate(".concat(Math.floor(xScale.bandwidth() / 2 - barMarginTop), ",0)")
    }, subgroup.map(function (group) {
      var prevBarValue = group[0];
      var currentValue = group[1];
      if (Number.isNaN(prevBarValue) || Number.isNaN(currentValue)) {
        return null;
      }
      var label = group.data.label;
      var legend = subgroup.key;
      var color = data.filter(function (d) {
        return d.label === legend;
      })[0].color;
      var rectValue = Number(group.data.data[subgroup.key]);
      var rectY = Math.round(yScale(currentValue)); // round the position to avoid flaky
      var rectX = Math.round(xScale(label) || 0); // round the position to avoid flaky
      var isActive = typeof activeBar !== 'undefined' ? isActiveBar(activeBar, {
        legend: legend,
        label: label,
        rectValue: rectValue
      }) : undefined;
      var barStartPositionY = yScale(prevBarValue);
      var barEndPositionY = yScale(currentValue);
      var hasMarginTop = prevBarValue === 0;
      var rectHeight = barEndPositionY - barStartPositionY;
      var barMargin = hasMarginTop ? 0 : barMarginTop;
      var rectHeightWithMargin = rectHeight === 0 ? 0 : rectHeight + barMargin;
      var total = Object.entries(group.data).filter(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 1),
          key = _ref5[0];
        return selectedLegends.includes(key);
      }).reduce(function (acc, _ref6) {
        var _ref7 = _slicedToArray(_ref6, 2);
          _ref7[0];
          var value = _ref7[1];
        return acc + Number(value);
      }, 0);
      var totalValue = (barConfig === null || barConfig === void 0 ? void 0 : barConfig.totalFormatter) ? barConfig.totalFormatter(total) : total.toFixed(1);
      var textLength = totalValue.length;
      var svgLetterWidth = clamp(textLength * totalLetterWidth, totalLetterWidth, textLength * totalLetterWidth);
      var svgWidth = svgLetterWidth + totalSvgHorizontalPadding * 2;
      var totalX = rectX - svgWidth / 2 + 6;
      var isLastLegend = subgroup.key === selectedLegends[selectedLegends.length - 1];
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Rect$5, {
        isHovered: isActive,
        key: label + legend,
        onMouseOver: function onMouseOver(e) {
          handleOnMouseOver(e, {
            legend: subgroup.key,
            value: rectValue,
            color: color,
            label: label,
            xAxisLabel: label,
            percent: Math.round(rectValue / total * 100)
          });
        },
        onMouseOut: handleOnMouseOut,
        onMouseMove: handleOnMouseMove,
        onClick: function onClick(e) {
          handleOnClicked(e, {
            legend: subgroup.key,
            value: rectValue,
            color: color,
            label: label
          });
        },
        isHighlighted: matchedHighlightedItems({
          legend: legend,
          label: label
        }, highlightedItems),
        "data-test-id": dataTestId && "".concat(dataTestId, "-").concat(label, "-").concat(legend, "-").concat(currentValue),
        color: color,
        height: Math.abs(rectHeightWithMargin),
        x: rectX,
        y: rectY,
        cursor: (barConfig === null || barConfig === void 0 ? void 0 : barConfig.onClick) ? 'pointer' : 'default',
        size: size
      }), (barConfig === null || barConfig === void 0 ? void 0 : barConfig.showTotal) && isLastLegend && /*#__PURE__*/React__default.createElement(TotalBadge$3, {
        content: totalValue,
        x: totalX,
        y: rectY - totalSvgHeight - barMarginTop,
        width: svgWidth,
        "data-test-id": dataTestId ? "".concat(dataTestId, "-total-badge") : undefined
      }));
    }));
  })) : null;
};
var BarArea$5 = BarArea$4;

var GridArea$4 = function GridArea(_ref) {
  var maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    width = _ref.width,
    height = _ref.height,
    highlightMiddleLine = _ref.highlightMiddleLine,
    tickInterval = _ref.tickInterval,
    dataTestId = _ref['data-test-id'];
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var gridLineBackgroundColor = barChartTheme.colors.gridLineBackgroundColor;
  // Y axis
  var yScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);
  var grid = tickInterval && range(0, (maxValue || 0) + 1, tickInterval).map(function (value) {
    return /*#__PURE__*/React__default.createElement("g", {
      key: value,
      "data-test-id": dataTestId
    }, /*#__PURE__*/React__default.createElement("line", {
      strokeDasharray: highlightMiddleLine && value === 0 ? undefined : 7,
      x1: 0,
      x2: width,
      y1: yScale(value),
      y2: yScale(value),
      stroke: gridLineBackgroundColor,
      opacity: highlightMiddleLine && value === 0 ? 0.6 : 0.3
    }));
  });
  return /*#__PURE__*/React__default.createElement("g", null, grid);
};
var GridArea$5 = /*#__PURE__*/memo(GridArea$4);

var LegendGroupBaseComponent$2 = LegendGroup$7;
var LegendGroup$4 = function LegendGroup(_ref) {
  var legendConfig = _ref.legendConfig,
    dataTestId = _ref['data-test-id'],
    selectedLegends = _ref.selectedLegends,
    onChange = _ref.onChange,
    legends = _ref.legends,
    colorScale = _ref.colorScale;
  if (typeof legendConfig !== 'undefined') {
    if (legendConfig.selectable) {
      return /*#__PURE__*/React__default.createElement(LegendCheckboxGroup$1, Object.assign({
        data: legends,
        getDisplayText: function getDisplayText(item) {
          return item;
        },
        getValue: function getValue(item) {
          return item;
        },
        getColor: function getColor(item) {
          return colorScale(item);
        },
        value: selectedLegends,
        onChange: onChange,
        "data-test-id": dataTestId ? "".concat(dataTestId, "-checkbox-legend") : undefined
      }, legendConfig));
    }
    return /*#__PURE__*/React__default.createElement(LegendGroupBaseComponent$2, Object.assign({
      data: legends,
      getDisplayText: function getDisplayText(item) {
        return item;
      },
      getColor: function getColor(item) {
        return colorScale(item);
      },
      "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined
    }, legendConfig));
  }
  return null;
};
var LegendGroup$5 = LegendGroup$4;

var Navigation$5 = function Navigation(_ref) {
  var onClickNavigation = _ref.onClickNavigation,
    top = _ref.top,
    left = _ref.left,
    disabledButtons = _ref.disabledButtons,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper$3, {
    themeTop: top,
    themePosition: "left",
    themeLeft: left
  }, /*#__PURE__*/React__default.createElement(StyledNavigateButton$3, {
    size: "large",
    icon: "single-left-arrow",
    intent: "text",
    onClick: function onClick() {
      return onClickNavigation === null || onClickNavigation === void 0 ? void 0 : onClickNavigation('prev');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-prev") : undefined,
    disabled: disabledButtons === 'prev'
  })), /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper$3, {
    themeTop: top,
    themePosition: "right"
  }, /*#__PURE__*/React__default.createElement(StyledNavigateButton$3, {
    size: "large",
    icon: "single-right-arrow",
    intent: "text",
    onClick: function onClick() {
      return onClickNavigation === null || onClickNavigation === void 0 ? void 0 : onClickNavigation('next');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-next") : undefined,
    disabled: disabledButtons === 'next'
  })));
};
var Navigation$6 = Navigation$5;

var YAxisTitle$6 = function YAxisTitle(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    height = _ref.height,
    setSize = _ref.setSize,
    yAxisWidth = _ref.yAxisWidth;
  var YAxisTitleRef = useRef(null);
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var verticalTitleY = barChartTheme.space.verticalTitleY;
  useLayoutEffect(function () {
    var _a;
    var yAxisTitleElement = select(YAxisTitleRef.current);
    if (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) {
      var yAxisTitle = yAxisTitleElement.append('text').attr('class', 'vertical-title').attr('text-anchor', 'middle').attr('y', verticalTitleY - yAxisWidth).attr('x', -height / 2).attr('transform', 'rotate(-90)').text(yAxisConfig.title);
      var _ref2 = ((_a = yAxisTitle.node()) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {},
        yAxisTitleWidth = _ref2.width,
        yAxisTitleHeight = _ref2.height;
      setSize({
        width: yAxisTitleWidth || 0,
        height: yAxisTitleHeight || 0
      });
      return function () {
        yAxisTitle.remove();
      };
    }
  });
  return /*#__PURE__*/React__default.createElement("g", {
    ref: YAxisTitleRef
  });
};
var YAxisTitle$7 = /*#__PURE__*/memo(YAxisTitle$6);

var XAxis$6 = function XAxis(_ref) {
  var xAxisConfig = _ref.xAxisConfig,
    width = _ref.width,
    height = _ref.height,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'large' : _ref$size;
  var theme = useTheme();
  var columnChartTheme = theme.__hd__.columnChart;
  var barWidth = columnChartTheme.sizes.barWidth;
  var _columnChartTheme$spa = columnChartTheme.space,
    xAxisTransform = _columnChartTheme$spa.xAxisTransform,
    xAxisLabelHorizontalPadding = _columnChartTheme$spa.xAxisLabelHorizontalPadding;
  var XAxisRef = useRef(null);
  var labels = useMemo(function () {
    return (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels) || [];
  }, [xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels]);
  var xScale = useMemo(function () {
    return band().domain(labels).range([0, width]);
  }, [labels, width]);
  // calculate max-width of x axis label. if < barWidth, get barWidth
  var xAxisLabelMaxWidth = Math.max(xScale.bandwidth() - 2 * xAxisLabelHorizontalPadding, barWidth[size]);
  useLayoutEffect(function () {
    var xAxisElement = select(XAxisRef.current);
    var xAxisGenerator = axisBottom(xScale).tickSize(0);
    var xAxis = xAxisElement.append('g').attr('transform', "translate(0,".concat(height + xAxisTransform, ")")).attr('class', 'x-axis').call(xAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    })
    // fix issue: https://github.com/Thinkei/hero-design/issues/2696
    // solution: inspire from https://codepen.io/ChangedPurpose/pen/pEdapE
    .selectAll('.tick').selectAll('text').html('').append('tspan').text(function (d) {
      return "".concat(d);
    }).each(function (_, i, nodes) {
      var _a, _b;
      var xAxisLabelElement = select(nodes[i]);
      var textLength = (_b = (_a = nodes[i]).getComputedTextLength) === null || _b === void 0 ? void 0 : _b.call(_a);
      var text = xAxisLabelElement.text();
      var originalText = text;
      while (textLength > xAxisLabelMaxWidth && text.length > 0) {
        text = text.slice(0, -1);
        xAxisLabelElement.text("".concat(text, "..."));
        textLength = nodes[i].getComputedTextLength();
      }
      if (text !== originalText) {
        // add tooltip for xAxisLabelElement
        xAxisLabelElement.attr('title', originalText).append('title').text(originalText);
      }
    });
    return function () {
      xAxis.remove();
    };
  }, [height, width, xAxisLabelMaxWidth, xAxisTransform, xScale]);
  return /*#__PURE__*/React__default.createElement("g", {
    ref: XAxisRef
  });
};
var XAxis$7 = /*#__PURE__*/memo(XAxis$6);

var YAxis$6 = function YAxis(_ref) {
  var maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    height = _ref.height,
    getAxisSize = _ref.getAxisSize,
    step = _ref.step;
  var theme = useTheme();
  var columnChartTheme = theme.__hd__.columnChart;
  var _columnChartTheme$spa = columnChartTheme.space,
    yAxisTransform = _columnChartTheme$spa.yAxisTransform,
    barMarginTop = _columnChartTheme$spa.barMarginTop;
  var YAxisRef = useRef(null);
  var yScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);
  var tickValues = useMemo(function () {
    return step ? Array.from({
      length: maxValue + 1
    }, function (_v, i) {
      return i;
    }).filter(function (v) {
      return v % (step || 1) === 0;
    }) : Array.from({
      length: maxValue + 1
    }, function (_v, i) {
      return i;
    });
  }, [maxValue, step]);
  useLayoutEffect(function () {
    var _a;
    var yAxisElement = select(YAxisRef.current);
    var yAxisGenerator = axisLeft(yScale).tickSize(0).tickValues(tickValues);
    var yAxis = yAxisElement.append('g').attr('transform', "translate(".concat(yAxisTransform, ",0)")).attr('class', 'y-axis').call(yAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    });
    var _ref2 = ((_a = yAxis.node()) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {},
      yAxisW = _ref2.width,
      yAxisH = _ref2.height;
    getAxisSize({
      width: yAxisW || 0,
      height: yAxisH || 0
    });
    return function () {
      yAxis.remove();
    };
  }, [barMarginTop, getAxisSize, height, tickValues, yAxisTransform, yScale]);
  return /*#__PURE__*/React__default.createElement("g", {
    ref: YAxisRef
  });
};
var YAxis$7 = /*#__PURE__*/memo(YAxis$6);

var DefaultTooltip$2 = function DefaultTooltip(_ref) {
  var label = _ref.label,
    value = _ref.value,
    legendColor = _ref.legendColor,
    percent = _ref.percent;
  var hasPercent = percent !== undefined;
  var percentValue = hasPercent ? "(".concat(percent, "%)") : '';
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, !!legendColor && /*#__PURE__*/React__default.createElement(StyledLegendCircle, {
    "data-test-id": "legend-circle",
    themeColor: legendColor
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    intent: "subdued",
    tagName: "span"
  }, label), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    tagName: "span"
  }, value), hasPercent && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    tagName: "span"
  }, percentValue));
};
var DefaultTooltip$3 = DefaultTooltip$2;

var BarTooltip$4 = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var show = _ref.show,
    dataTestId = _ref['data-test-id'],
    color = _ref.color,
    title = _ref.title,
    value = _ref.value,
    tooltipRenderer = _ref.tooltipRenderer,
    xAxisLabel = _ref.xAxisLabel,
    percent = _ref.percent;
  var renderTooltip = React__default.useCallback(function () {
    return tooltipRenderer ? tooltipRenderer({
      label: title,
      value: Number(value),
      legendColor: color,
      xAxisLabel: xAxisLabel
    }) : /*#__PURE__*/React__default.createElement(DefaultTooltip$3, {
      label: title,
      value: Number(value),
      legendColor: color,
      percent: percent
    });
  }, [color, percent, title, tooltipRenderer, value, xAxisLabel]);
  return /*#__PURE__*/React__default.createElement(StyledTooltip, {
    ref: ref,
    style: {
      position: 'fixed',
      display: show ? 'block' : 'none'
    },
    "data-test-id": "".concat(dataTestId, "-tooltip"),
    variant: "light"
  }, /*#__PURE__*/React__default.createElement(StyledTooltipContentWrapper$3, null, renderTooltip()));
});
var BarTooltip$5 = BarTooltip$4;

var ColumnChart = function ColumnChart(_ref) {
  var data = _ref.data,
    xAxisConfig = _ref.xAxisConfig,
    yAxisConfig = _ref.yAxisConfig,
    legendConfig = _ref.legendConfig,
    barConfig = _ref.barConfig,
    dataTestId = _ref['data-test-id'],
    _ref$navigationConfig = _ref.navigationConfig,
    navigationConfig = _ref$navigationConfig === void 0 ? {
      visible: false
    } : _ref$navigationConfig,
    style = _ref.style,
    className = _ref.className,
    id = _ref.id,
    sx = _ref.sx,
    highlightedItems = _ref.highlightedItems,
    _tooltipRenderer = _ref.tooltipRenderer,
    styleConfig = _ref.styleConfig;
  var _a, _b, _c, _d;
  var niceValues = useMemo(function () {
    var maxDataValue = totalOfMaxValuesFromEachRows(data);
    var maxDataValuesWithShownTotal = typeof (barConfig === null || barConfig === void 0 ? void 0 : barConfig.showTotal) !== 'undefined' ? maxDataValue + 1 : maxDataValue;
    return createNiceScale(0, maxDataValuesWithShownTotal);
  }, [barConfig === null || barConfig === void 0 ? void 0 : barConfig.showTotal, data]);
  var isNegativeBarChart = useMemo(function () {
    return data.some(function (d) {
      return d.data.some(function (v) {
        return v !== undefined && v < 0;
      });
    });
  }, [data]);
  var maxValue = Number((_a = yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.maxValue) !== null && _a !== void 0 ? _a : niceValues.niceMax);
  var minValue = isNegativeBarChart ? -maxValue : 0;
  var step = (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.step) || niceValues.tickSpacing;
  var tickInterval = ((_b = yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.tick) === null || _b === void 0 ? void 0 : _b.interval) || step;
  var defaultBarSize = (barConfig === null || barConfig === void 0 ? void 0 : barConfig.size) || 'large';
  var theme = useTheme();
  var columnChartTheme = theme.__hd__.columnChart;
  var _columnChartTheme$spa = columnChartTheme.space,
    columnChartMarginBottom = _columnChartTheme$spa.columnChartMarginBottom,
    columnChartMarginLeft = _columnChartTheme$spa.columnChartMarginLeft,
    columnChartMarginRight = _columnChartTheme$spa.columnChartMarginRight,
    columnChartMarginTop = _columnChartTheme$spa.columnChartMarginTop,
    columnChartMarginLeftWithNavigation = _columnChartTheme$spa.columnChartMarginLeftWithNavigation,
    chartContentMarginLeft = _columnChartTheme$spa.chartContentMarginLeft,
    navigationButtonMarginLeft = _columnChartTheme$spa.navigationButtonMarginLeft;
  var chartMargin = {
    top: columnChartMarginTop,
    right: columnChartMarginRight,
    bottom: columnChartMarginBottom,
    left: (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) ? columnChartMarginLeft : columnChartMarginLeftWithNavigation
  };
  var axesRef = useRef(null);
  var tooltipRef = useRef(null);
  var containerRef = useRef(null);
  var legendContainerRef = useRef(null);
  var barsContainerRef = useRef(null);
  var _useState = useState({
      width: 0,
      height: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    containerSize = _useState2[0],
    setContainerSize = _useState2[1];
  var _useState3 = useState({
      width: 0,
      height: 0
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    legendContainerSize = _useState4[0],
    setLegendContainerSize = _useState4[1];
  var _useState5 = useState([]),
    _useState6 = _slicedToArray(_useState5, 2),
    internalSelectedLegends = _useState6[0],
    setInternalSelectedLegends = _useState6[1];
  var svgSizes = useMemo(function () {
    return {
      width: containerSize.width,
      height: containerSize.height - legendContainerSize.height
    };
  }, [containerSize.height, containerSize.width, legendContainerSize.height]);
  var _useState7 = useState({
      height: 0,
      width: 0
    }),
    _useState8 = _slicedToArray(_useState7, 2),
    yAxisSize = _useState8[0],
    setYAxisSize = _useState8[1];
  var yAxisWidth = useMemo(function () {
    return Math.floor(yAxisSize.width);
  }, [yAxisSize.width]);
  var _useState9 = useState({
      height: 0,
      width: 0
    }),
    _useState10 = _slicedToArray(_useState9, 2),
    yAxisTitleSize = _useState10[0],
    setYAxisTitleSize = _useState10[1];
  var yAxisTitleWidth = useMemo(function () {
    return Math.floor(yAxisTitleSize.width);
  }, [yAxisTitleSize.width]);
  var boundsWidth = svgSizes.width - chartMargin.right - chartMargin.left;
  var boundsHeight = svgSizes.height - chartMargin.top - chartMargin.bottom;
  var legends = useMemo(function () {
    return data.map(function (item) {
      return item.label;
    });
  }, [data]);
  var defaultLegends = useMemo(function () {
    return (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) ? (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.value) || internalSelectedLegends : internalSelectedLegends;
  }, [internalSelectedLegends, legendConfig]);
  var selectedLegends = useMemo(function () {
    return legends.filter(function (l) {
      return defaultLegends.includes(l);
    });
  }, [legends, defaultLegends]);
  var prevLegends = usePrevious(legends);
  var legendsDiff = useMemo(function () {
    return difference(legends, prevLegends || []);
  }, [legends, prevLegends]);
  var _useState11 = useState(undefined),
    _useState12 = _slicedToArray(_useState11, 2),
    currentSelectedBar = _useState12[0],
    setCurrentSelectedBar = _useState12[1];
  // Color Scale
  var colorScale = useColorScale(legends, (styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series) !== undefined ? filterElementHasNoColor(styleConfig.series) : undefined);
  var resizeHandler = useCallback(function () {
    if (containerRef.current) {
      var _containerRef$current = containerRef.current.getBoundingClientRect(),
        width = _containerRef$current.width,
        height = _containerRef$current.height;
      setContainerSize({
        width: width,
        height: height
      });
    }
    if (legendContainerRef.current) {
      var _legendContainerRef$c = legendContainerRef.current.getBoundingClientRect(),
        _width = _legendContainerRef$c.width,
        _height = _legendContainerRef$c.height;
      setLegendContainerSize({
        width: _width,
        height: _height
      });
    }
  }, []);
  var targetElement = ((_c = containerRef.current) === null || _c === void 0 ? void 0 : _c.parentElement) !== undefined ? (_d = containerRef.current) === null || _d === void 0 ? void 0 : _d.parentElement : null;
  useResizeObserver(resizeHandler, targetElement);
  useLayoutEffect(function () {
    setInternalSelectedLegends(function (prev) {
      return Array.from(new Set([].concat(_toConsumableArray(prev), _toConsumableArray(legendsDiff))));
    });
  }, [legendsDiff]);
  var onMouseOverBar = useCallback(function (_e, barData) {
    var color = barData.color,
      legend = barData.legend,
      value = barData.value,
      xAxisLabel = barData.xAxisLabel,
      percent = barData.percent;
    setCurrentSelectedBar({
      legend: legend,
      value: value,
      legendColor: color,
      xAxisLabel: xAxisLabel,
      percent: percent
    });
  }, []);
  var onMouseOutBar = useCallback(function () {
    setCurrentSelectedBar(undefined);
  }, []);
  var onMouseMoveBar = useCallback(function (e) {
    var tooltipElement = select(tooltipRef.current);
    var clientX = e.clientX,
      clientY = e.clientY;
    tooltipElement.style('top', "".concat(clientY - 12, "px")).style('left', "".concat(clientX, "px"));
  }, []);
  var columnAreaData = useMemo(function () {
    return data.map(function (d) {
      return Object.assign(Object.assign({}, d), {
        color: colorScale(d.label)
      });
    });
  }, [colorScale, data]);
  return /*#__PURE__*/React__default.createElement(StyledColumnChartContainer, {
    className: className,
    id: id,
    style: Object.assign(Object.assign({}, style), useCss(Object.assign({}, sx))),
    "data-test-id": dataTestId,
    ref: containerRef
  }, navigationConfig.visible && /*#__PURE__*/React__default.createElement(Navigation$6, {
    top: boundsHeight / 2,
    left: (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) ? chartContentMarginLeft - navigationButtonMarginLeft : 0,
    onClickNavigation: navigationConfig.onNavigate,
    "data-test-id": dataTestId,
    disabledButtons: navigationConfig.disabledButtons
  }), /*#__PURE__*/React__default.createElement(BarTooltip$5, {
    show: !!currentSelectedBar,
    "data-test-id": dataTestId,
    ref: tooltipRef,
    color: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.legendColor,
    title: (currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.legend) || '',
    value: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.value,
    xAxisLabel: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.xAxisLabel,
    percent: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.percent,
    tooltipRenderer: _tooltipRenderer
  }), /*#__PURE__*/React__default.createElement("svg", {
    width: svgSizes.width,
    height: svgSizes.height
  }, /*#__PURE__*/React__default.createElement("g", {
    ref: barsContainerRef,
    transform: "translate(".concat(yAxisWidth + chartMargin.left, ",").concat(chartMargin.top, "\n          )")
  }, /*#__PURE__*/React__default.createElement(YAxisTitle$7, {
    height: boundsHeight,
    setSize: setYAxisTitleSize,
    yAxisWidth: yAxisWidth,
    yAxisConfig: yAxisConfig
  })), /*#__PURE__*/React__default.createElement("g", {
    ref: axesRef,
    transform: "translate(".concat(yAxisWidth + yAxisTitleWidth + chartContentMarginLeft, ",").concat(chartMargin.top, "\n          )")
  }, /*#__PURE__*/React__default.createElement(GridArea$5, {
    height: boundsHeight,
    width: boundsWidth,
    minValue: minValue,
    maxValue: maxValue,
    tickInterval: tickInterval,
    highlightMiddleLine: isNegativeBarChart,
    "data-test-id": dataTestId ? "".concat(dataTestId, "-grid-line") : undefined
  }), /*#__PURE__*/React__default.createElement(BarArea$5, {
    height: boundsHeight,
    width: boundsWidth,
    maxValue: maxValue,
    minValue: minValue,
    "data-test-id": dataTestId,
    xAxisConfig: xAxisConfig,
    barConfig: barConfig,
    onMouseOver: onMouseOverBar,
    onMouseOut: onMouseOutBar,
    onMouseMove: onMouseMoveBar,
    highlightedItems: highlightedItems,
    selectedLegends: selectedLegends,
    data: columnAreaData,
    size: defaultBarSize
  }), /*#__PURE__*/React__default.createElement(XAxis$7, {
    height: boundsHeight,
    width: boundsWidth,
    xAxisConfig: xAxisConfig,
    size: defaultBarSize
  }), /*#__PURE__*/React__default.createElement(YAxis$7, {
    height: boundsHeight,
    maxValue: maxValue,
    minValue: minValue,
    getAxisSize: setYAxisSize,
    step: step
  }))), /*#__PURE__*/React__default.createElement(StyledLegendContainer$3, {
    ref: legendContainerRef
  }, !!(xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.title) && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "regular",
    intent: "subdued"
  }, xAxisConfig.title), /*#__PURE__*/React__default.createElement(LegendGroup$5, {
    legends: legends,
    onChange: setInternalSelectedLegends,
    selectedLegends: selectedLegends,
    "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined,
    legendConfig: legendConfig,
    colorScale: colorScale
  })));
};
var ColumnChart$1 = ColumnChart;

var StyledChartContainer = styled.div.withConfig({
  displayName: "StyledPieChart__StyledChartContainer",
  componentId: "sc-1uspc01-0"
})(["&&{display:flex;flex-direction:column;justify-content:center;align-items:center;width:fit-content;background-color:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.chart.colors.pie.background;
});
var StyledPieChartContainer = styled.div.withConfig({
  displayName: "StyledPieChart__StyledPieChartContainer",
  componentId: "sc-1uspc01-1"
})(["&&{position:relative;display:flex;justify-content:center;align-items:center;}"]);
var StyledIconContainer = styled.div.withConfig({
  displayName: "StyledPieChart__StyledIconContainer",
  componentId: "sc-1uspc01-2"
})(["&&{background-color:", ";border-radius:", ";width:", ";height:", ";display:flex;justify-content:center;align-items:center;}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.chart.colors.pie.iconBackground;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.chart.radii.pie.iconContainerRadius;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.chart.sizes.pie.iconContainerSize;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.chart.sizes.pie.iconContainerSize;
});
var StyledInnerContentContainer = styled.div.withConfig({
  displayName: "StyledPieChart__StyledInnerContentContainer",
  componentId: "sc-1uspc01-3"
})(["&&{position:absolute;top:15%;bottom:15%;right:15%;left:15%;display:flex;justify-content:center;align-items:center;border-radius:9999px;overflow:hidden;}"]);

var getDiametterFromSize = function getDiametterFromSize(size, theme) {
  return theme.__hd__.chart.sizes.pie[size];
};
var getStrokeWidth = function getStrokeWidth(size, theme) {
  return theme.__hd__.chart.sizes.pie.stokes[size];
};
var getHoverStrokeWidth = function getHoverStrokeWidth(size, theme) {
  return theme.__hd__.chart.sizes.pie.hoverStrokes[size];
};
var getRestHoverStrokeWidth = function getRestHoverStrokeWidth(size, theme) {
  return theme.__hd__.chart.sizes.pie.restHoverStrokes[size];
};
var getTitleLevel = function getTitleLevel(size) {
  return size === 'small' ? 5 : 3;
};
var ANGLE_PADDING = Math.PI / 12;
var PieChart = function PieChart(_ref) {
  var originalData = _ref.data,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    style = _ref.style,
    dataTestId = _ref['data-test-id'],
    className = _ref.className,
    legendConfig = _ref.legendConfig,
    title = _ref.title,
    id = _ref.id,
    onClick = _ref.onClick,
    _ref$alwaysShowTotal = _ref.alwaysShowTotal,
    alwaysShowTotal = _ref$alwaysShowTotal === void 0 ? false : _ref$alwaysShowTotal,
    highlightedItems = _ref.highlightedItems,
    _ref$totalText = _ref.totalText,
    totalText = _ref$totalText === void 0 ? 'Total' : _ref$totalText,
    _ref$totalFormatter = _ref.totalFormatter,
    totalFormatter = _ref$totalFormatter === void 0 ? function (value) {
      return value.toString();
    } : _ref$totalFormatter,
    styleConfig = _ref.styleConfig,
    centralContentRenderer = _ref.centralContentRenderer,
    itemConfig = _ref.itemConfig;
  var _a;
  var matchedSegmentByLabel = useMemo(function () {
    return highlightedItems === null || highlightedItems === void 0 ? void 0 : highlightedItems.reduce(function (acc, item) {
      acc[item] = true;
      return acc;
    }, {});
  }, [highlightedItems]);
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    currentIndex = _useState2[0],
    setCurrentIndex = _useState2[1];
  var theme = useTheme();
  var diametter = getDiametterFromSize(size, theme);
  var chartSize = diametter + theme.__hd__.chart.spaces.pie.padding;
  var radius = diametter / 2;
  var strokeWidth = getStrokeWidth(size, theme);
  var hoverStrokeWidth = getHoverStrokeWidth(size, theme);
  var restHoverStrokeWidth = getRestHoverStrokeWidth(size, theme);
  var strokeSizeDiff = (strokeWidth - restHoverStrokeWidth) / 2;
  var colors = theme.colors;
  var sliceGap = theme.__hd__.chart.spaces.pie.sliceGap;
  var tooltipRef = useRef(null);
  var svgRef = useRef(null);
  var _useState3 = useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    internalSelectedLegends = _useState4[0],
    setInternalSelectedLegends = _useState4[1];
  var selectedLegends = useMemo(function () {
    return (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) ? (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.value) || internalSelectedLegends : internalSelectedLegends;
  }, [internalSelectedLegends, legendConfig]);
  var selectedLegendByName = useMemo(function () {
    return selectedLegends.reduce(function (acc, legend) {
      acc[legend] = true;
      return acc;
    }, {});
  }, [selectedLegends]);
  var data = useMemo(function () {
    return originalData.map(function (item, index) {
      var _a, _b;
      return {
        name: item.label,
        value: typeof item.data === 'number' ? item.data : (_a = item.data) === null || _a === void 0 ? void 0 : _a.value,
        icon: typeof item.data === 'number' ? undefined : (_b = item.data) === null || _b === void 0 ? void 0 : _b.icon,
        color: chartColors[index],
        originalData: item
      };
    }).filter(function (item) {
      return !!selectedLegendByName[item.name];
    });
  }, [originalData, selectedLegendByName]);
  var total = data === null || data === void 0 ? void 0 : data.reduce(function (acc, item) {
    var _a;
    return acc + ((_a = item === null || item === void 0 ? void 0 : item.value) !== null && _a !== void 0 ? _a : 0);
  }, 0);
  var minValue = useMemo(function () {
    return Math.min.apply(Math, _toConsumableArray((data === null || data === void 0 ? void 0 : data.map(function (item) {
      return item.value;
    })) || []));
  }, [data]);
  var minPercentage = minValue / total * 100;
  var customColors = useMemo(function () {
    return (styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series) !== undefined ? filterElementHasNoColor(styleConfig.series) : undefined;
  }, [styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series]);
  var colorScale = useColorScale(originalData.map(function (item) {
    return item.label;
  }), customColors);
  var pieGenerator = useMemo(function () {
    return pie().startAngle(0).padAngle(minPercentage < 5 ? ANGLE_PADDING : 0).value(function (d) {
      var _a;
      return (_a = d.value) !== null && _a !== void 0 ? _a : 0;
    }).sort(null);
  }, [minPercentage]);
  var pieArcDatums = useMemo(function () {
    return pieGenerator(data);
  }, [pieGenerator, data]);
  var innerRadius = radius - strokeWidth;
  var outerRadius = radius;
  var createArc = useMemo(function () {
    return arc().innerRadius(innerRadius).outerRadius(outerRadius).cornerRadius(16).padAngle(0.045);
  }, [innerRadius, outerRadius]);
  var localRadius = useMemo(function () {
    return local();
  }, []);
  var localFilter = useMemo(function () {
    return local();
  }, []);
  useEffect(function () {
    var svg = select(svgRef.current);
    var g = svg.append('g').attr('transform', "translate(".concat(chartSize / 2, ", ").concat(chartSize / 2, ")"));
    g.selectAll('path').data(pieArcDatums).enter().append('path').attr('d', function handler(d) {
      if (!matchedSegmentByLabel || (matchedSegmentByLabel === null || matchedSegmentByLabel === void 0 ? void 0 : matchedSegmentByLabel[d.data.name])) {
        localRadius.set(this, {
          innerRadius: innerRadius,
          outerRadius: outerRadius
        });
        return createArc.innerRadius(innerRadius).outerRadius(outerRadius)(d);
      }
      localRadius.set(this, {
        innerRadius: innerRadius + strokeSizeDiff,
        outerRadius: outerRadius - strokeSizeDiff
      });
      return createArc.innerRadius(innerRadius + strokeSizeDiff).outerRadius(outerRadius - strokeSizeDiff)(d);
    }).attr('filter', function handler(d) {
      if (matchedSegmentByLabel === null || matchedSegmentByLabel === void 0 ? void 0 : matchedSegmentByLabel[d.data.name]) {
        localFilter.set(this, theme.__hd__.chart.shadows.pie.slice);
        return theme.__hd__.chart.shadows.pie.slice;
      }
      localFilter.set(this, 'none');
      return 'none';
    }).attr('fill', function (d) {
      return colorScale(d.data.name);
    }).attr('data-test-id', function (d) {
      return dataTestId ? "".concat(dataTestId, "-slice-").concat(d.data.name) : null;
    }).style('cursor', onClick ? 'pointer' : 'unset');
    var tooltip = select(tooltipRef.current).style('position', 'fixed').style('display', 'none').style('opacity', '0%');
    // add mouseover, mousemove, and mouseout events to the paths
    svg.selectAll('path').on('mouseover', function handler() {
      var _a;
      var e = arguments.length <= 0 ? undefined : arguments[0];
      var selected = arguments.length <= 1 ? undefined : arguments[1];
      (_a = itemConfig === null || itemConfig === void 0 ? void 0 : itemConfig.onMouseOver) === null || _a === void 0 ? void 0 : _a.call(itemConfig, e, selected.data.originalData);
      select(this).raise().transition('size').attr('d', function (d) {
        return createArc.innerRadius(innerRadius).outerRadius(outerRadius)(d);
      });
      select(this).raise().attr('filter', theme.__hd__.chart.shadows.pie.slice);
      g.selectAll('path').filter(function (d) {
        return d !== selected;
      }).transition('arc').attr('filter', 'none').attr('d', function (d) {
        return createArc.innerRadius(innerRadius + strokeSizeDiff).outerRadius(outerRadius - strokeSizeDiff)(d);
      });
      var _ref2 = arguments.length <= 0 ? undefined : arguments[0],
        clientX = _ref2.clientX,
        clientY = _ref2.clientY;
      tooltip.style('left', "".concat(clientX, "px")).style('top', "".concat(clientY - theme.__hd__.chart.spaces.pie.tooltipTopPosition, "px"));
      tooltip.transition().style('display', 'block').style('opacity', '100%');
      setCurrentIndex(selected.index);
    }).on('mousemove', function (event) {
      var clientX = event.clientX,
        clientY = event.clientY;
      tooltip.style('left', "".concat(clientX, "px")) // position the tooltip to the right of the mouse pointer
      .style('top', "".concat(clientY - theme.__hd__.chart.spaces.pie.tooltipTopPosition, "px")); // position the tooltip below the mouse pointer
    }).on('mouseout', function handler() {
      var _a;
      var e = arguments.length <= 0 ? undefined : arguments[0];
      var selected = arguments.length <= 1 ? undefined : arguments[1];
      (_a = itemConfig === null || itemConfig === void 0 ? void 0 : itemConfig.onMouseOut) === null || _a === void 0 ? void 0 : _a.call(itemConfig, e, selected.data.originalData);
      var originalFilter = localFilter.get(this) || 'none';
      select(this).attr('filter', originalFilter);
      tooltip.transition().style('display', 'none').style('opacity', '0%');
      g.selectAll('path').transition('arc').attr('d', function _handler(d) {
        var originalRadius = localRadius.get(this) || {
          innerRadius: innerRadius,
          outerRadius: outerRadius
        };
        return createArc.innerRadius(originalRadius.innerRadius).outerRadius(originalRadius.outerRadius)(d);
      }).attr('filter', function __handler() {
        return localFilter.get(this) || 'none';
      });
      setCurrentIndex(undefined);
    }).on('click', function handler(e, selected) {
      var name = selected.data.name;
      var series = originalData.find(function (item) {
        return item.label === name;
      });
      // Return original series data for reference equality
      if (series) onClick === null || onClick === void 0 ? void 0 : onClick(e, series);
    });
    return function () {
      svg.selectAll('*').remove();
    };
  }, [colors, data, diametter, radius, strokeWidth, hoverStrokeWidth, theme, total, sliceGap, dataTestId, strokeSizeDiff, colorScale, createArc, innerRadius, outerRadius, pieArcDatums, onClick, originalData, matchedSegmentByLabel, localRadius, localFilter, itemConfig, chartSize]);
  var selected = data[currentIndex !== null && currentIndex !== void 0 ? currentIndex : -1];
  var percentage = 100 * ((_a = selected === null || selected === void 0 ? void 0 : selected.value) !== null && _a !== void 0 ? _a : 0) / total;
  var renderValue = function renderValue() {
    return !!percentage && !!(selected === null || selected === void 0 ? void 0 : selected.value) ? /*#__PURE__*/React__default.createElement(Box$1, {
      sx: {
        flexDirection: 'column',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }
    }, /*#__PURE__*/React__default.createElement(Box$1, {
      tagName: "span",
      sx: {
        display: 'flex',
        alignItems: 'flex-end'
      }
    }, /*#__PURE__*/React__default.createElement(Typography$1.Title, {
      level: getTitleLevel(size)
    }, percentage.toFixed(0)), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      fontWeight: "light"
    }, "%")), !!(selected === null || selected === void 0 ? void 0 : selected.value) && size !== 'small' && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      fontWeight: "light",
      fontSize: 14
    }, totalFormatter(total), " ", totalText)) : null;
  };
  var renderTotal = function renderTotal() {
    return /*#__PURE__*/React__default.createElement(Box$1, {
      sx: {
        flexDirection: 'column',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }
    }, /*#__PURE__*/React__default.createElement(Typography$1.Title, {
      level: getTitleLevel(size)
    }, totalFormatter(total)), size !== 'small' && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      fontWeight: "light"
    }, totalText));
  };
  var renderIcon = function renderIcon() {
    return (selected === null || selected === void 0 ? void 0 : selected.icon) ? /*#__PURE__*/React__default.createElement(StyledIconContainer, null, /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: selected === null || selected === void 0 ? void 0 : selected.icon,
      intent: "primary"
    })) : null;
  };
  var labels = useMemo(function () {
    return originalData.map(function (item) {
      return item.label;
    });
  }, [originalData]);
  var prevLabels = usePrevious(labels);
  var labelsDiff = useMemo(function () {
    return difference(labels, prevLabels || []);
  }, [labels, prevLabels]);
  useEffect(function () {
    setInternalSelectedLegends(function (prev) {
      return Array.from(new Set([].concat(_toConsumableArray(prev), _toConsumableArray(labelsDiff))));
    });
  }, [labelsDiff]);
  var renderLegend = function renderLegend() {
    if (typeof legendConfig !== 'undefined') {
      if (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) {
        return /*#__PURE__*/React__default.createElement(LegendCheckboxGroup$1, Object.assign({
          data: originalData,
          getDisplayText: function getDisplayText(item) {
            return item.label;
          },
          getValue: function getValue(item) {
            return item.label;
          },
          getColor: function getColor(item) {
            return colorScale(item.label);
          },
          value: selectedLegends,
          onChange: setInternalSelectedLegends,
          sx: {
            mt: title ? 0 : size
          },
          "data-test-id": dataTestId ? "".concat(dataTestId, "-checkbox-legend") : undefined
        }, legendConfig));
      }
      return /*#__PURE__*/React__default.createElement(LegendGroup$7, Object.assign({
        data: originalData,
        getDisplayText: function getDisplayText(item) {
          return item.label;
        },
        getColor: function getColor(item) {
          return colorScale(item.label);
        },
        sx: {
          mt: title ? 0 : size
        },
        "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined
      }, legendConfig));
    }
    return null;
  };
  var renderInnerContent = function renderInnerContent() {
    if (centralContentRenderer) {
      return centralContentRenderer();
    }
    if (!selected) {
      if (alwaysShowTotal) return renderTotal();
    }
    if (selected === null || selected === void 0 ? void 0 : selected.icon) return renderIcon();
    return renderValue();
  };
  return /*#__PURE__*/React__default.createElement(StyledChartContainer, {
    id: id,
    className: className,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), useCss(sx))
  }, /*#__PURE__*/React__default.createElement(StyledPieChartContainer, {
    themeSize: size
  }, /*#__PURE__*/React__default.createElement(StyledTooltip, {
    ref: tooltipRef,
    variant: "light"
  }, /*#__PURE__*/React__default.createElement(Box$1, {
    sx: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React__default.createElement(StyledLegendDot, {
    themeColor: colorScale(selected === null || selected === void 0 ? void 0 : selected.name)
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "light",
    intent: "subdued",
    sx: {
      marginLeft: 'xsmall'
    }
  }, selected === null || selected === void 0 ? void 0 : selected.name), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "light",
    tagName: "span",
    sx: {
      marginLeft: 'xsmall'
    }
  }, selected === null || selected === void 0 ? void 0 : selected.value), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "light",
    tagName: "span",
    sx: {
      marginLeft: 'xsmall'
    }
  }, "(", percentage === null || percentage === void 0 ? void 0 : percentage.toFixed(0), "%)"))), /*#__PURE__*/React__default.createElement("svg", {
    ref: svgRef,
    width: chartSize,
    height: chartSize
  }), /*#__PURE__*/React__default.createElement(StyledInnerContentContainer, {
    "data-test-id": dataTestId ? "".concat(dataTestId, "-inner-content") : undefined
  }, renderInnerContent())), title && /*#__PURE__*/React__default.createElement(StyledTitleContainer, null, /*#__PURE__*/React__default.createElement(StyledChartTitle, {
    fontSize: 12,
    fontWeight: "semi-bold",
    "data-test-id": dataTestId ? "".concat(dataTestId, "-title") : undefined
  }, title)), renderLegend());
};
var PieChart$1 = PieChart;

var StyledBarChartContainer$1 = styled.div.withConfig({
  displayName: "StyledBarChart__StyledBarChartContainer",
  componentId: "sc-8ugpu0-0"
})(["&&{position:relative;height:100%;width:100%;}&& svg{position:relative;z-index:2;}&& .x-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}&& .y-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}&& .vertical-title{font-size:", ";font-weight:", ";fill:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.barChart.fontWeights.xAxisTick;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.barChart.fontSizes.xAxisTick;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.barChart.lineHeights.xAxisTick;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.barChart.colors.xAxisTickColor;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.barChart.fontWeights.yAxisTick;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.barChart.fontSizes.yAxisTick;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.barChart.lineHeights.yAxisTick;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.barChart.colors.yAxisTickColor;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.barChart.fontSizes.verticalTitle;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.barChart.fontWeights.verticalTitle;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.barChart.colors.verticalTitleFillColor;
});
var StyledLegendContainer$2 = styled.div.withConfig({
  displayName: "StyledBarChart__StyledLegendContainer",
  componentId: "sc-8ugpu0-1"
})(["&&{display:flex;flex-direction:column;align-items:center;width:100%;}&& > *:not(:last-child){margin-bottom:", ";}&& ", "{background:", ";box-shadow:", ";padding:", ";}&& ", "::before{background:", ";}"], function (_ref12) {
  var theme = _ref12.theme;
  return "".concat(theme.__hd__.barChart.space.legendContainerChildMarginBottom, "px");
}, TooltipWrapper, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.barChart.colors.tooltipBackgroundColor;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.barChart.boxShadows.tooltip;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.barChart.space.moreTooltipPadding;
}, Arrow, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.barChart.colors.tooltipBackgroundColor;
});
var StyledTooltipContentWrapper$2 = styled.div.withConfig({
  displayName: "StyledBarChart__StyledTooltipContentWrapper",
  componentId: "sc-8ugpu0-2"
})(["&&{display:flex;align-items:center;justify-content:center;}&& > *:not(:last-child){margin-right:", ";}"], function (_ref17) {
  var theme = _ref17.theme;
  return "".concat(theme.__hd__.columnChart.space.tooltipChildMargin, "px");
});
var StyledNavigateButton$2 = styled(IconButton$1).withConfig({
  displayName: "StyledBarChart__StyledNavigateButton",
  componentId: "sc-8ugpu0-3"
})(["&&{width:", ";height:", ";}"], function (_ref18) {
  var theme = _ref18.theme;
  return "".concat(theme.__hd__.columnChart.sizes.navigationButton, "px");
}, function (_ref19) {
  var theme = _ref19.theme;
  return "".concat(theme.__hd__.columnChart.sizes.navigationButton, "px");
});
var StyledNavigateButtonWrapper$2 = styled(Box$1).withConfig({
  displayName: "StyledBarChart__StyledNavigateButtonWrapper",
  componentId: "sc-8ugpu0-4"
})(["&&{position:absolute;display:grid;place-items:center;top:", ";", ";z-index:3;}"], function (_ref20) {
  var themeTop = _ref20.themeTop;
  return typeof themeTop === 'number' ? "".concat(themeTop, "px") : themeTop;
}, function (_ref21) {
  var themeLeft = _ref21.themeLeft,
    themePosition = _ref21.themePosition;
  var positionMapping = {
    right: "right: 0",
    left: "left: ".concat(themeLeft, "px")
  };
  return positionMapping[themePosition];
});

var Rect$2 = function Rect(_ref) {
  var width = _ref.width,
    x = _ref.x,
    y = _ref.y,
    color = _ref.color,
    onMouseOver = _ref.onMouseOver,
    onMouseMove = _ref.onMouseMove,
    onMouseOut = _ref.onMouseOut,
    onClick = _ref.onClick,
    dataTestId = _ref['data-test-id'],
    className = _ref.className,
    isHovered = _ref.isHovered,
    isHighlighted = _ref.isHighlighted,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'large' : _ref$size;
  var HOVER_EFFECT_DURATION = 150;
  var theme = useTheme();
  var rectRef = useRef(null);
  var barChartTheme = theme.__hd__.barChart;
  var barDropShadow = barChartTheme.boxShadows.barDropShadow;
  var barHeightMapping = barChartTheme.sizes.barHeight;
  var barHeight = barHeightMapping[size];
  var barBorderRadiusMapping = barChartTheme.radii.bar;
  var barBorderRadius = barBorderRadiusMapping[size];
  var barHoverTransformMapping = barChartTheme.space.barHoverTransform;
  var barHoverTransform = barHoverTransformMapping[size];
  var handleIsHoveredEvent = useCallback(function (rectElement, hovered) {
    if (hovered) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', y || 0).attr('height', barHeight).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
      return;
    }
    if (hovered === false) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', (y || 0) + barHoverTransform).attr('height', barHeightMapping.inactive).attr('rx', barBorderRadiusMapping.inactive).attr('ry', barBorderRadiusMapping.inactive);
      return;
    }
    if (hovered === undefined) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', y || 0).attr('height', barHeight).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
    }
  }, [barBorderRadius, barBorderRadiusMapping.inactive, barHeight, barHeightMapping.inactive, barHoverTransform, y]);
  var handleHighlightedEvent = useCallback(function (rectElement, highlighted, hovered) {
    if (highlighted) {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', y || 0).attr('height', barHeight).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
      return;
    }
    if (!highlighted && hovered) {
      rectElement.transition().attr('y', y || 0).attr('height', barHeight).attr('rx', barBorderRadius).attr('ry', barBorderRadius);
      return;
    }
    if (!highlighted && !hovered) {
      rectElement.transition().attr('y', (y || 0) + barHoverTransform).attr('height', barHeightMapping.inactive).attr('rx', barBorderRadiusMapping.inactive).attr('ry', barBorderRadiusMapping.inactive);
    }
  }, [barBorderRadius, barBorderRadiusMapping.inactive, barHeight, barHeightMapping.inactive, barHoverTransform, y]);
  useLayoutEffect(function () {
    var rectElement = select(rectRef.current);
    if (typeof isHighlighted === 'undefined') {
      handleIsHoveredEvent(rectElement, isHovered);
      return;
    }
    if (typeof isHighlighted !== 'undefined') {
      handleHighlightedEvent(rectElement, isHighlighted, isHovered);
    }
  }, [isHovered, isHighlighted, barBorderRadiusMapping.inactive, barHeight, barHeightMapping.inactive, barHoverTransform, y, barBorderRadius, handleIsHoveredEvent, handleHighlightedEvent]);
  return /*#__PURE__*/React__default.createElement("rect", {
    ref: rectRef,
    onMouseOver: onMouseOver,
    onMouseMove: onMouseMove,
    onMouseOut: onMouseOut,
    onClick: onClick,
    className: className,
    "data-test-id": dataTestId,
    y: y,
    height: barHeight,
    x: x,
    width: width < 0 ? 0 : width,
    fill: color,
    filter: isHovered || isHighlighted ? "drop-shadow(".concat(barDropShadow, ")") : undefined,
    cursor: "pointer",
    rx: barBorderRadius,
    ry: barBorderRadius
  });
};
var Rect$3 = /*#__PURE__*/memo(Rect$2);

var TotalBadge = function TotalBadge(_ref) {
  var total = _ref.total,
    totalFormatter = _ref.totalFormatter,
    className = _ref.className,
    x = _ref.x,
    y = _ref.y,
    dataTestId = _ref['data-test-id'];
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var _barChartTheme$sizes = barChartTheme.sizes,
    totalSvgHeight = _barChartTheme$sizes.totalSvgHeight,
    totalLetterWidth = _barChartTheme$sizes.totalLetterWidth;
  var totalSvgHorizontalPadding = barChartTheme.space.totalSvgHorizontalPadding;
  var totalRect = barChartTheme.radii.totalRect;
  var totalRectBorderWidth = barChartTheme.borderWidth.totalRect;
  var totalTextFontSize = barChartTheme.fontSizes.totalText;
  var totalTextFontWeight = barChartTheme.fontWeights.totalText;
  var _barChartTheme$colors = barChartTheme.colors,
    gridLineBackgroundColor = _barChartTheme$colors.gridLineBackgroundColor,
    totalBackgroundColor = _barChartTheme$colors.totalBackgroundColor;
  var totalValue = totalFormatter ? totalFormatter(total) : total.toFixed(1);
  var textLength = totalValue.toString().length;
  var svgLetterWidth = clamp(textLength * totalLetterWidth, totalLetterWidth, textLength * totalLetterWidth);
  var svgWidth = svgLetterWidth + totalSvgHorizontalPadding * 2;
  return /*#__PURE__*/React__default.createElement("svg", {
    className: className,
    x: x,
    y: y,
    width: svgWidth,
    height: totalSvgHeight,
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement("rect", {
    x: 1,
    y: 1,
    width: svgWidth - totalRectBorderWidth * 2,
    height: totalSvgHeight - totalRectBorderWidth * 2,
    fill: totalBackgroundColor,
    strokeWidth: totalRectBorderWidth,
    stroke: gridLineBackgroundColor,
    rx: totalRect,
    ry: totalRect
  }), /*#__PURE__*/React__default.createElement("text", {
    x: "50%",
    y: "50%",
    textAnchor: "middle",
    alignmentBaseline: "middle",
    fontSize: totalTextFontSize,
    fontWeight: totalTextFontWeight
  }, totalValue));
};
var TotalBadge$1 = /*#__PURE__*/memo(TotalBadge);

var MIN_DISPLAY_PERCENTAGE = 2 / 100;
var BarArea$2 = function BarArea(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    height = _ref.height,
    width = _ref.width,
    maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    dataTestId = _ref['data-test-id'],
    highlightedItems = _ref.highlightedItems,
    barConfig = _ref.barConfig,
    onMouseOver = _ref.onMouseOver,
    selectedLegends = _ref.selectedLegends,
    data = _ref.data,
    onMouseOut = _ref.onMouseOut,
    onMouseMove = _ref.onMouseMove,
    _ref$barSize = _ref.barSize,
    barSize = _ref$barSize === void 0 ? 'large' : _ref$barSize;
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var _barChartTheme$space = barChartTheme.space,
    barMarginLeft = _barChartTheme$space.barMarginLeft,
    barMarginTop = _barChartTheme$space.barMarginTop;
  var labels = useMemo(function () {
    return (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels) || [];
  }, [yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels]);
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    activeBar = _useState2[0],
    setActiveBar = _useState2[1];
  var series = useSeries$1({
    legends: selectedLegends,
    maxValue: maxValue,
    minDisplayPercentage: MIN_DISPLAY_PERCENTAGE,
    data: data,
    labels: labels
  });
  var yScale = useMemo(function () {
    return band().domain(labels).range([0, height]);
  }, [labels, height]);
  var xScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([0, width]);
  }, [minValue, maxValue, width]);
  var matchedHighlightedItems = useCallback(function (_ref2) {
    var legend = _ref2.legend,
      label = _ref2.label;
    if (typeof highlightedItems === 'undefined') return undefined;
    var isMatchedSegmentNotEmpty = highlightedItems.length > 0;
    if (isMatchedSegmentNotEmpty) {
      return highlightedItems && highlightedItems.filter(function (item) {
        return item.label === label && item.legend === legend;
      }).length > 0;
    }
    return false;
  }, [highlightedItems]);
  var handleOnMouseOver = useCallback(function (e, barData) {
    var color = barData.color,
      legend = barData.legend,
      value = barData.value,
      label = barData.label,
      percent = barData.percent,
      yAxisLabel = barData.yAxisLabel;
    onMouseOver(e, {
      legend: legend,
      value: value,
      color: color,
      label: label,
      percent: percent,
      yAxisLabel: yAxisLabel
    });
    setActiveBar(barData);
  }, [onMouseOver]);
  var handleOnMouseOut = useCallback(function (e) {
    onMouseOut(e);
    setActiveBar(undefined);
  }, [onMouseOut]);
  var handleOnMouseMove = useCallback(function (e) {
    onMouseMove(e);
  }, [onMouseMove]);
  var handleOnClicked = useCallback(function (e, barData) {
    var _a;
    var legend = barData.legend,
      label = barData.label,
      value = barData.value;
    (_a = barConfig === null || barConfig === void 0 ? void 0 : barConfig.onClick) === null || _a === void 0 ? void 0 : _a.call(barConfig, e, {
      legend: legend,
      label: label,
      data: value
    });
  }, [barConfig]);
  return /*#__PURE__*/React__default.createElement("g", null, series.map(function (subgroup) {
    return /*#__PURE__*/React__default.createElement("g", {
      key: subgroup.key,
      transform: "translate(0, ".concat(Math.floor(yScale.bandwidth() / 2 - barMarginLeft), ")")
    }, subgroup.map(function (group) {
      var _a;
      var prevBarValue = group[0];
      var currentValue = group[1];
      if (Number.isNaN(prevBarValue) || Number.isNaN(currentValue)) {
        return null;
      }
      var legend = subgroup.key;
      var color = data.filter(function (d) {
        return d.label === legend;
      })[0].color;
      var rectValue = Number(group.data.data[subgroup.key]);
      var label = group.data.label;
      var isActive = typeof activeBar !== 'undefined' ? (activeBar === null || activeBar === void 0 ? void 0 : activeBar.legend) === legend && activeBar.value === rectValue && activeBar.color === color && activeBar.label === label : undefined;
      var rectX = Math.round(xScale(group[0]));
      var rectY = Math.round((_a = yScale(group.data.label)) !== null && _a !== void 0 ? _a : 0);
      var isLastBar = subgroup.key === selectedLegends[selectedLegends.length - 1];
      var barWidth = xScale(group[1]) - xScale(group[0]) - (isLastBar ? 0 : barMarginLeft);
      var isLastLegend = subgroup.key === selectedLegends[selectedLegends.length - 1];
      var total = Object.entries(group.data).filter(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
          key = _ref4[0];
        return selectedLegends.includes(key);
      }).reduce(function (acc, _ref5) {
        var _ref6 = _slicedToArray(_ref5, 2);
          _ref6[0];
          var value = _ref6[1];
        return Number(acc) + Number(value);
      }, 0);
      var percent = Math.round(rectValue / total * 100);
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Rect$3, {
        isHovered: isActive,
        key: label + legend,
        onMouseOver: function onMouseOver(e) {
          handleOnMouseOver(e, {
            legend: subgroup.key,
            value: rectValue,
            color: color,
            label: label,
            percent: percent,
            yAxisLabel: label
          });
        },
        onMouseOut: handleOnMouseOut,
        onMouseMove: handleOnMouseMove,
        onClick: function onClick(e) {
          if (typeof rectValue !== 'number') return;
          handleOnClicked(e, {
            legend: subgroup.key,
            value: rectValue,
            color: color,
            label: label,
            percent: percent,
            yAxisLabel: label
          });
        },
        isHighlighted: matchedHighlightedItems({
          legend: legend,
          label: label
        }),
        "data-test-id": dataTestId && "".concat(dataTestId, "-").concat(label, "-").concat(legend, "-").concat(currentValue),
        color: color,
        width: Math.round(barWidth),
        x: rectX,
        y: rectY,
        size: barSize
      }), (barConfig === null || barConfig === void 0 ? void 0 : barConfig.showTotal) && isLastLegend && /*#__PURE__*/React__default.createElement(TotalBadge$1, {
        total: total,
        totalFormatter: barConfig.totalFormatter,
        x: rectX + barWidth + barMarginLeft,
        y: (rectY || 0) - barMarginTop,
        "data-test-id": dataTestId ? "".concat(dataTestId, "-total-badge") : undefined
      }));
    }));
  }));
};
var BarArea$3 = BarArea$2;

var GridArea$2 = function GridArea(_ref) {
  var tickInterval = _ref.tickInterval,
    maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    width = _ref.width,
    height = _ref.height,
    highlightMiddleLine = _ref.highlightMiddleLine,
    dataTestId = _ref['data-test-id'];
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var gridLineBackgroundColor = barChartTheme.colors.gridLineBackgroundColor;
  var xScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([0, width]);
  }, [minValue, maxValue, width]);
  var grid = tickInterval && range(0, maxValue + 1, tickInterval).map(function (value) {
    var isHighlightedLine = highlightMiddleLine && value === 0;
    return /*#__PURE__*/React__default.createElement("g", {
      key: value,
      "data-test-id": dataTestId
    }, /*#__PURE__*/React__default.createElement("line", {
      strokeDasharray: isHighlightedLine ? undefined : 7,
      x1: xScale(value),
      x2: xScale(value),
      y1: 0,
      y2: height,
      stroke: gridLineBackgroundColor,
      opacity: isHighlightedLine ? 0.6 : 0.3
    }));
  });
  return /*#__PURE__*/React__default.createElement("g", null, grid);
};
var GridArea$3 = /*#__PURE__*/memo(GridArea$2);

var LegendGroupBaseComponent$1 = LegendGroup$7;
var LegendGroup$2 = function LegendGroup(_ref) {
  var legendConfig = _ref.legendConfig,
    dataTestId = _ref['data-test-id'],
    selectedLegends = _ref.selectedLegends,
    onChange = _ref.onChange,
    legends = _ref.legends,
    colorScale = _ref.colorScale;
  if (typeof legendConfig !== 'undefined') {
    if (legendConfig.selectable) {
      return /*#__PURE__*/React__default.createElement(LegendCheckboxGroup$1, Object.assign({
        data: legends,
        getDisplayText: function getDisplayText(item) {
          return item;
        },
        getValue: function getValue(item) {
          return item;
        },
        getColor: function getColor(item) {
          return colorScale(item);
        },
        value: selectedLegends,
        onChange: onChange,
        "data-test-id": dataTestId ? "".concat(dataTestId, "-checkbox-legend") : undefined
      }, legendConfig));
    }
    return /*#__PURE__*/React__default.createElement(LegendGroupBaseComponent$1, Object.assign({
      data: legends,
      getDisplayText: function getDisplayText(item) {
        return item;
      },
      getColor: function getColor(item) {
        return colorScale(item);
      },
      "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined
    }, legendConfig));
  }
  return null;
};
var LegendGroup$3 = LegendGroup$2;

var Navigation$3 = function Navigation(_ref) {
  var onClickNavigation = _ref.onClickNavigation,
    top = _ref.top,
    left = _ref.left,
    dataTestId = _ref['data-test-id'],
    disabledButtons = _ref.disabledButtons;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper$2, {
    themeTop: top,
    themePosition: "left",
    themeLeft: left
  }, /*#__PURE__*/React__default.createElement(StyledNavigateButton$2, {
    size: "large",
    icon: "single-left-arrow",
    intent: "text",
    onClick: function onClick() {
      return onClickNavigation === null || onClickNavigation === void 0 ? void 0 : onClickNavigation('prev');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-prev") : undefined,
    disabled: disabledButtons === 'prev'
  })), /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper$2, {
    themePosition: "right",
    themeTop: top
  }, /*#__PURE__*/React__default.createElement(StyledNavigateButton$2, {
    size: "large",
    icon: "single-right-arrow",
    intent: "text",
    onClick: function onClick() {
      return onClickNavigation === null || onClickNavigation === void 0 ? void 0 : onClickNavigation('next');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-next") : undefined,
    disabled: disabledButtons === 'next'
  })));
};
var Navigation$4 = Navigation$3;

var XAxis$4 = function XAxis(_ref) {
  var maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    width = _ref.width,
    height = _ref.height,
    defaultStep = _ref.defaultStep;
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var _barChartTheme$space = barChartTheme.space,
    xAxisTransform = _barChartTheme$space.xAxisTransform,
    barMarginTop = _barChartTheme$space.barMarginTop;
  var XAxisRef = useRef(null);
  var xScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([0, width]);
  }, [maxValue, minValue, width]);
  var ticksValues = useMemo(function () {
    return maxValue && typeof defaultStep !== 'undefined' ? Array.from({
      length: maxValue + 1
    }, function (_v, i) {
      return i;
    }).filter(function (v) {
      return v % defaultStep === 0;
    }) : Array.from({
      length: (maxValue || 0) + 1
    }, function (_v, i) {
      return i;
    });
  }, [maxValue, defaultStep]);
  useLayoutEffect(function () {
    var xAxisElement = select(XAxisRef.current);
    var xAxisGenerator = axisBottom(xScale).tickSize(0).tickValues(ticksValues);
    var xAxis = xAxisElement.append('g').attr('transform', "translate(0,".concat(height + xAxisTransform - barMarginTop, ")")).attr('class', 'x-axis').call(xAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    });
    return function () {
      xAxis.remove();
    };
  }, [barMarginTop, height, ticksValues, xAxisTransform, xScale]);
  return /*#__PURE__*/React__default.createElement("g", {
    ref: XAxisRef
  });
};
var XAxis$5 = /*#__PURE__*/memo(XAxis$4);

var YAxisTitle$4 = function YAxisTitle(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    height = _ref.height,
    setSize = _ref.setSize,
    yAxisWidth = _ref.yAxisWidth;
  var YAxisTitleRef = useRef(null);
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var verticalTitleY = barChartTheme.space.verticalTitleY;
  useLayoutEffect(function () {
    var _a;
    var yAxisTitleElement = select(YAxisTitleRef.current);
    if (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) {
      var yAxisTitle = yAxisTitleElement.append('text').attr('class', 'vertical-title').attr('text-anchor', 'middle').attr('y', verticalTitleY - yAxisWidth).attr('x', -height / 2).attr('transform', 'rotate(-90)').text(yAxisConfig.title);
      var _ref2 = ((_a = yAxisTitle.node()) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {},
        yAxisTitleWidth = _ref2.width,
        yAxisTitleHeight = _ref2.height;
      setSize({
        width: yAxisTitleWidth || 0,
        height: yAxisTitleHeight || 0
      });
      return function () {
        yAxisTitle.remove();
      };
    }
  });
  return /*#__PURE__*/React__default.createElement("g", {
    ref: YAxisTitleRef
  });
};
var YAxisTitle$5 = /*#__PURE__*/memo(YAxisTitle$4);

var YAxis$4 = function YAxis(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    height = _ref.height,
    dataLength = _ref.dataLength,
    getAxisSize = _ref.getAxisSize,
    _ref$barSize = _ref.barSize,
    barSize = _ref$barSize === void 0 ? 'large' : _ref$barSize;
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var _barChartTheme$space = barChartTheme.space,
    yAxisTransformHorizontal = _barChartTheme$space.yAxisTransformHorizontal,
    barMarginTop = _barChartTheme$space.barMarginTop;
  var barHeightMapping = barChartTheme.sizes.barHeight;
  var barHeight = barHeightMapping[barSize];
  var YAxisRef = useRef(null);
  var labels = useMemo(function () {
    return (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels) || [];
  }, [yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels]);
  var yScale = useMemo(function () {
    return band().domain(labels).range([0, height]);
  }, [labels, height]);
  useLayoutEffect(function () {
    var _a;
    var yAxisElement = select(YAxisRef.current);
    var yAxisGenerator = axisLeft(yScale).tickSize(0);
    // Because the label top is align with bar. So it can not center of the bar
    // The solution: Split the bar height to 8 parts. And spend 1 for margin top, 6 for the label text and 1 for margin bottom.
    var labelMarginTop = barHeight / 8;
    var yAxis = yAxisElement.append('g').attr('transform', "translate(".concat(yAxisTransformHorizontal, ", ").concat(labelMarginTop, ")")).attr('class', 'y-axis').call(yAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    });
    var _ref2 = ((_a = yAxis.node()) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {},
      yAxisW = _ref2.width,
      yAxisH = _ref2.height;
    getAxisSize({
      width: yAxisW || 0,
      height: yAxisH || 0
    });
    return function () {
      yAxis.remove();
    };
  }, [barHeight, barMarginTop, dataLength, getAxisSize, yAxisTransformHorizontal, yScale]);
  return /*#__PURE__*/React__default.createElement("g", {
    ref: YAxisRef
  });
};
var YAxis$5 = /*#__PURE__*/memo(YAxis$4);

var DefaultTooltip = function DefaultTooltip(_ref) {
  var label = _ref.label,
    value = _ref.value,
    legendColor = _ref.legendColor,
    percent = _ref.percent;
  var hasPercent = percent !== undefined;
  var percentValue = hasPercent ? "(".concat(percent, "%)") : '';
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, !!legendColor && /*#__PURE__*/React__default.createElement(StyledLegendCircle, {
    "data-test-id": "legend-circle",
    themeColor: legendColor
  }), label && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    intent: "subdued",
    tagName: "span"
  }, label), !!value && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    tagName: "span"
  }, value), hasPercent && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    tagName: "span"
  }, percentValue));
};
var DefaultTooltip$1 = DefaultTooltip;

var BarTooltip$2 = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var show = _ref.show,
    dataTestId = _ref['data-test-id'],
    color = _ref.color,
    title = _ref.title,
    value = _ref.value,
    percent = _ref.percent,
    tooltipRenderer = _ref.tooltipRenderer,
    yAxisLabel = _ref.yAxisLabel;
  var renderTooltip = React__default.useCallback(function () {
    return tooltipRenderer ? tooltipRenderer({
      label: title,
      value: Number(value),
      legendColor: color,
      yAxisLabel: yAxisLabel
    }) : /*#__PURE__*/React__default.createElement(DefaultTooltip$1, {
      label: title,
      value: value ? Number(value) : undefined,
      legendColor: color,
      percent: percent === null || percent === void 0 ? void 0 : percent.toString()
    });
  }, [yAxisLabel, color, percent, title, tooltipRenderer, value]);
  return /*#__PURE__*/React__default.createElement(StyledTooltip, {
    ref: ref,
    style: {
      position: 'fixed',
      display: show ? 'block' : 'none'
    },
    "data-test-id": "".concat(dataTestId, "-tooltip"),
    variant: "light"
  }, /*#__PURE__*/React__default.createElement(StyledTooltipContentWrapper$2, null, renderTooltip()));
});
var BarTooltip$3 = BarTooltip$2;

var BarChart = function BarChart(_ref) {
  var data = _ref.data,
    xAxisConfig = _ref.xAxisConfig,
    yAxisConfig = _ref.yAxisConfig,
    legendConfig = _ref.legendConfig,
    _ref$navigationConfig = _ref.navigationConfig,
    navigationConfig = _ref$navigationConfig === void 0 ? {
      visible: false
    } : _ref$navigationConfig,
    barConfig = _ref.barConfig,
    dataTestId = _ref['data-test-id'],
    style = _ref.style,
    sx = _ref.sx,
    id = _ref.id,
    className = _ref.className,
    highlightedItems = _ref.highlightedItems,
    styleConfig = _ref.styleConfig,
    tooltipRenderer = _ref.tooltipRenderer;
  var _a, _b;
  var niceValues = useMemo(function () {
    var maxDataValue = totalOfMaxValuesFromEachRows(data);
    var maxDataValuesWithShownTotal = typeof (barConfig === null || barConfig === void 0 ? void 0 : barConfig.showTotal) !== 'undefined' ? maxDataValue + 1 : maxDataValue;
    return createNiceScale(0, maxDataValuesWithShownTotal);
  }, [barConfig === null || barConfig === void 0 ? void 0 : barConfig.showTotal, data]);
  var maxValue = Number((_a = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.maxValue) !== null && _a !== void 0 ? _a : niceValues.niceMax);
  var isNegativeBarChart = useMemo(function () {
    return data.some(function (d) {
      return d.data.some(function (v) {
        return v !== undefined && v < 0;
      });
    });
  }, [data]);
  var minValue = isNegativeBarChart ? -maxValue : 0;
  var defaultStep = (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.step) || niceValues.tickSpacing;
  var tickInterval = ((_b = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.tick) === null || _b === void 0 ? void 0 : _b.interval) || defaultStep;
  var defaultBarSize = (barConfig === null || barConfig === void 0 ? void 0 : barConfig.size) || 'large';
  var theme = useTheme();
  var barChartTheme = theme.__hd__.barChart;
  var _barChartTheme$space = barChartTheme.space,
    barChartMarginBottom = _barChartTheme$space.barChartMarginBottom,
    barChartMarginLeft = _barChartTheme$space.barChartMarginLeft,
    barChartMarginRight = _barChartTheme$space.barChartMarginRight,
    barChartMarginTop = _barChartTheme$space.barChartMarginTop,
    barChartMarginLeftWithNavigation = _barChartTheme$space.barChartMarginLeftWithNavigation,
    gridChartMarginTop = _barChartTheme$space.gridChartMarginTop,
    legendContainerMarginTop = _barChartTheme$space.legendContainerMarginTop,
    chartContentMarginLeft = _barChartTheme$space.chartContentMarginLeft,
    navigationButtonMarginLeft = _barChartTheme$space.navigationButtonMarginLeft;
  var chartMargin = {
    top: barChartMarginTop,
    right: barChartMarginRight,
    bottom: barChartMarginBottom,
    left: (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) ? barChartMarginLeft : barChartMarginLeftWithNavigation
  };
  var containerRef = useRef(null);
  var tooltipRef = useRef(null);
  var barsContainerRef = useRef(null);
  var legendContainerRef = useRef(null);
  var axesRef = useRef(null);
  var _useState = useState({
      height: 0,
      width: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    containerSize = _useState2[0],
    setContainerSize = _useState2[1];
  var _useState3 = useState({
      height: 0,
      width: 0
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    legendContainerSize = _useState4[0],
    setLegendContainerSize = _useState4[1];
  var _useState5 = useState({
      height: 0,
      width: 0
    }),
    _useState6 = _slicedToArray(_useState5, 2),
    yAxisSize = _useState6[0],
    setYAxisSize = _useState6[1];
  var _useState7 = useState({
      height: 0,
      width: 0
    }),
    _useState8 = _slicedToArray(_useState7, 2),
    yAxisTitleSize = _useState8[0],
    setYAxisTitleSize = _useState8[1];
  var _useState9 = useState(undefined),
    _useState10 = _slicedToArray(_useState9, 2),
    currentSelectedBar = _useState10[0],
    setCurrentSelectedBar = _useState10[1];
  var _useState11 = useState([]),
    _useState12 = _slicedToArray(_useState11, 2),
    internalSelectedLegends = _useState12[0],
    setInternalSelectedLegends = _useState12[1];
  var legends = useMemo(function () {
    return data.map(function (item) {
      return item.label;
    });
  }, [data]);
  var defaultLegends = useMemo(function () {
    return (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) ? (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.value) || internalSelectedLegends : internalSelectedLegends;
  }, [internalSelectedLegends, legendConfig]);
  var selectedLegends = useMemo(function () {
    return legends.filter(function (l) {
      return defaultLegends.includes(l);
    });
  }, [legends, defaultLegends]);
  var svgSizes = useMemo(function () {
    return {
      width: containerSize.width,
      height: containerSize.height - legendContainerSize.height - legendContainerMarginTop
    };
  }, [containerSize.height, containerSize.width, legendContainerMarginTop, legendContainerSize.height]);
  var yAxisWidth = useMemo(function () {
    return Math.floor(yAxisSize.width);
  }, [yAxisSize.width]);
  var yAxisTitleWidth = useMemo(function () {
    return Math.floor(yAxisTitleSize.width);
  }, [yAxisTitleSize.width]);
  var boundsHeight = svgSizes.height - chartMargin.top - chartMargin.bottom;
  var boundsWidth = svgSizes.width - chartMargin.right - chartMargin.left - yAxisWidth - yAxisTitleWidth;
  var handleOnResize = useCallback(function () {
    if (containerRef.current) {
      var _containerRef$current = containerRef.current.getBoundingClientRect(),
        height = _containerRef$current.height,
        width = _containerRef$current.width;
      setContainerSize({
        height: height,
        width: width
      });
    }
    if (legendContainerRef.current) {
      var _legendContainerRef$c = legendContainerRef.current.getBoundingClientRect(),
        _height = _legendContainerRef$c.height,
        _width = _legendContainerRef$c.width;
      setLegendContainerSize({
        height: _height,
        width: _width
      });
    }
  }, []);
  useResizeObserver(handleOnResize, getParentElement(containerRef.current));
  var customColors = useMemo(function () {
    return (styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series) !== undefined ? filterElementHasNoColor(styleConfig.series) : undefined;
  }, [styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series]);
  // Color Scale
  var colorScale = useColorScale(legends, customColors);
  var prevLegends = usePrevious(legends);
  var legendsDiff = useMemo(function () {
    return difference(legends, prevLegends || []);
  }, [legends, prevLegends]);
  useEffect(function () {
    setInternalSelectedLegends(function (prev) {
      return Array.from(new Set([].concat(_toConsumableArray(prev), _toConsumableArray(legendsDiff))));
    });
  }, [legendsDiff]);
  var onMouseOverBar = useCallback(function (_e, barData) {
    var color = barData.color,
      legend = barData.legend,
      value = barData.value,
      percent = barData.percent,
      yAxisLabel = barData.yAxisLabel;
    setCurrentSelectedBar({
      legend: legend,
      value: value,
      legendColor: color,
      percent: percent,
      yAxisLabel: yAxisLabel
    });
  }, []);
  var onMouseOutBar = useCallback(function () {
    setCurrentSelectedBar(undefined);
  }, []);
  var onMouseMoveBar = useCallback(function (e) {
    var tooltipElement = select(tooltipRef.current);
    var clientX = e.clientX,
      clientY = e.clientY;
    tooltipElement.style('top', "".concat(Math.round(clientY - 12), "px")).style('left', "".concat(Math.round(clientX), "px"));
  }, []);
  var barAreaData = useMemo(function () {
    return data.map(function (d) {
      return Object.assign(Object.assign({}, d), {
        color: colorScale(d.label)
      });
    });
  }, [colorScale, data]);
  return /*#__PURE__*/React__default.createElement(StyledBarChartContainer$1, {
    ref: containerRef,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), useCss(Object.assign({}, sx))),
    id: id,
    className: className
  }, navigationConfig.visible && /*#__PURE__*/React__default.createElement(Navigation$4, {
    top: boundsHeight / 2,
    left: (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) ? chartContentMarginLeft - navigationButtonMarginLeft : 0,
    onClickNavigation: navigationConfig.onNavigate,
    "data-test-id": dataTestId,
    disabledButtons: navigationConfig.disabledButtons
  }), /*#__PURE__*/React__default.createElement(BarTooltip$3, {
    show: !!currentSelectedBar,
    "data-test-id": dataTestId,
    ref: tooltipRef,
    color: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.legendColor,
    title: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.legend,
    value: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.value,
    percent: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.percent,
    tooltipRenderer: tooltipRenderer,
    yAxisLabel: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.yAxisLabel
  }), /*#__PURE__*/React__default.createElement("svg", {
    width: svgSizes.width,
    height: svgSizes.height
  }, /*#__PURE__*/React__default.createElement("g", {
    ref: barsContainerRef,
    transform: "translate(".concat(yAxisWidth + chartMargin.left, ",").concat(chartMargin.top + gridChartMarginTop, ")")
  }, /*#__PURE__*/React__default.createElement(YAxisTitle$5, {
    height: boundsHeight,
    setSize: setYAxisTitleSize,
    yAxisWidth: yAxisWidth,
    yAxisConfig: yAxisConfig
  })), /*#__PURE__*/React__default.createElement("g", {
    ref: axesRef,
    transform: "translate(".concat(yAxisWidth + yAxisTitleWidth + chartContentMarginLeft, ",").concat(chartMargin.top, ")")
  }, /*#__PURE__*/React__default.createElement(GridArea$3, {
    height: boundsHeight,
    width: boundsWidth,
    minValue: minValue,
    maxValue: maxValue,
    tickInterval: tickInterval,
    highlightMiddleLine: isNegativeBarChart,
    "data-test-id": dataTestId ? "".concat(dataTestId, "-grid-line") : undefined
  }), /*#__PURE__*/React__default.createElement(BarArea$3, {
    height: boundsHeight,
    width: boundsWidth,
    maxValue: maxValue,
    minValue: minValue,
    "data-test-id": dataTestId,
    yAxisConfig: yAxisConfig,
    barConfig: barConfig,
    onMouseOver: onMouseOverBar,
    onMouseOut: onMouseOutBar,
    onMouseMove: onMouseMoveBar,
    highlightedItems: highlightedItems,
    selectedLegends: selectedLegends,
    data: barAreaData,
    barSize: defaultBarSize
  }), /*#__PURE__*/React__default.createElement(XAxis$5, {
    height: boundsHeight,
    width: boundsWidth,
    maxValue: maxValue,
    minValue: minValue,
    defaultStep: defaultStep
  }), /*#__PURE__*/React__default.createElement(YAxis$5, {
    dataLength: data.length,
    height: boundsHeight,
    getAxisSize: setYAxisSize,
    yAxisConfig: yAxisConfig,
    barSize: defaultBarSize
  }))), /*#__PURE__*/React__default.createElement(StyledLegendContainer$2, {
    ref: legendContainerRef
  }, !!(xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.title) && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "regular",
    intent: "subdued"
  }, xAxisConfig.title), /*#__PURE__*/React__default.createElement(LegendGroup$3, {
    legends: legends,
    onChange: setInternalSelectedLegends,
    selectedLegends: selectedLegends,
    "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined,
    legendConfig: legendConfig,
    colorScale: colorScale
  })));
};
var BarChart$1 = BarChart;

var StyledBarChartContainer = styled.div.withConfig({
  displayName: "StyledHorizontalBarChart__StyledBarChartContainer",
  componentId: "sc-4a9o5k-0"
})(["&&{position:relative;height:100%;width:100%;}&& svg{position:relative;z-index:2;}&& .x-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}&& .y-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}&& .vertical-title{font-size:", ";font-weight:", ";fill:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.horizontalBarChart.fontWeights.xAxisTick;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.horizontalBarChart.fontSizes.xAxisTick;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.horizontalBarChart.lineHeights.xAxisTick;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.horizontalBarChart.colors.xAxisTickColor;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.horizontalBarChart.fontWeights.yAxisTick;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.horizontalBarChart.fontSizes.yAxisTick;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.horizontalBarChart.lineHeights.yAxisTick;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.horizontalBarChart.colors.yAxisTickColor;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.horizontalBarChart.fontSizes.verticalTitle;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.horizontalBarChart.fontWeights.verticalTitle;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.horizontalBarChart.colors.verticalTitleFillColor;
});
var StyledLegendContainer$1 = styled.div.withConfig({
  displayName: "StyledHorizontalBarChart__StyledLegendContainer",
  componentId: "sc-4a9o5k-1"
})(["&&{display:flex;flex-direction:column;align-items:center;width:100%;}&& > *:not(:last-child){margin-bottom:", ";}&& ", "{background:", ";box-shadow:", ";padding:", ";}&& ", "::before{background:", ";}"], function (_ref12) {
  var theme = _ref12.theme;
  return "".concat(theme.__hd__.horizontalBarChart.space.legendContainerChildMarginBottom, "px");
}, TooltipWrapper, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.horizontalBarChart.colors.tooltipBackgroundColor;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.horizontalBarChart.boxShadows.tooltip;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.horizontalBarChart.space.moreTooltipPadding;
}, Arrow, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.horizontalBarChart.colors.tooltipBackgroundColor;
});
var StyledTooltipContentWrapper$1 = styled.div.withConfig({
  displayName: "StyledHorizontalBarChart__StyledTooltipContentWrapper",
  componentId: "sc-4a9o5k-2"
})(["&&{display:flex;align-items:center;justify-content:center;}&& > *:not(:last-child){margin-right:", ";}"], function (_ref17) {
  var theme = _ref17.theme;
  return "".concat(theme.__hd__.horizontalBarChart.space.tooltipChildMargin, "px");
});
var StyledNavigateButton$1 = styled(IconButton$1).withConfig({
  displayName: "StyledHorizontalBarChart__StyledNavigateButton",
  componentId: "sc-4a9o5k-3"
})(["&&{width:", ";height:", ";}"], function (_ref18) {
  var theme = _ref18.theme;
  return "".concat(theme.__hd__.horizontalBarChart.sizes.navigationButton, "px");
}, function (_ref19) {
  var theme = _ref19.theme;
  return "".concat(theme.__hd__.horizontalBarChart.sizes.navigationButton, "px");
});
var StyledNavigateButtonWrapper$1 = styled(Box$1).withConfig({
  displayName: "StyledHorizontalBarChart__StyledNavigateButtonWrapper",
  componentId: "sc-4a9o5k-4"
})(["&&{position:absolute;display:grid;place-items:center;top:", ";", ";z-index:3;}"], function (_ref20) {
  var themeTop = _ref20.themeTop;
  return typeof themeTop === 'number' ? "".concat(themeTop, "px") : themeTop;
}, function (_ref21) {
  var themePosition = _ref21.themePosition,
    theme = _ref21.theme,
    themeIsHasTitle = _ref21.themeIsHasTitle,
    themeLeft = _ref21.themeLeft;
  var positionMapping = {
    left: "left: ".concat(themeIsHasTitle ? "".concat(theme.__hd__.horizontalBarChart.space.navigateLeftPositionHasTitle + (themeLeft || 0), "px") : "".concat(theme.__hd__.horizontalBarChart.space.navigateLeftPosition + (themeLeft || 0), "px")),
    right: "right: -".concat(theme.__hd__.horizontalBarChart.space.navigateRightPosition, "px")
  };
  return positionMapping[themePosition];
});

var YAxis$2 = function YAxis(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    height = _ref.height,
    dataLength = _ref.dataLength,
    _ref$barSize = _ref.barSize,
    barSize = _ref$barSize === void 0 ? 'large' : _ref$barSize,
    getAxisSize = _ref.getAxisSize;
  var theme = useTheme();
  var horizontalBarChartTheme = theme.__hd__.horizontalBarChart;
  var _horizontalBarChartTh = horizontalBarChartTheme.space,
    yAxisTransformHorizontal = _horizontalBarChartTh.yAxisTransformHorizontal,
    horizontalBarMarginTop = _horizontalBarChartTh.horizontalBarMarginTop;
  var heightMapping = horizontalBarChartTheme.sizes.barHeight;
  var barHeight = heightMapping[barSize];
  var YAxisRef = useRef(null);
  var labels = useMemo(function () {
    return (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels) || [];
  }, [yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels]);
  var yScale = useMemo(function () {
    return band().domain(labels).range([0, height]);
  }, [labels, height]);
  useLayoutEffect(function () {
    var _a;
    var yAxisElement = select(YAxisRef.current);
    var yAxisGenerator = axisLeft(yScale).tickSize(0);
    // Because the label top is align with bar. So it can not center of the bar
    // The solution: number of bars multiplied with bar height and get a half
    var barMarginTop = dataLength * barHeight / 2;
    var yAxis = yAxisElement.append('g').attr('transform', "translate(".concat(yAxisTransformHorizontal, ", ").concat(barMarginTop, ")")).attr('class', 'y-axis').call(yAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    });
    var _ref2 = ((_a = yAxis.node()) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {},
      yAxisW = _ref2.width,
      yAxisH = _ref2.height;
    getAxisSize({
      width: yAxisW || 0,
      height: yAxisH || 0
    });
    return function () {
      yAxis.remove();
    };
  }, [barHeight, horizontalBarMarginTop, dataLength, getAxisSize, yAxisTransformHorizontal, yScale]);
  return /*#__PURE__*/React__default.createElement("g", {
    ref: YAxisRef
  });
};
var YAxis$3 = /*#__PURE__*/memo(YAxis$2);

var XAxis$2 = function XAxis(_ref) {
  var maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    width = _ref.width,
    height = _ref.height,
    xAxisConfig = _ref.xAxisConfig;
  var theme = useTheme();
  var horizontalBarChartTheme = theme.__hd__.horizontalBarChart;
  var _horizontalBarChartTh = horizontalBarChartTheme.space,
    xAxisTransform = _horizontalBarChartTh.xAxisTransform,
    horizontalBarMarginTop = _horizontalBarChartTh.horizontalBarMarginTop;
  var XAxisRef = useRef(null);
  var xScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([0, width]);
  }, [maxValue, minValue, width]);
  var stepValue = useMemo(function () {
    return 2 * maxValue / ((xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.step) || 0 - 1);
  }, [maxValue, xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.step]);
  var rangeValue = useMemo(function () {
    return range(minValue, maxValue + stepValue, stepValue);
  }, [maxValue, minValue, stepValue]);
  var tickValues = useMemo(function () {
    return [].concat(_toConsumableArray(_toConsumableArray(rangeValue).slice(0, Math.floor(rangeValue.length / 2))), [0], _toConsumableArray(_toConsumableArray(rangeValue).slice(Math.floor(rangeValue.length / 2), rangeValue.length)));
  }, [rangeValue]);
  useLayoutEffect(function () {
    var xAxisElement = select(XAxisRef.current);
    var xAxisGenerator = axisBottom(xScale).tickSize(0).tickValues(tickValues);
    var xAxis = xAxisElement.append('g').attr('transform', "translate(0,".concat(height + xAxisTransform - horizontalBarMarginTop, ")")).attr('class', 'x-axis').call(xAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    });
    return function () {
      xAxis.remove();
    };
  }, [height, horizontalBarMarginTop, tickValues, xAxisTransform, xScale]);
  return /*#__PURE__*/React__default.createElement("g", {
    ref: XAxisRef
  });
};
var XAxis$3 = /*#__PURE__*/memo(XAxis$2);

var YAxisTitle$2 = function YAxisTitle(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    height = _ref.height,
    setSize = _ref.setSize,
    yAxisWidth = _ref.yAxisWidth;
  var YAxisTitleRef = useRef(null);
  var theme = useTheme();
  var horizontalBarChartTheme = theme.__hd__.horizontalBarChart;
  var verticalTitleY = horizontalBarChartTheme.space.verticalTitleY;
  useLayoutEffect(function () {
    var _a;
    var yAxisTitleElement = select(YAxisTitleRef.current);
    if (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) {
      var yAxisTitle = yAxisTitleElement.append('text').attr('class', 'vertical-title').attr('text-anchor', 'middle').attr('y', verticalTitleY - yAxisWidth).attr('x', -height / 2).attr('transform', 'rotate(-90)').text(yAxisConfig.title);
      var _ref2 = ((_a = yAxisTitle.node()) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {},
        yAxisTitleWidth = _ref2.width,
        yAxisTitleHeight = _ref2.height;
      setSize({
        width: yAxisTitleWidth || 0,
        height: yAxisTitleHeight || 0
      });
      return function () {
        yAxisTitle.remove();
      };
    }
  });
  return /*#__PURE__*/React__default.createElement("g", {
    ref: YAxisTitleRef
  });
};
var YAxisTitle$3 = /*#__PURE__*/memo(YAxisTitle$2);

var LegendGroupBaseComponent = LegendGroup$7;
var LegendGroup = function LegendGroup(_ref) {
  var legendConfig = _ref.legendConfig,
    dataTestId = _ref['data-test-id'],
    selectedLegends = _ref.selectedLegends,
    onChange = _ref.onChange,
    legends = _ref.legends,
    colorScale = _ref.colorScale;
  if (typeof legendConfig !== 'undefined') {
    if (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) {
      return /*#__PURE__*/React__default.createElement(LegendCheckboxGroup$1, Object.assign({
        data: legends,
        getDisplayText: function getDisplayText(item) {
          return item;
        },
        getValue: function getValue(item) {
          return item;
        },
        getColor: function getColor(item) {
          return colorScale(item);
        },
        value: selectedLegends,
        onChange: onChange,
        "data-test-id": dataTestId ? "".concat(dataTestId, "-checkbox-legend") : undefined
      }, legendConfig));
    }
    return /*#__PURE__*/React__default.createElement(LegendGroupBaseComponent, Object.assign({
      data: legends,
      getDisplayText: function getDisplayText(item) {
        return item;
      },
      getColor: function getColor(item) {
        return colorScale(item);
      },
      "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined
    }, legendConfig));
  }
  return null;
};
var LegendGroup$1 = LegendGroup;

var Rect = function Rect(_ref) {
  var width = _ref.width,
    x = _ref.x,
    y = _ref.y,
    color = _ref.color,
    onMouseOver = _ref.onMouseOver,
    onMouseMove = _ref.onMouseMove,
    onMouseOut = _ref.onMouseOut,
    onClick = _ref.onClick,
    dataTestId = _ref['data-test-id'],
    className = _ref.className,
    radius = _ref.radius,
    active = _ref.active,
    isHighlighted = _ref.isHighlighted,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'large' : _ref$size;
  var HOVER_EFFECT_DURATION = 150;
  var theme = useTheme();
  var rectRef = useRef(null);
  var horizontalBarChartTheme = theme.__hd__.horizontalBarChart;
  var barDropShadow = horizontalBarChartTheme.boxShadows.barDropShadow;
  var barHeightMapping = horizontalBarChartTheme.sizes.barHeight;
  var barHeight = barHeightMapping[size];
  var barBorderRadiusMapping = horizontalBarChartTheme.radii.bar;
  var barHoverTransformMapping = horizontalBarChartTheme.space.barHoverTransform;
  var barHoverTransform = barHoverTransformMapping[size];
  useLayoutEffect(function () {
    var rectElement = select(rectRef.current);
    if (active && typeof isHighlighted === 'undefined') {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', y || 0).attr('height', barHeight).attr('rx', radius || 0).attr('ry', radius || 0);
      return;
    }
    if (active === false && typeof isHighlighted === 'undefined') {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', (y || 0) + barHoverTransform).attr('height', barHeightMapping.inactive).attr('rx', barBorderRadiusMapping.inactive).attr('ry', barBorderRadiusMapping.inactive);
      return;
    }
    if (active === undefined && typeof isHighlighted === 'undefined') {
      rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', y || 0).attr('height', barHeight).attr('rx', radius || 0).attr('ry', radius || 0);
      return;
    }
    if (!isHighlighted) {
      if (active) {
        rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', y || 0).attr('height', barHeight).attr('rx', radius || 0).attr('ry', radius || 0);
        return;
      }
      if (active === false) {
        rectElement.transition().duration(HOVER_EFFECT_DURATION).attr('y', (y || 0) + barHoverTransform).attr('height', barHeightMapping.inactive).attr('rx', barBorderRadiusMapping.inactive).attr('ry', barBorderRadiusMapping.inactive);
        return;
      }
      rectElement.attr('y', (y || 0) + barHoverTransform).attr('height', barHeightMapping.inactive).attr('rx', barBorderRadiusMapping.inactive).attr('ry', barBorderRadiusMapping.inactive);
    }
  }, [active, isHighlighted, barBorderRadiusMapping.inactive, barHeight, barHeightMapping.inactive, barHoverTransform, radius, y]);
  return /*#__PURE__*/React__default.createElement("rect", {
    ref: rectRef,
    onMouseOver: onMouseOver,
    onMouseMove: onMouseMove,
    onMouseOut: onMouseOut,
    onClick: onClick,
    className: className,
    "data-test-id": dataTestId,
    y: y,
    height: barHeight,
    x: x,
    width: width < 0 ? 0 : width,
    fill: color,
    filter: active || isHighlighted ? "drop-shadow(".concat(barDropShadow, ")") : undefined,
    cursor: "pointer",
    rx: radius,
    ry: radius
  });
};
var Rect$1 = /*#__PURE__*/memo(Rect);

var BarArea = function BarArea(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    height = _ref.height,
    width = _ref.width,
    maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    dataTestId = _ref['data-test-id'],
    highlightedItems = _ref.highlightedItems,
    barConfig = _ref.barConfig,
    onMouseOver = _ref.onMouseOver,
    selectedLegends = _ref.selectedLegends,
    data = _ref.data,
    onMouseOut = _ref.onMouseOut,
    onMouseMove = _ref.onMouseMove,
    isNegative = _ref.isNegative,
    _ref$barSize = _ref.barSize,
    barSize = _ref$barSize === void 0 ? 'large' : _ref$barSize;
  var theme = useTheme();
  var horizontalBarChartTheme = theme.__hd__.horizontalBarChart;
  var barHeightMapping = horizontalBarChartTheme.sizes.barHeight;
  var barHeight = barHeightMapping[barSize];
  var barBorderRadiusMapping = horizontalBarChartTheme.radii.bar;
  var barBorderRadius = barBorderRadiusMapping[barSize];
  var _horizontalBarChartTh = horizontalBarChartTheme.space,
    horizontalBarMarginLeft = _horizontalBarChartTh.horizontalBarMarginLeft,
    horizontalBarMarginTop = _horizontalBarChartTh.horizontalBarMarginTop;
  var labels = useMemo(function () {
    return (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels) || [];
  }, [yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.labels]);
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    activeBar = _useState2[0],
    setActiveBar = _useState2[1];
  var stackSeries = useMemo(function () {
    return stack().keys(selectedLegends).order(none).offset(none$1);
  }, [selectedLegends]);
  var series = useMemo(function () {
    return stackSeries(labels.map(function (label, index) {
      var stackedSeries = data.reduce(function (prev, next) {
        return Object.assign(Object.assign({}, prev), _defineProperty$1({}, next.label, next.data[index]));
      }, {});
      return Object.assign(Object.assign({}, stackedSeries), {
        label: label
      });
    }));
  }, [data, labels, stackSeries]);
  var yScale = useMemo(function () {
    return band().domain(labels).range([0, height]);
  }, [labels, height]);
  var xScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([0, width]);
  }, [minValue, maxValue, width]);
  var matchedHighlightedItems = useCallback(function (_ref2) {
    var legend = _ref2.legend,
      label = _ref2.label;
    if (typeof highlightedItems === 'undefined') return undefined;
    var isMatchedSegmentNotEmpty = typeof highlightedItems !== 'undefined' ? highlightedItems.length > 0 : false;
    if (isMatchedSegmentNotEmpty) {
      return highlightedItems && highlightedItems.filter(function (item) {
        return item.label === label && item.legend === legend;
      }).length > 0;
    }
    return false;
  }, [highlightedItems]);
  var handleOnMouseOver = useCallback(function (e, barData) {
    var color = barData.color,
      legend = barData.legend,
      value = barData.value,
      label = barData.label;
    onMouseOver(e, {
      legend: legend,
      value: value,
      color: color,
      label: label
    });
    setActiveBar(barData);
  }, [onMouseOver]);
  var handleOnMouseOut = useCallback(function (e) {
    onMouseOut(e);
    setActiveBar(undefined);
  }, [onMouseOut]);
  var handleOnMouseMove = useCallback(function (e) {
    onMouseMove(e);
  }, [onMouseMove]);
  var handleOnClicked = useCallback(function (e, barData) {
    var _a;
    var legend = barData.legend,
      label = barData.label,
      value = barData.value;
    (_a = barConfig === null || barConfig === void 0 ? void 0 : barConfig.onClick) === null || _a === void 0 ? void 0 : _a.call(barConfig, e, {
      legend: legend,
      label: label,
      data: value
    });
  }, [barConfig]);
  return /*#__PURE__*/React__default.createElement("g", null, series.map(function (subgroup, index) {
    return /*#__PURE__*/React__default.createElement("g", {
      key: subgroup.key,
      transform: "translate(0, ".concat(Math.floor(yScale.bandwidth() / 2 - horizontalBarMarginLeft), ")")
    }, subgroup.map(function (group) {
      var prevBarValue = group[0];
      var currentValue = group[1];
      var defaultPositionX = xScale(0);
      var barStartPositionX = xScale(prevBarValue);
      var barEndPositionX = xScale(currentValue);
      var barStartPositionY = yScale(group.data.label.toString());
      var recWidth = barEndPositionX - barStartPositionX;
      var rectX = recWidth < 0 ? Math.abs(defaultPositionX) - Math.abs(recWidth) : Math.abs(defaultPositionX);
      var x = isNegative ? rectX : defaultPositionX;
      var rectY = (barStartPositionY || 0) + index * (barHeight + horizontalBarMarginTop);
      var radius = clamp(width / 2.5, barBorderRadiusMapping.inactive, barBorderRadius);
      var legend = subgroup.key;
      var color = data.filter(function (d) {
        return d.label === legend;
      })[0].color;
      var rectValue = group.data[subgroup.key];
      var label = group.data.label;
      var isActive = typeof activeBar !== 'undefined' ? (activeBar === null || activeBar === void 0 ? void 0 : activeBar.legend) === legend && activeBar.value === rectValue && activeBar.color === color && activeBar.label === label.toString() : undefined;
      return !(Number.isNaN(prevBarValue) || Number.isNaN(currentValue)) ? /*#__PURE__*/React__default.createElement(Rect$1, {
        active: isActive,
        key: label + legend,
        onMouseOver: function onMouseOver(e) {
          handleOnMouseOver(e, {
            legend: subgroup.key,
            value: rectValue,
            color: color,
            label: label.toString()
          });
        },
        onMouseOut: handleOnMouseOut,
        onMouseMove: handleOnMouseMove,
        onClick: function onClick(e) {
          if (typeof rectValue !== 'number') return;
          handleOnClicked(e, {
            legend: subgroup.key,
            value: rectValue,
            color: color,
            label: label.toString()
          });
        },
        isHighlighted: matchedHighlightedItems({
          legend: legend,
          label: label.toString()
        }),
        className: "bars",
        "data-test-id": dataTestId && dataTestId + label + legend + currentValue,
        color: color,
        width: Math.abs(recWidth),
        x: x,
        y: rectY,
        radius: radius,
        size: barSize
      }) : null;
    }));
  }));
};
var BarArea$1 = BarArea;

var GridArea = function GridArea(_ref) {
  var xAxisConfig = _ref.xAxisConfig,
    maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    width = _ref.width,
    height = _ref.height,
    highlightMiddleLine = _ref.highlightMiddleLine;
  var _a;
  var theme = useTheme();
  var horizontalBarChartTheme = theme.__hd__.horizontalBarChart;
  var gridLineBackgroundColor = horizontalBarChartTheme.colors.gridLineBackgroundColor;
  var gridAreaRef = useRef(null);
  var xScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([0, width]);
  }, [minValue, maxValue, width]);
  var grid = ((_a = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.tick) === null || _a === void 0 ? void 0 : _a.interval) && range(-(maxValue || 0), (maxValue || 0) + 1, xAxisConfig.tick.interval).map(function (value) {
    return /*#__PURE__*/React__default.createElement("g", {
      key: value,
      className: "grid-line"
    }, /*#__PURE__*/React__default.createElement("line", {
      strokeDasharray: highlightMiddleLine && value === 0 ? undefined : 7,
      x1: xScale(value),
      x2: xScale(value),
      y1: 0,
      y2: height,
      stroke: gridLineBackgroundColor,
      opacity: highlightMiddleLine && value === 0 ? 0.6 : 0.3
    }));
  });
  return /*#__PURE__*/React__default.createElement("g", {
    ref: gridAreaRef
  }, grid);
};
var GridArea$1 = /*#__PURE__*/memo(GridArea);

var Navigation$1 = function Navigation(_ref) {
  var yAxisConfig = _ref.yAxisConfig,
    navigationConfig = _ref.navigationConfig,
    height = _ref.height,
    yAxisTitleWidth = _ref.yAxisTitleWidth,
    dataTestId = _ref['data-test-id'],
    disabledButtons = _ref.disabledButtons;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper$1, {
    themeIsHasTitle: !!(yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title),
    themeTop: height / 2,
    themePosition: "left",
    themeLeft: yAxisTitleWidth
  }, /*#__PURE__*/React__default.createElement(StyledNavigateButton$1, {
    size: "large",
    icon: "single-left-arrow",
    intent: "text",
    onClick: function onClick() {
      var _a;
      return (_a = navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.onNavigate) === null || _a === void 0 ? void 0 : _a.call(navigationConfig, 'prev');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-prev") : undefined,
    disabled: disabledButtons === 'prev'
  })), /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper$1, {
    themeIsHasTitle: !!(yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title),
    themeTop: height / 2,
    themePosition: "right"
  }, /*#__PURE__*/React__default.createElement(StyledNavigateButton$1, {
    size: "large",
    icon: "single-right-arrow",
    intent: "text",
    onClick: function onClick() {
      var _a;
      return (_a = navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.onNavigate) === null || _a === void 0 ? void 0 : _a.call(navigationConfig, 'next');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-next") : undefined,
    disabled: disabledButtons === 'next'
  })));
};
var Navigation$2 = Navigation$1;

var BarTooltip = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var show = _ref.show,
    dataTestId = _ref['data-test-id'],
    color = _ref.color,
    title = _ref.title,
    value = _ref.value;
  return /*#__PURE__*/React__default.createElement(StyledTooltip, {
    ref: ref,
    style: {
      position: 'fixed',
      display: show ? 'block' : 'none'
    },
    "data-test-id": "".concat(dataTestId, "-tooltip"),
    variant: "light"
  }, show && /*#__PURE__*/React__default.createElement(StyledTooltipContentWrapper$1, null, color && /*#__PURE__*/React__default.createElement(StyledLegendCircle, {
    themeColor: color
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    intent: "subdued",
    tagName: "span"
  }, title), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    tagName: "span"
  }, value)));
});
var BarTooltip$1 = BarTooltip;

var NegativeBarChart = function NegativeBarChart(_ref) {
  var data = _ref.data,
    xAxisConfig = _ref.xAxisConfig,
    yAxisConfig = _ref.yAxisConfig,
    legendConfig = _ref.legendConfig,
    _ref$navigationConfig = _ref.navigationConfig,
    navigationConfig = _ref$navigationConfig === void 0 ? {
      visible: false
    } : _ref$navigationConfig,
    barConfig = _ref.barConfig,
    dataTestId = _ref['data-test-id'],
    style = _ref.style,
    sx = _ref.sx,
    id = _ref.id,
    className = _ref.className,
    highlightedItems = _ref.highlightedItems,
    styleConfig = _ref.styleConfig;
  var _a;
  var defaultMaxValue = useMemo(function () {
    return (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.maxValue) || 0;
  }, [xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.maxValue]);
  var isNegativeBarChart = useMemo(function () {
    return data.some(function (d) {
      return d.data.some(function (v) {
        return v !== undefined && v < 0;
      });
    });
  }, [data]);
  var minValue = useMemo(function () {
    return isNegativeBarChart ? -defaultMaxValue : 0;
  }, [defaultMaxValue, isNegativeBarChart]);
  var defaultSize = (barConfig === null || barConfig === void 0 ? void 0 : barConfig.size) || 'large';
  var theme = useTheme();
  var horizontalBarChartTheme = theme.__hd__.horizontalBarChart;
  var _horizontalBarChartTh = horizontalBarChartTheme.space,
    horizontalBarChartMarginBottom = _horizontalBarChartTh.horizontalBarChartMarginBottom,
    horizontalBarChartMarginLeft = _horizontalBarChartTh.horizontalBarChartMarginLeft,
    horizontalBarChartMarginRight = _horizontalBarChartTh.horizontalBarChartMarginRight,
    horizontalBarChartMarginTop = _horizontalBarChartTh.horizontalBarChartMarginTop,
    horizontalBarChartMarginLeftWithNavigation = _horizontalBarChartTh.horizontalBarChartMarginLeftWithNavigation,
    gridChartMarginTop = _horizontalBarChartTh.gridChartMarginTop;
  var chartMargin = {
    top: horizontalBarChartMarginTop,
    right: horizontalBarChartMarginRight,
    bottom: horizontalBarChartMarginBottom,
    left: (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) ? horizontalBarChartMarginLeft : horizontalBarChartMarginLeftWithNavigation
  };
  var containerRef = useRef(null);
  var tooltipRef = useRef(null);
  var legendContainerRef = useRef(null);
  var _useState = useState({
      height: 0,
      width: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    containerSize = _useState2[0],
    setContainerSize = _useState2[1];
  var _useState3 = useState({
      height: 0,
      width: 0
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    legendContainerSize = _useState4[0],
    setLegendContainerSize = _useState4[1];
  var _useState5 = useState({
      height: 0,
      width: 0
    }),
    _useState6 = _slicedToArray(_useState5, 2),
    yAxisSize = _useState6[0],
    setYAxisSize = _useState6[1];
  var _useState7 = useState({
      height: 0,
      width: 0
    }),
    _useState8 = _slicedToArray(_useState7, 2),
    yAxisTitleSize = _useState8[0],
    setYAxisTitleSize = _useState8[1];
  var _useState9 = useState(undefined),
    _useState10 = _slicedToArray(_useState9, 2),
    currentSelectedBar = _useState10[0],
    setCurrentSelectedBar = _useState10[1];
  var legends = useMemo(function () {
    return data.map(function (item) {
      return item.label;
    });
  }, [data]);
  var _useState11 = useState([]),
    _useState12 = _slicedToArray(_useState11, 2),
    internalSelectedLegends = _useState12[0],
    setInternalSelectedLegends = _useState12[1];
  var defaultLegends = useMemo(function () {
    return (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) ? (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.value) || internalSelectedLegends : internalSelectedLegends;
  }, [internalSelectedLegends, legendConfig]);
  var selectedLegends = useMemo(function () {
    return legends.filter(function (l) {
      return defaultLegends.includes(l);
    });
  }, [legends, defaultLegends]);
  var svgSizes = useMemo(function () {
    return {
      width: containerSize.width,
      height: containerSize.height - legendContainerSize.height
    };
  }, [containerSize.height, containerSize.width, legendContainerSize.height]);
  var yAxisWidth = useMemo(function () {
    return Math.floor(yAxisSize.width);
  }, [yAxisSize.width]);
  var yAxisTitleWidth = useMemo(function () {
    return Math.floor(yAxisTitleSize.width);
  }, [yAxisTitleSize.width]);
  var boundsHeight = svgSizes.height - chartMargin.top - chartMargin.bottom;
  var boundsWidth = svgSizes.width - chartMargin.right - chartMargin.left - yAxisWidth - yAxisTitleWidth;
  var onResize = useCallback(function () {
    if (containerRef.current) {
      var _containerRef$current = containerRef.current.getBoundingClientRect(),
        height = _containerRef$current.height,
        width = _containerRef$current.width;
      setContainerSize({
        height: height,
        width: width
      });
    }
    if (legendContainerRef.current) {
      var _legendContainerRef$c = legendContainerRef.current.getBoundingClientRect(),
        _height = _legendContainerRef$c.height,
        _width = _legendContainerRef$c.width;
      setLegendContainerSize({
        height: _height,
        width: _width
      });
    }
  }, []);
  useResizeObserver(onResize, getParentElement(containerRef.current));
  var prevLegends = usePrevious(legends);
  var legendsDiff = useMemo(function () {
    return difference(legends, prevLegends || []);
  }, [legends, prevLegends]);
  useEffect(function () {
    setInternalSelectedLegends(function (prev) {
      return Array.from(new Set([].concat(_toConsumableArray(prev), _toConsumableArray(legendsDiff))));
    });
  }, [legendsDiff]);
  var customColors = useMemo(function () {
    return (styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series) !== undefined ? filterElementHasNoColor(styleConfig.series) : undefined;
  }, [styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series]);
  // Color Scale
  var colorScale = useColorScale(legends, customColors);
  var onMouseOverBar = useCallback(function (_e, barData) {
    var color = barData.color,
      legend = barData.legend,
      value = barData.value;
    setCurrentSelectedBar({
      legend: legend,
      value: value,
      legendColor: color
    });
  }, []);
  var onMouseOutBar = useCallback(function () {
    setCurrentSelectedBar(undefined);
  }, []);
  var onMouseMoveBar = useCallback(function (e) {
    var tooltipElement = select(tooltipRef.current);
    var clientX = e.clientX,
      clientY = e.clientY;
    tooltipElement.style('top', "".concat(clientY - 12, "px")).style('left', "".concat(clientX, "px"));
  }, []);
  var barAreaData = useMemo(function () {
    return data.map(function (d) {
      return Object.assign(Object.assign({}, d), {
        color: colorScale(d.label)
      });
    });
  }, [colorScale, data]);
  return /*#__PURE__*/React__default.createElement(StyledBarChartContainer, {
    ref: containerRef,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), useCss(Object.assign({}, sx))),
    id: id,
    className: className
  }, navigationConfig.visible && /*#__PURE__*/React__default.createElement(Navigation$2, {
    height: boundsHeight,
    yAxisTitleWidth: yAxisTitleWidth,
    navigationConfig: navigationConfig,
    yAxisConfig: yAxisConfig,
    "data-test-id": dataTestId,
    disabledButtons: navigationConfig.disabledButtons
  }), /*#__PURE__*/React__default.createElement(BarTooltip$1, {
    show: !!currentSelectedBar,
    "data-test-id": dataTestId,
    ref: tooltipRef,
    color: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.legendColor,
    title: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.legend,
    value: currentSelectedBar === null || currentSelectedBar === void 0 ? void 0 : currentSelectedBar.value
  }), /*#__PURE__*/React__default.createElement("svg", {
    width: svgSizes.width,
    height: svgSizes.height
  }, /*#__PURE__*/React__default.createElement("g", {
    width: boundsWidth,
    height: boundsHeight,
    transform: "translate(".concat(yAxisTitleWidth + chartMargin.left, ",").concat(chartMargin.top + gridChartMarginTop, ")")
  }, /*#__PURE__*/React__default.createElement(YAxisTitle$3, {
    height: boundsHeight,
    setSize: setYAxisTitleSize,
    yAxisWidth: yAxisWidth,
    yAxisConfig: yAxisConfig
  })), /*#__PURE__*/React__default.createElement("g", {
    width: boundsWidth,
    height: boundsHeight,
    transform: "translate(".concat(yAxisTitleWidth + chartMargin.left, ",").concat(chartMargin.top, ")")
  }, typeof ((_a = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.tick) === null || _a === void 0 ? void 0 : _a.interval) !== 'undefined' && /*#__PURE__*/React__default.createElement(GridArea$1, {
    height: boundsHeight,
    width: boundsWidth,
    minValue: minValue,
    maxValue: defaultMaxValue,
    xAxisConfig: xAxisConfig,
    highlightMiddleLine: isNegativeBarChart
  }), /*#__PURE__*/React__default.createElement(BarArea$1, {
    height: boundsHeight,
    width: boundsWidth,
    maxValue: defaultMaxValue,
    minValue: minValue,
    "data-test-id": dataTestId,
    yAxisConfig: yAxisConfig,
    barConfig: barConfig,
    onMouseOver: onMouseOverBar,
    onMouseOut: onMouseOutBar,
    onMouseMove: onMouseMoveBar,
    highlightedItems: highlightedItems,
    selectedLegends: selectedLegends,
    data: barAreaData,
    isNegative: isNegativeBarChart,
    barSize: defaultSize
  }), /*#__PURE__*/React__default.createElement(XAxis$3, {
    height: boundsHeight,
    width: boundsWidth,
    maxValue: defaultMaxValue,
    minValue: minValue,
    xAxisConfig: xAxisConfig
  }), /*#__PURE__*/React__default.createElement(YAxis$3, {
    dataLength: data.length,
    height: boundsHeight,
    getAxisSize: setYAxisSize,
    yAxisConfig: yAxisConfig,
    barSize: defaultSize
  }))), /*#__PURE__*/React__default.createElement(StyledLegendContainer$1, {
    ref: legendContainerRef
  }, !!(xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.title) && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "regular",
    intent: "subdued"
  }, xAxisConfig.title), /*#__PURE__*/React__default.createElement(LegendGroup$1, {
    legends: legends,
    onChange: setInternalSelectedLegends,
    selectedLegends: selectedLegends,
    "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined,
    legendConfig: legendConfig,
    colorScale: colorScale
  })));
};
var HorizontalBar = NegativeBarChart;

var StyledTooltipContentWrapper = styled.div.withConfig({
  displayName: "StyledLineChart__StyledTooltipContentWrapper",
  componentId: "sc-1y3cf8h-0"
})(["&&{display:flex;align-items:center;justify-content:center;}&& > *:not(:last-child){margin-right:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return "".concat(theme.__hd__.lineChart.space.tooltipChildMargin, "px");
});
var StyledLineChartContainer = styled.div.withConfig({
  displayName: "StyledLineChart__StyledLineChartContainer",
  componentId: "sc-1y3cf8h-1"
})(["&&{position:relative;height:100%;width:100%;}&& svg{position:relative;z-index:2;}&& .x-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}&& .y-axis text{font-weight:", ";font-size:", ";line-height:", ";color:", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.lineChart.fontWeights.xAxisTick;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.lineChart.fontSizes.xAxisTick;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.lineChart.lineHeights.xAxisTick;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.lineChart.colors.xAxisTickColor;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.lineChart.fontWeights.yAxisTick;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.lineChart.fontSizes.yAxisTick;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.lineChart.lineHeights.yAxisTick;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.lineChart.colors.yAxisTickColor;
});
var StyledLegendContainer = styled.div.withConfig({
  displayName: "StyledLineChart__StyledLegendContainer",
  componentId: "sc-1y3cf8h-2"
})(["&&{display:flex;flex-direction:column;align-items:center;width:100%;flex-grow:0;margin-top:", ";}&& > *:not(:last-child){margin-bottom:", ";}&& ", "{background:", ";box-shadow:", ";padding:", ";}&& ", "::before{background:", ";}"], function (_ref10) {
  var theme = _ref10.theme;
  return "".concat(theme.__hd__.lineChart.space.legendContainerMarginTop, "px");
}, function (_ref11) {
  var theme = _ref11.theme;
  return "".concat(theme.__hd__.lineChart.space.legendContainerChildMarginBottom, "px");
}, TooltipWrapper, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.lineChart.colors.tooltipBackgroundColor;
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.lineChart.boxShadows.tooltip;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.lineChart.space.moreTooltipPadding;
}, Arrow, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.lineChart.colors.tooltipBackgroundColor;
});
var StyledNavigateButton = styled(IconButton$1).withConfig({
  displayName: "StyledLineChart__StyledNavigateButton",
  componentId: "sc-1y3cf8h-3"
})(["&&{width:", ";height:", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return "".concat(theme.__hd__.lineChart.sizes.navigationButton, "px");
}, function (_ref17) {
  var theme = _ref17.theme;
  return "".concat(theme.__hd__.lineChart.sizes.navigationButton, "px");
});
var StyledNavigateButtonWrapper = styled.div.withConfig({
  displayName: "StyledLineChart__StyledNavigateButtonWrapper",
  componentId: "sc-1y3cf8h-4"
})(["&&{display:flex;flex-grow:0;place-items:center;padding:", ";}"], function (_ref18) {
  var theme = _ref18.theme;
  return "".concat(theme.__hd__.lineChart.space.navigateButtonPadding, "px");
});
var StyledNavigationButtonsWrapper = styled.div.withConfig({
  displayName: "StyledLineChart__StyledNavigationButtonsWrapper",
  componentId: "sc-1y3cf8h-5"
})(["&&{display:flex;flex:1;min-width:0;}"]);
var StyledNavigationButtonsChildrenWrapper = styled.div.withConfig({
  displayName: "StyledLineChart__StyledNavigationButtonsChildrenWrapper",
  componentId: "sc-1y3cf8h-6"
})(["&&{display:flex;flex:1;min-width:0;}"]);
var StyledYAxisTitleWrapper = styled.div.withConfig({
  displayName: "StyledLineChart__StyledYAxisTitleWrapper",
  componentId: "sc-1y3cf8h-7"
})(["&&{width:", ";}"], function (_ref19) {
  var theme = _ref19.theme;
  return "".concat(theme.__hd__.lineChart.sizes.yAxisTitleWidth, "px");
});
var StyledLineChartChildrenWrapper = styled.div.withConfig({
  displayName: "StyledLineChart__StyledLineChartChildrenWrapper",
  componentId: "sc-1y3cf8h-8"
})(["&&{display:flex;flex-direction:column;flex:1;height:100%;min-width:0;}"]);
var StyledYAxisTitleAndNavigationButtonsAndChartContentWrapper = styled.div.withConfig({
  displayName: "StyledLineChart__StyledYAxisTitleAndNavigationButtonsAndChartContentWrapper",
  componentId: "sc-1y3cf8h-9"
})(["&&{display:flex;flex:1;min-width:0;}"]);

var convertPointsToFillPath = function convertPointsToFillPath(points, height) {
  var path = points.reduce(function (acc, point, index) {
    if (index === 0) {
      return "M ".concat(point.x, " ").concat(point.y);
    }
    return "".concat(acc, " L ").concat(point.x, " ").concat(point.y);
  }, '');
  return "".concat(path, " V ").concat(height, " H 0 Z");
};
var StrokeLine = function StrokeLine(_ref) {
  var points = _ref.points,
    dataTestID = _ref['data-test-id'],
    color = _ref.color,
    type = _ref.type;
  var lineChart = useTheme().__hd__.lineChart;
  return /*#__PURE__*/React__default.createElement("g", {
    "data-test-id": dataTestID
  }, points.map(function (point, index) {
    if (index === points.length - 1) {
      return null;
    }
    var nextPoint = points[index + 1];
    var testId = "".concat(dataTestID, "-").concat(index);
    var key = "".concat(point.x, "-").concat(point.y, "-").concat(nextPoint.x, "-").concat(nextPoint.y);
    switch (type) {
      case 'default':
        return /*#__PURE__*/React__default.createElement("line", {
          key: key,
          "data-test-id": testId,
          x1: point.x,
          y1: point.y,
          x2: nextPoint.x,
          y2: nextPoint.y,
          cursor: "pointer",
          stroke: color,
          strokeWidth: lineChart.borderWidth.line["default"]
        });
      case 'highlighted':
        return /*#__PURE__*/React__default.createElement("line", {
          key: key,
          "data-test-id": testId,
          x1: point.x,
          y1: point.y,
          x2: nextPoint.x,
          y2: nextPoint.y,
          cursor: "pointer",
          stroke: color,
          strokeWidth: lineChart.borderWidth.line.highlighted
        });
      case 'no-highlighted':
        return /*#__PURE__*/React__default.createElement("line", {
          key: key,
          "data-test-id": testId,
          x1: point.x,
          y1: point.y,
          x2: nextPoint.x,
          y2: nextPoint.y,
          cursor: "pointer",
          strokeDasharray: lineChart.strokeDasharray.line,
          stroke: color,
          strokeWidth: lineChart.borderWidth.line.noHighlighted
        });
      default:
        return null;
    }
  }));
};
// this component renders a line between the points of a serie
var SeriesLine = /*#__PURE__*/memo(function (_ref2) {
  var dataTestId = _ref2['data-test-id'],
    color = _ref2.color,
    label = _ref2.label,
    points = _ref2.points,
    _ref2$type = _ref2.type,
    type = _ref2$type === void 0 ? 'default' : _ref2$type,
    _onMouseOver = _ref2.onMouseOver,
    _onMouseOut = _ref2.onMouseOut,
    _onMouseMove = _ref2.onMouseMove,
    width = _ref2.width,
    height = _ref2.height,
    _ref2$isFillColor = _ref2.isFillColor,
    isFillColor = _ref2$isFillColor === void 0 ? false : _ref2$isFillColor;
  var onMouseOver = React__default.useCallback(function (e) {
    if (_onMouseOver) {
      _onMouseOver(e, label);
    }
  }, [_onMouseOver, label]);
  var onMouseOut = React__default.useCallback(function (e) {
    if (_onMouseOut) {
      _onMouseOut(e, label);
    }
  }, [_onMouseOut, label]);
  var onMouseMove = React__default.useCallback(function (e) {
    if (_onMouseMove) {
      _onMouseMove(e, label);
    }
  }, [_onMouseMove, label]);
  // draw SVGElement path from points
  var fillPath = React__default.useMemo(function () {
    return convertPointsToFillPath(points, height);
  }, [height, points]);
  var svgID = label.replace(/\s/g, '') + color;
  var lineDataTestId = "".concat(dataTestId !== null && dataTestId !== void 0 ? dataTestId : 'seriesline');
  return /*#__PURE__*/React__default.createElement("g", {
    "data-test-id": dataTestId,
    key: label,
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut,
    onMouseMove: onMouseMove
  }, isFillColor && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("path", {
    pointerEvents: "none",
    d: fillPath,
    stroke: "none",
    fill: "url(#paint0_linear_".concat(svgID, ")"),
    "data-test-id": "".concat(lineDataTestId, "-fill-path")
  }), /*#__PURE__*/React__default.createElement("defs", null, /*#__PURE__*/React__default.createElement("linearGradient", {
    id: "paint0_linear_".concat(svgID),
    x1: width,
    y1: "0",
    x2: width,
    y2: height,
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/React__default.createElement("stop", {
    stopColor: color,
    stopOpacity: "0.5"
  }), /*#__PURE__*/React__default.createElement("stop", {
    offset: "1",
    stopColor: color,
    stopOpacity: "0"
  })))), /*#__PURE__*/React__default.createElement(StrokeLine, {
    points: points,
    color: color,
    type: type,
    "data-test-id": "".concat(lineDataTestId, "-stroke-line")
  }));
});
var SeriesLine$1 = SeriesLine;

// this component renders the lines of the chart
var SeriesLines = function SeriesLines(_ref) {
  var dataTestId = _ref['data-test-id'],
    seriesLinesData = _ref.seriesLinesData,
    _onMouseOver = _ref.onMouseOver,
    _onMouseOut = _ref.onMouseOut,
    _onMouseMove = _ref.onMouseMove,
    width = _ref.width,
    height = _ref.height,
    _ref$isFillColor = _ref.isFillColor,
    isFillColor = _ref$isFillColor === void 0 ? false : _ref$isFillColor;
  var onMouseOver = React__default.useCallback(function (e, label) {
    if (_onMouseOver) {
      _onMouseOver(e, label);
    }
  }, [_onMouseOver]);
  var onMouseOut = React__default.useCallback(function (e, label) {
    if (_onMouseOut) {
      _onMouseOut(e, label);
    }
  }, [_onMouseOut]);
  var onMouseMove = React__default.useCallback(function (e, label) {
    if (_onMouseMove) {
      _onMouseMove(e, label);
    }
  }, [_onMouseMove]);
  var lines = useMemo(function () {
    var isAnyHighlighted = seriesLinesData.some(function (seriesLineData) {
      return seriesLineData.isHighlighted;
    });
    return seriesLinesData.map(function (_ref2) {
      var label = _ref2.label,
        points = _ref2.points,
        color = _ref2.color,
        isHighlighted = _ref2.isHighlighted;
      var lineType = function () {
        if (!isAnyHighlighted) {
          return 'default';
        }
        return isHighlighted ? 'highlighted' : 'no-highlighted';
      }();
      return /*#__PURE__*/React__default.createElement(SeriesLine$1, {
        width: width,
        height: height,
        "data-test-id": "".concat(dataTestId, "-").concat(label),
        key: label,
        points: points,
        type: lineType,
        label: label,
        color: color,
        onMouseOver: onMouseOver,
        onMouseOut: onMouseOut,
        onMouseMove: onMouseMove,
        isFillColor: isFillColor
      });
    });
  }, [seriesLinesData, isFillColor, onMouseOver, onMouseOut, onMouseMove, dataTestId, width, height]);
  return /*#__PURE__*/React__default.createElement("g", {
    "data-test-id": dataTestId
  }, lines);
};
var SeriesLines$1 = /*#__PURE__*/memo(SeriesLines);

// this component renders the x axis grid
var XAxisGrid = function XAxisGrid(_ref) {
  var width = _ref.width,
    height = _ref.height,
    xAxisConfig = _ref.xAxisConfig,
    dataTestId = _ref['data-test-id'];
  var _a;
  var numberOfLines = ((_a = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels) === null || _a === void 0 ? void 0 : _a.length) || 0;
  var xScale = useMemo(function () {
    return linear().domain([0, numberOfLines - 1]).range([0, width]);
  }, [width, numberOfLines]);
  var lineChartTheme = useTheme().__hd__.lineChart;
  var xAxisGrid = range(0, numberOfLines).map(function (value) {
    return /*#__PURE__*/React__default.createElement("g", {
      key: value,
      "data-test-id": "x-axis-grid-line"
    }, /*#__PURE__*/React__default.createElement("line", {
      strokeDasharray: lineChartTheme.strokeDasharray.gridLine,
      x1: xScale(value),
      y1: 0,
      x2: xScale(value),
      y2: height,
      stroke: lineChartTheme.colors.gridLineBackgroundColor,
      opacity: lineChartTheme.opacity.gridLine
    }));
  });
  return /*#__PURE__*/React__default.createElement("g", {
    "data-test-id": dataTestId
  }, xAxisGrid);
};
var XAxisGrid$1 = /*#__PURE__*/memo(XAxisGrid);

// This component renders the y-axis grid lines
var YAxisGrid = function YAxisGrid(_ref) {
  var maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    interval = _ref.interval,
    width = _ref.width,
    height = _ref.height,
    dataTestId = _ref['data-test-id'];
  var yScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);
  var lineChartTheme = useTheme().__hd__.lineChart;
  var ticksValues = useMemo(function () {
    var ticks = [];
    for (var i = minValue; i <= maxValue; i += interval) {
      ticks.push(i);
    }
    return ticks;
  }, [maxValue, minValue, interval]);
  var yAxisGrid = ticksValues.map(function (value) {
    var y = yScale(value);
    return /*#__PURE__*/React__default.createElement("g", {
      key: yScale(value),
      "data-test-id": "y-axis-grid-line"
    }, /*#__PURE__*/React__default.createElement("line", {
      strokeDasharray: lineChartTheme.strokeDasharray.gridLine,
      x1: 0,
      x2: width,
      y1: y,
      y2: y,
      stroke: lineChartTheme.colors.gridLineBackgroundColor,
      opacity: lineChartTheme.opacity.gridLine
    }));
  });
  return /*#__PURE__*/React__default.createElement("g", {
    "data-test-id": dataTestId
  }, yAxisGrid);
};
var YAxisGrid$1 = /*#__PURE__*/memo(YAxisGrid);

var debounce$1 = function debounce(func, waitFor) {
  var timeout;
  var debounced = function debounced() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      return func.apply(void 0, args);
    }, waitFor);
  };
  return debounced;
};

// this component render x axis labels
var XAxis = function XAxis(_ref) {
  var xAxisConfig = _ref.xAxisConfig,
    width = _ref.width,
    height = _ref.height;
  var xAxisRef = useRef(null);
  var xScale = useMemo(function () {
    var _a;
    var labels = (_a = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels) !== null && _a !== void 0 ? _a : [];
    return point(labels, [0, width]).align(0);
  }, [xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels, width]);
  var _useTheme = useTheme(),
    lineChartTheme = _useTheme.__hd__.lineChart;
  var _lineChartTheme$space = lineChartTheme.space,
    xAxisTransform = _lineChartTheme$space.xAxisTransform,
    xAxisLabelHorizontalPadding = _lineChartTheme$space.xAxisLabelHorizontalPadding;
  var xAxisLabelMinWidth = lineChartTheme.sizes.xAxisLabelMinWidth;
  // calculate max-width of x axis label. if < barWidth, get barWidth
  var xAxisLabelMaxWidth = Math.max(xScale.step() - 2 * xAxisLabelHorizontalPadding, xAxisLabelMinWidth);
  useLayoutEffect(function () {
    var xAxisSVGElement = select(xAxisRef.current);
    var xAxisGenerator = axisBottom(xScale).tickSize(0);
    xAxisSVGElement.append('g').attr('transform', "translate(0,".concat(height + xAxisTransform, ")")).attr('class', 'x-axis').call(xAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    })
    // fix issue: https://github.com/Thinkei/hero-design/issues/2696
    // solution: inspire from https://codepen.io/ChangedPurpose/pen/pEdapE
    .selectAll('.tick').selectAll('text').html('').append('tspan').text(function (d) {
      return "".concat(d);
    }).each(function (_, i, nodes) {
      var xAxisLabelElement = select(nodes[i]);
      var textLength = nodes[i].getComputedTextLength();
      var text = xAxisLabelElement.text();
      while (textLength > xAxisLabelMaxWidth && text.length > 0) {
        text = text.slice(0, -1);
        xAxisLabelElement.text("".concat(text, "..."));
        textLength = nodes[i].getComputedTextLength();
      }
    });
    return function () {
      xAxisSVGElement.selectAll('*').remove();
    };
  }, [xScale, height, width, xAxisLabelMaxWidth, xAxisTransform]);
  return /*#__PURE__*/React__default.createElement("g", {
    "data-test-id": "x-axis-container",
    ref: xAxisRef
  });
};
var XAxis$1 = /*#__PURE__*/memo(XAxis);

var formatFloat = function formatFloat(value) {
  // Use toFixed(15) to ensure all available decimal places
  var formattedString = parseFloat(value.toFixed(15)).toString();
  // Remove trailing zeros after the decimal point
  formattedString = formattedString.replace(/(\.\d*?)0+$/, '$1');
  return formattedString;
};
// this component render the y axis values
var YAxis = function YAxis(_ref) {
  var maxValue = _ref.maxValue,
    minValue = _ref.minValue,
    step = _ref.step,
    width = _ref.width,
    height = _ref.height;
  var yAxisRef = useRef(null);
  // Y axis
  var yScale = useMemo(function () {
    return linear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);
  var _useTheme = useTheme(),
    lineChartTheme = _useTheme.__hd__.lineChart;
  var yAxisTransform = lineChartTheme.space.yAxisTransform;
  // get array of numbers from 0 to max value with step
  var ticksValues = useMemo(function () {
    var ticks = [];
    for (var i = minValue; i <= maxValue; i += step) {
      ticks.push(i);
    }
    if (ticks[ticks.length - 1] !== maxValue) {
      ticks.push(maxValue);
    }
    return ticks;
  }, [maxValue, minValue, step]);
  var _useState = useState({
      height: 0,
      width: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    yAxisSize = _useState2[0],
    setYAxisSize = _useState2[1];
  useLayoutEffect(function () {
    var _a;
    var yAxisSVGElement = select(yAxisRef.current);
    var yAxisGenerator = axisLeft(yScale).tickSize(0).tickFormat(function (d) {
      return formatFloat(d.valueOf());
    }).tickValues(ticksValues);
    var yAxis = yAxisSVGElement.append('g').attr('transform', "translate(".concat(width - yAxisTransform - yAxisSize.width, " ,0)")).attr('class', 'y-axis').call(yAxisGenerator).call(function (g) {
      return g.select('.domain').remove();
    });
    var _ref2 = ((_a = yAxis.node()) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {},
      yAxisW = _ref2.width,
      yAxisH = _ref2.height;
    setYAxisSize({
      width: yAxisW || 0,
      height: yAxisH || 0
    });
    return function () {
      yAxisSVGElement.selectAll('*').remove();
    };
  }, [yScale, height, width, ticksValues, yAxisSize.width, yAxisTransform]);
  return /*#__PURE__*/React__default.createElement("g", {
    "data-test-id": "y-axis-container",
    ref: yAxisRef
  });
};
var YAxis$1 = /*#__PURE__*/memo(YAxis);

var StyledChartContentWrapper = styled.div.withConfig({
  displayName: "StyledChartContent__StyledChartContentWrapper",
  componentId: "sc-1pwee78-0"
})(["&&{display:flex;flex:1;min-width:0;}"]);

var HighlightCircle = function HighlightCircle(_ref) {
  var cx = _ref.cx,
    cy = _ref.cy,
    display = _ref.display,
    color = _ref.color;
  var theme = useTheme();
  return /*#__PURE__*/React__default.createElement("g", {
    display: display,
    pointerEvents: "none",
    "data-test-id": "highlight-circle"
  }, /*#__PURE__*/React__default.createElement("circle", {
    cx: cx,
    cy: cy,
    r: "6.5",
    stroke: color,
    strokeWidth: "7",
    fill: theme.colors.defaultLightBackground
  }));
};
var HighlightCircle$1 = HighlightCircle;

var TooltipContent = function TooltipContent(_ref) {
  var label = _ref.label,
    value = _ref.value,
    legendColor = _ref.legendColor;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, !!legendColor && /*#__PURE__*/React__default.createElement(StyledLegendCircle, {
    themeColor: legendColor,
    "data-test-id": "legend-circle"
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    intent: "subdued",
    tagName: "span"
  }, label), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 14,
    fontWeight: "light",
    tagName: "span"
  }, value));
};
var TooltipContent$1 = TooltipContent;

var isNull = function isNull(value) {
  return value == null && value === undefined;
};
var filterNullValues = function filterNullValues(data) {
  return data.filter(function (d) {
    return !isNull(d);
  });
};
var maxValueFromDataSet = function maxValueFromDataSet(data) {
  return data.reduce(function (acc, curr) {
    var max = Math.max.apply(Math, _toConsumableArray(filterNullValues(curr.data)));
    return max > acc ? max : acc;
  }, 0);
};
var minValueFromDataSet = function minValueFromDataSet(data) {
  return data.reduce(function (acc, curr) {
    var min = Math.min.apply(Math, _toConsumableArray(filterNullValues(curr.data)));
    return min < acc ? min : acc;
  }, 0);
};
var convertDataToSeriesLinesPoints = function convertDataToSeriesLinesPoints(data, width, height, minValue, maxValue, labels) {
  var xScale = point(labels, [0, width]).align(0);
  var yScale = linear().domain([minValue, maxValue]).range([height, 0]);
  return data.map(function (item) {
    return {
      points: item.data.map(function (d, index) {
        var _a, _b;
        return {
          x: (_a = xScale(labels[index])) !== null && _a !== void 0 ? _a : 0,
          y: (_b = yScale(d !== null && d !== void 0 ? d : 0)) !== null && _b !== void 0 ? _b : 0
        };
      }),
      color: item.color,
      label: item.label,
      isHighlighted: item.isHighlighted
    };
  });
};
var ChartContent = function ChartContent(_ref) {
  var dataTestId = _ref['data-test-id'],
    xAxisConfig = _ref.xAxisConfig,
    yAxisConfig = _ref.yAxisConfig,
    data = _ref.data,
    _onMouseOutSeriesLine = _ref.onMouseOutSeriesLine,
    _onMouseOverSeriesLine = _ref.onMouseOverSeriesLine,
    _onMouseMoveSeriesLine = _ref.onMouseMoveSeriesLine,
    _ref$chartVariant = _ref.chartVariant,
    chartVariant = _ref$chartVariant === void 0 ? 'outlined' : _ref$chartVariant;
  var _a, _b, _c, _d, _e, _f;
  var lineChartTheme = useTheme().__hd__.lineChart;
  var _useState = useState({
      width: 0,
      height: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    size = _useState2[0],
    setSize = _useState2[1];
  var ref = useRef(null);
  var yAxisWidth = lineChartTheme.sizes.yAxisWidth;
  var xAxisHeight = lineChartTheme.sizes.xAxisHeight;
  // Render the X and Y axis using d3.js, not react
  var seriesLinesRect = {
    x: yAxisWidth,
    width: size.width - yAxisWidth,
    y: 0,
    height: size.height - xAxisHeight
  };
  var resizeHandler = useCallback(debounce$1(function () {
    if (ref.current) {
      var _ref$current$getBound = ref.current.getBoundingClientRect(),
        width = _ref$current$getBound.width,
        height = _ref$current$getBound.height;
      setSize({
        width: width,
        height: height
      });
    }
  }, 30), []);
  useLayoutEffect(function () {
    resizeHandler();
  }, [resizeHandler]);
  // handle resize
  useResizeObserver(resizeHandler, getParentElement(ref.current));
  var niceValues = useMemo(function () {
    var maxDataValue = maxValueFromDataSet(data);
    var minDataValue = minValueFromDataSet(data);
    return createNiceScale(minDataValue, maxDataValue);
  }, [data]);
  // If the user has provided a min/max value, use that instead of the min/max value from the data
  var yMaxValue = (_a = yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.maxValue) !== null && _a !== void 0 ? _a : niceValues.niceMax;
  var yMinValue = (_b = yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.minValue) !== null && _b !== void 0 ? _b : niceValues.niceMin;
  // If the user has provided a number of steps, use that instead of the tick spacing calculated by nice numbers algorithm
  var yAxisStep = (_c = yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.step) !== null && _c !== void 0 ? _c : niceValues.tickSpacing;
  // If the user has provided a number of intervals, use that instead of the same number as the number of steps
  var yAxisInterval = (_e = (_d = yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.tick) === null || _d === void 0 ? void 0 : _d.interval) !== null && _e !== void 0 ? _e : yAxisStep;
  var seriesLinesData = useMemo(function () {
    var _a;
    return convertDataToSeriesLinesPoints(data, seriesLinesRect.width, seriesLinesRect.height, yMinValue, yMaxValue, (_a = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels) !== null && _a !== void 0 ? _a : []);
  }, [data, seriesLinesRect.height, seriesLinesRect.width, yMinValue, yMaxValue, xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels]);
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    tooltipData = _useState4[0],
    setTooltipData = _useState4[1];
  var onMouseOverSeriesHanlder = useCallback(function (e, label) {
    if (_onMouseOverSeriesLine) {
      _onMouseOverSeriesLine(e, label);
    }
  }, [_onMouseOverSeriesLine]);
  var onMouseOutSeriesHanlder = useCallback(function (e, label) {
    if (_onMouseOutSeriesLine) {
      _onMouseOutSeriesLine(e, label);
    }
    setTooltipData(null);
  }, [_onMouseOutSeriesLine]);
  var onMouseMoveSeriesHanlder = useCallback(function (e, label) {
    var _a, _b, _c, _d;
    if (_onMouseMoveSeriesLine) {
      _onMouseMoveSeriesLine(e, label);
    }
    // convert event coordinates to svg coordinates
    var svg = e.currentTarget.closest('svg');
    if (!svg) {
      return;
    }
    var pt = svg.createSVGPoint();
    pt.x = e.clientX;
    pt.y = e.clientY;
    var position = pt.matrixTransform((_a = svg.getScreenCTM()) === null || _a === void 0 ? void 0 : _a.inverse());
    var numbersOfLabels = (_c = (_b = xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;
    // how to convert x to label
    var xScale = linear().domain([0, seriesLinesRect.width]).range([0, numbersOfLabels - 1]);
    var labelIndex = Math.round(xScale(position.x));
    var highlightedSeriesLineData = seriesLinesData.find(function (d) {
      return d.label === label;
    });
    if (!highlightedSeriesLineData) {
      setTooltipData(null);
      return;
    }
    var point = highlightedSeriesLineData.points[labelIndex];
    var lineColor = highlightedSeriesLineData.color;
    var value = (_d = data.find(function (d) {
      return d.label === label;
    })) === null || _d === void 0 ? void 0 : _d.data[labelIndex];
    if (point) {
      setTooltipData({
        point: {
          x: point.x,
          y: point.y
        },
        label: label,
        value: value,
        color: lineColor
      });
    }
  }, [seriesLinesRect.width, xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.labels, seriesLinesData, data, _onMouseMoveSeriesLine]);
  var tooltipPosition = tooltipData ? {
    x: tooltipData.point.x + seriesLinesRect.x,
    y: tooltipData.point.y + seriesLinesRect.y - lineChartTheme.space.tooltipBottomMargin
  } : null;
  return /*#__PURE__*/React__default.createElement(StyledChartContentWrapper, {
    ref: ref,
    "data-test-id": dataTestId
  }, size.width > 0 && size.height > 0 && /*#__PURE__*/React__default.createElement("svg", {
    "data-test-id": "".concat(dataTestId, "-svg"),
    width: size.width,
    height: size.height,
    overflow: "visible"
  }, /*#__PURE__*/React__default.createElement("g", null, /*#__PURE__*/React__default.createElement("g", {
    transform: "translate(".concat(seriesLinesRect.x, ",").concat(seriesLinesRect.y, ")")
  }, /*#__PURE__*/React__default.createElement(YAxisGrid$1, {
    maxValue: yMaxValue,
    minValue: yMinValue,
    interval: yAxisInterval,
    width: seriesLinesRect.width,
    height: seriesLinesRect.height
  }), /*#__PURE__*/React__default.createElement(XAxisGrid$1, {
    xAxisConfig: xAxisConfig,
    width: seriesLinesRect.width,
    height: seriesLinesRect.height
  }), /*#__PURE__*/React__default.createElement(XAxis$1, {
    xAxisConfig: xAxisConfig,
    width: seriesLinesRect.width,
    height: seriesLinesRect.height
  }), /*#__PURE__*/React__default.createElement(SeriesLines$1, {
    isFillColor: chartVariant === 'filled',
    width: seriesLinesRect.width,
    height: seriesLinesRect.height,
    seriesLinesData: seriesLinesData,
    onMouseOut: onMouseOutSeriesHanlder,
    onMouseOver: onMouseOverSeriesHanlder,
    onMouseMove: onMouseMoveSeriesHanlder,
    "data-test-id": "".concat(dataTestId, "-series-lines")
  }), /*#__PURE__*/React__default.createElement(HighlightCircle$1, {
    display: (tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.point) ? 'block' : 'none',
    cx: tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.point.x,
    cy: (_f = tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.point) === null || _f === void 0 ? void 0 : _f.y,
    color: tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.color
  })), /*#__PURE__*/React__default.createElement(YAxis$1, {
    maxValue: yMaxValue,
    minValue: yMinValue,
    step: yAxisStep,
    height: seriesLinesRect.height,
    width: yAxisWidth
  }))), /*#__PURE__*/React__default.createElement(StyledTooltip, {
    style: {
      display: tooltipPosition ? 'block' : 'none',
      top: tooltipPosition === null || tooltipPosition === void 0 ? void 0 : tooltipPosition.y,
      left: tooltipPosition === null || tooltipPosition === void 0 ? void 0 : tooltipPosition.x,
      pointerEvents: 'none',
      transform: 'translate(0, -100%)'
    },
    "data-test-id": "".concat(dataTestId, "-tooltip"),
    variant: "light"
  }, /*#__PURE__*/React__default.createElement(StyledTooltipContentWrapper, null, /*#__PURE__*/React__default.createElement(TooltipContent$1, {
    label: tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.label,
    value: tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.value,
    legendColor: tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.color
  }))));
};
var ChartContent$1 = /*#__PURE__*/memo(ChartContent);

// This comopnent helps to render navigation buttons for line chart
var NavigationButtons = function NavigationButtons(_ref) {
  var dataTestId = _ref['data-test-id'],
    visible = _ref.visible,
    onNavigate = _ref.onNavigate,
    children = _ref.children,
    disabledButtons = _ref.disabledButtons;
  return /*#__PURE__*/React__default.createElement(StyledNavigationButtonsWrapper, null, visible && /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper, null, /*#__PURE__*/React__default.createElement(StyledNavigateButton, {
    size: "large",
    icon: "single-left-arrow",
    intent: "text",
    onClick: function onClick() {
      return onNavigate === null || onNavigate === void 0 ? void 0 : onNavigate('prev');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-prev") : undefined,
    disabled: disabledButtons === 'prev'
  })), /*#__PURE__*/React__default.createElement(StyledNavigationButtonsChildrenWrapper, null, children), visible && /*#__PURE__*/React__default.createElement(StyledNavigateButtonWrapper, null, /*#__PURE__*/React__default.createElement(StyledNavigateButton, {
    size: "large",
    icon: "single-right-arrow",
    intent: "text",
    onClick: function onClick() {
      return onNavigate === null || onNavigate === void 0 ? void 0 : onNavigate('next');
    },
    "data-test-id": dataTestId ? "".concat(dataTestId, "-navigate-button-next") : undefined,
    disabled: disabledButtons === 'next'
  })));
};
var NavigationButtons$1 = NavigationButtons;

var YAxisTitle = function YAxisTitle(_ref) {
  var title = _ref.title;
  var ref = useRef(null);
  var _useState = useState({
      width: 0,
      height: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    yAxisTitleSize = _useState2[0],
    setYAxisTitleSize = _useState2[1];
  var resizeHandler = useCallback(debounce$1(function () {
    if (ref.current) {
      var _ref$current$getBound = ref.current.getBoundingClientRect(),
        width = _ref$current$getBound.width,
        height = _ref$current$getBound.height;
      setYAxisTitleSize({
        width: width,
        height: height
      });
    }
  }, 30), []);
  useLayoutEffect(function () {
    resizeHandler();
    window.addEventListener('resize', resizeHandler);
    return function () {
      window.removeEventListener('resize', resizeHandler);
    };
  }, [resizeHandler]);
  return /*#__PURE__*/React__default.createElement(StyledYAxisTitleWrapper, {
    ref: ref
  }, /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "regular",
    intent: "subdued",
    style: {
      position: 'absolute',
      transform: "rotate(-90deg)",
      top: yAxisTitleSize.height,
      transformOrigin: '0 0',
      width: yAxisTitleSize.height,
      textAlign: 'center'
    }
  }, title)));
};
var YAxisTitle$1 = YAxisTitle;

var LineChart = function LineChart(_ref) {
  var data = _ref.data,
    xAxisConfig = _ref.xAxisConfig,
    yAxisConfig = _ref.yAxisConfig,
    legendConfig = _ref.legendConfig,
    dataTestId = _ref['data-test-id'],
    _ref$navigationConfig = _ref.navigationConfig,
    navigationConfig = _ref$navigationConfig === void 0 ? {
      visible: false
    } : _ref$navigationConfig,
    style = _ref.style,
    className = _ref.className,
    id = _ref.id,
    sx = _ref.sx,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'outlined' : _ref$variant,
    styleConfig = _ref.styleConfig;
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    internalSelectedLegends = _useState2[0],
    setInternalSelectedLegends = _useState2[1];
  var legends = useMemo(function () {
    return data.map(function (item) {
      return item.label;
    });
  }, [data]);
  var selectedLegends = useMemo(function () {
    return (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) ? (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.value) || internalSelectedLegends : internalSelectedLegends;
  }, [internalSelectedLegends, legendConfig]);
  var prevLegends = usePrevious(legends);
  var legendsDiff = useMemo(function () {
    return difference(legends, prevLegends || []);
  }, [legends, prevLegends]);
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    currentSelectedLabel = _useState4[0],
    setCurrentSelectedLabel = _useState4[1];
  var customColors = useMemo(function () {
    return (styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series) !== undefined ? filterElementHasNoColor(styleConfig.series) : undefined;
  }, [styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.series]);
  // Color Scale
  var colorScale = useColorScale(legends, customColors);
  useLayoutEffect(function () {
    setInternalSelectedLegends(function (prev) {
      return Array.from(new Set([].concat(_toConsumableArray(prev), _toConsumableArray(legendsDiff))));
    });
  }, [legendsDiff]);
  var renderLegend = function renderLegend() {
    if (typeof legendConfig !== 'undefined') {
      if (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.selectable) {
        return /*#__PURE__*/React__default.createElement(LegendCheckboxGroup$1, Object.assign({
          data: legends,
          getDisplayText: function getDisplayText(item) {
            return item;
          },
          getValue: function getValue(item) {
            return item;
          },
          getColor: function getColor(item) {
            return colorScale(item);
          },
          value: selectedLegends,
          onChange: setInternalSelectedLegends,
          "data-test-id": dataTestId ? "".concat(dataTestId, "-checkbox-legend") : undefined
        }, legendConfig));
      }
      return /*#__PURE__*/React__default.createElement(LegendGroup$7, Object.assign({
        data: legends,
        getDisplayText: function getDisplayText(item) {
          return item;
        },
        getColor: function getColor(item) {
          return colorScale(item);
        },
        "data-test-id": dataTestId ? "".concat(dataTestId, "-legend") : undefined
      }, legendConfig));
    }
    return null;
  };
  var filteredData = data.filter(function (item) {
    return selectedLegends.includes(item.label);
  });
  var onMouseOverSeriesHanlder = useCallback(function (_e, label) {
    setCurrentSelectedLabel(label);
  }, []);
  var onMouseOutSeriesHanlder = useCallback(function (_e, _label) {
    setCurrentSelectedLabel(null);
  }, []);
  return /*#__PURE__*/React__default.createElement(StyledLineChartContainer, {
    className: className,
    id: id,
    style: Object.assign(Object.assign({}, style), useCss(Object.assign({}, sx))),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(StyledLineChartChildrenWrapper, {
    "data-test-id": "chart-children-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledYAxisTitleAndNavigationButtonsAndChartContentWrapper, {
    "data-test-id": "chart-1"
  }, !!(yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.title) && /*#__PURE__*/React__default.createElement(YAxisTitle$1, {
    title: yAxisConfig.title
  }), /*#__PURE__*/React__default.createElement(NavigationButtons$1, {
    visible: navigationConfig.visible,
    "data-test-id": dataTestId,
    onNavigate: navigationConfig.onNavigate,
    disabledButtons: navigationConfig.disabledButtons
  }, /*#__PURE__*/React__default.createElement(ChartContent$1, {
    "data-test-id": "line-chart-content",
    onMouseOutSeriesLine: onMouseOutSeriesHanlder,
    onMouseOverSeriesLine: onMouseOverSeriesHanlder,
    xAxisConfig: xAxisConfig,
    yAxisConfig: yAxisConfig,
    chartVariant: variant,
    data: filteredData.map(function (item) {
      return {
        data: item.data,
        color: colorScale(item.label),
        label: item.label,
        isHighlighted: !!item.label && currentSelectedLabel === item.label
      };
    })
  }))), /*#__PURE__*/React__default.createElement(StyledLegendContainer, null, !!(xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.title) && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "regular",
    intent: "subdued"
  }, xAxisConfig.title), renderLegend())));
};
var LineChart$1 = LineChart;

var Chart = {
  Column: ColumnChart$1,
  Pie: PieChart$1,
  Bar: BarChart$1,
  MultiplePie: MultiplePieChart$1,
  HorizontalBar: HorizontalBar,
  Line: LineChart$1
};
var Chart$1 = Chart;

var CheckboxButton = function CheckboxButton(_ref) {
  var text = _ref.text,
    value = _ref.value,
    checked = _ref.checked,
    disabled = _ref.disabled,
    onChange = _ref.onChange,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(ButtonLabel, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(ButtonHiddenInput, {
    type: "checkbox",
    checked: checked,
    value: value,
    name: name,
    disabled: disabled,
    onChange: onChange,
    id: id
  }), /*#__PURE__*/React__default.createElement(ButtonLabelText, {
    themeSize: size
  }, text));
};
var CheckboxButton$1 = CheckboxButton;

var CheckboxButtonGroup = function CheckboxButtonGroup(_ref) {
  var name = _ref.name,
    value = _ref.value,
    options = _ref.options,
    _onChange = _ref.onChange,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(ButtonGroupWrapper, {
    themeSize: size,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(CheckboxButton$1, {
      key: option.value,
      text: option.text,
      value: option.value,
      disabled: option.disabled,
      name: name,
      checked: value.includes(option.value),
      onChange: function onChange(e) {
        var newValue = e.target.checked ? [].concat(_toConsumableArray(value), [option.value]) : value.filter(function (v) {
          return v !== option.value;
        });
        _onChange(newValue);
      },
      size: size
    });
  }));
};
var CheckboxButtonGroup$1 = CheckboxButtonGroup;

var CheckboxGroup = function CheckboxGroup(_ref) {
  var name = _ref.name,
    value = _ref.value,
    options = _ref.options,
    _onChange = _ref.onChange,
    _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? 'vertical' : _ref$layout,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(GroupWrapper$1, {
    themeLayout: layout,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(Checkbox$2, {
      key: option.value,
      value: option.value,
      text: option.text,
      name: name,
      checked: value.includes(option.value),
      disabled: option.disabled,
      onChange: function onChange(e) {
        var newValue = e.target.checked ? [].concat(_toConsumableArray(value), [option.value]) : value.filter(function (v) {
          return v !== option.value;
        });
        _onChange(newValue);
      }
    });
  }));
};
var CheckboxGroup$1 = CheckboxGroup;

var CompoundCheckbox = Checkbox$2;
CompoundCheckbox.Button = CheckboxButton$1;
CompoundCheckbox.ButtonGroup = CheckboxButtonGroup$1;
CompoundCheckbox.Group = CheckboxGroup$1;
var Checkbox = CompoundCheckbox;

var BREAKPOINT_TO_INDEX = {
  small: 1,
  medium: 2,
  large: 3,
  xlarge: 4
};
var mapBreakpointCss = function mapBreakpointCss(array, fn) {
  return "\n    ".concat(fn(array[0]), "\n    ").concat(breakpoints.map(function (bp) {
    return "\n          @media (min-width: ".concat(heroTheme$1.breakpoints[bp], ") {\n            ").concat(fn(array[BREAKPOINT_TO_INDEX[bp]]), "\n          }\n        ");
  }).join(''), "\n  ");
};

var StyledCol = styled.div.withConfig({
  displayName: "StyledCol",
  componentId: "sc-1g0wedk-0"
})(["&&{box-sizing:border-box;padding:0;margin:0;", ";}"], function (props) {
  return "\n    ".concat(mapBreakpointCss(props.span, function (value) {
    return value === 0 ? "\n            display: none;\n          " : "\n            display: block;\n            width: calc(100% / 24 * ".concat(value, ");\n          ");
  }), "\n    ").concat(mapBreakpointCss(props.offset, function (value) {
    return "\n        margin-left: calc(100% / 24 * ".concat(value, ");\n      ");
  }), "\n  ");
});
var StyledCol$1 = StyledCol;

var Col = function Col(_ref) {
  var _ref$offset = _ref.offset,
    offset = _ref$offset === void 0 ? [0, 0, 0, 0, 0] : _ref$offset,
    _ref$span = _ref.span,
    span = _ref$span === void 0 ? [24, 24, 24, 24, 24] : _ref$span,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    children = _ref.children;
  assert((span === null || span === void 0 ? void 0 : span.length) === 5, "[Grid.Col] Span:".concat(span, " is not an array with 5 elements"));
  assert((offset === null || offset === void 0 ? void 0 : offset.length) === 5, "[Grid.Col] Offset:".concat(offset, " is not an array with 5 elements"));
  return /*#__PURE__*/React__default.createElement(StyledCol$1, {
    offset: offset,
    span: span,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, children);
};
var Col$1 = Col;

var StyledRow = styled.div.withConfig({
  displayName: "StyledRow",
  componentId: "sc-5qocqx-0"
})(["&&{display:flex;flex-wrap:wrap;padding:0;margin:0;", ";", ";}"], function (_ref) {
  var theme = _ref.theme,
    _ref$gutter = _slicedToArray(_ref.gutter, 1),
    horizontalGutter = _ref$gutter[0];
  return horizontalGutter === 'none' ? "" : "\n          margin-left: -".concat(theme.space[horizontalGutter] / 2, "px;\n          margin-right: -").concat(theme.space[horizontalGutter] / 2, "px;\n          > ").concat(StyledCol$1, " {\n            padding-left: ").concat(theme.space[horizontalGutter] / 2, "px;\n            padding-right: ").concat(theme.space[horizontalGutter] / 2, "px;\n          }\n        ");
}, function (_ref2) {
  var theme = _ref2.theme,
    _ref2$gutter = _slicedToArray(_ref2.gutter, 2),
    verticalGutter = _ref2$gutter[1];
  return verticalGutter === 'none' ? "" : "\n          margin-top: -".concat(theme.space[verticalGutter] / 2, "px;\n          margin-bottom: -").concat(theme.space[verticalGutter] / 2, "px;\n          > ").concat(StyledCol$1, " {\n            padding-top: ").concat(theme.space[verticalGutter] / 2, "px;\n            padding-bottom: ").concat(theme.space[verticalGutter] / 2, "px;\n          }\n        ");
});
var StyledRow$1 = StyledRow;

var StyledGrid = styled.div.withConfig({
  displayName: "StyledGrid",
  componentId: "sc-1uwgdpy-0"
})(["&&{display:flex;flex-direction:column;padding:0;margin:0;", ";}"], function (_ref) {
  var theme = _ref.theme,
    gutter = _ref.gutter;
  return gutter === 'none' ? "" : "\n          margin-top: -".concat(theme.space[gutter] / 2, "px;\n          margin-bottom: -").concat(theme.space[gutter] / 2, "px;\n          > ").concat(StyledRow$1, " {\n            padding-top: ").concat(theme.space[gutter] / 2, "px;\n            padding-bottom: ").concat(theme.space[gutter] / 2, "px;\n          }\n        ");
});
var StyledGrid$1 = StyledGrid;

var Grid = function Grid(_ref) {
  var _ref$gutter = _ref.gutter,
    gutter = _ref$gutter === void 0 ? 'none' : _ref$gutter,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    children = _ref.children;
  return /*#__PURE__*/React__default.createElement(StyledGrid$1, {
    gutter: gutter,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, children);
};
var Grid$1 = Grid;

var Row = function Row(_ref) {
  var _ref$gutter = _ref.gutter,
    gutter = _ref$gutter === void 0 ? ['none', 'none'] : _ref$gutter,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    children = _ref.children;
  assert(gutter.length === 2, "[Grid.Row] Gutter:".concat(gutter, " doesn't match format [horizontal, vertical]"));
  return /*#__PURE__*/React__default.createElement(StyledRow$1, {
    gutter: gutter,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, children);
};
var Row$1 = Row;

var CompoundGrid = Grid$1;
CompoundGrid.Col = Col$1;
CompoundGrid.Row = Row$1;
var CompoundGrid$1 = CompoundGrid;

var Wrapper$5 = styled.div.withConfig({
  displayName: "StyledCollapse__Wrapper",
  componentId: "sc-i6lmqi-0"
})(["&&{height:", "px;transition:height 0.3s ease;overflow:", ";margin:0;padding:0;}"], function (props) {
  return props.open ? props.contentHeight : 0;
}, function (_ref) {
  var alreadyOpen = _ref.alreadyOpen;
  return alreadyOpen === true ? 'unset' : 'hidden';
});
var Container$1 = styled.div.withConfig({
  displayName: "StyledCollapse__Container",
  componentId: "sc-i6lmqi-1"
})(["&&{margin:0;padding:0;}"]);

var Collapse = function Collapse(_ref) {
  var _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    _ref$keepChildrenMoun = _ref.keepChildrenMounted,
    keepChildrenMounted = _ref$keepChildrenMoun === void 0 ? false : _ref$keepChildrenMoun,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var innerRef = React__default.useRef(null);
  var _React$useState = React__default.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    contentHeight = _React$useState2[0],
    setContentHeight = _React$useState2[1];
  var _React$useState3 = React__default.useState(false),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    alreadyOpen = _React$useState4[0],
    setAlreadyOpen = _React$useState4[1];
  var _React$useState5 = React__default.useState(false),
    _React$useState6 = _slicedToArray(_React$useState5, 2),
    isWaitingToClose = _React$useState6[0],
    setIsWaitingToClose = _React$useState6[1];
  var resizeCallback = useCallback(function (_ref2) {
    var height = _ref2.height;
    setContentHeight(height);
  }, [setContentHeight]);
  useEffect(function () {
    if (open === true) {
      setIsWaitingToClose(true);
    } else {
      setAlreadyOpen(false);
    }
    var timerId = setTimeout(function () {
      if (open === true) {
        setAlreadyOpen(true);
      } else {
        setIsWaitingToClose(false);
      }
    }, 300);
    return function () {
      clearTimeout(timerId);
    };
  }, [open]);
  useResizeObserver(resizeCallback, innerRef.current);
  return /*#__PURE__*/React__default.createElement(Wrapper$5, {
    open: open,
    contentHeight: contentHeight,
    alreadyOpen: alreadyOpen,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, (keepChildrenMounted === true || open === true || open === false && isWaitingToClose === true) && /*#__PURE__*/React__default.createElement(Container$1, {
    ref: innerRef
  }, children));
};
var Collapse$1 = Collapse;

var BACKGROUND_INTENTS = {
  primary: 'primaryBackground',
  success: 'successBackground',
  danger: 'dangerBackground',
  warning: 'warningBackground',
  error: 'errorBackground',
  archived: 'archivedBackground'
};
var HOVER_BTN_INTENTS = {
  primary: 'hoverPrimaryCloseBtn',
  success: 'hoverSuccessCloseBtn',
  danger: 'hoverDangerCloseBtn',
  warning: 'hoverWarningCloseBtn',
  error: 'hoverErrorCloseBtn'
};
var ACTIVE_BTN_INTENTS = {
  primary: 'activePrimaryCloseBtn',
  success: 'activeSuccessCloseBtn',
  danger: 'activeDangerCloseBtn',
  warning: 'activeWarningCloseBtn',
  error: 'activeErrorCloseBtn'
};
var genFilledStyles = function genFilledStyles(intent) {
  return css$2(["color:white;border-color:", ";background:", ";"], function (_ref) {
    var theme = _ref.theme;
    return theme.__hd__.tag.colors[intent];
  }, function (_ref2) {
    var theme = _ref2.theme;
    return theme.__hd__.tag.colors[intent];
  });
};
var genOutlinedStyles = function genOutlinedStyles(intent) {
  return css$2(["color:", ";border-color:", ";background:", ";"], function (_ref3) {
    var theme = _ref3.theme;
    return theme.__hd__.tag.colors[intent];
  }, function (_ref4) {
    var theme = _ref4.theme;
    return theme.__hd__.tag.colors[intent];
  }, function (_ref5) {
    var theme = _ref5.theme;
    return theme.__hd__.tag.colors[BACKGROUND_INTENTS[intent]];
  });
};
var closeBtnFilledStyles = css$2(["color:", ";&:hover{opacity:0.4;}&:active{opacity:0.7;}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.tag.colors.closeBtn;
});
var genCloseBtnOutlinedStyles = function genCloseBtnOutlinedStyles(intent) {
  return css$2(["color:", ";&:hover{color:", ";}&:active{color:", ";}"], function (_ref7) {
    var theme = _ref7.theme;
    return theme.__hd__.tag.colors[intent];
  }, function (_ref8) {
    var theme = _ref8.theme;
    return theme.__hd__.tag.colors[HOVER_BTN_INTENTS[intent]];
  }, function (_ref9) {
    var theme = _ref9.theme;
    return theme.__hd__.tag.colors[ACTIVE_BTN_INTENTS[intent]];
  });
};
var CloseButton$2 = styled.button.withConfig({
  displayName: "StyledTag__CloseButton",
  componentId: "sc-1fp1kqy-0"
})(["&&{display:flex;align-items:center;border:none;background:transparent;margin:0;padding:", ";font-size:", ";}&&:hover{cursor:pointer;}&&:focus{outline:none;}&&{", ";}"], function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.tag.space.closeBtnPadding;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.tag.fontSizes.closeBtn;
}, function (_ref12) {
  var themeVariant = _ref12.themeVariant,
    theme = _ref12.theme;
  switch (themeVariant) {
    case 'basic':
    case 'outlined-archived':
      return css$2(["color:", ";&:hover{color:", ";}&:active{color:", ";}"], theme.__hd__.tag.colors.basicCloseBtn, theme.__hd__.tag.colors.hoverBasicCloseBtn, theme.__hd__.tag.colors.defaultText);
    case 'filled-primary':
    case 'filled-success':
    case 'filled-danger':
    case 'filled-warning':
    case 'filled-error':
    case 'filled-archived':
      return closeBtnFilledStyles;
    case 'outlined-primary':
      return genCloseBtnOutlinedStyles('primary');
    case 'outlined-success':
      return genCloseBtnOutlinedStyles('success');
    case 'outlined-danger':
      return genCloseBtnOutlinedStyles('danger');
    case 'outlined-warning':
      return genCloseBtnOutlinedStyles('warning');
    case 'outlined-error':
      return genCloseBtnOutlinedStyles('error');
  }
});
var StyledTag = styled.span.withConfig({
  displayName: "StyledTag",
  componentId: "sc-1fp1kqy-1"
})(["&&{display:inline-flex;align-items:center;box-sizing:border-box;border:", " solid;border-radius:", ";font-weight:", ";line-height:1;margin:0;padding:0;", ";", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.tag.borderWidths["default"];
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.tag.radii["default"];
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.tag.fontWeights["default"];
}, function (_ref16) {
  var themeSize = _ref16.themeSize,
    theme = _ref16.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["font-size:", ";padding:", ";"], theme.__hd__.tag.fontSizes.small, theme.__hd__.tag.space.smallPadding);
    case 'medium':
      return css$2(["font-size:", ";padding:", ";"], theme.__hd__.tag.fontSizes.medium, theme.__hd__.tag.space.mediumPadding);
    case 'large':
      return css$2(["font-size:", ";padding:", ";"], theme.__hd__.tag.fontSizes.large, theme.__hd__.tag.space.largePadding);
  }
}, function (_ref17) {
  var themeVariant = _ref17.themeVariant,
    theme = _ref17.theme;
  switch (themeVariant) {
    case 'basic':
      return css$2(["color:", ";border-color:", ";background:", ";"], theme.__hd__.tag.colors.defaultText, theme.__hd__.tag.colors.defaultBorder, theme.__hd__.tag.colors.defaultBackground);
    case 'filled-primary':
      return genFilledStyles('primary');
    case 'filled-success':
      return genFilledStyles('success');
    case 'filled-danger':
      return genFilledStyles('danger');
    case 'filled-warning':
      return genFilledStyles('warning');
    case 'filled-error':
      return genFilledStyles('error');
    case 'filled-archived':
      return genFilledStyles('archived');
    case 'outlined-primary':
      return genOutlinedStyles('primary');
    case 'outlined-success':
      return genOutlinedStyles('success');
    case 'outlined-danger':
      return genOutlinedStyles('danger');
    case 'outlined-warning':
      return genOutlinedStyles('warning');
    case 'outlined-error':
      return genOutlinedStyles('error');
    case 'outlined-archived':
      return genOutlinedStyles('archived');
  }
});

var InputWrapper = styled.div.withConfig({
  displayName: "StyledInput__InputWrapper",
  componentId: "sc-1a9ihj0-0"
})(["&&{display:flex;align-items:center;box-sizing:border-box;margin:0;padding:0;border:", " solid ", ";border-radius:", ";line-height:100%;font-weight:", ";", ";", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.input.borderWidths["default"];
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.input.colors.border;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.input.radii["default"];
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.input.fontWeights["default"];
}, function (_ref5) {
  var themeSize = _ref5.themeSize,
    theme = _ref5.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["height:", ";font-size:", ";"], theme.__hd__.input.sizes.small, theme.__hd__.input.fontSizes.small);
    case 'medium':
      return css$2(["height:", ";font-size:", ";"], theme.__hd__.input.sizes.medium, theme.__hd__.input.fontSizes.medium);
    case 'large':
      return css$2(["height:", ";font-size:", ";"], theme.__hd__.input.sizes.large, theme.__hd__.input.fontSizes.large);
  }
}, function (_ref6) {
  var themeState = _ref6.themeState,
    theme = _ref6.theme;
  switch (themeState) {
    case 'enabled':
      return css$2(["background:", ";&:hover{border-color:", ";}&:focus-within{outline:none;border-color:", ";box-shadow:", ";}"], theme.__hd__.input.colors.background, theme.__hd__.input.colors.focusBorder, theme.__hd__.input.colors.focusBorder, theme.__hd__.input.shadows.focus);
    case 'disabled':
      return css$2(["color:", ";border-color:", ";background:", ";cursor:not-allowed;& ", "{color:", ";border-color:", ";background:", ";& > ", "{color:", ";pointer-events:none;cursor:not-allowed;}}"], theme.__hd__.input.colors.disabledText, theme.__hd__.input.colors.border, theme.__hd__.input.colors.disabledBackground, StyledTag, theme.__hd__.input.colors.disabledText, theme.__hd__.input.colors.border, theme.__hd__.input.colors.disabledBackground, CloseButton$2, theme.__hd__.input.colors.disabledText);
    case 'invalid':
      return css$2(["background:", ";border-color:", ";&:focus-within{outline:none;border-color:", ";box-shadow:", ";}"], theme.__hd__.input.colors.background, theme.__hd__.input.colors.invalidBorder, theme.__hd__.input.colors.invalidBorder, theme.__hd__.input.shadows.invalidFocus);
  }
});
var StyledInput$3 = styled.input.withConfig({
  displayName: "StyledInput",
  componentId: "sc-1a9ihj0-1"
})(["&&{flex:1;height:100%;overflow:hidden;margin:0;padding:0;border:none;border-radius:", ";font-weight:inherit;font-size:inherit;color:", ";background-color:", ";}&&:focus{outline:none;}&&:disabled{cursor:not-allowed;color:", ";background-color:", ";}&&::placeholder{color:", ";}&&{", ";", ";}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.input.radii["default"];
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.input.colors.text;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.input.colors.background;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.input.colors.disabledText;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.input.colors.disabledBackground;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.input.colors.disabledText;
}, function (_ref13) {
  var themePaddingLeft = _ref13.themePaddingLeft,
    theme = _ref13.theme;
  switch (themePaddingLeft) {
    case 'small':
      return css$2(["padding-left:", ";"], theme.__hd__.input.space.smallPadding);
    case 'medium':
      return css$2(["padding-left:", ";"], theme.__hd__.input.space.mediumPadding);
    case 'large':
      return css$2(["padding-left:", ";"], theme.__hd__.input.space.largePadding);
    case 'none':
      return css$2(["padding-left:0;"]);
  }
}, function (_ref14) {
  var themePaddingRight = _ref14.themePaddingRight,
    theme = _ref14.theme;
  switch (themePaddingRight) {
    case 'small':
      return css$2(["padding-right:", ";"], theme.__hd__.input.space.smallPadding);
    case 'medium':
      return css$2(["padding-right:", ";"], theme.__hd__.input.space.mediumPadding);
    case 'large':
      return css$2(["padding-right:", ";"], theme.__hd__.input.space.largePadding);
    case 'none':
      return css$2(["padding-right:0;"]);
  }
});
var AffixWrapper = styled.span.withConfig({
  displayName: "StyledInput__AffixWrapper",
  componentId: "sc-1a9ihj0-2"
})(["&&{margin:0;padding:0;}&& > *{display:block;}&&{", ";", ";}"], function (_ref15) {
  var themeMarginLeft = _ref15.themeMarginLeft;
  switch (themeMarginLeft) {
    case 'auto':
      return css$2(["margin-left:auto;"]);
    case 'none':
      return css$2([""]);
  }
}, function (_ref16) {
  var themeSize = _ref16.themeSize,
    theme = _ref16.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding-left:", ";padding-right:", ";"], theme.__hd__.input.space.smallPadding, theme.__hd__.input.space.smallPadding);
    case 'medium':
      return css$2(["padding-left:", ";padding-right:", ";"], theme.__hd__.input.space.mediumPadding, theme.__hd__.input.space.mediumPadding);
    case 'large':
      return css$2(["padding-left:", ";padding-right:", ";"], theme.__hd__.input.space.largePadding, theme.__hd__.input.space.largePadding);
  }
});
var StyledInput$4 = StyledInput$3;

var Affix = function Affix(_ref) {
  var affix = _ref.affix,
    themeSize = _ref.themeSize,
    _ref$themeMarginLeft = _ref.themeMarginLeft,
    themeMarginLeft = _ref$themeMarginLeft === void 0 ? 'none' : _ref$themeMarginLeft;
  var renderWithWrapper = function renderWithWrapper(children) {
    return /*#__PURE__*/React__default.createElement(AffixWrapper, {
      themeSize: themeSize,
      themeMarginLeft: themeMarginLeft
    }, children);
  };
  return pipe(affix, function (value) {
    if (typeof value === 'string') {
      return some(left$1(value));
    }
    if ( /*#__PURE__*/React__default.isValidElement(value)) {
      return some(right$1(value));
    }
    return none$3;
  }, map$2(match$2A(function (value) {
    return renderWithWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: value,
      intent: "subdued-text"
    }));
  }, renderWithWrapper)), getOrElse(function () {
    return null;
  }));
};
var Affix$1 = Affix;

var getThemeState$2 = function getThemeState(_ref) {
  var disabled = _ref.disabled,
    invalid = _ref.invalid;
  if (disabled === true) {
    return 'disabled';
  }
  return invalid === true ? 'invalid' : 'enabled';
};

var INPUT_DISPLAY_NAME = 'Input';
var Input$1 = /*#__PURE__*/forwardRef(function (_a, forwardedRef) {
  var autoFocus = _a.autoFocus,
    type = _a.type,
    autoComplete = _a.autoComplete,
    disabled = _a.disabled,
    invalid = _a.invalid,
    name = _a.name,
    onBlur = _a.onBlur,
    onChange = _a.onChange,
    onFocus = _a.onFocus,
    onClick = _a.onClick,
    placeholder = _a.placeholder,
    prefix = _a.prefix,
    readonly = _a.readonly,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    suffix = _a.suffix,
    value = _a.value,
    id = _a.id,
    className = _a.className,
    dataTestId = _a['data-test-id'],
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    inputAttrs = __rest(_a, ["autoFocus", "type", "autoComplete", "disabled", "invalid", "name", "onBlur", "onChange", "onFocus", "onClick", "placeholder", "prefix", "readonly", "size", "suffix", "value", "id", "className", 'data-test-id', "style", "sx"]);
  return /*#__PURE__*/React__default.createElement(InputWrapper, {
    themeSize: size,
    themeState: getThemeState$2({
      disabled: disabled,
      invalid: invalid
    }),
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Affix$1, {
    affix: prefix,
    themeSize: size
  }), /*#__PURE__*/React__default.createElement(StyledInput$4
  // XXX: Intentionally having spreading props to accept a11y props from Select component
  , Object.assign({}, inputAttrs, {
    type: type,
    autoFocus: autoFocus,
    autoComplete: autoComplete,
    value: value,
    onChange: onChange,
    onBlur: onBlur,
    onFocus: onFocus,
    onClick: onClick,
    disabled: disabled,
    placeholder: placeholder,
    readOnly: readonly,
    ref: forwardedRef,
    name: name,
    id: id,
    themePaddingLeft: prefix === undefined ? size : 'none',
    themePaddingRight: suffix === undefined ? size : 'none'
  })), /*#__PURE__*/React__default.createElement(Affix$1, {
    affix: suffix,
    themeSize: size,
    themeMarginLeft: "auto"
  }));
});
Input$1.displayName = INPUT_DISPLAY_NAME;
var Input$2 = Input$1;

var StyledTextArea = styled.textarea.withConfig({
  displayName: "StyledTextArea",
  componentId: "sc-1wv7kre-0"
})(["&&{width:100%;height:100%;margin:0;padding:0;box-sizing:border-box;border:", " solid ", ";border-radius:", ";font-weight:", ";color:", ";}&&::placeholder{color:", ";}&&{", ";", ";", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.input.borderWidths["default"];
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.input.colors.border;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.input.radii["default"];
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.input.fontWeights["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.input.colors.text;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.input.colors.disabledText;
}, function (_ref7) {
  var autoResize = _ref7.autoResize;
  return autoResize === true ? "\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        resize: none;\n        overflow: hidden;\n      " : "resize: vertical";
}, function (_ref8) {
  var themeState = _ref8.themeState,
    theme = _ref8.theme;
  switch (themeState) {
    case 'enabled':
      return css$2(["background:", ";&:hover{border-color:", ";}&:focus{outline:none;border-color:", ";box-shadow:", ";}"], theme.__hd__.input.colors.background, theme.__hd__.input.colors.focusBorder, theme.__hd__.input.colors.focusBorder, theme.__hd__.input.shadows.focus);
    case 'disabled':
      return css$2(["color:", ";border-color:", ";background:", ";cursor:not-allowed;"], theme.__hd__.input.colors.disabledText, theme.__hd__.input.colors.border, theme.__hd__.input.colors.disabledBackground);
    case 'invalid':
      return css$2(["background:", ";border-color:", ";&:focus-within{outline:none;border-color:", ";box-shadow:", ";}"], theme.__hd__.input.colors.background, theme.__hd__.input.colors.invalidBorder, theme.__hd__.input.colors.invalidBorder, theme.__hd__.input.shadows.invalidFocus);
  }
}, function (_ref9) {
  var themeSize = _ref9.themeSize,
    theme = _ref9.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding:", ";min-height:", ";font-size:", ";line-height:", ";"], theme.__hd__.input.space.smallPadding, theme.__hd__.input.sizes.textAreaSmall, theme.__hd__.input.fontSizes.small, theme.__hd__.input.lineHeights.small);
    case 'medium':
      return css$2(["padding:", ";min-height:", ";font-size:", ";line-height:", ";"], theme.__hd__.input.space.mediumPadding, theme.__hd__.input.sizes.textAreaMedium, theme.__hd__.input.fontSizes.medium, theme.__hd__.input.lineHeights.medium);
    case 'large':
      return css$2(["padding:", ";min-height:", ";font-size:", ";line-height:", ";"], theme.__hd__.input.space.largePadding, theme.__hd__.input.sizes.textAreaLarge, theme.__hd__.input.fontSizes.large, theme.__hd__.input.lineHeights.large);
  }
});
var AutoResizeWrapper = styled.div.withConfig({
  displayName: "StyledTextArea__AutoResizeWrapper",
  componentId: "sc-1wv7kre-1"
})(["&&{position:relative;margin:0;padding:0;}"]);
var HiddenTextArea = styled.div.withConfig({
  displayName: "StyledTextArea__HiddenTextArea",
  componentId: "sc-1wv7kre-2"
})(["&&{width:100%;margin:0;padding:0;box-sizing:border-box;border:", " solid ", ";font-weight:", ";overflow-wrap:break-word;white-space:pre-line;opacity:0;", ";}"], function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.input.borderWidths["default"];
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.input.colors.border;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.input.fontWeights["default"];
}, function (_ref13) {
  var themeSize = _ref13.themeSize,
    theme = _ref13.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding:", ";min-height:", ";font-size:", ";line-height:", ";"], theme.__hd__.input.space.smallPadding, theme.__hd__.input.sizes.textAreaSmall, theme.__hd__.input.fontSizes.small, theme.__hd__.input.lineHeights.small);
    case 'medium':
      return css$2(["padding:", ";min-height:", ";font-size:", ";line-height:", ";"], theme.__hd__.input.space.mediumPadding, theme.__hd__.input.sizes.textAreaMedium, theme.__hd__.input.fontSizes.medium, theme.__hd__.input.lineHeights.medium);
    case 'large':
      return css$2(["padding:", ";min-height:", ";font-size:", ";line-height:", ";"], theme.__hd__.input.space.largePadding, theme.__hd__.input.sizes.textAreaLarge, theme.__hd__.input.fontSizes.large, theme.__hd__.input.lineHeights.large);
  }
});
var StyledTextArea$1 = StyledTextArea;

var TextArea = function TextArea(_a) {
  var value = _a.value,
    onChange = _a.onChange,
    onFocus = _a.onFocus,
    onBlur = _a.onBlur,
    _a$autoResize = _a.autoResize,
    autoResize = _a$autoResize === void 0 ? true : _a$autoResize,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    _a$invalid = _a.invalid,
    invalid = _a$invalid === void 0 ? false : _a$invalid,
    placeholder = _a.placeholder,
    name = _a.name,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    autoComplete = _a.autoComplete,
    autoFocus = _a.autoFocus,
    dataTestId = _a['data-test-id'],
    textAreaAttrs = __rest(_a, ["value", "onChange", "onFocus", "onBlur", "autoResize", "size", "disabled", "invalid", "placeholder", "name", "id", "className", "style", "sx", "autoComplete", "autoFocus", 'data-test-id']);
  var css = useCss(sx);
  var textarea = /*#__PURE__*/React__default.createElement(StyledTextArea$1, Object.assign({}, textAreaAttrs, {
    style: autoResize === false ? Object.assign(Object.assign({}, style), css) : undefined,
    value: value,
    onChange: onChange,
    placeholder: placeholder,
    disabled: disabled,
    onFocus: onFocus,
    onBlur: onBlur,
    name: name,
    id: id,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    autoResize: autoResize,
    themeState: getThemeState$2({
      disabled: disabled,
      invalid: invalid
    }),
    themeSize: size
  }));
  if (autoResize === true) {
    return /*#__PURE__*/React__default.createElement(AutoResizeWrapper, {
      className: className,
      style: Object.assign(Object.assign({}, style), css),
      "data-test-id": dataTestId
    }, /*#__PURE__*/React__default.createElement(HiddenTextArea, {
      themeSize: size
    }, pipe(value, fromUndefinedable, map$2(function (v) {
      return v.concat('\n');
    }), getOrElse(function () {
      return '';
    }))), textarea);
  }
  return textarea;
};
var TextArea$1 = TextArea;

var CompoundInput = Input$2;
CompoundInput.TextArea = TextArea$1;
var Input = CompoundInput;

var Avatar = styled.div.withConfig({
  displayName: "StyledComment__Avatar",
  componentId: "sc-l8ma3x-0"
})(["&&{margin:0;padding:0;margin-right:", ";}&& img{width:", ";height:", ";border-radius:50%;margin:0;padding:0;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.comment.space.avatarMarginRight;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.comment.sizes.avatarSize;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.comment.sizes.avatarSize;
});
var AuthorWrapper = styled.div.withConfig({
  displayName: "StyledComment__AuthorWrapper",
  componentId: "sc-l8ma3x-1"
})(["&&{margin:0;padding:0;}"]);
var Author = styled.div.withConfig({
  displayName: "StyledComment__Author",
  componentId: "sc-l8ma3x-2"
})(["&&{display:flex;align-items:center;font-weight:", ";font-size:", ";line-height:", ";color:", ";margin:0;padding:0;}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.comment.fontWeights.author;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.comment.fontSizes.author;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.comment.lineHeights.author;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.comment.colors.author;
});
var AuthorDetails = styled.div.withConfig({
  displayName: "StyledComment__AuthorDetails",
  componentId: "sc-l8ma3x-3"
})(["&&{margin:0;padding:0;font-weight:", ";font-size:", ";line-height:", ";color:", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.comment.fontWeights.authorDetails;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.comment.fontSizes.authorDetails;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.comment.lineHeights.authorDetails;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.comment.colors.authorDetails;
});
var TimeWrapper = styled.div.withConfig({
  displayName: "StyledComment__TimeWrapper",
  componentId: "sc-l8ma3x-4"
})(["&&{white-space:nowrap;font-weight:", ";font-size:", ";line-height:", ";color:", ";margin:0;padding:0;}"], function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.comment.fontWeights.time;
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.comment.fontSizes.time;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.comment.lineHeights.time;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.comment.colors.time;
});
var TimeSeparator = styled.span.withConfig({
  displayName: "StyledComment__TimeSeparator",
  componentId: "sc-l8ma3x-5"
})(["&&{margin:0;padding:", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.comment.space.timeSeparatorPadding;
});
var ContentWrapper$1 = styled.div.withConfig({
  displayName: "StyledComment__ContentWrapper",
  componentId: "sc-l8ma3x-6"
})(["&&{position:relative;margin:0;padding:0;font-weight:", ";font-size:", ";line-height:", ";flex-grow:1;color:", ";}"], function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.comment.fontWeights.content;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.comment.fontSizes.content;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.comment.lineHeights.content;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.comment.colors.content;
});
var ContentDetail = styled.div.withConfig({
  displayName: "StyledComment__ContentDetail",
  componentId: "sc-l8ma3x-7"
})(["&&{white-space:pre-wrap;margin:0;padding:0;margin-top:", ";}"], function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.comment.space.contentMarginTop;
});
var ActionsWrapper = styled.div.withConfig({
  displayName: "StyledComment__ActionsWrapper",
  componentId: "sc-l8ma3x-8"
})(["&&{position:absolute;top:0;right:0;margin:0;padding:0;", ";}"], function (_ref22) {
  var themeShown = _ref22.themeShown;
  switch (themeShown) {
    case true:
      return css$2(["display:block;"]);
    case false:
      return css$2(["display:none;"]);
  }
});
var ReactionsWrapper = styled.div.withConfig({
  displayName: "StyledComment__ReactionsWrapper",
  componentId: "sc-l8ma3x-9"
})(["&&{margin:0;padding:0;margin-top:", ";}"], function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.comment.space.reactionMarginTop;
});
var CommentWrapper = styled.div.withConfig({
  displayName: "StyledComment__CommentWrapper",
  componentId: "sc-l8ma3x-10"
})(["&&{margin:0;padding:0;}&&:not(:last-child){margin-bottom:", ";}"], function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.comment.space.marginBottom;
});
var CommentInner = styled.div.withConfig({
  displayName: "StyledComment__CommentInner",
  componentId: "sc-l8ma3x-11"
})(["&&{display:flex;padding:", ";border-radius:", ";margin:0;}&&:hover{background-color:", ";}"], function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.comment.space.padding;
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.comment.radii.container;
}, function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.comment.colors.highlight;
});
var NestedCommentWrapper = styled.div.withConfig({
  displayName: "StyledComment__NestedCommentWrapper",
  componentId: "sc-l8ma3x-12"
})(["&&{margin:", ";padding:0;}"], function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.comment.space.nestedMargin;
});
var EditorContainer = styled.div.withConfig({
  displayName: "StyledComment__EditorContainer",
  componentId: "sc-l8ma3x-13"
})(["&&{display:flex;margin:0;padding:0;}&& ", "{margin-left:", ";}"], Avatar, function (_ref29) {
  var theme = _ref29.theme;
  return theme.__hd__.comment.space.avatarMarginLeft;
});
var EditorWrapper = styled.div.withConfig({
  displayName: "StyledComment__EditorWrapper",
  componentId: "sc-l8ma3x-14"
})(["&&{margin:0;padding:0;border:", " solid ", ";border-radius:", ";width:0;flex-grow:1;flex-shrink:1;color:", ";}&&:hover{border-color:", ";}&&:focus-within{outline:none;border-color:", ";box-shadow:", ";}&& ", "{border:none;box-shadow:none;}"], function (_ref30) {
  var theme = _ref30.theme;
  return theme.__hd__.input.borderWidths["default"];
}, function (_ref31) {
  var theme = _ref31.theme;
  return theme.__hd__.input.colors.border;
}, function (_ref32) {
  var theme = _ref32.theme;
  return theme.__hd__.input.radii["default"];
}, function (_ref33) {
  var theme = _ref33.theme;
  return theme.__hd__.comment.colors.content;
}, function (_ref34) {
  var theme = _ref34.theme;
  return theme.__hd__.input.colors.focusBorder;
}, function (_ref35) {
  var theme = _ref35.theme;
  return theme.__hd__.input.colors.focusBorder;
}, function (_ref36) {
  var theme = _ref36.theme;
  return theme.__hd__.input.shadows.focus;
}, StyledTextArea$1);
var EditorActionsWrapper = styled.div.withConfig({
  displayName: "StyledComment__EditorActionsWrapper",
  componentId: "sc-l8ma3x-15"
})(["&&{margin:0;padding:", ";display:flex;flex-direction:row-reverse;align-items:flex-end;justify-content:space-between;}"], function (_ref37) {
  var theme = _ref37.theme;
  return theme.__hd__.comment.space.editorActionsPadding;
});

var Editor = function Editor(_ref) {
  var avatar = _ref.avatar,
    onChange = _ref.onChange,
    onSubmit = _ref.onSubmit,
    _ref$submitting = _ref.submitting,
    submitting = _ref$submitting === void 0 ? false : _ref$submitting,
    value = _ref.value,
    actions = _ref.actions;
  var avatarElement = avatar !== undefined && /*#__PURE__*/React__default.createElement(Avatar, null, typeof avatar === 'string' ? /*#__PURE__*/React__default.createElement("img", {
    src: avatar,
    alt: "comment-avatar"
  }) : avatar);
  var actionsElement = /*#__PURE__*/React__default.createElement(EditorActionsWrapper, null, submitting === true ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "loading",
    spin: true,
    size: "medium",
    intent: "primary"
  }) : /*#__PURE__*/React__default.createElement(Button.Icon, {
    type: "submit",
    intent: "primary",
    onClick: onSubmit,
    size: "large",
    icon: "send",
    "data-test-id": "submit-comment-btn"
  }), actions !== undefined && actions);
  return /*#__PURE__*/React__default.createElement(EditorContainer, null, avatarElement, /*#__PURE__*/React__default.createElement(EditorWrapper, null, /*#__PURE__*/React__default.createElement(Input.TextArea, {
    onChange: onChange,
    value: value,
    autoResize: true
  }), actionsElement));
};
var Editor$1 = Editor;

var Comment = function Comment(_ref) {
  var avatar = _ref.avatar,
    author = _ref.author,
    authorDetails = _ref.authorDetails,
    datetime = _ref.datetime,
    content = _ref.content,
    children = _ref.children,
    actions = _ref.actions,
    reactions = _ref.reactions,
    _ref$alwaysShowAction = _ref.alwaysShowActions,
    alwaysShowActions = _ref$alwaysShowAction === void 0 ? false : _ref$alwaysShowAction,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    actionsShown = _useState2[0],
    setActionsShown = _useState2[1];
  var renderNestedComments = function renderNestedComments(nestedChildren) {
    return /*#__PURE__*/React__default.createElement(NestedCommentWrapper, null, nestedChildren);
  };
  var avatarElement = avatar !== undefined && /*#__PURE__*/React__default.createElement(Avatar, null, typeof avatar === 'string' ? /*#__PURE__*/React__default.createElement("img", {
    src: avatar,
    alt: "comment-avatar"
  }) : avatar);
  var authorElement = /*#__PURE__*/React__default.createElement(AuthorWrapper, null, /*#__PURE__*/React__default.createElement(Author, null, author, datetime !== undefined && /*#__PURE__*/React__default.createElement(TimeWrapper, null, /*#__PURE__*/React__default.createElement(TimeSeparator, null, "-"), datetime)), authorDetails !== undefined && /*#__PURE__*/React__default.createElement(AuthorDetails, null, authorDetails));
  var contentElement = /*#__PURE__*/React__default.createElement(ContentWrapper$1, null, authorElement, /*#__PURE__*/React__default.createElement(ContentDetail, null, content), actions !== undefined && /*#__PURE__*/React__default.createElement(ActionsWrapper, {
    themeShown: alwaysShowActions || actionsShown
  }, actions), reactions !== undefined && /*#__PURE__*/React__default.createElement(ReactionsWrapper, null, reactions));
  return /*#__PURE__*/React__default.createElement(CommentWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(CommentInner, {
    "data-test-id": "inner-comment",
    onMouseEnter: function onMouseEnter() {
      return setActionsShown(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setActionsShown(false);
    }
  }, avatarElement, contentElement), children !== undefined ? renderNestedComments(children) : null);
};
Comment.Editor = Editor$1;
var Comment$1 = Comment;

var PanelKeyframes = keyframes(["from{transform:translateX(100%);}to{transform:translateX(0);}"]);
var OverlayKeyframes = function OverlayKeyframes(theme) {
  return keyframes(["from{background-color:transparent;}to{background-color:", ";}"], theme.__hd__.contextPanel.colors.overlayBackground);
};
var StyledContextPanelContainer = styled(Box$1).withConfig({
  displayName: "StyledContextPanel__StyledContextPanelContainer",
  componentId: "sc-jfg6u4-0"
})(["&&{position:fixed;top:0;left:0;width:100%;height:100vh;overflow:hidden;z-index:9999;}"]);
var StyledContextPanelOverlay = styled.div.withConfig({
  displayName: "StyledContextPanel__StyledContextPanelOverlay",
  componentId: "sc-jfg6u4-1"
})(["&&{position:absolute;top:0;left:0;width:100%;height:100vh;animation:", " 0.2s linear forwards;}"], function (_ref) {
  var theme = _ref.theme;
  return OverlayKeyframes(theme);
});
var StyledContextPanel = styled(Box$1).withConfig({
  displayName: "StyledContextPanel",
  componentId: "sc-jfg6u4-2"
})(["&&{position:absolute;height:100vh;width:max-content;max-width:100%;right:0;top:0;background-color:", ";border-radius:", ";padding:", ";will-change:transform;animation:", " 0.2s linear;display:flex;flex-direction:column;justify-content:", ";overflow:hidden;overflow-y:auto;scrollbar-width:thin;scrollbar-color:", ";}&&::-webkit-scrollbar{width:", ";}&&::-webkit-scrollbar-track{background:transparent;margin:", ";}&&::-webkit-scrollbar-thumb{background:", ";border-radius:", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.contextPanel.colors.contextPanelBackground;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.contextPanel.borderRadius.contextPanel;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.contextPanel.spaces.contextPanelPadding;
}, PanelKeyframes, function (_ref5) {
  var themeHasFooter = _ref5.themeHasFooter;
  return themeHasFooter ? 'space-between' : 'flex-start';
}, function (_ref6) {
  var theme = _ref6.theme;
  return "".concat(theme.__hd__.contextPanel.colors.scrollbarThumbBackground, " transparent");
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.contextPanel.sizes.scrollbarWidth;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.contextPanel.spaces.scrollbarTrackMargin;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.contextPanel.colors.scrollbarThumbBackground;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.contextPanel.borderRadius.scrollbar;
});
var StyledContextPanelHeader = styled(Box$1).withConfig({
  displayName: "StyledContextPanel__StyledContextPanelHeader",
  componentId: "sc-jfg6u4-3"
})(["&&{display:grid;margin-bottom:", ";grid-template-columns:repeat(auto-fit,minmax(100px,1fr));align-items:center;font-size:", ";font-weight:", ";line-height:", ";}"], function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.contextPanel.spaces.contextPanelHeaderMarginBottom;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.contextPanel.fontSizes.header;
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.contextPanel.fontWeights.header;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.contextPanel.lineHeights.header;
});
var StyledContextPanelBody = styled(Box$1).withConfig({
  displayName: "StyledContextPanel__StyledContextPanelBody",
  componentId: "sc-jfg6u4-4"
})(["&&{flex:1;font-size:", ";font-weight:", ";line-height:", ";margin-top:", ";margin-bottom:", ";}"], function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.contextPanel.fontSizes.body;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.contextPanel.fontWeights.body;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.contextPanel.lineHeights.body;
}, function (_ref18) {
  var themeHasHeader = _ref18.themeHasHeader,
    theme = _ref18.theme;
  return themeHasHeader ? theme.__hd__.contextPanel.spaces.contextPanelBodyMarginTop : '0';
}, function (_ref19) {
  var themeHasFooter = _ref19.themeHasFooter,
    theme = _ref19.theme;
  return themeHasFooter ? theme.__hd__.contextPanel.spaces.contextPanelBodyMarginBottom : '0';
});
var StyledContextPanelFooter = styled(Box$1).withConfig({
  displayName: "StyledContextPanel__StyledContextPanelFooter",
  componentId: "sc-jfg6u4-5"
})(["&&{position:sticky;bottom:0;left:0;width:100%;padding:", ";background-color:", ";}"], function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.contextPanel.spaces.contextPanelFooterPadding;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.contextPanel.colors.contextPanelBackground;
});
var StyledContextPanelCloseIcon = styled(IconButton$1).withConfig({
  displayName: "StyledContextPanel__StyledContextPanelCloseIcon",
  componentId: "sc-jfg6u4-6"
})(["&&{justify-self:flex-end;}"]);

var ContextPanelContext = /*#__PURE__*/createContext(undefined);
var ContextPanelProvider = function ContextPanelProvider(_ref) {
  var children = _ref.children;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    hasHeader = _useState2[0],
    setHasHeader = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    hasFooter = _useState4[0],
    setHasFooter = _useState4[1];
  var value = useMemo(function () {
    return {
      hasHeader: hasHeader,
      hasFooter: hasFooter,
      setHasHeader: setHasHeader,
      setHasFooter: setHasFooter
    };
  }, [hasHeader, hasFooter, setHasHeader, setHasFooter]);
  return /*#__PURE__*/React__default.createElement(ContextPanelContext.Provider, {
    value: value
  }, children(value));
};
var useContextPanelContext = function useContextPanelContext() {
  var context = useContext(ContextPanelContext);
  if (context === undefined) {
    throw new Error('useContextPanelContext must be used within a ContextPanelProvider');
  }
  return context;
};
var ContextPanelProvider$1 = ContextPanelProvider;

var ContextPanelHeader = function ContextPanelHeader(_ref) {
  var children = _ref.children,
    className = _ref.className,
    id = _ref.id,
    style = _ref.style,
    sx = _ref.sx,
    _ref$dataTestId = _ref['data-test-id'],
    dataTestId = _ref$dataTestId === void 0 ? 'context-panel-header' : _ref$dataTestId;
  var _useContextPanelConte = useContextPanelContext(),
    setHasHeader = _useContextPanelConte.setHasHeader;
  useEffect(function () {
    setHasHeader(true);
    return function () {
      setHasHeader(false);
    };
  }, [setHasHeader]);
  return /*#__PURE__*/React__default.createElement(StyledContextPanelHeader, {
    className: className,
    id: id,
    style: style,
    sx: sx,
    "data-test-id": dataTestId
  }, children);
};
var ContextPanelHeader$1 = ContextPanelHeader;

var ContextPanelFooter = function ContextPanelFooter(_ref) {
  var children = _ref.children,
    className = _ref.className,
    id = _ref.id,
    style = _ref.style,
    sx = _ref.sx,
    _ref$dataTestId = _ref['data-test-id'],
    dataTestId = _ref$dataTestId === void 0 ? 'context-panel-footer' : _ref$dataTestId;
  var _useContextPanelConte = useContextPanelContext(),
    setHasFooter = _useContextPanelConte.setHasFooter;
  useEffect(function () {
    setHasFooter(true);
    return function () {
      setHasFooter(false);
    };
  }, [setHasFooter]);
  return /*#__PURE__*/React__default.createElement(StyledContextPanelFooter, {
    className: className,
    id: id,
    style: style,
    sx: sx,
    "data-test-id": dataTestId
  }, children);
};
var ContextPanelFooter$1 = ContextPanelFooter;

var ContextPanelBody = function ContextPanelBody(_ref) {
  var children = _ref.children,
    className = _ref.className,
    id = _ref.id,
    style = _ref.style,
    sx = _ref.sx,
    _ref$dataTestId = _ref['data-test-id'],
    dataTestId = _ref$dataTestId === void 0 ? 'context-panel-body' : _ref$dataTestId;
  var _useContextPanelConte = useContextPanelContext(),
    hasHeader = _useContextPanelConte.hasHeader,
    hasFooter = _useContextPanelConte.hasFooter;
  return /*#__PURE__*/React__default.createElement(StyledContextPanelBody, {
    themeHasFooter: hasFooter,
    themeHasHeader: hasHeader,
    className: className,
    id: id,
    style: style,
    sx: sx,
    "data-test-id": dataTestId
  }, children);
};
var ContextPanelBody$1 = ContextPanelBody;

var ContextPanelCloseButton = function ContextPanelCloseButton(props) {
  return /*#__PURE__*/React__default.createElement(StyledContextPanelCloseIcon, Object.assign({
    icon: "cancel",
    size: "small"
  }, props));
};
var ContextPanelCloseButton$1 = ContextPanelCloseButton;

var useScrollLock = function useScrollLock(lock) {
  useEffect(function () {
    var isLockAlready = document.body.style.position === 'fixed';
    if (lock && !isLockAlready) {
      var bodyWidth = document.body.offsetWidth;
      var _window = window,
        scrollY = _window.scrollY;
      Object.assign(document.body.style, {
        position: 'fixed',
        top: "-".concat(scrollY, "px"),
        left: 0,
        right: 0
      });
      var fixedBodyWidth = document.body.offsetWidth;
      Object.assign(document.body.style, {
        right: "".concat(fixedBodyWidth - bodyWidth, "px")
      });
      return function () {
        Object.assign(document.body.style, {
          position: '',
          top: '',
          left: '',
          right: ''
        });
        window.scrollTo(0, scrollY);
      };
    }
  }, [lock]);
};

var ContextPanel = function ContextPanel(_ref) {
  var children = _ref.children,
    _ref$withPortal = _ref.withPortal,
    withPortal = _ref$withPortal === void 0 ? false : _ref$withPortal,
    open = _ref.open,
    className = _ref.className,
    id = _ref.id,
    style = _ref.style,
    sx = _ref.sx,
    onClose = _ref.onClose,
    _ref$canOutsideClickC = _ref.canOutsideClickClose,
    canOutsideClickClose = _ref$canOutsideClickC === void 0 ? true : _ref$canOutsideClickC,
    _ref$dataTestId = _ref['data-test-id'],
    dataTestId = _ref$dataTestId === void 0 ? 'context-panel' : _ref$dataTestId,
    title = _ref.title,
    footer = _ref.footer,
    body = _ref.body;
  useScrollLock(open);
  var handleClickOverlay = function handleClickOverlay(e) {
    e.stopPropagation();
    if (canOutsideClickClose) {
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  return /*#__PURE__*/React__default.createElement(Portal$1, {
    withPortal: withPortal,
    container: getDefaultPortalContainer()
  }, /*#__PURE__*/React__default.createElement(ContextPanelProvider$1, null, function (_ref2) {
    var hasFooter = _ref2.hasFooter;
    return open && /*#__PURE__*/React__default.createElement(StyledContextPanelContainer, {
      "data-test-id": "".concat(dataTestId, "-container")
    }, /*#__PURE__*/React__default.createElement(StyledContextPanelOverlay, {
      "data-test-id": "".concat(dataTestId, "-overlay"),
      onClick: handleClickOverlay
    }), /*#__PURE__*/React__default.createElement(StyledContextPanel, {
      themeHasFooter: hasFooter,
      themeOpen: open,
      className: className,
      id: id,
      style: style,
      sx: sx,
      "data-test-id": "".concat(dataTestId, "-context-panel")
    }, !!title && /*#__PURE__*/React__default.createElement(ContextPanelHeader$1, {
      "data-test-id": "".concat(dataTestId, "-header")
    }, title, /*#__PURE__*/React__default.createElement(ContextPanelCloseButton$1, {
      "data-test-id": "".concat(dataTestId, "-close-button"),
      onClick: function onClick(e) {
        e.preventDefault();
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    })), !!body && /*#__PURE__*/React__default.createElement(ContextPanelBody$1, {
      "data-test-id": "".concat(dataTestId, "-body")
    }, body), !!footer && /*#__PURE__*/React__default.createElement(ContextPanelFooter$1, {
      "data-test-id": "".concat(dataTestId, "-footer")
    }, footer), children));
  }));
};
var ContextPanel$1 = ContextPanel;

var index = Object.assign(ContextPanel$1, {
  Header: ContextPanelHeader$1,
  Footer: ContextPanelFooter$1,
  Body: ContextPanelBody$1,
  CloseButton: ContextPanelCloseButton$1
});

function convertToFP(fn, arity) {
  var a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  if (a.length >= arity) {
    return fn.apply(null, a.slice(0, arity).reverse());
  }
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return convertToFP(fn, arity, a.concat(args));
  };
}

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var parse = convertToFP(parse$1, 3);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var isValid = convertToFP(isValid$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var formatTime = convertToFP(format$1, 2);

var DropdownWrapper = styled.div.withConfig({
  displayName: "StyledDropdown__DropdownWrapper",
  componentId: "sc-1hde6qs-0"
})(["&&{position:relative;display:", ";margin:0;padding:0;}"], function (_ref) {
  var themeDisplay = _ref.themeDisplay;
  return themeDisplay;
});
var DropdownPopper = styled.div.withConfig({
  displayName: "StyledDropdown__DropdownPopper",
  componentId: "sc-1hde6qs-1"
})(["&&{visibility:", ";z-index:99;margin:0;padding:0;}"], function (_ref2) {
  var open = _ref2.open;
  return open === true ? 'visible' : 'hidden';
});
var ContentWrapper = styled.div.withConfig({
  displayName: "StyledDropdown__ContentWrapper",
  componentId: "sc-1hde6qs-2"
})(["&&{box-shadow:", ";border-radius:", ";overflow:hidden;background:", ";margin:0;padding:0;}&& > *:first-child{border-top-right-radius:", ";border-top-left-radius:", ";}&& > *:last-child{border-bottom-right-radius:", ";border-bottom-left-radius:", ";}"], function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.dropdown.shadows["default"];
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.dropdown.radii["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.dropdown.colors.background;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.dropdown.radii["default"];
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.dropdown.radii["default"];
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.dropdown.radii["default"];
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.dropdown.radii["default"];
});

var PLACEMENT_MAP = {
  'bottom-left': 'bottom-start',
  'bottom-right': 'bottom-end'
};
var DISPLAY_PROPERTIES = ['inline-block', 'block'];
var FALLBACK_PLACEMENT_MAP = {
  'bottom-left': ['bottom-end', 'top-start', 'top-end'],
  'bottom-right': ['bottom-start', 'top-end', 'top-start']
};
var checkIfDropdownContainTarget = function checkIfDropdownContainTarget(dropdownWrapperElement, target) {
  if (dropdownWrapperElement === null) {
    return undefined;
  }
  return dropdownWrapperElement.contains(target);
};
var Dropdown = function Dropdown(_ref) {
  var open = _ref.open,
    content = _ref.content,
    target = _ref.target,
    _ref$keepContentMount = _ref.keepContentMounted,
    keepContentMounted = _ref$keepContentMount === void 0 ? false : _ref$keepContentMount,
    _ref$placement = _ref.placement,
    placement = _ref$placement === void 0 ? 'bottom-left' : _ref$placement,
    _ref$display = _ref.display,
    display = _ref$display === void 0 ? 'inline-block' : _ref$display,
    onOpen = _ref.onOpen,
    onClose = _ref.onClose,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  assert(DISPLAY_PROPERTIES.includes(display), "[Dropdown] display:".concat(display, " isn't among the supported values (block, inline-block)"));
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    wrapperElement = _useState2[0],
    setWrapperElement = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    dropdownElement = _useState4[0],
    setDropdownElement = _useState4[1];
  var _useState5 = useState(),
    _useState6 = _slicedToArray(_useState5, 2),
    dropDownMinWidth = _useState6[0],
    setDropdownMinWidth = _useState6[1];
  var theme = useTheme();
  var _useFloating = useFloating({
      elements: {
        reference: wrapperElement,
        floating: dropdownElement
      },
      strategy: 'fixed',
      placement: PLACEMENT_MAP[placement],
      transform: false,
      middleware: [offset(theme.__hd__.dropdown.space.margin), flip({
        fallbackPlacements: FALLBACK_PLACEMENT_MAP[placement]
      })],
      whileElementsMounted: autoUpdate
    }),
    floatingStyles = _useFloating.floatingStyles,
    update = _useFloating.update;
  var clickOutside = useCallback(function (e) {
    var clickInWrapper = checkIfDropdownContainTarget(wrapperElement, e.target);
    if (clickInWrapper === false) {
      onClose();
    }
  }, [onClose, wrapperElement]);
  var wrapperResizeCallback = useCallback(function (_ref2) {
    var width = _ref2.width;
    setDropdownMinWidth(width);
  }, [setDropdownMinWidth, open]);
  useEffect(function () {
    if (open === true) {
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
      update();
    }
  }, [open, update]);
  useEffect(function () {
    if (open === true) {
      document.addEventListener('click', clickOutside, true);
    }
    return function () {
      document.removeEventListener('click', clickOutside, true);
    };
  }, [open, clickOutside]);
  useResizeObserver(wrapperResizeCallback, wrapperElement);
  var css = useCss(sx);
  return /*#__PURE__*/React__default.createElement(DropdownWrapper, {
    ref: setWrapperElement,
    themeDisplay: display
  }, target, (open === true || keepContentMounted === true) && /*#__PURE__*/React__default.createElement(DropdownPopper, {
    ref: setDropdownElement,
    style: floatingStyles,
    open: open
  }, /*#__PURE__*/React__default.createElement(ContentWrapper, {
    style: Object.assign(Object.assign({
      minWidth: dropDownMinWidth
    }, style), css),
    id: id,
    className: className,
    "data-test-id": dataTestId
  }, content)));
};
var Dropdown$1 = Dropdown;

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var getDate = convertToFP(getDate$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var getMonth = convertToFP(getMonth$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var getYear = convertToFP(getYear$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var addYears = convertToFP(addYears$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var subYears = convertToFP(subYears$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var addMonths = convertToFP(addMonths$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var subMonths = convertToFP(subMonths$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var setMonth = convertToFP(setMonth$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var setYear = convertToFP(setYear$1, 2);

function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.indexOf(n) >= 0) continue;
    t[n] = r[n];
  }
  return t;
}

function _extends$5() {
  return _extends$5 = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends$5.apply(null, arguments);
}

function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}

function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}

var propTypes$2 = {exports: {}};

var reactIs$1 = {exports: {}};

var reactIs_production_min$1 = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$1 = "function" === typeof Symbol && Symbol.for,
  c$1 = b$1 ? Symbol.for("react.element") : 60103,
  d$1 = b$1 ? Symbol.for("react.portal") : 60106,
  e$2 = b$1 ? Symbol.for("react.fragment") : 60107,
  f$1 = b$1 ? Symbol.for("react.strict_mode") : 60108,
  g$1 = b$1 ? Symbol.for("react.profiler") : 60114,
  h$1 = b$1 ? Symbol.for("react.provider") : 60109,
  k$1 = b$1 ? Symbol.for("react.context") : 60110,
  l$2 = b$1 ? Symbol.for("react.async_mode") : 60111,
  m$1 = b$1 ? Symbol.for("react.concurrent_mode") : 60111,
  n$2 = b$1 ? Symbol.for("react.forward_ref") : 60112,
  p$1 = b$1 ? Symbol.for("react.suspense") : 60113,
  q$1 = b$1 ? Symbol.for("react.suspense_list") : 60120,
  r$1 = b$1 ? Symbol.for("react.memo") : 60115,
  t$2 = b$1 ? Symbol.for("react.lazy") : 60116,
  v$1 = b$1 ? Symbol.for("react.block") : 60121,
  w = b$1 ? Symbol.for("react.fundamental") : 60117,
  x = b$1 ? Symbol.for("react.responder") : 60118,
  y = b$1 ? Symbol.for("react.scope") : 60119;
function z(a) {
  if ("object" === typeof a && null !== a) {
    var u = a.$$typeof;
    switch (u) {
      case c$1:
        switch (a = a.type, a) {
          case l$2:
          case m$1:
          case e$2:
          case g$1:
          case f$1:
          case p$1:
            return a;
          default:
            switch (a = a && a.$$typeof, a) {
              case k$1:
              case n$2:
              case t$2:
              case r$1:
              case h$1:
                return a;
              default:
                return u;
            }
        }
      case d$1:
        return u;
    }
  }
}
function A(a) {
  return z(a) === m$1;
}
reactIs_production_min$1.AsyncMode = l$2;
reactIs_production_min$1.ConcurrentMode = m$1;
reactIs_production_min$1.ContextConsumer = k$1;
reactIs_production_min$1.ContextProvider = h$1;
reactIs_production_min$1.Element = c$1;
reactIs_production_min$1.ForwardRef = n$2;
reactIs_production_min$1.Fragment = e$2;
reactIs_production_min$1.Lazy = t$2;
reactIs_production_min$1.Memo = r$1;
reactIs_production_min$1.Portal = d$1;
reactIs_production_min$1.Profiler = g$1;
reactIs_production_min$1.StrictMode = f$1;
reactIs_production_min$1.Suspense = p$1;
reactIs_production_min$1.isAsyncMode = function (a) {
  return A(a) || z(a) === l$2;
};
reactIs_production_min$1.isConcurrentMode = A;
reactIs_production_min$1.isContextConsumer = function (a) {
  return z(a) === k$1;
};
reactIs_production_min$1.isContextProvider = function (a) {
  return z(a) === h$1;
};
reactIs_production_min$1.isElement = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === c$1;
};
reactIs_production_min$1.isForwardRef = function (a) {
  return z(a) === n$2;
};
reactIs_production_min$1.isFragment = function (a) {
  return z(a) === e$2;
};
reactIs_production_min$1.isLazy = function (a) {
  return z(a) === t$2;
};
reactIs_production_min$1.isMemo = function (a) {
  return z(a) === r$1;
};
reactIs_production_min$1.isPortal = function (a) {
  return z(a) === d$1;
};
reactIs_production_min$1.isProfiler = function (a) {
  return z(a) === g$1;
};
reactIs_production_min$1.isStrictMode = function (a) {
  return z(a) === f$1;
};
reactIs_production_min$1.isSuspense = function (a) {
  return z(a) === p$1;
};
reactIs_production_min$1.isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e$2 || a === m$1 || a === g$1 || a === f$1 || a === p$1 || a === q$1 || "object" === typeof a && null !== a && (a.$$typeof === t$2 || a.$$typeof === r$1 || a.$$typeof === h$1 || a.$$typeof === k$1 || a.$$typeof === n$2 || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v$1);
};
reactIs_production_min$1.typeOf = z;

var reactIs_development$1 = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (process.env.NODE_ENV !== "production") {
  (function () {

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;
            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;
                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode

    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    reactIs_development$1.AsyncMode = AsyncMode;
    reactIs_development$1.ConcurrentMode = ConcurrentMode;
    reactIs_development$1.ContextConsumer = ContextConsumer;
    reactIs_development$1.ContextProvider = ContextProvider;
    reactIs_development$1.Element = Element;
    reactIs_development$1.ForwardRef = ForwardRef;
    reactIs_development$1.Fragment = Fragment;
    reactIs_development$1.Lazy = Lazy;
    reactIs_development$1.Memo = Memo;
    reactIs_development$1.Portal = Portal;
    reactIs_development$1.Profiler = Profiler;
    reactIs_development$1.StrictMode = StrictMode;
    reactIs_development$1.Suspense = Suspense;
    reactIs_development$1.isAsyncMode = isAsyncMode;
    reactIs_development$1.isConcurrentMode = isConcurrentMode;
    reactIs_development$1.isContextConsumer = isContextConsumer;
    reactIs_development$1.isContextProvider = isContextProvider;
    reactIs_development$1.isElement = isElement;
    reactIs_development$1.isForwardRef = isForwardRef;
    reactIs_development$1.isFragment = isFragment;
    reactIs_development$1.isLazy = isLazy;
    reactIs_development$1.isMemo = isMemo;
    reactIs_development$1.isPortal = isPortal;
    reactIs_development$1.isProfiler = isProfiler;
    reactIs_development$1.isStrictMode = isStrictMode;
    reactIs_development$1.isSuspense = isSuspense;
    reactIs_development$1.isValidElementType = isValidElementType;
    reactIs_development$1.typeOf = typeOf;
  })();
}

if (process.env.NODE_ENV === 'production') {
  reactIs$1.exports = reactIs_production_min$1;
} else {
  reactIs$1.exports = reactIs_development$1;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    // Detect buggy property enumeration order in older V8 versions.

    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;

var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var printWarning$1 = function () {};
if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$2 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has$1 = has$2;
  printWarning$1 = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {/**/}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has$1(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning$1((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning$1('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes$1.resetWarningCache = function () {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};
var checkPropTypes_1 = checkPropTypes$1;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ReactIs$1 = reactIs$1.exports;
var assign = objectAssign;
var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
var has = has$2;
var checkPropTypes = checkPropTypes_1;
var printWarning = function () {};
if (process.env.NODE_ENV !== 'production') {
  printWarning = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
function emptyFunctionThatReturnsNull() {
  return null;
}
var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bigint: createPrimitiveTypeChecker('bigint'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message, data) {
    this.message = message;
    this.data = data && typeof data === 'object' ? data : {};
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret$1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
          expectedType: expectedType
        });
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs$1.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate(props, propName, componentName, location, propFullName) {
      var expectedTypes = [];
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1);
        if (checkerResult == null) {
          return null;
        }
        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
          expectedTypes.push(checkerResult.data.expectedType);
        }
      }
      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function invalidValidatorError(componentName, location, propFullName, key, type) {
    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (has(shapeTypes, key) && typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ReactPropTypesSecret = ReactPropTypesSecret_1;
function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
var factoryWithThrowingShims = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  }
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs$1.exports;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  propTypes$2.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  propTypes$2.exports = factoryWithThrowingShims();
}
var PropTypes = propTypes$2.exports;

var reactIs = {exports: {}};

var reactIs_production_min = {};

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b = Symbol.for("react.element"),
  c = Symbol.for("react.portal"),
  d = Symbol.for("react.fragment"),
  e$1 = Symbol.for("react.strict_mode"),
  f = Symbol.for("react.profiler"),
  g = Symbol.for("react.provider"),
  h = Symbol.for("react.context"),
  k = Symbol.for("react.server_context"),
  l$1 = Symbol.for("react.forward_ref"),
  m = Symbol.for("react.suspense"),
  n$1 = Symbol.for("react.suspense_list"),
  p = Symbol.for("react.memo"),
  q = Symbol.for("react.lazy"),
  t$1 = Symbol.for("react.offscreen"),
  u;
u = Symbol.for("react.module.reference");
function v(a) {
  if ("object" === typeof a && null !== a) {
    var r = a.$$typeof;
    switch (r) {
      case b:
        switch (a = a.type, a) {
          case d:
          case f:
          case e$1:
          case m:
          case n$1:
            return a;
          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case h:
              case l$1:
              case q:
              case p:
              case g:
                return a;
              default:
                return r;
            }
        }
      case c:
        return r;
    }
  }
}
reactIs_production_min.ContextConsumer = h;
reactIs_production_min.ContextProvider = g;
reactIs_production_min.Element = b;
reactIs_production_min.ForwardRef = l$1;
reactIs_production_min.Fragment = d;
reactIs_production_min.Lazy = q;
reactIs_production_min.Memo = p;
reactIs_production_min.Portal = c;
reactIs_production_min.Profiler = f;
reactIs_production_min.StrictMode = e$1;
reactIs_production_min.Suspense = m;
reactIs_production_min.SuspenseList = n$1;
reactIs_production_min.isAsyncMode = function () {
  return !1;
};
reactIs_production_min.isConcurrentMode = function () {
  return !1;
};
reactIs_production_min.isContextConsumer = function (a) {
  return v(a) === h;
};
reactIs_production_min.isContextProvider = function (a) {
  return v(a) === g;
};
reactIs_production_min.isElement = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === b;
};
reactIs_production_min.isForwardRef = function (a) {
  return v(a) === l$1;
};
reactIs_production_min.isFragment = function (a) {
  return v(a) === d;
};
reactIs_production_min.isLazy = function (a) {
  return v(a) === q;
};
reactIs_production_min.isMemo = function (a) {
  return v(a) === p;
};
reactIs_production_min.isPortal = function (a) {
  return v(a) === c;
};
reactIs_production_min.isProfiler = function (a) {
  return v(a) === f;
};
reactIs_production_min.isStrictMode = function (a) {
  return v(a) === e$1;
};
reactIs_production_min.isSuspense = function (a) {
  return v(a) === m;
};
reactIs_production_min.isSuspenseList = function (a) {
  return v(a) === n$1;
};
reactIs_production_min.isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e$1 || a === m || a === n$1 || a === t$1 || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l$1 || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;
};
reactIs_production_min.typeOf = v;

var reactIs_development = {};

/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (process.env.NODE_ENV !== "production") {
  (function () {

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

    // -----------------------------------------------------------------------------

    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.

    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    }
    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }
      return false;
    }
    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;
            switch (type) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;
                switch ($$typeofType) {
                  case REACT_SERVER_CONTEXT_TYPE:
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
      return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }
      return false;
    }
    function isConcurrentMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }
      return false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    function isSuspenseList(object) {
      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    }
    reactIs_development.ContextConsumer = ContextConsumer;
    reactIs_development.ContextProvider = ContextProvider;
    reactIs_development.Element = Element;
    reactIs_development.ForwardRef = ForwardRef;
    reactIs_development.Fragment = Fragment;
    reactIs_development.Lazy = Lazy;
    reactIs_development.Memo = Memo;
    reactIs_development.Portal = Portal;
    reactIs_development.Profiler = Profiler;
    reactIs_development.StrictMode = StrictMode;
    reactIs_development.Suspense = Suspense;
    reactIs_development.SuspenseList = SuspenseList;
    reactIs_development.isAsyncMode = isAsyncMode;
    reactIs_development.isConcurrentMode = isConcurrentMode;
    reactIs_development.isContextConsumer = isContextConsumer;
    reactIs_development.isContextProvider = isContextProvider;
    reactIs_development.isElement = isElement;
    reactIs_development.isForwardRef = isForwardRef;
    reactIs_development.isFragment = isFragment;
    reactIs_development.isLazy = isLazy;
    reactIs_development.isMemo = isMemo;
    reactIs_development.isPortal = isPortal;
    reactIs_development.isProfiler = isProfiler;
    reactIs_development.isStrictMode = isStrictMode;
    reactIs_development.isSuspense = isSuspense;
    reactIs_development.isSuspenseList = isSuspenseList;
    reactIs_development.isValidElementType = isValidElementType;
    reactIs_development.typeOf = typeOf;
  })();
}

if (process.env.NODE_ENV === 'production') {
  reactIs.exports = reactIs_production_min;
} else {
  reactIs.exports = reactIs_development;
}

const t = t => "object" == typeof t && null != t && 1 === t.nodeType,
  e = (t, e) => (!e || "hidden" !== t) && "visible" !== t && "clip" !== t,
  n = (t, n) => {
    if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {
      const o = getComputedStyle(t, null);
      return e(o.overflowY, n) || e(o.overflowX, n) || (t => {
        const e = (t => {
          if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;
          try {
            return t.ownerDocument.defaultView.frameElement;
          } catch (t) {
            return null;
          }
        })(t);
        return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);
      })(t);
    }
    return !1;
  },
  o = (t, e, n, o, l, r, i, s) => r < t && i > e || r > t && i < e ? 0 : r <= t && s <= n || i >= e && s >= n ? r - t - o : i > e && s < n || r < t && s > n ? i - e + l : 0,
  l = t => {
    const e = t.parentElement;
    return null == e ? t.getRootNode().host || null : e;
  },
  r = (e, r) => {
    var i, s, d, h;
    if ("undefined" == typeof document) return [];
    const {
        scrollMode: c,
        block: f,
        inline: u,
        boundary: a,
        skipOverflowHiddenElements: g
      } = r,
      p = "function" == typeof a ? a : t => t !== a;
    if (!t(e)) throw new TypeError("Invalid target");
    const m = document.scrollingElement || document.documentElement,
      w = [];
    let W = e;
    for (; t(W) && p(W);) {
      if (W = l(W), W === m) {
        w.push(W);
        break;
      }
      null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);
    }
    const b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth,
      H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight,
      {
        scrollX: y,
        scrollY: M
      } = window,
      {
        height: v,
        width: E,
        top: x,
        right: C,
        bottom: I,
        left: R
      } = e.getBoundingClientRect(),
      {
        top: T,
        right: B,
        bottom: F,
        left: V
      } = (t => {
        const e = window.getComputedStyle(t);
        return {
          top: parseFloat(e.scrollMarginTop) || 0,
          right: parseFloat(e.scrollMarginRight) || 0,
          bottom: parseFloat(e.scrollMarginBottom) || 0,
          left: parseFloat(e.scrollMarginLeft) || 0
        };
      })(e);
    let k = "start" === f || "nearest" === f ? x - T : "end" === f ? I + F : x + v / 2 - T + F,
      D = "center" === u ? R + E / 2 - V + B : "end" === u ? C + B : R - V;
    const L = [];
    for (let t = 0; t < w.length; t++) {
      const e = w[t],
        {
          height: n,
          width: l,
          top: r,
          right: i,
          bottom: s,
          left: d
        } = e.getBoundingClientRect();
      if ("if-needed" === c && x >= 0 && R >= 0 && I <= H && C <= b && x >= r && I <= s && R >= d && C <= i) return L;
      const h = getComputedStyle(e),
        a = parseInt(h.borderLeftWidth, 10),
        g = parseInt(h.borderTopWidth, 10),
        p = parseInt(h.borderRightWidth, 10),
        W = parseInt(h.borderBottomWidth, 10);
      let T = 0,
        B = 0;
      const F = "offsetWidth" in e ? e.offsetWidth - e.clientWidth - a - p : 0,
        V = "offsetHeight" in e ? e.offsetHeight - e.clientHeight - g - W : 0,
        S = "offsetWidth" in e ? 0 === e.offsetWidth ? 0 : l / e.offsetWidth : 0,
        X = "offsetHeight" in e ? 0 === e.offsetHeight ? 0 : n / e.offsetHeight : 0;
      if (m === e) T = "start" === f ? k : "end" === f ? k - H : "nearest" === f ? o(M, M + H, H, g, W, M + k, M + k + v, v) : k - H / 2, B = "start" === u ? D : "center" === u ? D - b / 2 : "end" === u ? D - b : o(y, y + b, b, a, p, y + D, y + D + E, E), T = Math.max(0, T + M), B = Math.max(0, B + y);else {
        T = "start" === f ? k - r - g : "end" === f ? k - s + W + V : "nearest" === f ? o(r, s, n, g, W + V, k, k + v, v) : k - (r + n / 2) + V / 2, B = "start" === u ? D - d - a : "center" === u ? D - (d + l / 2) + F / 2 : "end" === u ? D - i + p + F : o(d, i, l, a, p + F, D, D + E, E);
        const {
          scrollLeft: t,
          scrollTop: h
        } = e;
        T = 0 === X ? 0 : Math.max(0, Math.min(h + T / X, e.scrollHeight - n / X + V)), B = 0 === S ? 0 : Math.max(0, Math.min(t + B / S, e.scrollWidth - l / S + F)), k += h - T, D += t - B;
      }
      L.push({
        el: e,
        top: T,
        left: B
      });
    }
    return L;
  };

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  };
  return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var idCounter = 0;

/**
 * Accepts a parameter and returns it if it's a function
 * or a noop function if it's not. This allows us to
 * accept a callback, but not worry about it if it's not
 * passed.
 * @param {Function} cb the callback
 * @return {Function} a function
 */
function cbToCb(cb) {
  return typeof cb === 'function' ? cb : noop;
}
function noop() {}

/**
 * Scroll node into view if necessary
 * @param {HTMLElement} node the element that should scroll into view
 * @param {HTMLElement} menuNode the menu element of the component
 */
function scrollIntoView(node, menuNode) {
  if (!node) {
    return;
  }
  var actions = r(node, {
    boundary: menuNode,
    block: 'nearest',
    scrollMode: 'if-needed'
  });
  actions.forEach(function (_ref) {
    var el = _ref.el,
      top = _ref.top,
      left = _ref.left;
    el.scrollTop = top;
    el.scrollLeft = left;
  });
}

/**
 * @param {HTMLElement} parent the parent node
 * @param {HTMLElement} child the child node
 * @param {Window} environment The window context where downshift renders.
 * @return {Boolean} whether the parent is the child or the child is in the parent
 */
function isOrContainsNode(parent, child, environment) {
  var result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);
  return result;
}

/**
 * Simple debounce implementation. Will call the given
 * function once after the time given has passed since
 * it was last called.
 * @param {Function} fn the function to call after the time
 * @param {Number} time the time to wait
 * @return {Function} the debounced function
 */
function debounce(fn, time) {
  var timeoutId;
  function cancel() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
  }
  function wrapper() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    cancel();
    timeoutId = setTimeout(function () {
      timeoutId = null;
      fn.apply(void 0, args);
    }, time);
  }
  wrapper.cancel = cancel;
  return wrapper;
}

/**
 * This is intended to be used to compose event handlers.
 * They are executed in order until one of them sets
 * `event.preventDownshiftDefault = true`.
 * @param {...Function} fns the event handler functions
 * @return {Function} the event handler to add to an element
 */
function callAllEventHandlers() {
  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fns[_key2] = arguments[_key2];
  }
  return function (event) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    return fns.some(function (fn) {
      if (fn) {
        fn.apply(void 0, [event].concat(args));
      }
      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;
    });
  };
}
function handleRefs() {
  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    refs[_key4] = arguments[_key4];
  }
  return function (node) {
    refs.forEach(function (ref) {
      if (typeof ref === 'function') {
        ref(node);
      } else if (ref) {
        ref.current = node;
      }
    });
  };
}

/**
 * This generates a unique ID for an instance of Downshift
 * @return {String} the unique ID
 */
function generateId() {
  return String(idCounter++);
}

/**
 * Default implementation for status message. Only added when menu is open.
 * Will specify if there are results in the list, and if so, how many,
 * and what keys are relevant.
 *
 * @param {Object} param the downshift state and other relevant properties
 * @return {String} the a11y status message
 */
function getA11yStatusMessage(_ref2) {
  var isOpen = _ref2.isOpen,
    resultCount = _ref2.resultCount,
    previousResultCount = _ref2.previousResultCount;
  if (!isOpen) {
    return '';
  }
  if (!resultCount) {
    return 'No results are available.';
  }
  if (resultCount !== previousResultCount) {
    return resultCount + " result" + (resultCount === 1 ? ' is' : 's are') + " available, use up and down arrow keys to navigate. Press Enter key to select.";
  }
  return '';
}

/**
 * Takes an argument and if it's an array, returns the first item in the array
 * otherwise returns the argument
 * @param {*} arg the maybe-array
 * @param {*} defaultValue the value if arg is falsey not defined
 * @return {*} the arg or it's first item
 */
function unwrapArray(arg, defaultValue) {
  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */arg[0] : arg;
  if (!arg && defaultValue) {
    return defaultValue;
  } else {
    return arg;
  }
}

/**
 * @param {Object} element (P)react element
 * @return {Boolean} whether it's a DOM element
 */
function isDOMElement(element) {
  // then we assume this is react
  return typeof element.type === 'string';
}

/**
 * @param {Object} element (P)react element
 * @return {Object} the props
 */
function getElementProps(element) {
  return element.props;
}

/**
 * Throws a helpful error message for required properties. Useful
 * to be used as a default in destructuring or object params.
 * @param {String} fnName the function name
 * @param {String} propName the prop name
 */
function requiredProp(fnName, propName) {
  // eslint-disable-next-line no-console
  console.error("The property \"" + propName + "\" is required in \"" + fnName + "\"");
}
var stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];
/**
 * @param {Object} state the state object
 * @return {Object} state that is relevant to downshift
 */
function pickState(state) {
  if (state === void 0) {
    state = {};
  }
  var result = {};
  stateKeys.forEach(function (k) {
    if (state.hasOwnProperty(k)) {
      result[k] = state[k];
    }
  });
  return result;
}

/**
 * This will perform a shallow merge of the given state object
 * with the state coming from props
 * (for the controlled component scenario)
 * This is used in state updater functions so they're referencing
 * the right state regardless of where it comes from.
 *
 * @param {Object} state The state of the component/hook.
 * @param {Object} props The props that may contain controlled values.
 * @returns {Object} The merged controlled state.
 */
function getState(state, props) {
  if (!state || !props) {
    return state;
  }
  return Object.keys(state).reduce(function (prevState, key) {
    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];
    return prevState;
  }, {});
}

/**
 * This determines whether a prop is a "controlled prop" meaning it is
 * state which is controlled by the outside of this component rather
 * than within this component.
 *
 * @param {Object} props The props that may contain controlled values.
 * @param {String} key the key to check
 * @return {Boolean} whether it is a controlled controlled prop
 */
function isControlledProp(props, key) {
  return props[key] !== undefined;
}

/**
 * Normalizes the 'key' property of a KeyboardEvent in IE/Edge
 * @param {Object} event a keyboardEvent object
 * @return {String} keyboard key
 */
function normalizeArrowKey(event) {
  var key = event.key,
    keyCode = event.keyCode;
  /* istanbul ignore next (ie) */
  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {
    return "Arrow" + key;
  }
  return key;
}

/**
 * Simple check if the value passed is object literal
 * @param {*} obj any things
 * @return {Boolean} whether it's object literal
 */
function isPlainObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}

/**
 * Returns the next non-disabled highlightedIndex value.
 *
 * @param {number} start The current highlightedIndex.
 * @param {number} offset The offset from the current highlightedIndex to start searching.
 * @param {unknown[]} items The items array.
 * @param {(item: unknown, index: number) => boolean} isItemDisabled Function that tells if an item is disabled or not.
 * @param {boolean?} circular If the search reaches the end, if it can search again starting from the other end.
 * @returns {number} The next highlightedIndex.
 */
function getHighlightedIndex(start, offset, items, isItemDisabled, circular) {
  if (circular === void 0) {
    circular = false;
  }
  var count = items.length;
  if (count === 0) {
    return -1;
  }
  var itemsLastIndex = count - 1;
  if (typeof start !== 'number' || start < 0 || start > itemsLastIndex) {
    start = offset > 0 ? -1 : itemsLastIndex + 1;
  }
  var current = start + offset;
  if (current < 0) {
    current = circular ? itemsLastIndex : 0;
  } else if (current > itemsLastIndex) {
    current = circular ? 0 : itemsLastIndex;
  }
  var highlightedIndex = getNonDisabledIndex(current, offset < 0, items, isItemDisabled, circular);
  if (highlightedIndex === -1) {
    return start >= count ? -1 : start;
  }
  return highlightedIndex;
}

/**
 * Returns the next non-disabled highlightedIndex value.
 *
 * @param {number} start The current highlightedIndex.
 * @param {boolean} backwards If true, it will search backwards from the start.
 * @param {unknown[]} items The items array.
 * @param {(item: unknown, index: number) => boolean} isItemDisabled Function that tells if an item is disabled or not.
 * @param {boolean} circular If the search reaches the end, if it can search again starting from the other end.
 * @returns {number} The next non-disabled index.
 */
function getNonDisabledIndex(start, backwards, items, isItemDisabled, circular) {
  if (circular === void 0) {
    circular = false;
  }
  var count = items.length;
  if (backwards) {
    for (var index = start; index >= 0; index--) {
      if (!isItemDisabled(items[index], index)) {
        return index;
      }
    }
  } else {
    for (var _index = start; _index < count; _index++) {
      if (!isItemDisabled(items[_index], _index)) {
        return _index;
      }
    }
  }
  if (circular) {
    return getNonDisabledIndex(backwards ? count - 1 : 0, backwards, items, isItemDisabled);
  }
  return -1;
}

/**
 * Checks if event target is within the downshift elements.
 *
 * @param {EventTarget} target Target to check.
 * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).
 * @param {Window} environment The window context where downshift renders.
 * @param {boolean} checkActiveElement Whether to also check activeElement.
 *
 * @returns {boolean} Whether or not the target is within downshift elements.
 */
function targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {
  if (checkActiveElement === void 0) {
    checkActiveElement = true;
  }
  return environment && downshiftElements.some(function (contextNode) {
    return contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment));
  });
}

// eslint-disable-next-line import/no-mutable-exports
var validateControlledUnchanged = noop;
/* istanbul ignore next */
if (process.env.NODE_ENV !== 'production') {
  validateControlledUnchanged = function validateControlledUnchanged(state, prevProps, nextProps) {
    var warningDescription = "This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props";
    Object.keys(state).forEach(function (propKey) {
      if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {
        // eslint-disable-next-line no-console
        console.error("downshift: A component has changed the controlled prop \"" + propKey + "\" to be uncontrolled. " + warningDescription);
      } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {
        // eslint-disable-next-line no-console
        console.error("downshift: A component has changed the uncontrolled prop \"" + propKey + "\" to be controlled. " + warningDescription);
      }
    });
  };
}
var cleanupStatus = debounce(function (documentProp) {
  getStatusDiv(documentProp).textContent = '';
}, 500);

/**
 * Get the status node or create it if it does not already exist.
 * @param {Object} documentProp document passed by the user.
 * @return {HTMLElement} the status node.
 */
function getStatusDiv(documentProp) {
  var statusDiv = documentProp.getElementById('a11y-status-message');
  if (statusDiv) {
    return statusDiv;
  }
  statusDiv = documentProp.createElement('div');
  statusDiv.setAttribute('id', 'a11y-status-message');
  statusDiv.setAttribute('role', 'status');
  statusDiv.setAttribute('aria-live', 'polite');
  statusDiv.setAttribute('aria-relevant', 'additions text');
  Object.assign(statusDiv.style, {
    border: '0',
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: '-1px',
    overflow: 'hidden',
    padding: '0',
    position: 'absolute',
    width: '1px'
  });
  documentProp.body.appendChild(statusDiv);
  return statusDiv;
}

/**
 * @param {String} status the status message
 * @param {Object} documentProp document passed by the user.
 */
function setStatus(status, documentProp) {
  if (!status || !documentProp) {
    return;
  }
  var div = getStatusDiv(documentProp);
  div.textContent = status;
  cleanupStatus(documentProp);
}

/**
 * Removes the status element from the DOM
 * @param {Document} documentProp 
 */
function cleanupStatusDiv(documentProp) {
  var statusDiv = documentProp == null ? void 0 : documentProp.getElementById('a11y-status-message');
  if (statusDiv) {
    statusDiv.remove();
  }
}
var unknown = process.env.NODE_ENV !== "production" ? '__autocomplete_unknown__' : 0;
var mouseUp = process.env.NODE_ENV !== "production" ? '__autocomplete_mouseup__' : 1;
var itemMouseEnter = process.env.NODE_ENV !== "production" ? '__autocomplete_item_mouseenter__' : 2;
var keyDownArrowUp = process.env.NODE_ENV !== "production" ? '__autocomplete_keydown_arrow_up__' : 3;
var keyDownArrowDown = process.env.NODE_ENV !== "production" ? '__autocomplete_keydown_arrow_down__' : 4;
var keyDownEscape = process.env.NODE_ENV !== "production" ? '__autocomplete_keydown_escape__' : 5;
var keyDownEnter = process.env.NODE_ENV !== "production" ? '__autocomplete_keydown_enter__' : 6;
var keyDownHome = process.env.NODE_ENV !== "production" ? '__autocomplete_keydown_home__' : 7;
var keyDownEnd = process.env.NODE_ENV !== "production" ? '__autocomplete_keydown_end__' : 8;
var clickItem = process.env.NODE_ENV !== "production" ? '__autocomplete_click_item__' : 9;
var blurInput = process.env.NODE_ENV !== "production" ? '__autocomplete_blur_input__' : 10;
var changeInput = process.env.NODE_ENV !== "production" ? '__autocomplete_change_input__' : 11;
var keyDownSpaceButton = process.env.NODE_ENV !== "production" ? '__autocomplete_keydown_space_button__' : 12;
var clickButton = process.env.NODE_ENV !== "production" ? '__autocomplete_click_button__' : 13;
var blurButton = process.env.NODE_ENV !== "production" ? '__autocomplete_blur_button__' : 14;
var controlledPropUpdatedSelectedItem = process.env.NODE_ENV !== "production" ? '__autocomplete_controlled_prop_updated_selected_item__' : 15;
var touchEnd = process.env.NODE_ENV !== "production" ? '__autocomplete_touchend__' : 16;
var stateChangeTypes$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  blurButton: blurButton,
  blurInput: blurInput,
  changeInput: changeInput,
  clickButton: clickButton,
  clickItem: clickItem,
  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,
  itemMouseEnter: itemMouseEnter,
  keyDownArrowDown: keyDownArrowDown,
  keyDownArrowUp: keyDownArrowUp,
  keyDownEnd: keyDownEnd,
  keyDownEnter: keyDownEnter,
  keyDownEscape: keyDownEscape,
  keyDownHome: keyDownHome,
  keyDownSpaceButton: keyDownSpaceButton,
  mouseUp: mouseUp,
  touchEnd: touchEnd,
  unknown: unknown
});
var _excluded$3 = ["refKey", "ref"],
  _excluded2$3 = ["onClick", "onPress", "onKeyDown", "onKeyUp", "onBlur"],
  _excluded3$2 = ["onKeyDown", "onBlur", "onChange", "onInput", "onChangeText"],
  _excluded4$2 = ["refKey", "ref"],
  _excluded5 = ["onMouseMove", "onMouseDown", "onClick", "onPress", "index", "item"];
var Downshift = /*#__PURE__*/function () {
  var Downshift = /*#__PURE__*/function (_Component) {
    function Downshift(_props) {
      var _this;
      _this = _Component.call(this, _props) || this;
      // fancy destructuring + defaults + aliases
      // this basically says each value of state should either be set to
      // the initial value or the default value if the initial value is not provided
      _this.id = _this.props.id || "downshift-" + generateId();
      _this.menuId = _this.props.menuId || _this.id + "-menu";
      _this.labelId = _this.props.labelId || _this.id + "-label";
      _this.inputId = _this.props.inputId || _this.id + "-input";
      _this.getItemId = _this.props.getItemId || function (index) {
        return _this.id + "-item-" + index;
      };
      _this.items = [];
      // itemCount can be changed asynchronously
      // from within downshift (so it can't come from a prop)
      // this is why we store it as an instance and use
      // getItemCount rather than just use items.length
      // (to support windowing + async)
      _this.itemCount = null;
      _this.previousResultCount = 0;
      _this.timeoutIds = [];
      /**
       * @param {Function} fn the function to call after the time
       * @param {Number} time the time to wait
       */
      _this.internalSetTimeout = function (fn, time) {
        var id = setTimeout(function () {
          _this.timeoutIds = _this.timeoutIds.filter(function (i) {
            return i !== id;
          });
          fn();
        }, time);
        _this.timeoutIds.push(id);
      };
      _this.setItemCount = function (count) {
        _this.itemCount = count;
      };
      _this.unsetItemCount = function () {
        _this.itemCount = null;
      };
      _this.isItemDisabled = function (_item, index) {
        var currentElementNode = _this.getItemNodeFromIndex(index);
        return currentElementNode && currentElementNode.hasAttribute('disabled');
      };
      _this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {
        if (highlightedIndex === void 0) {
          highlightedIndex = _this.props.defaultHighlightedIndex;
        }
        if (otherStateToSet === void 0) {
          otherStateToSet = {};
        }
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(_extends$5({
          highlightedIndex: highlightedIndex
        }, otherStateToSet));
      };
      _this.clearSelection = function (cb) {
        _this.internalSetState({
          selectedItem: null,
          inputValue: '',
          highlightedIndex: _this.props.defaultHighlightedIndex,
          isOpen: _this.props.defaultIsOpen
        }, cb);
      };
      _this.selectItem = function (item, otherStateToSet, cb) {
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(_extends$5({
          isOpen: _this.props.defaultIsOpen,
          highlightedIndex: _this.props.defaultHighlightedIndex,
          selectedItem: item,
          inputValue: _this.props.itemToString(item)
        }, otherStateToSet), cb);
      };
      _this.selectItemAtIndex = function (itemIndex, otherStateToSet, cb) {
        var item = _this.items[itemIndex];
        if (item == null) {
          return;
        }
        _this.selectItem(item, otherStateToSet, cb);
      };
      _this.selectHighlightedItem = function (otherStateToSet, cb) {
        return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);
      };
      // any piece of our state can live in two places:
      // 1. Uncontrolled: it's internal (this.state)
      //    We will call this.setState to update that state
      // 2. Controlled: it's external (this.props)
      //    We will call this.props.onStateChange to update that state
      //
      // In addition, we'll call this.props.onChange if the
      // selectedItem is changed.
      _this.internalSetState = function (stateToSet, cb) {
        var isItemSelected, onChangeArg;
        var onStateChangeArg = {};
        var isStateToSetFunction = typeof stateToSet === 'function';

        // we want to call `onInputValueChange` before the `setState` call
        // so someone controlling the `inputValue` state gets notified of
        // the input change as soon as possible. This avoids issues with
        // preserving the cursor position.
        // See https://github.com/downshift-js/downshift/issues/217 for more info.
        if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {
          _this.props.onInputValueChange(stateToSet.inputValue, _extends$5({}, _this.getStateAndHelpers(), stateToSet));
        }
        return _this.setState(function (state) {
          var _newStateToSet;
          state = _this.getState(state);
          var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;

          // Your own function that could modify the state that will be set.
          newStateToSet = _this.props.stateReducer(state, newStateToSet);

          // checks if an item is selected, regardless of if it's different from
          // what was selected before
          // used to determine if onSelect and onChange callbacks should be called
          isItemSelected = newStateToSet.hasOwnProperty('selectedItem');
          // this keeps track of the object we want to call with setState
          var nextState = {};
          // we need to call on change if the outside world is controlling any of our state
          // and we're trying to update that state. OR if the selection has changed and we're
          // trying to update the selection
          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {
            onChangeArg = newStateToSet.selectedItem;
          }
          (_newStateToSet = newStateToSet).type || (_newStateToSet.type = unknown);
          Object.keys(newStateToSet).forEach(function (key) {
            // onStateChangeArg should only have the state that is
            // actually changing
            if (state[key] !== newStateToSet[key]) {
              onStateChangeArg[key] = newStateToSet[key];
            }
            // the type is useful for the onStateChangeArg
            // but we don't actually want to set it in internal state.
            // this is an undocumented feature for now... Not all internalSetState
            // calls support it and I'm not certain we want them to yet.
            // But it enables users controlling the isOpen state to know when
            // the isOpen state changes due to mouseup events which is quite handy.
            if (key === 'type') {
              return;
            }
            newStateToSet[key];
            // if it's coming from props, then we don't care to set it internally
            if (!isControlledProp(_this.props, key)) {
              nextState[key] = newStateToSet[key];
            }
          });

          // if stateToSet is a function, then we weren't able to call onInputValueChange
          // earlier, so we'll call it now that we know what the inputValue state will be.
          if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {
            _this.props.onInputValueChange(newStateToSet.inputValue, _extends$5({}, _this.getStateAndHelpers(), newStateToSet));
          }
          return nextState;
        }, function () {
          // call the provided callback if it's a function
          cbToCb(cb)();

          // only call the onStateChange and onChange callbacks if
          // we have relevant information to pass them.
          var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;
          if (hasMoreStateThanType) {
            _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());
          }
          if (isItemSelected) {
            _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());
          }
          if (onChangeArg !== undefined) {
            _this.props.onChange(onChangeArg, _this.getStateAndHelpers());
          }
          // this is currently undocumented and therefore subject to change
          // We'll try to not break it, but just be warned.
          _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());
        });
      };
      //////////////////////////// ROOT
      _this.rootRef = function (node) {
        return _this._rootNode = node;
      };
      _this.getRootProps = function (_temp, _temp2) {
        var _extends2;
        var _ref = _temp === void 0 ? {} : _temp,
          _ref$refKey = _ref.refKey,
          refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,
          ref = _ref.ref,
          rest = _objectWithoutPropertiesLoose(_ref, _excluded$3);
        var _ref2 = _temp2 === void 0 ? {} : _temp2,
          _ref2$suppressRefErro = _ref2.suppressRefError,
          suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
        // this is used in the render to know whether the user has called getRootProps.
        // It uses that to know whether to apply the props automatically
        _this.getRootProps.called = true;
        _this.getRootProps.refKey = refKey;
        _this.getRootProps.suppressRefError = suppressRefError;
        var _this$getState = _this.getState(),
          isOpen = _this$getState.isOpen;
        return _extends$5((_extends2 = {}, _extends2[refKey] = handleRefs(ref, _this.rootRef), _extends2.role = 'combobox', _extends2['aria-expanded'] = isOpen, _extends2['aria-haspopup'] = 'listbox', _extends2['aria-owns'] = isOpen ? _this.menuId : undefined, _extends2['aria-labelledby'] = _this.labelId, _extends2), rest);
      };
      //\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT
      _this.keyDownHandlers = {
        ArrowDown: function ArrowDown(event) {
          var _this2 = this;
          event.preventDefault();
          if (this.getState().isOpen) {
            var amount = event.shiftKey ? 5 : 1;
            this.moveHighlightedIndex(amount, {
              type: keyDownArrowDown
            });
          } else {
            this.internalSetState({
              isOpen: true,
              type: keyDownArrowDown
            }, function () {
              var itemCount = _this2.getItemCount();
              if (itemCount > 0) {
                var _this2$getState = _this2.getState(),
                  highlightedIndex = _this2$getState.highlightedIndex;
                var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, 1, {
                  length: itemCount
                }, _this2.isItemDisabled, true);
                _this2.setHighlightedIndex(nextHighlightedIndex, {
                  type: keyDownArrowDown
                });
              }
            });
          }
        },
        ArrowUp: function ArrowUp(event) {
          var _this3 = this;
          event.preventDefault();
          if (this.getState().isOpen) {
            var amount = event.shiftKey ? -5 : -1;
            this.moveHighlightedIndex(amount, {
              type: keyDownArrowUp
            });
          } else {
            this.internalSetState({
              isOpen: true,
              type: keyDownArrowUp
            }, function () {
              var itemCount = _this3.getItemCount();
              if (itemCount > 0) {
                var _this3$getState = _this3.getState(),
                  highlightedIndex = _this3$getState.highlightedIndex;
                var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, -1, {
                  length: itemCount
                }, _this3.isItemDisabled, true);
                _this3.setHighlightedIndex(nextHighlightedIndex, {
                  type: keyDownArrowUp
                });
              }
            });
          }
        },
        Enter: function Enter(event) {
          if (event.which === 229) {
            return;
          }
          var _this$getState2 = this.getState(),
            isOpen = _this$getState2.isOpen,
            highlightedIndex = _this$getState2.highlightedIndex;
          if (isOpen && highlightedIndex != null) {
            event.preventDefault();
            var item = this.items[highlightedIndex];
            var itemNode = this.getItemNodeFromIndex(highlightedIndex);
            if (item == null || itemNode && itemNode.hasAttribute('disabled')) {
              return;
            }
            this.selectHighlightedItem({
              type: keyDownEnter
            });
          }
        },
        Escape: function Escape(event) {
          event.preventDefault();
          this.reset(_extends$5({
            type: keyDownEscape
          }, !this.state.isOpen && {
            selectedItem: null,
            inputValue: ''
          }));
        }
      };
      //////////////////////////// BUTTON
      _this.buttonKeyDownHandlers = _extends$5({}, _this.keyDownHandlers, {
        ' ': function _(event) {
          event.preventDefault();
          this.toggleMenu({
            type: keyDownSpaceButton
          });
        }
      });
      _this.inputKeyDownHandlers = _extends$5({}, _this.keyDownHandlers, {
        Home: function Home(event) {
          var _this$getState3 = this.getState(),
            isOpen = _this$getState3.isOpen;
          if (!isOpen) {
            return;
          }
          event.preventDefault();
          var itemCount = this.getItemCount();
          if (itemCount <= 0 || !isOpen) {
            return;
          }

          // get next non-disabled starting downwards from 0 if that's disabled.
          var newHighlightedIndex = getNonDisabledIndex(0, false, {
            length: itemCount
          }, this.isItemDisabled);
          this.setHighlightedIndex(newHighlightedIndex, {
            type: keyDownHome
          });
        },
        End: function End(event) {
          var _this$getState4 = this.getState(),
            isOpen = _this$getState4.isOpen;
          if (!isOpen) {
            return;
          }
          event.preventDefault();
          var itemCount = this.getItemCount();
          if (itemCount <= 0 || !isOpen) {
            return;
          }

          // get next non-disabled starting upwards from last index if that's disabled.
          var newHighlightedIndex = getNonDisabledIndex(itemCount - 1, true, {
            length: itemCount
          }, this.isItemDisabled);
          this.setHighlightedIndex(newHighlightedIndex, {
            type: keyDownEnd
          });
        }
      });
      _this.getToggleButtonProps = function (_temp3) {
        var _ref3 = _temp3 === void 0 ? {} : _temp3,
          onClick = _ref3.onClick;
        _ref3.onPress;
        var onKeyDown = _ref3.onKeyDown,
          onKeyUp = _ref3.onKeyUp,
          onBlur = _ref3.onBlur,
          rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$3);
        var _this$getState5 = _this.getState(),
          isOpen = _this$getState5.isOpen;
        var enabledEventHandlers = {
          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),
          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),
          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),
          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)
        };
        var eventHandlers = rest.disabled ? {} : enabledEventHandlers;
        return _extends$5({
          type: 'button',
          role: 'button',
          'aria-label': isOpen ? 'close menu' : 'open menu',
          'aria-haspopup': true,
          'data-toggle': true
        }, eventHandlers, rest);
      };
      _this.buttonHandleKeyUp = function (event) {
        // Prevent click event from emitting in Firefox
        event.preventDefault();
      };
      _this.buttonHandleKeyDown = function (event) {
        var key = normalizeArrowKey(event);
        if (_this.buttonKeyDownHandlers[key]) {
          _this.buttonKeyDownHandlers[key].call(_this, event);
        }
      };
      _this.buttonHandleClick = function (event) {
        event.preventDefault();
        // handle odd case for Safari and Firefox which
        // don't give the button the focus properly.
        /* istanbul ignore if (can't reasonably test this) */
        if (_this.props.environment) {
          var _this$props$environme = _this.props.environment.document,
            body = _this$props$environme.body,
            activeElement = _this$props$environme.activeElement;
          if (body && body === activeElement) {
            event.target.focus();
          }
        }
        // to simplify testing components that use downshift, we'll not wrap this in a setTimeout
        // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated
        // when building for production and should therefore have no impact on production code.
        if (process.env.NODE_ENV === 'test') {
          _this.toggleMenu({
            type: clickButton
          });
        } else {
          // Ensure that toggle of menu occurs after the potential blur event in iOS
          _this.internalSetTimeout(function () {
            return _this.toggleMenu({
              type: clickButton
            });
          });
        }
      };
      _this.buttonHandleBlur = function (event) {
        var blurTarget = event.target; // Save blur target for comparison with activeElement later
        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element
        _this.internalSetTimeout(function () {
          if (_this.isMouseDown || !_this.props.environment) {
            return;
          }
          var activeElement = _this.props.environment.document.activeElement;
          if ((activeElement == null || activeElement.id !== _this.inputId) && activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)
          ) {
            _this.reset({
              type: blurButton
            });
          }
        });
      };
      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON
      /////////////////////////////// LABEL
      _this.getLabelProps = function (props) {
        return _extends$5({
          htmlFor: _this.inputId,
          id: _this.labelId
        }, props);
      };
      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL
      /////////////////////////////// INPUT
      _this.getInputProps = function (_temp4) {
        var _ref4 = _temp4 === void 0 ? {} : _temp4,
          onKeyDown = _ref4.onKeyDown,
          onBlur = _ref4.onBlur,
          onChange = _ref4.onChange,
          onInput = _ref4.onInput;
        _ref4.onChangeText;
        var rest = _objectWithoutPropertiesLoose(_ref4, _excluded3$2);
        var onChangeKey;
        var eventHandlers = {};

        /* istanbul ignore next (preact) */
        {
          onChangeKey = 'onChange';
        }
        var _this$getState6 = _this.getState(),
          inputValue = _this$getState6.inputValue,
          isOpen = _this$getState6.isOpen,
          highlightedIndex = _this$getState6.highlightedIndex;
        if (!rest.disabled) {
          var _eventHandlers;
          eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);
        }
        return _extends$5({
          'aria-autocomplete': 'list',
          'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : undefined,
          'aria-controls': isOpen ? _this.menuId : undefined,
          'aria-labelledby': rest && rest['aria-label'] ? undefined : _this.labelId,
          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion
          // revert back since autocomplete="nope" is ignored on latest Chrome and Opera
          autoComplete: 'off',
          value: inputValue,
          id: _this.inputId
        }, eventHandlers, rest);
      };
      _this.inputHandleKeyDown = function (event) {
        var key = normalizeArrowKey(event);
        if (key && _this.inputKeyDownHandlers[key]) {
          _this.inputKeyDownHandlers[key].call(_this, event);
        }
      };
      _this.inputHandleChange = function (event) {
        _this.internalSetState({
          type: changeInput,
          isOpen: true,
          inputValue: event.target.value,
          highlightedIndex: _this.props.defaultHighlightedIndex
        });
      };
      _this.inputHandleBlur = function () {
        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element
        _this.internalSetTimeout(function () {
          var _activeElement$datase;
          if (_this.isMouseDown || !_this.props.environment) {
            return;
          }
          var activeElement = _this.props.environment.document.activeElement;
          var downshiftButtonIsActive = (activeElement == null || (_activeElement$datase = activeElement.dataset) == null ? void 0 : _activeElement$datase.toggle) && _this._rootNode && _this._rootNode.contains(activeElement);
          if (!downshiftButtonIsActive) {
            _this.reset({
              type: blurInput
            });
          }
        });
      };
      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT
      /////////////////////////////// MENU
      _this.menuRef = function (node) {
        _this._menuNode = node;
      };
      _this.getMenuProps = function (_temp5, _temp6) {
        var _extends3;
        var _ref5 = _temp5 === void 0 ? {} : _temp5,
          _ref5$refKey = _ref5.refKey,
          refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,
          ref = _ref5.ref,
          props = _objectWithoutPropertiesLoose(_ref5, _excluded4$2);
        var _ref6 = _temp6 === void 0 ? {} : _temp6,
          _ref6$suppressRefErro = _ref6.suppressRefError,
          suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;
        _this.getMenuProps.called = true;
        _this.getMenuProps.refKey = refKey;
        _this.getMenuProps.suppressRefError = suppressRefError;
        return _extends$5((_extends3 = {}, _extends3[refKey] = handleRefs(ref, _this.menuRef), _extends3.role = 'listbox', _extends3['aria-labelledby'] = props && props['aria-label'] ? undefined : _this.labelId, _extends3.id = _this.menuId, _extends3), props);
      };
      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU
      /////////////////////////////// ITEM
      _this.getItemProps = function (_temp7) {
        var _enabledEventHandlers;
        var _ref7 = _temp7 === void 0 ? {} : _temp7,
          onMouseMove = _ref7.onMouseMove,
          onMouseDown = _ref7.onMouseDown,
          onClick = _ref7.onClick;
        _ref7.onPress;
        var index = _ref7.index,
          _ref7$item = _ref7.item,
          item = _ref7$item === void 0 ? process.env.NODE_ENV === 'production' ? /* istanbul ignore next */undefined : requiredProp('getItemProps', 'item') : _ref7$item,
          rest = _objectWithoutPropertiesLoose(_ref7, _excluded5);
        if (index === undefined) {
          _this.items.push(item);
          index = _this.items.indexOf(item);
        } else {
          _this.items[index] = item;
        }
        var onSelectKey = 'onClick';
        var customClickHandler = onClick;
        var enabledEventHandlers = (_enabledEventHandlers = {
          // onMouseMove is used over onMouseEnter here. onMouseMove
          // is only triggered on actual mouse movement while onMouseEnter
          // can fire on DOM changes, interrupting keyboard navigation
          onMouseMove: callAllEventHandlers(onMouseMove, function () {
            if (index === _this.getState().highlightedIndex) {
              return;
            }
            _this.setHighlightedIndex(index, {
              type: itemMouseEnter
            });

            // We never want to manually scroll when changing state based
            // on `onMouseMove` because we will be moving the element out
            // from under the user which is currently scrolling/moving the
            // cursor
            _this.avoidScrolling = true;
            _this.internalSetTimeout(function () {
              return _this.avoidScrolling = false;
            }, 250);
          }),
          onMouseDown: callAllEventHandlers(onMouseDown, function (event) {
            // This prevents the activeElement from being changed
            // to the item so it can remain with the current activeElement
            // which is a more common use case.
            event.preventDefault();
          })
        }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function () {
          _this.selectItemAtIndex(index, {
            type: clickItem
          });
        }), _enabledEventHandlers);

        // Passing down the onMouseDown handler to prevent redirect
        // of the activeElement if clicking on disabled items
        var eventHandlers = rest.disabled ? {
          onMouseDown: enabledEventHandlers.onMouseDown
        } : enabledEventHandlers;
        return _extends$5({
          id: _this.getItemId(index),
          role: 'option',
          'aria-selected': _this.getState().highlightedIndex === index
        }, eventHandlers, rest);
      };
      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM
      _this.clearItems = function () {
        _this.items = [];
      };
      _this.reset = function (otherStateToSet, cb) {
        if (otherStateToSet === void 0) {
          otherStateToSet = {};
        }
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(function (_ref8) {
          var selectedItem = _ref8.selectedItem;
          return _extends$5({
            isOpen: _this.props.defaultIsOpen,
            highlightedIndex: _this.props.defaultHighlightedIndex,
            inputValue: _this.props.itemToString(selectedItem)
          }, otherStateToSet);
        }, cb);
      };
      _this.toggleMenu = function (otherStateToSet, cb) {
        if (otherStateToSet === void 0) {
          otherStateToSet = {};
        }
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(function (_ref9) {
          var isOpen = _ref9.isOpen;
          return _extends$5({
            isOpen: !isOpen
          }, isOpen && {
            highlightedIndex: _this.props.defaultHighlightedIndex
          }, otherStateToSet);
        }, function () {
          var _this$getState7 = _this.getState(),
            isOpen = _this$getState7.isOpen,
            highlightedIndex = _this$getState7.highlightedIndex;
          if (isOpen) {
            if (_this.getItemCount() > 0 && typeof highlightedIndex === 'number') {
              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);
            }
          }
          cbToCb(cb)();
        });
      };
      _this.openMenu = function (cb) {
        _this.internalSetState({
          isOpen: true
        }, cb);
      };
      _this.closeMenu = function (cb) {
        _this.internalSetState({
          isOpen: false
        }, cb);
      };
      _this.updateStatus = debounce(function () {
        var _this$props;
        if (!((_this$props = _this.props) != null && (_this$props = _this$props.environment) != null && _this$props.document)) {
          return;
        }
        var state = _this.getState();
        var item = _this.items[state.highlightedIndex];
        var resultCount = _this.getItemCount();
        var status = _this.props.getA11yStatusMessage(_extends$5({
          itemToString: _this.props.itemToString,
          previousResultCount: _this.previousResultCount,
          resultCount: resultCount,
          highlightedItem: item
        }, state));
        _this.previousResultCount = resultCount;
        setStatus(status, _this.props.environment.document);
      }, 200);
      var _this$props2 = _this.props,
        defaultHighlightedIndex = _this$props2.defaultHighlightedIndex,
        _this$props2$initialH = _this$props2.initialHighlightedIndex,
        _highlightedIndex = _this$props2$initialH === void 0 ? defaultHighlightedIndex : _this$props2$initialH,
        defaultIsOpen = _this$props2.defaultIsOpen,
        _this$props2$initialI = _this$props2.initialIsOpen,
        _isOpen = _this$props2$initialI === void 0 ? defaultIsOpen : _this$props2$initialI,
        _this$props2$initialI2 = _this$props2.initialInputValue,
        _inputValue = _this$props2$initialI2 === void 0 ? '' : _this$props2$initialI2,
        _this$props2$initialS = _this$props2.initialSelectedItem,
        _selectedItem = _this$props2$initialS === void 0 ? null : _this$props2$initialS;
      var _state = _this.getState({
        highlightedIndex: _highlightedIndex,
        isOpen: _isOpen,
        inputValue: _inputValue,
        selectedItem: _selectedItem
      });
      if (_state.selectedItem != null && _this.props.initialInputValue === undefined) {
        _state.inputValue = _this.props.itemToString(_state.selectedItem);
      }
      _this.state = _state;
      return _this;
    }
    _inheritsLoose(Downshift, _Component);
    var _proto = Downshift.prototype;
    /**
     * Clear all running timeouts
     */
    _proto.internalClearTimeouts = function internalClearTimeouts() {
      this.timeoutIds.forEach(function (id) {
        clearTimeout(id);
      });
      this.timeoutIds = [];
    }

    /**
     * Gets the state based on internal state or props
     * If a state value is passed via props, then that
     * is the value given, otherwise it's retrieved from
     * stateToMerge
     *
     * @param {Object} stateToMerge defaults to this.state
     * @return {Object} the state
     */;
    _proto.getState = function getState$1(stateToMerge) {
      if (stateToMerge === void 0) {
        stateToMerge = this.state;
      }
      return getState(stateToMerge, this.props);
    };
    _proto.getItemCount = function getItemCount() {
      // things read better this way. They're in priority order:
      // 1. `this.itemCount`
      // 2. `this.props.itemCount`
      // 3. `this.items.length`
      var itemCount = this.items.length;
      if (this.itemCount != null) {
        itemCount = this.itemCount;
      } else if (this.props.itemCount !== undefined) {
        itemCount = this.props.itemCount;
      }
      return itemCount;
    };
    _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {
      return this.props.environment ? this.props.environment.document.getElementById(this.getItemId(index)) : null;
    };
    _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {
      /* istanbul ignore else (react-native) */
      {
        var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);
        this.props.scrollIntoView(node, this._menuNode);
      }
    };
    _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {
      var itemCount = this.getItemCount();
      var _this$getState8 = this.getState(),
        highlightedIndex = _this$getState8.highlightedIndex;
      if (itemCount > 0) {
        var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, amount, {
          length: itemCount
        }, this.isItemDisabled, true);
        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);
      }
    };
    _proto.getStateAndHelpers = function getStateAndHelpers() {
      var _this$getState9 = this.getState(),
        highlightedIndex = _this$getState9.highlightedIndex,
        inputValue = _this$getState9.inputValue,
        selectedItem = _this$getState9.selectedItem,
        isOpen = _this$getState9.isOpen;
      var itemToString = this.props.itemToString;
      var id = this.id;
      var getRootProps = this.getRootProps,
        getToggleButtonProps = this.getToggleButtonProps,
        getLabelProps = this.getLabelProps,
        getMenuProps = this.getMenuProps,
        getInputProps = this.getInputProps,
        getItemProps = this.getItemProps,
        openMenu = this.openMenu,
        closeMenu = this.closeMenu,
        toggleMenu = this.toggleMenu,
        selectItem = this.selectItem,
        selectItemAtIndex = this.selectItemAtIndex,
        selectHighlightedItem = this.selectHighlightedItem,
        setHighlightedIndex = this.setHighlightedIndex,
        clearSelection = this.clearSelection,
        clearItems = this.clearItems,
        reset = this.reset,
        setItemCount = this.setItemCount,
        unsetItemCount = this.unsetItemCount,
        setState = this.internalSetState;
      return {
        // prop getters
        getRootProps: getRootProps,
        getToggleButtonProps: getToggleButtonProps,
        getLabelProps: getLabelProps,
        getMenuProps: getMenuProps,
        getInputProps: getInputProps,
        getItemProps: getItemProps,
        // actions
        reset: reset,
        openMenu: openMenu,
        closeMenu: closeMenu,
        toggleMenu: toggleMenu,
        selectItem: selectItem,
        selectItemAtIndex: selectItemAtIndex,
        selectHighlightedItem: selectHighlightedItem,
        setHighlightedIndex: setHighlightedIndex,
        clearSelection: clearSelection,
        clearItems: clearItems,
        setItemCount: setItemCount,
        unsetItemCount: unsetItemCount,
        setState: setState,
        // props
        itemToString: itemToString,
        // derived
        id: id,
        // state
        highlightedIndex: highlightedIndex,
        inputValue: inputValue,
        isOpen: isOpen,
        selectedItem: selectedItem
      };
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this4 = this;
      /* istanbul ignore if (react-native) */
      if (process.env.NODE_ENV !== 'production' && !false && this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
      }

      /* istanbul ignore if (react-native or SSR) */
      if (!this.props.environment) {
        this.cleanup = function () {
          _this4.internalClearTimeouts();
        };
      } else {
        // this.isMouseDown helps us track whether the mouse is currently held down.
        // This is useful when the user clicks on an item in the list, but holds the mouse
        // down long enough for the list to disappear (because the blur event fires on the input)
        // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should
        // trigger hiding the menu.
        var onMouseDown = function onMouseDown() {
          _this4.isMouseDown = true;
        };
        var onMouseUp = function onMouseUp(event) {
          _this4.isMouseDown = false;
          // if the target element or the activeElement is within a downshift node
          // then we don't want to reset downshift
          var contextWithinDownshift = targetWithinDownshift(event.target, [_this4._rootNode, _this4._menuNode], _this4.props.environment);
          if (!contextWithinDownshift && _this4.getState().isOpen) {
            _this4.reset({
              type: mouseUp
            }, function () {
              return _this4.props.onOuterClick(_this4.getStateAndHelpers());
            });
          }
        };
        // Touching an element in iOS gives focus and hover states, but touching out of
        // the element will remove hover, and persist the focus state, resulting in the
        // blur event not being triggered.
        // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.
        // If the user taps outside of Downshift, the component should be reset,
        // but not if the user is swiping
        var onTouchStart = function onTouchStart() {
          _this4.isTouchMove = false;
        };
        var onTouchMove = function onTouchMove() {
          _this4.isTouchMove = true;
        };
        var onTouchEnd = function onTouchEnd(event) {
          var contextWithinDownshift = targetWithinDownshift(event.target, [_this4._rootNode, _this4._menuNode], _this4.props.environment, false);
          if (!_this4.isTouchMove && !contextWithinDownshift && _this4.getState().isOpen) {
            _this4.reset({
              type: touchEnd
            }, function () {
              return _this4.props.onOuterClick(_this4.getStateAndHelpers());
            });
          }
        };
        var environment = this.props.environment;
        environment.addEventListener('mousedown', onMouseDown);
        environment.addEventListener('mouseup', onMouseUp);
        environment.addEventListener('touchstart', onTouchStart);
        environment.addEventListener('touchmove', onTouchMove);
        environment.addEventListener('touchend', onTouchEnd);
        this.cleanup = function () {
          _this4.internalClearTimeouts();
          _this4.updateStatus.cancel();
          environment.removeEventListener('mousedown', onMouseDown);
          environment.removeEventListener('mouseup', onMouseUp);
          environment.removeEventListener('touchstart', onTouchStart);
          environment.removeEventListener('touchmove', onTouchMove);
          environment.removeEventListener('touchend', onTouchEnd);
        };
      }
    };
    _proto.shouldScroll = function shouldScroll(prevState, prevProps) {
      var _ref10 = this.props.highlightedIndex === undefined ? this.getState() : this.props,
        currentHighlightedIndex = _ref10.highlightedIndex;
      var _ref11 = prevProps.highlightedIndex === undefined ? prevState : prevProps,
        prevHighlightedIndex = _ref11.highlightedIndex;
      var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;
      var scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;
      return scrollWhenOpen || scrollWhenNavigating;
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      if (process.env.NODE_ENV !== 'production') {
        validateControlledUnchanged(this.state, prevProps, this.props);
        /* istanbul ignore if (react-native) */
        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
        }
      }
      if (isControlledProp(this.props, 'selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {
        this.internalSetState({
          type: controlledPropUpdatedSelectedItem,
          inputValue: this.props.itemToString(this.props.selectedItem)
        });
      }
      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {
        this.scrollHighlightedItemIntoView();
      }

      /* istanbul ignore else (react-native) */
      {
        this.updateStatus();
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cleanup(); // avoids memory leak
    };

    _proto.render = function render() {
      var children = unwrapArray(this.props.children, noop);
      // because the items are rerendered every time we call the children
      // we clear this out each render and it will be populated again as
      // getItemProps is called.
      this.clearItems();
      // we reset this so we know whether the user calls getRootProps during
      // this render. If they do then we don't need to do anything,
      // if they don't then we need to clone the element they return and
      // apply the props for them.
      this.getRootProps.called = false;
      this.getRootProps.refKey = undefined;
      this.getRootProps.suppressRefError = undefined;
      // we do something similar for getMenuProps
      this.getMenuProps.called = false;
      this.getMenuProps.refKey = undefined;
      this.getMenuProps.suppressRefError = undefined;
      // we do something similar for getLabelProps
      this.getLabelProps.called = false;
      // and something similar for getInputProps
      this.getInputProps.called = false;
      var element = unwrapArray(children(this.getStateAndHelpers()));
      if (!element) {
        return null;
      }
      if (this.getRootProps.called || this.props.suppressRefError) {
        if (process.env.NODE_ENV !== 'production' && !this.getRootProps.suppressRefError && !this.props.suppressRefError) {
          validateGetRootPropsCalledCorrectly(element, this.getRootProps);
        }
        return element;
      } else if (isDOMElement(element)) {
        // they didn't apply the root props, but we can clone
        // this and apply the props ourselves
        return /*#__PURE__*/cloneElement(element, this.getRootProps(getElementProps(element)));
      }

      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        // they didn't apply the root props, but they need to
        // otherwise we can't query around the autocomplete

        throw new Error('downshift: If you return a non-DOM element, you must apply the getRootProps function');
      }

      /* istanbul ignore next */
      return undefined;
    };
    return Downshift;
  }(Component);
  Downshift.defaultProps = {
    defaultHighlightedIndex: null,
    defaultIsOpen: false,
    getA11yStatusMessage: getA11yStatusMessage,
    itemToString: function itemToString(i) {
      if (i == null) {
        return '';
      }
      if (process.env.NODE_ENV !== 'production' && isPlainObject(i) && !i.hasOwnProperty('toString')) {
        // eslint-disable-next-line no-console
        console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);
      }
      return String(i);
    },
    onStateChange: noop,
    onInputValueChange: noop,
    onUserAction: noop,
    onChange: noop,
    onSelect: noop,
    onOuterClick: noop,
    selectedItemChanged: function selectedItemChanged(prevItem, item) {
      return prevItem !== item;
    },
    environment: /* istanbul ignore next (ssr) */
    typeof window === 'undefined' || false ? undefined : window,
    stateReducer: function stateReducer(state, stateToSet) {
      return stateToSet;
    },
    suppressRefError: false,
    scrollIntoView: scrollIntoView
  };
  Downshift.stateChangeTypes = stateChangeTypes$3;
  return Downshift;
}();
process.env.NODE_ENV !== "production" ? Downshift.propTypes = {
  children: PropTypes.func,
  defaultHighlightedIndex: PropTypes.number,
  defaultIsOpen: PropTypes.bool,
  initialHighlightedIndex: PropTypes.number,
  initialSelectedItem: PropTypes.any,
  initialInputValue: PropTypes.string,
  initialIsOpen: PropTypes.bool,
  getA11yStatusMessage: PropTypes.func,
  itemToString: PropTypes.func,
  onChange: PropTypes.func,
  onSelect: PropTypes.func,
  onStateChange: PropTypes.func,
  onInputValueChange: PropTypes.func,
  onUserAction: PropTypes.func,
  onOuterClick: PropTypes.func,
  selectedItemChanged: PropTypes.func,
  stateReducer: PropTypes.func,
  itemCount: PropTypes.number,
  id: PropTypes.string,
  environment: PropTypes.shape({
    addEventListener: PropTypes.func.isRequired,
    removeEventListener: PropTypes.func.isRequired,
    document: PropTypes.shape({
      createElement: PropTypes.func.isRequired,
      getElementById: PropTypes.func.isRequired,
      activeElement: PropTypes.any.isRequired,
      body: PropTypes.any.isRequired
    }).isRequired,
    Node: PropTypes.func.isRequired
  }),
  suppressRefError: PropTypes.bool,
  scrollIntoView: PropTypes.func,
  // things we keep in state for uncontrolled components
  // but can accept as props for controlled components
  /* eslint-disable react/no-unused-prop-types */
  selectedItem: PropTypes.any,
  isOpen: PropTypes.bool,
  inputValue: PropTypes.string,
  highlightedIndex: PropTypes.number,
  labelId: PropTypes.string,
  inputId: PropTypes.string,
  menuId: PropTypes.string,
  getItemId: PropTypes.func
  /* eslint-enable react/no-unused-prop-types */
} : void 0;
function validateGetMenuPropsCalledCorrectly(node, _ref12) {
  var refKey = _ref12.refKey;
  if (!node) {
    // eslint-disable-next-line no-console
    console.error("downshift: The ref prop \"" + refKey + "\" from getMenuProps was not applied correctly on your menu element.");
  }
}
function validateGetRootPropsCalledCorrectly(element, _ref13) {
  var refKey = _ref13.refKey;
  var refKeySpecified = refKey !== 'ref';
  var isComposite = !isDOMElement(element);
  if (isComposite && !refKeySpecified && !reactIs.exports.isForwardRef(element)) {
    // eslint-disable-next-line no-console
    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');
  } else if (!isComposite && refKeySpecified) {
    // eslint-disable-next-line no-console
    console.error("downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"" + refKey + "\"");
  }
  if (!reactIs.exports.isForwardRef(element) && !getElementProps(element)[refKey]) {
    // eslint-disable-next-line no-console
    console.error("downshift: You must apply the ref prop \"" + refKey + "\" from getRootProps onto your root element.");
  }
}
var dropdownDefaultStateValues = {
  highlightedIndex: -1,
  isOpen: false,
  selectedItem: null,
  inputValue: ''
};
function callOnChangeProps(action, state, newState) {
  var props = action.props,
    type = action.type;
  var changes = {};
  Object.keys(state).forEach(function (key) {
    invokeOnChangeHandler(key, action, state, newState);
    if (newState[key] !== state[key]) {
      changes[key] = newState[key];
    }
  });
  if (props.onStateChange && Object.keys(changes).length) {
    props.onStateChange(_extends$5({
      type: type
    }, changes));
  }
}
function invokeOnChangeHandler(key, action, state, newState) {
  var props = action.props,
    type = action.type;
  var handler = "on" + capitalizeString(key) + "Change";
  if (props[handler] && newState[key] !== undefined && newState[key] !== state[key]) {
    props[handler](_extends$5({
      type: type
    }, newState));
  }
}

/**
 * Default state reducer that returns the changes.
 *
 * @param {Object} s state.
 * @param {Object} a action with changes.
 * @returns {Object} changes.
 */
function stateReducer(s, a) {
  return a.changes;
}

/**
 * Debounced call for updating the a11y message.
 */
var updateA11yStatus = debounce(function (status, document) {
  setStatus(status, document);
}, 200);

// istanbul ignore next
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;

// istanbul ignore next
var useElementIds = 'useId' in React__default // Avoid conditional useId call
? function useElementIds(_ref) {
  var id = _ref.id,
    labelId = _ref.labelId,
    menuId = _ref.menuId,
    getItemId = _ref.getItemId,
    toggleButtonId = _ref.toggleButtonId,
    inputId = _ref.inputId;
  // Avoid conditional useId call
  var reactId = "downshift-" + React__default.useId();
  if (!id) {
    id = reactId;
  }
  var elementIdsRef = useRef({
    labelId: labelId || id + "-label",
    menuId: menuId || id + "-menu",
    getItemId: getItemId || function (index) {
      return id + "-item-" + index;
    },
    toggleButtonId: toggleButtonId || id + "-toggle-button",
    inputId: inputId || id + "-input"
  });
  return elementIdsRef.current;
} : function useElementIds(_ref2) {
  var _ref2$id = _ref2.id,
    id = _ref2$id === void 0 ? "downshift-" + generateId() : _ref2$id,
    labelId = _ref2.labelId,
    menuId = _ref2.menuId,
    getItemId = _ref2.getItemId,
    toggleButtonId = _ref2.toggleButtonId,
    inputId = _ref2.inputId;
  var elementIdsRef = useRef({
    labelId: labelId || id + "-label",
    menuId: menuId || id + "-menu",
    getItemId: getItemId || function (index) {
      return id + "-item-" + index;
    },
    toggleButtonId: toggleButtonId || id + "-toggle-button",
    inputId: inputId || id + "-input"
  });
  return elementIdsRef.current;
};
function getItemAndIndex(itemProp, indexProp, items, errorMessage) {
  var item, index;
  if (itemProp === undefined) {
    if (indexProp === undefined) {
      throw new Error(errorMessage);
    }
    item = items[indexProp];
    index = indexProp;
  } else {
    index = indexProp === undefined ? items.indexOf(itemProp) : indexProp;
    item = itemProp;
  }
  return [item, index];
}
function capitalizeString(string) {
  return "" + string.slice(0, 1).toUpperCase() + string.slice(1);
}
function useLatestRef(val) {
  var ref = useRef(val);
  // technically this is not "concurrent mode safe" because we're manipulating
  // the value during render (so it's not idempotent). However, the places this
  // hook is used is to support memoizing callbacks which will be called
  // *during* render, so we need the latest values *during* render.
  // If not for this, then we'd probably want to use useLayoutEffect instead.
  ref.current = val;
  return ref;
}

/**
 * Computes the controlled state using a the previous state, props,
 * two reducers, one from downshift and an optional one from the user.
 * Also calls the onChange handlers for state values that have changed.
 *
 * @param {Function} reducer Reducer function from downshift.
 * @param {Object} props The hook props, also passed to createInitialState.
 * @param {Function} createInitialState Function that returns the initial state.
 * @param {Function} isStateEqual Function that checks if a previous state is equal to the next.
 * @returns {Array} An array with the state and an action dispatcher.
 */
function useEnhancedReducer(reducer, props, createInitialState, isStateEqual) {
  var prevStateRef = useRef();
  var actionRef = useRef();
  var enhancedReducer = useCallback(function (state, action) {
    actionRef.current = action;
    state = getState(state, action.props);
    var changes = reducer(state, action);
    var newState = action.props.stateReducer(state, _extends$5({}, action, {
      changes: changes
    }));
    return newState;
  }, [reducer]);
  var _useReducer = useReducer(enhancedReducer, props, createInitialState),
    state = _useReducer[0],
    dispatch = _useReducer[1];
  var propsRef = useLatestRef(props);
  var dispatchWithProps = useCallback(function (action) {
    return dispatch(_extends$5({
      props: propsRef.current
    }, action));
  }, [propsRef]);
  var action = actionRef.current;
  useEffect(function () {
    var prevState = getState(prevStateRef.current, action == null ? void 0 : action.props);
    var shouldCallOnChangeProps = action && prevStateRef.current && !isStateEqual(prevState, state);
    if (shouldCallOnChangeProps) {
      callOnChangeProps(action, prevState, state);
    }
    prevStateRef.current = state;
  }, [state, action, isStateEqual]);
  return [state, dispatchWithProps];
}

/**
 * Wraps the useEnhancedReducer and applies the controlled prop values before
 * returning the new state.
 *
 * @param {Function} reducer Reducer function from downshift.
 * @param {Object} props The hook props, also passed to createInitialState.
 * @param {Function} createInitialState Function that returns the initial state.
 * @param {Function} isStateEqual Function that checks if a previous state is equal to the next.
 * @returns {Array} An array with the state and an action dispatcher.
 */
function useControlledReducer$1(reducer, props, createInitialState, isStateEqual) {
  var _useEnhancedReducer = useEnhancedReducer(reducer, props, createInitialState, isStateEqual),
    state = _useEnhancedReducer[0],
    dispatch = _useEnhancedReducer[1];
  return [getState(state, props), dispatch];
}
var defaultProps$3 = {
  itemToString: function itemToString(item) {
    return item ? String(item) : '';
  },
  itemToKey: function itemToKey(item) {
    return item;
  },
  stateReducer: stateReducer,
  scrollIntoView: scrollIntoView,
  environment: /* istanbul ignore next (ssr) */
  typeof window === 'undefined' || false ? undefined : window
};
function getDefaultValue$1(props, propKey, defaultStateValues) {
  if (defaultStateValues === void 0) {
    defaultStateValues = dropdownDefaultStateValues;
  }
  var defaultValue = props["default" + capitalizeString(propKey)];
  if (defaultValue !== undefined) {
    return defaultValue;
  }
  return defaultStateValues[propKey];
}
function getInitialValue$1(props, propKey, defaultStateValues) {
  if (defaultStateValues === void 0) {
    defaultStateValues = dropdownDefaultStateValues;
  }
  var value = props[propKey];
  if (value !== undefined) {
    return value;
  }
  var initialValue = props["initial" + capitalizeString(propKey)];
  if (initialValue !== undefined) {
    return initialValue;
  }
  return getDefaultValue$1(props, propKey, defaultStateValues);
}
function getInitialState$2(props) {
  var selectedItem = getInitialValue$1(props, 'selectedItem');
  var isOpen = getInitialValue$1(props, 'isOpen');
  var highlightedIndex = getInitialHighlightedIndex(props);
  var inputValue = getInitialValue$1(props, 'inputValue');
  return {
    highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.findIndex(function (item) {
      return props.itemToKey(item) === props.itemToKey(selectedItem);
    }) : highlightedIndex,
    isOpen: isOpen,
    selectedItem: selectedItem,
    inputValue: inputValue
  };
}
function getHighlightedIndexOnOpen(props, state, offset) {
  var items = props.items,
    initialHighlightedIndex = props.initialHighlightedIndex,
    defaultHighlightedIndex = props.defaultHighlightedIndex,
    isItemDisabled = props.isItemDisabled,
    itemToKey = props.itemToKey;
  var selectedItem = state.selectedItem,
    highlightedIndex = state.highlightedIndex;
  if (items.length === 0) {
    return -1;
  }

  // initialHighlightedIndex will give value to highlightedIndex on initial state only.
  if (initialHighlightedIndex !== undefined && highlightedIndex === initialHighlightedIndex && !isItemDisabled(items[initialHighlightedIndex], initialHighlightedIndex)) {
    return initialHighlightedIndex;
  }
  if (defaultHighlightedIndex !== undefined && !isItemDisabled(items[defaultHighlightedIndex], defaultHighlightedIndex)) {
    return defaultHighlightedIndex;
  }
  if (selectedItem) {
    return items.findIndex(function (item) {
      return itemToKey(selectedItem) === itemToKey(item);
    });
  }
  if (offset < 0 && !isItemDisabled(items[items.length - 1], items.length - 1)) {
    return items.length - 1;
  }
  if (offset > 0 && !isItemDisabled(items[0], 0)) {
    return 0;
  }
  return -1;
}
/**
 * Tracks mouse and touch events, such as mouseDown, touchMove and touchEnd.
 *
 * @param {Object} environment The environment to add the event listeners to, for instance window.
 * @param {Array<HTMLElement>} downshiftElementRefs The refs for the element that should not trigger a blur action from mouseDown or touchEnd.
 * @param {Function} handleBlur The function that is called if mouseDown or touchEnd occured outside the downshiftElements.
 * @returns {Object} The mouse and touch events information, if any of are happening.
 */
function useMouseAndTouchTracker(environment, downshiftElementRefs, handleBlur) {
  var mouseAndTouchTrackersRef = useRef({
    isMouseDown: false,
    isTouchMove: false,
    isTouchEnd: false
  });
  useEffect(function () {
    if (!environment) {
      return noop;
    }
    var downshiftElements = downshiftElementRefs.map(function (ref) {
      return ref.current;
    });
    function onMouseDown() {
      mouseAndTouchTrackersRef.current.isTouchEnd = false; // reset this one.
      mouseAndTouchTrackersRef.current.isMouseDown = true;
    }
    function onMouseUp(event) {
      mouseAndTouchTrackersRef.current.isMouseDown = false;
      if (!targetWithinDownshift(event.target, downshiftElements, environment)) {
        handleBlur();
      }
    }
    function onTouchStart() {
      mouseAndTouchTrackersRef.current.isTouchEnd = false;
      mouseAndTouchTrackersRef.current.isTouchMove = false;
    }
    function onTouchMove() {
      mouseAndTouchTrackersRef.current.isTouchMove = true;
    }
    function onTouchEnd(event) {
      mouseAndTouchTrackersRef.current.isTouchEnd = true;
      if (!mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElements, environment, false)) {
        handleBlur();
      }
    }
    environment.addEventListener('mousedown', onMouseDown);
    environment.addEventListener('mouseup', onMouseUp);
    environment.addEventListener('touchstart', onTouchStart);
    environment.addEventListener('touchmove', onTouchMove);
    environment.addEventListener('touchend', onTouchEnd);
    return function cleanup() {
      environment.removeEventListener('mousedown', onMouseDown);
      environment.removeEventListener('mouseup', onMouseUp);
      environment.removeEventListener('touchstart', onTouchStart);
      environment.removeEventListener('touchmove', onTouchMove);
      environment.removeEventListener('touchend', onTouchEnd);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps -- refs don't change
  }, [environment, handleBlur]);
  return mouseAndTouchTrackersRef.current;
}

/* istanbul ignore next */
// eslint-disable-next-line import/no-mutable-exports
var useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {
  return noop;
};
/**
 * Custom hook that checks if getter props are called correctly.
 *
 * @param  {...any} propKeys Getter prop names to be handled.
 * @returns {Function} Setter function called inside getter props to set call information.
 */
/* istanbul ignore next */
if (process.env.NODE_ENV !== 'production') {
  useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {
    var isInitialMountRef = useRef(true);
    for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {
      propKeys[_key] = arguments[_key];
    }
    var getterPropsCalledRef = useRef(propKeys.reduce(function (acc, propKey) {
      acc[propKey] = {};
      return acc;
    }, {}));
    useEffect(function () {
      Object.keys(getterPropsCalledRef.current).forEach(function (propKey) {
        var propCallInfo = getterPropsCalledRef.current[propKey];
        if (isInitialMountRef.current) {
          if (!Object.keys(propCallInfo).length) {
            // eslint-disable-next-line no-console
            console.error("downshift: You forgot to call the " + propKey + " getter function on your component / element.");
            return;
          }
        }
        var suppressRefError = propCallInfo.suppressRefError,
          refKey = propCallInfo.refKey,
          elementRef = propCallInfo.elementRef;
        if ((!elementRef || !elementRef.current) && !suppressRefError) {
          // eslint-disable-next-line no-console
          console.error("downshift: The ref prop \"" + refKey + "\" from " + propKey + " was not applied correctly on your element.");
        }
      });
      isInitialMountRef.current = false;
    });
    var setGetterPropCallInfo = useCallback(function (propKey, suppressRefError, refKey, elementRef) {
      getterPropsCalledRef.current[propKey] = {
        suppressRefError: suppressRefError,
        refKey: refKey,
        elementRef: elementRef
      };
    }, []);
    return setGetterPropCallInfo;
  };
}

/**
 * Adds an a11y aria live status message if getA11yStatusMessage is passed.
 * @param {(options: Object) => string} getA11yStatusMessage The function that builds the status message.
 * @param {Object} options The options to be passed to getA11yStatusMessage if called.
 * @param {Array<unknown>} dependencyArray The dependency array that triggers the status message setter via useEffect.
 * @param {{document: Document}} environment The environment object containing the document.
 */
function useA11yMessageStatus(getA11yStatusMessage, options, dependencyArray, environment) {
  if (environment === void 0) {
    environment = {};
  }
  var document = environment.document;
  var isInitialMount = useIsInitialMount();

  // Adds an a11y aria live status message if getA11yStatusMessage is passed.
  useEffect(function () {
    if (!getA11yStatusMessage || isInitialMount || false || !document) {
      return;
    }
    var status = getA11yStatusMessage(options);
    updateA11yStatus(status, document);

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencyArray);

  // Cleanup the status message container.
  useEffect(function () {
    return function () {
      updateA11yStatus.cancel();
      cleanupStatusDiv(document);
    };
  }, [document]);
}
function useScrollIntoView(_ref3) {
  var highlightedIndex = _ref3.highlightedIndex,
    isOpen = _ref3.isOpen,
    itemRefs = _ref3.itemRefs,
    getItemNodeFromIndex = _ref3.getItemNodeFromIndex,
    menuElement = _ref3.menuElement,
    scrollIntoViewProp = _ref3.scrollIntoView;
  // used not to scroll on highlight by mouse.
  var shouldScrollRef = useRef(true);
  // Scroll on highlighted item if change comes from keyboard.
  useIsomorphicLayoutEffect(function () {
    if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {
      return;
    }
    if (shouldScrollRef.current === false) {
      shouldScrollRef.current = true;
    } else {
      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [highlightedIndex]);
  return shouldScrollRef;
}

// eslint-disable-next-line import/no-mutable-exports
var useControlPropsValidator = noop;
/* istanbul ignore next */
if (process.env.NODE_ENV !== 'production') {
  useControlPropsValidator = function useControlPropsValidator(_ref4) {
    var props = _ref4.props,
      state = _ref4.state;
    // used for checking when props are moving from controlled to uncontrolled.
    var prevPropsRef = useRef(props);
    var isInitialMount = useIsInitialMount();
    useEffect(function () {
      if (isInitialMount) {
        return;
      }
      validateControlledUnchanged(state, prevPropsRef.current, props);
      prevPropsRef.current = props;
    }, [state, props, isInitialMount]);
  };
}

/**
 * Handles selection on Enter / Alt + ArrowUp. Closes the menu and resets the highlighted index, unless there is a highlighted.
 * In that case, selects the item and resets to defaults for open state and highlighted idex.
 * @param {Object} props The useCombobox props.
 * @param {number} highlightedIndex The index from the state.
 * @param {boolean} inputValue Also return the input value for state.
 * @returns The changes for the state.
 */
function getChangesOnSelection(props, highlightedIndex, inputValue) {
  var _props$items;
  if (inputValue === void 0) {
    inputValue = true;
  }
  var shouldSelect = ((_props$items = props.items) == null ? void 0 : _props$items.length) && highlightedIndex >= 0;
  return _extends$5({
    isOpen: false,
    highlightedIndex: -1
  }, shouldSelect && _extends$5({
    selectedItem: props.items[highlightedIndex],
    isOpen: getDefaultValue$1(props, 'isOpen'),
    highlightedIndex: getDefaultValue$1(props, 'highlightedIndex')
  }, inputValue && {
    inputValue: props.itemToString(props.items[highlightedIndex])
  }));
}

/**
 * Check if a state is equal for dropdowns, by comparing isOpen, inputValue, highlightedIndex and selected item.
 * Used by useSelect and useCombobox.
 *
 * @param {Object} prevState
 * @param {Object} newState
 * @returns {boolean} Wheather the states are deeply equal.
 */
function isDropdownsStateEqual(prevState, newState) {
  return prevState.isOpen === newState.isOpen && prevState.inputValue === newState.inputValue && prevState.highlightedIndex === newState.highlightedIndex && prevState.selectedItem === newState.selectedItem;
}

/**
 * Tracks if it's the first render.
 */
function useIsInitialMount() {
  var isInitialMountRef = React__default.useRef(true);
  React__default.useEffect(function () {
    isInitialMountRef.current = false;
    return function () {
      isInitialMountRef.current = true;
    };
  }, []);
  return isInitialMountRef.current;
}

/**
 * Returns the new highlightedIndex based on the defaultHighlightedIndex prop, if it's not disabled.
 *
 * @param {Object} props Props from useCombobox or useSelect.
 * @returns {number} The highlighted index.
 */
function getDefaultHighlightedIndex(props) {
  var highlightedIndex = getDefaultValue$1(props, 'highlightedIndex');
  if (highlightedIndex > -1 && props.isItemDisabled(props.items[highlightedIndex], highlightedIndex)) {
    return -1;
  }
  return highlightedIndex;
}

/**
 * Returns the new highlightedIndex based on the initialHighlightedIndex prop, if not disabled.
 *
 * @param {Object} props Props from useCombobox or useSelect.
 * @returns {number} The highlighted index.
 */
function getInitialHighlightedIndex(props) {
  var highlightedIndex = getInitialValue$1(props, 'highlightedIndex');
  if (highlightedIndex > -1 && props.isItemDisabled(props.items[highlightedIndex], highlightedIndex)) {
    return -1;
  }
  return highlightedIndex;
}

// Shared between all exports.
var commonPropTypes = {
  environment: PropTypes.shape({
    addEventListener: PropTypes.func.isRequired,
    removeEventListener: PropTypes.func.isRequired,
    document: PropTypes.shape({
      createElement: PropTypes.func.isRequired,
      getElementById: PropTypes.func.isRequired,
      activeElement: PropTypes.any.isRequired,
      body: PropTypes.any.isRequired
    }).isRequired,
    Node: PropTypes.func.isRequired
  }),
  itemToString: PropTypes.func,
  itemToKey: PropTypes.func,
  stateReducer: PropTypes.func
};

// Shared between useSelect, useCombobox, Downshift.
var commonDropdownPropTypes = _extends$5({}, commonPropTypes, {
  getA11yStatusMessage: PropTypes.func,
  highlightedIndex: PropTypes.number,
  defaultHighlightedIndex: PropTypes.number,
  initialHighlightedIndex: PropTypes.number,
  isOpen: PropTypes.bool,
  defaultIsOpen: PropTypes.bool,
  initialIsOpen: PropTypes.bool,
  selectedItem: PropTypes.any,
  initialSelectedItem: PropTypes.any,
  defaultSelectedItem: PropTypes.any,
  id: PropTypes.string,
  labelId: PropTypes.string,
  menuId: PropTypes.string,
  getItemId: PropTypes.func,
  toggleButtonId: PropTypes.string,
  onSelectedItemChange: PropTypes.func,
  onHighlightedIndexChange: PropTypes.func,
  onStateChange: PropTypes.func,
  onIsOpenChange: PropTypes.func,
  scrollIntoView: PropTypes.func
});
function downshiftCommonReducer(state, action, stateChangeTypes) {
  var type = action.type,
    props = action.props;
  var changes;
  switch (type) {
    case stateChangeTypes.ItemMouseMove:
      changes = {
        highlightedIndex: action.disabled ? -1 : action.index
      };
      break;
    case stateChangeTypes.MenuMouseLeave:
      changes = {
        highlightedIndex: -1
      };
      break;
    case stateChangeTypes.ToggleButtonClick:
    case stateChangeTypes.FunctionToggleMenu:
      changes = {
        isOpen: !state.isOpen,
        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)
      };
      break;
    case stateChangeTypes.FunctionOpenMenu:
      changes = {
        isOpen: true,
        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)
      };
      break;
    case stateChangeTypes.FunctionCloseMenu:
      changes = {
        isOpen: false
      };
      break;
    case stateChangeTypes.FunctionSetHighlightedIndex:
      changes = {
        highlightedIndex: props.isItemDisabled(props.items[action.highlightedIndex], action.highlightedIndex) ? -1 : action.highlightedIndex
      };
      break;
    case stateChangeTypes.FunctionSetInputValue:
      changes = {
        inputValue: action.inputValue
      };
      break;
    case stateChangeTypes.FunctionReset:
      changes = {
        highlightedIndex: getDefaultHighlightedIndex(props),
        isOpen: getDefaultValue$1(props, 'isOpen'),
        selectedItem: getDefaultValue$1(props, 'selectedItem'),
        inputValue: getDefaultValue$1(props, 'inputValue')
      };
      break;
    default:
      throw new Error('Reducer called without proper action type.');
  }
  return _extends$5({}, state, changes);
}
__assign(__assign({}, commonDropdownPropTypes), {
  items: PropTypes.array.isRequired,
  isItemDisabled: PropTypes.func
});
__assign(__assign({}, defaultProps$3), {
  isItemDisabled: function () {
    return false;
  }
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== 'production') ;
process.env.NODE_ENV !== "production" ? '__togglebutton_click__' : 0;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_arrow_down__' : 1;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_arrow_up__' : 2;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_character__' : 3;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_escape__' : 4;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_home__' : 5;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_end__' : 6;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_enter__' : 7;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_space_button__' : 8;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_page_up__' : 9;
process.env.NODE_ENV !== "production" ? '__togglebutton_keydown_page_down__' : 10;
process.env.NODE_ENV !== "production" ? '__togglebutton_blur__' : 11;
process.env.NODE_ENV !== "production" ? '__menu_mouse_leave__' : 12;
process.env.NODE_ENV !== "production" ? '__item_mouse_move__' : 13;
process.env.NODE_ENV !== "production" ? '__item_click__' : 14;
process.env.NODE_ENV !== "production" ? '__function_toggle_menu__' : 15;
process.env.NODE_ENV !== "production" ? '__function_open_menu__' : 16;
process.env.NODE_ENV !== "production" ? '__function_close_menu__' : 17;
process.env.NODE_ENV !== "production" ? '__function_set_highlighted_index__' : 18;
process.env.NODE_ENV !== "production" ? '__function_select_item__' : 19;
process.env.NODE_ENV !== "production" ? '__function_set_input_value__' : 20;
process.env.NODE_ENV !== "production" ? '__function_reset__' : 21;
var InputKeyDownArrowDown = process.env.NODE_ENV !== "production" ? '__input_keydown_arrow_down__' : 0;
var InputKeyDownArrowUp = process.env.NODE_ENV !== "production" ? '__input_keydown_arrow_up__' : 1;
var InputKeyDownEscape = process.env.NODE_ENV !== "production" ? '__input_keydown_escape__' : 2;
var InputKeyDownHome = process.env.NODE_ENV !== "production" ? '__input_keydown_home__' : 3;
var InputKeyDownEnd = process.env.NODE_ENV !== "production" ? '__input_keydown_end__' : 4;
var InputKeyDownPageUp = process.env.NODE_ENV !== "production" ? '__input_keydown_page_up__' : 5;
var InputKeyDownPageDown = process.env.NODE_ENV !== "production" ? '__input_keydown_page_down__' : 6;
var InputKeyDownEnter = process.env.NODE_ENV !== "production" ? '__input_keydown_enter__' : 7;
var InputChange = process.env.NODE_ENV !== "production" ? '__input_change__' : 8;
var InputBlur = process.env.NODE_ENV !== "production" ? '__input_blur__' : 9;
var InputClick = process.env.NODE_ENV !== "production" ? '__input_click__' : 10;
var MenuMouseLeave = process.env.NODE_ENV !== "production" ? '__menu_mouse_leave__' : 11;
var ItemMouseMove = process.env.NODE_ENV !== "production" ? '__item_mouse_move__' : 12;
var ItemClick = process.env.NODE_ENV !== "production" ? '__item_click__' : 13;
var ToggleButtonClick = process.env.NODE_ENV !== "production" ? '__togglebutton_click__' : 14;
var FunctionToggleMenu = process.env.NODE_ENV !== "production" ? '__function_toggle_menu__' : 15;
var FunctionOpenMenu = process.env.NODE_ENV !== "production" ? '__function_open_menu__' : 16;
var FunctionCloseMenu = process.env.NODE_ENV !== "production" ? '__function_close_menu__' : 17;
var FunctionSetHighlightedIndex = process.env.NODE_ENV !== "production" ? '__function_set_highlighted_index__' : 18;
var FunctionSelectItem = process.env.NODE_ENV !== "production" ? '__function_select_item__' : 19;
var FunctionSetInputValue = process.env.NODE_ENV !== "production" ? '__function_set_input_value__' : 20;
var FunctionReset$1 = process.env.NODE_ENV !== "production" ? '__function_reset__' : 21;
var ControlledPropUpdatedSelectedItem = process.env.NODE_ENV !== "production" ? '__controlled_prop_updated_selected_item__' : 22;
var stateChangeTypes$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ControlledPropUpdatedSelectedItem: ControlledPropUpdatedSelectedItem,
  FunctionCloseMenu: FunctionCloseMenu,
  FunctionOpenMenu: FunctionOpenMenu,
  FunctionReset: FunctionReset$1,
  FunctionSelectItem: FunctionSelectItem,
  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex,
  FunctionSetInputValue: FunctionSetInputValue,
  FunctionToggleMenu: FunctionToggleMenu,
  InputBlur: InputBlur,
  InputChange: InputChange,
  InputClick: InputClick,
  InputKeyDownArrowDown: InputKeyDownArrowDown,
  InputKeyDownArrowUp: InputKeyDownArrowUp,
  InputKeyDownEnd: InputKeyDownEnd,
  InputKeyDownEnter: InputKeyDownEnter,
  InputKeyDownEscape: InputKeyDownEscape,
  InputKeyDownHome: InputKeyDownHome,
  InputKeyDownPageDown: InputKeyDownPageDown,
  InputKeyDownPageUp: InputKeyDownPageUp,
  ItemClick: ItemClick,
  ItemMouseMove: ItemMouseMove,
  MenuMouseLeave: MenuMouseLeave,
  ToggleButtonClick: ToggleButtonClick
});
function getInitialState$1(props) {
  var initialState = getInitialState$2(props);
  var selectedItem = initialState.selectedItem;
  var inputValue = initialState.inputValue;
  if (inputValue === '' && selectedItem && props.defaultInputValue === undefined && props.initialInputValue === undefined && props.inputValue === undefined) {
    inputValue = props.itemToString(selectedItem);
  }
  return _extends$5({}, initialState, {
    inputValue: inputValue
  });
}
var propTypes$1 = _extends$5({}, commonDropdownPropTypes, {
  items: PropTypes.array.isRequired,
  isItemDisabled: PropTypes.func,
  inputValue: PropTypes.string,
  defaultInputValue: PropTypes.string,
  initialInputValue: PropTypes.string,
  inputId: PropTypes.string,
  onInputValueChange: PropTypes.func
});

/**
 * The useCombobox version of useControlledReducer, which also
 * checks if the controlled prop selectedItem changed between
 * renders. If so, it will also update inputValue with its
 * string equivalent. It uses the common useEnhancedReducer to
 * compute the rest of the state.
 *
 * @param {Function} reducer Reducer function from downshift.
 * @param {Object} props The hook props, also passed to createInitialState.
 * @param {Function} createInitialState Function that returns the initial state.
 * @param {Function} isStateEqual Function that checks if a previous state is equal to the next.
 * @returns {Array} An array with the state and an action dispatcher.
 */
function useControlledReducer(reducer, props, createInitialState, isStateEqual) {
  var previousSelectedItemRef = useRef();
  var _useEnhancedReducer = useEnhancedReducer(reducer, props, createInitialState, isStateEqual),
    state = _useEnhancedReducer[0],
    dispatch = _useEnhancedReducer[1];
  var isInitialMount = useIsInitialMount();
  useEffect(function () {
    if (!isControlledProp(props, 'selectedItem')) {
      return;
    }
    if (!isInitialMount // on first mount we already have the proper inputValue for a initial selected item.
    ) {
      var shouldCallDispatch = props.itemToKey(props.selectedItem) !== props.itemToKey(previousSelectedItemRef.current);
      if (shouldCallDispatch) {
        dispatch({
          type: ControlledPropUpdatedSelectedItem,
          inputValue: props.itemToString(props.selectedItem)
        });
      }
    }
    previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [state.selectedItem, props.selectedItem]);
  return [getState(state, props), dispatch];
}

// eslint-disable-next-line import/no-mutable-exports
var validatePropTypes$1 = noop;
/* istanbul ignore next */
if (process.env.NODE_ENV !== 'production') {
  validatePropTypes$1 = function validatePropTypes(options, caller) {
    PropTypes.checkPropTypes(propTypes$1, options, 'prop', caller.name);
  };
}
var defaultProps$1 = _extends$5({}, defaultProps$3, {
  isItemDisabled: function isItemDisabled() {
    return false;
  }
});

/* eslint-disable complexity */
function downshiftUseComboboxReducer(state, action) {
  var _props$items;
  var type = action.type,
    props = action.props,
    altKey = action.altKey;
  var changes;
  switch (type) {
    case ItemClick:
      changes = {
        isOpen: getDefaultValue$1(props, 'isOpen'),
        highlightedIndex: getDefaultHighlightedIndex(props),
        selectedItem: props.items[action.index],
        inputValue: props.itemToString(props.items[action.index])
      };
      break;
    case InputKeyDownArrowDown:
      if (state.isOpen) {
        changes = {
          highlightedIndex: getHighlightedIndex(state.highlightedIndex, 1, props.items, props.isItemDisabled, true)
        };
      } else {
        changes = {
          highlightedIndex: altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1),
          isOpen: props.items.length >= 0
        };
      }
      break;
    case InputKeyDownArrowUp:
      if (state.isOpen) {
        if (altKey) {
          changes = getChangesOnSelection(props, state.highlightedIndex);
        } else {
          changes = {
            highlightedIndex: getHighlightedIndex(state.highlightedIndex, -1, props.items, props.isItemDisabled, true)
          };
        }
      } else {
        changes = {
          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1),
          isOpen: props.items.length >= 0
        };
      }
      break;
    case InputKeyDownEnter:
      changes = getChangesOnSelection(props, state.highlightedIndex);
      break;
    case InputKeyDownEscape:
      changes = _extends$5({
        isOpen: false,
        highlightedIndex: -1
      }, !state.isOpen && {
        selectedItem: null,
        inputValue: ''
      });
      break;
    case InputKeyDownPageUp:
      changes = {
        highlightedIndex: getHighlightedIndex(state.highlightedIndex, -10, props.items, props.isItemDisabled, true)
      };
      break;
    case InputKeyDownPageDown:
      changes = {
        highlightedIndex: getHighlightedIndex(state.highlightedIndex, 10, props.items, props.isItemDisabled, true)
      };
      break;
    case InputKeyDownHome:
      changes = {
        highlightedIndex: getNonDisabledIndex(0, false, props.items, props.isItemDisabled)
      };
      break;
    case InputKeyDownEnd:
      changes = {
        highlightedIndex: getNonDisabledIndex(props.items.length - 1, true, props.items, props.isItemDisabled)
      };
      break;
    case InputBlur:
      changes = _extends$5({
        isOpen: false,
        highlightedIndex: -1
      }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && action.selectItem && {
        selectedItem: props.items[state.highlightedIndex],
        inputValue: props.itemToString(props.items[state.highlightedIndex])
      });
      break;
    case InputChange:
      changes = {
        isOpen: true,
        highlightedIndex: getDefaultHighlightedIndex(props),
        inputValue: action.inputValue
      };
      break;
    case InputClick:
      changes = {
        isOpen: !state.isOpen,
        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)
      };
      break;
    case FunctionSelectItem:
      changes = {
        selectedItem: action.selectedItem,
        inputValue: props.itemToString(action.selectedItem)
      };
      break;
    case ControlledPropUpdatedSelectedItem:
      changes = {
        inputValue: action.inputValue
      };
      break;
    default:
      return downshiftCommonReducer(state, action, stateChangeTypes$1);
  }
  return _extends$5({}, state, changes);
}
/* eslint-enable complexity */

var _excluded$1 = ["onMouseLeave", "refKey", "ref"],
  _excluded2$1 = ["item", "index", "refKey", "ref", "onMouseMove", "onMouseDown", "onClick", "onPress", "disabled"],
  _excluded3 = ["onClick", "onPress", "refKey", "ref"],
  _excluded4 = ["onKeyDown", "onChange", "onInput", "onBlur", "onChangeText", "onClick", "refKey", "ref"];
useCombobox.stateChangeTypes = stateChangeTypes$1;
function useCombobox(userProps) {
  if (userProps === void 0) {
    userProps = {};
  }
  validatePropTypes$1(userProps, useCombobox);
  // Props defaults and destructuring.
  var props = _extends$5({}, defaultProps$1, userProps);
  var items = props.items,
    scrollIntoView = props.scrollIntoView,
    environment = props.environment,
    getA11yStatusMessage = props.getA11yStatusMessage;
  // Initial state depending on controlled props.
  var _useControlledReducer = useControlledReducer(downshiftUseComboboxReducer, props, getInitialState$1, isDropdownsStateEqual),
    state = _useControlledReducer[0],
    dispatch = _useControlledReducer[1];
  var isOpen = state.isOpen,
    highlightedIndex = state.highlightedIndex,
    selectedItem = state.selectedItem,
    inputValue = state.inputValue;

  // Element refs.
  var menuRef = useRef(null);
  var itemRefs = useRef({});
  var inputRef = useRef(null);
  var toggleButtonRef = useRef(null);
  var isInitialMount = useIsInitialMount();

  // prevent id re-generation between renders.
  var elementIds = useElementIds(props);
  // used to keep track of how many items we had on previous cycle.
  var previousResultCountRef = useRef();
  // utility callback to get item element.
  var latest = useLatestRef({
    state: state,
    props: props
  });
  var getItemNodeFromIndex = useCallback(function (index) {
    return itemRefs.current[elementIds.getItemId(index)];
  }, [elementIds]);

  // Effects.
  // Adds an a11y aria live status message if getA11yStatusMessage is passed.
  useA11yMessageStatus(getA11yStatusMessage, state, [isOpen, highlightedIndex, selectedItem, inputValue], environment);
  // Scroll on highlighted item if change comes from keyboard.
  var shouldScrollRef = useScrollIntoView({
    menuElement: menuRef.current,
    highlightedIndex: highlightedIndex,
    isOpen: isOpen,
    itemRefs: itemRefs,
    scrollIntoView: scrollIntoView,
    getItemNodeFromIndex: getItemNodeFromIndex
  });
  useControlPropsValidator({
    props: props,
    state: state
  });
  // Focus the input on first render if required.
  useEffect(function () {
    var focusOnOpen = getInitialValue$1(props, 'isOpen');
    if (focusOnOpen && inputRef.current) {
      inputRef.current.focus();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useEffect(function () {
    if (!isInitialMount) {
      previousResultCountRef.current = items.length;
    }
  });
  var mouseAndTouchTrackers = useMouseAndTouchTracker(environment, [toggleButtonRef, menuRef, inputRef], useCallback(function handleBlur() {
    if (latest.current.state.isOpen) {
      dispatch({
        type: InputBlur,
        selectItem: false
      });
    }
  }, [dispatch, latest]));
  var setGetterPropCallInfo = useGetterPropsCalledChecker('getInputProps', 'getMenuProps');
  // Reset itemRefs on close.
  useEffect(function () {
    if (!isOpen) {
      itemRefs.current = {};
    }
  }, [isOpen]);
  // Reset itemRefs on close.
  useEffect(function () {
    var _inputRef$current;
    if (!isOpen || !(environment != null && environment.document) || !(inputRef != null && (_inputRef$current = inputRef.current) != null && _inputRef$current.focus)) {
      return;
    }
    if (environment.document.activeElement !== inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen, environment]);

  /* Event handler functions */
  var inputKeyDownHandlers = useMemo(function () {
    return {
      ArrowDown: function ArrowDown(event) {
        event.preventDefault();
        dispatch({
          type: InputKeyDownArrowDown,
          altKey: event.altKey
        });
      },
      ArrowUp: function ArrowUp(event) {
        event.preventDefault();
        dispatch({
          type: InputKeyDownArrowUp,
          altKey: event.altKey
        });
      },
      Home: function Home(event) {
        if (!latest.current.state.isOpen) {
          return;
        }
        event.preventDefault();
        dispatch({
          type: InputKeyDownHome
        });
      },
      End: function End(event) {
        if (!latest.current.state.isOpen) {
          return;
        }
        event.preventDefault();
        dispatch({
          type: InputKeyDownEnd
        });
      },
      Escape: function Escape(event) {
        var latestState = latest.current.state;
        if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {
          event.preventDefault();
          dispatch({
            type: InputKeyDownEscape
          });
        }
      },
      Enter: function Enter(event) {
        var latestState = latest.current.state;
        // if closed or no highlighted index, do nothing.
        if (!latestState.isOpen || event.which === 229 // if IME composing, wait for next Enter keydown event.
        ) {
          return;
        }
        event.preventDefault();
        dispatch({
          type: InputKeyDownEnter
        });
      },
      PageUp: function PageUp(event) {
        if (latest.current.state.isOpen) {
          event.preventDefault();
          dispatch({
            type: InputKeyDownPageUp
          });
        }
      },
      PageDown: function PageDown(event) {
        if (latest.current.state.isOpen) {
          event.preventDefault();
          dispatch({
            type: InputKeyDownPageDown
          });
        }
      }
    };
  }, [dispatch, latest]);

  // Getter props.
  var getLabelProps = useCallback(function (labelProps) {
    return _extends$5({
      id: elementIds.labelId,
      htmlFor: elementIds.inputId
    }, labelProps);
  }, [elementIds]);
  var getMenuProps = useCallback(function (_temp, _temp2) {
    var _extends2;
    var _ref = _temp === void 0 ? {} : _temp,
      onMouseLeave = _ref.onMouseLeave,
      _ref$refKey = _ref.refKey,
      refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,
      ref = _ref.ref,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
      _ref2$suppressRefErro = _ref2.suppressRefError,
      suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);
    return _extends$5((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (menuNode) {
      menuRef.current = menuNode;
    }), _extends2.id = elementIds.menuId, _extends2.role = 'listbox', _extends2['aria-labelledby'] = rest && rest['aria-label'] ? undefined : "" + elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, function () {
      dispatch({
        type: MenuMouseLeave
      });
    }), _extends2), rest);
  }, [dispatch, setGetterPropCallInfo, elementIds]);
  var getItemProps = useCallback(function (_temp3) {
    var _extends3, _ref4;
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
      itemProp = _ref3.item,
      indexProp = _ref3.index,
      _ref3$refKey = _ref3.refKey,
      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,
      ref = _ref3.ref,
      onMouseMove = _ref3.onMouseMove,
      onMouseDown = _ref3.onMouseDown,
      onClick = _ref3.onClick;
    _ref3.onPress;
    var disabledProp = _ref3.disabled,
      rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$1);
    if (disabledProp !== undefined) {
      console.warn('Passing "disabled" as an argument to getItemProps is not supported anymore. Please use the isItemDisabled prop from useCombobox.');
    }
    var _latest$current = latest.current,
      latestProps = _latest$current.props,
      latestState = _latest$current.state;
    var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, 'Pass either item or index to getItemProps!'),
      item = _getItemAndIndex[0],
      index = _getItemAndIndex[1];
    var disabled = latestProps.isItemDisabled(item, index);
    var onSelectKey = 'onClick';
    var customClickHandler = onClick;
    var itemHandleMouseMove = function itemHandleMouseMove() {
      if (mouseAndTouchTrackers.isTouchEnd || index === latestState.highlightedIndex) {
        return;
      }
      shouldScrollRef.current = false;
      dispatch({
        type: ItemMouseMove,
        index: index,
        disabled: disabled
      });
    };
    var itemHandleClick = function itemHandleClick() {
      dispatch({
        type: ItemClick,
        index: index
      });
    };
    var itemHandleMouseDown = function itemHandleMouseDown(e) {
      return e.preventDefault();
    }; // keep focus on the input after item click select.

    return _extends$5((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (itemNode) {
      if (itemNode) {
        itemRefs.current[elementIds.getItemId(index)] = itemNode;
      }
    }), _extends3['aria-disabled'] = disabled, _extends3['aria-selected'] = index === latestState.highlightedIndex, _extends3.id = elementIds.getItemId(index), _extends3.role = 'option', _extends3), !disabled && (_ref4 = {}, _ref4[onSelectKey] = callAllEventHandlers(customClickHandler, itemHandleClick), _ref4), {
      onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),
      onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown)
    }, rest);
  }, [dispatch, elementIds, latest, mouseAndTouchTrackers, shouldScrollRef]);
  var getToggleButtonProps = useCallback(function (_temp4) {
    var _extends4;
    var _ref5 = _temp4 === void 0 ? {} : _temp4,
      onClick = _ref5.onClick;
    _ref5.onPress;
    var _ref5$refKey = _ref5.refKey,
      refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,
      ref = _ref5.ref,
      rest = _objectWithoutPropertiesLoose(_ref5, _excluded3);
    var latestState = latest.current.state;
    var toggleButtonHandleClick = function toggleButtonHandleClick() {
      dispatch({
        type: ToggleButtonClick
      });
    };
    return _extends$5((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function (toggleButtonNode) {
      toggleButtonRef.current = toggleButtonNode;
    }), _extends4['aria-controls'] = elementIds.menuId, _extends4['aria-expanded'] = latestState.isOpen, _extends4.id = elementIds.toggleButtonId, _extends4.tabIndex = -1, _extends4), !rest.disabled && _extends$5({}, {
      onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)
    }), rest);
  }, [dispatch, latest, elementIds]);
  var getInputProps = useCallback(function (_temp5, _temp6) {
    var _extends5;
    var _ref6 = _temp5 === void 0 ? {} : _temp5,
      onKeyDown = _ref6.onKeyDown,
      onChange = _ref6.onChange,
      onInput = _ref6.onInput,
      onBlur = _ref6.onBlur;
    _ref6.onChangeText;
    var onClick = _ref6.onClick,
      _ref6$refKey = _ref6.refKey,
      refKey = _ref6$refKey === void 0 ? 'ref' : _ref6$refKey,
      ref = _ref6.ref,
      rest = _objectWithoutPropertiesLoose(_ref6, _excluded4);
    var _ref7 = _temp6 === void 0 ? {} : _temp6,
      _ref7$suppressRefErro = _ref7.suppressRefError,
      suppressRefError = _ref7$suppressRefErro === void 0 ? false : _ref7$suppressRefErro;
    setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef);
    var latestState = latest.current.state;
    var inputHandleKeyDown = function inputHandleKeyDown(event) {
      var key = normalizeArrowKey(event);
      if (key && inputKeyDownHandlers[key]) {
        inputKeyDownHandlers[key](event);
      }
    };
    var inputHandleChange = function inputHandleChange(event) {
      dispatch({
        type: InputChange,
        inputValue: event.target.value
      });
    };
    var inputHandleBlur = function inputHandleBlur(event) {
      /* istanbul ignore else */
      if (environment != null && environment.document && latestState.isOpen && !mouseAndTouchTrackers.isMouseDown) {
        var isBlurByTabChange = event.relatedTarget === null && environment.document.activeElement !== environment.document.body;
        dispatch({
          type: InputBlur,
          selectItem: !isBlurByTabChange
        });
      }
    };
    var inputHandleClick = function inputHandleClick() {
      dispatch({
        type: InputClick
      });
    };

    /* istanbul ignore next (preact) */
    var onChangeKey = 'onChange';
    var eventHandlers = {};
    if (!rest.disabled) {
      var _eventHandlers;
      eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, inputHandleBlur), _eventHandlers.onClick = callAllEventHandlers(onClick, inputHandleClick), _eventHandlers);
    }
    return _extends$5((_extends5 = {}, _extends5[refKey] = handleRefs(ref, function (inputNode) {
      inputRef.current = inputNode;
    }), _extends5['aria-activedescendant'] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '', _extends5['aria-autocomplete'] = 'list', _extends5['aria-controls'] = elementIds.menuId, _extends5['aria-expanded'] = latestState.isOpen, _extends5['aria-labelledby'] = rest && rest['aria-label'] ? undefined : elementIds.labelId, _extends5.autoComplete = 'off', _extends5.id = elementIds.inputId, _extends5.role = 'combobox', _extends5.value = latestState.inputValue, _extends5), eventHandlers, rest);
  }, [dispatch, elementIds, environment, inputKeyDownHandlers, latest, mouseAndTouchTrackers, setGetterPropCallInfo]);

  // returns
  var toggleMenu = useCallback(function () {
    dispatch({
      type: FunctionToggleMenu
    });
  }, [dispatch]);
  var closeMenu = useCallback(function () {
    dispatch({
      type: FunctionCloseMenu
    });
  }, [dispatch]);
  var openMenu = useCallback(function () {
    dispatch({
      type: FunctionOpenMenu
    });
  }, [dispatch]);
  var setHighlightedIndex = useCallback(function (newHighlightedIndex) {
    dispatch({
      type: FunctionSetHighlightedIndex,
      highlightedIndex: newHighlightedIndex
    });
  }, [dispatch]);
  var selectItem = useCallback(function (newSelectedItem) {
    dispatch({
      type: FunctionSelectItem,
      selectedItem: newSelectedItem
    });
  }, [dispatch]);
  var setInputValue = useCallback(function (newInputValue) {
    dispatch({
      type: FunctionSetInputValue,
      inputValue: newInputValue
    });
  }, [dispatch]);
  var reset = useCallback(function () {
    dispatch({
      type: FunctionReset$1
    });
  }, [dispatch]);
  return {
    // prop getters.
    getItemProps: getItemProps,
    getLabelProps: getLabelProps,
    getMenuProps: getMenuProps,
    getInputProps: getInputProps,
    getToggleButtonProps: getToggleButtonProps,
    // actions.
    toggleMenu: toggleMenu,
    openMenu: openMenu,
    closeMenu: closeMenu,
    setHighlightedIndex: setHighlightedIndex,
    setInputValue: setInputValue,
    selectItem: selectItem,
    reset: reset,
    // state.
    highlightedIndex: highlightedIndex,
    isOpen: isOpen,
    selectedItem: selectedItem,
    inputValue: inputValue
  };
}
var defaultStateValues = {
  activeIndex: -1,
  selectedItems: []
};

/**
 * Returns the initial value for a state key in the following order:
 * 1. controlled prop, 2. initial prop, 3. default prop, 4. default
 * value from Downshift.
 *
 * @param {Object} props Props passed to the hook.
 * @param {string} propKey Props key to generate the value for.
 * @returns {any} The initial value for that prop.
 */
function getInitialValue(props, propKey) {
  return getInitialValue$1(props, propKey, defaultStateValues);
}

/**
 * Returns the default value for a state key in the following order:
 * 1. controlled prop, 2. default prop, 3. default value from Downshift.
 *
 * @param {Object} props Props passed to the hook.
 * @param {string} propKey Props key to generate the value for.
 * @returns {any} The initial value for that prop.
 */
function getDefaultValue$2(props, propKey) {
  return getDefaultValue$1(props, propKey, defaultStateValues);
}

/**
 * Gets the initial state based on the provided props. It uses initial, default
 * and controlled props related to state in order to compute the initial value.
 *
 * @param {Object} props Props passed to the hook.
 * @returns {Object} The initial state.
 */
function getInitialState(props) {
  var activeIndex = getInitialValue(props, 'activeIndex');
  var selectedItems = getInitialValue(props, 'selectedItems');
  return {
    activeIndex: activeIndex,
    selectedItems: selectedItems
  };
}

/**
 * Returns true if dropdown keydown operation is permitted. Should not be
 * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on
 * input element with text content that is either highlighted or selection
 * cursor is not at the starting position.
 *
 * @param {KeyboardEvent} event The event from keydown.
 * @returns {boolean} Whether the operation is allowed.
 */
function isKeyDownOperationPermitted(event) {
  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
    return false;
  }
  var element = event.target;
  if (element instanceof HTMLInputElement &&
  // if element is a text input
  element.value !== '' && (
  // and we have text in it
  // and cursor is either not at the start or is currently highlighting text.
  element.selectionStart !== 0 || element.selectionEnd !== 0)) {
    return false;
  }
  return true;
}

/**
 * Check if a state is equal for taglist, by comparing active index and selected items.
 * Used by useSelect and useCombobox.
 *
 * @param {Object} prevState
 * @param {Object} newState
 * @returns {boolean} Wheather the states are deeply equal.
 */
function isStateEqual(prevState, newState) {
  return prevState.selectedItems === newState.selectedItems && prevState.activeIndex === newState.activeIndex;
}
var propTypes = {
  stateReducer: commonPropTypes.stateReducer,
  itemToKey: commonPropTypes.itemToKey,
  environment: commonPropTypes.environment,
  selectedItems: PropTypes.array,
  initialSelectedItems: PropTypes.array,
  defaultSelectedItems: PropTypes.array,
  getA11yStatusMessage: PropTypes.func,
  activeIndex: PropTypes.number,
  initialActiveIndex: PropTypes.number,
  defaultActiveIndex: PropTypes.number,
  onActiveIndexChange: PropTypes.func,
  onSelectedItemsChange: PropTypes.func,
  keyNavigationNext: PropTypes.string,
  keyNavigationPrevious: PropTypes.string
};
var defaultProps = {
  itemToKey: defaultProps$3.itemToKey,
  stateReducer: defaultProps$3.stateReducer,
  environment: defaultProps$3.environment,
  keyNavigationNext: 'ArrowRight',
  keyNavigationPrevious: 'ArrowLeft'
};

// eslint-disable-next-line import/no-mutable-exports
var validatePropTypes = noop;
/* istanbul ignore next */
if (process.env.NODE_ENV !== 'production') {
  validatePropTypes = function validatePropTypes(options, caller) {
    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name);
  };
}
var SelectedItemClick = process.env.NODE_ENV !== "production" ? '__selected_item_click__' : 0;
var SelectedItemKeyDownDelete = process.env.NODE_ENV !== "production" ? '__selected_item_keydown_delete__' : 1;
var SelectedItemKeyDownBackspace = process.env.NODE_ENV !== "production" ? '__selected_item_keydown_backspace__' : 2;
var SelectedItemKeyDownNavigationNext = process.env.NODE_ENV !== "production" ? '__selected_item_keydown_navigation_next__' : 3;
var SelectedItemKeyDownNavigationPrevious = process.env.NODE_ENV !== "production" ? '__selected_item_keydown_navigation_previous__' : 4;
var DropdownKeyDownNavigationPrevious = process.env.NODE_ENV !== "production" ? '__dropdown_keydown_navigation_previous__' : 5;
var DropdownKeyDownBackspace = process.env.NODE_ENV !== "production" ? '__dropdown_keydown_backspace__' : 6;
var DropdownClick = process.env.NODE_ENV !== "production" ? '__dropdown_click__' : 7;
var FunctionAddSelectedItem = process.env.NODE_ENV !== "production" ? '__function_add_selected_item__' : 8;
var FunctionRemoveSelectedItem = process.env.NODE_ENV !== "production" ? '__function_remove_selected_item__' : 9;
var FunctionSetSelectedItems = process.env.NODE_ENV !== "production" ? '__function_set_selected_items__' : 10;
var FunctionSetActiveIndex = process.env.NODE_ENV !== "production" ? '__function_set_active_index__' : 11;
var FunctionReset = process.env.NODE_ENV !== "production" ? '__function_reset__' : 12;
var stateChangeTypes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  DropdownClick: DropdownClick,
  DropdownKeyDownBackspace: DropdownKeyDownBackspace,
  DropdownKeyDownNavigationPrevious: DropdownKeyDownNavigationPrevious,
  FunctionAddSelectedItem: FunctionAddSelectedItem,
  FunctionRemoveSelectedItem: FunctionRemoveSelectedItem,
  FunctionReset: FunctionReset,
  FunctionSetActiveIndex: FunctionSetActiveIndex,
  FunctionSetSelectedItems: FunctionSetSelectedItems,
  SelectedItemClick: SelectedItemClick,
  SelectedItemKeyDownBackspace: SelectedItemKeyDownBackspace,
  SelectedItemKeyDownDelete: SelectedItemKeyDownDelete,
  SelectedItemKeyDownNavigationNext: SelectedItemKeyDownNavigationNext,
  SelectedItemKeyDownNavigationPrevious: SelectedItemKeyDownNavigationPrevious
});

/* eslint-disable complexity */
function downshiftMultipleSelectionReducer(state, action) {
  var type = action.type,
    index = action.index,
    props = action.props,
    selectedItem = action.selectedItem;
  var activeIndex = state.activeIndex,
    selectedItems = state.selectedItems;
  var changes;
  switch (type) {
    case SelectedItemClick:
      changes = {
        activeIndex: index
      };
      break;
    case SelectedItemKeyDownNavigationPrevious:
      changes = {
        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1
      };
      break;
    case SelectedItemKeyDownNavigationNext:
      changes = {
        activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1
      };
      break;
    case SelectedItemKeyDownBackspace:
    case SelectedItemKeyDownDelete:
      {
        if (activeIndex < 0) {
          break;
        }
        var newActiveIndex = activeIndex;
        if (selectedItems.length === 1) {
          newActiveIndex = -1;
        } else if (activeIndex === selectedItems.length - 1) {
          newActiveIndex = selectedItems.length - 2;
        }
        changes = _extends$5({
          selectedItems: [].concat(selectedItems.slice(0, activeIndex), selectedItems.slice(activeIndex + 1))
        }, {
          activeIndex: newActiveIndex
        });
        break;
      }
    case DropdownKeyDownNavigationPrevious:
      changes = {
        activeIndex: selectedItems.length - 1
      };
      break;
    case DropdownKeyDownBackspace:
      changes = {
        selectedItems: selectedItems.slice(0, selectedItems.length - 1)
      };
      break;
    case FunctionAddSelectedItem:
      changes = {
        selectedItems: [].concat(selectedItems, [selectedItem])
      };
      break;
    case DropdownClick:
      changes = {
        activeIndex: -1
      };
      break;
    case FunctionRemoveSelectedItem:
      {
        var _newActiveIndex = activeIndex;
        var selectedItemIndex = selectedItems.findIndex(function (item) {
          return props.itemToKey(item) === props.itemToKey(selectedItem);
        });
        if (selectedItemIndex < 0) {
          break;
        }
        if (selectedItems.length === 1) {
          _newActiveIndex = -1;
        } else if (selectedItemIndex === selectedItems.length - 1) {
          _newActiveIndex = selectedItems.length - 2;
        }
        changes = {
          selectedItems: [].concat(selectedItems.slice(0, selectedItemIndex), selectedItems.slice(selectedItemIndex + 1)),
          activeIndex: _newActiveIndex
        };
        break;
      }
    case FunctionSetSelectedItems:
      {
        var newSelectedItems = action.selectedItems;
        changes = {
          selectedItems: newSelectedItems
        };
        break;
      }
    case FunctionSetActiveIndex:
      {
        var _newActiveIndex2 = action.activeIndex;
        changes = {
          activeIndex: _newActiveIndex2
        };
        break;
      }
    case FunctionReset:
      changes = {
        activeIndex: getDefaultValue$2(props, 'activeIndex'),
        selectedItems: getDefaultValue$2(props, 'selectedItems')
      };
      break;
    default:
      throw new Error('Reducer called without proper action type.');
  }
  return _extends$5({}, state, changes);
}
var _excluded = ["refKey", "ref", "onClick", "onKeyDown", "selectedItem", "index"],
  _excluded2 = ["refKey", "ref", "onKeyDown", "onClick", "preventKeyAction"];
useMultipleSelection.stateChangeTypes = stateChangeTypes;
function useMultipleSelection(userProps) {
  if (userProps === void 0) {
    userProps = {};
  }
  validatePropTypes(userProps, useMultipleSelection);
  // Props defaults and destructuring.
  var props = _extends$5({}, defaultProps, userProps);
  var getA11yStatusMessage = props.getA11yStatusMessage,
    environment = props.environment,
    keyNavigationNext = props.keyNavigationNext,
    keyNavigationPrevious = props.keyNavigationPrevious;

  // Reducer init.
  var _useControlledReducer = useControlledReducer$1(downshiftMultipleSelectionReducer, props, getInitialState, isStateEqual),
    state = _useControlledReducer[0],
    dispatch = _useControlledReducer[1];
  var activeIndex = state.activeIndex,
    selectedItems = state.selectedItems;

  // Refs.
  var isInitialMount = useIsInitialMount();
  var dropdownRef = useRef(null);
  var selectedItemRefs = useRef();
  selectedItemRefs.current = [];
  var latest = useLatestRef({
    state: state,
    props: props
  });

  // Effects.
  // Adds an a11y aria live status message if getA11yStatusMessage is passed.
  useA11yMessageStatus(getA11yStatusMessage, state, [activeIndex, selectedItems], environment);
  // Sets focus on active item.
  useEffect(function () {
    if (isInitialMount) {
      return;
    }
    if (activeIndex === -1 && dropdownRef.current) {
      dropdownRef.current.focus();
    } else if (selectedItemRefs.current[activeIndex]) {
      selectedItemRefs.current[activeIndex].focus();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activeIndex]);
  useControlPropsValidator({
    props: props,
    state: state
  });
  var setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps');

  // Event handler functions.
  var selectedItemKeyDownHandlers = useMemo(function () {
    var _ref;
    return _ref = {}, _ref[keyNavigationPrevious] = function () {
      dispatch({
        type: SelectedItemKeyDownNavigationPrevious
      });
    }, _ref[keyNavigationNext] = function () {
      dispatch({
        type: SelectedItemKeyDownNavigationNext
      });
    }, _ref.Delete = function Delete() {
      dispatch({
        type: SelectedItemKeyDownDelete
      });
    }, _ref.Backspace = function Backspace() {
      dispatch({
        type: SelectedItemKeyDownBackspace
      });
    }, _ref;
  }, [dispatch, keyNavigationNext, keyNavigationPrevious]);
  var dropdownKeyDownHandlers = useMemo(function () {
    var _ref2;
    return _ref2 = {}, _ref2[keyNavigationPrevious] = function (event) {
      if (isKeyDownOperationPermitted(event)) {
        dispatch({
          type: DropdownKeyDownNavigationPrevious
        });
      }
    }, _ref2.Backspace = function Backspace(event) {
      if (isKeyDownOperationPermitted(event)) {
        dispatch({
          type: DropdownKeyDownBackspace
        });
      }
    }, _ref2;
  }, [dispatch, keyNavigationPrevious]);

  // Getter props.
  var getSelectedItemProps = useCallback(function (_temp) {
    var _extends2;
    var _ref3 = _temp === void 0 ? {} : _temp,
      _ref3$refKey = _ref3.refKey,
      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,
      ref = _ref3.ref,
      onClick = _ref3.onClick,
      onKeyDown = _ref3.onKeyDown,
      selectedItemProp = _ref3.selectedItem,
      indexProp = _ref3.index,
      rest = _objectWithoutPropertiesLoose(_ref3, _excluded);
    var latestState = latest.current.state;
    var _getItemAndIndex = getItemAndIndex(selectedItemProp, indexProp, latestState.selectedItems, 'Pass either item or index to getSelectedItemProps!'),
      index = _getItemAndIndex[1];
    var isFocusable = index > -1 && index === latestState.activeIndex;
    var selectedItemHandleClick = function selectedItemHandleClick() {
      dispatch({
        type: SelectedItemClick,
        index: index
      });
    };
    var selectedItemHandleKeyDown = function selectedItemHandleKeyDown(event) {
      var key = normalizeArrowKey(event);
      if (key && selectedItemKeyDownHandlers[key]) {
        selectedItemKeyDownHandlers[key](event);
      }
    };
    return _extends$5((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (selectedItemNode) {
      if (selectedItemNode) {
        selectedItemRefs.current.push(selectedItemNode);
      }
    }), _extends2.tabIndex = isFocusable ? 0 : -1, _extends2.onClick = callAllEventHandlers(onClick, selectedItemHandleClick), _extends2.onKeyDown = callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown), _extends2), rest);
  }, [dispatch, latest, selectedItemKeyDownHandlers]);
  var getDropdownProps = useCallback(function (_temp2, _temp3) {
    var _extends3;
    var _ref4 = _temp2 === void 0 ? {} : _temp2,
      _ref4$refKey = _ref4.refKey,
      refKey = _ref4$refKey === void 0 ? 'ref' : _ref4$refKey,
      ref = _ref4.ref,
      onKeyDown = _ref4.onKeyDown,
      onClick = _ref4.onClick,
      _ref4$preventKeyActio = _ref4.preventKeyAction,
      preventKeyAction = _ref4$preventKeyActio === void 0 ? false : _ref4$preventKeyActio,
      rest = _objectWithoutPropertiesLoose(_ref4, _excluded2);
    var _ref5 = _temp3 === void 0 ? {} : _temp3,
      _ref5$suppressRefErro = _ref5.suppressRefError,
      suppressRefError = _ref5$suppressRefErro === void 0 ? false : _ref5$suppressRefErro;
    setGetterPropCallInfo('getDropdownProps', suppressRefError, refKey, dropdownRef);
    var dropdownHandleKeyDown = function dropdownHandleKeyDown(event) {
      var key = normalizeArrowKey(event);
      if (key && dropdownKeyDownHandlers[key]) {
        dropdownKeyDownHandlers[key](event);
      }
    };
    var dropdownHandleClick = function dropdownHandleClick() {
      dispatch({
        type: DropdownClick
      });
    };
    return _extends$5((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (dropdownNode) {
      if (dropdownNode) {
        dropdownRef.current = dropdownNode;
      }
    }), _extends3), !preventKeyAction && {
      onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),
      onClick: callAllEventHandlers(onClick, dropdownHandleClick)
    }, rest);
  }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]);

  // returns
  var addSelectedItem = useCallback(function (selectedItem) {
    dispatch({
      type: FunctionAddSelectedItem,
      selectedItem: selectedItem
    });
  }, [dispatch]);
  var removeSelectedItem = useCallback(function (selectedItem) {
    dispatch({
      type: FunctionRemoveSelectedItem,
      selectedItem: selectedItem
    });
  }, [dispatch]);
  var setSelectedItems = useCallback(function (newSelectedItems) {
    dispatch({
      type: FunctionSetSelectedItems,
      selectedItems: newSelectedItems
    });
  }, [dispatch]);
  var setActiveIndex = useCallback(function (newActiveIndex) {
    dispatch({
      type: FunctionSetActiveIndex,
      activeIndex: newActiveIndex
    });
  }, [dispatch]);
  var reset = useCallback(function () {
    dispatch({
      type: FunctionReset
    });
  }, [dispatch]);
  return {
    getSelectedItemProps: getSelectedItemProps,
    getDropdownProps: getDropdownProps,
    addSelectedItem: addSelectedItem,
    removeSelectedItem: removeSelectedItem,
    setSelectedItems: setSelectedItems,
    setActiveIndex: setActiveIndex,
    reset: reset,
    selectedItems: selectedItems,
    activeIndex: activeIndex
  };
}

var SelectWrapper = styled.div.withConfig({
  displayName: "StyledSelect__SelectWrapper",
  componentId: "sc-1fpvpbe-0"
})(["&&{position:relative;margin:0;padding:0;}&&:focus{outline:none;}&& > ", "{display:block;}"], DropdownWrapper);
var MenuWrapper = styled.div.withConfig({
  displayName: "StyledSelect__MenuWrapper",
  componentId: "sc-1fpvpbe-1"
})(["&&{overflow-y:auto;max-height:", ";margin:0;padding:0;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.select.sizes.menuMaxHeight;
});
var CategoryWrapper = styled.div.withConfig({
  displayName: "StyledSelect__CategoryWrapper",
  componentId: "sc-1fpvpbe-2"
})(["&&{margin:0;padding:", ";font-size:", ";line-height:", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.select.space.menuCategoryPadding;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.select.fontSizes.menuCategory;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.select.lineHeights.menuCategory;
});
var HelpTextWrapper = styled.div.withConfig({
  displayName: "StyledSelect__HelpTextWrapper",
  componentId: "sc-1fpvpbe-3"
})(["&&{display:flex;margin:0;padding:0;align-items:center;}"]);
var CheckmarkWrapper = styled.div.withConfig({
  displayName: "StyledSelect__CheckmarkWrapper",
  componentId: "sc-1fpvpbe-4"
})(["&&{display:inline-flex;margin:0;padding:0;margin-left:", ";opacity:", ";}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.select.space.menuCheckmarkMarginLeft;
}, function (_ref6) {
  var shown = _ref6.shown;
  return shown ? 1 : 0;
});
var StyledSuffixIconWrapper = styled.div.withConfig({
  displayName: "StyledSelect__StyledSuffixIconWrapper",
  componentId: "sc-1fpvpbe-5"
})(["&&{display:flex;align-items:center;margin:0;padding:0;}"]);
var StyledLoadingIconWrapper$1 = styled.div.withConfig({
  displayName: "StyledSelect__StyledLoadingIconWrapper",
  componentId: "sc-1fpvpbe-6"
})(["&&{display:flex;margin:0;padding:0;padding-right:", ";}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.select.space.loadingIconPaddingRight;
});

var map = function map(f) {
  return function (arr) {
    return arr.map(f);
  };
};
var reject = function reject(f) {
  return function (arr) {
    return arr.filter(function (a) {
      return !f(a);
    });
  };
};
var find = function find(f) {
  return function (arr) {
    return pipe(arr, function (array) {
      return array.find(f);
    }, fromUndefinedable);
  };
};
var reduce = function reduce(reduceFn, init) {
  return function (arr) {
    return arr.reduce(reduceFn, init);
  };
};
var flat = function flat(arr) {
  return reduce(function (acc, current) {
    return [].concat(_toConsumableArray(acc), _toConsumableArray(current));
  }, [])(arr);
};

var checkAtBottom = function checkAtBottom(element) {
  return pipe(fromNullable(element),
  // Fix issue with scrollTop on some browsers scale being in different values
  map$2(function (el) {
    return el.scrollHeight - Math.ceil(el.scrollTop) === el.clientHeight;
  }), getOrElse(function () {
    return undefined;
  }));
};
var getItemOffsetTop = function getItemOffsetTop(itemEl) {
  return pipe(fromNullable(itemEl), map$2(function (el) {
    return el.offsetTop;
  }), getOrElse(function () {
    return undefined;
  }));
};
var isGroupedOptions = function isGroupedOptions(options) {
  var firstOption = options[0];
  return firstOption !== undefined && firstOption.category !== undefined;
};
var mapOptions = function mapOptions(options) {
  if (isGroupedOptions(options)) {
    return options;
  }
  return [{
    category: '',
    options: options
  }];
};
var optionPredicate = function optionPredicate(query) {
  return function (option) {
    var _a, _b;
    if (query === undefined) {
      return true;
    }
    var matchedOptionText = option.text.toLowerCase().includes(query.toLowerCase());
    var matchedOptionHelpText = (_b = (_a = option.helpText) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(query.toLowerCase())) !== null && _b !== void 0 ? _b : false;
    return matchedOptionText || matchedOptionHelpText;
  };
};
var filterGroupedOptions = function filterGroupedOptions(predicate, groupedOptions) {
  return groupedOptions.map(function (groupedOpt) {
    return Object.assign(Object.assign({}, groupedOpt), {
      options: groupedOpt.options.filter(predicate)
    });
  }).filter(function (groupedOpt) {
    return groupedOpt.options.length > 0;
  });
};
var getAccumulatedIndex = function getAccumulatedIndex(options, catIndex) {
  if (catIndex === 0) {
    return 0;
  }
  return options.slice(0, catIndex).reduce(function (acc, groupedOpt) {
    return acc + groupedOpt.options.length;
  }, 0);
};
var findNonDisabledItemIdx = function findNonDisabledItemIdx(items, currIdx, type) {
  var idx = currIdx;
  switch (type) {
    case 'prev':
      do {
        idx -= 1;
        if (idx < 0) {
          idx = items.length - 1;
        }
      } while (items[idx].disabled && idx !== currIdx);
      break;
    case 'next':
      do {
        idx += 1;
        if (idx >= items.length) {
          idx = 0;
        }
      } while (items[idx].disabled && idx !== currIdx);
      break;
  }
  return idx;
};

var InputContainer = styled.div.withConfig({
  displayName: "Styled__InputContainer",
  componentId: "sc-1l17jv1-0"
})(["&&{display:inline-flex;flex-wrap:wrap;align-items:center;flex:1;position:relative;overflow:hidden;margin:0;", ";}"], function (_ref) {
  var themePaddingLeft = _ref.themePaddingLeft,
    theme = _ref.theme;
  switch (themePaddingLeft) {
    case 'small':
      return css$2(["padding:0 0 0 ", ";"], theme.__hd__.input.space.smallPadding);
    case 'medium':
      return css$2(["padding:0 0 0 ", ";"], theme.__hd__.input.space.mediumPadding);
    case 'large':
      return css$2(["padding:0 0 0 ", ";"], theme.__hd__.input.space.largePadding);
    case 'none':
      return css$2(["padding:0;"]);
  }
});
var SelectedItemText = styled.div.withConfig({
  displayName: "Styled__SelectedItemText",
  componentId: "sc-1l17jv1-1"
})(["&&{position:absolute;margin:0;padding:0;white-space:nowrap;", ";}"], function (_ref2) {
  var themeState = _ref2.themeState,
    theme = _ref2.theme;
  switch (themeState) {
    case 'enabled':
      return css$2(["color:", ";"], theme.__hd__.input.colors.text);
    case 'disabled':
      return css$2(["color:", ";"], theme.__hd__.input.colors.disabledText);
  }
});
var StyledHiddenInput = styled.input.withConfig({
  displayName: "Styled__StyledHiddenInput",
  componentId: "sc-1l17jv1-2"
})(["&&{position:fixed;width:0;height:0;opacity:0;margin:0;padding:0;}"]);

var HiddenInput$2 = function HiddenInput(_ref) {
  var options = _ref.options,
    value = _ref.value,
    onChange = _ref.onChange,
    onQueryChange = _ref.onQueryChange,
    name = _ref.name;
  var flatOptions = useMemo(function () {
    return pipe(options, mapOptions, map(function (opt) {
      return opt.options;
    }), flat);
  }, [options]);
  var onChangeInputValue = useCallback(function (e) {
    var foundItem = flatOptions.find(function (item) {
      return item.value === e.target.value;
    });
    if (foundItem !== undefined) {
      onChange(foundItem.value);
      onQueryChange === null || onQueryChange === void 0 ? void 0 : onQueryChange(undefined);
    }
  }, [flatOptions, onChange, onQueryChange]);
  return /*#__PURE__*/React__default.createElement(StyledHiddenInput, {
    name: name,
    value: value === undefined ? '' : value,
    onChange: onChangeInputValue,
    tabIndex: -1
  });
};
var HiddenInput$3 = HiddenInput$2;

var StyledDivider = styled.div.withConfig({
  displayName: "StyledDivider",
  componentId: "sc-1t1m01w-0"
})(["&&{margin:0;padding:0;", ";", ";", ";}"], function (_ref) {
  var themeVariant = _ref.themeVariant,
    theme = _ref.theme;
  switch (themeVariant) {
    case 'vertical':
      return css$2(["border-left-width:", ";border-left-color:", ";border-left-style:solid;"], theme.__hd__.divider.borderWidths["default"], theme.__hd__.divider.colors["default"]);
    case 'horizontal':
      return css$2(["border-bottom-width:", ";border-bottom-color:", ";border-bottom-style:solid;"], theme.__hd__.divider.borderWidths["default"], theme.__hd__.divider.colors["default"]);
  }
}, function (_ref2) {
  var themeMarginY = _ref2.themeMarginY,
    theme = _ref2.theme;
  switch (themeMarginY) {
    case undefined:
      return css$2([""]);
    case 'xsmall':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.xsmallMarginY);
    case 'small':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.smallMarginY);
    case 'medium':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.mediumMarginY);
    case 'large':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.largeMarginY);
    case 'xlarge':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.xlargeMarginY);
  }
}, function (_ref3) {
  var themeMarginX = _ref3.themeMarginX,
    theme = _ref3.theme;
  switch (themeMarginX) {
    case undefined:
      return css$2([""]);
    case 'xsmall':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.xsmallMarginX);
    case 'small':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.smallMarginX);
    case 'medium':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.mediumMarginX);
    case 'large':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.largeMarginX);
    case 'xlarge':
      return css$2(["margin:", ";"], theme.__hd__.divider.space.xlargeMarginX);
  }
});
var Divider$2 = StyledDivider;

var Divider = function Divider(_ref) {
  var marginX = _ref.marginX,
    marginY = _ref.marginY,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'horizontal' : _ref$variant,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(Divider$2, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themeVariant: variant,
    themeMarginX: marginX,
    themeMarginY: marginY
  });
};
var Divider$1 = Divider;

var StyledMenuItem = styled.li.withConfig({
  displayName: "StyledMenu__StyledMenuItem",
  componentId: "sc-cgag80-0"
})(["&&{display:flex;flex:1;justify-content:space-between;align-items:center;cursor:pointer;margin:0;padding:", ";font-size:", ";font-weight:", ";line-height:", ";}&& > *:not(:first-child):last-child{margin-left:", ";}&&:hover{background:", ";}&&{", ";", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.menu.space.itemPadding;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.menu.fontSizes.item;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.menu.fontWeights.item;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.menu.lineHeights.item;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.menu.space.rightElementMarginLeft;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.menu.colors.itemActiveBackground;
}, function (_ref7) {
  var themeIntent = _ref7.themeIntent,
    theme = _ref7.theme;
  switch (themeIntent) {
    case 'text':
      return css$2(["color:", ";"], theme.__hd__.menu.colors.item);
    case 'danger':
      return css$2(["color:", ";"], theme.__hd__.menu.colors.itemDanger);
  }
}, function (_ref8) {
  var themeState = _ref8.themeState,
    theme = _ref8.theme;
  switch (themeState) {
    case 'default':
      return css$2([""]);
    case 'disabled':
      return css$2(["color:", ";cursor:not-allowed;pointer-events:none;&:hover{background:", ";}"], theme.__hd__.menu.colors.itemDisabled, theme.__hd__.menu.colors.background);
    case 'focused':
      return css$2(["background:", ";"], theme.__hd__.menu.colors.itemActiveBackground);
    case 'active':
      return css$2(["background:", ";font-weight:", ";"], theme.__hd__.menu.colors.itemActiveBackground, theme.__hd__.menu.fontWeights.itemActive);
  }
});
var LeftElement = styled.div.withConfig({
  displayName: "StyledMenu__LeftElement",
  componentId: "sc-cgag80-1"
})(["&&{display:flex;align-items:center;flex:1;margin:0;padding:0;}"]);
var MenuIcon = styled.span.withConfig({
  displayName: "StyledMenu__MenuIcon",
  componentId: "sc-cgag80-2"
})(["&&{display:inline-flex;margin:0;padding:0;margin-right:", ";font-size:", ";line-height:", ";}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.menu.space.iconMarginRight;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.menu.fontSizes.icon;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.menu.lineHeights.icon;
});
var StyledMenu = styled.ul.withConfig({
  displayName: "StyledMenu",
  componentId: "sc-cgag80-3"
})(["&&{list-style:none;margin:0;padding:0;background:", ";}"], function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.menu.colors.background;
});

var Menu$1 = /*#__PURE__*/forwardRef(function (_a, forwardedRef) {
  var children = _a.children,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    dataTestId = _a['data-test-id'],
    otherUlAttrs = __rest(_a, ["children", "id", "className", "style", "sx", 'data-test-id']);
  return /*#__PURE__*/React__default.createElement(StyledMenu, Object.assign({}, otherUlAttrs, {
    ref: forwardedRef,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }), children);
});
Menu$1.displayName = 'Menu';
var Menu$2 = Menu$1;

var getThemeState$1 = function getThemeState(_ref) {
  var disabled = _ref.disabled,
    active = _ref.active,
    focused = _ref.focused;
  if (disabled === true) {
    return 'disabled';
  }
  if (active === true) {
    return 'active';
  }
  if (focused === true) {
    return 'focused';
  }
  return 'default';
};
var MenuItem = /*#__PURE__*/forwardRef(function (_a, forwardedRef) {
  var text = _a.text,
    icon = _a.icon,
    _a$intent = _a.intent,
    intent = _a$intent === void 0 ? 'text' : _a$intent,
    _a$active = _a.active,
    active = _a$active === void 0 ? false : _a$active,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    _a$focused = _a.focused,
    focused = _a$focused === void 0 ? false : _a$focused,
    textElement = _a.textElement,
    onClick = _a.onClick,
    otherLiAttrs = __rest(_a, ["text", "icon", "intent", "active", "disabled", "focused", "textElement", "onClick"]);
  var rightElement = /*#__PURE__*/React__default.isValidElement(textElement) && textElement;
  var themeState = getThemeState$1({
    disabled: disabled,
    active: active,
    focused: focused
  });
  var themeIntent = intent;
  return /*#__PURE__*/React__default.createElement(StyledMenuItem, Object.assign({}, otherLiAttrs, {
    ref: forwardedRef,
    themeState: themeState,
    themeIntent: themeIntent,
    onClick: disabled ? undefined : onClick
  }), /*#__PURE__*/React__default.createElement(LeftElement, null, icon !== undefined && /*#__PURE__*/React__default.createElement(MenuIcon, null, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: icon,
    intent: disabled === true ? 'subdued-text' : intent
  })), text), rightElement);
});
MenuItem.displayName = 'MenuItem';
var MenuItem$1 = MenuItem;

var CompoundMenu = Menu$2;
CompoundMenu.Item = MenuItem$1;
var Menu = CompoundMenu;

var OptionList$2 = function OptionList(_ref) {
  var categories = _ref.categories,
    hasResults = _ref.hasResults,
    newOption = _ref.newOption,
    selectedItem = _ref.selectedItem,
    getItemProps = _ref.getItemProps,
    getMenuProps = _ref.getMenuProps,
    highlightedIndex = _ref.highlightedIndex,
    onScrollListToBottom = _ref.onScrollListToBottom,
    onCreateNewOption = _ref.onCreateNewOption,
    loading = _ref.loading,
    noResults = _ref.noResults,
    optionRenderer = _ref.optionRenderer,
    style = _ref.style;
  var menuRef = useRef(null);
  var activeItemRef = useRef(null);
  var onScrollToBottom = useCallback(function () {
    var isAtBottom = checkAtBottom(menuRef.current);
    if (isAtBottom === true && loading !== true && onScrollListToBottom !== undefined) {
      onScrollListToBottom();
    }
  }, [loading, onScrollListToBottom]);
  useEffect(function () {
    pipe(fromNullable(menuRef.current), map$2(function (el) {
      var offsetTop = getItemOffsetTop(activeItemRef.current);
      if (offsetTop !== undefined) {
        var menuEl = el;
        menuEl.scrollTop = offsetTop;
      }
    }), getOrElse(noop$2));
  }, [selectedItem]);
  return /*#__PURE__*/React__default.createElement(MenuWrapper, Object.assign({}, getMenuProps({
    ref: menuRef
  }), {
    onScroll: onScrollToBottom,
    style: style
  }), /*#__PURE__*/React__default.createElement(Menu, null, categories.map(function (_ref2, catIndex) {
    var category = _ref2.category,
      options = _ref2.options;
    var accumulatedIndex = getAccumulatedIndex(categories, catIndex);
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: category
    }, category !== '' && /*#__PURE__*/React__default.createElement(CategoryWrapper, null, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      tagName: "span",
      fontSize: 12,
      fontWeight: "semi-bold",
      intent: "subdued"
    }, category)), options.map(function (item, index) {
      var actualIndex = accumulatedIndex + index;
      var isActiveItem = item.value === (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.value);
      var ariaProps = item.disabled === true ? {} : Object.assign({}, getItemProps({
        item: item,
        index: actualIndex,
        ref: isActiveItem === true ? activeItemRef : undefined,
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }));
      return /*#__PURE__*/React__default.createElement(Menu.Item, Object.assign({
        key: item.value,
        text: optionRenderer !== undefined ? optionRenderer({
          option: item,
          index: index
        }) : item.text,
        focused: actualIndex === highlightedIndex,
        active: isActiveItem,
        disabled: item.disabled,
        textElement: item.helpText !== undefined ? /*#__PURE__*/React__default.createElement(Typography$1.Text, {
          tagName: "span",
          intent: isActiveItem ? 'main' : 'subdued'
        }, item.helpText) : undefined
      }, ariaProps));
    }), catIndex < categories.length - 1 && /*#__PURE__*/React__default.createElement(Divider$1, null));
  })), hasResults === false && loading !== true && onCreateNewOption !== undefined && /*#__PURE__*/React__default.createElement(Menu.Item, Object.assign({
    icon: "add",
    text: newOption.text,
    focused: highlightedIndex === 0
  }, getItemProps({
    item: newOption,
    index: 0,
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }))), hasResults === false && onCreateNewOption === undefined && noResults);
};
var OptionList$3 = OptionList$2;

var SuffixIcon = function SuffixIcon(_ref) {
  var loading = _ref.loading,
    onChange = _ref.onChange,
    open = _ref.open,
    removeShown = _ref.removeShown;
  return /*#__PURE__*/React__default.createElement(StyledSuffixIconWrapper, null, loading === true && /*#__PURE__*/React__default.createElement(StyledLoadingIconWrapper$1, null, /*#__PURE__*/React__default.createElement(Icon$1, {
    "data-test-id": "loading-icon",
    icon: "loading",
    intent: "subdued-text",
    spin: true
  })), removeShown === true ? /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "remove-icon",
    intent: "subdued-text",
    icon: "circle-cancel",
    onClick: function onClick() {
      onChange === null || onChange === void 0 ? void 0 : onChange(undefined);
    },
    style: {
      fontSize: 'inherit'
    }
  }) : /*#__PURE__*/React__default.createElement(Icon$1, {
    "data-test-id": "arrow-icon",
    icon: open === true ? 'arrow-up' : 'arrow-down',
    intent: "subdued-text"
  }));
};
var SuffixIcon$1 = SuffixIcon;

var getOptionText$1 = function getOptionText(_ref) {
  var option = _ref.option;
  return option.text;
};
var QueryInput$2 = function QueryInput(_ref2) {
  var selectedItem = _ref2.selectedItem,
    getInputProps = _ref2.getInputProps,
    isOpen = _ref2.isOpen,
    _ref2$selectedOptionR = _ref2.selectedOptionRenderer,
    selectedOptionRenderer = _ref2$selectedOptionR === void 0 ? getOptionText$1 : _ref2$selectedOptionR,
    id = _ref2.id,
    autoComplete = _ref2.autoComplete,
    clearable = _ref2.clearable,
    value = _ref2.value,
    onChange = _ref2.onChange,
    query = _ref2.query,
    onQueryChange = _ref2.onQueryChange,
    disabled = _ref2.disabled,
    prefix = _ref2.prefix,
    loading = _ref2.loading,
    invalid = _ref2.invalid,
    placeholder = _ref2.placeholder,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 'medium' : _ref2$size,
    onFocus = _ref2.onFocus,
    onBlur = _ref2.onBlur,
    onKeyDown = _ref2.onKeyDown,
    onKeyUp = _ref2.onKeyUp,
    inputRef = _ref2.inputRef,
    ariaLabelledBy = _ref2['aria-labelledby'];
  var inputWrapperRef = useRef(null);
  var isHoveringInput = useHover(inputWrapperRef);
  var readonly = onQueryChange === undefined;
  var removeShown = clearable === true && value !== undefined && isHoveringInput;
  var selectedItemText = selectedItem !== undefined ? selectedOptionRenderer({
    option: selectedItem
  }) : '';
  var isEditing = query !== undefined && query.length > 0;
  var inputProps = getInputProps({
    onChange: function onChange(e) {
      onQueryChange === null || onQueryChange === void 0 ? void 0 : onQueryChange(e.target.value);
    },
    onBlur: onBlur,
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    ref: inputRef
  });
  return /*#__PURE__*/React__default.createElement(InputWrapper, {
    themeSize: size,
    themeState: getThemeState$2({
      disabled: disabled,
      invalid: invalid
    }),
    ref: inputWrapperRef,
    "data-test-id": "query-input"
  }, /*#__PURE__*/React__default.createElement(Affix$1, {
    affix: prefix,
    themeSize: size
  }), /*#__PURE__*/React__default.createElement(InputContainer, {
    themePaddingLeft: prefix === undefined ? size : 'none'
  }, /*#__PURE__*/React__default.createElement(StyledInput$4, Object.assign({}, inputProps, {
    value: query !== null && query !== void 0 ? query : '',
    disabled: disabled,
    readOnly: readonly,
    autoComplete: autoComplete,
    id: id,
    "aria-labelledby": ariaLabelledBy,
    placeholder: selectedItemText === '' ? placeholder : '',
    themePaddingLeft: "none",
    themePaddingRight: "none"
  })), /*#__PURE__*/React__default.createElement(SelectedItemText, {
    themeState: disabled !== true ? 'enabled' : 'disabled',
    "data-test-id": "selected-item-text"
  }, isEditing ? '' : selectedItemText)), /*#__PURE__*/React__default.createElement(Affix$1, {
    affix: /*#__PURE__*/React__default.createElement(SuffixIcon$1, {
      loading: loading,
      open: isOpen,
      onChange: onChange,
      removeShown: removeShown
    }),
    themeSize: size,
    themeMarginLeft: "auto"
  }));
};
var QueryInput$3 = QueryInput$2;

var Select$1 = function Select(_ref) {
  var options = _ref.options,
    value = _ref.value,
    onBlur = _ref.onBlur,
    onChange = _ref.onChange,
    onFocus = _ref.onFocus,
    query = _ref.query,
    onQueryChange = _ref.onQueryChange,
    _onKeyDown = _ref.onKeyDown,
    onKeyUp = _ref.onKeyUp,
    optionRenderer = _ref.optionRenderer,
    optionPredicate$1 = _ref.optionPredicate,
    selectedOptionRenderer = _ref.selectedOptionRenderer,
    noResults = _ref.noResults,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    invalid = _ref.invalid,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    onScrollListToBottom = _ref.onScrollListToBottom,
    loading = _ref.loading,
    name = _ref.name,
    onCreateNewOption = _ref.onCreateNewOption,
    id = _ref.id,
    ariaLabelledBy = _ref['aria-labelledby'],
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    autoComplete = _ref.autoComplete,
    optionMenuStyle = _ref.optionMenuStyle,
    _ref$clearable = _ref.clearable,
    clearable = _ref$clearable === void 0 ? false : _ref$clearable,
    dataTestId = _ref['data-test-id'],
    inputRef = _ref.inputRef;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    wrapperElement = _useState2[0],
    setWrapperElement = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    optionMenuWidth = _useState4[0],
    setOptionMenuWidth = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    autoFilled = _useState6[0],
    setAutoFilled = _useState6[1];
  var _useState7 = useState(-1),
    _useState8 = _slicedToArray(_useState7, 2),
    highlightedIndex = _useState8[0],
    setHighlightedIndex = _useState8[1];
  var mappedOptions = useMemo(function () {
    return filterGroupedOptions(optionPredicate$1 ? optionPredicate$1(query) : optionPredicate(query), mapOptions(options));
  }, [options, query, optionPredicate$1]);
  var flatMappedOptions = useMemo(function () {
    return pipe(mappedOptions, map(function (opt) {
      return opt.options;
    }), flat);
  }, [mappedOptions]);
  var hasResults = mappedOptions.length > 0;
  var selectedItem = useMemo(function () {
    return flatMappedOptions.find(function (item) {
      return item.value === value;
    });
  }, [flatMappedOptions, value]);
  var resizeCallback = useCallback(function (_ref2) {
    var width = _ref2.width;
    setOptionMenuWidth(width);
  }, [setOptionMenuWidth]);
  useResizeObserver(resizeCallback, wrapperElement);
  var css = useCss(sx);
  var newOption = {
    value: '',
    text: query !== null && query !== void 0 ? query : ''
  };
  var _useCombobox = useCombobox({
      items: hasResults === true ? flatMappedOptions : [newOption],
      itemToString: function itemToString(item) {
        return item !== null ? item.text : '';
      },
      selectedItem: selectedItem !== null && selectedItem !== void 0 ? selectedItem : null,
      stateReducer: function stateReducer(state, actionAndChanges) {
        var changes = actionAndChanges.changes,
          type = actionAndChanges.type;
        if (type === useCombobox.stateChangeTypes.InputClick) {
          return Object.assign(Object.assign({}, changes), {
            isOpen: state.isOpen
          });
        }
        return Object.assign({}, changes);
      },
      onSelectedItemChange: function onSelectedItemChange(_ref3) {
        var newItem = _ref3.selectedItem;
        if (newItem != null) {
          if (hasResults === false) {
            onCreateNewOption === null || onCreateNewOption === void 0 ? void 0 : onCreateNewOption(newItem.text);
          } else {
            onChange(newItem.value);
          }
        }
        if (query !== undefined) {
          onQueryChange === null || onQueryChange === void 0 ? void 0 : onQueryChange(undefined);
        }
      },
      onStateChange: function onStateChange(state) {
        if (state.type === useCombobox.stateChangeTypes.InputBlur) {
          if (query !== undefined) {
            onQueryChange === null || onQueryChange === void 0 ? void 0 : onQueryChange(undefined);
          }
        }
      },
      highlightedIndex: highlightedIndex,
      onHighlightedIndexChange: function onHighlightedIndexChange(_ref4) {
        var newHighlightedIndex = _ref4.highlightedIndex,
          type = _ref4.type;
        if (newHighlightedIndex === undefined || newHighlightedIndex === -1) {
          setHighlightedIndex(-1);
          return;
        }
        if (!hasResults || !flatMappedOptions[newHighlightedIndex].disabled) {
          setHighlightedIndex(newHighlightedIndex);
          return;
        }
        if (type === useCombobox.stateChangeTypes.InputKeyDownArrowDown) {
          // find next non-disabled item
          var nextIdx = findNonDisabledItemIdx(flatMappedOptions, newHighlightedIndex, 'next');
          setHighlightedIndex(nextIdx === newHighlightedIndex ? -1 : nextIdx);
        }
        if (type === useCombobox.stateChangeTypes.InputKeyDownArrowUp) {
          // find previous non-disabled item
          var prevIdx = findNonDisabledItemIdx(flatMappedOptions, newHighlightedIndex, 'prev');
          setHighlightedIndex(prevIdx === newHighlightedIndex ? -1 : prevIdx);
        }
      }
    }),
    getInputProps = _useCombobox.getInputProps,
    getMenuProps = _useCombobox.getMenuProps,
    getItemProps = _useCombobox.getItemProps,
    isOpen = _useCombobox.isOpen,
    getToggleButtonProps = _useCombobox.getToggleButtonProps;
  useEffect(function () {
    if (autoFilled && query !== undefined && query.length > 0) {
      var autoFilledItem = flatMappedOptions.find(function (item) {
        return item.text === query;
      });
      if (autoFilledItem !== undefined) {
        onChange(autoFilledItem.value);
      }
      setAutoFilled(false);
    }
  }, [autoFilled, query, flatMappedOptions, onChange]);
  var selectInput = /*#__PURE__*/React__default.createElement(QueryInput$3, {
    selectedItem: selectedItem,
    getInputProps: getInputProps,
    isOpen: isOpen,
    selectedOptionRenderer: selectedOptionRenderer,
    id: id,
    "aria-labelledby": ariaLabelledBy,
    autoComplete: autoComplete,
    clearable: clearable,
    value: value,
    onChange: onChange,
    query: query,
    onQueryChange: onQueryChange,
    disabled: disabled,
    prefix: prefix,
    loading: loading,
    invalid: invalid,
    placeholder: placeholder,
    size: size,
    onFocus: onFocus,
    onBlur: onBlur,
    onKeyUp: onKeyUp,
    onKeyDown: function onKeyDown(e) {
      if (e.key === 'Unidentified') setAutoFilled(true);
      _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e);
    },
    inputRef: inputRef
  });
  var optionMenu = /*#__PURE__*/React__default.createElement(OptionList$3, {
    categories: mappedOptions,
    hasResults: hasResults,
    newOption: newOption,
    selectedItem: selectedItem,
    getItemProps: getItemProps,
    getMenuProps: getMenuProps,
    highlightedIndex: highlightedIndex,
    onScrollListToBottom: onScrollListToBottom,
    onCreateNewOption: onCreateNewOption,
    loading: loading,
    noResults: noResults,
    optionRenderer: optionRenderer,
    style: Object.assign({
      width: optionMenuWidth
    }, optionMenuStyle)
  });
  return /*#__PURE__*/React__default.createElement(SelectWrapper, Object.assign({}, getToggleButtonProps({
    disabled: disabled
  }), {
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId,
    ref: setWrapperElement
  }), name !== undefined && /*#__PURE__*/React__default.createElement(HiddenInput$3, {
    options: options,
    value: value,
    onChange: onChange,
    onQueryChange: onQueryChange,
    name: name
  }), /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: selectInput,
    content: optionMenu,
    open: isOpen,
    onClose: noop$2,
    keepContentMounted: true
  }));
};
var Select$2 = Select$1;

var OptionList = function OptionList(_ref) {
  var categories = _ref.categories,
    hasResults = _ref.hasResults,
    newOption = _ref.newOption,
    value = _ref.value,
    query = _ref.query,
    getItemProps = _ref.getItemProps,
    getMenuProps = _ref.getMenuProps,
    highlightedIndex = _ref.highlightedIndex,
    onScrollListToBottom = _ref.onScrollListToBottom,
    onCreateNewOption = _ref.onCreateNewOption,
    loading = _ref.loading,
    noResults = _ref.noResults,
    optionRenderer = _ref.optionRenderer,
    style = _ref.style;
  var menuRef = useRef(null);
  var onScrollToBottom = useCallback(function () {
    var isAtBottom = checkAtBottom(menuRef.current);
    if (isAtBottom === true && loading !== true && onScrollListToBottom !== undefined) {
      onScrollListToBottom();
    }
  }, [loading, onScrollListToBottom]);
  return /*#__PURE__*/React__default.createElement(MenuWrapper, Object.assign({}, getMenuProps({
    ref: menuRef
  }), {
    onScroll: onScrollToBottom,
    style: style
  }), /*#__PURE__*/React__default.createElement(Menu, null, categories.map(function (opt, catIndex) {
    var accumulatedIndex = getAccumulatedIndex(categories, catIndex);
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: opt.category
    }, opt.category !== '' && /*#__PURE__*/React__default.createElement(CategoryWrapper, null, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      tagName: "span",
      fontSize: 12,
      fontWeight: "semi-bold",
      intent: "subdued"
    }, opt.category)), opt.options.map(function (item, index) {
      var _a;
      var actualIndex = accumulatedIndex + index;
      var isActiveItem = (_a = value === null || value === void 0 ? void 0 : value.includes(item.value)) !== null && _a !== void 0 ? _a : false;
      var helpTextElement = /*#__PURE__*/React__default.createElement(HelpTextWrapper, null, item.helpText !== undefined && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
        tagName: "span",
        intent: isActiveItem ? 'main' : 'subdued'
      }, item.helpText), /*#__PURE__*/React__default.createElement(CheckmarkWrapper, {
        shown: isActiveItem
      }, /*#__PURE__*/React__default.createElement(Icon$1, {
        intent: item.disabled === true ? 'subdued-text' : 'primary',
        icon: "checkmark"
      })));
      return /*#__PURE__*/React__default.createElement(Menu.Item, Object.assign({
        key: item.value,
        text: optionRenderer !== undefined ? optionRenderer({
          option: item,
          index: index
        }) : item.text,
        focused: actualIndex === highlightedIndex,
        active: isActiveItem,
        textElement: helpTextElement
      }, getItemProps({
        item: item,
        index: actualIndex
      }), {
        disabled: item.disabled
      }));
    }), catIndex < categories.length - 1 && /*#__PURE__*/React__default.createElement(Divider$1, null));
  }), hasResults === false && loading !== true && onCreateNewOption !== undefined && query !== undefined && /*#__PURE__*/React__default.createElement(Menu.Item, Object.assign({
    icon: "add",
    text: query,
    focused: highlightedIndex === 0
  }, getItemProps({
    item: newOption,
    index: 0
  })))), hasResults === false && onCreateNewOption === undefined && noResults);
};
var OptionList$1 = OptionList;

var TagInputWrapper = styled(InputWrapper).withConfig({
  displayName: "StyledTagInput__TagInputWrapper",
  componentId: "sc-mwjsv-0"
})(["&&{", ";}"], function (_ref) {
  var themeSize = _ref.themeSize,
    theme = _ref.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding-top:", ";padding-bottom:", ";", "{height:", ";}"], theme.__hd__.input.space.smallPadding, theme.__hd__.input.space.smallPadding, StyledInput$4, "calc(".concat(theme.__hd__.input.sizes.small, " - ").concat(theme.__hd__.input.space.smallPadding, ")"));
    case 'medium':
      return css$2(["padding-top:", ";padding-bottom:", ";", "{height:", ";}"], theme.__hd__.input.space.mediumPadding, theme.__hd__.input.space.mediumPadding, StyledInput$4, "calc(".concat(theme.__hd__.input.sizes.medium, " - ").concat(theme.__hd__.input.space.mediumPadding, ")"));
    case 'large':
      return css$2(["padding-top:", ";padding-bottom:", ";", "{height:", ";}"], theme.__hd__.input.space.largePadding, theme.__hd__.input.space.largePadding, StyledInput$4, "calc(".concat(theme.__hd__.input.sizes.large, " - ").concat(theme.__hd__.input.space.largePadding, ")"));
  }
});
var TagInputContainer = styled.div.withConfig({
  displayName: "StyledTagInput__TagInputContainer",
  componentId: "sc-mwjsv-1"
})(["&&{display:inline-flex;flex-wrap:wrap;align-items:center;", ";width:calc(100% + ", ");margin:-", " 0 0 -", ";}&& > *{margin:", " 0 0 ", ";}&& > ", "{border:none;background-color:", ";}&& > ", "{min-width:", ";flex:1;}"], function (_ref2) {
  var themePaddingX = _ref2.themePaddingX,
    theme = _ref2.theme;
  switch (themePaddingX) {
    case 'small':
      return css$2(["padding:0 ", ";"], theme.__hd__.input.space.smallPadding);
    case 'medium':
      return css$2(["padding:0 ", ";"], theme.__hd__.input.space.mediumPadding);
    case 'large':
      return css$2(["padding:0 ", ";"], theme.__hd__.input.space.largePadding);
    case 'none':
      return css$2(["padding:0;"]);
  }
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.input.space.tagMargin;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.input.space.tagMargin;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.input.space.tagMargin;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.input.space.tagMargin;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.input.space.tagMargin;
}, StyledTag, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.input.colors.tagBackground;
}, StyledInput$4, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.input.sizes.tagInputMinWidth;
});

var FILLED_VARIANTS = {
  primary: 'filled-primary',
  success: 'filled-success',
  danger: 'filled-danger',
  warning: 'filled-warning',
  error: 'filled-error',
  archived: 'filled-archived'
};
var OUTLINED_VARIANTS = {
  primary: 'outlined-primary',
  success: 'outlined-success',
  danger: 'outlined-danger',
  warning: 'outlined-warning',
  error: 'outlined-error',
  archived: 'outlined-archived'
};
var getThemeVariant = function getThemeVariant(variant, intent) {
  switch (variant) {
    case 'basic':
      return variant;
    case 'filled':
      return FILLED_VARIANTS[intent];
    case 'outlined':
      return OUTLINED_VARIANTS[intent];
  }
};
var Tag = function Tag(_a) {
  var value = _a.value,
    text = _a.text,
    _a$variant = _a.variant,
    variant = _a$variant === void 0 ? 'basic' : _a$variant,
    _a$intent = _a.intent,
    intent = _a$intent === void 0 ? 'primary' : _a$intent,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    onRemove = _a.onRemove,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    dataTestId = _a['data-test-id'],
    ariaProps = __rest(_a, ["value", "text", "variant", "intent", "size", "onRemove", "id", "className", "style", "sx", 'data-test-id']);
  var themeVariant = getThemeVariant(variant, intent);
  return /*#__PURE__*/React__default.createElement(StyledTag, Object.assign({
    themeVariant: themeVariant,
    themeSize: size,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, ariaProps), text, onRemove !== undefined && /*#__PURE__*/React__default.createElement(CloseButton$2, {
    type: "button",
    themeVariant: themeVariant,
    onClick: function onClick(e) {
      e.preventDefault();
      onRemove({
        text: text,
        value: value
      });
    }
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "cancel"
  })));
};
var Tag$1 = Tag;

var TagInput = /*#__PURE__*/forwardRef(function (_a, forwardedRef) {
  var tags = _a.tags,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'medium' : _a$size,
    _a$invalid = _a.invalid,
    invalid = _a$invalid === void 0 ? false : _a$invalid,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    _a$readonly = _a.readonly,
    readonly = _a$readonly === void 0 ? false : _a$readonly,
    placeholder = _a.placeholder,
    onRemove = _a.onRemove,
    prefix = _a.prefix,
    suffix = _a.suffix,
    name = _a.name,
    id = _a.id,
    className = _a.className,
    style = _a.style,
    _a$sx = _a.sx,
    sx = _a$sx === void 0 ? {} : _a$sx,
    dataTestId = _a['data-test-id'],
    inputAttrs = __rest(_a, ["tags", "size", "invalid", "disabled", "readonly", "placeholder", "onRemove", "prefix", "suffix", "name", "id", "className", "style", "sx", 'data-test-id']);
  var theme = useTheme();
  var themeHeightStrs = theme.__hd__.input.sizes[size].match(/\d+/g);
  var themeHeight = parseInt(themeHeightStrs !== null && isNonEmptyArray(themeHeightStrs) ? themeHeightStrs[0] : '0', 10);
  var _useState = useState(themeHeight),
    _useState2 = _slicedToArray(_useState, 2),
    wrapperHeight = _useState2[0],
    setWrapperHeight = _useState2[1];
  var containerRef = useRef(null);
  var expandInput = useCallback(function (_ref) {
    var height = _ref.height;
    if (height > themeHeight) setWrapperHeight('auto');else setWrapperHeight(themeHeight);
  }, [themeHeight, setWrapperHeight]);
  useResizeObserver(expandInput, containerRef.current);
  useEffect(function () {
    if (containerRef.current !== null && containerRef.current.clientHeight > themeHeight) {
      setWrapperHeight('auto');
    }
  }, [containerRef, themeHeight]);
  return /*#__PURE__*/React__default.createElement(TagInputWrapper, {
    themeSize: size,
    themeState: getThemeState$2({
      disabled: disabled,
      invalid: invalid
    }),
    className: className,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({
      height: wrapperHeight
    }, style), useCss(sx))
  }, /*#__PURE__*/React__default.createElement(Affix$1, {
    affix: prefix,
    themeSize: size
  }), /*#__PURE__*/React__default.createElement(TagInputContainer, {
    themePaddingX: prefix === undefined ? size : 'none',
    ref: containerRef
  }, tags.map(function (tag) {
    return /*#__PURE__*/React__default.createElement(Tag$1, {
      key: tag.value,
      value: tag.value,
      text: tag.text,
      onRemove: disabled === false && tag.removable === true ? onRemove : undefined,
      size: size
    });
  }), /*#__PURE__*/React__default.createElement(StyledInput$4, Object.assign({
    disabled: disabled,
    placeholder: tags.length > 0 ? undefined : placeholder,
    readOnly: readonly,
    id: id,
    name: name,
    ref: forwardedRef,
    themePaddingLeft: "none",
    themePaddingRight: "none"
  }, inputAttrs))), /*#__PURE__*/React__default.createElement(Affix$1, {
    affix: suffix,
    themeSize: size,
    themeMarginLeft: "auto"
  }));
});
TagInput.displayName = 'TagInput';
var TagInput$1 = TagInput;

var getOptionText = function getOptionText(_ref) {
  var option = _ref.option;
  return option.text;
};
var QueryInput = function QueryInput(_ref2) {
  var selectedItems = _ref2.selectedItems,
    getInputProps = _ref2.getInputProps,
    getDropdownProps = _ref2.getDropdownProps,
    isOpen = _ref2.isOpen,
    selectedOptionRenderer = _ref2.selectedOptionRenderer,
    id = _ref2.id,
    autoComplete = _ref2.autoComplete,
    name = _ref2.name,
    onChange = _ref2.onChange,
    query = _ref2.query,
    onQueryChange = _ref2.onQueryChange,
    disabled = _ref2.disabled,
    prefix = _ref2.prefix,
    loading = _ref2.loading,
    invalid = _ref2.invalid,
    placeholder = _ref2.placeholder,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 'medium' : _ref2$size,
    onFocus = _ref2.onFocus,
    onBlur = _ref2.onBlur,
    onKeyDown = _ref2.onKeyDown,
    onKeyUp = _ref2.onKeyUp,
    _ref2$variant = _ref2.variant,
    variant = _ref2$variant === void 0 ? 'basic' : _ref2$variant,
    ariaLabelledBy = _ref2['aria-labelledby'];
  var onItemRemove = useCallback(function (_ref3) {
    var removedItemValue = _ref3.value;
    onChange(variant === 'compact' ? [] : selectedItems.filter(function (item) {
      return item.value !== removedItemValue;
    }).map(function (item) {
      return item.value;
    }));
  }, [variant, onChange, selectedItems]);
  var readonly = onQueryChange === undefined;
  var tagInputValue = query !== undefined ? query : '';
  var tagInputOnChange = useCallback(function (e) {
    return onQueryChange !== undefined && onQueryChange(e.target.value);
  }, [onQueryChange]);
  var tags = useMemo(function () {
    var selectedOptRenderer = selectedOptionRenderer || getOptionText;
    if (variant === 'compact') {
      var numberOfSelectedItems = selectedItems.length;
      if (numberOfSelectedItems === 0) {
        return [];
      }
      var tagText = selectedOptionRenderer !== undefined ? "".concat(selectedOptionRenderer(), " (").concat(numberOfSelectedItems, ")") : selectedItems.map(function (item) {
        return getOptionText({
          option: item
        });
      }).join(', ');
      return [{
        value: tagText,
        text: tagText,
        removable: selectedItems.every(function (item) {
          return item.removable === undefined ? true : item.removable;
        })
      }];
    }
    return selectedItems.map(function (item) {
      return {
        value: item.value,
        text: selectedOptRenderer({
          option: item
        }),
        removable: item.removable === undefined ? true : item.removable
      };
    });
  }, [selectedItems, selectedOptionRenderer, variant]);
  return /*#__PURE__*/React__default.createElement(TagInput$1, Object.assign({
    prefix: prefix,
    suffix: /*#__PURE__*/React__default.createElement(SuffixIcon$1, {
      loading: loading,
      open: isOpen
    }),
    size: size,
    placeholder: placeholder,
    onRemove: onItemRemove,
    tags: tags
  }, getInputProps(Object.assign(Object.assign({}, getDropdownProps({
    value: undefined,
    disabled: disabled
  })), {
    onFocus: onFocus,
    onBlur: onBlur,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    autoComplete: autoComplete
  })), {
    invalid: invalid,
    name: name,
    readonly: readonly,
    value: tagInputValue,
    onChange: tagInputOnChange,
    id: id,
    "aria-labelledby": ariaLabelledBy,
    "data-test-id": "selected-items"
  }));
};
var QueryInput$1 = QueryInput;

var MultiSelect = function MultiSelect(_ref) {
  var options = _ref.options,
    value = _ref.value,
    onBlur = _ref.onBlur,
    onChange = _ref.onChange,
    onFocus = _ref.onFocus,
    optionRenderer = _ref.optionRenderer,
    optionPredicate$1 = _ref.optionPredicate,
    selectedOptionRenderer = _ref.selectedOptionRenderer,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    invalid = _ref.invalid,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    onScrollListToBottom = _ref.onScrollListToBottom,
    onKeyDown = _ref.onKeyDown,
    onKeyUp = _ref.onKeyUp,
    loading = _ref.loading,
    query = _ref.query,
    onQueryChange = _ref.onQueryChange,
    noResults = _ref.noResults,
    name = _ref.name,
    onCreateNewOption = _ref.onCreateNewOption,
    id = _ref.id,
    ariaLabelledBy = _ref['aria-labelledby'],
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    autoComplete = _ref.autoComplete,
    optionMenuStyle = _ref.optionMenuStyle,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'basic' : _ref$variant,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    wrapperElement = _useState2[0],
    setWrapperElement = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    optionMenuWidth = _useState4[0],
    setOptionMenuWidth = _useState4[1];
  var mappedOptions = useMemo(function () {
    return filterGroupedOptions(optionPredicate$1 ? optionPredicate$1(query) : optionPredicate(query), mapOptions(options));
  }, [options, query, optionPredicate$1]);
  var flatMappedOptions = useMemo(function () {
    return pipe(mappedOptions, map(function (opt) {
      return opt.options;
    }), flat);
  }, [mappedOptions]);
  var flatOptions = useMemo(function () {
    return pipe(options, function (opts) {
      return mapOptions(opts);
    }, map(function (opt) {
      return opt.options;
    }), flat);
  }, [options]);
  var hasResults = flatMappedOptions.length > 0;
  var selectedItemsFromValue = value !== undefined ? value.flatMap(function (optionVal) {
    var foundItem = flatOptions.find(function (opt) {
      return opt.value === optionVal;
    });
    return foundItem !== undefined ? [foundItem] : [];
  }) : [];
  var _useMultipleSelection = useMultipleSelection({
      selectedItems: selectedItemsFromValue
    }),
    getDropdownProps = _useMultipleSelection.getDropdownProps,
    selectedItems = _useMultipleSelection.selectedItems;
  var resizeCallback = useCallback(function (_ref2) {
    var width = _ref2.width;
    setOptionMenuWidth(width);
  }, [setOptionMenuWidth]);
  useResizeObserver(resizeCallback, wrapperElement);
  var newOption = {
    value: '',
    text: query !== null && query !== void 0 ? query : ''
  };
  var _useCombobox = useCombobox({
      items: hasResults === true ? flatMappedOptions : [newOption],
      isItemDisabled: function isItemDisabled(item) {
        return item.disabled === true;
      },
      itemToString: function itemToString(item) {
        return item ? item.text : '';
      },
      stateReducer: function stateReducer(_state, actionAndChanges) {
        var changes = actionAndChanges.changes,
          type = actionAndChanges.type;
        var selectedItem = changes.selectedItem;
        var isNotRemovable = function isNotRemovable(item) {
          return item.value === (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.value) && item.removable === false;
        };
        var updateItems = function updateItems() {
          if (selectedItem !== undefined && selectedItem !== null) {
            if (value === null || value === void 0 ? void 0 : value.includes(selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.value)) {
              var notRemovableSelectedItem = selectedItems.find(isNotRemovable);
              if (notRemovableSelectedItem) return;
              // Remove item
              onChange(selectedItems.filter(function (item) {
                return item.value !== selectedItem.value;
              }).map(function (item) {
                return item.value;
              }));
            } else if (!hasResults) {
              onCreateNewOption === null || onCreateNewOption === void 0 ? void 0 : onCreateNewOption(selectedItem.text);
            } else {
              // Add item
              onChange([].concat(_toConsumableArray(selectedItems.map(function (item) {
                return item.value;
              })), [selectedItem.value]));
            }
          }
        };
        var callOnChange = function callOnChange() {
          if (selectedItem) {
            updateItems();
          }
          if (query) {
            onQueryChange === null || onQueryChange === void 0 ? void 0 : onQueryChange(undefined);
          }
        };
        switch (type) {
          case useCombobox.stateChangeTypes.InputKeyDownEnter:
            callOnChange();
            return Object.assign(Object.assign({}, changes), {
              isOpen: true
            });
          case useCombobox.stateChangeTypes.InputClick:
            return Object.assign(Object.assign({}, changes), {
              isOpen: _state.isOpen
            });
          case useCombobox.stateChangeTypes.ItemClick:
            callOnChange();
            return changes;
          default:
            return changes;
        }
      }
    }),
    isOpen = _useCombobox.isOpen,
    getToggleButtonProps = _useCombobox.getToggleButtonProps,
    getMenuProps = _useCombobox.getMenuProps,
    getInputProps = _useCombobox.getInputProps,
    getItemProps = _useCombobox.getItemProps,
    highlightedIndex = _useCombobox.highlightedIndex,
    toggleMenu = _useCombobox.toggleMenu;
  useEffect(function () {
    if (isOpen === false && query !== undefined) toggleMenu();
  }, [query]);
  var selectInput = /*#__PURE__*/React__default.createElement(QueryInput$1, {
    selectedItems: selectedItems,
    getInputProps: getInputProps,
    getDropdownProps: getDropdownProps,
    isOpen: isOpen,
    selectedOptionRenderer: selectedOptionRenderer,
    name: name,
    id: id,
    "aria-labelledby": ariaLabelledBy,
    autoComplete: autoComplete,
    onChange: onChange,
    query: query,
    onQueryChange: onQueryChange,
    disabled: disabled,
    prefix: prefix,
    loading: loading,
    invalid: invalid,
    placeholder: placeholder,
    size: size,
    onFocus: onFocus,
    onBlur: onBlur,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    variant: variant
  });
  var css = useCss(sx);
  var optionMenu = /*#__PURE__*/React__default.createElement(OptionList$1, {
    categories: mappedOptions,
    hasResults: hasResults,
    newOption: newOption,
    value: value,
    query: query,
    getItemProps: getItemProps,
    getMenuProps: getMenuProps,
    highlightedIndex: highlightedIndex,
    onScrollListToBottom: onScrollListToBottom,
    onCreateNewOption: onCreateNewOption,
    loading: loading,
    noResults: noResults,
    optionRenderer: optionRenderer,
    style: Object.assign({
      width: optionMenuWidth
    }, optionMenuStyle)
  });
  return /*#__PURE__*/React__default.createElement(SelectWrapper, Object.assign({}, getToggleButtonProps({
    disabled: disabled
  }), {
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId,
    ref: setWrapperElement
  }), /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: selectInput,
    content: optionMenu,
    open: isOpen,
    onClose: noop$2,
    keepContentMounted: true
  }));
};
var MultiSelect$1 = MultiSelect;

var CompoundSelect = Select$2;
CompoundSelect.Multi = MultiSelect$1;
var Select = CompoundSelect;

var Container = styled.div.withConfig({
  displayName: "StyledCalendar__Container",
  componentId: "sc-vr1270-0"
})(["&&{width:fit-content;color:", ";margin:0;padding:0;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.datePicker.colors.text;
});
styled.div.withConfig({
  displayName: "StyledCalendar__NavigationWrapper",
  componentId: "sc-vr1270-1"
})(["&&{display:flex;justify-content:space-around;margin:0;padding:0;}"]);
var MobileRightArrowsDateRangeWrapper = styled.div.withConfig({
  displayName: "StyledCalendar__MobileRightArrowsDateRangeWrapper",
  componentId: "sc-vr1270-2"
})(["&&{margin:0;padding:0;}"]);
var DesktopRightArrowsDateRangeWrapper = styled.div.withConfig({
  displayName: "StyledCalendar__DesktopRightArrowsDateRangeWrapper",
  componentId: "sc-vr1270-3"
})(["&&{margin:0;padding:0;}"]);
var Navigation = styled.div.withConfig({
  displayName: "StyledCalendar__Navigation",
  componentId: "sc-vr1270-4"
})(["&&{display:flex;justify-content:center;align-items:center;margin:0;padding:", ";}&& > ", "{width:", ";padding:", ";}@media (min-width:", "){&& > ", "{display:none}}@media (max-width:", "){&& > ", "{display:none}}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.datePicker.space.navigationPadding;
}, SelectWrapper, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.datePicker.sizes.monthYear;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.datePicker.space.monthYearPadding;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.breakpoints.medium;
}, MobileRightArrowsDateRangeWrapper, function (_ref6) {
  var theme = _ref6.theme;
  return theme.breakpoints.medium;
}, DesktopRightArrowsDateRangeWrapper);
var DoubleCalendarContainer = styled.div.withConfig({
  displayName: "StyledCalendar__DoubleCalendarContainer",
  componentId: "sc-vr1270-5"
})(["&&{display:flex;flex-direction:column;margin:0;padding:0;}@media (min-width:", "){&&{flex-direction:row}}&& > ", "{display:block;}@media (min-width:", "){&& > ", "{display:none}}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.breakpoints.medium;
}, Divider$2, function (_ref8) {
  var theme = _ref8.theme;
  return theme.breakpoints.medium;
}, Divider$2);
var CalendarContainer = styled.div.withConfig({
  displayName: "StyledCalendar__CalendarContainer",
  componentId: "sc-vr1270-6"
})(["&&{display:flex;flex-direction:column;margin:0;padding:0;}"]);
var CalendarWrapper = styled.div.withConfig({
  displayName: "StyledCalendar__CalendarWrapper",
  componentId: "sc-vr1270-7"
})(["&&{margin:0;padding:", ";}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.datePicker.space.calendarPadding;
});
var CalendarRow = styled.div.withConfig({
  displayName: "StyledCalendar__CalendarRow",
  componentId: "sc-vr1270-8"
})(["&&{display:flex;justify-content:space-between;font-size:", ";font-weight:", ";line-height:", ";margin:0;padding:0;}"], function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.datePicker.fontSizes.day;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.datePicker.fontWeights.day;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.datePicker.lineHeights.day;
});
var DayWrapper = styled.div.withConfig({
  displayName: "StyledCalendar__DayWrapper",
  componentId: "sc-vr1270-9"
})(["&&{margin:", ";padding:", ";", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.datePicker.space.dayMargin;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.datePicker.space.dayPadding;
}, function (_ref15) {
  var themeState = _ref15.themeState,
    theme = _ref15.theme;
  switch (themeState) {
    case 'selectedRangeDate':
      return css$2(["background-color:", ";border-radius:", ";"], theme.__hd__.datePicker.colors.selectedBackground, theme.__hd__.datePicker.radii.day);
    case 'selectedWeekDate':
      return css$2(["background-color:", ";&:hover{cursor:pointer;}"], theme.__hd__.datePicker.colors.selectedBackground);
    case 'selectedFirstDateOfWeek':
      return css$2(["background-color:", ";border-top-left-radius:", ";border-bottom-left-radius:", ";&:hover{cursor:pointer;}"], theme.__hd__.datePicker.colors.selectedBackground, theme.__hd__.datePicker.radii.day, theme.__hd__.datePicker.radii.day);
    case 'selectedLastDateOfWeek':
      return css$2(["background-color:", ";border-top-right-radius:", ";border-bottom-right-radius:", ";&:hover{cursor:pointer;}"], theme.__hd__.datePicker.colors.selectedBackground, theme.__hd__.datePicker.radii.day, theme.__hd__.datePicker.radii.day);
    case 'selectedStartDate':
      return css$2(["background-color:", ";border-top-left-radius:", ";border-bottom-left-radius:", ";"], theme.__hd__.datePicker.colors.selectedBackground, theme.__hd__.datePicker.radii.day, theme.__hd__.datePicker.radii.day);
    case 'selectedEndDate':
      return css$2(["background-color:", ";border-top-right-radius:", ";border-bottom-right-radius:", ";"], theme.__hd__.datePicker.colors.selectedBackground, theme.__hd__.datePicker.radii.day, theme.__hd__.datePicker.radii.day);
    case 'inHoveringFirstDateOfWeek':
      return css$2(["background-color:", ";border-top-left-radius:", ";border-bottom-left-radius:", ";&:hover{cursor:pointer;}"], theme.__hd__.datePicker.colors.inRangeBackground, theme.__hd__.datePicker.radii.day, theme.__hd__.datePicker.radii.day);
    case 'inHoveringLastDateOfWeek':
      return css$2(["background-color:", ";border-top-right-radius:", ";border-bottom-right-radius:", ";&:hover{cursor:pointer;}"], theme.__hd__.datePicker.colors.inRangeBackground, theme.__hd__.datePicker.radii.day, theme.__hd__.datePicker.radii.day);
    case 'inRange':
    case 'inHoveringRange':
      return css$2(["background-color:", ";"], theme.__hd__.datePicker.colors.inRangeBackground);
    case 'inHoveringWeekDate':
      return css$2(["background-color:", ";&:hover{cursor:pointer;}"], theme.__hd__.datePicker.colors.inRangeBackground);
    default:
      return css$2([""]);
  }
});
var Day = styled.span.withConfig({
  displayName: "StyledCalendar__Day",
  componentId: "sc-vr1270-10"
})(["&&{display:inline-flex;align-items:center;justify-content:space-evenly;margin:0;padding:0;width:", ";height:", ";border-radius:", ";box-sizing:border-box;overflow:visible;white-space:nowrap;cursor:pointer;", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.datePicker.sizes.day;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.datePicker.sizes.day;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.datePicker.radii.day;
}, function (_ref19) {
  var themeState = _ref19.themeState,
    theme = _ref19.theme;
  switch (themeState) {
    case 'enabled':
      return css$2(["&:hover{background-color:", ";}"], theme.__hd__.datePicker.colors.hoverBackground);
    case 'disabled':
      return css$2(["color:", ";pointer-events:none;cursor:not-allowed;"], theme.__hd__.datePicker.colors.disabledText);
    case 'selected':
    case 'selectedRangeDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'selectedStartDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";border-top-right-radius:0;border-bottom-right-radius:0;"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'selectedEndDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";border-top-left-radius:0;border-bottom-left-radius:0;"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'today':
      return css$2(["color:", ";border-width:", ";border-color:", ";border-style:solid;&:hover{background-color:", ";}"], theme.__hd__.datePicker.colors.todayText, theme.__hd__.datePicker.borderWidths.day, theme.__hd__.datePicker.colors.todayBorder, theme.__hd__.datePicker.colors.hoverBackground);
    case 'dayLabel':
      return css$2(["cursor:default;"]);
    case 'inRange':
      return css$2(["background-color:", ";border-radius:0;&:hover{background-color:", ";color:", ";}"], theme.__hd__.datePicker.colors.inRangeBackground, theme.__hd__.datePicker.colors.inRangeHoverBackground, theme.__hd__.datePicker.colors.inRangeHoverText);
    case 'selectedFirstDateOfWeek':
    case 'selectedLastDateOfWeek':
    case 'selectedWeekDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";border-radius:0;"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'inHoveringFirstDateOfWeek':
    case 'inHoveringLastDateOfWeek':
    case 'inHoveringWeekDate':
    case 'inHoveringRange':
      return css$2(["background-color:", ";border-radius:0;"], theme.__hd__.datePicker.colors.inRangeBackground);
  }
});
var WeekWrapper = styled.div.withConfig({
  displayName: "StyledCalendar__WeekWrapper",
  componentId: "sc-vr1270-11"
})(["&&{margin:", ";padding:", ";}"], function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.datePicker.space.dayMargin;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.datePicker.space.dayPadding;
});
var Week = styled.span.withConfig({
  displayName: "StyledCalendar__Week",
  componentId: "sc-vr1270-12"
})(["&&{display:inline-flex;align-items:center;justify-content:space-evenly;margin:0;padding:0;width:", ";height:", ";border-radius:", ";box-sizing:border-box;cursor:pointer;", ";}"], function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.datePicker.sizes.day;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.datePicker.sizes.day;
}, function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.datePicker.radii.day;
}, function (_ref25) {
  var themeState = _ref25.themeState,
    theme = _ref25.theme;
  switch (themeState) {
    case 'enabled':
      return css$2(["&:hover{background-color:", ";}"], theme.__hd__.datePicker.colors.hoverBackground);
    case 'disabled':
      return css$2(["color:", ";pointer-events:none;cursor:not-allowed;"], theme.__hd__.datePicker.colors.disabledText);
    case 'selected':
      return css$2(["color:", ";font-weight:", ";background-color:", ";"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'inHoveringWeek':
      return css$2(["background-color:", ";&:hover{cursor:pointer;}"], theme.__hd__.datePicker.colors.inRangeBackground);
  }
});
var MonthNavigation = styled.div.withConfig({
  displayName: "StyledCalendar__MonthNavigation",
  componentId: "sc-vr1270-13"
})(["&&{margin:0;padding:", ";}"], function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.datePicker.space.navigationPadding;
});
var Month = styled.div.withConfig({
  displayName: "StyledCalendar__Month",
  componentId: "sc-vr1270-14"
})(["&&{margin:0;border-radius:", ";box-sizing:border-box;cursor:pointer;padding:", ";font-size:", ";font-weight:", ";line-height:", ";", ";}"], function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.datePicker.radii.month;
}, function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.datePicker.space.monthPadding;
}, function (_ref29) {
  var theme = _ref29.theme;
  return theme.__hd__.datePicker.fontSizes.month;
}, function (_ref30) {
  var theme = _ref30.theme;
  return theme.__hd__.datePicker.fontWeights.month;
}, function (_ref31) {
  var theme = _ref31.theme;
  return theme.__hd__.datePicker.lineHeights.month;
}, function (_ref32) {
  var themeState = _ref32.themeState,
    theme = _ref32.theme;
  switch (themeState) {
    case 'enabled':
      return css$2(["&:hover{background-color:", ";}"], theme.__hd__.datePicker.colors.hoverBackground);
    case 'disabled':
      return css$2(["color:", ";pointer-events:none;cursor:not-allowed;"], theme.__hd__.datePicker.colors.disabledText);
    case 'selected':
      return css$2(["color:", ";font-weight:", ";background-color:", ";border-width:", ";border-color:", ";border-style:solid;"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedMonth, theme.__hd__.datePicker.colors.selectedBackground, theme.__hd__.datePicker.borderWidths.month, theme.__hd__.datePicker.colors.selectedBackground);
    case 'today':
      return css$2(["color:", ";border-width:", ";border-color:", ";border-style:solid;&:hover{background-color:", ";}"], theme.__hd__.datePicker.colors.todayText, theme.__hd__.datePicker.borderWidths.month, theme.__hd__.datePicker.colors.todayBorder, theme.__hd__.datePicker.colors.hoverBackground);
    case 'selectedRangeDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'selectedStartDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";border-top-right-radius:0px;border-bottom-right-radius:0px;"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'selectedEndDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";border-top-left-radius:0px;border-bottom-left-radius:0px;"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'inRange':
      return css$2(["background-color:", ";border-radius:0;&:hover{background-color:", ";color:", ";}"], theme.__hd__.datePicker.colors.inRangeBackground, theme.__hd__.datePicker.colors.inRangeHoverBackground, theme.__hd__.datePicker.colors.inRangeHoverText);
    case 'inHoveringRange':
      return css$2(["background-color:", ";border-radius:0;"], theme.__hd__.datePicker.colors.inRangeBackground);
    case 'outOfTheMonth':
      {
        return css$2(["color:", ";cursor:default;"], theme.__hd__.datePicker.colors.disabledText);
      }
  }
});
var MonthGrid = styled.div.withConfig({
  displayName: "StyledCalendar__MonthGrid",
  componentId: "sc-vr1270-15"
})(["&&{display:flex;flex-wrap:wrap;justify-content:space-between;padding:0px;margin:0px;width:", ";}"], function (_ref33) {
  var theme = _ref33.theme;
  return theme.__hd__.datePicker.sizes.month;
});
var MonthWrapper = styled.div.withConfig({
  displayName: "StyledCalendar__MonthWrapper",
  componentId: "sc-vr1270-16"
})(["&&{padding:", ";margin:", ";border-radius:", ";", ";}"], function (_ref34) {
  var theme = _ref34.theme;
  return theme.__hd__.datePicker.space.monthSelectedPadding;
}, function (_ref35) {
  var theme = _ref35.theme;
  return theme.__hd__.datePicker.space.monthSelectedMargin;
}, function (_ref36) {
  var theme = _ref36.theme;
  return theme.__hd__.datePicker.radii.month;
}, function (_ref37) {
  var themeState = _ref37.themeState,
    theme = _ref37.theme;
  switch (themeState) {
    case 'selectedRangeDate':
      return css$2(["color:", ";font-weight:", ";background-color:", ";"], theme.__hd__.datePicker.colors.selectedText, theme.__hd__.datePicker.fontWeights.selectedDay, theme.__hd__.datePicker.colors.selectedBackground);
    case 'selectedStartDate':
      return css$2(["background-color:", ";border-top-right-radius:0px;border-bottom-right-radius:0px;"], theme.__hd__.datePicker.colors.selectedBackground);
    case 'selectedEndDate':
      return css$2(["background-color:", ";border-top-left-radius:0px;border-bottom-left-radius:0px;"], theme.__hd__.datePicker.colors.selectedBackground);
    case 'inRange':
    case 'inHoveringRange':
      return css$2(["background-color:", ";border-radius:0;"], theme.__hd__.datePicker.colors.inRangeBackground);
    default:
      {
        return css$2([""]);
      }
  }
});
var MonthGridItem = styled.div.withConfig({
  displayName: "StyledCalendar__MonthGridItem",
  componentId: "sc-vr1270-17"
})(["&&{text-align:center;margin:0;padding:0;width:33.3%;}"]);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var startOfMonth = convertToFP(startOfMonth$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var endOfMonth = convertToFP(endOfMonth$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var eachDayOfInterval = convertToFP(eachDayOfInterval$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var addDays = convertToFP(addDays$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var addWeeks = convertToFP(addWeeks$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var subDays = convertToFP(subDays$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var isSameDay = convertToFP(isSameDay$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var isBefore = convertToFP(isBefore$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var isAfter = convertToFP(isAfter$1, 2);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var eachYearOfInterval = convertToFP(eachYearOfInterval$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var startOfYear = convertToFP(startOfYear$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var endOfYear = convertToFP(endOfYear$1, 1);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var isSameMonth = convertToFP(isSameMonth$1, 2);

var getMonths = function getMonths() {
  return Array.from(Array(12)).map(function (_, month) {
    return format$1(new Date(2024, month), 'LLL');
  });
};
var getWeekDays = function getWeekDays() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    weekStartsOn: 0
  };
  var _opts$weekStartsOn = opts.weekStartsOn,
    weekStartsOn = _opts$weekStartsOn === void 0 ? 0 : _opts$weekStartsOn;
  return Array.from(Array(7)).map(function (_, day) {
    return format$1(addDays(day, startOfWeek(new Date(), {
      weekStartsOn: weekStartsOn
    })), 'EEEEEE');
  });
};
var getMonthMatrix = function getMonthMatrix(_ref) {
  var month = _ref.month,
    year = _ref.year,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    _ref$weekStartsOn = _ref.weekStartsOn,
    weekStartsOn = _ref$weekStartsOn === void 0 ? 0 : _ref$weekStartsOn;
  var date = new Date(year, month);
  var weekStartDates = eachWeekOfInterval({
    start: startOfMonth(date),
    end: addWeeks(1, endOfMonth(date))
  }, {
    weekStartsOn: weekStartsOn
  });
  var monthMatrix = weekStartDates.filter(function (_date, index) {
    return index < 6;
  }).map(function (weekStartDate) {
    return eachDayOfInterval({
      start: startOfWeek(weekStartDate, {
        weekStartsOn: weekStartsOn
      }),
      end: endOfWeek(weekStartDate, {
        weekStartsOn: weekStartsOn
      })
    }).map(function (dateOfWeek) {
      return {
        date: dateOfWeek,
        disabled: getMonth(dateOfWeek) !== month || minDate !== undefined && isBefore(minDate, dateOfWeek) || maxDate !== undefined && isAfter(maxDate, dateOfWeek)
      };
    });
  });
  return monthMatrix;
};
var getSingleCalendarDayState = function getSingleCalendarDayState(_ref2) {
  var dateOfWeek = _ref2.dateOfWeek,
    selectedDate = _ref2.selectedDate;
  if (dateOfWeek.disabled === true) {
    return 'disabled';
  }
  if (selectedDate !== undefined && isSameDay(dateOfWeek.date, selectedDate)) {
    return 'selected';
  }
  if (isSameDay(dateOfWeek.date, new Date())) {
    return 'today';
  }
  return 'enabled';
};
var getWeekCalendarState = function getWeekCalendarState(_ref3) {
  var dateOfWeek = _ref3.dateOfWeek,
    selectedDate = _ref3.selectedDate,
    tempDate = _ref3.tempDate,
    weekStartsOn = _ref3.weekStartsOn;
  if (selectedDate !== undefined) {
    var firstDateOfWeek = startOfWeek(selectedDate, {
      weekStartsOn: weekStartsOn
    });
    if (isSameDay(firstDateOfWeek, dateOfWeek.date)) {
      return 'selected';
    }
  }
  if (tempDate !== undefined) {
    var _firstDateOfWeek = startOfWeek(tempDate, {
      weekStartsOn: weekStartsOn
    });
    var lastDateOfWeek = endOfWeek(tempDate, {
      weekStartsOn: weekStartsOn
    });
    if (isAfter(_firstDateOfWeek, dateOfWeek.date) && isBefore(lastDateOfWeek, dateOfWeek.date) || isSameDay(_firstDateOfWeek, dateOfWeek.date) || isSameDay(lastDateOfWeek, dateOfWeek.date)) {
      return 'inHoveringWeek';
    }
  }
  if (dateOfWeek.disabled === true) {
    return 'disabled';
  }
  return 'enabled';
};
var getWeekState = function getWeekState(_ref4) {
  var date = _ref4.date,
    dateOfWeek = _ref4.dateOfWeek,
    weekStartsOn = _ref4.weekStartsOn,
    selected = _ref4.selected;
  var firstDateOfWeek = startOfWeek(date, {
    weekStartsOn: weekStartsOn
  });
  var lastDateOfWeek = endOfWeek(date, {
    weekStartsOn: weekStartsOn
  });
  if (isSameDay(firstDateOfWeek, dateOfWeek)) {
    return selected ? 'selectedFirstDateOfWeek' : 'inHoveringFirstDateOfWeek';
  }
  if (isSameDay(lastDateOfWeek, dateOfWeek)) {
    return selected ? 'selectedLastDateOfWeek' : 'inHoveringLastDateOfWeek';
  }
  if (isAfter(firstDateOfWeek, dateOfWeek) && isBefore(lastDateOfWeek, dateOfWeek)) {
    return selected ? 'selectedWeekDate' : 'inHoveringWeekDate';
  }
  return null;
};
var getWeekCalendarDayState = function getWeekCalendarDayState(_ref5) {
  var dateOfWeek = _ref5.dateOfWeek,
    selectedDate = _ref5.selectedDate,
    tempDate = _ref5.tempDate,
    _ref5$weekStartsOn = _ref5.weekStartsOn,
    weekStartsOn = _ref5$weekStartsOn === void 0 ? 0 : _ref5$weekStartsOn;
  if (selectedDate !== undefined) {
    var state = getWeekState({
      date: selectedDate,
      dateOfWeek: dateOfWeek.date,
      weekStartsOn: weekStartsOn,
      selected: true
    });
    if (state) {
      return state;
    }
  }
  if (tempDate !== undefined) {
    var _state = getWeekState({
      date: tempDate,
      dateOfWeek: dateOfWeek.date,
      weekStartsOn: weekStartsOn,
      selected: false
    });
    if (_state) {
      return _state;
    }
  }
  if (isSameDay(dateOfWeek.date, new Date())) {
    return 'today';
  }
  if (dateOfWeek.disabled === true) {
    return 'disabled';
  }
  return 'enabled';
};
var generateYearOptions = function generateYearOptions(_ref6) {
  var maxDate = _ref6.maxDate,
    minDate = _ref6.minDate;
  return eachYearOfInterval({
    start: minDate,
    end: maxDate
  }).map(function (dateOfYear) {
    var year = getYear(dateOfYear);
    return {
      value: year,
      text: year.toString()
    };
  });
};
var disableMonthOption = function disableMonthOption(_ref7) {
  var monthOpt = _ref7.monthOpt,
    minMonth = _ref7.minMonth,
    maxMonth = _ref7.maxMonth;
  if (monthOpt.value < minMonth || monthOpt.value > maxMonth) {
    return Object.assign(Object.assign({}, monthOpt), {
      disabled: true
    });
  }
  return monthOpt;
};
var generateMonthOptions = function generateMonthOptions(_ref8) {
  var maxDate = _ref8.maxDate,
    minDate = _ref8.minDate,
    year = _ref8.year;
  var monthOptions = getMonths().map(function (month, index) {
    return {
      value: index,
      text: month
    };
  });
  var minYear = getYear(minDate);
  var maxYear = getYear(maxDate);
  var minMonth = getMonth(minDate);
  var maxMonth = getMonth(maxDate);
  if (year > minYear && year < maxYear) return monthOptions;
  if (minYear === year && maxYear === year) {
    return monthOptions.map(function (monthOpt) {
      return disableMonthOption({
        monthOpt: monthOpt,
        minMonth: minMonth,
        maxMonth: maxMonth
      });
    });
  }
  if (year === minYear && minYear < maxYear) {
    return monthOptions.map(function (monthOpt) {
      return disableMonthOption({
        monthOpt: monthOpt,
        minMonth: minMonth,
        maxMonth: 11
      });
    });
  }
  if (minYear < maxYear && year === maxYear) {
    return monthOptions.map(function (monthOpt) {
      return disableMonthOption({
        monthOpt: monthOpt,
        minMonth: 0,
        maxMonth: maxMonth
      });
    });
  }
  return monthOptions.map(function (monthOpt) {
    return Object.assign(Object.assign({}, monthOpt), {
      disabled: true
    });
  });
};
var getMonthPickerOptions = function getMonthPickerOptions(_ref9) {
  var maxDate = _ref9.maxDate,
    minDate = _ref9.minDate,
    year = _ref9.year;
  var result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(function (monthIndex) {
    var monthStartDate = startOfMonth(new Date(year, monthIndex));
    var disabled = minDate !== undefined && isBefore(minDate, monthStartDate) || maxDate !== undefined && isAfter(maxDate, monthStartDate);
    var text = getMonths()[monthIndex];
    return {
      date: monthStartDate,
      disabled: disabled,
      text: text !== undefined ? text : ''
    };
  });
  return result;
};
var disableMonthsNavigation = function disableMonthsNavigation(date, minDate, maxDate) {
  var startOfMonthMinDate = startOfMonth(minDate);
  var endOfMonthMaxDate = endOfMonth(maxDate);
  var dateInPreviousMonth = subMonths(1, date);
  var dateInNextMonth = addMonths(1, date);
  return {
    disabledPreviousMonth: isBefore(startOfMonthMinDate, dateInPreviousMonth),
    disabledNextMonth: isAfter(endOfMonthMaxDate, dateInNextMonth)
  };
};
var disableYear = function disableYear(year, yearOptions) {
  var foundYear = yearOptions.find(function (yearOpt) {
    return yearOpt.value === year;
  });
  return foundYear === undefined;
};
// Double Calendar utils
var isDisabledDate = function isDisabledDate(_ref10) {
  var date = _ref10.date,
    startDate = _ref10.startDate,
    endDate = _ref10.endDate,
    isSettingStartDate = _ref10.isSettingStartDate,
    isSettingEndDate = _ref10.isSettingEndDate,
    dateClickCount = _ref10.dateClickCount;
  return date.disabled || !!startDate && isSettingEndDate && dateClickCount === 1 && isBefore(startDate, date.date) || !!endDate && isSettingStartDate && dateClickCount === 1 && isAfter(endDate, date.date);
};
var isInHoveringRange = function isInHoveringRange(_ref11) {
  var date = _ref11.date,
    startDate = _ref11.startDate,
    endDate = _ref11.endDate,
    tempDate = _ref11.tempDate,
    isSettingStartDate = _ref11.isSettingStartDate,
    isSettingEndDate = _ref11.isSettingEndDate;
  return !!endDate && !!tempDate && isSettingStartDate && isAfter(subDays(1, tempDate), date.date) && isBefore(endDate, date.date) || !!startDate && !!tempDate && isSettingEndDate && isAfter(startDate, date.date) && isBefore(addDays(1, tempDate), date.date);
};
var getDoubleCalendarDayState = function getDoubleCalendarDayState(_ref12) {
  var dateOfWeek = _ref12.dateOfWeek,
    isSettingStartDate = _ref12.isSettingStartDate,
    isSettingEndDate = _ref12.isSettingEndDate,
    dateClickCount = _ref12.dateClickCount,
    startDate = _ref12.startDate,
    endDate = _ref12.endDate,
    tempDate = _ref12.tempDate;
  if (isDisabledDate({
    date: dateOfWeek,
    startDate: startDate,
    endDate: endDate,
    isSettingEndDate: isSettingEndDate,
    isSettingStartDate: isSettingStartDate,
    dateClickCount: dateClickCount
  })) {
    return 'disabled';
  }
  if (startDate !== undefined && endDate !== undefined && isSameDay(startDate, endDate) && isSameDay(dateOfWeek.date, startDate)) {
    return 'selectedRangeDate';
  }
  if (startDate !== undefined && isSameDay(dateOfWeek.date, startDate)) {
    return 'selectedStartDate';
  }
  if (endDate !== undefined && isSameDay(dateOfWeek.date, endDate)) {
    return 'selectedEndDate';
  }
  if (startDate !== undefined && endDate !== undefined && isAfter(startDate, dateOfWeek.date) && isBefore(endDate, dateOfWeek.date)) {
    return 'inRange';
  }
  if (isInHoveringRange({
    date: dateOfWeek,
    startDate: startDate,
    endDate: endDate,
    tempDate: tempDate,
    isSettingStartDate: isSettingStartDate,
    isSettingEndDate: isSettingEndDate
  })) {
    return 'inHoveringRange';
  }
  if (isSameDay(dateOfWeek.date, new Date())) {
    return 'today';
  }
  return 'enabled';
};
var getDoubleCalendarMonthState = function getDoubleCalendarMonthState(_ref13) {
  var month = _ref13.month,
    isSettingStartDate = _ref13.isSettingStartDate,
    isSettingEndDate = _ref13.isSettingEndDate,
    dateClickCount = _ref13.dateClickCount,
    startDate = _ref13.startDate,
    endDate = _ref13.endDate,
    tempDate = _ref13.tempDate;
  if (isDisabledDate({
    date: month,
    startDate: startDate,
    endDate: endDate,
    isSettingEndDate: isSettingEndDate,
    isSettingStartDate: isSettingStartDate,
    dateClickCount: dateClickCount
  })) {
    return 'disabled';
  }
  if (startDate && endDate && isSameMonth(startDate, endDate) && isSameMonth(month.date, startDate)) {
    return 'selectedRangeDate';
  }
  if (startDate && isSameMonth(month.date, startDate)) {
    return 'selectedStartDate';
  }
  if (endDate && isSameMonth(month.date, endDate)) {
    return 'selectedEndDate';
  }
  if (startDate && endDate && isAfter(startDate, month.date) && isBefore(endDate, month.date)) {
    return 'inRange';
  }
  if (isInHoveringRange({
    date: month,
    startDate: startDate,
    endDate: endDate,
    tempDate: tempDate,
    isSettingStartDate: isSettingStartDate,
    isSettingEndDate: isSettingEndDate
  })) {
    return 'inHoveringRange';
  }
  if (isSameMonth(month.date, new Date())) {
    return 'today';
  }
  return 'enabled';
};

var DoubleCalendar = function DoubleCalendar(_ref) {
  var startDate = _ref.startDate,
    endDate = _ref.endDate,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    onSelectDate = _ref.onSelectDate,
    isSettingStartDate = _ref.isSettingStartDate,
    isSettingEndDate = _ref.isSettingEndDate,
    dateClickCount = _ref.dateClickCount;
  var currentDate = useMemo(function () {
    return new Date();
  }, []);
  var initialDate = startDate !== undefined ? startDate : currentDate;
  var _useState = useState(initialDate),
    _useState2 = _slicedToArray(_useState, 2),
    date = _useState2[0],
    setDate = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    tempDate = _useState4[0],
    setTempDate = _useState4[1];
  var month = getMonth(date);
  var year = getYear(date);
  var dateInNextMonth = useMemo(function () {
    return addMonths(1, date);
  }, [date]);
  var nextMonth = getMonth(dateInNextMonth);
  var nextYear = getYear(dateInNextMonth);
  var calendarMinDate = useMemo(function () {
    return minDate !== undefined ? minDate : subYears(100, currentDate);
  }, [minDate, currentDate]);
  var calendarMaxDate = useMemo(function () {
    return maxDate !== undefined ? maxDate : addYears(100, currentDate);
  }, [maxDate, currentDate]);
  var initialYearOptions = useMemo(function () {
    return generateYearOptions({
      minDate: calendarMinDate,
      maxDate: calendarMaxDate
    });
  }, [calendarMinDate, calendarMaxDate]);
  var _useState5 = useState(initialYearOptions),
    _useState6 = _slicedToArray(_useState5, 2),
    yearOptions = _useState6[0],
    setYearOptions = _useState6[1];
  useEffect(function () {
    var minEdgeYear = initialYearOptions[0];
    var maxEdgeYear = initialYearOptions[initialYearOptions.length - 1];
    if (minEdgeYear === undefined || maxEdgeYear === undefined) return;
    if (getYear(date) < minEdgeYear.value) {
      setYearOptions([{
        text: (minEdgeYear.value - 1).toString(),
        value: minEdgeYear.value - 1
      }].concat(_toConsumableArray(initialYearOptions)));
    }
    if (getYear(dateInNextMonth) > maxEdgeYear.value) {
      setYearOptions([].concat(_toConsumableArray(initialYearOptions), [{
        text: (maxEdgeYear.value + 1).toString(),
        value: maxEdgeYear.value + 1
      }]));
    }
    if (getYear(date) >= minEdgeYear.value && getYear(dateInNextMonth) <= maxEdgeYear.value) {
      setYearOptions(initialYearOptions);
    }
  }, [date, dateInNextMonth, initialYearOptions]);
  var monthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year: year
  });
  var nextMonthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year: nextYear
  });
  var _disableMonthsNavigat = disableMonthsNavigation(date, calendarMinDate, calendarMaxDate),
    disabledPreviousMonth = _disableMonthsNavigat.disabledPreviousMonth,
    disabledNextMonth = _disableMonthsNavigat.disabledNextMonth;
  var disabledNextYear = disableYear(year + 1, yearOptions);
  var disabledPreviousYear = disableYear(year - 1, yearOptions);
  var onChangeMonth = useCallback(function (newMonth) {
    setDate(setMonth(newMonth, date));
  }, [date, setDate]);
  var onChangeYear = useCallback(function (newYear) {
    setDate(setYear(newYear, date));
  }, [date, setDate]);
  var onChangeNextMonth = useCallback(function (newMonth) {
    setDate(subMonths(1, setMonth(newMonth, dateInNextMonth)));
  }, [dateInNextMonth, setDate]);
  var onChangeNextYear = useCallback(function (newYear) {
    setDate(subMonths(1, setYear(newYear, dateInNextMonth)));
  }, [dateInNextMonth, setDate]);
  var onMouseOverDay = useCallback(function (hoveredDate) {
    setTempDate(hoveredDate);
  }, [setTempDate]);
  var onDateClick = useCallback(function (e, clickedDate) {
    if (onSelectDate !== undefined) {
      onSelectDate(clickedDate);
    }
    e.preventDefault();
  }, [onSelectDate]);
  var onNavigationClick = useCallback(function (_ref2) {
    var isMoveBack = _ref2.isMoveBack;
    var newDate = isMoveBack ? subMonths(1, date) : addMonths(1, date);
    setDate(newDate);
  }, [date, setDate]);
  var onDoubleNavigationClick = useCallback(function (_ref3) {
    var isMoveBack = _ref3.isMoveBack;
    var newDate = isMoveBack ? subYears(1, date) : addYears(1, date);
    setDate(newDate);
  }, [date, setDate]);
  var renderCalendar = useCallback(function (monthMatrix) {
    return /*#__PURE__*/React__default.createElement(CalendarWrapper, null, /*#__PURE__*/React__default.createElement(CalendarRow, null, getWeekDays().map(function (day) {
      return /*#__PURE__*/React__default.createElement(DayWrapper, {
        key: day
      }, /*#__PURE__*/React__default.createElement(Day, {
        themeState: "dayLabel"
      }, day));
    })), monthMatrix.map(function (week, weekNumber) {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/no-array-index-key
        React__default.createElement(CalendarRow, {
          key: weekNumber
        }, week.map(function (dateOfWeek) {
          var day = getDate(dateOfWeek.date);
          var dayState = getDoubleCalendarDayState({
            dateOfWeek: dateOfWeek,
            isSettingStartDate: isSettingStartDate,
            isSettingEndDate: isSettingEndDate,
            dateClickCount: dateClickCount,
            startDate: startDate,
            endDate: endDate,
            tempDate: tempDate
          });
          return (
            /*#__PURE__*/
            // eslint-disable-next-line react/no-array-index-key
            React__default.createElement(DayWrapper, {
              key: "".concat(weekNumber, "-").concat(day),
              themeState: dayState
            }, /*#__PURE__*/React__default.createElement(Day, {
              themeState: dayState,
              onClick: dayState !== 'disabled' ? function (e) {
                return onDateClick(e, dateOfWeek.date);
              } : undefined,
              onMouseOver: function onMouseOver() {
                return onMouseOverDay(dateOfWeek.date);
              },
              onFocus: function onFocus() {
                return onMouseOverDay(dateOfWeek.date);
              }
            }, day))
          );
        }))
      );
    }));
  }, [isSettingStartDate, isSettingEndDate, dateClickCount, startDate, endDate, tempDate, onDateClick, onMouseOverDay]);
  return /*#__PURE__*/React__default.createElement(Container, null, /*#__PURE__*/React__default.createElement(DoubleCalendarContainer, null, /*#__PURE__*/React__default.createElement(CalendarContainer, null, /*#__PURE__*/React__default.createElement(Navigation, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "double-left-arrows",
    intent: "primary",
    disabled: disabledPreviousYear,
    onClick: function onClick() {
      return onDoubleNavigationClick({
        isMoveBack: true
      });
    },
    sx: {
      mr: 'small'
    },
    "data-test-id": "sub-year-date-range-picker"
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "single-left-arrow",
    intent: "primary",
    disabled: disabledPreviousMonth,
    onClick: function onClick() {
      return onNavigationClick({
        isMoveBack: true
      });
    },
    sx: {
      mr: 'small'
    },
    "data-test-id": "sub-month-date-range-picker"
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: monthOptions,
    value: month,
    onChange: onChangeMonth,
    "data-test-id": "first-month-select"
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: yearOptions,
    value: year,
    onChange: onChangeYear,
    "data-test-id": "first-year-select"
  }), /*#__PURE__*/React__default.createElement(MobileRightArrowsDateRangeWrapper, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "single-right-arrow",
    intent: "primary",
    disabled: disabledNextMonth,
    onClick: function onClick() {
      return onNavigationClick({
        isMoveBack: false
      });
    },
    sx: {
      mr: 'small',
      ml: 'small'
    },
    "data-test-id": "add-month-date-range-picker-mobile"
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "double-right-arrows",
    intent: "primary",
    disabled: disabledNextYear,
    onClick: function onClick() {
      return onDoubleNavigationClick({
        isMoveBack: false
      });
    },
    "data-test-id": "add-year-date-range-picker-mobile"
  }))), renderCalendar(getMonthMatrix({
    month: month,
    year: year,
    minDate: calendarMinDate,
    maxDate: calendarMaxDate
  }))), /*#__PURE__*/React__default.createElement(Divider$1, {
    marginX: "small"
  }), /*#__PURE__*/React__default.createElement(CalendarContainer, null, /*#__PURE__*/React__default.createElement(Navigation, null, /*#__PURE__*/React__default.createElement(Select, {
    options: nextMonthOptions,
    value: nextMonth,
    onChange: onChangeNextMonth,
    "data-test-id": "second-month-select"
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: yearOptions,
    value: nextYear,
    onChange: onChangeNextYear,
    "data-test-id": "second-year-select"
  }), /*#__PURE__*/React__default.createElement(DesktopRightArrowsDateRangeWrapper, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "single-right-arrow",
    intent: "primary",
    disabled: disabledNextMonth,
    onClick: function onClick() {
      return onNavigationClick({
        isMoveBack: false
      });
    },
    sx: {
      mr: 'small',
      ml: 'small'
    },
    "data-test-id": "add-month-date-range-picker-desktop"
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "double-right-arrows",
    intent: "primary",
    disabled: disabledNextYear,
    onClick: function onClick() {
      return onDoubleNavigationClick({
        isMoveBack: false
      });
    },
    "data-test-id": "add-year-date-range-picker-desktop"
  }))), renderCalendar(getMonthMatrix({
    month: nextMonth,
    year: nextYear,
    minDate: calendarMinDate,
    maxDate: calendarMaxDate
  })))));
};
var DoubleCalendar$1 = DoubleCalendar;

var getMonthState = function getMonthState(_ref) {
  var month = _ref.month,
    selectedMonth = _ref.selectedMonth,
    currentDate = _ref.currentDate;
  if (month.disabled) {
    return 'disabled';
  }
  if (selectedMonth !== undefined && isSameMonth(month.date, selectedMonth)) {
    return 'selected';
  }
  if (isSameMonth(month.date, currentDate)) {
    return 'today';
  }
  return 'enabled';
};
var MonthCalendar = function MonthCalendar(_ref2) {
  var selectedMonth = _ref2.selectedMonth,
    onSelectMonth = _ref2.onSelectMonth,
    minDate = _ref2.minDate,
    maxDate = _ref2.maxDate;
  var currentDate = new Date();
  var initialDate = selectedMonth !== undefined ? selectedMonth : currentDate;
  var _useState = useState(initialDate),
    _useState2 = _slicedToArray(_useState, 2),
    date = _useState2[0],
    setDate = _useState2[1];
  var year = getYear(date);
  var calendarMinDate = minDate !== undefined ? minDate : subYears(100, currentDate);
  var calendarMaxDate = maxDate !== undefined ? maxDate : addYears(100, currentDate);
  var yearOptions = generateYearOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate
  });
  var onChangeYear = useCallback(function (newYear) {
    setDate(setYear(newYear, date));
  }, [date, setDate]);
  useEffect(function () {
    setDate(selectedMonth !== undefined ? selectedMonth : new Date());
  }, [selectedMonth, setDate]);
  var monthOptions = useMemo(function () {
    return getMonthPickerOptions({
      year: year,
      minDate: minDate,
      maxDate: maxDate
    });
  }, [year, minDate, maxDate]);
  return /*#__PURE__*/React__default.createElement(Container, null, /*#__PURE__*/React__default.createElement(MonthNavigation, null, /*#__PURE__*/React__default.createElement(Select, {
    options: yearOptions,
    value: year,
    onChange: onChangeYear,
    "data-test-id": "year-select"
  })), /*#__PURE__*/React__default.createElement(CalendarWrapper, null, /*#__PURE__*/React__default.createElement(MonthGrid, null, monthOptions.map(function (month) {
    var onClickMonth = function onClickMonth(e, clickedMonth) {
      if (onSelectMonth !== undefined) {
        onSelectMonth(clickedMonth.date);
      }
      e.preventDefault();
    };
    var monthState = getMonthState({
      month: month,
      currentDate: currentDate,
      selectedMonth: selectedMonth
    });
    return /*#__PURE__*/React__default.createElement(MonthGridItem, {
      key: month.text
    }, /*#__PURE__*/React__default.createElement(MonthWrapper, {
      themeState: monthState
    }, /*#__PURE__*/React__default.createElement(Month, {
      themeState: monthState,
      onClick: monthState !== 'disabled' ? function (e) {
        return onClickMonth(e, month);
      } : undefined
    }, month.text)));
  }))));
};
var MonthCalendar$1 = MonthCalendar;

var SelectMonthAndYear = function SelectMonthAndYear(_ref) {
  var _ref$currentDate = _ref.currentDate,
    currentDate = _ref$currentDate === void 0 ? new Date() : _ref$currentDate,
    year = _ref.year,
    month = _ref.month,
    onChangeMonth = _ref.onChangeMonth,
    onChangeYear = _ref.onChangeYear,
    date = _ref.date,
    setDate = _ref.setDate;
  var calendarMinDate = subYears(100, currentDate);
  var calendarMaxDate = addYears(100, currentDate);
  var yearOptions = generateYearOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate
  });
  var monthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year: year
  });
  var _disableMonthsNavigat = disableMonthsNavigation(date, calendarMinDate, calendarMaxDate),
    disabledPreviousMonth = _disableMonthsNavigat.disabledPreviousMonth,
    disabledNextMonth = _disableMonthsNavigat.disabledNextMonth;
  var disabledNextYear = disableYear(year + 1, yearOptions);
  var disabledPreviousYear = disableYear(year - 1, yearOptions);
  var onNavigationClick = useCallback(function (_ref2) {
    var isMoveBack = _ref2.isMoveBack;
    var newDate = isMoveBack ? subMonths(1, date) : addMonths(1, date);
    setDate(newDate);
  }, [date, setDate]);
  var onDoubleNavigationClick = useCallback(function (_ref3) {
    var isMoveBack = _ref3.isMoveBack;
    var newDate = isMoveBack ? subYears(1, date) : addYears(1, date);
    setDate(newDate);
  }, [date, setDate]);
  return /*#__PURE__*/React__default.createElement(Navigation, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "double-left-arrows",
    intent: "primary",
    onClick: function onClick() {
      return onDoubleNavigationClick({
        isMoveBack: true
      });
    },
    sx: {
      mr: 'small'
    },
    "data-test-id": "sub-year-week-picker",
    disabled: disabledPreviousYear
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "single-left-arrow",
    intent: "primary",
    onClick: function onClick() {
      return onNavigationClick({
        isMoveBack: true
      });
    },
    "data-test-id": "sub-month-week-picker",
    sx: {
      mr: 'small'
    },
    disabled: disabledPreviousMonth
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: monthOptions,
    value: month,
    onChange: onChangeMonth,
    "data-test-id": "month-select"
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: yearOptions,
    value: year,
    onChange: onChangeYear,
    "data-test-id": "year-select"
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "single-right-arrow",
    intent: "primary",
    onClick: function onClick() {
      return onNavigationClick({
        isMoveBack: false
      });
    },
    sx: {
      mr: 'small',
      ml: 'small'
    },
    "data-test-id": "add-month-week-picker",
    disabled: disabledNextMonth
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "double-right-arrows",
    intent: "primary",
    disabled: disabledNextYear,
    onClick: function onClick() {
      return onDoubleNavigationClick({
        isMoveBack: false
      });
    },
    "data-test-id": "add-year-week-picker"
  }));
};
var FirstRowOfWeekCalendar = function FirstRowOfWeekCalendar(_ref4) {
  var weekStartsOn = _ref4.weekStartsOn;
  var days = useMemo(function () {
    return getWeekDays({
      weekStartsOn: weekStartsOn
    });
  }, [weekStartsOn]);
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(CalendarRow, null, /*#__PURE__*/React__default.createElement(WeekWrapper, null, /*#__PURE__*/React__default.createElement(Day, {
    themeState: "dayLabel"
  }, t('Week'))), /*#__PURE__*/React__default.createElement(Divider$1, {
    variant: "vertical",
    marginX: "xsmall"
  }), days.map(function (day) {
    return /*#__PURE__*/React__default.createElement(DayWrapper, {
      key: day
    }, /*#__PURE__*/React__default.createElement(Day, {
      themeState: "dayLabel"
    }, day));
  }));
};
var WeekComponent = function WeekComponent(_ref5) {
  var onMouseOver = _ref5.onMouseOver,
    firstDateState = _ref5.firstDateState,
    showedWeekNumber = _ref5.showedWeekNumber;
  return /*#__PURE__*/React__default.createElement(WeekWrapper, null, /*#__PURE__*/React__default.createElement(Week, {
    onMouseOver: onMouseOver,
    onFocus: onMouseOver,
    themeState: firstDateState
  }, showedWeekNumber));
};
var DayComponent = function DayComponent(_ref6) {
  var day = _ref6.day,
    dateState = _ref6.dateState,
    onMouseOver = _ref6.onMouseOver;
  return /*#__PURE__*/React__default.createElement(DayWrapper, {
    themeState: dateState,
    onMouseOver: onMouseOver,
    onFocus: onMouseOver
  }, /*#__PURE__*/React__default.createElement(Day, {
    themeState: dateState
  }, day));
};
var CalendarMatrix = function CalendarMatrix(_ref7) {
  var monthMatrix = _ref7.monthMatrix,
    onSelectFirstDateOfWeek = _ref7.onSelectFirstDateOfWeek,
    selectedFirstDateOfWeek = _ref7.selectedFirstDateOfWeek,
    setTempDate = _ref7.setTempDate,
    tempDate = _ref7.tempDate,
    weekStartsOn = _ref7.weekStartsOn;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, monthMatrix.map(function (week, weekNumber) {
    var _a;
    var firstDate = week[0] !== undefined ? week[0].date : new Date();
    var onDateClick = function onDateClick(e) {
      if (onSelectFirstDateOfWeek !== undefined) {
        onSelectFirstDateOfWeek(firstDate);
      }
      e.preventDefault();
    };
    var onMouseOverDay = function onMouseOverDay(hoveredDate) {
      setTempDate(hoveredDate);
    };
    var firstDateObject = {
      date: week[0] !== undefined ? week[0].date : new Date(),
      disabled: week[0] !== undefined ? (_a = week[0]) === null || _a === void 0 ? void 0 : _a.disabled : false
    };
    var showedWeekNumber = getWeek(firstDate, {
      weekStartsOn: weekStartsOn
    });
    var firstDateState = getWeekCalendarState({
      dateOfWeek: firstDateObject,
      selectedDate: selectedFirstDateOfWeek,
      tempDate: tempDate,
      weekStartsOn: weekStartsOn
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React__default.createElement(CalendarRow, {
        key: weekNumber,
        onClick: function onClick(e) {
          return onDateClick(e);
        }
      }, /*#__PURE__*/React__default.createElement(WeekComponent, {
        onMouseOver: function onMouseOver() {
          return onMouseOverDay(firstDate);
        },
        firstDateState: firstDateState,
        showedWeekNumber: showedWeekNumber
      }), /*#__PURE__*/React__default.createElement(Divider$1, {
        variant: "vertical",
        marginX: "xsmall"
      }), week.map(function (dateOfWeek) {
        var day = getDate(dateOfWeek.date);
        var dateState = getWeekCalendarDayState({
          dateOfWeek: dateOfWeek,
          selectedDate: selectedFirstDateOfWeek,
          tempDate: tempDate,
          weekStartsOn: weekStartsOn
        });
        return /*#__PURE__*/React__default.createElement(DayComponent
        // eslint-disable-next-line react/no-array-index-key
        , {
          // eslint-disable-next-line react/no-array-index-key
          key: "".concat(weekNumber, "-").concat(day),
          day: day,
          dateState: dateState,
          onMouseOver: function onMouseOver() {
            return onMouseOverDay(dateOfWeek.date);
          }
        });
      }))
    );
  }));
};
var WeekCalendar = function WeekCalendar(_ref8) {
  var onSelectFirstDateOfWeek = _ref8.onSelectFirstDateOfWeek,
    selectedFirstDateOfWeek = _ref8.selectedFirstDateOfWeek,
    _ref8$weekStartsOn = _ref8.weekStartsOn,
    weekStartsOn = _ref8$weekStartsOn === void 0 ? 0 : _ref8$weekStartsOn;
  var currentDate = new Date();
  var initialDate = selectedFirstDateOfWeek !== undefined ? selectedFirstDateOfWeek : currentDate;
  var _useState = useState(initialDate),
    _useState2 = _slicedToArray(_useState, 2),
    date = _useState2[0],
    setDate = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    tempDate = _useState4[0],
    setTempDate = _useState4[1];
  var month = getMonth(date);
  var year = getYear(date);
  var onChangeMonth = useCallback(function (newMonth) {
    setDate(setMonth(newMonth, date));
  }, [date, setDate]);
  var onChangeYear = useCallback(function (newYear) {
    setDate(setYear(newYear, date));
  }, [date, setDate]);
  useEffect(function () {
    setDate(selectedFirstDateOfWeek !== undefined ? selectedFirstDateOfWeek : new Date());
  }, [selectedFirstDateOfWeek, setDate]);
  var monthMatrix = getMonthMatrix({
    month: month,
    year: year,
    weekStartsOn: weekStartsOn
  });
  return /*#__PURE__*/React__default.createElement(Container, null, /*#__PURE__*/React__default.createElement(SelectMonthAndYear, {
    currentDate: currentDate,
    year: year,
    month: month,
    onChangeMonth: onChangeMonth,
    onChangeYear: onChangeYear,
    date: date,
    setDate: setDate
  }), /*#__PURE__*/React__default.createElement(CalendarWrapper, null, /*#__PURE__*/React__default.createElement(FirstRowOfWeekCalendar, {
    weekStartsOn: weekStartsOn
  }), /*#__PURE__*/React__default.createElement(CalendarMatrix, {
    monthMatrix: monthMatrix,
    onSelectFirstDateOfWeek: onSelectFirstDateOfWeek,
    selectedFirstDateOfWeek: selectedFirstDateOfWeek,
    setTempDate: setTempDate,
    tempDate: tempDate,
    weekStartsOn: weekStartsOn
  })));
};
var WeekCalendar$1 = WeekCalendar;

var SingleMonthCalendar = function SingleMonthCalendar(_ref) {
  var isSettingEndDate = _ref.isSettingEndDate,
    dateClickCount = _ref.dateClickCount,
    startDate = _ref.startDate,
    endDate = _ref.endDate,
    tempDate = _ref.tempDate,
    isSettingStartDate = _ref.isSettingStartDate,
    selectedYear = _ref.selectedYear,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    onMonthClick = _ref.onMonthClick,
    onMouseOverDay = _ref.onMouseOverDay;
  var monthOptions = useMemo(function () {
    return getMonthPickerOptions({
      year: selectedYear,
      minDate: minDate,
      maxDate: maxDate
    });
  }, [maxDate, minDate, selectedYear]);
  return /*#__PURE__*/React__default.createElement(CalendarWrapper, null, /*#__PURE__*/React__default.createElement(MonthGrid, null, monthOptions.map(function (currentMonth) {
    var monthState = getDoubleCalendarMonthState({
      month: currentMonth,
      isSettingEndDate: isSettingEndDate,
      dateClickCount: dateClickCount,
      startDate: startDate,
      endDate: endDate,
      tempDate: tempDate,
      isSettingStartDate: isSettingStartDate
    });
    return /*#__PURE__*/React__default.createElement(MonthGridItem, {
      key: currentMonth.text
    }, /*#__PURE__*/React__default.createElement(MonthWrapper, {
      themeState: monthState
    }, /*#__PURE__*/React__default.createElement(Month, {
      themeState: monthState,
      onClick: !['disabled', 'outOfTheMonth'].includes(monthState) ? function (e) {
        return onMonthClick(e, currentMonth.date);
      } : undefined,
      onMouseOver: function onMouseOver() {
        return onMouseOverDay(currentMonth.date);
      },
      onFocus: function onFocus() {
        return onMouseOverDay(currentMonth.date);
      }
    }, currentMonth.text)));
  })));
};
var DoubleMonthCalendar = function DoubleMonthCalendar(_ref2) {
  var startDate = _ref2.startDate,
    endDate = _ref2.endDate,
    minDate = _ref2.minDate,
    maxDate = _ref2.maxDate,
    onSelectDate = _ref2.onSelectDate,
    onSelectStartDate = _ref2.onSelectStartDate,
    onSelectEndDate = _ref2.onSelectEndDate,
    isSettingStartDate = _ref2.isSettingStartDate,
    isSettingEndDate = _ref2.isSettingEndDate,
    dateClickCount = _ref2.dateClickCount;
  var currentDate = useMemo(function () {
    return new Date();
  }, []);
  var initialDate = startDate !== undefined ? startDate : currentDate;
  var _useState = useState(initialDate),
    _useState2 = _slicedToArray(_useState, 2),
    date = _useState2[0],
    setDate = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    tempDate = _useState4[0],
    setTempDate = _useState4[1];
  var year = getYear(date);
  var calendarMinDate = useMemo(function () {
    return minDate !== undefined ? minDate : startOfYear(subYears(100, currentDate));
  }, [minDate, currentDate]);
  var calendarMaxDate = useMemo(function () {
    return maxDate !== undefined ? maxDate : endOfYear(addYears(100, currentDate));
  }, [maxDate, currentDate]);
  var nextYear = useMemo(function () {
    var minYear = getYear(calendarMinDate);
    var maxYear = getYear(calendarMaxDate);
    if (year < minYear) return year;
    if (year + 1 <= maxYear) {
      return year + 1;
    }
    return year;
  }, [calendarMinDate, calendarMaxDate, year]);
  var initialYearOptions = useMemo(function () {
    return generateYearOptions({
      minDate: calendarMinDate,
      maxDate: calendarMaxDate
    });
  }, [calendarMinDate, calendarMaxDate]);
  var yearOptions = initialYearOptions;
  var monthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year: year
  });
  var nextMonthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year: nextYear
  });
  var onChangeMonth = useCallback(function (newMonth) {
    onSelectStartDate === null || onSelectStartDate === void 0 ? void 0 : onSelectStartDate(new Date(year, newMonth));
  }, [onSelectStartDate, year]);
  var onChangeYear = useCallback(function (newYear) {
    setDate(setYear(newYear, date));
  }, [date, setDate]);
  var onChangeNextMonth = useCallback(function (newMonth) {
    onSelectEndDate === null || onSelectEndDate === void 0 ? void 0 : onSelectEndDate(new Date(nextYear, newMonth));
  }, [onSelectEndDate, nextYear]);
  var onChangeNextYear = useCallback(function (newYear) {
    var minYear = getYear(calendarMinDate);
    setDate(new Date(minYear < newYear - 1 ? newYear - 1 : newYear, 0));
  }, [calendarMinDate]);
  var onMouseOverDay = useCallback(function (hoveredDate) {
    setTempDate(hoveredDate);
  }, [setTempDate]);
  var onMonthClick = useCallback(function (e, clickedDate) {
    if (onSelectDate !== undefined) {
      onSelectDate(clickedDate);
    }
    e.preventDefault();
  }, [onSelectDate]);
  return /*#__PURE__*/React__default.createElement(Container, null, /*#__PURE__*/React__default.createElement(DoubleCalendarContainer, null, /*#__PURE__*/React__default.createElement(CalendarContainer, null, /*#__PURE__*/React__default.createElement(Navigation, null, /*#__PURE__*/React__default.createElement(Select, {
    options: monthOptions,
    value: startDate === null || startDate === void 0 ? void 0 : startDate.getMonth(),
    onChange: onChangeMonth,
    "data-test-id": "first-month-select"
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: yearOptions,
    value: year,
    onChange: onChangeYear,
    "data-test-id": "first-year-select"
  })), /*#__PURE__*/React__default.createElement(SingleMonthCalendar, {
    minDate: minDate,
    maxDate: maxDate,
    isSettingEndDate: isSettingEndDate,
    dateClickCount: dateClickCount,
    startDate: startDate,
    endDate: endDate,
    tempDate: tempDate,
    isSettingStartDate: isSettingStartDate,
    onMonthClick: onMonthClick,
    onMouseOverDay: onMouseOverDay,
    selectedYear: year
  })), /*#__PURE__*/React__default.createElement(Divider$1, {
    marginX: "small"
  }), /*#__PURE__*/React__default.createElement(CalendarContainer, null, /*#__PURE__*/React__default.createElement(Navigation, null, /*#__PURE__*/React__default.createElement(Select, {
    options: nextMonthOptions,
    value: endDate === null || endDate === void 0 ? void 0 : endDate.getMonth(),
    onChange: onChangeNextMonth,
    "data-test-id": "second-month-select"
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: yearOptions,
    value: nextYear,
    onChange: onChangeNextYear,
    "data-test-id": "second-year-select"
  })), /*#__PURE__*/React__default.createElement(SingleMonthCalendar, {
    minDate: minDate,
    maxDate: maxDate,
    isSettingEndDate: isSettingEndDate,
    dateClickCount: dateClickCount,
    startDate: startDate,
    endDate: endDate,
    tempDate: tempDate,
    isSettingStartDate: isSettingStartDate,
    onMonthClick: onMonthClick,
    onMouseOverDay: onMouseOverDay,
    selectedYear: nextYear
  }))));
};
var DoubleMonthCalendar$1 = DoubleMonthCalendar;

var Calendar = function Calendar(_ref) {
  var selectedDate = _ref.selectedDate,
    onSelectDate = _ref.onSelectDate,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate;
  var currentDate = new Date();
  var initialDate = selectedDate !== undefined ? selectedDate : currentDate;
  var _useState = useState(initialDate),
    _useState2 = _slicedToArray(_useState, 2),
    date = _useState2[0],
    setDate = _useState2[1];
  var month = getMonth(date);
  var year = getYear(date);
  var calendarMinDate = minDate !== undefined ? minDate : subYears(100, currentDate);
  var calendarMaxDate = maxDate !== undefined ? maxDate : addYears(100, currentDate);
  var yearOptions = generateYearOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate
  });
  var monthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year: year
  });
  var _disableMonthsNavigat = disableMonthsNavigation(date, calendarMinDate, calendarMaxDate),
    disabledPreviousMonth = _disableMonthsNavigat.disabledPreviousMonth,
    disabledNextMonth = _disableMonthsNavigat.disabledNextMonth;
  var disabledNextYear = disableYear(year + 1, yearOptions);
  var disabledPreviousYear = disableYear(year - 1, yearOptions);
  var onChangeMonth = useCallback(function (newMonth) {
    setDate(setMonth(newMonth, date));
  }, [date, setDate]);
  var onChangeYear = useCallback(function (newYear) {
    setDate(setYear(newYear, date));
  }, [date, setDate]);
  useEffect(function () {
    setDate(selectedDate !== undefined ? selectedDate : new Date());
  }, [selectedDate, setDate]);
  var monthMatrix = getMonthMatrix({
    month: month,
    year: year,
    minDate: calendarMinDate,
    maxDate: calendarMaxDate
  });
  var onDoubleNavigationClick = useCallback(function (_ref2) {
    var isMoveBack = _ref2.isMoveBack;
    var newDate = isMoveBack ? subYears(1, date) : addYears(1, date);
    setDate(newDate);
  }, [date, setDate]);
  var onNavigationClick = useCallback(function (_ref3) {
    var isMoveBack = _ref3.isMoveBack;
    var newDate = isMoveBack ? subMonths(1, date) : addMonths(1, date);
    setDate(newDate);
  }, [date, setDate]);
  return /*#__PURE__*/React__default.createElement(Container, null, /*#__PURE__*/React__default.createElement(Navigation, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "double-left-arrows",
    intent: "primary",
    onClick: function onClick() {
      return onDoubleNavigationClick({
        isMoveBack: true
      });
    },
    sx: {
      mr: 'small'
    },
    "data-test-id": "sub-year",
    disabled: disabledPreviousYear
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "single-left-arrow",
    intent: "primary",
    onClick: function onClick() {
      return onNavigationClick({
        isMoveBack: true
      });
    },
    disabled: disabledPreviousMonth,
    "data-test-id": "sub-month",
    sx: {
      mr: 'small'
    }
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: monthOptions,
    value: month,
    onChange: onChangeMonth,
    "data-test-id": "month-select"
  }), /*#__PURE__*/React__default.createElement(Select, {
    options: yearOptions,
    value: year,
    onChange: onChangeYear,
    "data-test-id": "year-select"
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "single-right-arrow",
    intent: "primary",
    onClick: function onClick() {
      return onNavigationClick({
        isMoveBack: false
      });
    },
    disabled: disabledNextMonth,
    sx: {
      mr: 'small',
      ml: 'small'
    },
    "data-test-id": "add-month"
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    size: "small",
    icon: "double-right-arrows",
    intent: "primary",
    disabled: disabledNextYear,
    onClick: function onClick() {
      return onDoubleNavigationClick({
        isMoveBack: false
      });
    },
    "data-test-id": "add-year"
  })), /*#__PURE__*/React__default.createElement(CalendarWrapper, null, /*#__PURE__*/React__default.createElement(CalendarRow, null, getWeekDays().map(function (day) {
    return /*#__PURE__*/React__default.createElement(DayWrapper, {
      key: day
    }, /*#__PURE__*/React__default.createElement(Day, {
      themeState: "dayLabel"
    }, day));
  })), monthMatrix.map(function (week, weekNumber) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React__default.createElement(CalendarRow, {
        key: weekNumber
      }, week.map(function (dateOfWeek) {
        var day = getDate(dateOfWeek.date);
        var onDateClick = function onDateClick(e, clickedDate) {
          if (onSelectDate !== undefined) {
            onSelectDate(clickedDate);
          }
          e.preventDefault();
        };
        var dateState = getSingleCalendarDayState({
          dateOfWeek: dateOfWeek,
          selectedDate: selectedDate
        });
        return (
          /*#__PURE__*/
          // eslint-disable-next-line react/no-array-index-key
          React__default.createElement(DayWrapper, {
            key: "".concat(weekNumber, "-").concat(day)
          }, /*#__PURE__*/React__default.createElement(Day, {
            themeState: dateState,
            onClick: dateState !== 'disabled' ? function (e) {
              return onDateClick(e, dateOfWeek.date);
            } : undefined
          }, day))
        );
      }))
    );
  })));
};
Calendar.Double = DoubleCalendar$1;
Calendar.Month = MonthCalendar$1;
Calendar.Week = WeekCalendar$1;
Calendar.DoubleMonth = DoubleMonthCalendar$1;
var Calendar$1 = Calendar;

var DatePickerContainer = styled.div.withConfig({
  displayName: "StyledDatePicker__DatePickerContainer",
  componentId: "sc-1g0i5ro-0"
})(["&&{margin:0;padding:0;}&&:focus{outline:none;}&& > ", "{display:block;}"], DropdownWrapper);
var DateRangeInputWrapper = styled(DatePickerContainer).withConfig({
  displayName: "StyledDatePicker__DateRangeInputWrapper",
  componentId: "sc-1g0i5ro-1"
})(["&&{display:flex;position:relative;align-items:center;border:", " solid ", ";border-radius:", ";}&& > ", "{flex:1 1;width:0;border:none;box-shadow:none;}&&{", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.datePicker.borderWidths.range;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.datePicker.colors.rangeBorder;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.datePicker.radii.range;
}, InputWrapper, function (_ref4) {
  var themeState = _ref4.themeState,
    theme = _ref4.theme;
  switch (themeState) {
    case 'invalid':
      return css$2(["border-color:", ";&:focus-within{outline:none;border-color:", ";box-shadow:", ";}"], theme.__hd__.datePicker.colors.invalidBorder, theme.__hd__.datePicker.colors.invalidBorder, theme.__hd__.datePicker.shadows.invalidFocus);
    case 'enabled':
      return css$2(["&:focus-within{border-color:", ";box-shadow:", ";}"], theme.__hd__.datePicker.colors.rangeFocusBorder, theme.__hd__.datePicker.shadows.range);
  }
});
var DateSeparator = styled.span.withConfig({
  displayName: "StyledDatePicker__DateSeparator",
  componentId: "sc-1g0i5ro-2"
})(["&&{margin:0;padding:0;color:", ";}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.datePicker.colors.text;
});
var FocusBar = styled.div.withConfig({
  displayName: "StyledDatePicker__FocusBar",
  componentId: "sc-1g0i5ro-3"
})(["&&{position:absolute;margin:0;padding:0;bottom:0;height:", ";", ";transition:width 0.3s,left 0.3s,right 0.3s;}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.datePicker.sizes.rangeFocusBar;
}, function (_ref7) {
  var themeState = _ref7.themeState,
    theme = _ref7.theme;
  switch (themeState) {
    case 'invalid':
      return css$2(["background:", ";"], theme.__hd__.datePicker.colors.invalidRangeFocusBar);
    case 'enabled':
      return css$2(["background:", ";"], theme.__hd__.datePicker.colors.rangeFocusBar);
  }
});

var DEFAULT_DATE_FORMAT = 'dd/MM/yyyy';
var DatePicker = function DatePicker(_ref) {
  var autoComplete = _ref.autoComplete,
    value = _ref.value,
    onChange = _ref.onChange,
    onBlur = _ref.onBlur,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$invalid = _ref.invalid,
    invalid = _ref$invalid === void 0 ? false : _ref$invalid,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$format = _ref.format,
    format = _ref$format === void 0 ? 'dd/MM/yyyy' : _ref$format,
    readonly = _ref.readonly,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedDate = _useState4[0],
    setSelectedDate = _useState4[1];
  var isValidDate = isValid(selectedDate);
  var dateFormat = format !== undefined ? format : DEFAULT_DATE_FORMAT;
  var openCalendar = useCallback(function () {
    return setOpen(true);
  }, [setOpen]);
  var closeCalendar = useCallback(function () {
    return setOpen(false);
  }, [setOpen]);
  var onSelectDate = useCallback(function (newDate) {
    if (onChange !== undefined) {
      var formattedDate = formatTime(dateFormat, newDate);
      onChange(formattedDate);
    }
    closeCalendar();
  }, [dateFormat, onChange, closeCalendar]);
  var onInputChange = useCallback(function (e) {
    var target = e.target;
    if (target.value !== undefined && onChange !== undefined) {
      onChange(target.value);
    }
  }, [onChange]);
  useEffect(function () {
    setSelectedDate(parse(new Date(), dateFormat, value !== undefined ? value : ''));
  }, [dateFormat, setSelectedDate, value]);
  var dateInput = /*#__PURE__*/React__default.createElement(Input, {
    suffix: "calendar",
    value: value !== undefined ? value : '',
    placeholder: placeholder === undefined ? format : placeholder,
    size: size,
    invalid: invalid,
    prefix: prefix,
    disabled: disabled,
    readonly: readonly,
    onChange: onInputChange,
    onBlur: onBlur,
    onFocus: openCalendar,
    id: id,
    name: name,
    autoComplete: autoComplete
  });
  var calendar = /*#__PURE__*/React__default.createElement(Calendar$1, {
    selectedDate: isValidDate === true ? selectedDate : undefined,
    onSelectDate: onSelectDate,
    minDate: minDate,
    maxDate: maxDate
  });
  return /*#__PURE__*/React__default.createElement(DatePickerContainer, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: dateInput,
    content: calendar,
    open: open,
    onClose: closeCalendar,
    style: {
      minWidth: 'unset'
    }
  }));
};
var DatePicker$1 = DatePicker;

var focusInput = function focusInput(element) {
  return pipe(fromNullable(element), map$2(function (el) {
    return el.focus();
  }), getOrElse(noop$2));
};
var generateFocusBarStyle = function generateFocusBarStyle(inputElement) {
  var inputStyles = pipe(fromNullable(inputElement), map$2(function (input) {
    return getComputedStyle(input);
  }), getOrElse(function () {
    return {
      width: '0px',
      paddingLeft: '0px'
    };
  }));
  var inputOffsetLeft = pipe(fromNullable(inputElement), map$2(function (input) {
    return input.offsetLeft;
  }), getOrElse(function () {
    return 0;
  }));
  return {
    width: inputStyles.width,
    left: "calc(".concat(inputOffsetLeft, "px + ").concat(inputStyles.paddingLeft, ")")
  };
};
var getThemeState = function getThemeState(_ref) {
  var invalid = _ref.invalid;
  if (invalid) {
    return 'invalid';
  }
  return 'enabled';
};

var RemoveBtnIcon$1 = function RemoveBtnIcon(_ref) {
  var onChange = _ref.onChange;
  return /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "remove-icon",
    icon: "circle-cancel",
    intent: "subdued-text",
    onClick: function onClick() {
      onChange === null || onChange === void 0 ? void 0 : onChange({
        startDate: undefined,
        endDate: undefined
      });
    },
    style: {
      fontSize: 'inherit'
    }
  });
};
var DateRangePicker$1 = function DateRangePicker(_ref2) {
  var autoComplete = _ref2.autoComplete,
    value = _ref2.value,
    onBlur = _ref2.onBlur,
    onChange = _ref2.onChange,
    minDate = _ref2.minDate,
    maxDate = _ref2.maxDate,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 'medium' : _ref2$size,
    _ref2$invalid = _ref2.invalid,
    invalid = _ref2$invalid === void 0 ? false : _ref2$invalid,
    placeholder = _ref2.placeholder,
    prefix = _ref2.prefix,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
    _ref2$clearable = _ref2.clearable,
    clearable = _ref2$clearable === void 0 ? true : _ref2$clearable,
    _ref2$format = _ref2.format,
    format = _ref2$format === void 0 ? 'dd/MM/yyyy' : _ref2$format,
    name = _ref2.name,
    id = _ref2.id,
    className = _ref2.className,
    style = _ref2.style,
    _ref2$sx = _ref2.sx,
    sx = _ref2$sx === void 0 ? {} : _ref2$sx,
    dataTestId = _ref2['data-test-id'];
  var _useState = useState('none'),
    _useState2 = _slicedToArray(_useState, 2),
    focusingField = _useState2[0],
    setFocusingField = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    dateClickCount = _useState4[0],
    setDateClickCount = _useState4[1];
  var startDate = value !== undefined && value.startDate !== undefined ? parse(new Date(), format, value.startDate) : undefined;
  var endDate = value !== undefined && value.endDate !== undefined ? parse(new Date(), format, value.endDate) : undefined;
  var startDateInputRef = useRef(null);
  var endDateInputRef = useRef(null);
  var wrapperRef = useRef(null);
  var isHoveringWrapper = useHover(wrapperRef);
  var removeShown = clearable === true && isHoveringWrapper && ((value === null || value === void 0 ? void 0 : value.startDate) !== undefined || (value === null || value === void 0 ? void 0 : value.endDate) !== undefined);
  var closeCalendar = useCallback(function () {
    setFocusingField('none');
  }, [setFocusingField]);
  var onFocusStartDateInput = useCallback(function () {
    setFocusingField('startDate');
  }, [setFocusingField]);
  var onFocusEndDateInput = useCallback(function () {
    setFocusingField('endDate');
  }, [setFocusingField]);
  var resetDateClickCount = useCallback(function () {
    setDateClickCount(0);
  }, [setDateClickCount]);
  var focusInputIfNeeded = useCallback(function (element) {
    if (dateClickCount + 1 < 2) focusInput(element);
  }, [dateClickCount]);
  var onSelectDate = useCallback(function (date) {
    switch (focusingField) {
      case 'startDate':
        if (endDate === undefined || isAfter(endDate, date)) {
          onChange === null || onChange === void 0 ? void 0 : onChange({
            startDate: formatTime(format, date),
            endDate: undefined
          });
          focusInput(endDateInputRef.current);
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange({
            startDate: formatTime(format, date),
            endDate: formatTime(format, endDate)
          });
          focusInputIfNeeded(endDateInputRef.current);
        }
        break;
      case 'endDate':
        if (startDate === undefined || isBefore(startDate, date)) {
          onChange === null || onChange === void 0 ? void 0 : onChange({
            startDate: undefined,
            endDate: formatTime(format, date)
          });
          focusInput(startDateInputRef.current);
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange({
            startDate: formatTime(format, startDate),
            endDate: formatTime(format, date)
          });
          focusInputIfNeeded(startDateInputRef.current);
        }
        break;
    }
    setDateClickCount(dateClickCount + 1);
  }, [focusingField, dateClickCount, endDate, startDate, onChange, format, focusInputIfNeeded]);
  useEffect(function () {
    if (dateClickCount === 2) {
      closeCalendar();
    }
  }, [dateClickCount, closeCalendar]);
  var maybeId = fromUndefinedable(id);
  var maybeName = fromUndefinedable(name);
  var maybeStartDate = fromUndefinedable(startDate);
  var maybeEndDate = fromUndefinedable(endDate);
  var maybePlaceholder = fromUndefinedable(placeholder);
  var focusBarStyle = useMemo(function () {
    switch (focusingField) {
      case 'none':
        return {};
      case 'startDate':
        return generateFocusBarStyle(startDateInputRef.current);
      case 'endDate':
        return generateFocusBarStyle(endDateInputRef.current);
    }
  }, [focusingField]);
  var isCalendarOpening = useMemo(function () {
    switch (focusingField) {
      case 'none':
        return false;
      case 'startDate':
        return true;
      case 'endDate':
        return true;
    }
  }, [focusingField]);
  var dateInputs = /*#__PURE__*/React__default.createElement(DateRangeInputWrapper, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    ref: wrapperRef,
    themeState: getThemeState({
      invalid: invalid
    })
  }, /*#__PURE__*/React__default.createElement(Input, {
    prefix: prefix,
    suffix: /*#__PURE__*/React__default.createElement(DateSeparator, null, "-"),
    onFocus: onFocusStartDateInput,
    onBlur: onBlur,
    onClick: resetDateClickCount,
    size: size,
    invalid: invalid,
    disabled: disabled,
    ref: startDateInputRef,
    readonly: true,
    placeholder: pipe(maybePlaceholder, map$2(function (obj) {
      return obj.startDate;
    }), getOrElse(function () {
      return format;
    })),
    value: pipe(maybeStartDate, map$2(formatTime(format)), getOrElse(function () {
      return '';
    })),
    id: pipe(maybeId, map$2(function (obj) {
      return obj.startDate;
    }), getOrElse(function () {
      return undefined;
    })),
    name: pipe(maybeName, map$2(function (obj) {
      return obj.startDate;
    }), getOrElse(function () {
      return undefined;
    })),
    autoComplete: autoComplete
  }), /*#__PURE__*/React__default.createElement(Input, {
    suffix: removeShown ? /*#__PURE__*/React__default.createElement(RemoveBtnIcon$1, {
      onChange: onChange
    }) : 'calendar',
    onFocus: onFocusEndDateInput,
    onBlur: onBlur,
    onClick: resetDateClickCount,
    size: size,
    invalid: invalid,
    disabled: disabled,
    ref: endDateInputRef,
    readonly: true,
    placeholder: pipe(maybePlaceholder, map$2(function (obj) {
      return obj.endDate;
    }), getOrElse(function () {
      return format;
    })),
    value: pipe(maybeEndDate, map$2(formatTime(format)), getOrElse(function () {
      return '';
    })),
    id: pipe(maybeId, map$2(function (obj) {
      return obj.endDate;
    }), getOrElse(function () {
      return undefined;
    })),
    name: pipe(maybeName, map$2(function (obj) {
      return obj.endDate;
    }), getOrElse(function () {
      return undefined;
    })),
    autoComplete: autoComplete
  }), /*#__PURE__*/React__default.createElement(FocusBar, {
    style: focusBarStyle,
    themeState: getThemeState({
      invalid: invalid
    })
  }));
  var calendar = /*#__PURE__*/React__default.createElement(Calendar$1.Double, {
    startDate: startDate,
    endDate: endDate,
    minDate: minDate,
    maxDate: maxDate,
    onSelectDate: onSelectDate,
    isSettingStartDate: focusingField === 'startDate',
    isSettingEndDate: focusingField === 'endDate',
    dateClickCount: dateClickCount
  });
  return /*#__PURE__*/React__default.createElement(DatePickerContainer, null, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: dateInputs,
    content: calendar,
    open: isCalendarOpening,
    onClose: closeCalendar,
    style: {
      minWidth: 'unset'
    }
  }));
};
var DateRangePicker$2 = DateRangePicker$1;

var DEFAULT_MONTH_FORMAT = 'MM/yyyy';
var MonthPicker = function MonthPicker(_ref) {
  var autoComplete = _ref.autoComplete,
    value = _ref.value,
    onChange = _ref.onChange,
    onBlur = _ref.onBlur,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$invalid = _ref.invalid,
    invalid = _ref$invalid === void 0 ? false : _ref$invalid,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$format = _ref.format,
    format = _ref$format === void 0 ? DEFAULT_MONTH_FORMAT : _ref$format,
    readonly = _ref.readonly,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedMonth = _useState4[0],
    setSelectedMonth = _useState4[1];
  var isValidMonth = isValid(selectedMonth);
  var dateFormat = format !== undefined ? format : DEFAULT_MONTH_FORMAT;
  var openCalendar = useCallback(function () {
    return setOpen(true);
  }, [setOpen]);
  var closeCalendar = useCallback(function () {
    return setOpen(false);
  }, [setOpen]);
  var onSelectMonth = useCallback(function (newDate) {
    if (onChange !== undefined) {
      var formattedDate = formatTime(dateFormat, newDate);
      onChange(formattedDate);
    }
    closeCalendar();
  }, [dateFormat, onChange, closeCalendar]);
  var onInputChange = useCallback(function (e) {
    var target = e.target;
    if (target.value !== undefined && onChange !== undefined) {
      onChange(target.value);
    }
  }, [onChange]);
  useEffect(function () {
    setSelectedMonth(parse(new Date(), dateFormat, value !== undefined ? value : ''));
  }, [dateFormat, setSelectedMonth, value]);
  var dateInput = /*#__PURE__*/React__default.createElement(Input, {
    suffix: "calendar",
    value: value !== undefined ? value : '',
    placeholder: placeholder === undefined ? format : placeholder,
    size: size,
    invalid: invalid,
    prefix: prefix,
    disabled: disabled,
    readonly: readonly,
    onChange: onInputChange,
    onFocus: openCalendar,
    onBlur: onBlur,
    id: id,
    name: name,
    autoComplete: autoComplete
  });
  var calendar = /*#__PURE__*/React__default.createElement(Calendar$1.Month, {
    maxDate: maxDate,
    minDate: minDate,
    onSelectMonth: onSelectMonth,
    selectedMonth: isValidMonth === true ? selectedMonth : undefined
  });
  return /*#__PURE__*/React__default.createElement(DatePickerContainer, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: dateInput,
    content: calendar,
    open: open,
    onClose: closeCalendar,
    style: {
      minWidth: 'unset'
    }
  }));
};
var MonthPicker$1 = MonthPicker;

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var parseWithOptions = convertToFP(parse$1, 4);

// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.
var formatDateWithOptions = convertToFP(format$1, 3);

var WeekPicker = function WeekPicker(_ref) {
  var autoComplete = _ref.autoComplete,
    value = _ref.value,
    onChange = _ref.onChange,
    onBlur = _ref.onBlur,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$invalid = _ref.invalid,
    invalid = _ref$invalid === void 0 ? false : _ref$invalid,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$format = _ref.format,
    format = _ref$format === void 0 ? "'Week' ww', 'YYYY" : _ref$format,
    readonly = _ref.readonly,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    _ref$weekStartsOn = _ref.weekStartsOn,
    weekStartsOn = _ref$weekStartsOn === void 0 ? 0 : _ref$weekStartsOn;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedFirstDateOfWeek = _useState4[0],
    setSelectedFirstDateOfWeek = _useState4[1];
  var isValidDate = isValid(selectedFirstDateOfWeek);
  var openCalendar = useCallback(function () {
    return setOpen(true);
  }, [setOpen]);
  var closeCalendar = useCallback(function () {
    return setOpen(false);
  }, [setOpen]);
  var onSelectFirstDateOfWeek = useCallback(function (newDate) {
    if (onChange !== undefined) {
      var formattedDate = formatDateWithOptions({
        useAdditionalWeekYearTokens: true,
        weekStartsOn: weekStartsOn
      }, format, newDate);
      onChange(formattedDate);
    }
    closeCalendar();
  }, [onChange, closeCalendar, weekStartsOn, format]);
  var onInputChange = useCallback(function (e) {
    var target = e.target;
    if (target.value !== undefined && onChange !== undefined) {
      onChange(target.value);
    }
  }, [onChange]);
  useEffect(function () {
    setSelectedFirstDateOfWeek(parseWithOptions({
      useAdditionalWeekYearTokens: true,
      weekStartsOn: weekStartsOn
    }, new Date(), format, value !== undefined ? value : ''));
  }, [format, setSelectedFirstDateOfWeek, value, weekStartsOn]);
  var dateInput = /*#__PURE__*/React__default.createElement(Input, {
    suffix: "calendar",
    value: value !== undefined ? value : '',
    placeholder: placeholder === undefined ? format : placeholder,
    size: size,
    invalid: invalid,
    prefix: prefix,
    disabled: disabled,
    readonly: readonly,
    onChange: onInputChange,
    onBlur: onBlur,
    onFocus: openCalendar,
    id: id,
    name: name,
    autoComplete: autoComplete
  });
  var calendar = /*#__PURE__*/React__default.createElement(Calendar$1.Week, {
    selectedFirstDateOfWeek: isValidDate === true ? selectedFirstDateOfWeek : undefined,
    onSelectFirstDateOfWeek: onSelectFirstDateOfWeek,
    weekStartsOn: weekStartsOn
  });
  return /*#__PURE__*/React__default.createElement(DatePickerContainer, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: dateInput,
    content: calendar,
    open: open,
    onClose: closeCalendar,
    style: {
      minWidth: 'unset'
    }
  }));
};
var WeekPicker$1 = WeekPicker;

var RemoveBtnIcon = function RemoveBtnIcon(_ref) {
  var onChange = _ref.onChange;
  return /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "remove-icon",
    icon: "circle-cancel",
    intent: "subdued-text",
    onClick: function onClick() {
      onChange === null || onChange === void 0 ? void 0 : onChange({
        startDate: undefined,
        endDate: undefined
      });
    },
    style: {
      fontSize: 'inherit'
    }
  });
};
var DateRangePicker = function DateRangePicker(_ref2) {
  var autoComplete = _ref2.autoComplete,
    value = _ref2.value,
    onBlur = _ref2.onBlur,
    onChange = _ref2.onChange,
    minDate = _ref2.minDate,
    maxDate = _ref2.maxDate,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 'medium' : _ref2$size,
    _ref2$invalid = _ref2.invalid,
    invalid = _ref2$invalid === void 0 ? false : _ref2$invalid,
    placeholder = _ref2.placeholder,
    prefix = _ref2.prefix,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
    _ref2$clearable = _ref2.clearable,
    clearable = _ref2$clearable === void 0 ? true : _ref2$clearable,
    _ref2$format = _ref2.format,
    format = _ref2$format === void 0 ? 'MM/yyyy' : _ref2$format,
    name = _ref2.name,
    id = _ref2.id,
    className = _ref2.className,
    style = _ref2.style,
    _ref2$sx = _ref2.sx,
    sx = _ref2$sx === void 0 ? {} : _ref2$sx,
    dataTestId = _ref2['data-test-id'];
  var _useState = useState('none'),
    _useState2 = _slicedToArray(_useState, 2),
    focusingField = _useState2[0],
    setFocusingField = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    dateClickCount = _useState4[0],
    setDateClickCount = _useState4[1];
  var startDate = value !== undefined && value.startDate !== undefined ? parse(new Date(), format, value.startDate) : undefined;
  var endDate = value !== undefined && value.endDate !== undefined ? parse(new Date(), format, value.endDate) : undefined;
  var startDateInputRef = useRef(null);
  var endDateInputRef = useRef(null);
  var wrapperRef = useRef(null);
  var isHoveringWrapper = useHover(wrapperRef);
  var removeShown = clearable === true && isHoveringWrapper && ((value === null || value === void 0 ? void 0 : value.startDate) !== undefined || (value === null || value === void 0 ? void 0 : value.endDate) !== undefined);
  var closeCalendar = useCallback(function () {
    setFocusingField('none');
  }, [setFocusingField]);
  var onFocusStartDateInput = useCallback(function () {
    setFocusingField('startDate');
  }, [setFocusingField]);
  var onFocusEndDateInput = useCallback(function () {
    setFocusingField('endDate');
  }, [setFocusingField]);
  var resetDateClickCount = useCallback(function () {
    setDateClickCount(0);
  }, [setDateClickCount]);
  var handleSelectStartDate = useCallback(function (date) {
    onChange === null || onChange === void 0 ? void 0 : onChange({
      startDate: formatTime(format, date),
      endDate: value === null || value === void 0 ? void 0 : value.endDate
    });
    setDateClickCount(function (prevDateClickCount) {
      if (!prevDateClickCount) {
        focusInput(endDateInputRef.current);
        return 1;
      }
      return 0;
    });
    focusInput(endDateInputRef.current);
    setDateClickCount(1);
  }, [format, onChange, value === null || value === void 0 ? void 0 : value.endDate]);
  var handleSelectEndDate = useCallback(function (date) {
    onChange === null || onChange === void 0 ? void 0 : onChange({
      startDate: value === null || value === void 0 ? void 0 : value.startDate,
      endDate: formatTime(format, date)
    });
    setDateClickCount(function (prevDateClickCount) {
      if (!prevDateClickCount) {
        focusInput(startDateInputRef.current);
        return 1;
      }
      return 0;
    });
  }, [format, onChange, value === null || value === void 0 ? void 0 : value.startDate]);
  var focusInputIfNeeded = useCallback(function (element) {
    if (dateClickCount + 1 < 2) focusInput(element);
  }, [dateClickCount]);
  var onSelectDate = useCallback(function (date) {
    if (onChange === undefined) return;
    switch (focusingField) {
      case 'startDate':
        if (endDate === undefined || isAfter(endDate, date)) {
          onChange({
            startDate: formatTime(format, date),
            endDate: undefined
          });
          focusInput(endDateInputRef.current);
        } else {
          onChange({
            startDate: formatTime(format, date),
            endDate: formatTime(format, endDate)
          });
          focusInputIfNeeded(endDateInputRef.current);
        }
        break;
      case 'endDate':
        if (startDate === undefined || isBefore(startDate, date)) {
          onChange({
            startDate: undefined,
            endDate: formatTime(format, date)
          });
          focusInput(startDateInputRef.current);
        } else {
          onChange({
            startDate: formatTime(format, startDate),
            endDate: formatTime(format, date)
          });
          focusInputIfNeeded(startDateInputRef.current);
        }
        break;
    }
    setDateClickCount(dateClickCount + 1);
  }, [onChange, focusingField, dateClickCount, endDate, startDate, format, focusInputIfNeeded]);
  useEffect(function () {
    if (dateClickCount === 2) {
      closeCalendar();
    }
  }, [dateClickCount, closeCalendar]);
  var maybeId = fromUndefinedable(id);
  var maybeName = fromUndefinedable(name);
  var maybeStartDate = fromUndefinedable(startDate);
  var maybeEndDate = fromUndefinedable(endDate);
  var maybePlaceholder = fromUndefinedable(placeholder);
  var focusBarStyle = useMemo(function () {
    switch (focusingField) {
      case 'none':
        return {};
      case 'startDate':
        return generateFocusBarStyle(startDateInputRef.current);
      case 'endDate':
        return generateFocusBarStyle(endDateInputRef.current);
    }
  }, [focusingField]);
  var isCalendarOpening = useMemo(function () {
    switch (focusingField) {
      case 'none':
        return false;
      case 'startDate':
        return true;
      case 'endDate':
        return true;
    }
  }, [focusingField]);
  var dateInputs = /*#__PURE__*/React__default.createElement(DateRangeInputWrapper, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    ref: wrapperRef,
    themeState: getThemeState({
      invalid: invalid
    })
  }, /*#__PURE__*/React__default.createElement(Input, {
    prefix: prefix,
    suffix: /*#__PURE__*/React__default.createElement(DateSeparator, null, "-"),
    onFocus: onFocusStartDateInput,
    onBlur: onBlur,
    onClick: resetDateClickCount,
    size: size,
    invalid: invalid,
    disabled: disabled,
    ref: startDateInputRef,
    readonly: true,
    placeholder: pipe(maybePlaceholder, map$2(function (obj) {
      return obj.startDate;
    }), getOrElse(function () {
      return format;
    })),
    value: pipe(maybeStartDate, map$2(formatTime(format)), getOrElse(function () {
      return '';
    })),
    id: pipe(maybeId, map$2(function (obj) {
      return obj.startDate;
    }), getOrElse(function () {
      return undefined;
    })),
    name: pipe(maybeName, map$2(function (obj) {
      return obj.startDate;
    }), getOrElse(function () {
      return undefined;
    })),
    autoComplete: autoComplete
  }), /*#__PURE__*/React__default.createElement(Input, {
    suffix: removeShown ? /*#__PURE__*/React__default.createElement(RemoveBtnIcon, {
      onChange: onChange
    }) : 'calendar',
    onFocus: onFocusEndDateInput,
    onBlur: onBlur,
    onClick: resetDateClickCount,
    size: size,
    invalid: invalid,
    disabled: disabled,
    ref: endDateInputRef,
    readonly: true,
    placeholder: pipe(maybePlaceholder, map$2(function (obj) {
      return obj.endDate;
    }), getOrElse(function () {
      return format;
    })),
    value: pipe(maybeEndDate, map$2(formatTime(format)), getOrElse(function () {
      return '';
    })),
    id: pipe(maybeId, map$2(function (obj) {
      return obj.endDate;
    }), getOrElse(function () {
      return undefined;
    })),
    name: pipe(maybeName, map$2(function (obj) {
      return obj.endDate;
    }), getOrElse(function () {
      return undefined;
    })),
    autoComplete: autoComplete
  }), /*#__PURE__*/React__default.createElement(FocusBar, {
    style: focusBarStyle,
    themeState: getThemeState({
      invalid: invalid
    })
  }));
  var calendar = /*#__PURE__*/React__default.createElement(Calendar$1.DoubleMonth, {
    startDate: startDate,
    endDate: endDate,
    minDate: minDate,
    maxDate: maxDate,
    onSelectDate: onSelectDate,
    isSettingStartDate: focusingField === 'startDate',
    isSettingEndDate: focusingField === 'endDate',
    dateClickCount: dateClickCount,
    onSelectStartDate: handleSelectStartDate,
    onSelectEndDate: handleSelectEndDate
  });
  return /*#__PURE__*/React__default.createElement(DatePickerContainer, null, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: dateInputs,
    content: calendar,
    open: isCalendarOpening,
    onClose: closeCalendar,
    style: {
      minWidth: 'unset'
    }
  }));
};
var MonthRangePicker = DateRangePicker;

function generateWeekTime(minDate, maxDate) {
  var customFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'dd MMM yyyy';
  var weekStartsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var result = eachWeekOfInterval({
    start: startOfWeek(addDays$1(minDate, 6), {
      weekStartsOn: weekStartsOn
    }),
    end: endOfWeek(subDays$1(maxDate, 6), {
      weekStartsOn: weekStartsOn
    })
  }, {
    weekStartsOn: weekStartsOn
  });
  return result.map(function (date) {
    return format$1(date, customFormat, {
      weekStartsOn: weekStartsOn
    });
  });
}
function generateFortnightlyTime(minDate, maxDate) {
  var customFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'dd MMM yyyy';
  var weekStartsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var weekTime = generateWeekTime(minDate, maxDate, customFormat, weekStartsOn);
  return (weekTime.length % 2 === 1 ? weekTime.slice(0, -1) : weekTime).filter(function (_, i) {
    return i % 2 === 0;
  });
}

var StyledFortnightlyPicker = styled(Select$2).withConfig({
  displayName: "StyledFortnightlyPicker",
  componentId: "sc-1s6s218-0"
})(["&&{width:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.datePicker.sizes.fortnightlyWidth;
});

var FortnightlyPicker = function FortnightlyPicker(_ref) {
  var autoComplete = _ref.autoComplete,
    value = _ref.value,
    onChange = _ref.onChange,
    onBlur = _ref.onBlur,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$invalid = _ref.invalid,
    invalid = _ref$invalid === void 0 ? false : _ref$invalid,
    _ref$placeholder = _ref.placeholder,
    placeholder = _ref$placeholder === void 0 ? 'Select date' : _ref$placeholder,
    prefix = _ref.prefix,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$format = _ref.format,
    format = _ref$format === void 0 ? 'dd MMM yyyy' : _ref$format,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? {} : _ref$style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    _ref$weekStartsOn = _ref.weekStartsOn,
    weekStartsOn = _ref$weekStartsOn === void 0 ? 0 : _ref$weekStartsOn;
  var options = useMemo(function () {
    return generateFortnightlyTime(minDate, maxDate, format, weekStartsOn).map(function (fortnightly) {
      return {
        value: fortnightly,
        text: fortnightly
      };
    });
  }, [format, maxDate, minDate]);
  var handleChange = useCallback(function (_value) {
    if (_value) {
      onChange === null || onChange === void 0 ? void 0 : onChange(_value);
    }
  }, [onChange]);
  return /*#__PURE__*/React__default.createElement(StyledFortnightlyPicker, {
    className: className,
    autoComplete: autoComplete,
    name: name,
    placeholder: placeholder,
    disabled: disabled,
    size: size,
    value: value,
    options: options,
    onChange: handleChange,
    onBlur: onBlur,
    invalid: invalid,
    prefix: prefix,
    id: id,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), useCss(sx))
  });
};
var FortnightlyPicker$1 = FortnightlyPicker;

var generateMonths = function generateMonths(minMonth, maxMonth, monthFormat) {
  var defaultFormat = monthFormat !== null && monthFormat !== void 0 ? monthFormat : 'LLL';
  var months = Array.from(Array(12)).map(function (_, month) {
    return formatTime(defaultFormat, new Date(2024, month));
  });
  return months.map(function (month, index) {
    return {
      text: month,
      value: index,
      disabled: index < minMonth || index > maxMonth
    };
  });
};

var StyledSingleSelect = styled(Select$2).withConfig({
  displayName: "StyledSingle__StyledSingleSelect",
  componentId: "sc-16gw8vl-0"
})(["&&{width:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.datePicker.sizes.singleSelectWidth;
});

var SingleMonth = function SingleMonth(_ref) {
  var autoComplete = _ref.autoComplete,
    className = _ref.className,
    disabled = _ref.disabled,
    invalid = _ref.invalid,
    id = _ref.id,
    name = _ref.name,
    onBlur = _ref.onBlur,
    onChange = _ref.onChange,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    size = _ref.size,
    style = _ref.style,
    sx = _ref.sx,
    value = _ref.value,
    _ref$maxMonth = _ref.maxMonth,
    maxMonth = _ref$maxMonth === void 0 ? 11 : _ref$maxMonth,
    _ref$minMonth = _ref.minMonth,
    minMonth = _ref$minMonth === void 0 ? 0 : _ref$minMonth,
    _ref$format = _ref.format,
    format = _ref$format === void 0 ? 'LLLL' : _ref$format,
    dataTestId = _ref['data-test-id'];
  var handleChange = useCallback(function (_value) {
    onChange === null || onChange === void 0 ? void 0 : onChange(_value);
  }, [onChange]);
  var options = useMemo(function () {
    return generateMonths(minMonth, maxMonth, format);
  }, [format, maxMonth, minMonth]);
  return /*#__PURE__*/React__default.createElement(StyledSingleSelect, {
    autoComplete: autoComplete,
    className: className,
    disabled: disabled,
    invalid: invalid,
    id: id,
    name: name,
    onBlur: onBlur,
    options: options,
    onChange: handleChange,
    placeholder: placeholder,
    prefix: prefix,
    size: size,
    style: style,
    sx: sx,
    value: value,
    "data-test-id": dataTestId
  });
};
var SingleMonth$1 = SingleMonth;

var DEFAULT_GAP = 100;
var SingleYear = function SingleYear(_ref) {
  var autoComplete = _ref.autoComplete,
    className = _ref.className,
    disabled = _ref.disabled,
    invalid = _ref.invalid,
    id = _ref.id,
    name = _ref.name,
    onBlur = _ref.onBlur,
    onChange = _ref.onChange,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    size = _ref.size,
    style = _ref.style,
    sx = _ref.sx,
    value = _ref.value,
    minYear = _ref.minYear,
    maxYear = _ref.maxYear,
    dataTestId = _ref['data-test-id'];
  var currentDate = useMemo(function () {
    return new Date();
  }, []);
  var defaultMinYear = useMemo(function () {
    return minYear ? new Date(minYear, 1, 1) : subYears(DEFAULT_GAP, currentDate);
  }, [currentDate, minYear]);
  var defaultMaxYear = useMemo(function () {
    return maxYear ? new Date(maxYear, 1, 1) : addYears(DEFAULT_GAP, currentDate);
  }, [currentDate, maxYear]);
  var handleChange = useCallback(function (_value) {
    if (_value) {
      onChange === null || onChange === void 0 ? void 0 : onChange(_value);
    }
  }, [onChange]);
  var options = useMemo(function () {
    return generateYearOptions({
      minDate: defaultMinYear,
      maxDate: defaultMaxYear
    });
  }, [defaultMaxYear, defaultMinYear]);
  return /*#__PURE__*/React__default.createElement(StyledSingleSelect, {
    autoComplete: autoComplete,
    className: className,
    disabled: disabled,
    invalid: invalid,
    id: id,
    name: name,
    onBlur: onBlur,
    options: options,
    onChange: handleChange,
    placeholder: placeholder,
    prefix: prefix,
    size: size,
    style: style,
    sx: sx,
    value: value,
    "data-test-id": dataTestId
  });
};
var SingleYear$1 = SingleYear;

var CompoundDatePicker = DatePicker$1;
CompoundDatePicker.Month = MonthPicker$1;
CompoundDatePicker.Week = WeekPicker$1;
CompoundDatePicker.Range = DateRangePicker$2;
CompoundDatePicker.MonthRange = MonthRangePicker;
CompoundDatePicker.Fortnightly = FortnightlyPicker$1;
CompoundDatePicker.SingleMonth = SingleMonth$1;
CompoundDatePicker.SingleYear = SingleYear$1;
var CompoundDatePicker$1 = CompoundDatePicker;

var _g$4;
function _extends$4() { _extends$4 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }
var SvgEmpty = function SvgEmpty(props) {
  return /*#__PURE__*/React.createElement("svg", _extends$4({
    xmlns: "http://www.w3.org/2000/svg",
    width: 146,
    height: 87
  }, props), _g$4 || (_g$4 = /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("g", {
    fill: "#EDECEC",
    opacity: 0.4
  }, /*#__PURE__*/React.createElement("path", {
    d: "M106 0c21.54 0 39 17.237 39 38.5 0 5.01-.97 9.797-2.734 14.188A18.911 18.911 0 0 1 146 64c0 10.493-8.507 19-19 19H19C8.507 83 0 74.493 0 64c0-8.29 5.309-15.34 12.712-17.935A28.08 28.08 0 0 1 10 34C10 17.984 23.431 5 40 5c5.821 0 11.255 1.603 15.855 4.376C58.731 3.816 64.657 0 71.5 0c5.394 0 10.218 2.37 13.428 6.098C91.004 2.238 98.238 0 106 0z"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M83 23a12.99 12.99 0 0 0-11.114 6.253A29.732 29.732 0 0 0 56.5 25C40.208 25 27 37.984 27 54c0 3.853.765 7.531 2.153 10.895A14.426 14.426 0 0 0 27 72.5C27 80.508 33.492 87 41.5 87h82c8.008 0 14.5-6.492 14.5-14.5 0-6.72-4.57-12.371-10.772-14.016A21.11 21.11 0 0 0 129 50c0-12.15-10.297-22-23-22-4.03 0-7.818.992-11.112 2.733C92.868 26.178 88.305 23 83 23z"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#C7EBF9",
    fillRule: "nonzero",
    d: "M70.723 79.729c.259.203.518.271.777.271.26 0 .583-.068.777-.271C73.443 78.78 100 56.34 100 39.874 100 30.59 92.745 23 83.872 23c-3.125 0-7.138 1.923-12.039 5.768a.54.54 0 0 1-.666 0C66.266 24.923 62.253 23 59.128 23 50.255 23 43 30.59 43 39.874c0 16.467 26.557 38.906 27.723 39.855z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#85D6F5",
    fillRule: "nonzero",
    d: "m91.152 85.498.337-.224c2.479-1.646 3.819-2.601 5.134-3.71 1.764-1.488 3.11-3.003 4.17-4.775 2.182-3.647 3.089-8.298 3.107-15.537v-.237a3.057 3.057 0 0 0-2.067-2.864c-3.946-1.355-7.526-3.262-10.5-5.523l-.033-.024a3.097 3.097 0 0 0-1.952-.602l-.022.001a3.092 3.092 0 0 0-1.698.596l-.04.03c-2.96 2.25-6.561 4.162-10.518 5.521A3.058 3.058 0 0 0 75 61.015v.017c0 7.365.903 12.073 3.108 15.757 1.06 1.772 2.405 3.287 4.17 4.775l.082.069c1.289 1.08 2.624 2.03 5.05 3.641l.303.201a3.098 3.098 0 0 0 1.685.525h.062c.601 0 1.189-.174 1.692-.502z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    d: "M89.529 61a1.4 1.4 0 0 1 1.4 1.4l-.001 4.671H95.6a1.4 1.4 0 0 1 1.4 1.4v.058a1.4 1.4 0 0 1-1.4 1.4l-4.672-.001V74.6a1.4 1.4 0 0 1-1.4 1.4h-.057a1.4 1.4 0 0 1-1.4-1.4v-4.672H83.4a1.4 1.4 0 0 1-1.4-1.4v-.057a1.4 1.4 0 0 1 1.4-1.4h4.671V62.4a1.4 1.4 0 0 1 1.4-1.4h.058z"
  }), /*#__PURE__*/React.createElement("path", {
    stroke: "#FFF",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 3,
    d: "M63 31.412c-4.457-2.941-8.29-2.079-11.5 2.588"
  }))));
};
var SvgEmpty$1 = SvgEmpty;

var EmptyWrapper = styled.div.withConfig({
  displayName: "StyledEmpty__EmptyWrapper",
  componentId: "sc-mvthr3-0"
})(["&&{display:flex;flex-direction:column;align-items:center;justify-content:center;margin:0;padding:0;}"]);
var EmptyContentWrapper = styled.div.withConfig({
  displayName: "StyledEmpty__EmptyContentWrapper",
  componentId: "sc-mvthr3-1"
})(["&&{display:flex;flex-direction:column;align-items:center;justify-content:center;margin:0;padding:", ";}@media (min-width:", "){&&{", "}}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.empty.space.wrapperPadding;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.breakpoints.medium;
}, function (_ref3) {
  var themeSize = _ref3.themeSize,
    theme = _ref3.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["max-width:", ";"], theme.__hd__.empty.sizes.wrapperSmallMaxWidth);
    case 'medium':
      return css$2(["max-width:", ";"], theme.__hd__.empty.sizes.wrapperMediumMaxWidth);
  }
});
var EmptyImg = styled.img.withConfig({
  displayName: "StyledEmpty__EmptyImg",
  componentId: "sc-mvthr3-2"
})(["&&{margin:0;padding:0;}"]);
var EmptyDescriptionWrapper = styled.div.withConfig({
  displayName: "StyledEmpty__EmptyDescriptionWrapper",
  componentId: "sc-mvthr3-3"
})(["&&{display:flex;justify-content:center;text-align:center;color:", ";font-size:", ";line-height:", ";margin:0;}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.empty.colors.text;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.empty.fontSizes.text;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.empty.lineHeights.text;
});
var EmptyTitleWrapper = styled.div.withConfig({
  displayName: "StyledEmpty__EmptyTitleWrapper",
  componentId: "sc-mvthr3-4"
})(["&&{display:flex;justify-content:center;text-align:center;color:", ";font-size:", ";line-height:", ";font-weight:", ";margin:0;margin-bottom:", ";}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.empty.colors.text;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.empty.fontSizes.title;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.empty.lineHeights.title;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.empty.fontWeights.title;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.empty.space.titleBottomMargin;
});
var EmptyExtraWrapper = styled.div.withConfig({
  displayName: "StyledEmpty__EmptyExtraWrapper",
  componentId: "sc-mvthr3-5"
})(["&&{margin:0;padding:0;margin-top:", ";}"], function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.empty.space.extraMarginTop;
});
var EmptyTextGroupWrapper = styled.div.withConfig({
  displayName: "StyledEmpty__EmptyTextGroupWrapper",
  componentId: "sc-mvthr3-6"
})(["&&{margin:0;padding:0;margin-top:", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.empty.space.textGroupMarginTop;
});

var Empty = function Empty(_ref) {
  var imageSrc = _ref.imageSrc,
    text = _ref.text,
    title = _ref.title,
    extra = _ref.extra,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(EmptyWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(EmptyContentWrapper, {
    themeSize: size
  }, imageSrc ? /*#__PURE__*/React__default.createElement(EmptyImg, {
    src: imageSrc,
    alt: "empty-img"
  }) : /*#__PURE__*/React__default.createElement(SvgEmpty$1, null), /*#__PURE__*/React__default.createElement(EmptyTextGroupWrapper, null, title !== undefined && /*#__PURE__*/React__default.createElement(EmptyTitleWrapper, null, title), /*#__PURE__*/React__default.createElement(EmptyDescriptionWrapper, null, text)), /*#__PURE__*/React__default.isValidElement(extra) === true && /*#__PURE__*/React__default.createElement(EmptyExtraWrapper, null, extra)));
};
var Empty$1 = Empty;

var HiddenInput$1 = styled.input.withConfig({
  displayName: "StyledDragAndDrop__HiddenInput",
  componentId: "sc-5rdhvm-0"
})(["&&{display:none;}"]);
var DropzoneWrapper = styled.div.withConfig({
  displayName: "StyledDragAndDrop__DropzoneWrapper",
  componentId: "sc-5rdhvm-1"
})(["&&{display:flex;justify-content:center;align-items:center;text-align:center;cursor:not-allowed;min-height:", ";margin:0;padding:", ";border-radius:", ";border:dotted 1px ", ";background-color:", ";", ";}&& div{margin:0;padding:0;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.file.sizes.dragAndDropMinHeight;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.file.space.dragAndDropPadding;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.file.radii.dragAndDrop;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.file.colors.dragAndDropBorder;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.file.colors.dragAndDropBackground;
}, function (_ref6) {
  var theme = _ref6.theme,
    themeActive = _ref6.themeActive;
  if (themeActive) {
    return css$2(["cursor:pointer;&:hover{border-color:", ";}"], theme.__hd__.file.colors.dragAndDropBorderHover);
  }
});

var isValidExtension = function isValidExtension(filename, fileType) {
  return function (fileAccept) {
    var mimeType = fileType.toLowerCase();
    var baseMimeType = mimeType.replace(/\/.*$/, '');
    var normalizedFileAccept = fileAccept.toLowerCase();
    // fileAccept has filename extension. Eg: ".jpg"
    if (normalizedFileAccept.charAt(0) === '.') {
      return filename.toLowerCase().endsWith(normalizedFileAccept);
    }
    // fileAccept as mime type wild card. Eg: "image/*"
    if (normalizedFileAccept.endsWith('/*')) {
      return baseMimeType === normalizedFileAccept.replace(/\/.*$/, '');
    }
    // fileAccept as mine type & filename extension. Eg: "image/png"
    return mimeType === normalizedFileAccept;
  };
};

var DEFAULT_MAX_SIZE$1 = 100 * 1024 * 1024 * 1024; // 100GBs
var preventDefaultEvent = function preventDefaultEvent(e) {
  e.preventDefault();
};
var stopPropagationEvent$1 = function stopPropagationEvent(e) {
  e.stopPropagation();
};
var eitherValidOrInvalid$1 = function eitherValidOrInvalid(allowedExtensions, allowedMaxSize) {
  return function (file) {
    var hasValidExtension = allowedExtensions.some(isValidExtension(file.name, file.type));
    if (allowedExtensions.length > 0 && hasValidExtension === false) {
      return right$1([file, 'format-not-allowed']);
    }
    if (file.size > allowedMaxSize) {
      return right$1([file, 'size-limit-exceeded']);
    }
    return left$1(file);
  };
};
var DragAndDrop = function DragAndDrop(_ref) {
  var text = _ref.text,
    description = _ref.description,
    _ref$disableConfig = _ref.disableConfig,
    disableConfig = _ref$disableConfig === void 0 ? {
      disabled: false,
      reason: ''
    } : _ref$disableConfig,
    onAccept = _ref.onAccept,
    onReject = _ref.onReject,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    accept = _ref.accept,
    maxSize = _ref.maxSize,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var isActive = !disableConfig.disabled;
  var inputRef = useRef(null);
  var onDropzoneClick = useCallback(function () {
    if (inputRef.current !== null) {
      inputRef.current.value = '';
      inputRef.current.click();
    }
  }, []);
  var allowedExtensions = React__default.useMemo(function () {
    return pipe(accept, fromUndefinedable, map$2(function (acc) {
      return acc.split(',').map(function (i) {
        return i.trim();
      });
    }), getOrElse(function () {
      return [];
    }));
  }, [accept]);
  var allowedMaxSize = React__default.useMemo(function () {
    return pipe(maxSize, fromUndefinedable, getOrElse(function () {
      return DEFAULT_MAX_SIZE$1;
    }));
  }, [maxSize]);
  var onChanged = React__default.useCallback(function (files) {
    var _pipe = pipe(multiple === true ? files : files.slice(0, 1), reduce(function (acc, cur) {
        return pipe(cur, eitherValidOrInvalid$1(allowedExtensions, allowedMaxSize), match$2A(function (file) {
          return Object.assign(Object.assign({}, acc), {
            validFiles: [].concat(_toConsumableArray(acc.validFiles), [file])
          });
        }, function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            file = _ref3[0],
            reason = _ref3[1];
          return Object.assign(Object.assign({}, acc), {
            invalidFiles: [].concat(_toConsumableArray(acc.invalidFiles), [{
              file: file,
              reason: reason
            }])
          });
        }));
      }, {
        validFiles: [],
        invalidFiles: []
      })),
      validFiles = _pipe.validFiles,
      invalidFiles = _pipe.invalidFiles;
    if (validFiles.length > 0) {
      pipe(onAccept, fromUndefinedable, getOrElse(function () {
        return noop$2;
      }), invokeWith(validFiles));
    }
    if (invalidFiles.length > 0) {
      pipe(onReject, fromUndefinedable, getOrElse(function () {
        return noop$2;
      }), invokeWith(invalidFiles));
    }
  }, [multiple, allowedMaxSize, allowedExtensions, onAccept, onReject]);
  var onDrop = useCallback(function (e) {
    preventDefaultEvent(e);
    pipe(e.dataTransfer.files, Array.from, invoke(onChanged));
  }, [onChanged]);
  var onInputChange = useCallback(function (e) {
    pipe(e.target.files, Array.from, invoke(onChanged));
  }, [onChanged]);
  var dropZone = /*#__PURE__*/React__default.createElement(DropzoneWrapper, {
    onClick: isActive ? onDropzoneClick : noop$2,
    onDragOver: isActive ? preventDefaultEvent : noop$2,
    onDragEnter: isActive ? preventDefaultEvent : noop$2,
    onDragLeave: isActive ? preventDefaultEvent : noop$2,
    onDrop: isActive ? onDrop : noop$2,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themeActive: isActive
  }, /*#__PURE__*/React__default.createElement("div", null, text !== undefined && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "upload-outlined",
    size: "xlarge",
    intent: isActive ? 'primary' : 'disabled-text'
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    intent: isActive ? 'main' : 'disabled'
  }, text)), description !== undefined && /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    intent: isActive ? 'subdued' : 'disabled'
  }, description)), /*#__PURE__*/React__default.createElement(HiddenInput$1, {
    type: "file",
    disabled: disableConfig.disabled,
    ref: inputRef,
    onChange: onInputChange,
    multiple: multiple,
    accept: accept,
    onClick: stopPropagationEvent$1,
    id: id
  }));
  return isActive ? dropZone : /*#__PURE__*/React__default.createElement(Tooltip$1, {
    target: dropZone,
    content: disableConfig.reason,
    placement: "bottom",
    sx: {
      width: '100%'
    }
  });
};
var DragAndDrop$1 = DragAndDrop;

var FileUploadWrapper = styled.div.withConfig({
  displayName: "StyledUploadButton__FileUploadWrapper",
  componentId: "sc-658a70-0"
})(["&&{margin:0;padding:0;}"]);
var HiddenInput = styled.input.withConfig({
  displayName: "StyledUploadButton__HiddenInput",
  componentId: "sc-658a70-1"
})(["&&{display:none;}"]);

var DEFAULT_MAX_SIZE = 100 * 1024 * 1024 * 1024; // 100GBs
var stopPropagationEvent = function stopPropagationEvent(e) {
  e.stopPropagation();
};
var eitherValidOrInvalid = function eitherValidOrInvalid(allowedExtensions, allowedMaxSize) {
  return function (file) {
    var hasValidExtension = allowedExtensions.some(isValidExtension(file.name, file.type));
    if (allowedExtensions.length > 0 && hasValidExtension === false) {
      return right$1([file, 'format-not-allowed']);
    }
    if (file.size > allowedMaxSize) {
      return right$1([file, 'size-limit-exceeded']);
    }
    return left$1(file);
  };
};
var UploadButton = function UploadButton(_ref) {
  var onAccept = _ref.onAccept,
    onReject = _ref.onReject,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    accept = _ref.accept,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    maxSize = _ref.maxSize,
    text = _ref.text,
    id = _ref.id,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'outlined' : _ref$variant,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var inputRef = useRef(null);
  var onUploadButtonClick = useCallback(function () {
    if (inputRef.current !== null) {
      inputRef.current.value = '';
      inputRef.current.click();
    }
  }, []);
  var allowedExtensions = React__default.useMemo(function () {
    return pipe(accept, fromUndefinedable, map$2(function (acc) {
      return acc.split(',').map(function (i) {
        return i.trim();
      });
    }), getOrElse(function () {
      return [];
    }));
  }, [accept]);
  var allowedMaxSize = React__default.useMemo(function () {
    return pipe(maxSize, fromUndefinedable, getOrElse(function () {
      return DEFAULT_MAX_SIZE;
    }));
  }, [maxSize]);
  var onChanged = React__default.useCallback(function (files) {
    var _pipe = pipe(multiple === true ? files : files.slice(0, 1), reduce(function (acc, cur) {
        return pipe(cur, eitherValidOrInvalid(allowedExtensions, allowedMaxSize), match$2A(function (file) {
          return Object.assign(Object.assign({}, acc), {
            validFiles: [].concat(_toConsumableArray(acc.validFiles), [file])
          });
        }, function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            file = _ref3[0],
            reason = _ref3[1];
          return Object.assign(Object.assign({}, acc), {
            invalidFiles: [].concat(_toConsumableArray(acc.invalidFiles), [{
              file: file,
              reason: reason
            }])
          });
        }));
      }, {
        validFiles: [],
        invalidFiles: []
      })),
      validFiles = _pipe.validFiles,
      invalidFiles = _pipe.invalidFiles;
    if (validFiles.length > 0) {
      pipe(onAccept, fromUndefinedable, getOrElse(function () {
        return noop$2;
      }), invokeWith(validFiles));
    }
    if (invalidFiles.length > 0) {
      pipe(onReject, fromUndefinedable, getOrElse(function () {
        return noop$2;
      }), invokeWith(invalidFiles));
    }
  }, [multiple, allowedMaxSize, allowedExtensions, onAccept, onReject]);
  var onInputChange = useCallback(function (e) {
    pipe(e.target.files, Array.from, invoke(onChanged));
  }, [onChanged]);
  return /*#__PURE__*/React__default.createElement(FileUploadWrapper, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Button, {
    loading: loading,
    text: text,
    icon: "upload-outlined",
    variant: variant,
    intent: "primary",
    onClick: onUploadButtonClick,
    "data-test-id": "upload-button"
  }), /*#__PURE__*/React__default.createElement(HiddenInput, {
    type: "file",
    ref: inputRef,
    onChange: onInputChange,
    multiple: multiple,
    accept: accept,
    onClick: stopPropagationEvent,
    id: id,
    "data-test-id": "input-files"
  }));
};
var UploadButton$1 = UploadButton;

var File = {
  DragAndDrop: DragAndDrop$1,
  UploadButton: UploadButton$1
};
var File$1 = File;

var FiltersContext$2 = /*#__PURE__*/createContext({
  selectedTagsRef: {
    current: null
  },
  value: {},
  valueState: {},
  onChange: noop$2,
  onValueStateChange: noop$2,
  size: 'medium'
});
var useFilterContext = function useFilterContext(key) {
  var _useContext = useContext(FiltersContext$2),
    size = _useContext.size,
    value = _useContext.value,
    defaultValue = _useContext.defaultValue,
    valueState = _useContext.valueState,
    onChange = _useContext.onChange,
    onValueStateChange = _useContext.onValueStateChange;
  var valueForKey = value[key];
  var defaultValueForKey = defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue[key];
  var valueStateForKey = valueState[key];
  var onChangeForKey = useCallback(function (newValue) {
    onChange(Object.assign(Object.assign({}, value), _defineProperty$1({}, key, newValue)));
    onValueStateChange(Object.assign(Object.assign({}, valueState), _defineProperty$1({}, key, newValue)));
  }, [key, value, onChange, valueState, onValueStateChange]);
  var onValueStateChangeForKey = useCallback(function (newValue) {
    return onValueStateChange(Object.assign(Object.assign({}, valueState), _defineProperty$1({}, key, newValue)));
  }, [key, valueState, onValueStateChange]);
  var resetForKey = useCallback(function (resetValue) {
    onChange(Object.assign(Object.assign({}, value), _defineProperty$1({}, key, resetValue !== null && resetValue !== void 0 ? resetValue : defaultValueForKey)));
    onValueStateChange(Object.assign(Object.assign({}, valueState), _defineProperty$1({}, key, resetValue !== null && resetValue !== void 0 ? resetValue : defaultValueForKey)));
  }, [onChange, value, key, defaultValueForKey, onValueStateChange, valueState]);
  return {
    valueForKey: valueForKey,
    onChangeForKey: onChangeForKey,
    resetForKey: resetForKey,
    valueStateForKey: valueStateForKey,
    onValueStateChangeForKey: onValueStateChangeForKey,
    defaultValueForKey: defaultValueForKey,
    size: size
  };
};
var useFiltersContext = function useFiltersContext() {
  var _useContext2 = useContext(FiltersContext$2),
    size = _useContext2.size,
    value = _useContext2.value,
    defaultValue = _useContext2.defaultValue,
    onChange = _useContext2.onChange,
    valueState = _useContext2.valueState,
    onValueStateChange = _useContext2.onValueStateChange;
  var dirty = useMemo(function () {
    return Object.keys(value).some(function (key) {
      var valueForKey = value[key];
      var valueStateForKey = valueState[key];
      return valueForKey !== valueStateForKey;
    });
  }, [valueState, value]);
  var resetAll = useCallback(function () {
    if (defaultValue === undefined) {
      throw new Error("Can't reset all filters if defaultValue is undefined");
    }
    onChange(defaultValue);
    onValueStateChange(defaultValue);
  }, [onChange, defaultValue, onValueStateChange]);
  var commitAll = useCallback(function () {
    onChange(valueState);
  }, [valueState, onChange]);
  return {
    resetAll: resetAll,
    commitAll: commitAll,
    dirty: dirty,
    value: value,
    defaultValue: defaultValue,
    onChange: onChange,
    valueState: valueState,
    onValueStateChange: onValueStateChange,
    size: size
  };
};
var FiltersProvider$1 = function FiltersProvider(_ref) {
  var children = _ref.children,
    selectedTagsRef = _ref.selectedTagsRef,
    value = _ref.value,
    onChange = _ref.onChange,
    defaultValue = _ref.defaultValue,
    valueState = _ref.valueState,
    onValueStateChange = _ref.onValueStateChange,
    size = _ref.size;
  var contextValue = useMemo(function () {
    return {
      selectedTagsRef: selectedTagsRef,
      value: value,
      onChange: onChange,
      defaultValue: defaultValue,
      valueState: valueState,
      onValueStateChange: onValueStateChange,
      size: size
    };
  }, [value, onChange, valueState, onValueStateChange, selectedTagsRef, defaultValue, size]);
  return /*#__PURE__*/React__default.createElement(FiltersContext$2.Provider, {
    value: contextValue
  }, children);
};

var LabelWrapper = styled.span.withConfig({
  displayName: "StyledFilters__LabelWrapper",
  componentId: "sc-13hxn60-0"
})(["&&{margin:0;padding:", ";padding-left:0;font-size:", ";font-weight:", ";line-height:100%;white-space:nowrap;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.filters.space.filterButtonPadding;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.filters.fontSizes.filterButton;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.filters.fontWeights.filterBy;
});
var FilterWrapper = styled.div.withConfig({
  displayName: "StyledFilters__FilterWrapper",
  componentId: "sc-13hxn60-1"
})(["&&{margin:0;padding:0;}&& > ", " > ", " > ", "{font-weight:", ";}&& > ", " > ", " > ", " > ", " > ", "::placeholder{font-weight:", ";color:", ";}&& > ", " > ", " > ", ":hover{border-color:", ";}&& > ", " > ", " > ", ":focus-within{border-color:", ";box-shadow:none;}&&{", ";}"], SelectWrapper, DropdownWrapper, InputWrapper, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.filters.fontWeights.filterButton;
}, SelectWrapper, DropdownWrapper, InputWrapper, InputContainer, StyledInput$4, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.filters.fontWeights.filterButton;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.filters.colors.filterButtonText;
}, SelectWrapper, DropdownWrapper, InputWrapper, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.filters.colors.filterButtonHoverBorder;
}, SelectWrapper, DropdownWrapper, InputWrapper, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.filters.colors.filterButtonHoverBorder;
}, function (_ref9) {
  var theme = _ref9.theme,
    themeActive = _ref9.themeActive;
  return themeActive ? css$2(["& > ", " > ", " > ", "{background-color:", ";& > ", " > ", "{background-color:", ";}}"], SelectWrapper, DropdownWrapper, InputWrapper, theme.__hd__.filters.colors.filterButtonActiveBackground, InputContainer, StyledInput$4, theme.__hd__.filters.colors.filterButtonActiveBackground) : css$2([""]);
});
var StyledDropdownButton$1 = styled.button.withConfig({
  displayName: "StyledFilters__StyledDropdownButton",
  componentId: "sc-13hxn60-2"
})(["&&{margin:0;padding:", ";height:", ";border:", ";font-size:", ";font-weight:", ";line-height:", ";display:inline-flex;align-items:center;background-color:", ";cursor:pointer;position:relative;border-radius:", ";color:", ";border-color:", ";}&&:hover{z-index:1;border-color:", ";}&&{", ";}&& > ", "{padding-left:", ";}"], function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.filters.space.filterButtonPadding;
}, function (_ref11) {
  var theme = _ref11.theme,
    themeSize = _ref11.themeSize;
  return theme.__hd__.filters.sizes.filterButton[themeSize];
}, function (_ref12) {
  var theme = _ref12.theme;
  return "".concat(theme.__hd__.filters.borderWidths.filterButton, " solid");
}, function (_ref13) {
  var theme = _ref13.theme,
    themeSize = _ref13.themeSize;
  return theme.__hd__.filters.fontSizes.filterButton[themeSize];
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.filters.fontWeights.filterButton;
}, function (_ref15) {
  var theme = _ref15.theme,
    themeSize = _ref15.themeSize;
  return theme.__hd__.filters.lineHeights.filterButton[themeSize];
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.filters.colors.filterButtonBackground;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.filters.radii.filterButton;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.filters.colors.filterButtonText;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.filters.colors.filterButtonBorder;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.filters.colors.filterButtonHoverBorder;
}, function (_ref21) {
  var theme = _ref21.theme,
    themeActive = _ref21.themeActive;
  return themeActive ? css$2(["z-index:1;background-color:", ";"], theme.__hd__.filters.colors.filterButtonActiveBackground) : css$2(["background-color:", ";"], theme.__hd__.filters.colors.filterButtonBackground);
}, StyledIcon, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.filters.space.filterButtonIconPadding;
});
var StyledTagList$1 = styled.div.withConfig({
  displayName: "StyledFilters__StyledTagList",
  componentId: "sc-13hxn60-3"
})(["&&{margin:0;padding:0;margin-top:", ";}"], function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.filters.space.tagListMarginTop;
});
var FiltersWrapper$1 = styled.div.withConfig({
  displayName: "StyledFilters__FiltersWrapper",
  componentId: "sc-13hxn60-4"
})(["&&{margin:0;padding:0;}"]);
var StyledFilterList$1 = styled.div.withConfig({
  displayName: "StyledFilters__StyledFilterList",
  componentId: "sc-13hxn60-5"
})(["&&{margin:0;padding:0;display:flex;flex-wrap:wrap;gap:", ";}"], function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.filters.space.filterButtonGap;
});
var StyledFiltersHeader$1 = styled.div.withConfig({
  displayName: "StyledFilters__StyledFiltersHeader",
  componentId: "sc-13hxn60-6"
})(["&&{margin:0;padding:0;display:flex;justify-content:space-between;margin-bottom:", "px;}"], function (_ref25) {
  var theme = _ref25.theme;
  return theme.space.small;
});
var StyledFilterListWithAddons$1 = styled.div.withConfig({
  displayName: "StyledFilters__StyledFilterListWithAddons",
  componentId: "sc-13hxn60-7"
})(["&&{margin:0;padding:0;display:flex;}"]);

var MediaQuery = function MediaQuery(props) {
  var children = props.children,
    _props$as = props.as,
    WrapperComponent = _props$as === void 0 ? React__default.Fragment : _props$as,
    rest = __rest(props, ["children", "as"]);
  var size = useSizeMediaQuery();
  if (children) return /*#__PURE__*/React__default.createElement(WrapperComponent, Object.assign({}, rest), children(size));
  var small = props.small,
    medium = props.medium,
    large = props.large,
    xlarge = props.xlarge,
    restProps = __rest(props, ["small", "medium", "large", "xlarge"]);
  var component = function () {
    switch (size) {
      case 'xlarge':
        {
          return xlarge;
        }
      case 'large':
        {
          return large;
        }
      case 'medium':
        {
          return medium;
        }
      case 'small':
        {
          return small;
        }
      default:
        {
          return small;
        }
    }
  }();
  return /*#__PURE__*/React__default.createElement(WrapperComponent, Object.assign({}, restProps), component);
};
var useMediaQuery = useSizeMediaQuery;
var MediaQuery$1 = MediaQuery;

var Addon = function Addon(_ref) {
  var render = _ref.render;
  var _useFiltersContext = useFiltersContext(),
    resetAll = _useFiltersContext.resetAll,
    commitAll = _useFiltersContext.commitAll,
    dirty = _useFiltersContext.dirty,
    size = _useFiltersContext.size;
  if (render === undefined) {
    return null;
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, render({
    resetAll: resetAll,
    commitAll: commitAll,
    dirty: dirty,
    size: size
  }));
};
var Filters$1 = function Filters(_ref2) {
  var id = _ref2.id,
    className = _ref2.className,
    style = _ref2.style,
    _ref2$sx = _ref2.sx,
    sx = _ref2$sx === void 0 ? {} : _ref2$sx,
    dataTestId = _ref2['data-test-id'],
    children = _ref2.children,
    leftAddon = _ref2.leftAddon,
    rightAddon = _ref2.rightAddon,
    value = _ref2.value,
    onChange = _ref2.onChange,
    defaultValue = _ref2.defaultValue,
    draftValue = _ref2.draftValue,
    onDraftValueChange = _ref2.onDraftValueChange,
    _ref2$noSelectedTags = _ref2.noSelectedTags,
    noSelectedTags = _ref2$noSelectedTags === void 0 ? false : _ref2$noSelectedTags,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 'medium' : _ref2$size;
  var selectedTagsRef = useRef(null);
  var _useControllableState = useControllableState({
      defaultValue: typeof defaultValue !== 'undefined' ? defaultValue : value,
      value: draftValue,
      onChange: onDraftValueChange
    }),
    _useControllableState2 = _slicedToArray(_useControllableState, 2),
    valueState = _useControllableState2[0],
    setValueState = _useControllableState2[1];
  var onValueStateChange = useCallback(function (v) {
    return setValueState(v);
  }, [setValueState]);
  var screenSize = useMediaQuery();
  var isLargeScreen = screenSize === 'large' || screenSize === 'xlarge';
  return /*#__PURE__*/React__default.createElement(FiltersProvider$1, {
    selectedTagsRef: selectedTagsRef,
    value: value,
    onChange: onChange,
    defaultValue: defaultValue,
    valueState: valueState,
    onValueStateChange: onValueStateChange,
    size: size
  }, /*#__PURE__*/React__default.createElement(FiltersWrapper$1, {
    id: id,
    className: className,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), css$1(sx))
  }, isLargeScreen === false && /*#__PURE__*/React__default.createElement(StyledFiltersHeader$1, null, /*#__PURE__*/React__default.createElement(Addon, {
    render: leftAddon
  }), /*#__PURE__*/React__default.createElement(Addon, {
    render: rightAddon
  })), /*#__PURE__*/React__default.createElement(StyledFilterListWithAddons$1, null, isLargeScreen === true && /*#__PURE__*/React__default.createElement(Addon, {
    render: leftAddon
  }), /*#__PURE__*/React__default.createElement(StyledFilterList$1, null, children), isLargeScreen === true && /*#__PURE__*/React__default.createElement(Addon, {
    render: rightAddon
  })), !noSelectedTags && /*#__PURE__*/React__default.createElement(StyledTagList$1, {
    "data-test-id": "selected-tag-list",
    ref: selectedTagsRef
  })));
};
var Filters$2 = Filters$1;

var hasSelection = function hasSelection(value) {
  if (Array.isArray(value)) return value.length !== 0;
  if (typeof value === 'string') return value.length !== 0;
  if (_typeof$1(value) === 'object') return Object.values(value).find(function (v) {
    return v !== undefined;
  }) !== undefined;
  return value !== undefined;
};
var formatValue$1 = function formatValue(value) {
  if (Array.isArray(value)) {
    return value.join(', ');
  }
  if (typeof value === 'string') return value;
  if (_typeof$1(value) === 'object') {
    return "".concat(value === null || value === void 0 ? void 0 : value.startDate, " - ").concat(value === null || value === void 0 ? void 0 : value.endDate);
  }
  return '';
};
var resetValue = function resetValue(value) {
  if (Array.isArray(value)) {
    return [];
  }
  if (typeof value === 'string') return '';
  if (_typeof$1(value) === 'object') {
    return {};
  }
  return '';
};
var getCaretIcon$2 = function getCaretIcon(open) {
  return open === true ? 'arrow-up' : 'arrow-down';
};

var SelectedTag$2 = function SelectedTag(_ref) {
  var label = _ref.label,
    value = _ref.value,
    onRemove = _ref.onRemove;
  var _useContext = useContext(FiltersContext$2),
    selectedTagsRef = _useContext.selectedTagsRef;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    forceRender = _useState2[0],
    setForceRender = _useState2[1];
  useEffect(function () {
    setForceRender(!forceRender);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedTagsRef]);
  if (selectedTagsRef.current === null) return null;
  return /*#__PURE__*/ReactDOM__default.createPortal( /*#__PURE__*/React__default.createElement(Tag$1, {
    sx: {
      bgColor: 'violet-light-90',
      borderColor: 'violet-light-90',
      mr: 'small'
    },
    "data-test-id": "filter-value-tag-".concat(label),
    text: /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      tagName: "span",
      fontSize: 12,
      style: {
        margin: 0,
        padding: 0,
        lineHeight: 1
      }
    }, label !== undefined && "".concat(label, ": "), /*#__PURE__*/React__default.createElement("strong", null, value)),
    onRemove: onRemove
  }), selectedTagsRef.current);
};
var SelectedTag$3 = SelectedTag$2;

var DropdownButton$3 = function DropdownButton(_ref) {
  var text = _ref.text,
    onClick = _ref.onClick,
    active = _ref.active,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    _ref$size = _ref.size,
    themeSize = _ref$size === void 0 ? 'medium' : _ref$size;
  return /*#__PURE__*/React__default.createElement(StyledDropdownButton$1, {
    onClick: onClick,
    themeActive: active,
    themeSize: themeSize
  }, leftIcon !== undefined ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: leftIcon,
    "data-test-id": "filter-icon",
    sx: {
      mr: 'small'
    }
  }) : null, text, rightIcon !== undefined ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: rightIcon,
    "data-test-id": "filter-icon"
  }) : null);
};
var getCaretIcon$1 = function getCaretIcon(open) {
  return open === true ? 'arrow-up' : 'arrow-down';
};
var defaultTagValueRenderer$1 = function defaultTagValueRenderer(_ref2) {
  var value = _ref2.value;
  return formatValue$1(value);
};
var defaultOnTagRemove$1 = function defaultOnTagRemove(_ref3) {
  var commit = _ref3.commit,
    value = _ref3.value;
  return commit(resetValue(value));
};
var Filter$4 = function Filter(_ref4) {
  var text = _ref4.text,
    icon = _ref4.icon,
    _ref4$noCaret = _ref4.noCaret,
    noCaret = _ref4$noCaret === void 0 ? false : _ref4$noCaret,
    _ref4$noDropdown = _ref4.noDropdown,
    noDropdown = _ref4$noDropdown === void 0 ? false : _ref4$noDropdown,
    filterKey = _ref4.filterKey,
    children = _ref4.children,
    _onOpen = _ref4.onOpen,
    _onClose = _ref4.onClose,
    _ref4$tagValueRendere = _ref4.tagValueRenderer,
    tagValueRenderer = _ref4$tagValueRendere === void 0 ? defaultTagValueRenderer$1 : _ref4$tagValueRendere,
    _ref4$onTagRemove = _ref4.onTagRemove,
    onTagRemove = _ref4$onTagRemove === void 0 ? defaultOnTagRemove$1 : _ref4$onTagRemove,
    _ref4$isApplyChangeOn = _ref4.isApplyChangeOnClose,
    isApplyChangeOnClose = _ref4$isApplyChangeOn === void 0 ? true : _ref4$isApplyChangeOn;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    openDropdown = _useState2[0],
    setOpenDropdown = _useState2[1];
  var _useFilterContext = useFilterContext(filterKey),
    valueForKey = _useFilterContext.valueForKey,
    valueStateForKey = _useFilterContext.valueStateForKey,
    defaultValueForKey = _useFilterContext.defaultValueForKey,
    onValueStateChangeForKey = _useFilterContext.onValueStateChangeForKey,
    onChangeForKey = _useFilterContext.onChangeForKey,
    resetForKey = _useFilterContext.resetForKey;
  var _useFiltersContext = useFiltersContext(),
    resetAll = _useFiltersContext.resetAll,
    size = _useFiltersContext.size;
  var renderProps = useMemo(function () {
    return {
      value: valueStateForKey,
      onChange: onValueStateChangeForKey,
      defaultValue: defaultValueForKey,
      commit: onChangeForKey,
      dirty: valueForKey !== valueStateForKey,
      reset: resetForKey,
      resetAll: resetAll,
      closeDropdown: function closeDropdown() {
        return setOpenDropdown(false);
      },
      size: size
    };
  }, [valueStateForKey, onValueStateChangeForKey, valueForKey, onChangeForKey, resetForKey, resetAll, defaultValueForKey, size]);
  var tagProps = useMemo(function () {
    return {
      defaultValue: defaultValueForKey,
      value: valueForKey,
      label: text,
      filterKey: filterKey,
      commit: onChangeForKey,
      size: size
    };
  }, [valueForKey, text, filterKey, defaultValueForKey, onChangeForKey, size]);
  var active = useMemo(function () {
    return hasSelection(valueForKey);
  }, [valueForKey]);
  var tagValue = tagValueRenderer(tagProps);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, noDropdown ? /*#__PURE__*/React__default.createElement(FilterWrapper, {
    themeActive: active
  }, children(renderProps)) : /*#__PURE__*/React__default.createElement(Dropdown$1, {
    open: openDropdown,
    onClose: function onClose() {
      setOpenDropdown(false);
      _onClose === null || _onClose === void 0 ? void 0 : _onClose(renderProps);
      if (isApplyChangeOnClose && renderProps.dirty) {
        renderProps.commit(renderProps.value);
      }
    },
    onOpen: function onOpen() {
      _onOpen === null || _onOpen === void 0 ? void 0 : _onOpen(renderProps);
    },
    content: /*#__PURE__*/React__default.createElement(Box$1, {
      sx: {
        padding: 'medium',
        minWidth: 250
      }
    }, children(renderProps)),
    target: /*#__PURE__*/React__default.createElement(DropdownButton$3, {
      size: size,
      active: active,
      text: text,
      leftIcon: icon,
      rightIcon: noCaret === true ? undefined : getCaretIcon$1(openDropdown),
      onClick: function onClick() {
        return setOpenDropdown(function (v) {
          return !v;
        });
      }
    })
  }), tagValue !== '' ? /*#__PURE__*/React__default.createElement(SelectedTag$3, {
    label: text,
    value: tagValue,
    onRemove: onTagRemove === null ? undefined : function () {
      return onTagRemove(tagProps);
    }
  }) : null);
};
Filter$4.displayName = 'Filters.Filter';
var Filter$5 = Filter$4;

var GroupContext = /*#__PURE__*/createContext({
  filterKeys: new Set(),
  addFilterKey: noop$2,
  removeFilterKey: noop$2
});
var useGroupContext = function useGroupContext() {
  var context = useContext(GroupContext);
  return context;
};
var GroupContext$1 = GroupContext;

var DropdownButton$1 = function DropdownButton(_ref) {
  var text = _ref.text,
    onClick = _ref.onClick,
    active = _ref.active,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    dataTestId = _ref['data-test-id'],
    _ref$size = _ref.size,
    themeSize = _ref$size === void 0 ? 'medium' : _ref$size;
  return /*#__PURE__*/React__default.createElement(StyledDropdownButton$1, {
    themeSize: themeSize,
    onClick: onClick,
    themeActive: active,
    "data-test-id": dataTestId
  }, leftIcon !== undefined ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: leftIcon,
    "data-test-id": "filter-icon",
    sx: {
      mr: 'small'
    }
  }) : null, text, rightIcon !== undefined ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: rightIcon,
    "data-test-id": "filter-icon"
  }) : null);
};
var DropdownButton$2 = DropdownButton$1;

var GroupWrapper = styled(Box$1).withConfig({
  displayName: "StyledGroupFilter__GroupWrapper",
  componentId: "sc-uoctwu-0"
})(["&& > ", " > ", "{z-index:9999;}"], DropdownWrapper, DropdownPopper);
var GroupFilterWrapper = styled(Box$1).withConfig({
  displayName: "StyledGroupFilter__GroupFilterWrapper",
  componentId: "sc-uoctwu-1"
})(["&&{}"]);
var DropdownContentWrapper = styled(Box$1).withConfig({
  displayName: "StyledGroupFilter__DropdownContentWrapper",
  componentId: "sc-uoctwu-2"
})(["&&{padding:", ";min-width:", ";}&& > ", ":not(:last-child){margin-bottom:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.filters.space.filterGroupDropdownPadding;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.filters.sizes.filterDropdownWidth;
}, GroupFilterWrapper, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.filters.space.filterGroupFilterMarginBottom;
});
var WideDropdownContentWrapper = styled(Box$1).withConfig({
  displayName: "StyledGroupFilter__WideDropdownContentWrapper",
  componentId: "sc-uoctwu-3"
})(["&&{display:flex;flex-wrap:wrap;gap:", ";}&& > ", "{width:", ";}&&{", ";}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.filters.space.filterGroupDropdownItemGap;
}, GroupFilterWrapper, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.filters.sizes.filterGroupWidth;
}, function (_ref6) {
  var theme = _ref6.theme,
    themeSize = _ref6.themeSize;
  switch (themeSize) {
    case 'large':
      return "\n          width: ".concat(theme.__hd__.filters.sizes.filterGroupLargeDropdownWidth, ";\n        ");
    case 'xlarge':
      return "\n          width: ".concat(theme.__hd__.filters.sizes.filterGroupXLargeDropdownWidth, ";\n        ");
  }
});

var MAX_VERTIVAL_FILTERS = 5;
var Group$1 = function Group(_ref) {
  var text = _ref.text,
    icon = _ref.icon,
    _ref$noCaret = _ref.noCaret,
    noCaret = _ref$noCaret === void 0 ? false : _ref$noCaret,
    children = _ref.children,
    _onClose = _ref.onClose,
    _ref$isApplyChangeOnC = _ref.isApplyChangeOnClose,
    isApplyChangeOnClose = _ref$isApplyChangeOnC === void 0 ? true : _ref$isApplyChangeOnC,
    bottomAddon = _ref.bottomAddon,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    openDropdown = _useState2[0],
    setOpenDropdown = _useState2[1];
  var _useState3 = useState(new Set()),
    _useState4 = _slicedToArray(_useState3, 2),
    filterKeys = _useState4[0],
    setFilterKeys = _useState4[1];
  var addFilterKey = useCallback(function (key) {
    setFilterKeys(function (prev) {
      var newSet = new Set(prev);
      newSet.add(key);
      return newSet;
    });
  }, [setFilterKeys]);
  var removeFilterKey = useCallback(function (key) {
    setFilterKeys(function (prev) {
      var newSet = new Set(prev);
      newSet["delete"](key);
      return newSet;
    });
  }, [setFilterKeys]);
  var _useFiltersContext = useFiltersContext(),
    value = _useFiltersContext.value,
    defaultValue = _useFiltersContext.defaultValue,
    onChange = _useFiltersContext.onChange,
    valueState = _useFiltersContext.valueState,
    onValueStateChange = _useFiltersContext.onValueStateChange,
    commitAll = _useFiltersContext.commitAll,
    resetAll = _useFiltersContext.resetAll,
    size = _useFiltersContext.size;
  var commit = useCallback(function (v) {
    if (v !== undefined) {
      onChange(Object.assign(Object.assign({}, value), v));
      onValueStateChange(Object.assign(Object.assign({}, value), v));
    } else {
      var valueStateForKeys = Array.from(filterKeys).reduce(function (acc, key) {
        return Object.assign(Object.assign({}, acc), _defineProperty$1({}, key, valueState[key]));
      }, {});
      onChange(Object.assign(Object.assign({}, value), valueStateForKeys));
    }
  }, [onChange, onValueStateChange, filterKeys, value, valueState]);
  var dirty = useMemo(function () {
    return Array.from(filterKeys).some(function (key) {
      return valueState[key] !== (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue[key]);
    });
  }, [filterKeys, valueState, valueState]);
  var reset = useCallback(function (v) {
    if (v !== undefined) {
      onChange(Object.assign(Object.assign({}, value), v));
      onValueStateChange(Object.assign(Object.assign({}, valueState), v));
    } else {
      var resetValueForKeys = Array.from(filterKeys).reduce(function (acc, key) {
        return Object.assign(Object.assign({}, acc), _defineProperty$1({}, key, defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue[key]));
      }, {});
      onChange(Object.assign(Object.assign({}, valueState), resetValueForKeys));
      onValueStateChange(Object.assign(Object.assign({}, valueState), resetValueForKeys));
    }
  }, [onChange, onValueStateChange, filterKeys, value, valueState, defaultValue]);
  var renderProps = {
    commit: commit,
    reset: reset,
    dirty: dirty,
    resetAll: resetAll,
    commitAll: commitAll,
    closeDropdown: function closeDropdown() {
      return setOpenDropdown(false);
    },
    size: size
  };
  var active = useMemo(function () {
    return Array.from(filterKeys).some(function (k) {
      return hasSelection(value[k]);
    });
  }, [filterKeys, value]);
  var contextValue = useMemo(function () {
    return {
      filterKeys: filterKeys,
      addFilterKey: addFilterKey,
      removeFilterKey: removeFilterKey
    };
  }, [filterKeys, addFilterKey, removeFilterKey]);
  var numberOfFilters = Children.count(children);
  return /*#__PURE__*/React__default.createElement(GroupContext$1.Provider, {
    value: contextValue
  }, /*#__PURE__*/React__default.createElement(GroupWrapper, null, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    keepContentMounted: true,
    open: openDropdown,
    onClose: function onClose() {
      setOpenDropdown(false);
      _onClose === null || _onClose === void 0 ? void 0 : _onClose(renderProps);
      if (isApplyChangeOnClose && renderProps.dirty) {
        renderProps.commit();
      }
    },
    content: /*#__PURE__*/React__default.createElement(DropdownContentWrapper, null, numberOfFilters <= MAX_VERTIVAL_FILTERS && children, numberOfFilters > MAX_VERTIVAL_FILTERS && /*#__PURE__*/React__default.createElement(MediaQuery$1, null, function (screenSize) {
      switch (screenSize) {
        case 'small':
        case 'medium':
          return children;
        case 'large':
          return /*#__PURE__*/React__default.createElement(WideDropdownContentWrapper, {
            themeSize: "large",
            "data-test-id": "large-wide-content-wrapper"
          }, children);
        case 'xlarge':
          return /*#__PURE__*/React__default.createElement(WideDropdownContentWrapper, {
            themeSize: "xlarge",
            "data-test-id": "xlarge-wide-content-wrapper"
          }, children);
      }
    }), bottomAddon === null || bottomAddon === void 0 ? void 0 : bottomAddon(renderProps)),
    target: /*#__PURE__*/React__default.createElement(DropdownButton$2, {
      size: size,
      "data-test-id": dataTestId,
      active: active,
      text: text,
      leftIcon: icon,
      rightIcon: noCaret === true ? undefined : getCaretIcon$2(openDropdown),
      onClick: function onClick() {
        return setOpenDropdown(function (v) {
          return !v;
        });
      }
    })
  })));
};
Group$1.displayName = 'Filters.Group';
var Group$2 = Group$1;

var defaultTagValueRenderer = function defaultTagValueRenderer(_ref) {
  var value = _ref.value;
  return formatValue$1(value);
};
var defaultOnTagRemove = function defaultOnTagRemove(_ref2) {
  var commit = _ref2.commit,
    value = _ref2.value;
  return commit(resetValue(value));
};
var Filter$2 = function Filter(_ref3) {
  var text = _ref3.text,
    tooltip = _ref3.tooltip,
    filterKey = _ref3.filterKey,
    children = _ref3.children,
    _ref3$tagValueRendere = _ref3.tagValueRenderer,
    tagValueRenderer = _ref3$tagValueRendere === void 0 ? defaultTagValueRenderer : _ref3$tagValueRendere,
    _ref3$onTagRemove = _ref3.onTagRemove,
    onTagRemove = _ref3$onTagRemove === void 0 ? defaultOnTagRemove : _ref3$onTagRemove,
    _ref3$tagRemovable = _ref3.tagRemovable,
    tagRemovable = _ref3$tagRemovable === void 0 ? true : _ref3$tagRemovable;
  var _useFilterContext = useFilterContext(filterKey),
    valueForKey = _useFilterContext.valueForKey,
    valueStateForKey = _useFilterContext.valueStateForKey,
    defaultValueForKey = _useFilterContext.defaultValueForKey,
    onValueStateChangeForKey = _useFilterContext.onValueStateChangeForKey,
    onChangeForKey = _useFilterContext.onChangeForKey,
    resetForKey = _useFilterContext.resetForKey;
  var _useGroupContext = useGroupContext(),
    addFilterKey = _useGroupContext.addFilterKey,
    removeFilterKey = _useGroupContext.removeFilterKey;
  var _useFiltersContext = useFiltersContext(),
    resetAll = _useFiltersContext.resetAll;
  var renderProps = useMemo(function () {
    return {
      value: valueStateForKey,
      onChange: onValueStateChangeForKey,
      defaultValue: defaultValueForKey,
      commit: onChangeForKey,
      dirty: valueStateForKey !== valueForKey,
      reset: resetForKey,
      resetAll: resetAll
    };
  }, [valueStateForKey, onValueStateChangeForKey, valueForKey, onChangeForKey, resetForKey, resetAll, defaultValueForKey]);
  var tagProps = useMemo(function () {
    return {
      defaultValue: defaultValueForKey,
      value: valueForKey,
      label: text,
      filterKey: filterKey,
      commit: onChangeForKey
    };
  }, [valueForKey, text, filterKey, defaultValueForKey, onChangeForKey]);
  var tagValue = tagValueRenderer(tagProps);
  useEffect(function () {
    addFilterKey(filterKey);
    return function () {
      removeFilterKey(filterKey);
    };
  }, [filterKey, addFilterKey, removeFilterKey]);
  return /*#__PURE__*/React__default.createElement(GroupFilterWrapper, null, /*#__PURE__*/React__default.createElement(Box$1, {
    sx: {
      display: 'flex',
      alignItems: 'center',
      mb: 'xsmall'
    }
  }, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontWeight: "semi-bold"
  }, text), tooltip && /*#__PURE__*/React__default.createElement(Tooltip$1, {
    "data-test-id": "".concat(filterKey, "-tooltip"),
    target: /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: "circle-info-outlined",
      size: "small"
    }),
    placement: tooltip.placement || 'right',
    content: tooltip.content,
    sx: {
      ml: 'xsmall',
      display: 'flex'
    }
  })), children(renderProps), tagValue !== '' ? /*#__PURE__*/React__default.createElement(SelectedTag$3, {
    label: text,
    value: tagValue,
    onRemove: !tagRemovable || onTagRemove === null ? undefined : function () {
      return onTagRemove(tagProps);
    }
  }) : null);
};
Filter$2.displayName = 'Filters.Group.Filter';
var Filter$3 = Filter$2;

var CompoundGroup = Group$2;
CompoundGroup.Filter = Filter$3;
var Group = CompoundGroup;

var Label = function Label(_ref) {
  var _ref$icon = _ref.icon,
    icon = _ref$icon === void 0 ? 'adjustment' : _ref$icon,
    text = _ref.text;
  return /*#__PURE__*/React__default.createElement(LabelWrapper, null, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: icon,
    sx: {
      mr: 'small'
    }
  }), text);
};
Label.displayName = 'Filters.Label';
var Label$1 = Label;

var CompoundFilters = Filters$2;
CompoundFilters.Label = Label$1;
CompoundFilters.Filter = Filter$5;
CompoundFilters.Group = Group;
var CompoundFilters$1 = CompoundFilters;

var FieldWrapper = styled.div.withConfig({
  displayName: "StyledField__FieldWrapper",
  componentId: "sc-iufe5p-0"
})(["&&{margin:0;padding:0;", ";}"], function (_ref) {
  var themeStatus = _ref.themeStatus,
    theme = _ref.theme;
  switch (themeStatus) {
    case 'warning':
      return css$2(["", "{border-color:", ";&:focus-within{border-color:", ";box-shadow:", ";}}", "{border-color:", ";&:focus-within{border-color:", ";box-shadow:", ";}}"], InputWrapper, theme.__hd__.form.colors.warningBorder, theme.__hd__.form.colors.warningBorder, theme.__hd__.form.shadows.warningFocus, StyledTextArea$1, theme.__hd__.form.colors.warningBorder, theme.__hd__.form.colors.warningBorder, theme.__hd__.form.shadows.warningFocus);
    case 'error':
      return css$2(["", "{border-color:", ";&:focus-within{border-color:", ";box-shadow:", ";}}", "{color:", ";}", "{border-color:", ";&:focus-within{border-color:", ";box-shadow:", ";}}", "{color:", ";}"], InputWrapper, theme.__hd__.form.colors.errorBorder, theme.__hd__.form.colors.errorBorder, theme.__hd__.form.shadows.errorFocus, StyledInput$4, theme.__hd__.form.colors.errorText, StyledTextArea$1, theme.__hd__.form.colors.errorBorder, theme.__hd__.form.colors.errorBorder, theme.__hd__.form.shadows.errorFocus, StyledTextArea$1, theme.__hd__.form.colors.errorText);
    case 'success':
    case 'validating':
    case undefined:
      return css$2([""]);
  }
});
var ValidateIconWrapper = styled.div.withConfig({
  displayName: "StyledField__ValidateIconWrapper",
  componentId: "sc-iufe5p-1"
})(["&&{margin:0;padding:0;display:flex;", ";}"], function (_ref2) {
  var themeSize = _ref2.themeSize,
    theme = _ref2.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding-left:", ";"], theme.__hd__.form.space.smallIconPadding);
    case 'medium':
      return css$2(["padding-left:", ";"], theme.__hd__.form.space.mediumIconPadding);
    case 'large':
      return css$2(["padding-left:", ";"], theme.__hd__.form.space.largeIconPadding);
  }
});
var ValidateSuffixWrapper = styled.div.withConfig({
  displayName: "StyledField__ValidateSuffixWrapper",
  componentId: "sc-iufe5p-2"
})(["&&{margin:0;padding:0;display:flex;}"]);
var TextAreaWrapper = styled.div.withConfig({
  displayName: "StyledField__TextAreaWrapper",
  componentId: "sc-iufe5p-3"
})(["&&{margin:0;padding:0px;position:relative;}&& ", "{position:absolute;", ";}&& ", ",&& ", "{", ";}"], ValidateIconWrapper, function (_ref3) {
  var themeSize = _ref3.themeSize,
    theme = _ref3.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["top:calc( ", " + ", " );right:calc( ", " + ", " );font-size:", ";"], theme.__hd__.form.space.smallIconPadding, theme.__hd__.input.borderWidths["default"], theme.__hd__.form.space.smallIconPadding, theme.__hd__.input.borderWidths["default"], theme.__hd__.input.fontSizes.small);
    case 'medium':
      return css$2(["top:calc( ", " + ", " );right:calc( ", " + ", " );font-size:", ";"], theme.__hd__.form.space.mediumIconPadding, theme.__hd__.input.borderWidths["default"], theme.__hd__.form.space.mediumIconPadding, theme.__hd__.input.borderWidths["default"], theme.__hd__.input.fontSizes.medium);
    case 'large':
      return css$2(["top:calc( ", " + ", " );right:calc( ", " + ", " );font-size:", ";"], theme.__hd__.form.space.largeIconPadding, theme.__hd__.input.borderWidths["default"], theme.__hd__.form.space.largeIconPadding, theme.__hd__.input.borderWidths["default"], theme.__hd__.input.fontSizes.large);
  }
}, StyledTextArea$1, HiddenTextArea, function (_ref4) {
  var themeSize = _ref4.themeSize,
    theme = _ref4.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["padding-right:calc( ", " * 2 + ", " );"], theme.__hd__.form.space.smallIconPadding, theme.__hd__.input.fontSizes.small);
    case 'medium':
      return css$2(["padding-right:calc( ", " * 2 + ", " );"], theme.__hd__.form.space.mediumIconPadding, theme.__hd__.input.fontSizes.medium);
    case 'large':
      return css$2(["padding-right:calc( ", " * 2 + ", " );"], theme.__hd__.form.space.largeIconPadding, theme.__hd__.input.fontSizes.large);
  }
});

var ValidateIcon = function ValidateIcon(_ref) {
  var status = _ref.status,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size;
  var renderWithWrapper = function renderWithWrapper(children) {
    return /*#__PURE__*/React__default.createElement(ValidateIconWrapper, {
      themeSize: size,
      "data-test-id": "validate-icon"
    }, children);
  };
  switch (status) {
    case 'success':
      return renderWithWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: "circle-ok",
        intent: "success"
      }));
    case 'warning':
      return renderWithWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: "circle-warning",
        intent: "warning"
      }));
    case 'error':
      return renderWithWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: "circle-cancel",
        intent: "danger"
      }));
    case 'validating':
      return renderWithWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: "loading",
        intent: "success",
        spin: true
      }));
  }
};
var ValidateIcon$1 = ValidateIcon;

var isInput = function isInput(element) {
  var elementType = element.type;
  return elementType.displayName === INPUT_DISPLAY_NAME;
};

var getValidateSuffixElement = function getValidateSuffixElement(children, validateStatus) {
  var _children$props = children.props,
    suffix = _children$props.suffix,
    size = _children$props.size;
  var suffixElement = typeof suffix === 'string' ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: suffix,
    intent: "subdued-text",
    "data-test-id": "input-suffix-icon"
  }) : suffix;
  return /*#__PURE__*/React__default.createElement(ValidateSuffixWrapper, {
    "data-test-id": "validate-suffix-wrapper"
  }, suffixElement, /*#__PURE__*/React__default.createElement(ValidateIcon$1, {
    status: validateStatus,
    size: size
  }));
};
var getValidatedChildren = function getValidatedChildren(children, validateStatus) {
  if (validateStatus === undefined) {
    return children;
  }
  if (isInput(children)) {
    return /*#__PURE__*/React__default.cloneElement(children, Object.assign(Object.assign({}, children.props), {
      suffix: getValidateSuffixElement(children, validateStatus)
    }));
  }
  var size = children.props.size;
  return /*#__PURE__*/React__default.createElement(TextAreaWrapper, {
    themeSize: size !== undefined ? size : 'medium',
    "data-test-id": "text-area-field-wrapper"
  }, children, /*#__PURE__*/React__default.createElement(ValidateIcon$1, {
    status: validateStatus
  }));
};
var Field = function Field(_ref) {
  var children = _ref.children,
    validateStatus = _ref.validateStatus,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var validatedChildren = getValidatedChildren(children, validateStatus);
  return /*#__PURE__*/React__default.createElement(FieldWrapper, {
    themeStatus: validateStatus,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, validatedChildren);
};
var Field$1 = Field;

var Form = {
  Field: Field$1
};
var Form$1 = Form;

var VerticalItem = styled.li.withConfig({
  displayName: "StyledNavigation__VerticalItem",
  componentId: "sc-wxpxx9-0"
})(["&&{margin:0;padding:", ";border-radius:", ";cursor:pointer;display:flex;align-items:center;}&&:hover{background-color:", ";", ";}&&{", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.inPageNavigation.space.itemPadding;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.inPageNavigation.radii.item;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.inPageNavigation.colors.itemHoverBackgound;
}, function (_ref4) {
  var themeDisabledState = _ref4.themeDisabledState;
  if (themeDisabledState) {
    return css$2(["cursor:not-allowed;background-color:transparent;"]);
  }
}, function (_ref5) {
  var theme = _ref5.theme,
    themeClickedState = _ref5.themeClickedState;
  switch (themeClickedState) {
    case true:
      return css$2(["background-color:", " !important;"], theme.__hd__.inPageNavigation.colors.itemClickedBackground);
    case false:
      return css$2([""]);
  }
});
var VerticalWrapper = styled.ul.withConfig({
  displayName: "StyledNavigation__VerticalWrapper",
  componentId: "sc-wxpxx9-1"
})(["&&{margin:0;padding:0;list-style-type:none;}&& > ", ":not(:last-child){margin-bottom:", ";}"], VerticalItem, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.inPageNavigation.space.itemMarginBottom;
});
var HorizontalItem = styled.li.withConfig({
  displayName: "StyledNavigation__HorizontalItem",
  componentId: "sc-wxpxx9-2"
})(["&&{margin:0;padding:", ";border-radius:", ";cursor:pointer;flex:1;display:flex;align-items:center;}&&:hover{background-color:", ";", ";}&&{", ";}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.inPageNavigation.space.itemPadding;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.inPageNavigation.radii.item;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.inPageNavigation.colors.itemHoverBackgound;
}, function (_ref10) {
  var themeDisabledState = _ref10.themeDisabledState;
  if (themeDisabledState) {
    return css$2(["cursor:not-allowed;background-color:transparent;"]);
  }
}, function (_ref11) {
  var theme = _ref11.theme,
    themeClickedState = _ref11.themeClickedState;
  switch (themeClickedState) {
    case true:
      return css$2(["background-color:", " !important;"], theme.__hd__.inPageNavigation.colors.itemClickedBackground);
    case false:
      return css$2([""]);
  }
});
var HorizontalContainer = styled.div.withConfig({
  displayName: "StyledNavigation__HorizontalContainer",
  componentId: "sc-wxpxx9-3"
})(["&&{margin:0;padding:0;width:100%;}"]);
var HorizontalWrapper = styled.ul.withConfig({
  displayName: "StyledNavigation__HorizontalWrapper",
  componentId: "sc-wxpxx9-4"
})(["&&{margin:0;padding:0;list-style-type:none;display:flex;align-items:center;justify-content:space-between;}&& > ", ":not(:last-child){margin-right:", ";}"], HorizontalItem, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.inPageNavigation.space.itemMarginRight;
});
var MoreItem = styled.li.withConfig({
  displayName: "StyledNavigation__MoreItem",
  componentId: "sc-wxpxx9-5"
})(["&&{margin:0;padding:", ";cursor:pointer;display:flex;align-items:center;}&&:hover{background-color:", ";", ";}&&{", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.inPageNavigation.space.itemPadding;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.inPageNavigation.colors.itemHoverBackgound;
}, function (_ref15) {
  var themeDisabledState = _ref15.themeDisabledState;
  if (themeDisabledState) {
    return css$2(["cursor:not-allowed;background-color:transparent;"]);
  }
}, function (_ref16) {
  var theme = _ref16.theme,
    themeClickedState = _ref16.themeClickedState;
  switch (themeClickedState) {
    case true:
      return css$2(["background-color:", " !important;"], theme.__hd__.inPageNavigation.colors.itemClickedBackground);
    case false:
      return css$2([""]);
  }
});
var IconListWrapper = styled.div.withConfig({
  displayName: "StyledNavigation__IconListWrapper",
  componentId: "sc-wxpxx9-6"
})(["&&{margin-left:auto;display:flex;align-items:center;gap:", ";}&& > ", "{font-size:inherit;}"], function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.inPageNavigation.space.itemGap;
}, StyledIconButton);

var ITEM_BREAKPOINT = 4;
var MORE_BUTTON_ID = '__hd__more';
var SuffixSection = function SuffixSection(_ref) {
  var item = _ref.item;
  var actions = item.actions,
    disabledReason = item.disabledReason,
    disabled = item.disabled,
    suffix = item.suffix,
    id = item.id;
  return !disabledReason ? /*#__PURE__*/React__default.createElement(IconListWrapper, null, suffix && /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: suffix.icon,
    intent: disabled ? 'subdued-text' : suffix.intent,
    "data-test-id": "".concat(id, "-suffix-icon")
  }), actions && actions.map(function (_ref2, index) {
    var icon = _ref2.icon,
      onClick = _ref2.onClick,
      intent = _ref2.intent;
    return /*#__PURE__*/React__default.createElement(IconButton$1, {
      key: "".concat(icon, "-action"),
      icon: icon,
      disabled: disabled,
      onClick: onClick,
      intent: disabled ? 'subdued-text' : intent,
      "data-test-id": "".concat(id, "-actions-icon-").concat(index)
    });
  })) : null;
};
var InPageNavigation = function InPageNavigation(_ref3) {
  var heading = _ref3.heading,
    items = _ref3.items,
    onClickItem = _ref3.onClickItem,
    selectedItemId = _ref3.selectedItemId,
    _ref3$variant = _ref3.variant,
    variant = _ref3$variant === void 0 ? 'vertical' : _ref3$variant,
    id = _ref3.id,
    className = _ref3.className,
    style = _ref3.style,
    _ref3$sx = _ref3.sx,
    sx = _ref3$sx === void 0 ? {} : _ref3$sx,
    dataTestId = _ref3['data-test-id'];
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  var sxCss = useCss(sx);
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    beingClickedItemId = _useState2[0],
    setBeingClickedItemId = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    openMoreItems = _useState4[0],
    setOpenMoreItems = _useState4[1];
  var removedHeaderItems = Object.values(items).flat();
  var shownItems = ITEM_BREAKPOINT < removedHeaderItems.length ? removedHeaderItems.slice(0, ITEM_BREAKPOINT) : removedHeaderItems;
  var moreItems = ITEM_BREAKPOINT < removedHeaderItems.length ? removedHeaderItems.slice(ITEM_BREAKPOINT, removedHeaderItems.length) : [];
  var generateTextIntent = function generateTextIntent(item, selectedId) {
    if (item.disabled) return 'subdued';
    return item.id === selectedId ? 'main' : 'body';
  };
  var moreButton = /*#__PURE__*/React__default.createElement(HorizontalItem, {
    onMouseDown: function onMouseDown() {
      return setBeingClickedItemId(MORE_BUTTON_ID);
    },
    onClick: function onClick() {
      setOpenMoreItems(function (open) {
        return !open;
      });
      setBeingClickedItemId(undefined);
    },
    themeClickedState: beingClickedItemId === MORE_BUTTON_ID,
    themeBreakPoint: 1
  }, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    tagName: "span",
    intent: "body",
    style: {
      display: 'flex',
      alignItems: 'center'
    }
  }, t('More'), /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "arrow-down",
    sx: {
      ml: 'small'
    }
  })));
  var moreItemList = /*#__PURE__*/React__default.createElement(Menu, null, moreItems.map(function (item) {
    var _a;
    return /*#__PURE__*/React__default.createElement(MoreItem, {
      key: item.id,
      onMouseDown: function onMouseDown() {
        return setBeingClickedItemId(item.id);
      },
      onClick: function onClick() {
        if (!item.disabled) {
          onClickItem(item);
        }
        setBeingClickedItemId(undefined);
        setOpenMoreItems(false);
      },
      themeClickedState: beingClickedItemId === item.id,
      themeDisabledState: item.disabled
    }, item.prefix && /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: item.prefix.icon,
      intent: item.disabled ? 'subdued-text' : (_a = item.prefix) === null || _a === void 0 ? void 0 : _a.intent,
      sx: {
        mr: 'small'
      },
      "data-test-id": "".concat(item.id, "-prefix-icon")
    }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      tagName: "span",
      intent: generateTextIntent(item, selectedItemId),
      fontWeight: item.id === selectedItemId ? 'semi-bold' : 'regular',
      sx: {
        mr: 'large',
        flex: '1'
      }
    }, item.text), item.disabledReason && /*#__PURE__*/React__default.createElement(Tooltip$1, {
      target: /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: "lock",
        intent: "disabled-text"
      }),
      content: item.disabledReason,
      sx: {
        ml: 'auto'
      }
    }), /*#__PURE__*/React__default.createElement(SuffixSection, {
      item: item
    }));
  }));
  switch (variant) {
    case 'vertical':
      return /*#__PURE__*/React__default.createElement(VerticalWrapper, {
        className: className,
        id: id,
        "data-test-id": dataTestId,
        style: Object.assign(Object.assign({}, style), sxCss)
      }, heading !== undefined && /*#__PURE__*/React__default.createElement(Box$1, {
        pl: "small",
        mb: "medium"
      }, /*#__PURE__*/React__default.createElement(Typography$1.Title, {
        level: 4
      }, heading)), Object.entries(items).map(function (entry) {
        var _entry = _slicedToArray(entry, 2),
          subHeader = _entry[0],
          subItems = _entry[1];
        return /*#__PURE__*/React__default.createElement(Fragment, {
          key: subHeader
        }, subHeader !== '' && /*#__PURE__*/React__default.createElement(Box$1, {
          pl: "small",
          mb: "small",
          mt: "small"
        }, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
          fontSize: 16,
          fontWeight: "semi-bold"
        }, subHeader)), subItems.map(function (item) {
          var _a;
          return /*#__PURE__*/React__default.createElement(VerticalItem, {
            key: item.id,
            onMouseDown: function onMouseDown() {
              return setBeingClickedItemId(item.id);
            },
            onClick: function onClick() {
              if (!item.disabled) {
                onClickItem(item);
              }
              setBeingClickedItemId(undefined);
            },
            themeClickedState: beingClickedItemId === item.id,
            themeDisabledState: !!item.disabled
          }, item.prefix && /*#__PURE__*/React__default.createElement(Icon$1, {
            icon: item.prefix.icon,
            intent: item.disabled ? 'subdued-text' : (_a = item.prefix) === null || _a === void 0 ? void 0 : _a.intent,
            size: "xlarge",
            sx: {
              mr: 'small'
            },
            "data-test-id": "".concat(item.id, "-prefix-icon")
          }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
            tagName: "span",
            intent: generateTextIntent(item, selectedItemId),
            fontWeight: item.id === selectedItemId ? 'semi-bold' : 'regular',
            sx: {
              flex: '1'
            }
          }, item.text), item.disabledReason && /*#__PURE__*/React__default.createElement(Tooltip$1, {
            target: /*#__PURE__*/React__default.createElement(Icon$1, {
              icon: "lock",
              intent: "disabled-text"
            }),
            content: item.disabledReason,
            sx: {
              ml: 'auto'
            }
          }), /*#__PURE__*/React__default.createElement(SuffixSection, {
            item: item
          }));
        }));
      }));
    case 'horizontal':
      return /*#__PURE__*/React__default.createElement(HorizontalContainer, null, /*#__PURE__*/React__default.createElement(HorizontalWrapper, {
        className: className,
        id: id,
        "data-test-id": dataTestId,
        style: Object.assign(Object.assign({}, style), sxCss)
      }, shownItems.map(function (item) {
        var _a;
        return /*#__PURE__*/React__default.createElement(HorizontalItem, {
          key: item.id,
          onMouseDown: function onMouseDown() {
            return setBeingClickedItemId(item.id);
          },
          onClick: function onClick() {
            if (!item.disabled) {
              onClickItem(item);
            }
            setBeingClickedItemId(undefined);
          },
          themeClickedState: beingClickedItemId === item.id,
          themeDisabledState: !!item.disabled,
          themeBreakPoint: ITEM_BREAKPOINT + 1
        }, item.prefix && /*#__PURE__*/React__default.createElement(Icon$1, {
          icon: item.prefix.icon,
          intent: item.disabled ? 'subdued-text' : (_a = item.prefix) === null || _a === void 0 ? void 0 : _a.intent,
          size: "xlarge",
          sx: {
            mr: 'small'
          },
          "data-test-id": "".concat(item.id, "-prefix-icon")
        }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
          tagName: "span",
          intent: generateTextIntent(item, selectedItemId),
          fontWeight: item.id === selectedItemId ? 'semi-bold' : 'regular',
          sx: {
            flex: '1'
          }
        }, item.text), item.disabledReason && /*#__PURE__*/React__default.createElement(Tooltip$1, {
          target: /*#__PURE__*/React__default.createElement(Icon$1, {
            icon: "lock",
            intent: "disabled-text"
          }),
          content: item.disabledReason,
          sx: {
            ml: 'auto'
          }
        }), /*#__PURE__*/React__default.createElement(SuffixSection, {
          item: item
        }));
      }), moreItems.length > 0 && /*#__PURE__*/React__default.createElement(Dropdown$1, {
        open: openMoreItems,
        content: moreItemList,
        target: moreButton,
        onClose: function onClose() {
          return setOpenMoreItems(false);
        },
        placement: "bottom-right"
      })));
  }
};
var InPageNavigation$1 = InPageNavigation;

var fadeIn$1 = keyframes(["from{opacity:0;}to{opacity:1;}"]);
var zoomIn = keyframes(["from{transform:scale(0.5);}to{transform:scale(1);}"]);
var ModalContainer = styled.div.withConfig({
  displayName: "StyledModal__ModalContainer",
  componentId: "sc-u7e2ur-0"
})(["&&{position:fixed;z-index:9999;left:0;top:0;width:100%;height:100%;overflow:auto;margin:0;padding:0;", ";}"], function (_ref) {
  var themeOpen = _ref.themeOpen;
  switch (themeOpen) {
    case true:
      return css$2(["display:block;"]);
    case false:
      return css$2(["display:none;"]);
  }
});
var ModalOverlay = styled.div.withConfig({
  displayName: "StyledModal__ModalOverlay",
  componentId: "sc-u7e2ur-1"
})(["&&{position:fixed;left:0;top:0;width:100%;height:100%;margin:0;padding:0;overflow:auto;background-color:", ";animation:", " 0.2s linear;}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.modal.colors.containerBackground;
}, fadeIn$1);
var ModalContentWrapper = styled.div.withConfig({
  displayName: "StyledModal__ModalContentWrapper",
  componentId: "sc-u7e2ur-2"
})(["&&{position:absolute;display:flex;align-items:center;justify-content:center;width:100%;min-height:100vh;pointer-events:none;margin:0;padding:0;box-sizing:border-box;padding-top:", ";padding-bottom:", ";}"], function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.modal.space.wrapperPaddingY;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.modal.space.wrapperPaddingY;
});
var ModalContent = styled.div.withConfig({
  displayName: "StyledModal__ModalContent",
  componentId: "sc-u7e2ur-3"
})(["&&{display:flex;flex-direction:column;max-height:100%;background-color:", ";border-radius:", ";pointer-events:all;animation:", " 0.2s linear;min-width:", ";max-width:", ";width:100%;margin:0;padding:0;}@media (min-width:", "){&&{", "}}@media (min-width:", "){&&{", "}}@media (min-width:", "){&&{", "}}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.modal.colors.contentBackground;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.modal.radii.content;
}, zoomIn, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.modal.sizes.contentSmallMinWidth;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.modal.sizes.contentSmallMaxWidth;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.breakpoints.medium;
}, function (_ref10) {
  var themeSize = _ref10.themeSize,
    theme = _ref10.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["min-width:", ";max-width:", ";"], theme.__hd__.modal.sizes.contentSmallMinWidth, theme.__hd__.modal.sizes.contentSmallMaxWidth);
    case 'medium':
      return css$2(["min-width:", ";max-width:", ";"], theme.__hd__.modal.sizes.contentMediumMinWidth, theme.__hd__.modal.sizes.contentMediumMaxWidth);
    case 'large':
    case 'xlarge':
    case 'xxlarge':
      return css$2(["min-width:", ";max-width:", ";"], theme.__hd__.modal.sizes.contentLargeMinWidth, theme.__hd__.modal.sizes.contentLargeMaxWidth);
  }
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.breakpoints.large;
}, function (_ref12) {
  var themeSize = _ref12.themeSize,
    theme = _ref12.theme;
  switch (themeSize) {
    case 'xlarge':
    case 'xxlarge':
      return css$2(["min-width:", ";max-width:", ";"], theme.__hd__.modal.sizes.contentExtraLargeMinWidth, theme.__hd__.modal.sizes.contentExtraLargeMaxWidth);
    default:
      return css$2([""]);
  }
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.breakpoints.xlarge;
}, function (_ref14) {
  var themeSize = _ref14.themeSize,
    theme = _ref14.theme;
  switch (themeSize) {
    case 'xxlarge':
      return css$2(["min-width:", ";max-width:", ";"], theme.__hd__.modal.sizes.contentDoubleExtraLargeMinWidth, theme.__hd__.modal.sizes.contentDoubleExtraLargeMaxWidth);
    default:
      return css$2([""]);
  }
});
var ModalHeader$2 = styled.div.withConfig({
  displayName: "StyledModal__ModalHeader",
  componentId: "sc-u7e2ur-4"
})(["&&{border-radius:", ";margin:0;padding:", ";font-size:", ";font-weight:", ";line-height:", ";display:flex;", ";}"], function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.modal.radii.header;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.modal.space.headerPadding;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.modal.fontSizes.header;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.modal.fontWeights.header;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.modal.lineHeights.header;
}, function (_ref20) {
  var themeVariant = _ref20.themeVariant,
    theme = _ref20.theme;
  switch (themeVariant) {
    case 'basic':
      return css$2(["background-color:", ";color:", ";"], theme.__hd__.modal.colors.headerBasicBackground, theme.__hd__.modal.colors.headerBasic);
    case 'primary':
      return css$2(["background-color:", ";color:", ";"], theme.__hd__.modal.colors.headerPrimaryBackground, theme.__hd__.modal.colors.headerPrimary);
    case undefined:
      return css$2([""]);
  }
});
var ModalBody$2 = styled.div.withConfig({
  displayName: "StyledModal__ModalBody",
  componentId: "sc-u7e2ur-5"
})(["&&{font-size:", ";line-height:", ";font-weight:", ";color:", ";margin:0;overflow:auto;", ";}"], function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.modal.fontSizes.body;
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.modal.lineHeights.body;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.modal.fontWeights.body;
}, function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.modal.colors.body;
}, function (_ref25) {
  var themeIsPopUp = _ref25.themeIsPopUp,
    theme = _ref25.theme;
  switch (themeIsPopUp) {
    case true:
      return css$2(["padding:", ";"], theme.__hd__.modal.space.popUpBodyPadding);
    case false:
      return css$2(["padding:", ";"], theme.__hd__.modal.space.bodyPadding);
  }
});
var CloseButton$1 = styled.button.withConfig({
  displayName: "StyledModal__CloseButton",
  componentId: "sc-u7e2ur-6"
})(["&&{display:flex;align-items:center;border:none;background:transparent;font-size:inherit;margin:0;margin-left:auto;padding:0;color:inherit;}&&:hover{cursor:pointer;}&&:focus{outline:none;}"]);
var ModalFooter$2 = styled.div.withConfig({
  displayName: "StyledModal__ModalFooter",
  componentId: "sc-u7e2ur-7"
})(["&&{text-align:right;margin:0;padding:", ";}"], function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.modal.space.footerPadding;
});
var HeaderFooterWrapper = styled.div.withConfig({
  displayName: "StyledModal__HeaderFooterWrapper",
  componentId: "sc-u7e2ur-8"
})(["&&{margin:0;padding:0;}"]);
var PopUpModalBodyContainer = styled.div.withConfig({
  displayName: "StyledModal__PopUpModalBodyContainer",
  componentId: "sc-u7e2ur-9"
})(["&&{display:flex;margin:0;padding:0;}"]);
var PopUpModalBodyTextWrapper = styled.div.withConfig({
  displayName: "StyledModal__PopUpModalBodyTextWrapper",
  componentId: "sc-u7e2ur-10"
})(["&&{flex:1;margin:0;padding:0;}"]);
var TitleSpacing = styled.div.withConfig({
  displayName: "StyledModal__TitleSpacing",
  componentId: "sc-u7e2ur-11"
})(["&&{margin:0;padding:0;margin-bottom:", ";}"], function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.modal.space.popUpTitleMarginBottom;
});
var IconWrapper$1 = styled.div.withConfig({
  displayName: "StyledModal__IconWrapper",
  componentId: "sc-u7e2ur-12"
})(["&&{font-size:", ";margin:0;padding:0;margin-right:", ";}"], function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.modal.fontSizes.popUpIcon;
}, function (_ref29) {
  var theme = _ref29.theme;
  return theme.__hd__.modal.space.popUpIconMarginRight;
});

var ModalContext = /*#__PURE__*/React__default.createContext({});
var ModalContext$1 = ModalContext;

var ModalBody = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _React$useContext = React__default.useContext(ModalContext$1),
    isPopupModal = _React$useContext.isPopupModal;
  return /*#__PURE__*/React__default.createElement(ModalBody$2, {
    themeIsPopUp: isPopupModal,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    ref: forwardedRef
  }, children);
});
ModalBody.displayName = 'ModalBody';
var ModalBody$1 = ModalBody;

var CloseButton = function CloseButton(_ref) {
  var onClick = _ref.onClick,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(CloseButton$1, {
    type: "button",
    onClick: onClick,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "cancel"
  }));
};
var ModalCloseButton = CloseButton;

var ModalFooter = function ModalFooter(_ref) {
  var children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(ModalFooter$2, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, children);
};
var ModalFooter$1 = ModalFooter;

var ModalHeader = function ModalHeader(_ref) {
  var children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _React$useContext = React__default.useContext(ModalContext$1),
    variant = _React$useContext.variant;
  return /*#__PURE__*/React__default.createElement(ModalHeader$2, {
    themeVariant: variant,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, children);
};
var ModalHeader$1 = ModalHeader;

var Modal = function Modal(_ref) {
  var title = _ref.title,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    onClose = _ref.onClose,
    _ref$canOutsideClickC = _ref.canOutsideClickClose,
    canOutsideClickClose = _ref$canOutsideClickC === void 0 ? true : _ref$canOutsideClickC,
    body = _ref.body,
    footer = _ref.footer,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$withPortal = _ref.withPortal,
    withPortal = _ref$withPortal === void 0 ? false : _ref$withPortal,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  useScrollLock(open);
  var contextValue = useMemo(function () {
    return {
      isPopupModal: false,
      variant: variant
    };
  }, [variant]);
  return /*#__PURE__*/React__default.createElement(Portal$1, {
    withPortal: withPortal,
    container: getDefaultPortalContainer()
  }, /*#__PURE__*/React__default.createElement(ModalContainer
  // eslint-disable-next-line no-unneeded-ternary
  , {
    // eslint-disable-next-line no-unneeded-ternary
    themeOpen: open ? true : false,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(ModalContext$1.Provider, {
    value: contextValue
  }, /*#__PURE__*/React__default.createElement(ModalOverlay, {
    onClick: canOutsideClickClose === true ? onClose : undefined
  }), /*#__PURE__*/React__default.createElement(ModalContentWrapper, {
    style: children === undefined ? {
      height: '100vh'
    } : undefined
  }, /*#__PURE__*/React__default.createElement(ModalContent, {
    themeSize: size,
    "data-test-id": "modal-content"
  }, title !== undefined && /*#__PURE__*/React__default.createElement(HeaderFooterWrapper, null, /*#__PURE__*/React__default.createElement(ModalHeader$1, null, title, onClose !== undefined && /*#__PURE__*/React__default.createElement(ModalCloseButton, {
    "data-test-id": "modal-close-button",
    onClick: function onClick(e) {
      e.preventDefault();
      onClose();
    }
  })), variant === 'basic' && /*#__PURE__*/React__default.createElement(Divider$1, {
    marginX: "medium"
  })), body !== undefined && /*#__PURE__*/React__default.createElement(ModalBody$1, null, body), footer !== undefined && /*#__PURE__*/React__default.createElement(HeaderFooterWrapper, null, /*#__PURE__*/React__default.createElement(Divider$1, {
    marginX: "medium"
  }), /*#__PURE__*/React__default.createElement(ModalFooter$1, null, footer)), children)))));
};
var Modal$1 = Modal;

var ICON_MAP = {
  info: {
    icon: 'circle-info-outlined',
    intent: 'info'
  },
  success: {
    icon: 'circle-ok-outlined',
    intent: 'success'
  },
  warning: {
    icon: 'circle-warning-outlined',
    intent: 'warning'
  },
  danger: {
    icon: 'circle-warning-outlined',
    intent: 'danger'
  },
  confirm: {
    icon: 'circle-question-outlined',
    intent: 'error'
  }
};
var PopUpModal = function PopUpModal(_ref) {
  var title = _ref.title,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'confirm' : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'small' : _ref$size,
    onClose = _ref.onClose,
    _ref$canOutsideClickC = _ref.canOutsideClickClose,
    canOutsideClickClose = _ref$canOutsideClickC === void 0 ? true : _ref$canOutsideClickC,
    body = _ref.body,
    footer = _ref.footer,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$withPortal = _ref.withPortal,
    withPortal = _ref$withPortal === void 0 ? false : _ref$withPortal,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  useScrollLock(open);
  var modalIcon = ICON_MAP[variant];
  var modalBody = /*#__PURE__*/React__default.createElement(PopUpModalBodyContainer, null, /*#__PURE__*/React__default.createElement(IconWrapper$1, null, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: modalIcon.icon,
    intent: modalIcon.intent
  })), /*#__PURE__*/React__default.createElement(PopUpModalBodyTextWrapper, null, title !== undefined && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Typography$1.Title, {
    level: 5
  }, title), /*#__PURE__*/React__default.createElement(TitleSpacing, null)), body));
  var contextValue = useMemo(function () {
    return {
      isPopupModal: true
    };
  }, []);
  return /*#__PURE__*/React__default.createElement(Portal$1, {
    withPortal: withPortal,
    container: getDefaultPortalContainer()
  }, /*#__PURE__*/React__default.createElement(ModalContainer, {
    themeOpen: !!open,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(ModalContext$1.Provider, {
    value: contextValue
  }, /*#__PURE__*/React__default.createElement(ModalOverlay, {
    onClick: canOutsideClickClose === true ? onClose : undefined
  }), /*#__PURE__*/React__default.createElement(ModalContentWrapper, null, /*#__PURE__*/React__default.createElement(ModalContent, {
    themeSize: size,
    "data-test-id": "modal-content"
  }, /*#__PURE__*/React__default.createElement(ModalBody$1, null, modalBody), footer !== undefined && /*#__PURE__*/React__default.createElement(ModalFooter$1, null, footer))))));
};
var PopUpModal$1 = PopUpModal;

var CompoundModal = Modal$1;
CompoundModal.PopUp = PopUpModal$1;
CompoundModal.Header = ModalHeader$1;
CompoundModal.Body = ModalBody$1;
CompoundModal.Footer = ModalFooter$1;
CompoundModal.CloseButton = ModalCloseButton;
var CompoundModal$1 = CompoundModal;

var StyledIconWrapper$1 = styled.div.withConfig({
  displayName: "StyledNotification__StyledIconWrapper",
  componentId: "sc-pqxz6w-0"
})(["&&{display:flex;align-items:center;margin:", " ", " 0 0;padding:0;line-height:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.notification.space.iconMarginTop;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.notification.space.iconMarginRight;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.notification.lineHeights.icon;
});
var StyledInner = styled.div.withConfig({
  displayName: "StyledNotification__StyledInner",
  componentId: "sc-pqxz6w-1"
})(["&&{flex:1;margin:0;padding:0;}"]);
var StyledTitle = styled.div.withConfig({
  displayName: "StyledNotification__StyledTitle",
  componentId: "sc-pqxz6w-2"
})(["&&{color:", ";font-size:", ";font-weight:", ";line-height:", ";margin:0;padding:0;margin-bottom:", ";}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.notification.colors.title;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.notification.fontSizes.title;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.notification.fontWeights.title;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.notification.lineHeights.title;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.notification.space.titleMarginBottom;
});
var StyledContent = styled.div.withConfig({
  displayName: "StyledNotification__StyledContent",
  componentId: "sc-pqxz6w-3"
})(["&&{color:", ";font-size:", ";font-weight:", ";line-height:", ";margin:0;padding:0;}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.notification.colors.content;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.notification.fontSizes.content;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.notification.fontWeights.content;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.notification.lineHeights.content;
});
var StyledNotification = styled.div.withConfig({
  displayName: "StyledNotification",
  componentId: "sc-pqxz6w-4"
})(["&&{display:flex;align-items:flex-start;margin:0;background-color:", ";border-radius:", ";padding:", ";box-shadow:", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.notification.colors.bg;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.notification.radii["default"];
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.notification.space.padding;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.notification.shadows["default"];
});
var StyledCloseButton = styled.div.withConfig({
  displayName: "StyledNotification__StyledCloseButton",
  componentId: "sc-pqxz6w-5"
})(["&&{padding:0;margin:", " 0 0 auto;line-height:", ";}"], function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.notification.space.iconMarginTop;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.notification.lineHeights.icon;
});
var StyledNotification$1 = StyledNotification;

var getIcon = function getIcon(intent) {
  switch (intent) {
    case 'success':
      return {
        icon: 'circle-ok',
        intent: 'success'
      };
    case 'info':
      return {
        icon: 'circle-info',
        intent: 'info'
      };
    case 'warning':
      return {
        icon: 'circle-warning',
        intent: 'warning'
      };
    case 'danger':
      return {
        icon: 'circle-cancel',
        intent: 'danger'
      };
    case 'error':
      return {
        icon: 'circle-cancel',
        intent: 'error'
      };
    default:
      return {
        icon: 'circle-ok',
        intent: 'success'
      };
  }
};
var getNotificationIcon = function getNotificationIcon(defaultIcon, icon) {
  if (icon === undefined) {
    return some(left$1(defaultIcon));
  }
  if (typeof icon === 'string') {
    return some(left$1(icon));
  }
  if ( /*#__PURE__*/React__default.isValidElement(icon)) {
    return some(right$1(icon));
  }
  return none$3;
};
var Notification = function Notification(_ref) {
  var _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'info' : _ref$intent,
    title = _ref.title,
    content = _ref.content,
    icon = _ref.icon,
    onClose = _ref.onClose,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _getIcon = getIcon(intent),
    defaultIcon = _getIcon.icon,
    iconIntent = _getIcon.intent;
  var maybeIcon = getNotificationIcon(defaultIcon, icon);
  var renderWithIconWrapper = function renderWithIconWrapper(iconEle) {
    return /*#__PURE__*/React__default.createElement(StyledIconWrapper$1, null, iconEle);
  };
  return /*#__PURE__*/React__default.createElement(StyledNotification$1, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, pipe(maybeIcon, map$2(match$2A(function (iconString) {
    return renderWithIconWrapper( /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: iconString,
      intent: iconIntent,
      size: "xlarge",
      "data-test-id": "notification-icon"
    }));
  }, renderWithIconWrapper)), getOrElse(function () {
    return null;
  })), /*#__PURE__*/React__default.createElement(StyledInner, null, /*#__PURE__*/React__default.createElement(StyledTitle, null, title), /*#__PURE__*/React__default.createElement(StyledContent, null, content)), onClose !== undefined && /*#__PURE__*/React__default.createElement(StyledCloseButton, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    icon: "cancel",
    intent: "subdued-text",
    onClick: onClose,
    "data-test-id": "close-notification-button"
  })));
};
var Notification$1 = Notification;

var PageHeaderWrapper = styled.div.withConfig({
  displayName: "StyledPageHeader__PageHeaderWrapper",
  componentId: "sc-5c64ks-0"
})(["&&{margin:0;padding:0;}"]);
var TitleWrapper$1 = styled.div.withConfig({
  displayName: "StyledPageHeader__TitleWrapper",
  componentId: "sc-5c64ks-1"
})(["&&{margin:", ";padding:0;font-size:", ";font-weight:", ";color:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.pageHeader.space.titleMargin;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.pageHeader.fontSizes.title;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.pageHeader.fontWeights.title;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.pageHeader.colors.title;
});

var PageHeader = function PageHeader(_ref) {
  var breadcrumbItems = _ref.breadcrumbItems,
    title = _ref.title,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(PageHeaderWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, breadcrumbItems !== undefined && /*#__PURE__*/React__default.createElement(Breadcrumb$1, {
    items: breadcrumbItems
  }), /*#__PURE__*/React__default.createElement(TitleWrapper$1, null, title));
};
var PageHeader$1 = PageHeader;

var PaginationWrapper = styled.div.withConfig({
  displayName: "StyledPagination__PaginationWrapper",
  componentId: "sc-sctekm-0"
})(["&&{display:flex;margin:0;padding:0;align-items:center;}"]);
var PageNumber = styled.button.withConfig({
  displayName: "StyledPagination__PageNumber",
  componentId: "sc-sctekm-1"
})(["&&{display:flex;align-items:center;justify-content:center;height:", ";min-width:", ";margin:0;padding:0 ", ";font-size:", ";font-weight:", ";border-radius:", ";background:", ";color:", ";cursor:pointer;}&&:focus{outline:none;}&&{", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.pagination.sizes.height;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.pagination.sizes.minWidth;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.pagination.space.leftRightPadding;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.pagination.fontSizes["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.pagination.fontWeights["default"];
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.pagination.radii["default"];
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.pagination.colors.background;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.pagination.colors.number;
}, function (_ref9) {
  var themeDisplayAs = _ref9.themeDisplayAs,
    theme = _ref9.theme;
  switch (themeDisplayAs) {
    case 'pageNumber':
      return css$2(["border:none;&:hover{color:", ";}"], theme.__hd__.pagination.colors.numberActive);
    case 'activePage':
      return css$2(["color:", ";border-width:", ";border-style:solid;border-color:", ";"], theme.__hd__.pagination.colors.numberActive, theme.__hd__.pagination.borderWidths["default"], theme.__hd__.pagination.colors.numberActive);
    case 'spreading':
      return css$2(["border:none;pointer-events:none;"]);
    case 'disabled':
      return css$2(["border:none;color:", ";pointer-events:none;"], theme.__hd__.pagination.colors.numberDisabled);
    case 'navigator':
      return css$2(["border:none;"]);
  }
});

var SPREADING_SYMBOL = '-';
var generatePages = function generatePages(_ref) {
  var current = _ref.current,
    total = _ref.total;
  if (total <= 7) {
    return Array.from({
      length: total
    }, function (_, i) {
      return i + 1;
    });
  }
  if (current < 5) {
    return [1, 2, 3, 4, 5, SPREADING_SYMBOL, total];
  }
  if (current > total - 4) {
    return [1, SPREADING_SYMBOL, total - 4, total - 3, total - 2, total - 1, total];
  }
  return [1, SPREADING_SYMBOL, current - 1, current, current + 1, SPREADING_SYMBOL, total];
};
var getDisplayState = function getDisplayState(_ref2) {
  var current = _ref2.current,
    pageNumber = _ref2.pageNumber;
  if (pageNumber === SPREADING_SYMBOL) {
    return 'spreading';
  }
  if (current === pageNumber) {
    return 'activePage';
  }
  return 'pageNumber';
};

var Pagination = function Pagination(_ref) {
  var current = _ref.current,
    total = _ref.total,
    onChange = _ref.onChange,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'basic' : _ref$variant,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  assert(current !== 0, "[Pagination] 0 for 'current' prop is invalid, you may use 1 instead.");
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  var pages = generatePages({
    current: current,
    total: total
  });
  var basicVariant = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(PageNumber, {
    type: "button",
    themeDisplayAs: current === 1 ? 'disabled' : 'navigator',
    onClick: function onClick() {
      return onChange(current - 1);
    }
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "arrow-left",
    size: "small"
  })), pages.map(function (pageNumber, index) {
    var displayAs = getDisplayState({
      current: current,
      pageNumber: pageNumber
    });
    return /*#__PURE__*/React__default.createElement(PageNumber, {
      key: pageNumber !== SPREADING_SYMBOL ? pageNumber : "".concat(pageNumber, "-").concat(index),
      type: "button",
      themeDisplayAs: displayAs,
      onClick: pageNumber === SPREADING_SYMBOL ? undefined : function () {
        return onChange(pageNumber);
      }
    }, pageNumber !== SPREADING_SYMBOL ? pageNumber : /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: "more-horizontal",
      size: "xsmall",
      intent: "text"
    }));
  }), /*#__PURE__*/React__default.createElement(PageNumber, {
    type: "button",
    themeDisplayAs: current === total ? 'disabled' : 'navigator',
    onClick: function onClick() {
      return onChange(current + 1);
    }
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "arrow-right",
    size: "small"
  })));
  var compactVariant = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "previous-page",
    icon: "single-left-arrow",
    disabled: current === 1,
    intent: "primary",
    onClick: function onClick() {
      return onChange(current - 1);
    },
    sx: {
      mr: 'small'
    }
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 10
  }, "".concat(current, " ").concat(t('Of').toUpperCase(), " ").concat(total)), /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "next-page",
    icon: "single-right-arrow",
    disabled: current === total,
    intent: "primary",
    onClick: function onClick() {
      return onChange(current + 1);
    },
    sx: {
      ml: 'small'
    }
  }));
  return /*#__PURE__*/React__default.createElement(PaginationWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, variant === 'basic' ? basicVariant : compactVariant);
};
var Pagination$1 = Pagination;

var StyledPortletWrapper = styled.div.withConfig({
  displayName: "StyledPortlet__StyledPortletWrapper",
  componentId: "sc-52l9of-0"
})(["&&{display:flex;flex-direction:column;align-self:flex-start;align-content:stretch;border-radius:", ";border-width:", ";padding:", ";background-color:", ";}&& > ", "{min-height:0;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.portlet.radii.wrapper;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.portlet.borderWidths.wrapper;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.portlet.space.wrapperPadding;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.portlet.colors.wrapperBackground;
}, SpinnerContainer);
var StyledHeaderWrapper = styled.div.withConfig({
  displayName: "StyledPortlet__StyledHeaderWrapper",
  componentId: "sc-52l9of-1"
})(["&&{display:flex;align-content:center;align-items:flex-start;justify-content:space-between;margin-bottom:", ";}"], function (_ref5) {
  var theme = _ref5.theme,
    themeOpen = _ref5.themeOpen;
  return themeOpen ? theme.__hd__.portlet.space.headerWrapperMargin : 0;
});
var StyledActionWrapper = styled.div.withConfig({
  displayName: "StyledPortlet__StyledActionWrapper",
  componentId: "sc-52l9of-2"
})(["&&{display:flex;margin-left:", ";}&& > *:not(:first-child){margin-left:", ";}&& ", "{display:flex;}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.portlet.space.actionWrapperMargin;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.portlet.space.actionButtonMargin;
}, StyledIconButton);
var StyledTitleWrapper$1 = styled.div.withConfig({
  displayName: "StyledPortlet__StyledTitleWrapper",
  componentId: "sc-52l9of-3"
})(["&&{display:flex;align-content:center;align-items:center;flex-wrap:wrap;}&& > *:first-child{margin-right:", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.portlet.space.headerTitleMargin;
});

var PortletActionDropdown = function PortletActionDropdown(_a) {
  var menus = _a.menus,
    buttonProps = __rest(_a, ["menus"]);
  var _useBoolean = useBoolean(false),
    _useBoolean2 = _slicedToArray(_useBoolean, 2),
    open = _useBoolean2[0],
    dropdownActions = _useBoolean2[1];
  return /*#__PURE__*/React__default.createElement(Dropdown$1, {
    open: open,
    target: /*#__PURE__*/React__default.createElement(Button.Icon, Object.assign({}, buttonProps, {
      onClick: function onClick(e) {
        var _a;
        dropdownActions.toggle();
        (_a = buttonProps.onClick) === null || _a === void 0 ? void 0 : _a.call(buttonProps, e);
      }
    })),
    onClose: function onClose() {
      dropdownActions.off();
    },
    content: /*#__PURE__*/React__default.createElement(Menu, null, menus.map(function (menu) {
      var onItemClick = function onItemClick(e) {
        var _a, _b;
        (_b = (_a = menu.item) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);
        dropdownActions.off();
      };
      return /*#__PURE__*/React__default.createElement(Fragment, {
        key: menu.value
      }, menu.divider === 'top' && /*#__PURE__*/React__default.createElement(Divider$1, null), /*#__PURE__*/React__default.createElement(Menu.Item, Object.assign({}, menu.item, {
        onClick: onItemClick
      })), menu.divider === 'bottom' && /*#__PURE__*/React__default.createElement(Divider$1, null));
    }))
  });
};
var PortletActionDropdown$1 = PortletActionDropdown;

var Portlet = function Portlet(_ref) {
  var title = _ref.title,
    titleExtra = _ref.titleExtra,
    children = _ref.children,
    loading = _ref.loading,
    className = _ref.className,
    dataTestId = _ref['data-test-id'],
    actions = _ref.actions,
    style = _ref.style,
    id = _ref.id,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? true : _ref$open,
    _ref$keepChildrenMoun = _ref.keepChildrenMounted,
    keepChildrenMounted = _ref$keepChildrenMoun === void 0 ? false : _ref$keepChildrenMoun;
  var titleExtraElement = React__default.useMemo(function () {
    if ( /*#__PURE__*/isValidElement(titleExtra)) {
      return titleExtra;
    }
    switch (_typeof$1(titleExtra)) {
      case 'number':
        return /*#__PURE__*/React__default.createElement(Typography$1.Text, {
          fontSize: 18,
          fontWeight: "semi-bold",
          intent: "subdued"
        }, titleExtra.toString());
      case 'string':
        return /*#__PURE__*/React__default.createElement(Badge$1, {
          content: titleExtra,
          intent: "primary",
          variant: "outlined"
        });
      default:
        return null;
    }
  }, [titleExtra]);
  return /*#__PURE__*/React__default.createElement(StyledPortletWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Spinner$1, {
    loading: loading,
    size: "small"
  }, /*#__PURE__*/React__default.createElement(StyledHeaderWrapper, {
    themeOpen: open
  }, /*#__PURE__*/React__default.createElement(StyledTitleWrapper$1, null, /*#__PURE__*/isValidElement(title) ? title : /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 18,
    fontWeight: "semi-bold"
  }, title), titleExtraElement), Array.isArray(actions) && (actions === null || actions === void 0 ? void 0 : actions.length) > 0 && /*#__PURE__*/React__default.createElement(StyledActionWrapper, null, actions.map(function (_a, index) {
    var menus = _a.menus,
      buttonProps = __rest(_a, ["menus"]);
    return Array.isArray(menus) && menus.length > 0 ? /*#__PURE__*/React__default.createElement(PortletActionDropdown$1
    // eslint-disable-next-line react/no-array-index-key
    , Object.assign({
      // eslint-disable-next-line react/no-array-index-key
      key: index,
      menus: menus
    }, buttonProps)) :
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    React__default.createElement(Button.Icon, Object.assign({
      key: index
    }, buttonProps));
  }))), /*#__PURE__*/React__default.createElement(Collapse$1, {
    keepChildrenMounted: keepChildrenMounted,
    open: open
  }, children)));
};
var Portlet$1 = Portlet;

var isProgressThemeIntent = function isProgressThemeIntent(intent) {
  return ['primary', 'success', 'warning', 'danger', 'error', 'archived'].includes(intent);
};
var getColorFromProgressIntent = function getColorFromProgressIntent(_ref) {
  var theme = _ref.theme,
    intent = _ref.intent,
    getter = _ref.getter,
    fallbackColor = _ref.fallbackColor;
  return isProgressThemeIntent(intent) ? getter(intent) : fallbackColor || theme.colors.palette[camelize(intent)] || theme.colors[camelize(intent)];
};

var Wrapper$4 = styled.div.withConfig({
  displayName: "StyledProgressCircle__Wrapper",
  componentId: "sc-1pi7dtu-0"
})(["&&{box-sizing:border-box;color:", ";display:inline-block;position:relative;margin:0;padding:0;}&& svg{overflow:initial;}&&{", ";}"], function (_ref) {
  var theme = _ref.theme,
    themeIntent = _ref.themeIntent;
  return getColorFromProgressIntent({
    theme: theme,
    intent: themeIntent,
    getter: function getter(definedThemeIntent) {
      return theme.__hd__.progress.colors.circleText[definedThemeIntent];
    },
    fallbackColor: theme.colors.bodyText
  });
}, function (_ref2) {
  var themeSize = _ref2.themeSize,
    theme = _ref2.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["width:", ";height:", ";font-size:", ";"], theme.__hd__.progress.sizes.circleSmall, theme.__hd__.progress.sizes.circleSmall, theme.__hd__.progress.fontSizes.circleSmall);
    case 'medium':
      return css$2(["width:", ";height:", ";font-size:", ";"], theme.__hd__.progress.sizes.circleMedium, theme.__hd__.progress.sizes.circleMedium, theme.__hd__.progress.fontSizes.circleMedium);
    case 'large':
      return css$2(["width:", ";height:", ";font-size:", ";"], theme.__hd__.progress.sizes.circleLarge, theme.__hd__.progress.sizes.circleLarge, theme.__hd__.progress.fontSizes.circleLarge);
  }
});
var Info$1 = styled.div.withConfig({
  displayName: "StyledProgressCircle__Info",
  componentId: "sc-1pi7dtu-1"
})(["&&{display:flex;justify-content:center;position:absolute;top:50%;left:50%;width:100%;transform:translate(-50%,-50%);margin:0;padding:0;}"]);

var useGetProgressState = function useGetProgressState(_ref) {
  var value = _ref.value,
    status = _ref.status,
    intent = _ref.intent;
  assert(value >= 0 && value <= 100, "[Progress] value:".concat(value, " is not in range [0, 100]"));
  var _useState = useState(value),
    _useState2 = _slicedToArray(_useState, 2),
    percentage = _useState2[0],
    setPercentage = _useState2[1];
  var _useState3 = useState(intent),
    _useState4 = _slicedToArray(_useState3, 2),
    internalIntent = _useState4[0],
    setInternalIntent = _useState4[1];
  useEffect(function () {
    setPercentage(value);
    switch (status) {
      case 'active':
        setInternalIntent(value === 100 ? 'success' : 'primary');
        break;
      case 'exception':
        setInternalIntent('danger');
        break;
      case 'custom':
        setInternalIntent(intent);
        break;
    }
  }, [value, status, intent]);
  return {
    percentage: percentage,
    internalIntent: internalIntent
  };
};
var useGetProgressState$1 = useGetProgressState;

var FULL_CIRCLE = 295.31;
var SQUARE_SVG = '0 0 100 100';
var CIRCLE_PATH_PROPS = {
  d: "M 50,50 m 0,-47\n  a 47,47 0 1 1 0,94\n  a 47,47 0 1 1 0,-94",
  fillOpacity: 0,
  strokeLinecap: 'round',
  strokeDashoffset: '0px'
};
var STROKE_ANIMATION = {
  transition: 'stroke-dashoffset 0.4s ease 0s, stroke-dasharray 0.4s ease 0s, stroke 0.4s ease 0s, stroke-width 0.06s ease 0.3s, opacity 0.4s ease 0s'
};
var mapStrokeWidthFromSize = function mapStrokeWidthFromSize(size, theme) {
  return {
    small: theme.__hd__.progress.sizes.circleSmallStroke,
    medium: theme.__hd__.progress.sizes.circleMediumStroke,
    large: theme.__hd__.progress.sizes.circleLargeStroke
  }[size];
};
var defaultValueRenderer$1 = function defaultValueRenderer(value) {
  return "".concat(value, "%");
};
var ProgressCircle = function ProgressCircle(_ref) {
  var _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'primary' : _ref$intent,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? 'active' : _ref$status,
    _ref$withInfo = _ref.withInfo,
    withInfo = _ref$withInfo === void 0 ? true : _ref$withInfo,
    value = _ref.value,
    _ref$valueRenderer = _ref.valueRenderer,
    valueRenderer = _ref$valueRenderer === void 0 ? defaultValueRenderer$1 : _ref$valueRenderer,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var theme = useTheme();
  var _useGetProgressState = useGetProgressState$1({
      value: value,
      status: status,
      intent: intent
    }),
    internalIntent = _useGetProgressState.internalIntent,
    percentage = _useGetProgressState.percentage;
  var stroke = (percentage === undefined ? 0 : percentage) / 100 * FULL_CIRCLE;
  var strokeWidth = mapStrokeWidthFromSize(size, theme);
  return /*#__PURE__*/React__default.createElement(Wrapper$4, {
    themeSize: size,
    themeIntent: internalIntent,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement("svg", {
    viewBox: SQUARE_SVG
  }, /*#__PURE__*/React__default.createElement("path", Object.assign({
    stroke: theme.__hd__.progress.colors.progress.background,
    strokeWidth: strokeWidth,
    strokeDasharray: "".concat(FULL_CIRCLE, "px, ").concat(FULL_CIRCLE, "px")
  }, CIRCLE_PATH_PROPS)), /*#__PURE__*/React__default.createElement("path", Object.assign({
    stroke: getColorFromProgressIntent({
      theme: theme,
      intent: internalIntent,
      getter: function getter(themeIntent) {
        return theme.__hd__.progress.colors.progress[themeIntent];
      }
    }),
    strokeWidth: strokeWidth,
    strokeDasharray: "".concat(stroke, "px, ").concat(FULL_CIRCLE, "px"),
    style: STROKE_ANIMATION
  }, CIRCLE_PATH_PROPS))), withInfo === true && /*#__PURE__*/React__default.createElement(Info$1, null, status === 'exception' && /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "cancel",
    intent: "danger"
  }), status === 'active' && percentage === 100 && /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "checkmark",
    intent: "success"
  }), (status === 'active' && percentage < 100 || status === 'custom') && valueRenderer(percentage)));
};
var ProgressCircle$1 = ProgressCircle;

var Wrapper$3 = styled.div.withConfig({
  displayName: "StyledProgressBar__Wrapper",
  componentId: "sc-tk6j72-0"
})(["&&{box-sizing:border-box;color:", ";position:relative;display:flex;align-items:center;margin:0;padding:0;font-weight:", ";", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.progress.colors.text;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.progress.fontWeights["default"];
}, function (_ref3) {
  var themeSize = _ref3.themeSize,
    themeVariant = _ref3.themeVariant,
    theme = _ref3.theme;
  switch ("".concat(themeSize, "-").concat(themeVariant)) {
    case 'small-horizontal':
      return css$2(["font-size:", ";line-height:", ";height:", ";"], theme.__hd__.progress.fontSizes.barSmall, theme.__hd__.progress.lineHeights.barSmall, theme.__hd__.progress.sizes.barWrapperSmall);
    case 'small-vertical':
      return css$2(["font-size:", ";line-height:", ";width:", ";height:100%;flex-direction:column-reverse;"], theme.__hd__.progress.fontSizes.barSmall, theme.__hd__.progress.lineHeights.barSmall, theme.__hd__.progress.sizes.barWrapperSmall);
    case 'medium-horizontal':
      return css$2(["font-size:", ";line-height:", ";height:", ";"], theme.__hd__.progress.fontSizes.barMedium, theme.__hd__.progress.lineHeights.barMedium, theme.__hd__.progress.sizes.barWrapperMedium);
    case 'medium-vertical':
      return css$2(["font-size:", ";line-height:", ";width:", ";height:100%;flex-direction:column-reverse;"], theme.__hd__.progress.fontSizes.barMedium, theme.__hd__.progress.lineHeights.barMedium, theme.__hd__.progress.sizes.barWrapperMedium);
  }
});
var Background = styled.div.withConfig({
  displayName: "StyledProgressBar__Background",
  componentId: "sc-tk6j72-1"
})(["&&{background-color:", ";border-radius:", ";margin:0;padding:0;position:relative;display:flex;z-index:1;", ";}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.progress.colors.progress.background;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.progress.radii.bar;
}, function (_ref6) {
  var themeSize = _ref6.themeSize,
    themeVariant = _ref6.themeVariant,
    themeFullWidth = _ref6.themeFullWidth,
    theme = _ref6.theme;
  switch ("".concat(themeSize, "-").concat(themeVariant)) {
    case 'small-horizontal':
      return css$2(["height:", ";width:", ";"], theme.__hd__.progress.sizes.barSmall, themeFullWidth ? '100%' : "calc(100% - ".concat(theme.__hd__.progress.sizes.barTextWidth, ")"));
    case 'medium-horizontal':
      return css$2(["height:", ";width:", ";"], theme.__hd__.progress.sizes.barMedium, themeFullWidth ? '100%' : "calc(100% - ".concat(theme.__hd__.progress.sizes.barTextWidth, ")"));
    case 'small-vertical':
      return css$2(["width:", ";height:100%;flex-direction:column-reverse;"], theme.__hd__.progress.sizes.barSmall);
    case 'medium-vertical':
      return css$2(["width:", ";height:100%;flex-direction:column-reverse;"], theme.__hd__.progress.sizes.barMedium);
  }
});
var ProgressPercentage = styled.div.withConfig({
  displayName: "StyledProgressBar__ProgressPercentage",
  componentId: "sc-tk6j72-2"
})(["&&{transition:all 0.4s cubic-bezier(0.08,0.82,0.17,1) 0s;border-radius:", ";margin:0;padding:0;background-color:", ";", ";}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.progress.radii.bar;
}, function (_ref8) {
  var theme = _ref8.theme,
    themeIntent = _ref8.themeIntent;
  return getColorFromProgressIntent({
    theme: theme,
    intent: themeIntent,
    getter: function getter(definedThemeIntent) {
      return theme.__hd__.progress.colors.progress[definedThemeIntent];
    }
  });
}, function (_ref9) {
  var themeSize = _ref9.themeSize,
    themeVariant = _ref9.themeVariant,
    themeValue = _ref9.themeValue,
    theme = _ref9.theme;
  switch ("".concat(themeSize, "-").concat(themeVariant)) {
    case 'small-horizontal':
      return css$2(["width:", "%;height:", ";"], themeValue, theme.__hd__.progress.sizes.barSmall);
    case 'medium-horizontal':
      return css$2(["width:", "%;height:", ";"], themeValue, theme.__hd__.progress.sizes.barMedium);
    case 'small-vertical':
      return css$2(["height:", "%;width:", ";"], themeValue, theme.__hd__.progress.sizes.barSmall);
    case 'medium-vertical':
      return css$2(["height:", "%;width:", ";"], themeValue, theme.__hd__.progress.sizes.barMedium);
  }
});
var Info = styled.div.withConfig({
  displayName: "StyledProgressBar__Info",
  componentId: "sc-tk6j72-3"
})(["&&{display:flex;box-sizing:border-box;margin:0;padding:0;", ";}"], function (_ref10) {
  var themeVariant = _ref10.themeVariant,
    themeValue = _ref10.themeValue,
    theme = _ref10.theme;
  switch (themeVariant) {
    case 'horizontal':
      return css$2(["width:", ";padding-left:", ";"], theme.__hd__.progress.sizes.barTextWidth, theme.__hd__.progress.space.barTextPadding);
    case 'vertical':
      return css$2(["position:absolute;bottom:", "%;left:", ";margin-left:", ";transform:translateY(50%);"], themeValue, theme.__hd__.progress.space.barTextLeft, theme.__hd__.progress.space.barTextMargin);
  }
});
var MarkerTooltip = styled(Tooltip$1).withConfig({
  displayName: "StyledProgressBar__MarkerTooltip",
  componentId: "sc-tk6j72-4"
})(["&&{position:absolute;", ";}"], function (_ref11) {
  var themeVariant = _ref11.themeVariant,
    themeValue = _ref11.themeValue;
  switch (themeVariant) {
    case 'horizontal':
      return css$2(["left:", "%;top:50%;transform:translate(-50%,-50%);"], themeValue);
    case 'vertical':
      return css$2(["bottom:", "%;left:50%;transform:translate(-50%,50%);"], themeValue);
  }
});
var Marker = styled.div.withConfig({
  displayName: "StyledProgressBar__Marker",
  componentId: "sc-tk6j72-5"
})(["&&{margin:0;padding:0;background-color:", ";", ";}"], function (_ref12) {
  var theme = _ref12.theme,
    themeIntent = _ref12.themeIntent;
  return theme.colors.palette[camelize(themeIntent)] || theme.colors[camelize(themeIntent)];
}, function (_ref13) {
  var themeSize = _ref13.themeSize,
    themeVariant = _ref13.themeVariant,
    theme = _ref13.theme;
  switch ("".concat(themeSize, "-").concat(themeVariant)) {
    case 'small-horizontal':
      return css$2(["width:", ";height:", ";border-radius:calc( ", " / 2 );"], theme.__hd__.progress.sizes.markerSmallShortDim, theme.__hd__.progress.sizes.markerSmallLongDim, theme.__hd__.progress.sizes.markerSmallShortDim);
    case 'medium-horizontal':
      return css$2(["width:", ";height:", ";border-radius:calc( ", " / 2 );"], theme.__hd__.progress.sizes.markerMediumShortDim, theme.__hd__.progress.sizes.markerMediumLongDim, theme.__hd__.progress.sizes.markerMediumShortDim);
    case 'small-vertical':
      return css$2(["height:", ";width:", ";border-radius:calc( ", " / 2 );"], theme.__hd__.progress.sizes.markerSmallShortDim, theme.__hd__.progress.sizes.markerSmallLongDim, theme.__hd__.progress.sizes.markerSmallShortDim);
    case 'medium-vertical':
      return css$2(["height:", ";width:", ";border-radius:calc( ", " / 2 );"], theme.__hd__.progress.sizes.markerMediumShortDim, theme.__hd__.progress.sizes.markerMediumLongDim, theme.__hd__.progress.sizes.markerMediumShortDim);
  }
});
var AbsoluteMarker = styled(Marker).withConfig({
  displayName: "StyledProgressBar__AbsoluteMarker",
  componentId: "sc-tk6j72-6"
})(["&&{position:absolute;", ";}"], function (_ref14) {
  var themeVariant = _ref14.themeVariant,
    themeValue = _ref14.themeValue;
  switch (themeVariant) {
    case 'horizontal':
      return css$2(["left:", "%;top:50%;transform:translate(-50%,-50%);"], themeValue);
    case 'vertical':
      return css$2(["bottom:", "%;left:50%;transform:translate(-50%,50%);"], themeValue);
  }
});

var defaultValueRenderer = function defaultValueRenderer(value) {
  return "".concat(value, "%");
};
var ProgressBar = function ProgressBar(_ref) {
  var _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'primary' : _ref$intent,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? 'active' : _ref$status,
    _ref$withInfo = _ref.withInfo,
    withInfo = _ref$withInfo === void 0 ? true : _ref$withInfo,
    value = _ref.value,
    _ref$valueRenderer = _ref.valueRenderer,
    valueRenderer = _ref$valueRenderer === void 0 ? defaultValueRenderer : _ref$valueRenderer,
    _variant = _ref.variant,
    markers = _ref.markers,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var variant = _variant === undefined || _variant === 'bar' ? 'horizontal' : _variant;
  useDeprecation("Variant 'bar' and 'circle' are deprecated, please use only 'vertical' and 'horizontal'. For a circle progress bar, please use Progress.Circle.", _variant === 'bar' || _variant === 'circle');
  var _useGetProgressState = useGetProgressState$1({
      value: value,
      status: status,
      intent: intent
    }),
    internalIntent = _useGetProgressState.internalIntent,
    percentage = _useGetProgressState.percentage;
  var css = useCss(sx);
  return variant === 'horizontal' || variant === 'vertical' ? /*#__PURE__*/React__default.createElement(Wrapper$3, {
    themeSize: size,
    themeVariant: variant,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Background, {
    themeSize: size,
    themeVariant: variant,
    themeFullWidth: withInfo === false
  }, /*#__PURE__*/React__default.createElement(ProgressPercentage, {
    themeSize: size,
    themeVariant: variant,
    themeIntent: internalIntent,
    themeValue: percentage
  }), markers === null || markers === void 0 ? void 0 : markers.map(function (marker) {
    return marker.text ? /*#__PURE__*/React__default.createElement(MarkerTooltip, {
      key: marker.value,
      themeVariant: variant,
      themeValue: marker.value,
      placement: variant === 'horizontal' ? 'top' : 'right',
      target: /*#__PURE__*/React__default.createElement(Marker, {
        key: marker.value,
        themeSize: size,
        themeVariant: variant,
        themeIntent: marker.intent
      }),
      content: marker.text,
      "data-test-id": dataTestId && "".concat(dataTestId, "-marker-").concat(marker.value)
    }) : /*#__PURE__*/React__default.createElement(AbsoluteMarker, {
      key: marker.value,
      themeSize: size,
      themeVariant: variant,
      themeIntent: marker.intent,
      themeValue: marker.value,
      "data-test-id": dataTestId && "".concat(dataTestId, "-marker-").concat(marker.value)
    });
  })), withInfo === true && /*#__PURE__*/React__default.createElement(Info, {
    themeVariant: variant,
    themeValue: percentage
  }, status === 'exception' && /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "circle-cancel",
    intent: "danger"
  }), status === 'active' && percentage === 100 && /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "circle-ok",
    intent: "success"
  }), (status === 'active' && percentage < 100 || status === 'custom') && valueRenderer(percentage))) : /*#__PURE__*/React__default.createElement(ProgressCircle$1, {
    intent: internalIntent,
    size: size,
    status: status,
    withInfo: withInfo,
    value: percentage,
    valueRenderer: valueRenderer,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId
  });
};
var ProgressBar$1 = ProgressBar;

var CompoundProgress = ProgressBar$1;
CompoundProgress.Circle = ProgressCircle$1;
var CompoundProgress$1 = CompoundProgress;

var StyledInput$2 = styled.input.withConfig({
  displayName: "StyledRadio__StyledInput",
  componentId: "sc-1ryc6x7-0"
})(["&&{appearance:none;position:relative;height:", ";width:", ";flex-shrink:0;border-radius:", ";border:", " solid ", ";margin:0;padding:0;}&&:after{content:'';position:absolute;height:", ";width:", ";top:50%;left:50%;transform:translateX(-50%) translateY(-50%);border-radius:", ";}&&:focus{outline:none;}&&{", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.radio.sizes.height;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.radio.sizes.width;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.radio.radii["default"];
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.radio.borderWidths["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.radio.colors.defaultBorder;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.radio.sizes.checkmarkHeight;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.radio.sizes.checkmarkWidth;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.radio.radii["default"];
}, function (_ref9) {
  var themeDisabled = _ref9.themeDisabled,
    theme = _ref9.theme;
  switch (themeDisabled) {
    case false:
      return css$2(["cursor:pointer;color:", ";&:hover{border-color:", ";}&:checked{border-color:", ";&::after{background-color:", ";}}"], theme.__hd__.radio.colors.defaultText, theme.__hd__.radio.colors.hoverBorder, theme.__hd__.radio.colors.activeBorder, theme.__hd__.radio.colors.defaultCheckmark);
    case true:
      return css$2(["cursor:not-allowed;color:", ";background-color:", ";&:checked{border-color:", ";&::after{background-color:", ";}}"], theme.__hd__.radio.colors.disabledText, theme.__hd__.radio.colors.disabledBackground, theme.__hd__.radio.colors.disabledBorder, theme.__hd__.radio.colors.disabledCheckmark);
  }
});
var StyledLabel = styled.label.withConfig({
  displayName: "StyledRadio__StyledLabel",
  componentId: "sc-1ryc6x7-1"
})(["&&{font-size:", ";display:flex;align-items:center;line-height:", ";font-weight:", ";margin:0;padding:0;", ";}&& > ", "{margin:", ";}"], function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.radio.fontSizes["default"];
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.radio.lineHeights["default"];
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.radio.fontWeights["default"];
}, function (_ref13) {
  var themeDisabled = _ref13.themeDisabled,
    theme = _ref13.theme;
  switch (themeDisabled) {
    case false:
      return css$2(["cursor:pointer;color:", ";"], theme.__hd__.radio.colors.defaultText);
    case true:
      return css$2(["cursor:not-allowed;color:", ";"], theme.__hd__.radio.colors.disabledText);
  }
}, StyledInput$2, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.radio.space.margin;
});
var StyledText = styled.div.withConfig({
  displayName: "StyledRadio__StyledText",
  componentId: "sc-1ryc6x7-2"
})(["&&{margin:0;padding:0;}"]);
var StyledWrapper$1 = styled.div.withConfig({
  displayName: "StyledRadio__StyledWrapper",
  componentId: "sc-1ryc6x7-3"
})(["&&{margin:0;padding:0;", ";}"], function (_ref15) {
  var themeLayout = _ref15.themeLayout;
  switch (themeLayout) {
    case 'vertical':
      return css$2([""]);
    case 'horizontal':
      return css$2(["display:flex;"]);
  }
});
var Spacer = styled.div.withConfig({
  displayName: "StyledRadio__Spacer",
  componentId: "sc-1ryc6x7-4"
})(["&&{margin:0;padding:0;", ";}"], function (_ref16) {
  var themeLayout = _ref16.themeLayout,
    theme = _ref16.theme;
  switch (themeLayout) {
    case 'vertical':
      return css$2(["margin-top:", ";"], theme.__hd__.radio.space.groupVerticalMargin);
    case 'horizontal':
      return css$2(["margin-left:", ";"], theme.__hd__.radio.space.groupHorizontalMargin);
  }
});
var StyledRadioButton = styled.span.withConfig({
  displayName: "StyledRadio__StyledRadioButton",
  componentId: "sc-1ryc6x7-5"
})(["&&{display:inline-flex;align-items:center;box-sizing:border-box;border:", " solid ", ";border-radius:", ";line-height:100%;color:", ";background:transparent;cursor:pointer;font-weight:", ";margin:0;padding:0;}&&:hover{color:", ";border-color:", ";}&&{", ";}"], function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.radio.borderWidths["default"];
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.radio.colors.defaultBorder;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.radio.radii.button;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.radio.colors.defaultText;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.radio.fontWeights["default"];
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.radio.colors.hoverText;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.radio.colors.hoverBorder;
}, function (_ref24) {
  var themeSize = _ref24.themeSize,
    theme = _ref24.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["font-size:", ";padding:", ";height:", ";"], theme.__hd__.radio.fontSizes.buttonSmall, theme.__hd__.radio.space.buttonSmallPadding, theme.__hd__.radio.sizes.buttonSmall);
    case 'medium':
      return css$2(["font-size:", ";padding:", ";height:", ";"], theme.__hd__.radio.fontSizes.buttonMedium, theme.__hd__.radio.space.buttonMediumPadding, theme.__hd__.radio.sizes.buttonMedium);
    case 'large':
      return css$2(["font-size:", ";padding:", ";height:", ";"], theme.__hd__.radio.fontSizes.buttonLarge, theme.__hd__.radio.space.buttonLargePadding, theme.__hd__.radio.sizes.buttonLarge);
  }
});
var HOVER_COLORS = {
  primary: 'hoverPrimary',
  danger: 'hoverDanger',
  success: 'hoverSuccess',
  warning: 'hoverWarning',
  error: 'hoverError'
};
var getAdvancedIntentStyles = function getAdvancedIntentStyles(intent) {
  return css$2(["& ~ ", "{border-color:", ";color:", ";}&:checked ~ ", "{color:", ";border-color:", ";background-color:", ";}&:hover ~ ", "{border-color:", ";background-color:", ";color:", ";}"], StyledRadioButton, function (_ref25) {
    var theme = _ref25.theme;
    return theme.__hd__.radio.colors[HOVER_COLORS[intent]];
  }, function (_ref26) {
    var theme = _ref26.theme;
    return theme.__hd__.radio.colors[intent];
  }, StyledRadioButton, function (_ref27) {
    var theme = _ref27.theme;
    return theme.__hd__.radio.colors.enabledSelectedText;
  }, function (_ref28) {
    var theme = _ref28.theme;
    return theme.__hd__.radio.colors[HOVER_COLORS[intent]];
  }, function (_ref29) {
    var theme = _ref29.theme;
    return theme.__hd__.radio.colors[intent];
  }, StyledRadioButton, function (_ref30) {
    var theme = _ref30.theme;
    return theme.__hd__.radio.colors[HOVER_COLORS[intent]];
  }, function (_ref31) {
    var theme = _ref31.theme;
    return theme.__hd__.radio.colors[intent];
  }, function (_ref32) {
    var theme = _ref32.theme;
    return theme.__hd__.radio.colors.enabledSelectedText;
  });
};
var StyledRadioButtonInput = styled.input.withConfig({
  displayName: "StyledRadio__StyledRadioButtonInput",
  componentId: "sc-1ryc6x7-6"
})(["&&{display:none;margin:0;padding:0;", ";", ";}"], function (_ref33) {
  var themeIntent = _ref33.themeIntent,
    theme = _ref33.theme;
  switch (themeIntent) {
    case 'basic':
      return css$2(["&:checked ~ ", "{color:", ";border-color:", ";background-color:", ";&:hover{color:", ";}}"], StyledRadioButton, theme.__hd__.radio.colors.enabledSelectedText, theme.__hd__.radio.colors.hoverBorder, theme.__hd__.radio.colors.buttonCheckedBackground, theme.__hd__.radio.colors.enabledSelectedText);
    case 'primary':
      return getAdvancedIntentStyles('primary');
    case 'danger':
      return getAdvancedIntentStyles('danger');
    case 'success':
      return getAdvancedIntentStyles('success');
    case 'warning':
      return getAdvancedIntentStyles('warning');
    case 'error':
      return getAdvancedIntentStyles('error');
  }
}, function (_ref34) {
  var themeStatus = _ref34.themeStatus,
    theme = _ref34.theme;
  switch (themeStatus) {
    case 'disabled':
      return css$2(["~ ", "{cursor:not-allowed;color:", ";background-color:", ";&:hover{color:", ";border-color:", ";}}&:checked ~ ", "{color:", ";background-color:", ";border:none;}"], StyledRadioButton, theme.__hd__.radio.colors.disabledText, theme.__hd__.radio.colors.buttonDisabledBackground, theme.__hd__.radio.colors.disabledText, theme.__hd__.radio.colors.disabledBorder, StyledRadioButton, theme.__hd__.radio.colors.disabledSelectedText, theme.__hd__.radio.colors.buttonDisabledCheckedBackground);
    case 'enabled':
      return css$2([""]);
  }
});
var StyledRadioButtonLabel = styled.label.withConfig({
  displayName: "StyledRadio__StyledRadioButtonLabel",
  componentId: "sc-1ryc6x7-7"
})(["&&{display:inline-flex;align-items:center;margin:0;padding:0;}"]);
var StyledRadioButtonGroupWrapper = styled.div.withConfig({
  displayName: "StyledRadio__StyledRadioButtonGroupWrapper",
  componentId: "sc-1ryc6x7-8"
})(["&&{display:inline-flex;align-items:center;flex-wrap:wrap;margin:0;padding:0;", ";}"], function (_ref35) {
  var themeLayout = _ref35.themeLayout,
    theme = _ref35.theme,
    preCheckedIndex = _ref35.preCheckedIndex;
  switch (themeLayout) {
    case 'no-gap':
      return css$2(["> ", " > ", "{border-radius:0;}> ", ":first-child > ", "{border-top-left-radius:", ";border-bottom-left-radius:", ";}> ", ":last-child > ", "{border-top-right-radius:", ";border-bottom-right-radius:", ";}> ", ":not(:first-child) > ", "{border-left-width:0px;&:hover{border-left-width:", ";margin-left:-", ";}}> ", ":nth-child(", ") > ", "{border-right-width:", ";border-right-style:solid;border-right-color:", ";}"], StyledRadioButtonLabel, StyledRadioButton, StyledRadioButtonLabel, StyledRadioButton, theme.__hd__.radio.radii.button, theme.__hd__.radio.radii.button, StyledRadioButtonLabel, StyledRadioButton, theme.__hd__.radio.radii.button, theme.__hd__.radio.radii.button, StyledRadioButtonLabel, StyledRadioButton, theme.__hd__.radio.borderWidths["default"], theme.__hd__.radio.borderWidths["default"], StyledRadioButtonLabel, preCheckedIndex + 1, StyledRadioButton, theme.__hd__.radio.borderWidths["default"], theme.__hd__.radio.colors.hoverBorder);
    case 'gap-small':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.radio.space.buttonGroupSmallMargin, theme.__hd__.radio.sizes.buttonGroupSmallWidth, theme.__hd__.radio.space.buttonSmallMargin);
    case 'gap-medium':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.radio.space.buttonGroupMediumMargin, theme.__hd__.radio.sizes.buttonGroupMediumWidth, theme.__hd__.radio.space.buttonMediumMargin);
    case 'gap-large':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.radio.space.buttonGroupLargeMargin, theme.__hd__.radio.sizes.buttonGroupLargeWidth, theme.__hd__.radio.space.buttonLargeMargin);
  }
});

var Radio = function Radio(_ref) {
  var text = _ref.text,
    value = _ref.value,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    checked = _ref.checked,
    onChange = _ref.onChange,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(StyledLabel, {
    themeDisabled: disabled,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(StyledInput$2, {
    type: "radio",
    value: value,
    checked: checked,
    onChange: onChange,
    disabled: disabled,
    name: name,
    themeDisabled: disabled,
    id: id
  }), /*#__PURE__*/React__default.createElement(StyledText, null, text));
};
var Radio$1 = Radio;

var RadioGroup = function RadioGroup(_ref) {
  var name = _ref.name,
    value = _ref.value,
    _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? 'vertical' : _ref$layout,
    _onChange = _ref.onChange,
    options = _ref.options,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(StyledWrapper$1, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themeLayout: layout
  }, options.map(function (option, index) {
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: option.value
    }, index !== 0 && /*#__PURE__*/React__default.createElement(Spacer, {
      themeLayout: layout
    }), /*#__PURE__*/React__default.createElement(Radio$1, {
      name: name,
      text: option.text,
      value: option.value,
      disabled: option.disabled,
      checked: option.value === value,
      onChange: function onChange(e) {
        if (e.target.checked) {
          _onChange(option.value);
        }
      }
    }));
  }));
};
var RadioGroup$1 = RadioGroup;

var RadioButton = function RadioButton(_ref) {
  var name = _ref.name,
    text = _ref.text,
    value = _ref.value,
    disabled = _ref.disabled,
    checked = _ref.checked,
    onChange = _ref.onChange,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    id = _ref.id,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'basic' : _ref$intent,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(StyledRadioButtonLabel, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(StyledRadioButtonInput, {
    type: "radio",
    value: value,
    checked: checked,
    onChange: onChange,
    disabled: disabled,
    name: name,
    themeStatus: disabled === true ? 'disabled' : 'enabled',
    themeIntent: intent,
    id: id
  }), /*#__PURE__*/React__default.createElement(StyledRadioButton, {
    themeSize: size
  }, text));
};
var RadioButton$1 = RadioButton;

var GAP_LAYOUTS = {
  small: 'gap-small',
  medium: 'gap-medium',
  large: 'gap-large'
};
var RadioButtonGroup = function RadioButtonGroup(_ref) {
  var _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? 'no-gap' : _ref$layout,
    name = _ref.name,
    value = _ref.value,
    _onChange = _ref.onChange,
    options = _ref.options,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var checkedOptIndex = options.findIndex(function (option) {
    return option.value === value && option.disabled !== true;
  });
  var preCheckedIndex = checkedOptIndex - 1;
  return /*#__PURE__*/React__default.createElement(StyledRadioButtonGroupWrapper, {
    preCheckedIndex: preCheckedIndex,
    themeLayout: layout === 'no-gap' ? layout : GAP_LAYOUTS[size],
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(RadioButton$1, {
      key: option.value,
      name: name,
      text: option.text,
      value: option.value,
      intent: option.intent,
      disabled: option.disabled,
      checked: option.value === value,
      size: size,
      onChange: function onChange(e) {
        if (e.target.checked === true) {
          _onChange(option.value);
        }
      }
    });
  }));
};
var RadioButtonGroup$1 = RadioButtonGroup;

var CompoundRadio = Radio$1;
CompoundRadio.Group = RadioGroup$1;
CompoundRadio.Button = RadioButton$1;
CompoundRadio.ButtonGroup = RadioButtonGroup$1;
var CompoundRadio$1 = CompoundRadio;

var StyledRateIconLabel = styled.label.withConfig({
  displayName: "StyledRate__StyledRateIconLabel",
  componentId: "sc-lzohsv-0"
})(["&&{display:inline-flex;align-items:center;margin:0;padding:0;}"]);
var StyledRateIconInput = styled.input.withConfig({
  displayName: "StyledRate__StyledRateIconInput",
  componentId: "sc-lzohsv-1"
})(["&&{display:none;}"]);
var StyledRateIcon = styled(Icon$1).withConfig({
  displayName: "StyledRate__StyledRateIcon",
  componentId: "sc-lzohsv-2"
})(["&&{cursor:pointer;", ";}"], function (_ref) {
  var active = _ref.active,
    theme = _ref.theme;
  switch (active) {
    case false:
      return css$2(["color:", ";"], theme.__hd__.rate.colors.inactiveIcon);
    case true:
      return css$2(["color:", ";"], theme.__hd__.rate.colors.activeIcon);
  }
});
var RateWrapper = styled.div.withConfig({
  displayName: "StyledRate__RateWrapper",
  componentId: "sc-lzohsv-3"
})(["&&{display:inline-flex;align-items:center;flex-wrap:wrap;padding:0;", ";", ";}"], function (_ref2) {
  var themeLayout = _ref2.themeLayout,
    theme = _ref2.theme;
  switch (themeLayout) {
    case 'medium':
      return css$2(["margin:", ";", "{padding:", ";}"], theme.__hd__.rate.space.rateGroupMediumMargin, StyledRateIconLabel, theme.__hd__.rate.space.rateMediumMargin);
    case 'large':
      return css$2(["margin:", ";", "{padding:", ";}"], theme.__hd__.rate.space.rateGroupLargeMargin, StyledRateIconLabel, theme.__hd__.rate.space.rateLargeMargin);
  }
}, function (_ref3) {
  var themeStatus = _ref3.themeStatus,
    theme = _ref3.theme;
  switch (themeStatus) {
    case 'disabled':
      return css$2(["", "{cursor:not-allowed;color:", ";}"], StyledRateIcon, theme.__hd__.rate.colors.disabledIcon);
    case 'readonly':
      return css$2(["", "{cursor:default;}"], StyledRateIcon);
    default:
      return css$2([""]);
  }
});

var RateIcon = function RateIcon(_ref) {
  var name = _ref.name,
    value = _ref.value,
    active = _ref.active,
    disabled = _ref.disabled,
    checked = _ref.checked,
    onChange = _ref.onChange,
    setHoverValue = _ref.setHoverValue,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size;
  return /*#__PURE__*/React__default.createElement(StyledRateIconLabel, {
    onMouseEnter: !disabled ? function () {
      return setHoverValue(value);
    } : undefined,
    onMouseLeave: !disabled ? function () {
      return setHoverValue(null);
    } : undefined
  }, /*#__PURE__*/React__default.createElement(StyledRateIconInput, {
    type: "radio",
    name: name,
    value: value,
    checked: checked,
    onChange: onChange,
    disabled: disabled
  }), /*#__PURE__*/React__default.createElement(StyledRateIcon, {
    icon: active ? 'star' : 'star-outlined',
    active: active,
    size: size,
    "data-test-id": active ? 'active-rate-icon' : 'inactive-rate-icon'
  }));
};
var RateIcon$1 = RateIcon;

var getThemeStatus = function getThemeStatus(disabled, readonly) {
  if (disabled) {
    return 'disabled';
  }
  if (readonly) {
    return 'readonly';
  }
  return 'normal';
};
var RateGroup = function RateGroup(_ref) {
  var _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$readonly = _ref.readonly,
    readonly = _ref$readonly === void 0 ? false : _ref$readonly,
    name = _ref.name,
    options = _ref.options,
    _onChange = _ref.onChange,
    value = _ref.value,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    hoverValue = _useState2[0],
    setHoverValue = _useState2[1];
  var hasTooltip = options.some(function (_ref2) {
    var tooltipContent = _ref2.tooltipContent;
    return tooltipContent;
  });
  return /*#__PURE__*/React__default.createElement(RateWrapper, {
    themeLayout: size,
    themeStatus: getThemeStatus(disabled, readonly),
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, options.map(function (option, index) {
    var _a;
    var currentIndex = options.findIndex(function (opt) {
      return opt.value === (hoverValue !== null && hoverValue !== void 0 ? hoverValue : value);
    });
    var SingleRate = /*#__PURE__*/React__default.createElement(RateIcon$1, {
      key: option.value,
      name: name,
      value: option.value,
      size: size,
      checked: option.value === value,
      active: index <= currentIndex,
      disabled: disabled || readonly,
      setHoverValue: setHoverValue,
      onChange: function onChange(e) {
        if (e.target.checked && _onChange !== undefined) {
          _onChange(option.value);
        }
      }
    });
    return hasTooltip ? /*#__PURE__*/React__default.createElement(Tooltip$1, {
      key: "tooltip-wrapper-".concat(option.value),
      visible: !!option.tooltipContent,
      content: (_a = option.tooltipContent) !== null && _a !== void 0 ? _a : '',
      target: SingleRate,
      "data-test-id": "tooltip-wrapper-".concat(option.value)
    }) : SingleRate;
  }));
};
var Rate = RateGroup;

var _defs$3, _g$3;
function _extends$3() { _extends$3 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }
var SvgImage403HaRi = function SvgImage403HaRi(props) {
  return /*#__PURE__*/React.createElement("svg", _extends$3({
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: 282,
    height: 248,
    viewBox: "0 0 282 248"
  }, props), _defs$3 || (_defs$3 = /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("filter", {
    id: "image_403_HaRi_svg__c",
    width: "120.8%",
    height: "300.5%",
    x: "-10.4%",
    y: "-100.2%",
    filterUnits: "objectBoundingBox"
  }, /*#__PURE__*/React.createElement("feGaussianBlur", {
    "in": "SourceGraphic",
    stdDeviation: 1.2
  })), /*#__PURE__*/React.createElement("path", {
    id: "image_403_HaRi_svg__a",
    d: "M.016.09h75.008v74.135H.016z"
  }))), _g$3 || (_g$3 = /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#E6F9FF",
    d: "M119.781 47c25.104 0 47.334 13.92 60.983 35.309 8.833-12.12 22.261-19.854 37.299-19.854 26.607 0 48.177 24.217 48.177 54.09 0 6.837-1.13 13.377-3.19 19.398 11.248 7.855 18.607 20.898 18.607 35.66 0 24.005-19.46 43.465-43.466 43.465l-102.412.002A67.075 67.075 0 0 1 119.78 217c-5.49 0-10.842-.666-15.997-1.93l-25.329-.002c-3.536 0-6.973-.422-10.264-1.219a50.471 50.471 0 0 1-11.04 1.22C25.754 215.068.3 186.093.3 150.351c0-35.741 25.453-64.716 56.85-64.716l-.374.003C70.187 62.377 93.397 47 119.781 47Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    d: "M131.724 95.295c17.333 0 32.792 8.897 42.857 22.794 6.524-8.063 15.988-13.134 26.518-13.134 19.69 0 35.651 17.73 35.651 39.602 0 7.298-1.777 14.134-4.876 20.005 5.403 5.566 8.73 13.159 8.73 21.529 0 17.07-13.838 30.909-30.909 30.909H86.513a30.768 30.768 0 0 1-15.188-3.983c-16.917-5.835-29.21-23.467-29.21-44.312 0-25.606 18.55-46.364 41.432-46.364.824 0 1.643.027 2.455.08 9.845-16.352 26.648-27.126 45.722-27.126Z",
    opacity: 0.4
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(80 78)"
  }, /*#__PURE__*/React.createElement("g", {
    transform: "translate(3.588)"
  }, /*#__PURE__*/React.createElement("g", {
    transform: "translate(10.686)"
  }, /*#__PURE__*/React.createElement("mask", {
    id: "image_403_HaRi_svg__b",
    fill: "#fff"
  }, /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#image_403_HaRi_svg__a"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "M59.014 47.735c1.15 0 2.224.636 2.8 1.66a3.084 3.084 0 0 1-.042 3.122l-.03.049c-4.006 6.409-10.454 11.077-17.703 12.828-1.981.479-3.366 2.287-3.366 4.398 0 2.445 1.958 4.433 4.365 4.433.337 0 .679-.04 1.014-.12 8.106-1.945 15.46-6.65 20.71-13.251 5.405-6.798 8.262-14.993 8.262-23.697 0-8.704-2.857-16.898-8.263-23.696C61.513 6.86 54.158 2.154 46.052.21a4.364 4.364 0 0 0-1.014-.122c-2.407 0-4.365 1.989-4.365 4.432 0 2.111 1.384 3.92 3.366 4.399 7.25 1.75 13.697 6.42 17.691 12.81l.048.078c.573.962.588 2.13.036 3.111a3.228 3.228 0 0 1-2.8 1.66 3.15 3.15 0 0 1-1.357-.309 11.716 11.716 0 0 0-5.052-1.132c-6.31 0-11.535 4.973-11.898 11.321l-.002.036-.004.036c-.019.174-.028.33-.028.478v.296c0 .148.01.304.028.478l.004.036.002.036c.363 6.348 5.589 11.322 11.898 11.322 1.765 0 3.465-.382 5.051-1.133.434-.205.89-.309 1.358-.309M29.986.09c-.338 0-.679.04-1.014.12-8.106 1.944-15.46 6.65-20.71 13.25C2.858 20.26 0 28.454 0 37.158c0 8.705 2.857 16.899 8.263 23.697 5.248 6.6 12.603 11.306 20.71 13.25.334.08.676.121 1.013.121 2.407 0 4.365-1.988 4.365-4.432 0-2.111-1.384-3.92-3.366-4.398-7.25-1.751-13.697-6.42-17.691-12.81l-.04-.065a3.086 3.086 0 0 1-.044-3.125 3.228 3.228 0 0 1 2.8-1.66c.467 0 .924.104 1.358.31a11.721 11.721 0 0 0 5.051 1.131c6.31 0 11.536-4.973 11.898-11.321l.002-.037.004-.035c.019-.173.028-.33.028-.478v-.295c0-.15-.01-.306-.028-.478l-.004-.036-.002-.037c-.362-6.348-5.589-11.321-11.898-11.321-1.764 0-3.464.38-5.051 1.132-.434.205-.89.31-1.358.31a3.229 3.229 0 0 1-2.8-1.66 3.083 3.083 0 0 1 .042-3.122l.003-.006.012-.018.024-.04C17.288 15.34 23.736 10.67 30.985 8.92c1.982-.48 3.366-2.288 3.366-4.399 0-2.444-1.958-4.433-4.365-4.433",
    mask: "url(#image_403_HaRi_svg__b)"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#4A90E2",
    d: "M.083 36.201c0 5.178 4.094 9.376 9.144 9.376-3.095-10.99-1.57-12.762 0-18.752-5.05 0-9.144 4.198-9.144 9.376ZM95.603 35.94c0-5.177-4.094-9.375-9.143-9.375 3.094 10.99 1.57 12.761 0 18.752 5.05 0 9.143-4.198 9.143-9.376Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(54.915 26.825)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#2667B2",
    d: "M18.21 9.95c0 4.635-3.729 8.387-8.329 8.387-4.6 0-8.33-3.752-8.33-8.387 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M18.21 9.95c0 4.635-3.729 1.733-8.329 1.733-4.6 0-8.33 2.902-8.33-1.733 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M9.881 19.9C4.433 19.9 0 15.437 0 9.95 0 4.463 4.433 0 9.881 0s9.88 4.463 9.88 9.95c0 5.487-4.433 9.95-9.88 9.95Zm0-16.774c-3.736 0-6.778 3.061-6.778 6.825 0 3.764 3.04 6.824 6.778 6.824 3.737 0 6.777-3.06 6.777-6.824s-3.04-6.825-6.777-6.825Z"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 5.738,
    cy: 7.224,
    fill: "#FFF",
    rx: 3.393,
    ry: 3.417
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M5.738 12.204c-2.727 0-4.945-2.234-4.945-4.98 0-2.747 2.22-4.979 4.945-4.979 2.726 0 4.945 2.234 4.945 4.979 0 2.747-2.218 4.98-4.945 4.98Zm0-6.834a1.85 1.85 0 0 0-1.841 1.854 1.85 1.85 0 0 0 1.841 1.855A1.85 1.85 0 0 0 7.58 7.224 1.85 1.85 0 0 0 5.74 5.37Z"
  })), /*#__PURE__*/React.createElement("g", {
    transform: "translate(21.548 26.825)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#2667B2",
    d: "M18.21 9.95c0 4.635-3.729 8.387-8.329 8.387-4.6 0-8.33-3.752-8.33-8.387 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M18.21 9.95c0 4.635-3.729 1.733-8.329 1.733-4.6 0-8.33 2.902-8.33-1.733 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M9.881 19.9C4.433 19.9 0 15.437 0 9.95 0 4.463 4.433 0 9.881 0s9.88 4.463 9.88 9.95c0 5.487-4.433 9.95-9.88 9.95Zm0-16.774c-3.736 0-6.778 3.061-6.778 6.825 0 3.764 3.04 6.824 6.778 6.824 3.737 0 6.777-3.06 6.777-6.824s-3.04-6.825-6.777-6.825Z"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 5.738,
    cy: 7.224,
    fill: "#FFF",
    rx: 3.393,
    ry: 3.417
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M5.738 12.204c-2.727 0-4.945-2.234-4.945-4.98 0-2.747 2.22-4.979 4.945-4.979 2.726 0 4.945 2.234 4.945 4.979 0 2.747-2.218 4.98-4.945 4.98Zm0-6.834a1.85 1.85 0 0 0-1.841 1.854 1.85 1.85 0 0 0 1.841 1.855A1.85 1.85 0 0 0 7.58 7.224 1.85 1.85 0 0 0 5.74 5.37Z"
  })), /*#__PURE__*/React.createElement("ellipse", {
    cx: 47.972,
    cy: 57.557,
    fill: "#003580",
    rx: 3.75,
    ry: 4.167
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "m62.3 137.8 12.744-37.76c2.494-7.387-1.474-15.397-8.861-17.89a14.118 14.118 0 0 0-4.515-.742H41.195c-7.797 0-14.118 6.321-14.118 14.118 0 1.535.25 3.06.741 4.515l12.745 37.76c2.026 6.002 8.534 9.225 14.537 7.2a11.47 11.47 0 0 0 7.2-7.2Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#9EE9FF",
    d: "m58.05 129.813 8.25-28.966a8.47 8.47 0 0 0-8.147-10.79H44.71a8.47 8.47 0 0 0-8.147 10.79l8.25 28.966a6.882 6.882 0 0 0 13.238 0Z"
  }), /*#__PURE__*/React.createElement("path", {
    stroke: "#1690FF",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 9.6,
    d: "M25.118 81.408 7.26 91.465l-.084 19.873M78.173 82.648l19.732 5.528 14.098-13.993"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 52.029,
    cy: 158.627,
    fill: "#D8D8D8",
    filter: "url(#image_403_HaRi_svg__c)",
    rx: 17.343,
    ry: 1.796
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 114.824,
    cy: 70.634,
    fill: "#4A90E2",
    rx: 7.176,
    ry: 7.183
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 7.176,
    cy: 113.732,
    fill: "#4A90E2",
    rx: 7.176,
    ry: 7.183
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    fillRule: "nonzero",
    d: "M57.267 122.16c-.297 0-.588.03-.876.076-.811-4.614-4.755-8.118-9.511-8.118-.633 0-1.252.066-1.852.186C42.825 111.1 39.185 109 35.06 109c-6.542 0-11.864 5.269-12.152 11.874a6.294 6.294 0 0 0-1.46-.176c-3.56 0-6.448 3.017-6.448 6.65 0 3.634 2.888 6.652 6.447 6.652h35.82c3.166 0 5.733-2.69 5.733-5.922 0-3.229-2.566-5.918-5.733-5.918ZM125 68.583c0 2.442-2.443 4.417-5.46 4.417-.13 0-.256-.006-.387-.015-.101.01-.202.015-.302.015h-11.429c-.046 0-.091 0-.136-.006h-.01c-.101.006-.207.006-.308.006-3.294 0-5.968-2.413-5.968-5.386 0-2.98 2.674-5.392 5.968-5.392.474 0 .933.05 1.375.144.142-3.541 3.28-6.366 7.137-6.366 3.954 0 7.153 2.964 7.153 6.625 0 .746-.131 1.462-.378 2.128 1.642.761 2.745 2.194 2.745 3.83ZM213 130.725c0 4.022 3.97 7.275 8.872 7.275.212 0 .417-.01.63-.025a5.2 5.2 0 0 0 .49.025h18.572c.075 0 .148 0 .222-.01h.016c.164.01.335.01.5.01 5.352 0 9.698-3.974 9.698-8.872 0-4.907-4.346-8.88-9.699-8.88-.77 0-1.514.082-2.234.237-.23-5.832-5.328-10.485-11.598-10.485-6.424 0-11.622 4.881-11.622 10.911 0 1.229.213 2.408.614 3.506-2.669 1.253-4.461 3.613-4.461 6.308Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#999898",
    fillRule: "nonzero",
    d: "M91.112 100.78c2.642-1.529 13.69-6.108 34.66-5.494 4.37-.506 8.475-1.19 9.647-1.646.53-.218 4.437-.748 5.587-1.315 5.295-.457 10.968-2.22 15.987-2.15 7.427.103 23.432 1.365 24.892.623 1.46-.741.23-2.65-.488-2.511-.717.14-2.304-.04-4.335-.788-2.031-.75-10.391-5.872-13.746-6.9-3.354-1.027-12.015-3.087-13.34-2.83-.331.065-.662.13-.904.062-5.523 1.646-14.578 3.978-27.733 5.848 15.384-2.19 23.848-5.207 26.81-6.47-.021-.11-.021-.11.067-.241 0 0-.885-3.374-1.675-3.907-.68-.554-.892-2.229-.29-3.26.58-1.143-.134-3.635-.416-4.496-.282-.86-2.328-5.495-2.432-6.62-.061-.902-1.28-3.64-1.71-5.844-.785 2.44-2.632 5.316-7.244 5.755 5.413-1.624 5.852-5.256 7.058-7.892-.03-2.511-1.107-6.877-1.061-7.23.025-.462-1.582-1.064-2.309-1.266-.726-.202-1.575-2.21-1.575-2.21s-.656-1.017-1.002-2.208c-.346-1.191-3.061-4.553-3.763-5.217-.132-.089-.153-.199-.307-.398-1.947 1.18-5.508 2.9-11.358 4.038 4.195-.815 9.57-3.805 11.297-4.941-.018-.683.053-1.498-.318-2.226-.699-1.237-1.597-2.32-3.963-5.064-1.288 1.623-3.392 3.176-7.056 3.774 3.578-1.039 4.756-2.64 6.995-4.677-.25-2.468-1.455-3.95-2.488-4.55-1.275-.667-3.562-1.824-3.562-1.824-.196-.42-.104-1.124-.855-.863-.752.26-1.653-.25-2.113-.848-.438-.487-1.41-.183-2.774-.719-1.454-.404-2.94-2.746-3.73-3.278-.681-.554-3.779 1.192-4.31 1.41-.53.217-7.73 2.074-9.585 2.549-1.856.475-3.23 1.657-4.006 2.38 0 0-.355.527.35.618.705.092 6.994-.559 9.134-.746l.442-.086c.22-.043.331-.064.463.025 1.236-.126 2.959-.69 4.34-3.017 0 0-.921 2.924-4.08 3.767-.046.352-.224.615-.249 1.078-.049.924 3.105 4.773 3.233 5.434.129.661-.828 2.22-.988 3.166-.27.968 2.67 3.714 3.325 4.73.656 1.017.07 3.304.348 4.737.257 1.323 1.71 1.727 2.035 2.807.325 1.081-2.53 2.895-4.156 5.727-1.737 2.854-2.663 2.806-1.903 4.946.303.97.453 1.742.493 2.535.851 1.436 2.166 2.896 4.107 2.862 2.867.015 13.093 1.344 18.29-1.382-3.634 3.109-9.938 2.504-13.157 2.443-2.757-.036-7.874.158-9.446-2.625-.114.594-.36 1.1-.715 1.626-1.11 1.36-1.434 3.825-1.59 4.199-.135.483-.25 5.196-.036 6.298.214 1.102-.81 2.903-1.258 4.134-.338 1.21.773 7.514 1.211 8 .264.178.57.576.855.864 3.726.305 16.895-.31 29.084-3.023-17.644 4.117-25.209 4.1-28.339 3.908 0 0-1.816 1.268-2.172 1.794-.355.527.963 1.415.85 2.009-.09.132-.047.352-.246.505 2.778.147 7.65.458 11.532.39-1.899.254-10.877.627-13.523.569-1.656.322-2.735.074-3.86.178-1.374.84-4.381 1.996-6.261 3.276-1.878 1.28-8.723 6.683-11.063 8.882-2.34 2.2-7.368 6.27-7.135 7.467.233 1.198.758 2.035 3.323 1.537 2.564-.499 11.57-4.658 14.21-6.187Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#D9DBDF",
    fillRule: "nonzero",
    d: "M169.616 111a17.788 17.788 0 0 1-1.402 3.705 46.112 46.112 0 0 0-2.388 9.452s-.296 2.828-2.408 3.723-4.52 4.851-4.52 4.851l3.947 6.91-6.138-5.979a24.203 24.203 0 0 0-4.935-1.521c-2.684-.52-11.428-7.68-14.587-9.345-1.908-.928-4.268-.56-5.724.895 0 0-.572-.895-3.395-1.414-2.822-.519-7.46 5.89-10.145 6.66-2.685.77-8.883 3.58-11.429 6.784-2.546 3.204-8.862 4.6-8.862 4.6l5.763-3.956c.216-2.048.216-4.11 0-6.158-.434-1.647-4.934-3.06-6.217-6.891a89.516 89.516 0 0 0-5.488-11.26s.987 5.872 1.678 8.574c.564 2.039.21 4.197-.987 5.997-.849 1.414-2.368 6.023-.69 10.373 1.677 4.35.256 3.694.69 9.19.434 5.495.436 2.831.436 6.035 0 3.205 11.841 5.475 15.513 6.889 3.671 1.414 9.02 5.62 12.415 7.805 2.976 1.672 8.95 3.04 12.257 4.081 7.461-1.396 10.304-7.16 17.923-10.866 7.62-3.705 20.355-7.616 20.493-9.782.138-2.166-.493 0 0-4.162.493-4.163-.493-3.695 0-9.19.493-5.495 1.654-8.959-1.386-12.342-2.21-2.524-1.125-9.953-.434-13.604l.118 5.37-.098-5.424Zm-23.49 28.551-2.387-.77s-5.764 1.54-6.554 1.54-5.151-.376-5.151-.376l-3.257 1.02-7.047-.805-4.105-.394a77.784 77.784 0 0 0-8.843 7.16l-1.737 2.041c.508-.727 1.09-1.41 1.737-2.04l6.592-7.805 4.52-2.31c1.264-.644 5.508-3.705 6.77-3.58 1.264.126 5.054 1.02 5.41 0 .354-1.02 5.111 1.02 5.111 1.02l5.409.77 3.671 1.79s7.343 6.839 7.48 7.215c.14.375 1.975 4.099 1.975 4.099l-9.593-8.575Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#D9DBDF",
    d: "M111.055 150.371c2.234.455 5.108.465 7.333.026 1.621-.32 3.303-.363 5.244-.134 3.507.414 6.786.573 10.091.489 1.85-.048 3.764-.144 4.254-.214 2.614-.374 3.577-.394 5.329-.11 2.55.414 5.378.386 7.435-.073 3.543-.79 5.883-2.15 7.074-4.112.268-.441.553-1.093.633-1.448.115-.514.334-.783 1.08-1.328 1.617-1.182 3.97-3.486 4.944-4.843.61-.85 1.009-.83 1.009.051 0 .373.097.923.215 1.222.631 1.594 1.14 2.774 1.375 3.186.083.146.26.473.392.727s.453.776.712 1.16c.26.383.472.723.472.756 0 .032.267.448.593.924.327.476.594.892.594.925 0 .032.232.403.515.822.284.42.584.882.668 1.028.084.145.261.442.394.66.394.648.678 1.277 1.375 3.054.118.3.214 1.088.214 1.752 0 1.18-.191 1.682-1.038 2.725-.658.81-1.142 1.531-1.443 2.152-.187.385-.439.677-.56.65-.12-.027-.497-.58-.835-1.227-.752-1.44-2.122-3.048-2.219-2.606.161.656.408 1.29.54 1.946.232.516.731 2.546 1.025 4.171-.226 6.726-2.137 13.083-8.373 16.07-1.547.74-2.242.841-1.651.239.643-1.297.749-2.753.743-4.022-.113 0-.303.312-.422.694-.318.95-.761 1.907-1.2 2.813 0 .115-.235.547-.521.96-.286.413-.678.99-.87 1.28-.604 1.124-1.652 2.078-2.47 2.958-1.313 1.321-3.125 2.393-4.91 3.421-.741.33-2.543.94-3.597 1.218-.217.057-1.14.344-2.049.637-.91.293-1.755.503-1.88.468-.412-.118-1.701-1.29-2.414-2.195-.386-.49-.797-.892-.913-.892-.115 0-.16.104-.1.231.846 1.237 1.392 2.402 2.308 3.43.731.62-.102.778-1.337.252-2.498-1.21-3.78-2.776-4.616-4.574-.55-1.2-.776-1.414-.76-.72.944 3.28 2.529 5.828 4.552 8.298.414.35.374.613-.094.613-.32 0-1.902-.557-2.701-.952-3.035-1.938-4.154-4.286-5.02-6.909-.179-.508-.41-1.34-.513-1.85-.42-2.06-.503-2.086-.635-.197-.107 2.619.144 5.259 1.633 7.596.541.868.697 1.073 1.107 1.454.372.346.809 1.018.634.975-.035-.008-.241-.044-.459-.08-.428-.068-1.268-.3-2.672-.738-1.097-.343-4.538-1.823-5.721-2.46-1.381-.746-6.177-3.972-6.986-4.7-3.8-3.42-4.072-3.714-5.403-5.813-.434-.682-.56-.443-.289.543l.379 1.373c.09.327.312.892.494 1.255.182.363.372.794.424.958.051.163.314.561.584.884.923 1.104.659 1.123-1.535.115-5.466-2.514-7.466-4.216-8.82-7.506-.755-1.837-.637-6.6.244-9.842.378-1.39.378-1.39.018-1.19-.162.09-.446.486-.56.786-.115.3-.37.816-.638 1.238-1.421 3.616-2.053 1.21-4.022-.834-1.497-1.539-2.303-2.525-3.078-3.765-.864-1.303-1.36-2.51-1.778-3.827-1.937-5.627 1.475-10.668 2.645-15.824.487-1.456 1.05-4.379 1.095-5.682.68-2.437 3.847 3.024 4.07 3.29 1.915 2.684 4.251 5.042 6.56 6.581 1.304.815 2.364 1.257 4.102 1.611Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#F5F6F8",
    d: "M138.634 151.637c0-3.178 1.142-6.226 1.333-6.303 1.02-.41 1.397-.433 2.08-.12.997.453.233 12.504.74 16.54 1.402 11.137 2.645 14.368 1.948 15.496-.29.362-1.536 9.23-1.948 9.534-.085.063-.445.377-.8.698-.355.322-.685.553-.734.514-.16-.13-.664-1.415-.943-2.408-.15-.538-.31-.978-.356-.978-.045 0 1.276-12.277 1.3-12.138.33 1.357-2.62-12.265-2.62-20.835ZM117.536 142.288c1.62-.356 2.495 22.176 2.371 27.78-.164 7.437 6.824 17.002 8.313 19.6.541.965.698 1.193 1.107 1.617.373.385.393 1.036.176.997-.429-.077-1.268-.335-2.672-.822-1.097-.381-3.867-3.287-5.01-4.114-1.142-.827-5.115-5.711-5.924-6.52-3.799-3.805-.587-38.05 1.639-38.538ZM148.532 147.849c-1.482.025-.463 16.035.282 19.616.99 4.753-.086 14.093-1.116 15.997-.372.704-2.383 3.195-2.7 3.531-.287.306 1.67-.651 1.86-.71.372-.117 1.085-1.355 2.278-1.889.933-.416 3.067-2.717 3.99-3.428.922-.71 2.942-7.435 3.57-8.082 2.947-3.04-6.13-25.07-8.164-25.035ZM105.402 167.017c0 4.038 3.062 11.805 3.101 12.129.04.323.138.882.218 1.242.08.36.164.786.187.948.022.161.138.555.257.875.406 1.092.29 1.111-.676.113-2.407-2.488-4.018-3.404-4.613-6.66-.333-1.818-1.163-3.7-.775-6.91.167-1.376.443-4.627.284-4.43-.071.09-.233.906-.284 1.203-.05.297.488-25.935 1.505-24.411.574.806.796 21.864.796 25.901ZM131.505 172.675c0 4.614 1.918 13.491 1.942 13.861.025.37.087 1.009.137 1.42.05.41.102.898.117 1.083.014.184.086.634.16 1 .255 1.248.183 1.27-.422.13-1.508-2.844-2.517-3.892-2.89-7.612-.209-2.078-.729-4.23-.486-7.897.105-1.572.278-5.288.178-5.062-.044.101-.146 1.034-.178 1.374-.031.34.306-29.64.943-27.899.36.922.499 24.988.499 29.602Z",
    opacity: 0.497
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#F5F6F8",
    d: "M134.505 170.202c0 4.23 1.918 12.367 1.942 12.706.025.339.087.924.137 1.301.05.377.102.824.117.993.014.17.086.582.16.917.255 1.144.183 1.164-.422.118-1.508-2.606-2.517-3.566-2.89-6.976-.209-1.905-.729-3.877-.486-7.239.105-1.442.278-4.848.178-4.64-.044.093-.146.947-.178 1.259-.031.311.306-27.17.943-25.574.36.845.499 22.906.499 27.135ZM125.129 167.73c0 3.844 1.438 11.242 1.457 11.55.018.308.064.84.102 1.183.037.342.077.748.087.902.011.155.066.53.121.834.191 1.04.137 1.058-.317.108-1.131-2.37-1.888-3.242-2.168-6.342-.156-1.732-.546-3.525-.363-6.581.078-1.311.207-4.407.133-4.22-.034.086-.11.863-.133 1.146-.024.283.229-24.7.706-23.25.27.769.375 20.824.375 24.67ZM109.881 167.547c0 2.884 2.397 8.432 2.428 8.663.031.231.108.63.17.887.063.257.129.562.147.677.018.116.108.397.201.625.318.78.227.794-.529.081-1.885-1.777-3.146-2.432-3.612-4.757-.26-1.298-.91-2.643-.607-4.935.13-.983.347-3.306.223-3.164-.056.063-.183.646-.223.858-.04.213.382-18.525 1.178-17.436.45.576.624 15.617.624 18.5ZM147.086 134.274c-2.498-1.442-10.324-4.45-10.54-4.538-.216-.088-.6-.222-.853-.296a11.09 11.09 0 0 1-.66-.212 3.794 3.794 0 0 0-.642-.138c-.834-.114-.8-.2.195-.499 2.481-.743 3.679-1.508 5.925-.75 1.255.424 2.745.534 4.578 1.943.786.604 2.69 1.953 2.63 1.775-.028-.08-.47-.482-.633-.622-.165-.14 15.043 13.192 13.703 13.337-.37.052-4.23-3.69-7.24-6s-5.24-3.294-6.463-4ZM117.914 134.274c2.498-1.442 10.324-4.45 10.54-4.538.216-.088.6-.222.853-.296.254-.074.55-.17.66-.212.109-.042.397-.104.642-.138.834-.114.8-.2-.195-.499-2.481-.743-3.679-1.508-5.925-.75-1.255.424-2.745.534-4.578 1.943-.786.604-2.69 1.953-2.63 1.775.028-.08.47-.482.633-.622.165-.14-15.043 13.192-13.703 13.337.37.052 4.23-3.69 7.24-6s5.24-3.294 6.463-4ZM94.871 136.746c0 1.827-1.438 5.34-1.457 5.487-.018.146-.064.4-.102.562a7.363 7.363 0 0 0-.087.429 2.5 2.5 0 0 1-.121.395c-.191.494-.137.503.317.052 1.131-1.126 1.888-1.54 2.168-3.013.156-.822.546-1.674.363-3.126-.078-.622-.207-2.093-.133-2.004.034.04.11.41.133.544.024.135-.229-11.732-.706-11.043-.27.365-.375 9.891-.375 11.717ZM167.871 136.746c0 1.827-1.438 5.34-1.457 5.487-.018.146-.064.4-.102.562a7.363 7.363 0 0 0-.087.429 2.5 2.5 0 0 1-.121.395c-.191.494-.137.503.317.052 1.131-1.126 1.888-1.54 2.168-3.013.156-.822.546-1.674.363-3.126-.078-.622-.207-2.093-.133-2.004.034.04.11.41.133.544.024.135-.229-11.732-.706-11.043-.27.365-.375 9.891-.375 11.717ZM169.07 152.222c.86 1.275.528 5.069.571 5.188.044.12.1.34.124.488.025.149.06.32.08.381.02.061.029.236.02.389-.031.523.048.478.463-.26 1.032-1.84 1.883-2.834 1.576-4.123-.171-.72-.034-1.678-.97-2.522-.4-.362-1.272-1.267-1.127-1.274.065-.004.344.183.44.255.096.072-5.841-7.978-6.177-7.051-.2.506 4.14 7.254 5 8.53ZM97.278 156.05c.127 1.68 2.766 9.011 2.72 9.27-.045.26.107 2.497 0 2.862-.562 3.123-.813 1.045-1.592-.72-.593-1.33-2.586-3.605-2.893-4.676-.342-1.125-.538-2.168-.703-3.305-.768-4.86 2.005-9.582 2.468-14.034.193-1.258.416-3.782.434-4.907.269-2.105 1.523 2.612 1.612 2.841.758 2.318-2.173 10.987-2.046 12.668ZM160.171 162.696c-.127 1.512.208 8.049.253 8.282.045.234-.106 2.246 0 2.574.563 2.809.813.94 1.593-.648.593-1.196 2.586-3.242 2.892-4.206.343-1.012.54-1.95.704-2.973.768-4.37-4.979-8.82-5.442-12.825-.193-1.132-.416-3.402-.434-4.415-.269-1.893-1.523 2.35-1.612 2.556-.758 2.085 2.173 10.143 2.046 11.655Z",
    opacity: 0.497
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#502700",
    d: "M201.053 68c2.64.01 5.264.577 7.632 1.702 4.11 1.954 7.315 5.646 9.097 9.91 1.69 4.044 2.27 8.496 2.214 12.871-.073 5.746-1.957 11.449-5.464 15.956a29.167 29.167 0 0 1-4.779 4.818c-2.976 2.385-6.353 4.222-9.907 5.565V229.31c-.026.466-.013.586-.117 1.044a4.752 4.752 0 0 1-2.514 3.185 4.65 4.65 0 0 1-3.55.201c-1.634-.577-2.887-2.141-3.084-3.905-.018-.175-.018-.35-.03-.525V115.382c.028-.465.016-.587.118-1.042.345-1.537 1.5-2.855 2.98-3.385.17-.06.35-.112.523-.153.725-.17 1.282-.367 1.85-.566 2.774-.978 5.396-2.328 7.76-4.181.18-.14.36-.284.535-.432 2.446-2.034 4.44-4.683 5.47-7.708 1.065-3.124 1.105-6.546.669-9.838-.28-2.112-.81-4.206-1.842-6.07-.864-1.56-2.129-2.922-3.702-3.717-2.934-1.486-6.7-1.029-9.35.662-.76.484-1.456 1.09-1.965 1.826-.217.314-.367.68-.511 1.042-.634 1.6-.971 3.354-.747 5.049.135 1.01.559 2.008 1.346 2.652 1.153.943 2.71 1.275 4.171 1.448.765.09 1.532.123 2.3.123l.52.03c.455.08.575.08 1.015.234a4.74 4.74 0 0 1 2.85 2.881c.517 1.492.225 3.241-.752 4.479-.758.96-1.9 1.599-3.113 1.737a5.84 5.84 0 0 1-.69.03c-1.878-.01-3.76-.176-5.593-.594 0 0-.486-.115-.785-.196l-.225-.06c-.237-.069-.474-.14-.708-.218l-.044-.015a16.296 16.296 0 0 1-1.685-.66s-.248-.113-.443-.21a14.4 14.4 0 0 1-2.374-1.478l-.062-.048c-.232-.183-.456-.37-.675-.568l-.062-.054a13.136 13.136 0 0 1-1.786-1.999s-.131-.184-.24-.349c-2.257-3.368-2.72-7.772-1.974-11.775.497-2.668 1.411-5.282 3.087-7.459a16.039 16.039 0 0 1 3.257-3.154c3.237-2.371 7.24-3.631 11.243-3.646h.136Z"
  }), /*#__PURE__*/React.createElement("path", {
    stroke: "#783A00",
    strokeLinecap: "round",
    d: "M192.003 233c5.676-16.989 7.9-30.722 6.673-41.198-1.841-15.716 0-40.983 0-44.65 0-3.665-2.213-23.03 0-37.152"
  }), /*#__PURE__*/React.createElement("path", {
    stroke: "#783A00",
    strokeLinecap: "round",
    d: "M192 229.5c1.622-16.298 2.257-29.473 1.906-39.524-.526-15.076 0-39.317 0-42.833 0-3.517-.632-22.095 0-35.643"
  }), /*#__PURE__*/React.createElement("path", {
    stroke: "#783A00",
    strokeLinecap: "round",
    d: "M193.5 203.5c4.865-11.326 6.771-20.481 5.72-27.466-1.579-10.476 0-27.322 0-29.765 0-2.444-1.897-15.354 0-24.769M202 117.03c2.162-4.371 2.882-7.705 2.162-10M206 114c2.162-4.808 2.882-8.474 2.162-11"
  }), /*#__PURE__*/React.createElement("path", {
    stroke: "#783A00",
    strokeLinecap: "round",
    d: "M213 108.632s5.31-17.5.743-27.119c-4.567-9.619-11.668-12.617-20.743-7.528-9.075 5.089-6.733 14.897-4.783 17.744 1.951 2.848 8.401 7.455 14.999 3.566"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(171 69)"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: 25,
    cy: 25,
    r: 25,
    fill: "#DE350B"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    fillRule: "nonzero",
    d: "m35.135 29.102-.19 2.59c0 3.383-2.757 6.146-6.132 6.146h-6.512a6.068 6.068 0 0 1-5.229-2.954h-.047l-4.706-9.289c-.38-.762-.047-1.714.76-2.096.809-.38 1.76-.095 2.14.667l1.473 2.906c.285.524 1.093.334 1.093-.238V15.02c0-.857.713-1.572 1.617-1.572.903 0 1.616.715 1.616 1.572v8.384c0 .381.332.715.713.715.428 0 .76-.334.76-.715v-9.67c0-.857.713-1.572 1.616-1.572.904 0 1.617.715 1.617 1.572v9.718a.7.7 0 0 0 .713.714c.427 0 .76-.333.76-.714V15.02c0-.857.713-1.572 1.616-1.572.903 0 1.616.715 1.616 1.572v8.48a.7.7 0 0 0 .713.714c.428 0 .76-.333.76-.715v-6.24c0-.81.714-1.524 1.617-1.524s1.616.667 1.616 1.524v11.843Z"
  })), /*#__PURE__*/React.createElement("g", {
    transform: "translate(168 64)"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: 27.5,
    cy: 27.5,
    r: 27.5,
    fill: "#DE350B"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    fillRule: "nonzero",
    d: "m38.649 32.012-.21 2.85c0 3.72-3.032 6.76-6.744 6.76H24.53a6.675 6.675 0 0 1-5.751-3.25h-.053l-5.176-10.217c-.418-.838-.052-1.886.837-2.306.888-.419 1.934-.104 2.353.734l1.62 3.196c.314.577 1.203.367 1.203-.262V16.523c0-.944.784-1.73 1.778-1.73.993 0 1.777.786 1.777 1.73v9.222c0 .419.366.786.785.786.47 0 .836-.367.836-.786V15.108c0-.944.785-1.73 1.778-1.73.994 0 1.778.786 1.778 1.73v10.689a.77.77 0 0 0 .784.786c.47 0 .837-.367.837-.786v-9.275c0-.943.784-1.729 1.778-1.729.993 0 1.777.786 1.777 1.73v9.326a.77.77 0 0 0 .785.786c.47 0 .836-.366.836-.786v-6.864c0-.89.784-1.677 1.778-1.677.993 0 1.778.734 1.778 1.677V32.012Z"
  })))));
};
var Unauthorized = SvgImage403HaRi;

var _defs$2, _g$2;
function _extends$2() { _extends$2 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }
var SvgImage404HaRi = function SvgImage404HaRi(props) {
  return /*#__PURE__*/React.createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: 338,
    height: 260,
    viewBox: "0 0 338 260"
  }, props), _defs$2 || (_defs$2 = /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("filter", {
    id: "image_404_HaRi_svg__c",
    width: "120.7%",
    height: "300.4%",
    x: "-10.4%",
    y: "-100.2%",
    filterUnits: "objectBoundingBox"
  }, /*#__PURE__*/React.createElement("feGaussianBlur", {
    "in": "SourceGraphic",
    stdDeviation: 1.2
  })), /*#__PURE__*/React.createElement("path", {
    id: "image_404_HaRi_svg__a",
    d: "M.016.09H75.17v74.147H.016z"
  }))), _g$2 || (_g$2 = /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#E6F9FF",
    d: "M122.573 108.56c-16.06 45-85.655 46.402-97.17 74.465-11.515 28.063 2.008 83.378 48.152 63.5 46.143-19.876 20.144-27.73 98.555-42.823s52.152 24.337 91.735 25.69c39.582 1.351 83.049-34.727 61.879-77.503-21.17-42.777-52.301-14.609-42.201-63.09 10.1-48.482-35.776-88.726-84.17-73.04-48.393 15.686-60.719 47.802-76.78 92.802Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(1 2)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    d: "M173.948 93.364c-9.074 0-17.022 4.836-21.418 12.079-8.631-5.212-18.784-8.216-29.65-8.216-31.396 0-56.849 25.083-56.849 56.023a55.156 55.156 0 0 0 4.152 21.056 27.878 27.878 0 0 0-4.152 14.683c0 15.47 12.541 28.011 28.012 28.011h157.884c15.47 0 28.011-12.541 28.011-28.011 0-12.965-8.808-23.873-20.766-27.066a40.842 40.842 0 0 0 3.422-16.4c0-23.472-19.844-42.5-44.323-42.5-7.766 0-15.066 1.915-21.413 5.28-3.894-8.801-12.687-14.94-22.91-14.94Z",
    opacity: 0.4
  }), /*#__PURE__*/React.createElement("g", {
    fillRule: "nonzero"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    d: "M85.382 161.311c-.635-1.109-1.616-1.868-2.828-2.16-1.212-.291-2.425-.175-3.521.467l-23.55 13.777a1.643 1.643 0 0 1-1.27.175c-.462-.117-.808-.409-1.04-.817a1.729 1.729 0 0 1 .636-2.335l10.1-5.896c1.386-.817 1.848-2.627 1.04-4.028-.404-.7-1.04-1.167-1.732-1.343-.75-.233-1.5-.116-2.193.292L6.88 191.082c-3.29 1.926-5.54 5.02-6.464 8.698-.924 3.677-.289 7.53 1.674 10.799C4.63 214.723 9.19 217 13.866 217c2.424 0 4.848-.642 7.1-1.926l53.853-31.522c1.385-.818 1.847-2.627 1.04-4.028-.405-.7-1.04-1.168-1.733-1.343-.75-.175-1.5-.116-2.193.292l-10.101 5.896a1.643 1.643 0 0 1-1.27.175c-.462-.117-.808-.409-1.039-.817a1.729 1.729 0 0 1 .635-2.335l23.55-13.776c2.194-1.226 2.944-4.087 1.674-6.305Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#C7EBF9",
    d: "M85.382 161.311c-.635-1.109-1.616-1.868-2.828-2.16-1.212-.291-2.425-.175-3.521.467l-23.55 13.777a1.643 1.643 0 0 1-1.27.175c-.462-.117-.808-.409-1.04-.817a1.729 1.729 0 0 1 .636-2.335l10.1-5.896c1.386-.817 1.848-2.627 1.04-4.028-.404-.7-1.04-1.167-1.732-1.343-.75-.233-1.5-.116-2.193.292L6.88 191.082c-3.29 1.926-5.54 5.02-6.464 8.698-.924 3.677-.289 7.53 1.674 10.799C4.63 214.723 9.19 217 13.866 217c2.424 0 4.848-.642 7.1-1.926l53.853-31.522c1.385-.818 1.847-2.627 1.04-4.028-.405-.7-1.04-1.168-1.733-1.343-.75-.175-1.5-.116-2.193.292l-10.101 5.896a1.643 1.643 0 0 1-1.27.175c-.462-.117-.808-.409-1.039-.817a1.729 1.729 0 0 1 .635-2.335l23.55-13.776c2.194-1.226 2.944-4.087 1.674-6.305Zm-46.754 21.132 1.963-1.168c.404-.233.923-.117 1.154.292a.94.94 0 0 1-.289 1.226l-1.962 1.109a1.078 1.078 0 0 1-.462.117c-.289 0-.577-.175-.75-.467-.231-.292-.058-.876.346-1.11Zm-7.62-.7.693-.41c.405-.233.924-.116 1.213.292.23.409.115.934-.347 1.168l-.692.408a1.078 1.078 0 0 1-.462.117c-.289 0-.577-.175-.75-.467a.877.877 0 0 1 .346-1.109Zm5.6 19.438-17.951 10.507c-1.501.876-3.175 1.343-4.849 1.343a9.515 9.515 0 0 1-2.54-.35c-2.482-.701-4.617-2.336-5.887-4.612-2.655-4.729-1.097-10.741 3.578-13.426l17.952-10.508c.404-.233.923-.116 1.154.292.231.409.116.934-.289 1.168l-13.218 7.764c.578.058 1.155.116 1.732.291.693.176 1.328.467 1.905.76l16.277-9.516a.808.808 0 0 1 1.155.35c.23.41.115.935-.29 1.168L19.87 195.46a9.075 9.075 0 0 1 1.904 2.043l22.973-13.426a.808.808 0 0 1 1.155.35c.23.409.115.934-.289 1.168L22.64 199.02c.404.875.693 1.751.808 2.685l15.47-9.048a.808.808 0 0 1 1.154.35c.23.409.115.934-.289 1.168l-16.277 9.515a9.861 9.861 0 0 1-.923 3.677l13.16-7.705c.404-.234.924-.117 1.212.292.173.467.058.992-.346 1.226Zm4.848-2.802-.692.408a1.078 1.078 0 0 1-.462.117c-.289 0-.577-.175-.75-.467a.94.94 0 0 1 .288-1.226l.693-.408a.808.808 0 0 1 1.154.35c.347.408.173.992-.23 1.226Zm4.387-7.764-1.962 1.11a1.078 1.078 0 0 1-.462.116c-.289 0-.577-.175-.75-.467-.231-.409-.116-.934.288-1.168l1.963-1.167c.404-.234.923-.117 1.212.292.288.467.173 1.05-.289 1.284Zm7.388-9.515-3.52 2.043a1.078 1.078 0 0 1-.462.117c-.289 0-.578-.175-.75-.467-.232-.409-.116-.934.346-1.168l3.52-2.043c.405-.233.924-.116 1.213.292a.928.928 0 0 1-.347 1.226Z"
  })), /*#__PURE__*/React.createElement("g", {
    fillRule: "nonzero"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#4A90E2",
    d: "M297.468 162.374c-1.064-4.558 1.453-9.15 5.69-10.683a8.889 8.889 0 0 1 2.815-.525 25.513 25.513 0 0 0-.635-6.953c-1.517-6.505-5.432-12.016-11.02-15.513-5.566-3.484-12.13-4.554-18.483-3.012-5.17 1.256-9.701 4.11-13.1 8.253a25.096 25.096 0 0 0-3.737 6.19c-2.097 4.966-2.553 10.38-1.322 15.654 1.227 5.269 4.026 9.892 8.092 13.368a24.49 24.49 0 0 0 6.068 3.808 23.842 23.842 0 0 0 15.343 1.349c5.06-1.228 9.376-3.99 12.596-7.684a9.02 9.02 0 0 1-1.648-2.378 9.176 9.176 0 0 1-.66-1.874Zm-12.719-6.803c.163.694.576 1.28 1.172 1.651.587.376 1.29.493 1.973.327l2.91-.706a1.931 1.931 0 0 1 1.49.238c.448.283.766.73.89 1.256.122.529.039 1.07-.243 1.526-.27.456-.707.78-1.223.904l-12.723 3.09c-.87.209-1.405 1.101-1.199 1.986.1.424.358.787.723 1.017.365.234.802.307 1.223.202l4.69-1.139a1.138 1.138 0 0 1 1.373.868 1.17 1.17 0 0 1-.139.885 1.137 1.137 0 0 1-.706.52l-10.857 2.637a19.439 19.439 0 0 1-1.163-.464 21.437 21.437 0 0 1-4.146-2.403l4.217-1.021a2.954 2.954 0 0 0 1.843-1.365c.413-.686.54-1.502.357-2.29a3.004 3.004 0 0 0-1.338-1.88 2.897 2.897 0 0 0-2.228-.372l-2.89.59a1.612 1.612 0 0 1-1.247-.203 1.668 1.668 0 0 1-.739-1.041c-.214-.905.338-1.817 1.22-2.031l7.107-1.688a4.906 4.906 0 0 0 3.065-2.261c.691-1.15.906-2.503.6-3.812a4.993 4.993 0 0 0-2.224-3.129 4.816 4.816 0 0 0-3.728-.61l-7.696 1.826c-.429.105-.87.032-1.247-.202a1.665 1.665 0 0 1-.742-1.046c-.21-.9.341-1.813 1.21-2.023l3.483-.73a2.934 2.934 0 0 0 1.843-1.361 3.06 3.06 0 0 0 .357-2.29 3.002 3.002 0 0 0-1.338-1.885 2.898 2.898 0 0 0-2.24-.368l-4.213 1.026a22.27 22.27 0 0 1 2.641-4.05c.27-.327.548-.642.834-.949l10.856-2.636c.294-.073.6-.025.862.14.258.162.44.42.512.724.072.306.024.617-.143.884a1.11 1.11 0 0 1-.703.525l-4.69 1.138c-.865.21-1.401 1.099-1.194 1.983.099.428.357.791.726 1.021.37.235.802.303 1.22.202l12.726-3.089a1.916 1.916 0 0 1 1.489.243c.449.278.766.727.89 1.251a2.036 2.036 0 0 1-.243 1.527c-.274.456-.707.779-1.223.904l-2.91.707c-1.402.339-2.268 1.78-1.934 3.21.163.694.575 1.28 1.167 1.647a2.535 2.535 0 0 0 1.974.323l10.324-2.503a3.36 3.36 0 0 1 2.605.424 3.486 3.486 0 0 1 1.556 2.188c.21.917.064 1.861-.42 2.665a3.453 3.453 0 0 1-2.14 1.583l-10.325 2.503c-1.398.34-2.267 1.776-1.934 3.206Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#9EE9FF",
    d: "M312.796 158.15c-.465-2.083-1.663-3.846-3.373-4.966-1.704-1.115-3.714-1.458-5.66-.963-4.022 1.02-6.515 5.341-5.559 9.63.465 2.082 1.663 3.845 3.374 4.965a7.11 7.11 0 0 0 3.908 1.184c.583 0 1.17-.073 1.751-.22 4.021-1.021 6.515-5.342 5.559-9.63Zm-6.018 7.588a5.195 5.195 0 0 1-4.166-.71c-1.26-.825-2.144-2.125-2.487-3.661-.706-3.165 1.131-6.352 4.096-7.105.428-.108.86-.162 1.289-.162 1.007 0 1.997.296 2.877.872 1.261.825 2.144 2.125 2.487 3.662.706 3.165-1.131 6.352-4.096 7.104ZM258.932 124.922a2.481 2.481 0 0 0-1.124-1.551 2.487 2.487 0 0 0-1.888-.302 2.504 2.504 0 0 0-1.852 3.01 2.48 2.48 0 0 0 1.124 1.55 2.485 2.485 0 0 0 1.888.302 2.502 2.502 0 0 0 1.852-3.009ZM268.092 174.592a3.975 3.975 0 0 0-3.019-.482 4.004 4.004 0 0 0-2.964 4.815 3.972 3.972 0 0 0 1.799 2.483 3.974 3.974 0 0 0 3.019.482 4.004 4.004 0 0 0 2.964-4.815 3.974 3.974 0 0 0-1.799-2.483Zm-1.63 5.354a1.979 1.979 0 0 1-1.504-.24 2.002 2.002 0 0 1 1.046-3.707c.363 0 .72.1 1.038.295a2.002 2.002 0 0 1-.58 3.652Z"
  })), /*#__PURE__*/React.createElement("g", {
    transform: "translate(94 75)"
  }, /*#__PURE__*/React.createElement("g", {
    transform: "rotate(-10 100.107 -129.053)"
  }, /*#__PURE__*/React.createElement("mask", {
    id: "image_404_HaRi_svg__b",
    fill: "#fff"
  }, /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#image_404_HaRi_svg__a"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "M59.13 47.742c1.152 0 2.227.637 2.804 1.66a3.08 3.08 0 0 1-.041 3.123l-.03.049c-4.014 6.41-10.475 11.08-17.738 12.83-1.985.479-3.372 2.288-3.372 4.4 0 2.444 1.962 4.433 4.373 4.433.338 0 .68-.041 1.016-.121 8.122-1.945 15.49-6.651 20.75-13.253 5.416-6.799 8.279-14.995 8.279-23.7 0-8.706-2.863-16.901-8.28-23.7C61.634 6.86 54.265 2.155 46.142.21a4.38 4.38 0 0 0-1.015-.12c-2.411 0-4.373 1.988-4.373 4.432 0 2.111 1.387 3.92 3.372 4.4 7.263 1.75 13.724 6.42 17.726 12.81l.047.079c.574.963.59 2.13.036 3.112a3.236 3.236 0 0 1-2.805 1.66 3.16 3.16 0 0 1-1.36-.309 11.756 11.756 0 0 0-5.061-1.132c-6.322 0-11.558 4.974-11.921 11.323l-.002.036-.004.036a4.41 4.41 0 0 0-.028.478v.09l-.001.058v.148c0 .148.01.304.029.478l.004.036.002.036c.363 6.35 5.6 11.323 11.92 11.323 1.77 0 3.472-.381 5.062-1.132.434-.205.892-.31 1.36-.31M30.045.09c-.339 0-.68.04-1.016.12-8.122 1.945-15.491 6.651-20.75 13.253C2.863 20.262 0 28.457 0 37.163s2.863 16.901 8.279 23.7c5.259 6.602 12.628 11.308 20.75 13.253.336.08.677.12 1.016.12 2.411 0 4.373-1.988 4.373-4.432 0-2.112-1.387-3.92-3.373-4.4-7.263-1.75-13.723-6.42-17.725-12.811l-.04-.065a3.081 3.081 0 0 1-.044-3.125 3.236 3.236 0 0 1 2.805-1.66c.469 0 .926.104 1.36.309a11.762 11.762 0 0 0 5.062 1.132c6.321 0 11.558-4.974 11.921-11.323l.002-.037.004-.036c.019-.172.028-.328.028-.477v-.296c0-.148-.01-.305-.028-.477l-.004-.036-.002-.037c-.363-6.35-5.6-11.323-11.921-11.323-1.768 0-3.471.38-5.062 1.132-.434.205-.891.31-1.36.31a3.236 3.236 0 0 1-2.805-1.66 3.08 3.08 0 0 1 .042-3.123l.003-.006.012-.018.024-.04c4.005-6.395 10.465-11.064 17.728-12.815 1.986-.479 3.373-2.288 3.373-4.4 0-2.444-1.962-4.433-4.373-4.433",
    mask: "url(#image_404_HaRi_svg__b)"
  })), /*#__PURE__*/React.createElement("path", {
    stroke: "#003580",
    strokeLinecap: "round",
    strokeWidth: 2,
    d: "m76.316 59.596-10.785 8.415"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#4A90E2",
    d: "M19.756 52.924c.899 5.1 5.667 8.523 10.65 7.644-4.962-10.285-3.766-12.296-3.257-18.47-4.982.88-8.293 5.726-7.393 10.826ZM113.962 36.049c-.899-5.1-5.667-8.523-10.65-7.644 4.962 10.285 3.766 12.296 3.257 18.47 4.982-.88 8.293-5.726 7.393-10.826Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#2667B2",
    d: "M91.927 40.782c.805 4.565-2.222 8.91-6.762 9.71-4.539.8-8.87-2.247-9.675-6.812-.805-4.563 2.222-8.91 6.762-9.71 4.538-.8 8.87 2.249 9.675 6.812Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M91.927 40.782c.805 4.565-3.378 2.356-7.917 3.156-4.54.8-7.715 4.307-8.52-.258-.805-4.563 2.222-8.91 6.762-9.71 4.538-.8 8.87 2.249 9.675 6.812Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M85.437 52.03c-5.376.949-10.525-2.676-11.478-8.08-.953-5.405 2.646-10.572 8.022-11.52 5.376-.948 10.524 2.677 11.477 8.082.953 5.404-2.646 10.571-8.021 11.519ZM52.513 57.836c-5.376.948-10.525-2.676-11.478-8.08-.953-5.405 2.646-10.572 8.022-11.52 5.376-.948 10.524 2.677 11.477 8.08.953 5.405-2.646 10.572-8.02 11.52Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    fillRule: "nonzero",
    d: "M85.833 49.494a7.229 7.229 0 0 1-4.12-.487c-1.692-.735-2.983-2.06-3.637-3.73a6.572 6.572 0 0 1 .123-5.017c.68-1.538 1.894-2.707 3.42-3.291a5.96 5.96 0 0 1 4.553.144c1.384.625 2.43 1.73 2.945 3.11a5.346 5.346 0 0 1-.167 4.091c-.57 1.23-1.565 2.152-2.802 2.597a4.735 4.735 0 0 1-3.628-.19c-1.074-.516-1.872-1.402-2.248-2.495a4.118 4.118 0 0 1 .218-3.166 3.71 3.71 0 0 1 2.188-1.898 3.505 3.505 0 0 1 2.706.248 3.103 3.103 0 0 1 1.543 1.886 2.884 2.884 0 0 1-.286 2.248 2.49 2.49 0 0 1-1.589 1.183 2.291 2.291 0 0 1-1.797-.342 1.871 1.871 0 0 1-.806-1.305 1.693 1.693 0 0 1 .458-1.371 1.245 1.245 0 0 1 1.06-.366.6.6 0 0 1-.156 1.19c-.017-.002-.028-.004-.057.025a.503.503 0 0 0-.115.368.667.667 0 0 0 .3.474c.235.163.558.222.843.158.439-.102.691-.395.826-.623a1.7 1.7 0 0 0 .166-1.309 1.91 1.91 0 0 0-.956-1.158 2.294 2.294 0 0 0-1.774-.163 2.52 2.52 0 0 0-1.482 1.293 2.911 2.911 0 0 0-.155 2.238c.27.787.85 1.427 1.632 1.803.846.405 1.83.458 2.703.143.933-.336 1.686-1.036 2.12-1.972a4.14 4.14 0 0 0 .13-3.167c-.401-1.08-1.223-1.945-2.313-2.437a4.755 4.755 0 0 0-3.631-.117c-1.225.469-2.202 1.412-2.752 2.656a5.365 5.365 0 0 0-.102 4.095c.535 1.37 1.6 2.46 2.998 3.067a5.977 5.977 0 0 0 4.56.087c2.595-1.033 4.23-3.843 3.885-6.682a.6.6 0 1 1 1.19-.145c.41 3.371-1.539 6.711-4.633 7.942a6.98 6.98 0 0 1-1.361.385Z",
    opacity: 0.298
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    fillRule: "nonzero",
    d: "M51.607 55.529a7.229 7.229 0 0 1-4.12-.487c-1.692-.735-2.983-2.06-3.637-3.73a6.572 6.572 0 0 1 .123-5.017c.68-1.538 1.894-2.707 3.42-3.291a5.96 5.96 0 0 1 4.553.144c1.384.625 2.43 1.73 2.945 3.11a5.346 5.346 0 0 1-.167 4.091c-.57 1.23-1.565 2.152-2.802 2.597a4.735 4.735 0 0 1-3.627-.19c-1.075-.516-1.873-1.402-2.249-2.495a4.118 4.118 0 0 1 .218-3.166 3.71 3.71 0 0 1 2.188-1.898 3.505 3.505 0 0 1 2.706.248 3.103 3.103 0 0 1 1.543 1.886 2.884 2.884 0 0 1-.286 2.248 2.49 2.49 0 0 1-1.589 1.183 2.291 2.291 0 0 1-1.797-.342 1.871 1.871 0 0 1-.806-1.305 1.693 1.693 0 0 1 .458-1.371 1.245 1.245 0 0 1 1.06-.366.6.6 0 0 1-.156 1.19c-.017-.003-.028-.004-.057.025a.503.503 0 0 0-.115.368.667.667 0 0 0 .3.474c.235.163.558.222.843.158.439-.102.691-.395.826-.623a1.7 1.7 0 0 0 .166-1.309 1.91 1.91 0 0 0-.956-1.158 2.294 2.294 0 0 0-1.774-.163 2.52 2.52 0 0 0-1.482 1.293 2.911 2.911 0 0 0-.155 2.238c.27.787.85 1.427 1.632 1.803.846.405 1.83.458 2.703.143.933-.336 1.686-1.036 2.12-1.973a4.14 4.14 0 0 0 .13-3.166c-.401-1.08-1.223-1.945-2.313-2.437a4.755 4.755 0 0 0-3.631-.117c-1.225.469-2.202 1.412-2.752 2.656a5.365 5.365 0 0 0-.102 4.095c.536 1.37 1.6 2.46 2.998 3.067a5.977 5.977 0 0 0 4.56.087c2.595-1.033 4.23-3.843 3.885-6.682a.6.6 0 1 1 1.19-.145c.41 3.371-1.539 6.711-4.633 7.941a6.98 6.98 0 0 1-1.361.386Z",
    opacity: 0.305
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "m99.93 139.453 2.565-39.851c.5-7.781-5.4-14.495-13.182-14.995a14.118 14.118 0 0 0-4.56.451l-19.867 5.324c-7.531 2.018-12 9.759-9.983 17.29a14.118 14.118 0 0 0 1.89 4.176l22.146 33.23c3.513 5.271 10.635 6.697 15.906 3.183a11.47 11.47 0 0 0 5.086-8.808Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#9EE9FF",
    d: "m93.755 132.82.488-30.165a8.47 8.47 0 0 0-10.662-8.32L70.54 97.83a8.47 8.47 0 0 0-5.074 12.535l15.504 25.88a6.882 6.882 0 0 0 12.785-3.426Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "scale(1 -1) rotate(60 117.086 -26.74)"
  }, /*#__PURE__*/React.createElement("path", {
    stroke: "#4A90E2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 9.6,
    d: "M25.167 0 7.274 10.058 7.19 29.934"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 7.19,
    cy: 32.329,
    fill: "#4A90E2",
    rx: 7.19,
    ry: 7.184
  })), /*#__PURE__*/React.createElement("g", {
    transform: "rotate(-15 277.739 -338.017)"
  }, /*#__PURE__*/React.createElement("path", {
    stroke: "#4A90E2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 9.6,
    d: "m.429 21.595 19.77 5.53 14.126-13.996"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 37.151,
    cy: 9.579,
    fill: "#4A90E2",
    rx: 7.19,
    ry: 7.184
  })), /*#__PURE__*/React.createElement("ellipse", {
    cx: 92.877,
    cy: 165.836,
    fill: "#D8D8D8",
    filter: "url(#image_404_HaRi_svg__c)",
    rx: 17.377,
    ry: 1.796
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#1DBEEE",
    fillRule: "nonzero",
    d: "M274 52.942a34.93 34.93 0 0 1-16.443 29.63 35.05 35.05 0 0 1-33.88 1.788L204 97l6.772-23.396a34.897 34.897 0 0 1-.146-41.117c8.888-12.287 24.696-17.452 39.14-12.79 14.445 4.662 24.232 18.089 24.234 33.245Z"
  }), /*#__PURE__*/React.createElement("g", {
    fillRule: "nonzero"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#FED085",
    d: "M77.667 52.667h1.057l1.61 1.609v1.057a.666.666 0 1 0 1.333 0v-1.057l1.609-1.61h1.057a.666.666 0 1 0 0-1.333h-1.057l-1.61-1.609v-1.057a.666.666 0 1 0-1.333 0v1.057l-1.609 1.61h-1.057a.666.666 0 1 0 0 1.333ZM81 50.943 82.057 52 81 53.057 79.943 52 81 50.943Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#51DCFF",
    d: "M108.37 82.017a.5.5 0 1 0 .26.966.5.5 0 0 0-.26-.966M112.37 68.017a.5.5 0 1 0 .26.966.5.5 0 0 0-.26-.966M79.37 61.017a.5.5 0 1 0 .26.966.5.5 0 0 0-.26-.966M91.63 62.983a.5.5 0 1 0-.26-.966.5.5 0 0 0 .26.966M96.371 82.017a.5.5 0 1 0 .258.966.5.5 0 0 0-.258-.966"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#6FCDE9",
    d: "M113.637 47.509c-3.054-3.252-8.38-.519-11.282 1.4-1.97 1.304-2.963 2.033-3.46 2.478-4.62-1.088-9.692.116-13.29 3.644a13.631 13.631 0 0 0-3.714 13.043 59.274 59.274 0 0 0-2.531 3.376c-2.508 3.644-4.997 8.208-1.963 11.18.997.977 2.168 1.37 3.423 1.37 2.567 0 5.487-1.643 7.984-3.293a60.686 60.686 0 0 0 3.436-2.473c1.099.262 2.213.396 3.32.396 3.701 0 7.322-1.423 9.995-4.044 3.474-3.405 4.88-8.377 3.722-13.05a59.26 59.26 0 0 0 2.522-3.37c2.424-3.522 4.765-7.541 1.838-10.657Zm-6.393 9.536a13.752 13.752 0 0 0-1.689-2.014 14.003 14.003 0 0 0-2.05-1.653c4.97-3.529 6.876-3.62 7.151-3.348.523.512-.49 3.05-3.412 7.015Zm-21.64 17.541a13.84 13.84 0 0 0 2.053 1.654c-.446.316-.883.617-1.309.899-4.09 2.703-5.607 2.682-5.846 2.448-.277-.272-.184-2.138 3.416-7.01.49.707 1.047 1.383 1.686 2.01Zm25.087-17.152c-2.45 3.56-6.143 7.818-10.4 11.992-4.259 4.173-8.604 7.794-12.235 10.195-3.291 2.175-7.37 4.379-9.713 2.083-2.343-2.296-.095-6.295 2.125-9.521a55.011 55.011 0 0 1 1.892-2.567c.017.045.038.087.055.132a13.611 13.611 0 0 0 .522 1.17c.07.138.134.28.21.416l.015.033c-3.651 4.836-4.865 7.912-3.605 9.146 1.105 1.084 3.571.335 7.539-2.288 3.543-2.342 7.797-5.89 11.98-9.99 5.542-5.432 15.291-16.422 12.526-19.132-1.258-1.234-4.396-.046-9.327 3.53-.034-.018-.07-.033-.106-.051-.035-.019-.072-.034-.107-.053a14.48 14.48 0 0 0-1.065-.483c-.066-.027-.13-.054-.196-.079-.103-.04-.204-.086-.31-.124a78.705 78.705 0 0 1 2.613-1.847c2.05-1.356 7.081-4.226 9.55-1.6 2.045 2.177.765 5.073-1.963 9.038Z"
  })), /*#__PURE__*/React.createElement("circle", {
    cx: 154.5,
    cy: 72.5,
    r: 1.5,
    fill: "#C7EBF9"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 66.5,
    cy: 79.5,
    r: 1.5,
    fill: "#C7EBF9"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 83.5,
    cy: 99.5,
    r: 2.5,
    fill: "#C7EBF9"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 160.5,
    cy: 0.5,
    r: 1,
    fill: "#C7EBF9"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 109,
    cy: 91,
    r: 1,
    fill: "#C7EBF9"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 238,
    cy: 56,
    r: 24,
    fill: "#FFF"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#1DBEEE",
    fillRule: "nonzero",
    d: "M239 23c16.569 0 30 13.431 30 30 0 16.569-13.431 30-30 30-16.569 0-30-13.431-30-30 0-16.569 13.431-30 30-30Zm.383 43.125h-.766c-.953 0-1.726.773-1.726 1.727v2.171c0 .954.773 1.727 1.726 1.727h.766c.953 0 1.726-.773 1.726-1.727v-2.171c0-.954-.773-1.727-1.726-1.727Zm-.097-31.165c-5.298-.209-9.72 4.082-9.72 9.395a2.11 2.11 0 1 0 4.22 0c0-2.93 2.444-5.3 5.345-5.179l.04.002c2.73.06 4.992 2.323 5.053 5.052v.012c.06 2.143-1.243 4.133-3.164 4.939l-.05.021c-2.508 1.129-4.158 3.432-4.158 6.124V60.5a2.11 2.11 0 0 0 4.219 0v-5.174c0-.941.602-1.788 1.65-2.267 3.499-1.482 5.826-5.045 5.72-8.929-.113-4.976-4.18-9.048-9.155-9.17Z"
  })))));
};
var NotFound = SvgImage404HaRi;

var _defs$1, _g$1;
function _extends$1() { _extends$1 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }
var SvgImage500HaRi = function SvgImage500HaRi(props) {
  return /*#__PURE__*/React.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: 382,
    height: 252,
    viewBox: "0 0 382 252"
  }, props), _defs$1 || (_defs$1 = /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("filter", {
    id: "image_500_HaRi_svg__c",
    width: "120.8%",
    height: "300.5%",
    x: "-10.4%",
    y: "-100.2%",
    filterUnits: "objectBoundingBox"
  }, /*#__PURE__*/React.createElement("feGaussianBlur", {
    "in": "SourceGraphic",
    stdDeviation: 1.2
  })), /*#__PURE__*/React.createElement("path", {
    id: "image_500_HaRi_svg__a",
    d: "M.016.09h75.008v74.135H.016z"
  }))), _g$1 || (_g$1 = /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#E6F9FF",
    fillRule: "nonzero",
    d: "M115.251 8.804c10.245-7.725 26.332-9.294 40.97-8.686 45.987 1.935 87.497 20.717 123.401 41.964 12.998 7.692 25.796 15.98 34.234 26.573 17.175 21.564 12.082 51.435-11.803 69.198-8.125 6.044-17.974 10.68-28.09 14.786-17.973 7.302-37.382 13.163-57.789 14.833-14.555 1.189-29.29.223-43.756-1.439-40.421-4.638-80.1-14.896-113.355-32.444-14.586-7.697-28.336-17.265-34.347-29.716-6.011-12.451-2.163-28.231 12.728-35.601 6.161-3.048 13.527-4.425 20.737-5.718 10.614-1.904 21.399-3.78 30.975-7.646 9.892-3.997 21.608-11.725 19.638-20.56-2.09-9.494-3.778-17.827 6.457-25.544Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#C0ECF2",
    fillRule: "nonzero",
    d: "M95.343 74.217c0 2.3-.225 4.589-.615 6.825a44.979 44.979 0 0 1 1.67-1.834l-.134.22 15.505 23.561a141.105 141.105 0 0 1-3.159 9.215L92.62 89.1c-.064.184-.128.368-.193.55l15.978 23.088a123.31 123.31 0 0 1-.925 2.316L91.358 92.448c-.07.174-.142.346-.214.518l16.121 22.605a105.324 105.324 0 0 1-4.893 10.227l-.018.007-16.185-23.05c-.09.151-.18.298-.267.442l16.205 23.08a78.042 78.042 0 0 1-5.017 7.893l-7.78-14.064c.066.417.125.834.179 1.252l7.309 13.213c-2.611 3.532-5.543 6.77-8.828 9.498l-.11.464c.019.03.038.059.058.087l.117-.096c3.2-2.653 6.217-5.9 9.03-9.714l18.886-6.443c-8.11 9.796-21.284 14.892-27.327 16.82.763.382 1.97.578 3.62.814 1.466.21 1.945-.44 2.033-1.21.096.985-.184 2.087-2.033 1.823-2.174-.31-3.578-.551-4.214-1.241l-.408.124a62.168 62.168 0 0 1-.815 2.957c-.068-.87-.163-1.749-.286-2.635l-.053.014-.143.04.183-.138a33.17 33.17 0 0 0-.065-.454l-.354.264c.179 1.261.303 2.525.368 3.79-1.12-.43-18.686-7.228-32.019-17.474l28.429 1.697c.35.904.68 1.813.986 2.727-.068-.534-.135-1.086-.2-1.653-.142-.39-.29-.78-.441-1.172l.214-.892c-.05-.477-.097-.961-.143-1.454l-.377 1.57a77.536 77.536 0 0 0-3.585-7.638c-.139-.258-.283-.518-.425-.778l3.28-17.694c-.126-.105-.264-.22-.412-.346l-3.224 17.393c-.465-.833-.95-1.67-1.453-2.51l.099.064 1.837-17.324c-.136-.12-.274-.243-.414-.37l-1.818 17.144a110.9 110.9 0 0 0-4.195-6.39l.384-16.03-.422-.415-.38 15.857a139.938 139.938 0 0 0-7.602-9.678L62.43 86.68c-.158-.195-.316-.391-.472-.588l2.15 17.334a172.7 172.7 0 0 0-8.671-9.297l-2.209-11.41-.207-.079c2.93.574 6.012 1.699 9.116 3.303l-.498-.253a91.274 91.274 0 0 1-3.604-4.88l26.512 10.402c.197 3.567.106 7.119-.36 10.578l.172-.788.265.375c.028-.235.055-.47.08-.707l-.2-.284c.108-.446.223-.888.346-1.33.19-2.504.208-5.117.056-7.83Zm26.193 44.395a63.76 63.76 0 0 1-1.193 2.807 30.74 30.74 0 0 1-4.099 6.587l.02-.252-18.707 6.381a77.536 77.536 0 0 0 4.532-7.116c.144-.256.287-.517.43-.776Zm-42.832 6.022a78.042 78.042 0 0 1 3.981 8.463l-28.638-1.71.115.26a62.774 62.774 0 0 1-6.307-5.554Zm-6.282-10.088c2.178 3.092 4.187 6.3 6.02 9.607l-.004.02-31.026 1.467a37.74 37.74 0 0 1-4.314-5.346 62.528 62.528 0 0 1-2.421-4.013Zm50.841-.823a65.834 65.834 0 0 1-1.61 4.59l.014-.258-18.792 7.541a93.95 93.95 0 0 0 1.342-2.57l-.002.117Zm2.075-8.815a64.89 64.89 0 0 1-1.984 8.519l.004-.254-18.89 9.342a110.901 110.901 0 0 0 3.153-6.965ZM86.955 115.85l-.156.648.344.621.156-.648-.344-.621Zm-16.316-3.784c.49.663.977 1.337 1.461 2.022l-31.667 1.731.118.23a55.87 55.87 0 0 1-1.497-2.94l.116.232Zm55.3-20.251c.32 4.278.134 8.58-.556 12.814l-.009-.246-17.48 10.5a139.939 139.939 0 0 0 4.104-11.601Zm-61.733 12.191c1.983 2.31 4.05 4.86 6.093 7.601l-31.353 1.27a45.37 45.37 0 0 1-3.055-8.619l.114.232Zm-28.73-11.433.098.231 19.66 1.556a171.95 171.95 0 0 1 8.576 9.186l-27.972.48c-.98-4.243-1.1-8.15-.363-11.453Zm88.353-10.468c1.084 2.782 1.783 5.987 2.09 9.467l-.032-.227-13.68 11.252a172.701 172.701 0 0 0 3.211-12.302l8.455-7.973ZM106.045 72.6l-.142.208 9.21 17.438a171.95 171.95 0 0 1-3.168 12.16L96.566 79.039c3.06-3.098 6.296-5.292 9.48-6.437ZM43.146 83.176l-.05.164c.073.057 5.087 4.039 11.65 10.535l-19.219-1.52c1.03-4.354 3.574-7.626 7.62-9.179Zm.59-.212c2.707-.896 5.797-.98 9.084-.363l2.14 11.052c-6.066-6.006-10.825-9.886-11.64-10.541.137-.05.275-.1.416-.148Zm9.822-9.674 29.79 8.147a78.042 78.042 0 0 1 1.17 9.28L57.81 80.24l.029.282a62.775 62.775 0 0 1-4.282-7.231Zm39.865-10.148c.312.964.603 1.938.871 2.923a30.74 30.74 0 0 1 1.045 7.687l-.146-.207-10.338 16.847a77.536 77.536 0 0 0-1.048-8.372c-.052-.288-.109-.58-.164-.87Zm24.813 11.02c.117.09.233.179.348.273 2.206 1.806 3.931 4.372 5.17 7.478l-8.19 7.723c1.826-8.338 2.555-14.434 2.672-15.474Zm-11.978-1.634c4.229-1.46 8.353-1.064 11.83 1.522l-.164.046c-.01.091-.688 6.458-2.662 15.48ZM49.765 61.74l30.727 8.162A105.323 105.323 0 0 1 83.246 80.9l-.01.017-29.959-8.194a37.74 37.74 0 0 1-2.45-6.419 62.528 62.528 0 0 1-1.062-4.564Zm41.87-3.465a65.837 65.837 0 0 1 1.687 4.562l-.153-.208-9.664 17.795a93.954 93.954 0 0 0-.606-2.837l.074.092Zm-4.025-8.113a64.89 64.89 0 0 1 3.906 7.827l-.159-.198-8.59 19.243a110.9 110.9 0 0 0-2.014-7.375Zm-38.409 8.06.04.256 30.321 8.514c.26.783.516 1.574.765 2.375l-30.652-8.142.041.256a55.871 55.871 0 0 1-.515-3.259Zm30.52-18.527a54.338 54.338 0 0 1 7.746 10.224l-.164-.185-6.766 19.238A139.94 139.94 0 0 0 76.3 57.418ZM48.93 48.827l.037.255 26.97 8.257c1.172 2.81 2.35 5.874 3.444 9.112l-30.21-8.483a45.37 45.37 0 0 1-.24-9.141Zm3.216-11.242.023.25 18.217 7.557A171.95 171.95 0 0 1 75.7 56.779l-26.75-8.19c.38-4.338 1.473-8.092 3.194-11.004Zm19.759-4.023c2.61 1.451 5.192 3.474 7.648 5.959l-.17-.155-3.359 17.391a172.7 172.7 0 0 0-5.373-11.522L72.076 33.7Zm-9.559-2.543-.097.141c.05.076 3.588 5.413 7.823 13.62l-17.808-7.387c2.325-3.822 5.755-6.147 10.082-6.374Zm.627-.019c2.851-.016 5.816.86 8.752 2.462l-1.382 11.172c-3.912-7.587-7.239-12.747-7.811-13.622.146-.006.292-.011.44-.012Z"
  }), /*#__PURE__*/React.createElement("rect", {
    width: 91,
    height: 21,
    x: 286,
    y: 91,
    fill: "#FFF",
    rx: 8
  }), /*#__PURE__*/React.createElement("rect", {
    width: 91,
    height: 21,
    x: 286,
    y: 124,
    fill: "#FFF",
    rx: 8
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(130 47)"
  }, /*#__PURE__*/React.createElement("g", {
    transform: "translate(14.275)"
  }, /*#__PURE__*/React.createElement("mask", {
    id: "image_500_HaRi_svg__b",
    fill: "#fff"
  }, /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#image_500_HaRi_svg__a"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "M59.014 47.735c1.15 0 2.224.636 2.8 1.66a3.084 3.084 0 0 1-.042 3.122l-.03.049c-4.006 6.409-10.454 11.077-17.703 12.828-1.981.479-3.366 2.287-3.366 4.398 0 2.445 1.958 4.433 4.365 4.433.337 0 .679-.04 1.014-.12 8.106-1.945 15.46-6.65 20.71-13.251 5.405-6.798 8.262-14.993 8.262-23.697 0-8.704-2.857-16.898-8.263-23.696C61.513 6.86 54.158 2.154 46.052.21a4.364 4.364 0 0 0-1.014-.122c-2.407 0-4.365 1.989-4.365 4.432 0 2.111 1.384 3.92 3.366 4.399 7.25 1.75 13.697 6.42 17.691 12.81l.048.078c.573.962.588 2.13.036 3.111a3.228 3.228 0 0 1-2.8 1.66 3.15 3.15 0 0 1-1.357-.309 11.716 11.716 0 0 0-5.052-1.132c-6.31 0-11.535 4.973-11.898 11.321l-.002.036-.004.036c-.019.174-.028.33-.028.478v.296c0 .148.01.304.028.478l.004.036.002.036c.363 6.348 5.589 11.322 11.898 11.322 1.765 0 3.465-.382 5.051-1.133.434-.205.89-.309 1.358-.309M29.986.09c-.338 0-.679.04-1.014.12-8.106 1.944-15.46 6.65-20.71 13.25C2.858 20.26 0 28.454 0 37.158c0 8.705 2.857 16.899 8.263 23.697 5.248 6.6 12.603 11.306 20.71 13.25.334.08.676.121 1.013.121 2.407 0 4.365-1.988 4.365-4.432 0-2.111-1.384-3.92-3.366-4.398-7.25-1.751-13.697-6.42-17.691-12.81l-.04-.065a3.086 3.086 0 0 1-.044-3.125 3.228 3.228 0 0 1 2.8-1.66c.467 0 .924.104 1.358.31a11.721 11.721 0 0 0 5.051 1.131c6.31 0 11.536-4.973 11.898-11.321l.002-.037.004-.035c.019-.173.028-.33.028-.478v-.295c0-.15-.01-.306-.028-.478l-.004-.036-.002-.037c-.362-6.348-5.589-11.321-11.898-11.321-1.764 0-3.464.38-5.051 1.132-.434.205-.89.31-1.358.31a3.229 3.229 0 0 1-2.8-1.66 3.083 3.083 0 0 1 .042-3.122l.003-.006.012-.018.024-.04C17.288 15.34 23.736 10.67 30.985 8.92c1.982-.48 3.366-2.288 3.366-4.399 0-2.444-1.958-4.433-4.365-4.433",
    mask: "url(#image_500_HaRi_svg__b)"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#4A90E2",
    d: "M3.672 36.201c0 5.178 4.093 9.376 9.143 9.376-3.094-10.99-1.57-12.762 0-18.752-5.05 0-9.143 4.198-9.143 9.376ZM99.191 35.94c0-5.177-4.093-9.375-9.143-9.375 3.094 10.99 1.57 12.761 0 18.752 5.05 0 9.143-4.198 9.143-9.376Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(58.503 26.825)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#2667B2",
    d: "M18.21 9.95c0 4.635-3.729 8.387-8.329 8.387-4.6 0-8.33-3.752-8.33-8.387 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M18.21 9.95c0 4.635-3.729 1.733-8.329 1.733-4.6 0-8.33 2.902-8.33-1.733 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M9.881 19.9C4.433 19.9 0 15.437 0 9.95 0 4.463 4.433 0 9.881 0s9.88 4.463 9.88 9.95c0 5.487-4.433 9.95-9.88 9.95Zm0-16.774c-3.736 0-6.778 3.061-6.778 6.825 0 3.764 3.04 6.824 6.778 6.824 3.737 0 6.777-3.06 6.777-6.824s-3.04-6.825-6.777-6.825Z"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 5.738,
    cy: 7.224,
    fill: "#FFF",
    rx: 3.393,
    ry: 3.417
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M5.738 12.204c-2.727 0-4.945-2.234-4.945-4.98 0-2.747 2.22-4.979 4.945-4.979 2.726 0 4.945 2.234 4.945 4.979 0 2.747-2.218 4.98-4.945 4.98Zm0-6.834a1.85 1.85 0 0 0-1.841 1.854 1.85 1.85 0 0 0 1.841 1.855A1.85 1.85 0 0 0 7.58 7.224 1.85 1.85 0 0 0 5.74 5.37Z"
  })), /*#__PURE__*/React.createElement("g", {
    transform: "translate(25.136 26.825)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#2667B2",
    d: "M18.21 9.95c0 4.635-3.729 8.387-8.329 8.387-4.6 0-8.33-3.752-8.33-8.387 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M18.21 9.95c0 4.635-3.729 1.733-8.329 1.733-4.6 0-8.33 2.902-8.33-1.733 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M9.881 19.9C4.433 19.9 0 15.437 0 9.95 0 4.463 4.433 0 9.881 0s9.88 4.463 9.88 9.95c0 5.487-4.433 9.95-9.88 9.95Zm0-16.774c-3.736 0-6.778 3.061-6.778 6.825 0 3.764 3.04 6.824 6.778 6.824 3.737 0 6.777-3.06 6.777-6.824s-3.04-6.825-6.777-6.825Z"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 5.738,
    cy: 7.224,
    fill: "#FFF",
    rx: 3.393,
    ry: 3.417
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M5.738 12.204c-2.727 0-4.945-2.234-4.945-4.98 0-2.747 2.22-4.979 4.945-4.979 2.726 0 4.945 2.234 4.945 4.979 0 2.747-2.218 4.98-4.945 4.98Zm0-6.834a1.85 1.85 0 0 0-1.841 1.854 1.85 1.85 0 0 0 1.841 1.855A1.85 1.85 0 0 0 7.58 7.224 1.85 1.85 0 0 0 5.74 5.37Z"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "m62.3 137.8 12.744-37.76c2.494-7.387-1.474-15.397-8.861-17.89a14.118 14.118 0 0 0-4.515-.742H41.195c-7.797 0-14.118 6.321-14.118 14.118 0 1.535.25 3.06.741 4.515l12.745 37.76c2.026 6.002 8.534 9.225 14.537 7.2a11.47 11.47 0 0 0 7.2-7.2Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#9EE9FF",
    d: "m58.05 130.813 8.25-28.966a8.47 8.47 0 0 0-8.147-10.79H44.71a8.47 8.47 0 0 0-8.147 10.79l8.25 28.966a6.882 6.882 0 0 0 13.238 0Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(0 81.408)"
  }, /*#__PURE__*/React.createElement("path", {
    stroke: "#4A90E2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 9.6,
    d: "M25.118 0 7.26 10.056 7.176 29.93"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 7.176,
    cy: 32.324,
    fill: "#4A90E2",
    rx: 7.176,
    ry: 7.183
  })), /*#__PURE__*/React.createElement("g", {
    transform: "matrix(-1 0 0 1 103 81.408)"
  }, /*#__PURE__*/React.createElement("path", {
    stroke: "#4A90E2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 9.6,
    d: "M25.118 0 7.26 10.056 7.176 29.93"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 7.176,
    cy: 32.324,
    fill: "#4A90E2",
    rx: 7.176,
    ry: 7.183
  })), /*#__PURE__*/React.createElement("ellipse", {
    cx: 52.029,
    cy: 158.627,
    fill: "#D8D8D8",
    filter: "url(#image_500_HaRi_svg__c)",
    rx: 17.343,
    ry: 1.796
  })), /*#__PURE__*/React.createElement("g", {
    fillRule: "nonzero",
    transform: "translate(282 86)"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: 14.844,
    cy: 14.844,
    r: 3.906,
    fill: "#C7EBF9"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 33.594,
    cy: 14.844,
    r: 3.906,
    fill: "#C7EBF9"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#C7EBF9",
    d: "M93.75 0H6.25C2.812 0 0 2.812 0 6.25v17.188c0 3.437 2.812 6.25 6.25 6.25h87.5c3.438 0 6.25-2.813 6.25-6.25V6.25C100 2.812 97.188 0 93.75 0ZM14.844 21.875a7.032 7.032 0 1 1 0-14.063 7.032 7.032 0 0 1 0 14.063Zm18.75 0a7.032 7.032 0 1 1 0-14.063 7.032 7.032 0 0 1 0 14.063Zm57.031-5.469h-43.75a1.563 1.563 0 0 1 0-3.125h43.75a1.563 1.563 0 0 1 0 3.125Z"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 33.594,
    cy: 47.656,
    r: 3.906,
    fill: "#4A90E2"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 14.844,
    cy: 47.656,
    r: 3.906,
    fill: "#4A90E2"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#4A90E2",
    d: "M93.75 32.813H6.25c-3.438 0-6.25 2.812-6.25 6.25V56.25c0 3.438 2.812 6.25 6.25 6.25h87.5c3.438 0 6.25-2.812 6.25-6.25V39.062c0-3.437-2.812-6.25-6.25-6.25ZM14.844 54.686a7.032 7.032 0 1 1 0-14.063 7.032 7.032 0 0 1 0 14.063Zm18.75 0a7.032 7.032 0 1 1 0-14.063 7.032 7.032 0 0 1 0 14.063Zm57.031-5.468h-43.75a1.563 1.563 0 0 1 0-3.125h43.75a1.563 1.563 0 0 1 0 3.125Z"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 14.844,
    cy: 80.469,
    r: 3.906,
    fill: "#9EE9FF"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 33.594,
    cy: 80.469,
    r: 3.906,
    fill: "#9EE9FF"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#9EE9FF",
    d: "M93.75 65.625H6.25c-3.438 0-6.25 2.812-6.25 6.25v17.188c0 3.437 2.812 6.25 6.25 6.25h6.25v1.562c0 1.726 1.4 3.125 3.125 3.125h14.063c1.725 0 3.125-1.4 3.125-3.125v-1.563h34.374v1.563c0 1.726 1.4 3.125 3.126 3.125h14.062c1.726 0 3.125-1.4 3.125-3.125v-1.563h6.25c3.438 0 6.25-2.812 6.25-6.25V71.876c0-3.438-2.812-6.25-6.25-6.25ZM14.844 87.5a7.032 7.032 0 1 1 0-14.063 7.032 7.032 0 0 1 0 14.063Zm14.844 9.375H15.624v-1.563h14.063v1.563Zm3.906-9.375a7.032 7.032 0 1 1 0-14.063 7.032 7.032 0 0 1 0 14.063Zm50.781 9.375H70.312v-1.563h14.063v1.563Zm6.25-14.844h-43.75a1.563 1.563 0 0 1 0-3.125h43.75a1.563 1.563 0 0 1 0 3.125Z"
  })), /*#__PURE__*/React.createElement("g", {
    fillRule: "nonzero"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#85D6F5",
    d: "m44.026 176.844-2.403 8.325H67.88l-2.443-8.325H44.025zM37.689 187.477a.801.801 0 0 0-.828.824v3.833c0 .476.35.824.828.824h34.085c.479 0 .787-.348.787-.824V188.3c0-.476-.308-.824-.787-.824H37.69Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#E6F7FF",
    d: "M3.33 106.582v64h103v-64z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#85D6F5",
    d: "M6.047 102C2.675 102 0 104.662 0 108.017v60.378a6.026 6.026 0 0 0 6.047 6.059h97.12a6.026 6.026 0 0 0 6.046-6.059v-60.378c0-3.355-2.675-6.017-6.047-6.017H6.046Zm.041 5.4h96.996c.042-.003.083-.003.124 0a1.197 1.197 0 0 1 1.077 1.277v59.1c.012.324-.11.638-.336.872a1.205 1.205 0 0 1-.865.364H6.088a1.203 1.203 0 0 1-.837-.379 1.192 1.192 0 0 1-.323-.857v-59.1a1.191 1.191 0 0 1 .307-.885c.219-.24.527-.383.853-.393Z"
  })), /*#__PURE__*/React.createElement("path", {
    stroke: "#003580",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M173 105c6.214-4 11.214-4 15 0"
  }), /*#__PURE__*/React.createElement("path", {
    stroke: "#A5ADBA",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M91 179c11.643 41.145 35.925 61.811 72.847 62H182M282 166c-32.915 1.482-43.886 12.93-32.915 34.345C260.057 221.76 244.028 235.311 201 241"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FADB14",
    fillRule: "nonzero",
    d: "m188.292 235.101.754 1.538a.689.689 0 0 0 1.238-.6l-.753-1.537a.691.691 0 0 0-.922-.316.684.684 0 0 0-.317.915Zm12.297 8.14-1.628-.558a.69.69 0 0 0-.875.424.684.684 0 0 0 .426.87l1.628.558a.691.691 0 0 0 .875-.425.683.683 0 0 0-.426-.87Zm-10.097.431a.69.69 0 0 0-.94.253l-1.726 2.986a.686.686 0 0 0 .597 1.026.69.69 0 0 0 .598-.344l1.725-2.986a.682.682 0 0 0-.254-.935Zm-3.056 5.296a.692.692 0 0 0-.941.253l-1.013 1.753a.683.683 0 0 0 .597 1.026.69.69 0 0 0 .599-.344l1.012-1.753a.682.682 0 0 0-.254-.935Zm-4.377-10.287 3.253 1.116a.689.689 0 0 0 .876-.424.684.684 0 0 0-.426-.871l-3.254-1.116a.684.684 0 1 0-.45 1.295Zm20.752 5.9-1.006-.346a.691.691 0 0 0-.876.423.683.683 0 0 0 .426.871l1.006.346a.689.689 0 0 0 .876-.424.684.684 0 0 0-.426-.87Zm.198-9.164-6.961 3.37a.683.683 0 0 0-.318.915.689.689 0 0 0 .921.316l6.961-3.37a.683.683 0 0 0 .318-.915.69.69 0 0 0-.92-.316Zm-15.74 6.363a.69.69 0 0 0-.921-.316l-6.96 3.37a.684.684 0 0 0 .301 1.3.694.694 0 0 0 .302-.069l6.96-3.37a.682.682 0 0 0 .318-.915Zm6.213 2.128a.691.691 0 0 0-.922-.316.683.683 0 0 0-.318.916l1.845 3.764a.689.689 0 0 0 1.239-.6l-1.844-3.764Zm-7.191-10.85a.689.689 0 0 0 1.24-.6l-1.508-3.073a.691.691 0 0 0-.921-.316.684.684 0 0 0-.318.916l1.507 3.073Z"
  }), /*#__PURE__*/React.createElement("g", {
    fillRule: "nonzero",
    transform: "matrix(1 0 0 -1 28 164)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#FFA234",
    d: "M26 0C11.64 0 0 11.64 0 26s11.64 26 26 26 26-11.64 26-26S40.36 0 26 0Z"
  }), /*#__PURE__*/React.createElement("rect", {
    width: 3.656,
    height: 22.191,
    x: 24.172,
    y: 18.941,
    fill: "#FFF",
    rx: 1.727
  }), /*#__PURE__*/React.createElement("rect", {
    width: 3.656,
    height: 4.875,
    x: 24.172,
    y: 10.41,
    fill: "#FFF",
    rx: 1.727
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    fillRule: "nonzero",
    d: "M280.267 55.16c-.297 0-.588.03-.876.076-.811-4.614-4.755-8.118-9.511-8.118-.633 0-1.252.066-1.852.186C265.825 44.1 262.185 42 258.06 42c-6.542 0-11.864 5.269-12.152 11.874a6.294 6.294 0 0 0-1.46-.176c-3.56 0-6.448 3.017-6.448 6.65 0 3.634 2.888 6.652 6.447 6.652h35.82c3.166 0 5.733-2.69 5.733-5.922 0-3.229-2.566-5.918-5.733-5.918Z"
  }))));
};
var ServerError = SvgImage500HaRi;

var _defs, _g;
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var SvgImage503HaRi = function SvgImage503HaRi(props) {
  return /*#__PURE__*/React.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: 267,
    height: 215,
    viewBox: "0 0 267 215"
  }, props), _defs || (_defs = /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("filter", {
    id: "image_503_HaRi_svg__c",
    width: "120.8%",
    height: "300.5%",
    x: "-10.4%",
    y: "-100.2%",
    filterUnits: "objectBoundingBox"
  }, /*#__PURE__*/React.createElement("feGaussianBlur", {
    "in": "SourceGraphic",
    stdDeviation: 1.2
  })), /*#__PURE__*/React.createElement("path", {
    id: "image_503_HaRi_svg__a",
    d: "M.016.09h75.008v74.135H.016z"
  }))), _g || (_g = /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#E6F9FF",
    fillRule: "nonzero",
    d: "M155.132 29.512c-17.117-.595-33.42-6.133-48.987-12.188C90.578 11.27 75.155 4.56 58.45 1.35 47.704-.714 35.415-1 26.757 4.766c-8.334 5.552-11.025 15.148-12.471 24.036-1.09 6.693-1.73 13.727 1.252 20.002 2.072 4.348 5.751 8.005 8.296 12.17 8.85 14.5 2.6 32.377-6.999 46.531-4.49 6.642-9.718 12.976-13.19 20.046-3.47 7.07-5.077 15.167-2.04 22.376 3.012 7.148 10.186 12.516 17.957 16.291 15.786 7.67 34.39 9.866 52.53 11.108 40.156 2.741 80.526 1.558 120.787.374 14.9-.442 29.864-.89 44.523-3.197 8.138-1.28 16.54-3.314 22.448-8.225 7.502-6.235 9.361-16.791 4.333-24.616-8.43-13.11-31.745-16.367-37.638-30.438-3.244-7.745.087-16.372 4.801-23.556 10.113-15.41 27.065-28.928 27.958-46.542.614-12.097-7.535-24.213-20.134-29.937-13.209-6-31.52-5.245-41.265 4.687-10.028 10.227-27.66 14.161-42.773 13.636Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(65 45)"
  }, /*#__PURE__*/React.createElement("g", {
    transform: "translate(24.588)"
  }, /*#__PURE__*/React.createElement("g", {
    transform: "translate(10.686)"
  }, /*#__PURE__*/React.createElement("mask", {
    id: "image_503_HaRi_svg__b",
    fill: "#fff"
  }, /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#image_503_HaRi_svg__a"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "M59.014 47.735c1.15 0 2.224.636 2.8 1.66a3.084 3.084 0 0 1-.042 3.122l-.03.049c-4.006 6.409-10.454 11.077-17.703 12.828-1.981.479-3.366 2.287-3.366 4.398 0 2.445 1.958 4.433 4.365 4.433.337 0 .679-.04 1.014-.12 8.106-1.945 15.46-6.65 20.71-13.251 5.405-6.798 8.262-14.993 8.262-23.697 0-8.704-2.857-16.898-8.263-23.696C61.513 6.86 54.158 2.154 46.052.21a4.364 4.364 0 0 0-1.014-.122c-2.407 0-4.365 1.989-4.365 4.432 0 2.111 1.384 3.92 3.366 4.399 7.25 1.75 13.697 6.42 17.691 12.81l.048.078c.573.962.588 2.13.036 3.111a3.228 3.228 0 0 1-2.8 1.66 3.15 3.15 0 0 1-1.357-.309 11.716 11.716 0 0 0-5.052-1.132c-6.31 0-11.535 4.973-11.898 11.321l-.002.036-.004.036c-.019.174-.028.33-.028.478v.296c0 .148.01.304.028.478l.004.036.002.036c.363 6.348 5.589 11.322 11.898 11.322 1.765 0 3.465-.382 5.051-1.133.434-.205.89-.309 1.358-.309M29.986.09c-.338 0-.679.04-1.014.12-8.106 1.944-15.46 6.65-20.71 13.25C2.858 20.26 0 28.454 0 37.158c0 8.705 2.857 16.899 8.263 23.697 5.248 6.6 12.603 11.306 20.71 13.25.334.08.676.121 1.013.121 2.407 0 4.365-1.988 4.365-4.432 0-2.111-1.384-3.92-3.366-4.398-7.25-1.751-13.697-6.42-17.691-12.81l-.04-.065a3.086 3.086 0 0 1-.044-3.125 3.228 3.228 0 0 1 2.8-1.66c.467 0 .924.104 1.358.31a11.721 11.721 0 0 0 5.051 1.131c6.31 0 11.536-4.973 11.898-11.321l.002-.037.004-.035c.019-.173.028-.33.028-.478v-.295c0-.15-.01-.306-.028-.478l-.004-.036-.002-.037c-.362-6.348-5.589-11.321-11.898-11.321-1.764 0-3.464.38-5.051 1.132-.434.205-.89.31-1.358.31a3.229 3.229 0 0 1-2.8-1.66 3.083 3.083 0 0 1 .042-3.122l.003-.006.012-.018.024-.04C17.288 15.34 23.736 10.67 30.985 8.92c1.982-.48 3.366-2.288 3.366-4.399 0-2.444-1.958-4.433-4.365-4.433",
    mask: "url(#image_503_HaRi_svg__b)"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#4A90E2",
    d: "M.083 36.201c0 5.178 4.094 9.376 9.144 9.376-3.095-10.99-1.57-12.762 0-18.752-5.05 0-9.144 4.198-9.144 9.376ZM95.603 35.94c0-5.177-4.094-9.375-9.143-9.375 3.094 10.99 1.57 12.761 0 18.752 5.05 0 9.143-4.198 9.143-9.376Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "translate(54.915 26.825)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#2667B2",
    d: "M18.21 9.95c0 4.635-3.729 8.387-8.329 8.387-4.6 0-8.33-3.752-8.33-8.387 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M18.21 9.95c0 4.635-3.729 1.733-8.329 1.733-4.6 0-8.33 2.902-8.33-1.733 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M9.881 19.9C4.433 19.9 0 15.437 0 9.95 0 4.463 4.433 0 9.881 0s9.88 4.463 9.88 9.95c0 5.487-4.433 9.95-9.88 9.95Zm0-16.774c-3.736 0-6.778 3.061-6.778 6.825 0 3.764 3.04 6.824 6.778 6.824 3.737 0 6.777-3.06 6.777-6.824s-3.04-6.825-6.777-6.825Z"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 5.738,
    cy: 7.224,
    fill: "#FFF",
    rx: 3.393,
    ry: 3.417
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M5.738 12.204c-2.727 0-4.945-2.234-4.945-4.98 0-2.747 2.22-4.979 4.945-4.979 2.726 0 4.945 2.234 4.945 4.979 0 2.747-2.218 4.98-4.945 4.98Zm0-6.834a1.85 1.85 0 0 0-1.841 1.854 1.85 1.85 0 0 0 1.841 1.855A1.85 1.85 0 0 0 7.58 7.224 1.85 1.85 0 0 0 5.74 5.37Z"
  })), /*#__PURE__*/React.createElement("g", {
    transform: "translate(21.548 26.825)"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#2667B2",
    d: "M18.21 9.95c0 4.635-3.729 8.387-8.329 8.387-4.6 0-8.33-3.752-8.33-8.387 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M18.21 9.95c0 4.635-3.729 1.733-8.329 1.733-4.6 0-8.33 2.902-8.33-1.733 0-4.633 3.729-8.387 8.33-8.387 4.6 0 8.328 3.754 8.328 8.387Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M9.881 19.9C4.433 19.9 0 15.437 0 9.95 0 4.463 4.433 0 9.881 0s9.88 4.463 9.88 9.95c0 5.487-4.433 9.95-9.88 9.95Zm0-16.774c-3.736 0-6.778 3.061-6.778 6.825 0 3.764 3.04 6.824 6.778 6.824 3.737 0 6.777-3.06 6.777-6.824s-3.04-6.825-6.777-6.825Z"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 5.738,
    cy: 7.224,
    fill: "#FFF",
    rx: 3.393,
    ry: 3.417
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M5.738 12.204c-2.727 0-4.945-2.234-4.945-4.98 0-2.747 2.22-4.979 4.945-4.979 2.726 0 4.945 2.234 4.945 4.979 0 2.747-2.218 4.98-4.945 4.98Zm0-6.834a1.85 1.85 0 0 0-1.841 1.854 1.85 1.85 0 0 0 1.841 1.855A1.85 1.85 0 0 0 7.58 7.224 1.85 1.85 0 0 0 5.74 5.37Z"
  })), /*#__PURE__*/React.createElement("ellipse", {
    cx: 47.972,
    cy: 57.557,
    fill: "#003580",
    rx: 3.75,
    ry: 4.167
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#00D7FF",
    d: "m83.3 137.8 12.744-37.76c2.494-7.387-1.474-15.397-8.861-17.89a14.118 14.118 0 0 0-4.515-.742H62.195c-7.797 0-14.118 6.321-14.118 14.118 0 1.535.25 3.06.741 4.515l12.745 37.76c2.026 6.002 8.534 9.225 14.537 7.2a11.47 11.47 0 0 0 7.2-7.2Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#9EE9FF",
    d: "m79.05 129.813 8.25-28.966a8.47 8.47 0 0 0-8.147-10.79H65.71a8.47 8.47 0 0 0-8.147 10.79l8.25 28.966a6.882 6.882 0 0 0 13.238 0Z"
  }), /*#__PURE__*/React.createElement("g", {
    transform: "rotate(45 -62.376 66.778)"
  }, /*#__PURE__*/React.createElement("path", {
    stroke: "#1690FF",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 9.6,
    d: "M25.118 0 7.26 10.056 7.176 29.93"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 7.176,
    cy: 32.324,
    fill: "#4A90E2",
    rx: 7.176,
    ry: 7.183
  })), /*#__PURE__*/React.createElement("path", {
    stroke: "#1690FF",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 9.6,
    d: "m99.173 82.648 19.732 5.528 14.098-13.993"
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 73.029,
    cy: 158.627,
    fill: "#D8D8D8",
    filter: "url(#image_503_HaRi_svg__c)",
    rx: 17.343,
    ry: 1.796
  }), /*#__PURE__*/React.createElement("ellipse", {
    cx: 135.824,
    cy: 70.634,
    fill: "#4A90E2",
    rx: 7.176,
    ry: 7.183
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    fillRule: "nonzero",
    d: "M63.267 89.16c-.297 0-.588.03-.876.076-.811-4.614-4.755-8.118-9.511-8.118-.633 0-1.252.066-1.852.186C48.825 78.1 45.185 76 41.06 76c-6.542 0-11.864 5.269-12.152 11.874a6.294 6.294 0 0 0-1.46-.176c-3.56 0-6.448 3.017-6.448 6.65 0 3.634 2.888 6.652 6.447 6.652h35.82C66.433 101 69 98.31 69 95.078c0-3.229-2.566-5.918-5.733-5.918ZM131 35.583c0 2.442-2.443 4.417-5.46 4.417-.13 0-.256-.006-.387-.015-.101.01-.202.015-.302.015h-11.429c-.046 0-.091 0-.136-.006h-.01c-.101.006-.207.006-.308.006-3.294 0-5.968-2.413-5.968-5.386 0-2.98 2.674-5.392 5.968-5.392.474 0 .933.05 1.375.144.142-3.541 3.28-6.366 7.137-6.366 3.954 0 7.153 2.964 7.153 6.625 0 .746-.131 1.462-.378 2.128 1.642.761 2.745 2.194 2.745 3.83ZM208 60.725c0 4.022 3.97 7.275 8.872 7.275.212 0 .417-.01.63-.025a5.2 5.2 0 0 0 .49.025h18.572c.075 0 .148 0 .222-.01h.016c.164.01.335.01.5.01 5.352 0 9.698-3.974 9.698-8.872 0-4.907-4.346-8.88-9.699-8.88-.77 0-1.514.082-2.234.237C234.837 44.653 229.74 40 223.47 40c-6.424 0-11.622 4.881-11.622 10.911 0 1.229.213 2.408.614 3.506C209.792 55.67 208 58.03 208 60.725Z"
  }), /*#__PURE__*/React.createElement("g", {
    fillRule: "nonzero"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#71767C",
    d: "m36.3 158.8-8.5-20.3-1.6-1.5-.2 2.2 8.4 20.4z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M69.8 156.5c-1.1 2.6-3.7 4.2-6.5 4.2.8 1.2 1.2 2.5 1.3 3.9 3.8-.5 7.3-2.9 8.9-6.6 2.3-5.6-.2-12-5.7-14.3l-1.5 3.7c2.7 1.2 5 5.6 3.5 9.1Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#A3A6AC",
    d: "M68.2 153H55c.2 1.7 1.3 3.3 2.9 4h9.3c.3-.4.6-.8.8-1.2.4-.9.4-1.9.2-2.8ZM47.7 157c-.5-1.3-.8-2.6-.8-4H36l1.7 4h10ZM27 157h4.2l-1.7-4H27z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#1DBEEE",
    d: "M38.7 167.4c.5-.2 1.1 0 1.3.5l.4 1h4.3l-1-2.5c-.4-1-1.6-1.5-2.6-1.1l-.8-1.8 1.8-.8-.6-1.7c-.4-1-1.6-1.5-2.6-1.1l-5.5 2.3c-1 .4-1.5 1.6-1.1 2.6l.7 1.8 1.8-.8.8 1.8c-.6.2-1 .7-1.1 1.3h3.8l-.1-.2c-.2-.5 0-1.1.5-1.3Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "M46 169h5l3.5-4.7c-1.3-.6-2.4-1.3-3.4-2.2L46 169Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    d: "m55.7 162.6 1.7.7c.8.4 1.3 1.2 1.2 2.1l-.5 3.6h4l.4-3c.4-2.7-1.1-5.4-3.6-6.4l-1.7-.7c-3.6-1.5-5.3-5.6-3.8-9.1 1.5-3.6 5.6-5.3 9.1-3.8l1.5-3.7c-5.6-2.3-12 .3-14.4 6-2.2 5.5.5 12 6.1 14.3Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#A3A6AC",
    d: "M77 151v20H25v-20h-4v46h60v-46z"
  })), /*#__PURE__*/React.createElement("path", {
    fill: "#003580",
    fillRule: "nonzero",
    d: "M203.57 76.815a1 1 0 0 0-1.114 1.247l2.37 8.849c.015.052-.074.316-.462.662a5.556 5.556 0 0 1-2.176 1.08 5.55 5.55 0 0 1-2.425.153c-.56-.115-.723-.31-.732-.343l-2.37-8.847a1 1 0 0 0-1.59-.523 10.991 10.991 0 0 0 4.562 19.346l9.569 35.709a8 8 0 1 0 9.659-2.588l-9.568-35.707a10.992 10.992 0 0 0-5.722-19.038Zm15.851 60.701a4 4 0 1 1-7.727 2.07 4.096 4.096 0 0 1 2.828-4.898 4 4 0 0 1 4.899 2.828Zm-12.474-34.963 6.212 23.182a1 1 0 0 1-1.932.518l-6.211-23.182a1 1 0 0 1 1.931-.518Z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#ECCC00",
    d: "m128.614 20-2 1-16 23.4-.6 1.9-1.4 5.8-.5 2.3 2.5 4.7 3.444 1.08 10.983.69c16.507-.46 25.227-.69 26.163-.69h9.51l3.9-3.443.7-2.037-.7-2.3v-5.8l-2.1-1.6-12.534-20.087L146.614 21l-8.508-1h-9.492Z"
  }), /*#__PURE__*/React.createElement("g", {
    fill: "#FD0",
    fillRule: "nonzero"
  }, /*#__PURE__*/React.createElement("path", {
    d: "m165.314 54.7-2.2 2.8c-.7.9-1.9 1.4-3 1.1-15.7-3.6-31.2-3.6-46.1 0-.2.1-.5.1-.7.1-.8 0-1.6-.3-2.2-1l-3-3.3-.8.8c-.4.4-.4.9-.1 1.3l2.6 3.2c.6.7 1.4 1.2 2.3 1.4 16.4 3.6 32.8 3.6 49.2 0 .9-.2 1.7-.7 2.3-1.4l2.6-3.2c.3-.4.3-1-.1-1.3l-.8-.5ZM143.514 30.6l-6 3c-.6.3-1.2.3-1.8 0l-6-3c-.7-.3-1.1-1-1.1-1.8V20c0-2.2 1.8-4 4-4h8c2.2 0 4 1.8 4 4v8.8c0 .7-.4 1.4-1.1 1.8Z"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M158.014 49.4c-.3.1-.5.4-.5.8l-.7 5.8c1.3.2 2.6.5 3.8.8.4.1.8-.1 1-.4l3-4V47l-.9-.4-5.7 2.8ZM116.714 50.2c0-.3-.2-.6-.5-.8l-6.2-3.1-1.4.7v5.1l3.9 4.3c.2.3.6.4 1 .3l3.9-.9-.7-5.6Z"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M146.614 21v7.8c0 1.5-.8 2.9-2.2 3.6l-6 3c-.6.3-1.2.4-1.8.4-.6 0-1.2-.1-1.8-.4l-6-3c-1.4-.7-2.2-2.1-2.2-3.6V21c-9.2 3.8-15.7 12.8-16 23.4l6.5 3.2c.9.4 1.5 1.3 1.6 2.3l.7 5.6c11.5-2 23.4-2 35.3.1l.7-5.6c.1-1 .7-1.9 1.6-2.3l5.5-2.7c0-10.9-6.5-20.1-15.9-24Z"
  })))));
};
var UnderMaintenance = SvgImage503HaRi;

var IconWrapper = styled.div.withConfig({
  displayName: "StyledResult__IconWrapper",
  componentId: "sc-103nda6-0"
})(["&&{margin:0;padding:0;}"]);
var ResultWrapper = styled.div.withConfig({
  displayName: "StyledResult__ResultWrapper",
  componentId: "sc-103nda6-1"
})(["&&{text-align:center;margin:0;padding:0;}&& ", " > i{font-size:", ";}"], IconWrapper, function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.result.fontSizes.icon;
});
styled.img.withConfig({
  displayName: "StyledResult__ResultImg",
  componentId: "sc-103nda6-2"
})(["&&{margin:0;padding:0;}"]);
var TitleWrapper = styled.div.withConfig({
  displayName: "StyledResult__TitleWrapper",
  componentId: "sc-103nda6-3"
})(["&&{color:", ";font-size:", ";font-weight:", ";line-height:", ";margin:", ";padding:0;}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.result.colors["default"];
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.result.fontSizes.title;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.result.fontWeights.title;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.result.lineHeights.title;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.result.space.titleMargin;
});
var SubTitleWrapper = styled.div.withConfig({
  displayName: "StyledResult__SubTitleWrapper",
  componentId: "sc-103nda6-4"
})(["&&{color:", ";font-size:", ";font-weight:", ";line-height:", ";margin:0;padding:0;}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.result.colors["default"];
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.result.fontSizes.subTitle;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.result.fontWeights.subTitle;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.result.lineHeights.subTitle;
});
var ExtraWrapper = styled.div.withConfig({
  displayName: "StyledResult__ExtraWrapper",
  componentId: "sc-103nda6-5"
})(["&&{margin:0;padding:0;margin-top:", ";}"], function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.result.space.extraMargin;
});

var getEitherIconInfoOrImage = function getEitherIconInfoOrImage(status) {
  switch (status) {
    case 'success':
      return left$1({
        icon: 'circle-ok',
        intent: 'success'
      });
    case 'error':
      return left$1({
        icon: 'circle-cancel',
        intent: 'danger'
      });
    case 'info':
      return left$1({
        icon: 'circle-info',
        intent: 'primary'
      });
    case 'warning':
      return left$1({
        icon: 'circle-warning',
        intent: 'warning'
      });
    case '403':
      return right$1(Unauthorized);
    case '404':
      return right$1(NotFound);
    case '500':
      return right$1(ServerError);
    case '503':
      return right$1(UnderMaintenance);
  }
};
var renderIcon = function renderIcon(status) {
  return /*#__PURE__*/React__default.createElement(IconWrapper, null, pipe(getEitherIconInfoOrImage(status), match$2A(function (_ref) {
    var icon = _ref.icon,
      intent = _ref.intent;
    return /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: icon,
      intent: intent
    });
  }, function (Image) {
    return /*#__PURE__*/React__default.createElement(Image, null);
  })));
};
var Result = function Result(_ref2) {
  var extra = _ref2.extra,
    subTitle = _ref2.subTitle,
    title = _ref2.title,
    _ref2$status = _ref2.status,
    status = _ref2$status === void 0 ? 'info' : _ref2$status,
    icon = _ref2.icon,
    id = _ref2.id,
    className = _ref2.className,
    style = _ref2.style,
    _ref2$sx = _ref2.sx,
    sx = _ref2$sx === void 0 ? {} : _ref2$sx,
    dataTestId = _ref2['data-test-id'];
  return /*#__PURE__*/React__default.createElement(ResultWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, icon === undefined ? renderIcon(status) : icon, /*#__PURE__*/React__default.createElement(TitleWrapper, null, title), subTitle !== undefined && /*#__PURE__*/React__default.createElement(SubTitleWrapper, null, subTitle), extra !== undefined && /*#__PURE__*/React__default.createElement(ExtraWrapper, null, extra));
};
var Result$1 = Result;

var StyledSelectButton = styled.label.withConfig({
  displayName: "StyledSelectButton",
  componentId: "sc-cone61-0"
})(["&&{display:inline-block;margin:0;padding:0;}"]);
var SelectButtonGroupWrapper = styled.div.withConfig({
  displayName: "StyledSelectButton__SelectButtonGroupWrapper",
  componentId: "sc-cone61-1"
})(["&&{display:inline-flex;flex-wrap:wrap;padding:0;", ";}"], function (_ref) {
  var themeSize = _ref.themeSize,
    theme = _ref.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.selectButton.space.groupSmallMargin, theme.__hd__.selectButton.sizes.groupSmallWidth, theme.__hd__.selectButton.space.smallMargin);
    case 'medium':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.selectButton.space.groupMediumMargin, theme.__hd__.selectButton.sizes.groupMediumWidth, theme.__hd__.selectButton.space.mediumMargin);
    case 'large':
      return css$2(["margin:", ";width:", ";> *{margin:", ";}"], theme.__hd__.selectButton.space.groupLargeMargin, theme.__hd__.selectButton.sizes.groupLargeWidth, theme.__hd__.selectButton.space.largeMargin);
  }
});
var StyledInputText = styled.span.withConfig({
  displayName: "StyledSelectButton__StyledInputText",
  componentId: "sc-cone61-2"
})(["&&{box-sizing:border-box;line-height:100%;display:flex;align-items:center;cursor:pointer;border-style:solid;border-color:", ";border-width:", ";border-radius:", ";font-weight:", ";margin:0;padding:0;color:", ";}&&:hover,&&:focus{color:", ";border-color:", ";}&&{", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.selectButton.colors.defaultBorder;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.selectButton.borderWidths["default"];
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.selectButton.radii["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.selectButton.fontWeights["default"];
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.selectButton.colors.defaultText;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.selectButton.colors.hover;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.selectButton.colors.hover;
}, function (_ref9) {
  var themeSize = _ref9.themeSize,
    theme = _ref9.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["height:", ";padding:", ";font-size:", ";"], theme.__hd__.selectButton.sizes.small, theme.__hd__.selectButton.space.smallPadding, theme.__hd__.selectButton.fontSizes.small);
    case 'medium':
      return css$2(["height:", ";padding:", ";font-size:", ";"], theme.__hd__.selectButton.sizes.medium, theme.__hd__.selectButton.space.mediumPadding, theme.__hd__.selectButton.fontSizes.medium);
    case 'large':
      return css$2(["height:", ";padding:", ";font-size:", ";"], theme.__hd__.selectButton.sizes.large, theme.__hd__.selectButton.space.largePadding, theme.__hd__.selectButton.fontSizes.large);
  }
});
var StyledInput$1 = styled.input.withConfig({
  displayName: "StyledSelectButton__StyledInput",
  componentId: "sc-cone61-3"
})(["&&{opacity:0;width:0;height:0;position:absolute;margin:0;padding:0;}&&:disabled ~ ", "{color:", ";background-color:", ";border-color:", ";pointer-events:none;}&&:disabled:checked ~ ", "{color:", ";background-color:", ";border:none;}&&:checked + ", "{border-color:", ";color:", ";background:", ";}"], StyledInputText, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.selectButton.colors.disabledText;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.selectButton.colors.disabledBackground;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.selectButton.colors.defaultBorder;
}, StyledInputText, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.selectButton.colors.disabledSelectedText;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.selectButton.colors.disabledSelectedBackground;
}, StyledInputText, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.selectButton.colors.selectedBackground;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.selectButton.colors.selectedText;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.selectButton.colors.selectedBackground;
});

var SelectButton = function SelectButton(_ref) {
  var text = _ref.text,
    value = _ref.value,
    selected = _ref.selected,
    disabled = _ref.disabled,
    onChange = _ref.onChange,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  useDeprecation('SelectButton is deprecated. Please use Radio.Button with the same functionalities.');
  return /*#__PURE__*/React__default.createElement(StyledSelectButton, {
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(StyledInput$1, {
    type: "radio",
    checked: selected,
    value: value,
    name: name,
    disabled: disabled,
    onChange: onChange,
    id: id
  }), /*#__PURE__*/React__default.createElement(StyledInputText, {
    themeSize: size
  }, text));
};
var SelectButton$1 = SelectButton;

var SelectButtonGroup = function SelectButtonGroup(_ref) {
  var name = _ref.name,
    value = _ref.value,
    options = _ref.options,
    _onChange = _ref.onChange,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  useDeprecation('SelectButton.Group is deprecated. Please use Radio.ButtonGroup with the same functionalities.');
  return /*#__PURE__*/React__default.createElement(SelectButtonGroupWrapper, {
    themeSize: size,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(SelectButton$1, {
      key: option.value,
      text: option.text,
      value: option.value,
      disabled: option.disabled,
      name: name,
      selected: value === option.value,
      onChange: function onChange(e) {
        if (e.target.checked) {
          _onChange(option.value);
        }
      },
      size: size
    });
  }));
};
var SelectButtonGroup$1 = SelectButtonGroup;

var CompoundSelectButton = SelectButton$1;
CompoundSelectButton.Group = SelectButtonGroup$1;
var CompoundSelectButton$1 = CompoundSelectButton;

var SideBarContext = /*#__PURE__*/React__default.createContext({});
var SideBarContext$1 = SideBarContext;

var scrollBarStyle = css$2(["overflow-y:scroll;scrollbar-width:thin;scrollbar-color:", ";&::-webkit-scrollbar{background-color:transparent;width:", ";}&::-webkit-scrollbar-thumb{background-color:", ";border-radius:", ";border-width:", ";border-style:solid;border-color:transparent;background-clip:content-box;}&::-webkit-scrollbar-track{margin:", ";}}"], function (_ref) {
  var theme = _ref.theme;
  return "".concat(theme.__hd__.sideBar.colors.scrollBarThumb, " transparent");
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.sideBar.sizes.scrollBar;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.sideBar.colors.scrollBarThumb;
}, function (_ref4) {
  var theme = _ref4.theme;
  return "calc(".concat(theme.__hd__.sideBar.sizes.scrollBar, " / 2)");
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.sideBar.borderWidths.scrollBar;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.sideBar.space.scrollBarMargin;
});
var SideBarContainer = styled.div.withConfig({
  displayName: "StyledSideBar__SideBarContainer",
  componentId: "sc-1h128f8-0"
})(["&&{display:flex;}"]);
var NavBar = styled.nav.withConfig({
  displayName: "StyledSideBar__NavBar",
  componentId: "sc-1h128f8-1"
})(["&&{margin:0;padding:0;display:flex;align-items:stretch;overflow:hidden;position:relative;}"]);
var SideBarBackground = styled.div.withConfig({
  displayName: "StyledSideBar__SideBarBackground",
  componentId: "sc-1h128f8-2"
})(["&&{margin:0;padding:0;position:absolute;z-index:2;background-color:", ";border-radius:", ";width:", ";height:100dvh;}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.sideBar.colors.sideBarBackground;
}, function (_ref8) {
  var theme = _ref8.theme;
  return "0px ".concat(theme.__hd__.sideBar.radii.sideBarWrapperRight, " ").concat(theme.__hd__.sideBar.radii.sideBarWrapperRight, " 0px");
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.sideBar.sizes.sideBarWidth;
});
var ScrollWrapper = styled.div.withConfig({
  displayName: "StyledSideBar__ScrollWrapper",
  componentId: "sc-1h128f8-3"
})(["&&{margin:0;padding:0;max-height:100dvh;overflow-x:hidden;overflow-y:hidden;z-index:2;width:", ";}@media (hover:hover){&&:hover{", ";}}@media (pointer:coarse){&&{", "}}"], function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.sideBar.sizes.sideBarScrollWrapperWidth;
}, scrollBarStyle, scrollBarStyle);
var SideBarWrapper = styled.ul.withConfig({
  displayName: "StyledSideBar__SideBarWrapper",
  componentId: "sc-1h128f8-4"
})(["&&{margin:0;padding:0;list-style:none;text-align:center;min-height:100dvh;display:flex;flex-direction:column;width:", ";border-radius:", ";}"], function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.sideBar.sizes.sideBarWidth;
}, function (_ref12) {
  var theme = _ref12.theme;
  return "0px ".concat(theme.__hd__.sideBar.radii.sideBarWrapperRight, " ").concat(theme.__hd__.sideBar.radii.sideBarWrapperRight, " 0px");
});
var PrimaryItemIconWrapper = styled.div.withConfig({
  displayName: "StyledSideBar__PrimaryItemIconWrapper",
  componentId: "sc-1h128f8-5"
})(["&&{position:relative;border-radius:", ";display:flex;justify-content:center;align-items:center;width:", ";height:", ";}"], function (_ref13) {
  var theme = _ref13.theme;
  return "calc(".concat(theme.__hd__.sideBar.sizes.itemIconHeight, " / 2)");
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.sideBar.sizes.itemIconWidth;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.sideBar.sizes.itemIconHeight;
});
var PrimaryItem = styled.li.withConfig({
  displayName: "StyledSideBar__PrimaryItem",
  componentId: "sc-1h128f8-6"
})(["&&{margin:0;padding:", ";box-sizing:border-box;display:flex;align-items:center;justify-content:center;flex-direction:column;width:", ";color:", ";border-radius:", ";cursor:pointer;}&&:hover > ", "{background-color:", ";}&& > ", "::before{content:'';position:absolute;top:0;left:0;width:100%;height:100%;background-color:", ";border-radius:", ";transform:scaleX(0);}&&{", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.sideBar.space.sideBarItemPadding;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.sideBar.sizes.itemWidth;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.sideBar.colors.sideBarText;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.sideBar.radii.sideBarItem;
}, PrimaryItemIconWrapper, function (_ref20) {
  var theme = _ref20.theme,
    themeDisabled = _ref20.themeDisabled;
  return !themeDisabled ? "".concat(theme.__hd__.sideBar.colors.sidebarItemIconBackground, "66") : 'none';
}, PrimaryItemIconWrapper, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.sideBar.colors.sidebarItemIconBackground;
}, function (_ref22) {
  var theme = _ref22.theme;
  return "calc(".concat(theme.__hd__.sideBar.sizes.itemIconHeight, " / 2)");
}, function (_ref23) {
  var themeActive = _ref23.themeActive,
    themeDisabled = _ref23.themeDisabled;
  if (themeDisabled) {
    return css$2(["cursor:not-allowed;"]);
  }
  switch (themeActive) {
    case true:
      return css$2(["& > ", "::before{transform:scaleX(1) !important;transition:transform 0.3s;}"], PrimaryItemIconWrapper);
    case false:
      return css$2([""]);
  }
});
var HeaderItem = styled(PrimaryItem).withConfig({
  displayName: "StyledSideBar__HeaderItem",
  componentId: "sc-1h128f8-7"
})(["&&{font-size:", ";color:", ";background:transparent;}"], function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.sideBar.fontSizes.headerIcon;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.sideBar.colors.sideBarText;
});
var ItemLinkWraper = styled.a.withConfig({
  displayName: "StyledSideBar__ItemLinkWraper",
  componentId: "sc-1h128f8-8"
})(["&&{display:flex;text-decoration:none;}"]);
var ItemsContainer = styled.div.withConfig({
  displayName: "StyledSideBar__ItemsContainer",
  componentId: "sc-1h128f8-9"
})(["&&{margin:0;padding:", ";}&& > *:not(:last-child){margin-bottom:", ";}&& ", "{background-color:", ";border-color:", ";color:", ";transform:none;right:unset;top:0;left:52px;font-size:", ";padding:", ";height:", ";min-width:", ";z-index:1;display:flex;align-items:center;justify-content:center;}"], function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.sideBar.space.sideBarItemsContainerPadding;
}, function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.sideBar.space.sideBarItemMarginBottom;
}, CountNumberBadge, function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.sideBar.colors.sideBarCountBackground;
}, function (_ref29) {
  var theme = _ref29.theme;
  return theme.__hd__.sideBar.colors.sideBarCountBackground;
}, function (_ref30) {
  var theme = _ref30.theme;
  return theme.__hd__.sideBar.colors.sideBarCountText;
}, function (_ref31) {
  var theme = _ref31.theme;
  return theme.__hd__.sideBar.fontSizes.sideBarNotiBadge;
}, function (_ref32) {
  var theme = _ref32.theme;
  return theme.__hd__.sideBar.space.sideBarNotiBadge;
}, function (_ref33) {
  var theme = _ref33.theme;
  return theme.__hd__.sideBar.sizes.panelItemBadge;
}, function (_ref34) {
  var theme = _ref34.theme;
  return theme.__hd__.sideBar.sizes.panelItemBadge;
});
var HeaderItemsContainer = styled(ItemsContainer).withConfig({
  displayName: "StyledSideBar__HeaderItemsContainer",
  componentId: "sc-1h128f8-10"
})(["&&{padding:", ";}"], function (_ref35) {
  var theme = _ref35.theme;
  return theme.__hd__.sideBar.space.sideBarHeaderItemsContainerPadding;
});
var PanelWrapper = styled.div.withConfig({
  displayName: "StyledSideBar__PanelWrapper",
  componentId: "sc-1h128f8-11"
})(["&&{z-index:1;transition:transform 0.3s ease;", ";}"], function (_ref36) {
  var theme = _ref36.theme,
    themeActive = _ref36.themeActive;
  switch (themeActive) {
    case true:
      return css$2(["margin-left:-", ";transform:translateX( -", " );"], theme.__hd__.sideBar.sizes.scrollBar, theme.__hd__.sideBar.radii.sideBarWrapperRight);
    case false:
      return css$2(["transform:translateX(-100%);"]);
  }
});

var checkIfSidebarContainsTarget = function checkIfSidebarContainsTarget(sidebarWrapperElement, target) {
  if (sidebarWrapperElement === null) {
    return undefined;
  }
  return sidebarWrapperElement.contains(target);
};
var SideBar = function SideBar(_ref) {
  var items = _ref.items,
    selectedItemId = _ref.selectedItemId,
    onClickItem = _ref.onClickItem,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var header = items.header,
    body = items.body,
    footer = items.footer;
  var showHeader = header.length > 0;
  var showBody = body.length > 0;
  var showFooter = footer.length > 0;
  var flattenItems = useMemo(function () {
    return [].concat(_toConsumableArray(header), _toConsumableArray(body), _toConsumableArray(footer));
  }, [header, body, footer]);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isDirty = _useState2[0],
    setIsDirty = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showPanel = _useState4[0],
    setShowPanel = _useState4[1];
  var _useState5 = useState(null),
    _useState6 = _slicedToArray(_useState5, 2),
    panelContent = _useState6[0],
    setPanelContent = _useState6[1];
  var _useState7 = useState(null),
    _useState8 = _slicedToArray(_useState7, 2),
    wrapperElement = _useState8[0],
    setWrapperElement = _useState8[1];
  var sideBarContextValue = useMemo(function () {
    return {
      closePanel: function closePanel() {
        setShowPanel(false);
        setIsDirty(false);
      }
    };
  }, []);
  var hanldeClickItem = useCallback(function (item) {
    setIsDirty(true);
    onClickItem(item);
  }, [onClickItem]);
  useEffect(function () {
    var foundItem = flattenItems.find(function (item) {
      return item.id === selectedItemId;
    });
    if ((foundItem === null || foundItem === void 0 ? void 0 : foundItem.panel) !== undefined && isDirty) {
      setShowPanel(true);
      setPanelContent(foundItem.panel);
    } else {
      setShowPanel(false);
      var timer = window.setTimeout(function () {
        return setPanelContent(null);
      }, 300);
      return function () {
        return window.clearTimeout(timer);
      };
    }
  }, [selectedItemId, flattenItems, isDirty]);
  var clickOutsideSidebar = useCallback(function (e) {
    var clickedInSidebar = checkIfSidebarContainsTarget(wrapperElement, e.target);
    if (clickedInSidebar === false) {
      setShowPanel(false);
      setIsDirty(false);
    }
  }, [setIsDirty, setShowPanel, wrapperElement]);
  useEffect(function () {
    document.addEventListener('click', clickOutsideSidebar, true);
    return function () {
      document.removeEventListener('click', clickOutsideSidebar, true);
    };
  }, [clickOutsideSidebar]);
  var renderPrimaryItems = function renderPrimaryItems(itemList, additionalStyle) {
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Divider$1, null), /*#__PURE__*/React__default.createElement(ItemsContainer, {
      style: additionalStyle
    }, itemList.map(function (item) {
      var itemElement = /*#__PURE__*/React__default.createElement(PrimaryItem, {
        themeActive: item.id === selectedItemId,
        onClick: function onClick() {
          return !item.disabled && hanldeClickItem(item);
        },
        "data-test-id": "primary-item-".concat(item.id),
        themeDisabled: item.disabled
      }, /*#__PURE__*/React__default.createElement(PrimaryItemIconWrapper, null, /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: item.icon,
        size: "medium",
        sx: {
          zIndex: 1
        },
        intent: item.disabled ? 'disabled-text' : undefined
      })), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
        tagName: "span",
        fontSize: 12,
        sx: {
          color: item.disabled ? undefined : 'inherit',
          letterSpacing: '0.03em'
        },
        intent: item.disabled ? 'disabled' : undefined
      }, item.text));
      return /*#__PURE__*/React__default.createElement(ItemLinkWraper, Object.assign({
        key: item.id,
        href: item.url,
        onClick: function onClick(e) {
          return e.preventDefault();
        }
      }, item.dataAttrs), item.count !== undefined ? /*#__PURE__*/React__default.createElement(Badge$1.Count, {
        key: item.id,
        content: item.count,
        intent: "primary"
      }, itemElement) : itemElement);
    })));
  };
  return /*#__PURE__*/React__default.createElement(SideBarContainer, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(SideBarContext$1.Provider, {
    value: sideBarContextValue
  }, /*#__PURE__*/React__default.createElement(NavBar, {
    ref: setWrapperElement
  }, /*#__PURE__*/React__default.createElement(SideBarBackground, null), /*#__PURE__*/React__default.createElement(ScrollWrapper, {
    themeShowPanel: showPanel
  }, /*#__PURE__*/React__default.createElement(SideBarWrapper, null, showHeader && /*#__PURE__*/React__default.createElement(HeaderItemsContainer, null, header.map(function (item) {
    var itemElement = /*#__PURE__*/React__default.createElement(HeaderItem, {
      themeActive: item.id === selectedItemId,
      onClick: function onClick() {
        return hanldeClickItem(item);
      },
      "data-test-id": "header-item-".concat(item.id)
    }, /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: item.icon
    }));
    return /*#__PURE__*/React__default.createElement(ItemLinkWraper, Object.assign({
      key: item.id,
      href: item.url,
      onClick: function onClick(e) {
        return e.preventDefault();
      }
    }, item.dataAttrs), item.count !== undefined ? /*#__PURE__*/React__default.createElement(Badge$1.Count, {
      key: item.id,
      content: item.count,
      intent: "primary"
    }, itemElement) : itemElement);
  })), showBody && renderPrimaryItems(body, {
    flex: 1
  }), showFooter && renderPrimaryItems(footer))), /*#__PURE__*/React__default.createElement(PanelWrapper, {
    themeActive: showPanel
  }, panelContent))));
};
var SideBar$1 = SideBar;

var PanelBackground = styled.div.withConfig({
  displayName: "StyledPanel__PanelBackground",
  componentId: "sc-ymbxdp-0"
})(["&&{margin:0;padding:0;position:absolute;width:", ";height:100dvh;background-color:", ";box-shadow:", ";border-radius:", ";z-index:1;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.sideBar.sizes.panelWidth;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.sideBar.colors.panelBackground;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.sideBar.shadows.panelContainerShadow;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.sideBar.radii.panelContainter;
});
var BackButtonWrapper = styled.div.withConfig({
  displayName: "StyledPanel__BackButtonWrapper",
  componentId: "sc-ymbxdp-1"
})(["&&{display:flex;align-items:center;cursor:pointer;padding:", ";}&& > *:first-child{margin-right:", ";}&&{", ";}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.sideBar.space.panelBackButtonPadding;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.sideBar.space.backIconMarginRight;
}, function (_ref7) {
  var themeVisibility = _ref7.themeVisibility;
  return {
    visibility: themeVisibility ? 'visible' : 'hidden'
  };
});
var PanelSubheaderWrapper = styled.div.withConfig({
  displayName: "StyledPanel__PanelSubheaderWrapper",
  componentId: "sc-ymbxdp-2"
})(["&&{display:flex;align-items:center;padding:", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.sideBar.space.panelSubHeaderPadding;
});
var PanelItemWrapper = styled.div.withConfig({
  displayName: "StyledPanel__PanelItemWrapper",
  componentId: "sc-ymbxdp-3"
})(["&&{margin:0;display:flex;align-items:center;justify-content:space-between;padding:", ";border-radius:", ";cursor:pointer;box-sizing:border-box;}&&:hover{background-color:", ";}&&{", ";}&& > ", "{display:flex;align-items:center;justify-content:center;height:", ";min-width:", ";}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.sideBar.space.panelItemPadding;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.sideBar.radii.panelItem;
}, function (_ref11) {
  var theme = _ref11.theme;
  return "".concat(theme.__hd__.sideBar.colors.panelItemHoverBackground, "0d");
}, function (_ref12) {
  var theme = _ref12.theme,
    themeActive = _ref12.themeActive;
  switch (themeActive) {
    case true:
      return css$2(["background-color:", ";"], theme.__hd__.sideBar.colors.panelItemActiveBackground);
    case false:
      return css$2([""]);
  }
}, StyledBadge, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.sideBar.sizes.panelItemBadge;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.sideBar.sizes.panelItemBadge;
});
var ItemLinkWrapper = styled.a.withConfig({
  displayName: "StyledPanel__ItemLinkWrapper",
  componentId: "sc-ymbxdp-4"
})(["&&{display:block;text-decoration:none;}"]);
var PanelItemsContainer = styled.div.withConfig({
  displayName: "StyledPanel__PanelItemsContainer",
  componentId: "sc-ymbxdp-5"
})(["&&{margin:0;padding:0;}&& > ", ":not(:first-child){margin-top:", ";}"], ItemLinkWrapper, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.sideBar.space.panelItemMarginTop;
});
var PanelScroller = styled.div.withConfig({
  displayName: "StyledPanel__PanelScroller",
  componentId: "sc-ymbxdp-6"
})(["&&{margin:0;padding:0;position:relative;z-index:2;max-height:100dvh;overflow-x:hidden;overflow-y:hidden;width:", ";border-radius:", ";}&&:hover{overflow-y:scroll;scrollbar-width:thin;scrollbar-color:", ";}&&:hover::-webkit-scrollbar{background-color:transparent;width:", ";}&&:hover::-webkit-scrollbar-thumb{background-color:", ";border-radius:", ";border-width:", ";border-style:solid;border-color:transparent;background-clip:content-box;}&&:hover::-webkit-scrollbar-track{margin:", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.sideBar.sizes.panelWrapperWidth;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.sideBar.radii.panelContainter;
}, function (_ref18) {
  var theme = _ref18.theme;
  return "".concat(theme.__hd__.sideBar.colors.scrollBarThumb, " transparent");
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.sideBar.sizes.scrollBar;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.sideBar.colors.scrollBarThumb;
}, function (_ref21) {
  var theme = _ref21.theme;
  return "calc(".concat(theme.__hd__.sideBar.sizes.scrollBar, " / 2)");
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.sideBar.borderWidths.scrollBar;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.sideBar.space.scrollBarMargin;
});
var PanelContainer$1 = styled.div.withConfig({
  displayName: "StyledPanel__PanelContainer",
  componentId: "sc-ymbxdp-7"
})(["&&{min-height:100dvh;padding:", ";border-radius:", ";width:", ";}&& > ", ":nth-child(n + 4){margin-top:", ";}"], function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.sideBar.space.panelContainerPadding;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.sideBar.radii.panelContainter;
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.sideBar.sizes.panelWidth;
}, PanelItemsContainer, function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.sideBar.space.panelItemContainerMarginTop;
});
var PanelHeaderWrapper = styled.div.withConfig({
  displayName: "StyledPanel__PanelHeaderWrapper",
  componentId: "sc-ymbxdp-8"
})(["&&{display:flex;align-items:center;justify-content:space-between;height:", ";}"], function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.sideBar.sizes.panelHeaderHeight;
});

var Panel = function Panel(_ref) {
  var heading = _ref.heading,
    items = _ref.items,
    selectedItemId = _ref.selectedItemId,
    onClickItem = _ref.onClickItem,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'menu' : _ref$variant,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _a;
  var sxCss = useCss(sx);
  // TODO: refactor for better performance with different data structure
  var secondaryItems = useMemo(function () {
    return Object.values(items).flat();
  }, [items]);
  var tertiaryItems = useMemo(function () {
    return secondaryItems.map(function (item) {
      return item.subItems !== undefined ? item.subItems : [];
    }).flat();
  }, [secondaryItems]);
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    selectedSecondaryItem = _useState2[0],
    setSelectedSecondaryItem = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isDirty = _useState4[0],
    setIsDirty = _useState4[1];
  var _useState5 = useState(true),
    _useState6 = _slicedToArray(_useState5, 2),
    showSecondaryMenu = _useState6[0],
    setShowSecondaryMenu = _useState6[1];
  var _useContext = useContext(SideBarContext$1),
    closePanel = _useContext.closePanel;
  var handleClickItem = useCallback(function (item) {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var asyncClickItem;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              asyncClickItem = function asyncClickItem() {
                return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          return _context.abrupt("return", onClickItem(item));
                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));
              };
              _context2.next = 3;
              return asyncClickItem();
            case 3:
              setIsDirty(true);
            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  }, [onClickItem]);
  useEffect(function () {
    var foundSecItem = secondaryItems.find(function (item) {
      return item.id === selectedItemId;
    });
    if (foundSecItem !== undefined) {
      setSelectedSecondaryItem(foundSecItem);
      if (foundSecItem.subItems !== undefined) {
        setShowSecondaryMenu(false);
      } else if (isDirty) {
        closePanel();
        setIsDirty(false);
      }
    } else {
      var foundTerItem = tertiaryItems.find(function (item) {
        return item.id === selectedItemId;
      });
      if (foundTerItem !== undefined) {
        setShowSecondaryMenu(false);
        setSelectedSecondaryItem(secondaryItems.find(function (item) {
          var _a;
          return (_a = item.subItems) === null || _a === void 0 ? void 0 : _a.includes(foundTerItem);
        }));
        if (isDirty) {
          closePanel();
          setIsDirty(false);
        }
      } else {
        setSelectedSecondaryItem(undefined);
        setShowSecondaryMenu(true);
      }
    }
  }, [selectedItemId, secondaryItems, tertiaryItems, closePanel, onClickItem, isDirty]);
  var renderPanelItem = function renderPanelItem(item, active) {
    return /*#__PURE__*/React__default.createElement(ItemLinkWrapper, Object.assign({
      key: item.id,
      href: item.url,
      onClick: function onClick(e) {
        return e.preventDefault();
      }
    }, item.dataAttrs), /*#__PURE__*/React__default.createElement(PanelItemWrapper, {
      onClick: function onClick() {
        return handleClickItem(item);
      },
      themeActive: active
    }, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      intent: active ? 'main' : 'body',
      fontWeight: active ? 'semi-bold' : 'regular'
    }, item.text), item.count !== undefined && /*#__PURE__*/React__default.createElement(Badge$1, {
      content: item.count
    })));
  };
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  if (variant === 'blank') {
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(PanelBackground, null), /*#__PURE__*/React__default.createElement(PanelScroller, null, /*#__PURE__*/React__default.createElement(PanelContainer$1, {
      id: id,
      className: className,
      style: Object.assign(Object.assign({}, style), sxCss),
      "data-test-id": dataTestId
    }, /*#__PURE__*/React__default.createElement(Box$1, {
      pl: "medium",
      pr: "medium"
    }, /*#__PURE__*/React__default.createElement(PanelHeaderWrapper, null, /*#__PURE__*/React__default.createElement(Typography$1.Title, {
      level: 5,
      fontWeight: "bold"
    }, heading), /*#__PURE__*/React__default.createElement(Button.Icon, {
      icon: "cancel",
      intent: "subdued-text",
      onClick: closePanel
    }))), children)));
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(PanelBackground, null), /*#__PURE__*/React__default.createElement(PanelScroller, null, /*#__PURE__*/React__default.createElement(PanelContainer$1, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), sxCss),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(Box$1, {
    pl: "medium",
    pr: "medium"
  }, /*#__PURE__*/React__default.createElement(PanelHeaderWrapper, null, /*#__PURE__*/React__default.createElement(Typography$1.Title, {
    level: 5,
    fontWeight: "bold"
  }, heading), /*#__PURE__*/React__default.createElement(Button.Icon, {
    icon: "cancel",
    intent: "subdued-text",
    size: "small",
    onClick: closePanel
  }))), /*#__PURE__*/React__default.createElement(BackButtonWrapper, {
    themeVisibility: !showSecondaryMenu,
    onClick: function onClick() {
      return onClickItem(undefined);
    }
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "single-left-arrow",
    size: "small",
    intent: "primary"
  }), /*#__PURE__*/React__default.createElement(Typography$1.Text, {
    fontSize: 12,
    fontWeight: "bold",
    intent: "primary"
  }, t('Back to'), " ", selectedSecondaryItem === null || selectedSecondaryItem === void 0 ? void 0 : selectedSecondaryItem.text)), showSecondaryMenu ? Object.entries(items).map(function (entry) {
    var _entry = _slicedToArray(entry, 2),
      subHeader = _entry[0],
      secItems = _entry[1];
    return /*#__PURE__*/React__default.createElement(PanelItemsContainer, {
      key: subHeader
    }, subHeader !== '' && /*#__PURE__*/React__default.createElement(PanelSubheaderWrapper, null, /*#__PURE__*/React__default.createElement(Typography$1.Text, {
      fontWeight: "bold"
    }, subHeader)), secItems.map(function (item) {
      var active = item.id === selectedItemId;
      return renderPanelItem(item, active);
    }));
  }) : /*#__PURE__*/React__default.createElement(PanelItemsContainer, null, (_a = selectedSecondaryItem === null || selectedSecondaryItem === void 0 ? void 0 : selectedSecondaryItem.subItems) === null || _a === void 0 ? void 0 : _a.map(function (item) {
    var active = item.id === selectedItemId;
    return renderPanelItem(item, active);
  })))));
};
var Panel$1 = Panel;

var CompoundSideBar = SideBar$1;
CompoundSideBar.Panel = Panel$1;
var CompoundSideBar$1 = CompoundSideBar;

css$2(["box-sizing:border-box;width:100%;height:", ";border-radius:", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.slider.sizes.trackHeight;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.slider.radii["default"];
});
css$2(["box-sizing:border-box;border:", " solid ", ";height:", ";width:", ";border-radius:50%;background:", ";cursor:pointer;"], function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.slider.borderWidths.thumb;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.slider.colors.thumbBorder;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.slider.sizes.thumb;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.slider.sizes.thumb;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.slider.colors.thumbBackground;
});
var CommonThumbBoxShadow = css$2(["box-shadow:", ";"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.slider.shadows.thumb;
});
var CommonTooltipAnimation = css$2(["transition:all 0.2s ease-in-out;"]);
var SliderRail = styled.div.withConfig({
  displayName: "StyledSlider__SliderRail",
  componentId: "sc-1jir3ik-0"
})(["&&{background:", ";border-radius:", ";height:", ";width:100%;position:absolute;left:0px;top:", ";margin:0;padding:0;}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.slider.colors.background;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.slider.radii["default"];
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.slider.sizes.trackHeight;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.slider.space.trackOffsetTop;
});
var SliderTrack = styled.div.withConfig({
  displayName: "StyledSlider__SliderTrack",
  componentId: "sc-1jir3ik-1"
})(["&&{background:", ";border-radius:", ";height:", ";position:absolute;left:0px;top:", ";margin:0;padding:0;}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.slider.colors.track;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.slider.radii["default"];
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.slider.sizes.trackHeight;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.slider.space.trackOffsetTop;
});
var SliderTooltip = styled.div.withConfig({
  displayName: "StyledSlider__SliderTooltip",
  componentId: "sc-1jir3ik-2"
})(["&&{display:", ";position:absolute;margin:0;padding:0;line-height:", ";min-width:", ";background:", ";color:white;border-radius:", ";white-space:nowrap;font-size:", ";text-align:center;padding:", ";user-select:none;transform:translate(-50%,-150%);left:", ";", ";}&&:before{content:'';position:absolute;top:", ";left:50%;border:", " solid ", ";border-bottom:none;border-left-color:transparent;border-right-color:transparent;transform:translateX(-50%);}"], function (props) {
  return props.alwaysShowTooltip ? 'initial' : 'none';
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.tooltip.lineHeights["default"];
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.slider.sizes.tooltipMinWidth;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.tooltip.colors.dark.background;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.tooltip.radii["default"];
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.tooltip.fontSizes["default"];
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.tooltip.space.wrapperPadding;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.slider.space.tooltipOffsetLeft;
}, CommonTooltipAnimation, function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.slider.space.tooltipPointerOffsetTop;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.tooltip.sizes.arrow;
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.tooltip.colors.dark.background;
});
var SliderThumb = styled.div.withConfig({
  displayName: "StyledSlider__SliderThumb",
  componentId: "sc-1jir3ik-3"
})(["&&{box-sizing:border-box;border-radius:50%;background:", ";height:", ";width:", ";border:", " solid ", ";outline:none;box-shadow:none;position:absolute;transform:translateX(-50%);margin:0;padding:0;}&&:focus,&&:hover{", ";}&&:focus ", ",&&:hover ", "{display:initial;}"], function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.slider.colors.thumbBackground;
}, function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.slider.sizes.thumb;
}, function (_ref29) {
  var theme = _ref29.theme;
  return theme.__hd__.slider.sizes.thumb;
}, function (_ref30) {
  var theme = _ref30.theme;
  return theme.__hd__.slider.borderWidths.thumb;
}, function (_ref31) {
  var theme = _ref31.theme;
  return theme.__hd__.slider.colors.thumbBorder;
}, CommonThumbBoxShadow, SliderTooltip, SliderTooltip);
var DisabledSlider = css$2(["pointer-events:none;", ",", ",", "{cursor:not-allowed;}", "{background:", ";}", "{border-color:", ";}"], SliderRail, SliderTrack, SliderThumb, SliderTrack, function (_ref32) {
  var theme = _ref32.theme;
  return theme.__hd__.slider.colors.disabled;
}, SliderThumb, function (_ref33) {
  var theme = _ref33.theme;
  return theme.__hd__.slider.colors.disabled;
});
var EnabledSlider = css$2(["pointer-events:initial;", ",", ",", "{cursor:pointer;}"], SliderRail, SliderTrack, SliderThumb);
var SliderContainer = styled.div.withConfig({
  displayName: "StyledSlider__SliderContainer",
  componentId: "sc-1jir3ik-4"
})(["&&{height:", ";width:100%;position:relative;padding:0;margin:0;", ";}"], function (_ref34) {
  var theme = _ref34.theme;
  return theme.__hd__.slider.sizes.inputHeight;
}, function (props) {
  return props.disabled ? DisabledSlider : EnabledSlider;
});

var KEYBOARD_KEY = {
  ArrowRight: 'ArrowRight',
  ArrowLeft: 'ArrowLeft',
  ArrowUp: 'ArrowUp',
  ArrowDown: 'ArrowDown',
  PageUp: 'PageUp',
  PageDown: 'PageDown',
  Escape: 'Escape'
};
var preventKeyboardScrolling = function preventKeyboardScrolling(e) {
  if ([KEYBOARD_KEY.ArrowLeft, KEYBOARD_KEY.ArrowRight, KEYBOARD_KEY.ArrowUp, KEYBOARD_KEY.ArrowDown, KEYBOARD_KEY.PageUp, KEYBOARD_KEY.PageDown].includes(e.key)) {
    e.stopPropagation();
    e.preventDefault();
  }
};
var getPointerPosition = function getPointerPosition(event) {
  var e = event;
  var isTouchEvent = e.type === 'touchmove';
  var isMouseEvent = e.type === 'mousemove' || e.type === 'mousedown';
  var x = 0;
  var y = 0;
  if (isTouchEvent === true && e.touches !== undefined && e.changedTouches !== undefined) {
    var isTouches = e.touches[0] !== null && e.touches[0] !== undefined;
    var touch = isTouches ? e.touches[0] : e.changedTouches[0];
    x = touch.pageX;
    y = touch.pageY;
  } else if (isMouseEvent === true) {
    x = e.clientX;
    y = e.clientY;
  }
  return {
    x: x,
    y: y
  };
};
var normalizeValue = function normalizeValue(min, max, value) {
  return Math.min(Math.max(value, min), max);
};
var getValueByMouseEvent = function getValueByMouseEvent(e, railWidth, railOffsetLeft, min, max, step) {
  var draggedWidth = getPointerPosition(e).x - railOffsetLeft;
  var draggedPercent = draggedWidth / railWidth * 100;
  var valueFromDraggedPercent = Math.round(min + Math.round((max - min) / 100 * draggedPercent / step) * step);
  var result = normalizeValue(min, max, valueFromDraggedPercent);
  return result;
};
var getValueByKeyboard = function getValueByKeyboard(value, step, min, max, keyboardKey) {
  if ([KEYBOARD_KEY.ArrowLeft, KEYBOARD_KEY.ArrowDown, KEYBOARD_KEY.PageDown].includes(keyboardKey)) {
    return Math.max(value - step, min);
  }
  if ([KEYBOARD_KEY.ArrowRight, KEYBOARD_KEY.ArrowUp, KEYBOARD_KEY.PageUp].includes(keyboardKey)) {
    return Math.min(value + step, max);
  }
  return value;
};
var removeListener = function removeListener(onMouseMove) {
  return function () {
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('touchmove', onMouseMove);
  };
};
var addListener = function addListener(onMouseMove, onMouseUp) {
  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('touchmove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
  document.addEventListener('touchend', onMouseUp);
};
var useSliderData = function useSliderData(_ref) {
  var min = _ref.min,
    max = _ref.max,
    value = _ref.value;
  var valueInNumber = value === undefined ? (min + max) / 2 : normalizeValue(min, max, value);
  var valueInPercent = normalizeValue(0, 100, (valueInNumber - min) / (max - min) * 100);
  return {
    valueInNumber: valueInNumber,
    valueInPercent: valueInPercent
  };
};

var SingleSlider = function SingleSlider(_ref) {
  var _ref$min = _ref.min,
    min = _ref$min === void 0 ? 0 : _ref$min,
    _ref$max = _ref.max,
    max = _ref$max === void 0 ? 100 : _ref$max,
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    value = _ref.value,
    disabled = _ref.disabled,
    alwaysShowTooltip = _ref.alwaysShowTooltip,
    customTooltipText = _ref.customTooltipText,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    onChange = _ref.onChange;
  var refSlider = useRef(null);
  var _useSliderData = useSliderData({
      min: min,
      max: max,
      value: value
    }),
    valueInNumber = _useSliderData.valueInNumber,
    valueInPercent = _useSliderData.valueInPercent;
  var toolTip = customTooltipText !== undefined ? customTooltipText : valueInNumber;
  var _useState = useState("tooltip_".concat(Date.now().toString())),
    _useState2 = _slicedToArray(_useState, 1),
    labelId = _useState2[0];
  var onKeyDown = function onKeyDown(e) {
    preventKeyboardScrolling(e);
    if (disabled !== true && onChange !== undefined) {
      var newValueInNumber = getValueByKeyboard(valueInNumber, step, min, max, e.key);
      if (onChange !== undefined) {
        onChange(newValueInNumber);
      }
    }
  };
  var onMouseMove = function onMouseMove(e) {
    e.stopPropagation();
    if (refSlider.current === null) return;
    var _refSlider$current$ge = refSlider.current.getBoundingClientRect(),
      railWidth = _refSlider$current$ge.width,
      railOffsetLeft = _refSlider$current$ge.x;
    var newValueInNumber = getValueByMouseEvent(e, railWidth, railOffsetLeft, min, max, step);
    if (onChange !== undefined) {
      onChange(newValueInNumber);
    }
  };
  var onClickSlider = function onClickSlider(e) {
    return onMouseMove(e);
  };
  var handleAddListener = function handleAddListener(e) {
    e.stopPropagation();
    var onMouseUp = removeListener(onMouseMove);
    addListener(onMouseMove, onMouseUp);
  };
  return /*#__PURE__*/React__default.createElement(SliderContainer, {
    ref: refSlider,
    id: id,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    className: className,
    "data-test-id": dataTestId,
    onKeyDown: onKeyDown,
    onMouseDown: onClickSlider,
    disabled: disabled === true
  }, /*#__PURE__*/React__default.createElement(SliderRail, null), /*#__PURE__*/React__default.createElement(SliderTrack, {
    style: {
      width: "".concat(valueInPercent, "%")
    }
  }), /*#__PURE__*/React__default.createElement(SliderThumb, {
    "aria-valuemax": max,
    "aria-valuemin": min,
    "aria-valuenow": valueInNumber,
    "aria-disabled": disabled === true,
    "aria-orientation": "horizontal",
    tabIndex: 0,
    "aria-labelledby": labelId,
    style: {
      left: "".concat(valueInPercent, "%")
    },
    onMouseDown: handleAddListener,
    onTouchStart: handleAddListener,
    "data-test-id": "slider-thumb"
  }, /*#__PURE__*/React__default.createElement(SliderTooltip, {
    id: labelId,
    role: "tooltip",
    "aria-label": "".concat(toolTip),
    alwaysShowTooltip: alwaysShowTooltip === true
  }, toolTip)));
};
var SingleSlider$1 = SingleSlider;

var StatisticContainer = styled.div.withConfig({
  displayName: "StyledStatistic__StatisticContainer",
  componentId: "sc-1qfglju-0"
})(["&&{padding:0;margin:0;width:100%;", ";}"], function (_ref) {
  var themeAlign = _ref.themeAlign;
  switch (themeAlign) {
    case 'left':
      return css$2(["text-align:left;"]);
    case 'right':
      return css$2(["text-align:right;"]);
  }
});
var StyledTitleWrapper = styled.div.withConfig({
  displayName: "StyledStatistic__StyledTitleWrapper",
  componentId: "sc-1qfglju-1"
})(["&&{padding:0;margin:", ";font-size:", ";line-height:", ";", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.statistic.space.titleWrapperMargin;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.statistic.fontSizes.title;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.statistic.lineHeights["default"];
}, function (_ref5) {
  var themeIntent = _ref5.themeIntent,
    theme = _ref5.theme;
  switch (themeIntent) {
    case 'text':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.titleText);
    case 'white':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.titleWhite);
    case 'inherit':
      return css$2(["color:inherit;"]);
  }
});
var StyledContentWrapper = styled.div.withConfig({
  displayName: "StyledStatistic__StyledContentWrapper",
  componentId: "sc-1qfglju-2"
})(["&&{padding:0;margin:0;}"]);
var StyledValueWrapper = styled.span.withConfig({
  displayName: "StyledStatistic__StyledValueWrapper",
  componentId: "sc-1qfglju-3"
})(["&&{padding:0;margin:0;font-size:", ";font-weight:", ";", ";}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.statistic.fontSizes.content;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.statistic.fontWeights.content;
}, function (_ref8) {
  var themeIntent = _ref8.themeIntent,
    theme = _ref8.theme;
  switch (themeIntent) {
    case 'text':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.contentText);
    case 'white':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.contentWhite);
    case 'inherit':
      return css$2(["color:inherit;"]);
  }
});
var StyledPrefixWrapper = styled.span.withConfig({
  displayName: "StyledStatistic__StyledPrefixWrapper",
  componentId: "sc-1qfglju-4"
})(["&&{padding:0;margin:", ";", ";}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.statistic.space.prefixWrapperMargin;
}, function (_ref10) {
  var themeIntent = _ref10.themeIntent,
    theme = _ref10.theme;
  switch (themeIntent) {
    case 'text':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.contentText);
    case 'white':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.contentWhite);
    case 'inherit':
      return css$2(["color:inherit;"]);
  }
});
var StyledSuffixWrapper = styled.span.withConfig({
  displayName: "StyledStatistic__StyledSuffixWrapper",
  componentId: "sc-1qfglju-5"
})(["&&{padding:0;margin:", ";", ";}"], function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.statistic.space.suffixWrapperMargin;
}, function (_ref12) {
  var themeIntent = _ref12.themeIntent,
    theme = _ref12.theme;
  switch (themeIntent) {
    case 'text':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.contentText);
    case 'white':
      return css$2(["color:", ";"], theme.__hd__.statistic.colors.contentWhite);
    case 'inherit':
      return css$2(["color:inherit;"]);
  }
});

var Statistic = function Statistic(_ref) {
  var _ref$align = _ref.align,
    align = _ref$align === void 0 ? 'right' : _ref$align,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'text' : _ref$intent,
    suffix = _ref.suffix,
    prefix = _ref.prefix,
    title = _ref.title,
    value = _ref.value,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(StatisticContainer, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themeAlign: align
  }, /*#__PURE__*/React__default.createElement(StyledTitleWrapper, {
    themeIntent: intent
  }, title), /*#__PURE__*/React__default.createElement(StyledContentWrapper, null, prefix !== undefined && /*#__PURE__*/React__default.createElement(StyledPrefixWrapper, {
    themeIntent: intent
  }, prefix), /*#__PURE__*/React__default.createElement(StyledValueWrapper, {
    themeIntent: intent
  }, value), suffix !== undefined && /*#__PURE__*/React__default.createElement(StyledSuffixWrapper, {
    themeIntent: intent
  }, suffix)));
};
var Statistic$1 = Statistic;

var Wrapper$2 = styled.div.withConfig({
  displayName: "StyledSteps__Wrapper",
  componentId: "sc-1kfxgnx-0"
})(["&&{display:flex;margin:0;padding:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.steps.space.padding;
});
var StepWrapper = styled.div.withConfig({
  displayName: "StyledSteps__StepWrapper",
  componentId: "sc-1kfxgnx-1"
})(["&&{flex:1;display:flex;flex-direction:column;align-items:center;position:relative;margin:0;padding:0;width:", "%;max-width:", ";", ";}"], function (props) {
  return 100 / props.themeNumberOfSteps;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.steps.sizes.maxWidthMobile;
}, function (_ref3) {
  var themeVariant = _ref3.themeVariant;
  return themeVariant === 'basic' && css$2(["@media (min-width:", "){max-width:", ";}"], function (_ref4) {
    var theme = _ref4.theme;
    return theme.breakpoints.small;
  }, function (_ref5) {
    var theme = _ref5.theme;
    return theme.__hd__.steps.sizes.maxWidthDesktop;
  });
});
var StepIconWrapper = styled.div.withConfig({
  displayName: "StyledSteps__StepIconWrapper",
  componentId: "sc-1kfxgnx-2"
})(["&&{display:flex;justify-content:center;align-items:center;position:relative;margin:0;padding:0;", ";width:", ";height:", ";}&& > ", "{border-radius:50%;background-color:", ";color:", ";}"], function (_ref6) {
  var themeClickable = _ref6.themeClickable;
  switch (themeClickable) {
    case true:
      return css$2(["pointer-events:auto;cursor:pointer;"]);
    case false:
      return css$2(["pointer-events:none;"]);
  }
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.steps.sizes.iconSize;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.steps.sizes.iconSize;
}, StyledIcon, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.steps.colors.completeBg;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.steps.colors.labelCompleteText;
});
var StepLine = styled.div.withConfig({
  displayName: "StyledSteps__StepLine",
  componentId: "sc-1kfxgnx-3"
})(["&&{position:absolute;height:", ";margin:0;padding:0;top:", ";left:", ";right:", ";", ";}"], function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.steps.sizes.lineHeight;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.steps.space.linePositionTop;
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.steps.space.linePositionLeft;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.steps.space.linePositionRight;
}, function (_ref15) {
  var themeStatus = _ref15.themeStatus,
    theme = _ref15.theme;
  switch (themeStatus) {
    case 'complete':
      return css$2(["background-color:", ";"], theme.__hd__.steps.colors.lineCompleteBg);
    case 'incomplete':
      return css$2(["background-color:", ";"], theme.__hd__.steps.colors.lineIncompleteBg);
  }
});
var ActiveIcon = styled.div.withConfig({
  displayName: "StyledSteps__ActiveIcon",
  componentId: "sc-1kfxgnx-4"
})(["&&{z-index:1;position:absolute;box-sizing:content-box;display:flex;align-items:center;justify-content:center;width:", ";height:", ";border:", " solid ", ";border-radius:", ";color:", ";margin:0;padding:0;", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.steps.sizes.activeIconSize;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.steps.sizes.activeIconSize;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.steps.borderWidths.activeIcon;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.steps.colors.activeIconBorder;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.steps.radii.icon;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.steps.colors.activeIconBorder;
}, function (_ref22) {
  var themeStatus = _ref22.themeStatus,
    theme = _ref22.theme;
  switch (themeStatus) {
    case 'complete':
      return css$2(["background-color:", ";font-size:", ";"], theme.__hd__.steps.colors.activeCompleteBg, theme.__hd__.steps.fontSizes.activeIcon);
    case 'incomplete':
      return css$2(["background-color:", ";"], theme.__hd__.steps.colors.activeIncompleteBg);
  }
});
var IncompleteIcon = styled.div.withConfig({
  displayName: "StyledSteps__IncompleteIcon",
  componentId: "sc-1kfxgnx-5"
})(["&&{box-sizing:border-box;width:", ";height:", ";border:", " solid ", ";border-radius:", ";margin:0;padding:0;}"], function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.steps.sizes.iconSize;
}, function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.steps.sizes.iconSize;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.steps.borderWidths.incompleteIcon;
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.steps.colors.incompleteIconBorder;
}, function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.steps.radii.icon;
});
var StepLabel = styled.div.withConfig({
  displayName: "StyledSteps__StepLabel",
  componentId: "sc-1kfxgnx-6"
})(["&&{text-align:center;margin:", ";padding:0;", ";", ";}@media (max-width:", "){&&{display:none;}}&&{", ";", ";}"], function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.steps.space.labelMargin;
}, function (_ref29) {
  var themeClickable = _ref29.themeClickable;
  switch (themeClickable) {
    case true:
      return css$2(["pointer-events:auto;cursor:pointer;"]);
    case false:
      return css$2(["pointer-events:none;"]);
  }
}, function (_ref30) {
  var themeVariant = _ref30.themeVariant;
  return themeVariant === 'compact' && css$2(["display:none;"]);
}, function (_ref31) {
  var theme = _ref31.theme;
  return theme.breakpoints.small;
}, function (_ref32) {
  var themeStatus = _ref32.themeStatus,
    theme = _ref32.theme;
  switch (themeStatus) {
    case 'complete':
      return css$2(["color:", ";"], theme.__hd__.steps.colors.labelCompleteText);
    case 'incomplete':
      return css$2(["color:", ";"], theme.__hd__.steps.colors.labelIncompleteText);
  }
}, function (_ref33) {
  var themeActive = _ref33.themeActive,
    theme = _ref33.theme;
  switch (themeActive) {
    case true:
      return css$2(["color:", ";font-size:", ";font-weight:", ";line-height:", ";"], theme.__hd__.steps.colors.labelActiveText, theme.__hd__.steps.fontSizes.labelActive, theme.__hd__.steps.fontWeights.labelActive, theme.__hd__.steps.lineHeights.labelActive);
    case false:
      return css$2(["font-size:", ";line-height:", ";"], theme.__hd__.steps.fontSizes.labelInactive, theme.__hd__.steps.lineHeights.labelInactive);
  }
});

var StepIcon = function StepIcon(_ref) {
  var clickable = _ref.clickable,
    status = _ref.status,
    active = _ref.active,
    onClick = _ref.onClick;
  return /*#__PURE__*/React__default.createElement(StepIconWrapper, {
    themeClickable: clickable,
    onClick: onClick
  }, active === true && /*#__PURE__*/React__default.createElement(ActiveIcon, {
    themeStatus: status
  }, status === 'complete' && /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "checkmark"
  })), status === 'complete' && active === false && /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "circle-ok",
    size: "small"
  }), status === 'incomplete' && active === false && /*#__PURE__*/React__default.createElement(IncompleteIcon, null));
};
var StepIcon$1 = StepIcon;

var Steps = function Steps(_ref) {
  var steps = _ref.steps,
    current = _ref.current,
    onClick = _ref.onClick,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'basic' : _ref$variant,
    dataTestId = _ref['data-test-id'];
  assert(current >= 1 && current <= steps.length, "[Steps] Current:".concat(current, " is not in range [1, ").concat(steps.length, "]"));
  var maybeOnClick = fromUndefinedable(onClick);
  var hasOnClick = isSome(maybeOnClick);
  return /*#__PURE__*/React__default.createElement(Wrapper$2, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, steps.map(function (step, index) {
    var text = step.text,
      status = step.status;
    var active = index === current - 1;
    var onClickStep = function onClickStep() {
      return pipe(maybeOnClick, map$2(invokeWith(step)), getOrElse(function () {
        return undefined;
      }));
    };
    var maybeClickable = fromUndefinedable(step.clickable);
    var clickable = getOrElse(function () {
      return true;
    })(maybeClickable);
    return /*#__PURE__*/React__default.createElement(StepWrapper, {
      themeNumberOfSteps: steps.length,
      key: step.id,
      themeVariant: variant
    }, /*#__PURE__*/React__default.createElement(StepIcon$1, {
      clickable: hasOnClick && clickable,
      onClick: onClickStep,
      active: active,
      status: status
    }), /*#__PURE__*/React__default.createElement(StepLabel, {
      themeClickable: hasOnClick && clickable,
      themeActive: active,
      themeStatus: status,
      themeVariant: variant,
      onClick: onClickStep
    }, text), index !== 0 && /*#__PURE__*/React__default.createElement(StepLine, {
      themeStatus: active === true ? 'complete' : status
    }));
  }));
};
var Steps$1 = Steps;

var animationDuration$1 = '0.25s';
var StyledWrapper = styled.div.withConfig({
  displayName: "StyledSwitch__StyledWrapper",
  componentId: "sc-63knnf-0"
})(["&&{display:flex;align-items:center;margin:0;padding:0;", ";}"], function (_ref) {
  var themeLoading = _ref.themeLoading;
  switch (themeLoading) {
    case true:
      return css$2(["pointer-events:none;"]);
    case false:
      return css$2([""]);
  }
});
var StyledInputWrapper = styled.label.withConfig({
  displayName: "StyledSwitch__StyledInputWrapper",
  componentId: "sc-63knnf-1"
})(["&&{position:relative;display:inline-block;margin:0;padding:0;", ";}"], function (_ref2) {
  var themeSize = _ref2.themeSize,
    theme = _ref2.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["width:", ";height:", ";"], theme.__hd__["switch"].sizes.smallWidth, theme.__hd__["switch"].sizes.smallHeight);
    case 'medium':
      return css$2(["width:", ";height:", ";"], theme.__hd__["switch"].sizes.mediumWidth, theme.__hd__["switch"].sizes.mediumHeight);
  }
});
var StyledSlider = styled.span.withConfig({
  displayName: "StyledSwitch__StyledSlider",
  componentId: "sc-63knnf-2"
})(["&&{position:absolute;top:0;left:0;right:0;bottom:0;margin:0;padding:0;", ";", ";}&&:before{position:absolute;content:'';background-color:", ";transition:", ";border-radius:50%;right:auto;", ";}"], function (_ref3) {
  var themeSize = _ref3.themeSize,
    theme = _ref3.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["border-radius:", ";"], theme.__hd__["switch"].radii.small);
    case 'medium':
      return css$2(["border-radius:", ";"], theme.__hd__["switch"].radii.medium);
  }
}, function (_ref4) {
  var themeDisabled = _ref4.themeDisabled,
    theme = _ref4.theme;
  switch (themeDisabled) {
    case true:
      return css$2(["cursor:not-allowed;background-color:", ";"], theme.__hd__["switch"].colors.disabledBackground);
    case false:
      return css$2(["cursor:pointer;background-color:", ";"], theme.__hd__["switch"].colors.background);
  }
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__["switch"].colors.handleBackgroundColor;
}, animationDuration$1, function (_ref6) {
  var themeSize = _ref6.themeSize,
    theme = _ref6.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["width:", ";height:", ";top:", ";left:", ";"], theme.__hd__["switch"].sizes.sliderSmall, theme.__hd__["switch"].sizes.sliderSmall, theme.__hd__["switch"].space.sliderSmallTop, theme.__hd__["switch"].space.sliderSmallLeft);
    case 'medium':
      return css$2(["width:", ";height:", ";top:", ";left:", ";"], theme.__hd__["switch"].sizes.sliderMedium, theme.__hd__["switch"].sizes.sliderMedium, theme.__hd__["switch"].space.sliderMediumTop, theme.__hd__["switch"].space.sliderMediumLeft);
  }
});
var getIconPositionStyle = function getIconPositionStyle(_ref7, value) {
  var themeChecked = _ref7.themeChecked,
    themeDisabled = _ref7.themeDisabled;
  return themeDisabled === true && themeChecked === false ? css$2(["right:", ";"], value) : css$2(["left:", ";"], value);
};
var DISABLED_ICON_SIZE_MAP = {
  small: 'disabledIconSmall',
  medium: 'disabledIconMedium'
};
var StyledIconWrapper = styled.div.withConfig({
  displayName: "StyledSwitch__StyledIconWrapper",
  componentId: "sc-63knnf-3"
})(["&&{position:absolute;color:", ";margin:0;padding:0;", ";", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__["switch"].colors.iconColor;
}, function (_ref9) {
  var themeSize = _ref9.themeSize,
    _ref9$themeChecked = _ref9.themeChecked,
    themeChecked = _ref9$themeChecked === void 0 ? false : _ref9$themeChecked,
    themeDisabled = _ref9.themeDisabled,
    theme = _ref9.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["top:0;", " line-height:", ";margin-left:", ";height:", ";font-size:", ";"], getIconPositionStyle({
        themeChecked: themeChecked,
        themeDisabled: themeDisabled
      }, theme.__hd__["switch"].space.iconSmallLeft), theme.__hd__["switch"].fontSizes.iconSmall, theme.__hd__["switch"].space.iconSmallMarginLeft, theme.__hd__["switch"].sizes.smallHeight, theme.__hd__["switch"].fontSizes.iconSmall);
    case 'medium':
      return css$2(["top:0;", " line-height:", ";margin-left:", ";height:", ";font-size:", ";"], getIconPositionStyle({
        themeChecked: themeChecked,
        themeDisabled: themeDisabled
      }, theme.__hd__["switch"].space.iconMediumLeft), theme.__hd__["switch"].fontSizes.iconMedium, theme.__hd__["switch"].space.iconMediumMarginLeft, theme.__hd__["switch"].sizes.mediumHeight, theme.__hd__["switch"].fontSizes.iconMedium);
  }
}, function (_ref10) {
  var themeDisabled = _ref10.themeDisabled,
    themeSize = _ref10.themeSize,
    theme = _ref10.theme;
  switch (themeDisabled) {
    case true:
      return css$2(["cursor:not-allowed;font-size:", ";"], theme.__hd__["switch"].fontSizes[DISABLED_ICON_SIZE_MAP[themeSize]]);
    case false:
      return css$2(["cursor:pointer;"]);
  }
});
var StyledLoadingIconWrapper = styled.div.withConfig({
  displayName: "StyledSwitch__StyledLoadingIconWrapper",
  componentId: "sc-63knnf-4"
})(["&&{position:absolute;transition:", ";display:flex;align-items:center;justify-content:center;margin:0;padding:0;", ";", ";}"], animationDuration$1, function (_ref11) {
  var themeDisabled = _ref11.themeDisabled,
    theme = _ref11.theme;
  switch (themeDisabled) {
    case true:
      return css$2(["color:", ";cursor:not-allowed;"], theme.__hd__["switch"].colors.disabledLoadingIconColor);
    case false:
      return css$2(["color:", ";cursor:pointer;"], theme.__hd__["switch"].colors.loadingIconColor);
  }
}, function (_ref12) {
  var themeSize = _ref12.themeSize,
    theme = _ref12.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["top:", ";font-size:", ";height:", ";width:", ";"], theme.__hd__["switch"].space.sliderSmallTop, theme.__hd__["switch"].fontSizes.loadingIconSmall, theme.__hd__["switch"].sizes.sliderSmall, theme.__hd__["switch"].sizes.sliderSmall);
    case 'medium':
      return css$2(["top:", ";font-size:", ";height:", ";width:", ";"], theme.__hd__["switch"].space.sliderMediumTop, theme.__hd__["switch"].fontSizes.loadingIconMedium, theme.__hd__["switch"].sizes.sliderMedium, theme.__hd__["switch"].sizes.sliderMedium);
  }
});
var fadeIn = keyframes(["from{opacity:0;transform:scale(0);}to{opacity:1;transform:scale(1);}"]);
var StyledInput = styled.input.withConfig({
  displayName: "StyledSwitch__StyledInput",
  componentId: "sc-63knnf-5"
})(["&&{opacity:0;width:0;height:0;margin:0;padding:0;", ";", ";}&& ~ ", "{display:none;}&&:checked ~ ", ",&&:disabled ~ ", "{display:flex;align-items:center;animation-name:", ";animation-duration:", ";}"], function (_ref13) {
  var themeDisabled = _ref13.themeDisabled,
    theme = _ref13.theme;
  switch (themeDisabled) {
    case true:
      return css$2(["&:checked ~ ", "{background-color:", ";}&:checked ~ ", "{color:", ";}"], StyledSlider, theme.__hd__["switch"].colors.checkedDisabledBackground, StyledLoadingIconWrapper, theme.__hd__["switch"].colors.checkedDisabledLoadingIconColor);
    case false:
      return css$2(["&:checked ~ ", "{background-color:", ";}&:checked ~ ", "{color:", ";}"], StyledSlider, theme.__hd__["switch"].colors.checkedBackground, StyledLoadingIconWrapper, theme.__hd__["switch"].colors.checkedLoadingIconColor);
  }
}, function (_ref14) {
  var themeSize = _ref14.themeSize,
    theme = _ref14.theme;
  switch (themeSize) {
    case 'small':
      return css$2(["&:checked ~ ", ":before{left:", ";}~ ", "{left:", ";}&:checked ~ ", "{left:", ";}"], StyledSlider, theme.__hd__["switch"].space.sliderSmallCheckedLeft, StyledLoadingIconWrapper, theme.__hd__["switch"].space.loadingIconSmallLeft, StyledLoadingIconWrapper, theme.__hd__["switch"].space.sliderSmallCheckedLeft);
    case 'medium':
      return css$2(["&:checked ~ ", ":before{left:", ";}~ ", "{left:", ";}&:checked ~ ", "{left:", ";}"], StyledSlider, theme.__hd__["switch"].space.sliderMediumCheckedLeft, StyledLoadingIconWrapper, theme.__hd__["switch"].space.loadingIconMediumLeft, StyledLoadingIconWrapper, theme.__hd__["switch"].space.sliderMediumCheckedLeft);
  }
}, StyledIconWrapper, StyledIconWrapper, StyledIconWrapper, fadeIn, animationDuration$1);

var Switch = function Switch(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    icon = _ref.icon,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    checked = _ref.checked,
    onChange = _ref.onChange,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var showIcon = disabled === true ? 'unavailable' : icon;
  return /*#__PURE__*/React__default.createElement(StyledWrapper, {
    themeLoading: loading,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, /*#__PURE__*/React__default.createElement(StyledInputWrapper, {
    themeSize: size
  }, /*#__PURE__*/React__default.createElement(StyledInput, {
    themeDisabled: disabled,
    themeSize: size,
    type: "checkbox",
    checked: checked,
    onChange: onChange,
    disabled: disabled,
    name: name,
    id: id
  }), /*#__PURE__*/React__default.createElement(StyledSlider, {
    themeDisabled: disabled,
    themeSize: size
  }), showIcon !== undefined && /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    themeDisabled: disabled,
    themeChecked: checked,
    themeSize: size
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: showIcon,
    "data-test-id": "switch-icon"
  })), loading === true && /*#__PURE__*/React__default.createElement(StyledLoadingIconWrapper, {
    themeDisabled: disabled,
    themeSize: size
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "loading-2",
    spin: true,
    "data-test-id": "loading-icon"
  }))));
};
var Switch$1 = Switch;

var Wrapper$1 = styled.div.withConfig({
  displayName: "Styled__Wrapper",
  componentId: "sc-af69al-0"
})(["&&{padding:0;margin:0;}"]);

var variantByRole = function variantByRole(role) {
  return {
    primary: 'filled',
    secondary: 'outlined'
  }[role];
};
var isPrimary = function isPrimary(button) {
  return button.role === 'primary';
};
var ActionButtons = function ActionButtons(_ref) {
  var buttons = _ref.buttons,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  assert(buttons.length > 0, "[ActionButtons] Need at least 1 button to render");
  assert(buttons.length <= 4, "[ActionButtons] Maximum 4 buttons could be rendered");
  assert(buttons.filter(isPrimary).length === 1, "[ActionButtons] Need to have exactly 1 primary button");
  var theme = useTheme();
  return /*#__PURE__*/React__default.createElement(Wrapper$1, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, buttons.map(function (_ref2) {
    var _ref2$role = _ref2.role,
      role = _ref2$role === void 0 ? 'secondary' : _ref2$role,
      icon = _ref2.icon,
      text = _ref2.text,
      onClick = _ref2.onClick,
      key = _ref2.key,
      disabled = _ref2.disabled;
    return /*#__PURE__*/React__default.createElement(Button, {
      key: key,
      icon: icon,
      text: text,
      onClick: onClick,
      variant: variantByRole(role),
      disabled: disabled,
      style: {
        marginRight: theme.space.medium
      }
    });
  }));
};
var ActionButtons$1 = ActionButtons;

var Wrapper = styled.div.withConfig({
  displayName: "Styled__Wrapper",
  componentId: "sc-e96gmu-0"
})(["&&{padding:0;margin:0;display:inline-flex;align-items:center;}"]);

var VerticalDivider = function VerticalDivider(_a) {
  var sx = _a.sx,
    props = __rest(_a, ["sx"]);
  return /*#__PURE__*/React__default.createElement(Divider$1, Object.assign({}, props, {
    variant: "vertical",
    sx: Object.assign(Object.assign({}, sx), {
      alignSelf: 'stretch'
    })
  }));
};
var BulkActions = function BulkActions(_ref) {
  var data = _ref.data,
    selectedRows = _ref.selectedRows,
    actions = _ref.actions,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    rowIdExtractor = _ref.rowIdExtractor,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var theme = useTheme();
  var selectedData = data.filter(function (row, index) {
    return rowIdExtractor ? selectedRows[rowIdExtractor(row, index)] : selectedRows[index];
  });
  var size = useMediaQuery();
  var isLargeScreen = size === 'large' || size === 'xlarge';
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(Wrapper, {
    id: id,
    className: className,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), useCss(sx))
  }, isLargeScreen ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Typography$1.Text, null, t('Selected rows'), /*#__PURE__*/React__default.createElement(Badge$1, {
    intent: "basic",
    content: selectedData.length,
    style: {
      marginLeft: theme.space.small,
      lineHeight: 'unset'
    }
  })), /*#__PURE__*/React__default.createElement(VerticalDivider, {
    sx: {
      ml: 'small'
    }
  }), actions.map(function (_ref2) {
    var text = _ref2.text,
      icon = _ref2.icon,
      intent = _ref2.intent,
      variant = _ref2.variant,
      _onClick = _ref2.onClick,
      divider = _ref2.divider,
      key = _ref2.key;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: key
    }, divider === 'before' && /*#__PURE__*/React__default.createElement(VerticalDivider, {
      "data-test-id": "divider-left",
      sx: {
        ml: 'small'
      }
    }), /*#__PURE__*/React__default.createElement(Button, {
      variant: variant,
      text: text,
      icon: icon,
      intent: intent,
      disabled: selectedData.length === 0,
      onClick: function onClick() {
        return _onClick(selectedData);
      },
      sx: {
        ml: 'small'
      }
    }), divider === 'after' && /*#__PURE__*/React__default.createElement(VerticalDivider, {
      "data-test-id": "divider-right",
      sx: {
        ml: 'small'
      }
    }));
  })) : /*#__PURE__*/React__default.createElement(Dropdown$1, {
    open: open,
    content: /*#__PURE__*/React__default.createElement(Menu, null, actions.map(function (_ref3) {
      var text = _ref3.text,
        icon = _ref3.icon,
        intent = _ref3.intent,
        _onClick2 = _ref3.onClick,
        divider = _ref3.divider,
        key = _ref3.key;
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
        key: key
      }, divider === 'before' && /*#__PURE__*/React__default.createElement(Divider$1, {
        "data-test-id": "divider-top"
      }), /*#__PURE__*/React__default.createElement(Menu.Item, {
        text: /*#__PURE__*/React__default.createElement(Button, {
          variant: "text",
          text: text,
          icon: icon,
          intent: intent,
          sx: {
            p: 0
          }
        }),
        onClick: function onClick() {
          return _onClick2(selectedData);
        }
      }), divider === 'after' && /*#__PURE__*/React__default.createElement(Divider$1, {
        "data-test-id": "divider-bottom"
      }));
    })),
    placement: "bottom-right",
    target: /*#__PURE__*/React__default.createElement(Button, {
      variant: "text",
      intent: "primary",
      text: /*#__PURE__*/React__default.createElement(React__default.Fragment, null, "Selected rows", /*#__PURE__*/React__default.createElement(Badge$1, {
        intent: "primary",
        content: selectedData.length,
        style: {
          marginLeft: theme.space.small
        }
      })),
      rightIcon: "single-down-arrow",
      disabled: selectedData.length === 0,
      onClick: function onClick() {
        return setOpen(!open);
      },
      style: {
        display: 'inline-flex',
        alignItems: 'center',
        padding: 0
      }
    }),
    onClose: function onClose() {
      return setOpen(false);
    }
  }));
};
var BulkActions$1 = BulkActions;

var StyledDropdownButton = styled.button.withConfig({
  displayName: "StyledFilters__StyledDropdownButton",
  componentId: "sc-1bnd4cp-0"
})(["&&{margin:0;padding:", ";height:", ";border:", ";font-size:", ";font-weight:", ";line-height:", ";display:inline-flex;align-items:center;background-color:", ";cursor:pointer;position:relative;max-width:240px;margin-right:", ";margin-bottom:", ";border-radius:", ";border-color:", ";}&&:hover{z-index:1;border-color:", ";}&&{", ";}&& > ", "{padding-left:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.table.space.filterButtonPadding;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.table.sizes.filterButton;
}, function (_ref3) {
  var theme = _ref3.theme;
  return "".concat(theme.__hd__.table.borderWidths.filterButton, " solid");
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.table.fontSizes.filterButton;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.table.fontWeights.filterButton;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.table.lineHeights.filterButton;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.table.colors.filterButtonBackground;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.table.space.filterButtonMarginRight;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.table.space.filterButtonMarginBottom;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.table.radii.filterButton;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.table.colors.filterButtonBorder;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.table.colors.filterButtonHoverBorder;
}, function (_ref13) {
  var theme = _ref13.theme,
    themeActive = _ref13.themeActive;
  return themeActive ? css$2(["z-index:1;background-color:", ";"], theme.__hd__.table.colors.filterButtonActiveBackground) : css$2(["background-color:", ";"], theme.__hd__.table.colors.filterButtonBackground);
}, StyledIcon, function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.table.space.filterButtonIconPadding;
});
var StyledDropdownContent = styled.div.withConfig({
  displayName: "StyledFilters__StyledDropdownContent",
  componentId: "sc-1bnd4cp-1"
})(["&&{margin:0;padding:", ";overflow:hidden;}"], function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.table.space.filterDropdownPadding;
});
var StyledLabeledFilter = styled.div.withConfig({
  displayName: "StyledFilters__StyledLabeledFilter",
  componentId: "sc-1bnd4cp-2"
})(["&&{margin:0;padding:0;font-size:", ";font-weight:", ";color:", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.table.fontSizes.filterButton;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.table.fontWeights.filterLabel;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.table.colors.filterLabelText;
});
var FilterByWrapper = styled.span.withConfig({
  displayName: "StyledFilters__FilterByWrapper",
  componentId: "sc-1bnd4cp-3"
})(["&&{margin:0;padding:", ";padding-left:0;font-size:", ";font-weight:", ";line-height:100%;white-space:nowrap;}"], function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.table.space.filterButtonPadding;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.table.fontSizes.filterButton;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.table.fontWeights.filterBy;
});
var FiltersWrapper = styled.div.withConfig({
  displayName: "StyledFilters__FiltersWrapper",
  componentId: "sc-1bnd4cp-4"
})(["&&{margin:0;padding:0;}"]);
styled.span.withConfig({
  displayName: "StyledFilters__StyledLabel",
  componentId: "sc-1bnd4cp-5"
})(["&&{margin:0;padding:0;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;}"]);
var StyledGroupedFilterContent = styled.div.withConfig({
  displayName: "StyledFilters__StyledGroupedFilterContent",
  componentId: "sc-1bnd4cp-6"
})(["&&{margin:0;padding:0;display:flex;flex-direction:column;max-width:300px;}&& > ", ":not(:last-child){padding-bottom:", ";}"], StyledLabeledFilter, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.table.space.filterDropdownPadding;
});
var StyledLabeledFilterContent = styled.div.withConfig({
  displayName: "StyledFilters__StyledLabeledFilterContent",
  componentId: "sc-1bnd4cp-7"
})(["&&{margin:0;padding:0;padding-top:", ";}"], function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.table.space.filterLabelContentPadding;
});
var StyledFilterList = styled.div.withConfig({
  displayName: "StyledFilters__StyledFilterList",
  componentId: "sc-1bnd4cp-8"
})(["&&{margin:0;padding:0;}"]);
var StyledFiltersHeader = styled.div.withConfig({
  displayName: "StyledFilters__StyledFiltersHeader",
  componentId: "sc-1bnd4cp-9"
})(["&&{margin:0;padding:0;display:flex;justify-content:space-between;margin-bottom:", "px;}@media (min-width:", "){&&{display:none}}"], function (_ref24) {
  var theme = _ref24.theme;
  return theme.space.small;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.breakpoints.large;
});
var StyledFilterListWithAddons = styled.div.withConfig({
  displayName: "StyledFilters__StyledFilterListWithAddons",
  componentId: "sc-1bnd4cp-10"
})(["&&{margin:0;padding:0;display:flex;}@media (max-width:calc(", " - 1px)){&& > :not(", "){display:none;}}"], function (_ref26) {
  var theme = _ref26.theme;
  return theme.breakpoints.large;
}, StyledFilterList);
var StyledTagList = styled.div.withConfig({
  displayName: "StyledFilters__StyledTagList",
  componentId: "sc-1bnd4cp-11"
})(["&&{margin:0;padding:0;}"]);

var formatValue = function formatValue(value) {
  if (Array.isArray(value)) {
    return value.join(', ');
  }
  if (typeof value === 'string') return value;
  if (_typeof$1(value) === 'object') {
    return "".concat(value === null || value === void 0 ? void 0 : value.startDate, " - ").concat(value === null || value === void 0 ? void 0 : value.endDate);
  }
  return '';
};
var getDefaultValue = function getDefaultValue(value) {
  if (Array.isArray(value)) return [];
  if (typeof value === 'string') return '';
  if (_typeof$1(value) === 'object') return {};
  return value;
};
var isDefaultValue = function isDefaultValue(value) {
  if (Array.isArray(value)) return value.length === 0;
  if (typeof value === 'string') return value.length === 0;
  if (_typeof$1(value) === 'object') return Object.values(value).every(function (v) {
    return v === undefined;
  });
  return value === undefined;
};

var FiltersContext = /*#__PURE__*/createContext({
  values: {},
  onValuesChange: noop$2,
  isGrouped: false,
  selectedTagsRef: {
    current: null
  }
});
var FiltersProvider = function FiltersProvider(_ref) {
  var value = _ref.value,
    children = _ref.children;
  var onValuesChange = value.onValuesChange,
    onSave = value.onSave;
  var retypedOnValuesChange = useCallback(function (v) {
    onValuesChange(v);
  }, [onValuesChange]);
  var retypedOnSave = useCallback(function (v) {
    return onSave === null || onSave === void 0 ? void 0 : onSave(v);
  }, [onSave]);
  var providerValue = useMemo(function () {
    return Object.assign(Object.assign({}, value), {
      onValuesChange: retypedOnValuesChange,
      onSave: retypedOnSave
    });
  }, [value, retypedOnValuesChange, retypedOnSave]);
  return /*#__PURE__*/React__default.createElement(FiltersContext.Provider, {
    value: providerValue
  }, children);
};
var useFilterState = function useFilterState(key) {
  var _useContext = useContext(FiltersContext),
    values = _useContext.values,
    onValuesChange = _useContext.onValuesChange,
    onSave = _useContext.onSave;
  var value = values[key];
  var onChange = useCallback(function (newValue) {
    return onValuesChange(Object.assign(Object.assign({}, values), _defineProperty$1({}, key, newValue)));
  }, [key, values, onValuesChange]);
  var changeAndSave = useCallback(function (newValue) {
    onChange(newValue);
    onSave === null || onSave === void 0 ? void 0 : onSave(_defineProperty$1({}, key, newValue));
  }, [key, onChange, onSave]);
  return [value, onChange, changeAndSave];
};
var useChangeGroupFilter = function useChangeGroupFilter(keys) {
  var _useContext2 = useContext(FiltersContext),
    values = _useContext2.values,
    onValuesChange = _useContext2.onValuesChange,
    onSave = _useContext2.onSave;
  var getNewFilterValues = useCallback(function (newValues) {
    return keys.reduce(function (filterValuesObj, key, i) {
      return Object.assign(Object.assign({}, filterValuesObj), _defineProperty$1({}, key, newValues[i]));
    }, {});
  }, [keys]);
  var onChange = useCallback(function (newValues) {
    return onValuesChange(Object.assign(Object.assign({}, values), getNewFilterValues(newValues)));
  }, [getNewFilterValues, onValuesChange, values]);
  var changeAndSaveGroup = useCallback(function (newValues) {
    onChange(newValues);
    onSave === null || onSave === void 0 ? void 0 : onSave(getNewFilterValues(newValues));
  }, [getNewFilterValues, onChange, onSave]);
  return [changeAndSaveGroup];
};
var useDirtyCheck = function useDirtyCheck(key) {
  var _useContext3 = useContext(FiltersContext),
    values = _useContext3.values;
  var value = values[key];
  return !isDefaultValue(value);
};
var useGroupDirtyCheck = function useGroupDirtyCheck(keys) {
  var _useContext4 = useContext(FiltersContext),
    values = _useContext4.values;
  var isGroupDirty = useMemo(function () {
    return keys.reduce(function (current, key) {
      return current || !isDefaultValue(values[key]);
    }, false);
  }, [values, keys]);
  return isGroupDirty;
};
var FiltersContext$1 = FiltersContext;

var getCaretIcon = function getCaretIcon(open) {
  return open === true ? 'arrow-up' : 'arrow-down';
};
var DropdownButton = function DropdownButton(_ref) {
  var text = _ref.text,
    onClick = _ref.onClick,
    active = _ref.active,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon;
  return /*#__PURE__*/React__default.createElement(StyledDropdownButton, {
    onClick: onClick,
    themeActive: active
  }, leftIcon !== undefined ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: leftIcon,
    "data-test-id": "filter-icon",
    sx: {
      mr: 'small'
    }
  }) : null, text, rightIcon !== undefined ? /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: rightIcon,
    "data-test-id": "filter-icon"
  }) : null);
};
var FilterDropdown = function FilterDropdown(_ref2) {
  var buttonText = _ref2.buttonText,
    content = _ref2.content,
    dirty = _ref2.dirty,
    icon = _ref2.icon,
    noCaret = _ref2.noCaret,
    onClearButtonClick = _ref2.onClearButtonClick,
    dataTestId = _ref2['data-test-id'];
  var theme = useContext(ThemeContext);
  var _useContext = useContext(FiltersContext$1),
    applyButtonProps = _useContext.applyButtonProps,
    clearButtonProps = _useContext.clearButtonProps;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var onClose = useCallback(function () {
    return setOpen(false);
  }, []);
  var shouldRenderApplyButton = applyButtonProps !== undefined;
  var shouldRenderClearButton = clearButtonProps !== undefined && onClearButtonClick !== undefined;
  return /*#__PURE__*/React__default.createElement(Dropdown$1, {
    keepContentMounted: true,
    open: open,
    onClose: onClose,
    "data-test-id": dataTestId,
    content: /*#__PURE__*/React__default.createElement(StyledDropdownContent, null, content, (shouldRenderApplyButton || shouldRenderClearButton) && /*#__PURE__*/React__default.createElement(Divider$1, {
      marginY: "medium"
    }), clearButtonProps !== undefined && onClearButtonClick !== undefined && /*#__PURE__*/React__default.createElement(Button, Object.assign({
      size: "small",
      variant: "text",
      style: {
        "float": 'left'
      }
    }, clearButtonProps, {
      onClick: function onClick(e) {
        var _a;
        onClearButtonClick();
        (_a = clearButtonProps.onClick) === null || _a === void 0 ? void 0 : _a.call(clearButtonProps, e);
      }
    })), applyButtonProps !== undefined && /*#__PURE__*/React__default.createElement(Button, Object.assign({
      size: "small",
      style: {
        "float": 'right'
      }
    }, applyButtonProps, {
      onClick: function onClick(e) {
        var _a;
        onClose();
        (_a = applyButtonProps.onClick) === null || _a === void 0 ? void 0 : _a.call(applyButtonProps, e);
      }
    }))),
    target: /*#__PURE__*/React__default.createElement(DropdownButton, {
      text: buttonText,
      leftIcon: icon,
      rightIcon: noCaret === true ? undefined : getCaretIcon(open),
      onClick: function onClick() {
        return setOpen(!open);
      },
      active: dirty
    }),
    style: {
      width: theme.__hd__.table.sizes.filterDropdownWidth
    }
  });
};
var FilterDropdown$1 = FilterDropdown;

var SelectedTag = function SelectedTag(_ref) {
  var label = _ref.label,
    value = _ref.value,
    onRemove = _ref.onRemove;
  var _useContext = useContext(FiltersContext$1),
    selectedTagsRef = _useContext.selectedTagsRef;
  if (selectedTagsRef.current === null) return null;
  return /*#__PURE__*/ReactDOM__default.createPortal( /*#__PURE__*/React__default.createElement(Tag$1, {
    sx: {
      bgColor: 'violet-light-90',
      borderColor: 'violet-light-90',
      mr: 'small'
    },
    "data-test-id": "filter-value-tag-".concat(label),
    text: /*#__PURE__*/React__default.createElement("span", {
      style: {
        margin: 0,
        padding: 0
      }
    }, label !== undefined && "".concat(label, ": "), /*#__PURE__*/React__default.createElement("strong", null, value)),
    onRemove: onRemove
  }), selectedTagsRef.current);
};
var SelectedTag$1 = SelectedTag;

function LabeledFilter(_ref) {
  var label = _ref.label,
    content = _ref.content;
  return /*#__PURE__*/React__default.createElement(StyledLabeledFilter, null, label, /*#__PURE__*/React__default.createElement(StyledLabeledFilterContent, null, content));
}
var Filter = function Filter(_ref2) {
  var label = _ref2.label,
    icon = _ref2.icon,
    _ref2$noCaret = _ref2.noCaret,
    noCaret = _ref2$noCaret === void 0 ? false : _ref2$noCaret,
    filterKey = _ref2.filterKey,
    children = _ref2.children,
    defaultValue = _ref2.defaultValue,
    _ref2$formatValue = _ref2.formatValue,
    formatValue$1 = _ref2$formatValue === void 0 ? formatValue : _ref2$formatValue,
    _ref2$clearable = _ref2.clearable,
    clearable = _ref2$clearable === void 0 ? true : _ref2$clearable;
  var _useFilterState = useFilterState(filterKey),
    _useFilterState2 = _slicedToArray(_useFilterState, 3),
    value = _useFilterState2[0],
    onChange = _useFilterState2[1],
    changeAndSave = _useFilterState2[2];
  var dirty = useDirtyCheck(filterKey);
  var _useContext = useContext(FiltersContext$1),
    isGrouped = _useContext.isGrouped;
  var resetValueIfClearable = clearable ? function () {
    return changeAndSave(defaultValue !== null && defaultValue !== void 0 ? defaultValue : getDefaultValue(value));
  } : undefined;
  var content = children({
    value: value,
    onChange: onChange
  });
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, isGrouped ? /*#__PURE__*/React__default.createElement(LabeledFilter, {
    label: label,
    content: content
  }) : /*#__PURE__*/React__default.createElement(FilterDropdown$1, {
    buttonText: label,
    icon: icon,
    content: content,
    dirty: dirty,
    noCaret: noCaret,
    onClearButtonClick: resetValueIfClearable
  }), dirty && /*#__PURE__*/React__default.createElement(SelectedTag$1, {
    label: label,
    value: formatValue$1(value),
    onRemove: resetValueIfClearable
  }));
};
Filter.displayName = 'Table.Filter';
var Filter$1 = Filter;

var GroupedFilter = function GroupedFilter(_ref) {
  var label = _ref.label,
    filters = _ref.filters;
  var keys = filters.map(function (filter) {
    return filter.props.filterKey;
  });
  var dirty = useGroupDirtyCheck(keys);
  var clearableFilters = filters.filter(
  // If the default value of clearable prop of Filter component is changed, this should be updated also.
  function (filter) {
    var _a;
    return (_a = filter.props.clearable) !== null && _a !== void 0 ? _a : true;
  });
  var clearableKeys = clearableFilters.map(function (filter) {
    return filter.props.filterKey;
  });
  var _useChangeGroupFilter = useChangeGroupFilter(clearableKeys),
    _useChangeGroupFilter2 = _slicedToArray(_useChangeGroupFilter, 1),
    changeAndSaveGroup = _useChangeGroupFilter2[0];
  var _useContext = useContext(FiltersContext$1),
    values = _useContext.values;
  var resetValues = function resetValues() {
    var defaultValues = clearableFilters.map(function (filter) {
      var _filter$props = filter.props,
        filterKey = _filter$props.filterKey,
        defaultValue = _filter$props.defaultValue;
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : getDefaultValue(values[filterKey]);
    });
    changeAndSaveGroup(defaultValues);
  };
  var onGroupedClearButtonClick = clearableKeys.length > 0 ? resetValues : undefined;
  return /*#__PURE__*/React__default.createElement(FilterDropdown$1, {
    dirty: dirty,
    content: /*#__PURE__*/React__default.createElement(StyledGroupedFilterContent, null, filters),
    buttonText: label,
    onClearButtonClick: onGroupedClearButtonClick,
    "data-test-id": "grouped-filter-dropdown"
  });
};
var GroupedFilter$1 = GroupedFilter;

// The number of fully display filters
// TODO: responsively adjust this number
var FILTERS_BREAKPOINT = 4;
var Filters = function Filters(_ref) {
  var value = _ref.value,
    onChange = _ref.onChange,
    onSave = _ref.onSave,
    onReset = _ref.onReset,
    applyButtonProps = _ref.applyButtonProps,
    clearButtonProps = _ref.clearButtonProps,
    children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  useDeprecation('Table.Filters is deprecated. Please use Filters (https://design.employmenthero.com/web/Components/Filters) instead.');
  var selectedTagsRef = useRef(null);
  var childrenArray = React__default.Children.toArray(children);
  var displayedFilters = childrenArray.slice(0, FILTERS_BREAKPOINT);
  var groupedFilters = childrenArray.slice(FILTERS_BREAKPOINT);
  var baseProviderValue = useMemo(function () {
    return {
      values: value,
      onValuesChange: onChange,
      onSave: onSave,
      applyButtonProps: applyButtonProps,
      clearButtonProps: clearButtonProps,
      selectedTagsRef: selectedTagsRef
    };
  }, [value, onChange, onSave, applyButtonProps, clearButtonProps]);
  var unGroupedProviderValue = useMemo(function () {
    return Object.assign(Object.assign({}, baseProviderValue), {
      isGrouped: false
    });
  }, [baseProviderValue]);
  var groupedProviderValue = useMemo(function () {
    return Object.assign(Object.assign({}, baseProviderValue), {
      isGrouped: true
    });
  }, [baseProviderValue]);
  var filterByLabel = /*#__PURE__*/React__default.createElement(FilterByWrapper, null, /*#__PURE__*/React__default.createElement(Icon$1, {
    icon: "adjustment",
    sx: {
      mr: 'small'
    }
  }), "Filter by");
  var resetButton = onReset !== undefined && /*#__PURE__*/React__default.createElement(Button, {
    variant: "text",
    text: "Reset",
    icon: "restart",
    sx: {
      fontWeight: 'semiBold'
    },
    onClick: onReset
  });
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(FiltersProvider, {
    value: unGroupedProviderValue
  }, /*#__PURE__*/React__default.createElement(FiltersWrapper, {
    id: id,
    className: className,
    "data-test-id": dataTestId,
    style: Object.assign(Object.assign({}, style), css$1(sx))
  }, /*#__PURE__*/React__default.createElement(StyledFiltersHeader, null, filterByLabel, resetButton), /*#__PURE__*/React__default.createElement(StyledFilterListWithAddons, null, filterByLabel, /*#__PURE__*/React__default.createElement(StyledFilterList, null, displayedFilters, /*#__PURE__*/React__default.createElement(FiltersProvider, {
    value: groupedProviderValue
  }, groupedFilters.length !== 0 && /*#__PURE__*/React__default.createElement(GroupedFilter$1, {
    label: t('More'),
    filters: groupedFilters
  }))), resetButton), /*#__PURE__*/React__default.createElement(StyledTagList, {
    ref: selectedTagsRef
  })));
};
Filters.displayName = 'Table.Filters';
var OriginalFilters = Filters;

OriginalFilters.displayName = 'Table.Filters';

var RowAction = function RowAction(_ref) {
  var actions = _ref.actions,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  assert(actions.length > 0, "[RowAction] Need at least 1 action to render");
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var closeDropdown = useCallback(function () {
    setOpen(false);
  }, [setOpen]);
  var css = useCss(sx);
  if (actions.length === 1 && actions[0] !== undefined) {
    var buttonIntent = actions[0].intent === 'danger' ? 'danger' : undefined;
    return /*#__PURE__*/React__default.createElement(Button, {
      onClick: actions[0].onClick,
      icon: actions[0].icon,
      text: actions[0].text,
      intent: buttonIntent,
      variant: "text",
      className: className,
      style: Object.assign(Object.assign({}, style), {
        padding: 0
      }),
      "data-test-id": dataTestId,
      id: id
    });
  }
  var dropdownContent = /*#__PURE__*/React__default.createElement(Menu, null, actions.map(function (_ref2) {
    var divider = _ref2.divider,
      icon = _ref2.icon,
      text = _ref2.text,
      onClick = _ref2.onClick,
      intent = _ref2.intent,
      key = _ref2.key;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: key
    }, divider === 'top' && /*#__PURE__*/React__default.createElement(Divider$1, {
      "data-test-id": "divider-top"
    }), /*#__PURE__*/React__default.createElement(Menu.Item, {
      icon: icon,
      text: text,
      onClick: onClick,
      intent: intent
    }), divider === 'bottom' && /*#__PURE__*/React__default.createElement(Divider$1, {
      "data-test-id": "divider-bottom"
    }));
  }));
  return /*#__PURE__*/React__default.createElement(Dropdown$1, {
    target: /*#__PURE__*/React__default.createElement(Button.Icon, {
      icon: "more-horizontal",
      intent: "subdued-text",
      onClick: function onClick() {
        return setOpen(!open);
      },
      "data-test-id": "three-dot-button"
    }),
    content: dropdownContent,
    open: open,
    onClose: closeDropdown,
    className: className,
    style: Object.assign(Object.assign({}, style), css),
    "data-test-id": dataTestId,
    id: id
  });
};
var RowAction$1 = RowAction;

var reactTable = {exports: {}};

var reactTable_production_min = {exports: {}};

(function (module, exports) {
  !function (e, t) {
    t(exports, React__default) ;
  }(commonjsGlobal, function (e, t) {

    function n(e, t, n, o, r, i, u) {
      try {
        var l = e[i](u),
          s = l.value;
      } catch (e) {
        return void n(e);
      }
      l.done ? t(s) : Promise.resolve(s).then(o, r);
    }
    function o(e) {
      return function () {
        var t = this,
          o = arguments;
        return new Promise(function (r, i) {
          var u = e.apply(t, o);
          function l(e) {
            n(u, r, i, l, s, "next", e);
          }
          function s(e) {
            n(u, r, i, l, s, "throw", e);
          }
          l(void 0);
        });
      };
    }
    function r() {
      return (r = Object.assign || function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = arguments[t];
          for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
        }
        return e;
      }).apply(this, arguments);
    }
    function i(e, t) {
      if (null == e) return {};
      var n,
        o,
        r = {},
        i = Object.keys(e);
      for (o = 0; o < i.length; o++) n = i[o], t.indexOf(n) >= 0 || (r[n] = e[n]);
      return r;
    }
    function u(e) {
      var t = function (e, t) {
        if ("object" != typeof e || null === e) return e;
        var n = e[Symbol.toPrimitive];
        if (void 0 !== n) {
          var o = n.call(e, t || "default");
          if ("object" != typeof o) return o;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === t ? String : Number)(e);
      }(e, "string");
      return "symbol" == typeof t ? t : String(t);
    }
    t = t && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
    var l = {
        init: "init"
      },
      s = function (e) {
        var t = e.value;
        return void 0 === t ? "" : t;
      },
      a = function () {
        return t.createElement(t.Fragment, null, " ");
      },
      c = {
        Cell: s,
        width: 150,
        minWidth: 0,
        maxWidth: Number.MAX_SAFE_INTEGER
      };
    function d() {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
      return t.reduce(function (e, t) {
        var n = t.style,
          o = t.className;
        return e = r({}, e, {}, i(t, ["style", "className"])), n && (e.style = e.style ? r({}, e.style || {}, {}, n || {}) : n), o && (e.className = e.className ? e.className + " " + o : o), "" === e.className && delete e.className, e;
      }, {});
    }
    var f = function (e, t) {
        return void 0 === t && (t = {}), function (n) {
          return void 0 === n && (n = {}), [].concat(e, [n]).reduce(function (e, o) {
            return function e(t, n, o) {
              return "function" == typeof n ? e({}, n(t, o)) : Array.isArray(n) ? d.apply(void 0, [t].concat(n)) : d(t, n);
            }(e, o, r({}, t, {
              userProps: n
            }));
          }, {});
        };
      },
      p = function (e, t, n, o) {
        return void 0 === n && (n = {}), e.reduce(function (e, t) {
          return t(e, n);
        }, t);
      },
      g = function (e, t, n) {
        return void 0 === n && (n = {}), e.forEach(function (e) {
          e(t, n);
        });
      };
    function v(e, t, n, o) {
      e.findIndex(function (e) {
        return e.pluginName === n;
      });
      t.forEach(function (t) {
        e.findIndex(function (e) {
          return e.pluginName === t;
        });
      });
    }
    function m(e, t) {
      return "function" == typeof e ? e(t) : e;
    }
    function h(e) {
      var n = t.useRef();
      return n.current = e, t.useCallback(function () {
        return n.current;
      }, []);
    }
    var y = "undefined" != typeof document ? t.useLayoutEffect : t.useEffect;
    function w(e, n) {
      var o = t.useRef(!1);
      y(function () {
        o.current && e(), o.current = !0;
      }, n);
    }
    function R(e, t, n) {
      return void 0 === n && (n = {}), function (o, i) {
        void 0 === i && (i = {});
        var u = "string" == typeof o ? t[o] : o;
        if (void 0 === u) throw console.info(t), new Error("Renderer Error ☝️");
        return b(u, r({}, e, {
          column: t
        }, n, {}, i));
      };
    }
    function b(e, n) {
      return function (e) {
        return "function" == typeof e && (t = Object.getPrototypeOf(e)).prototype && t.prototype.isReactComponent;
        var t;
      }(o = e) || "function" == typeof o || function (e) {
        return "object" == typeof e && "symbol" == typeof e.$$typeof && ["react.memo", "react.forward_ref"].includes(e.$$typeof.description);
      }(o) ? t.createElement(e, n) : e;
      var o;
    }
    function S(e, t, n) {
      return void 0 === n && (n = 0), e.map(function (e) {
        return x(e = r({}, e, {
          parent: t,
          depth: n
        })), e.columns && (e.columns = S(e.columns, e, n + 1)), e;
      });
    }
    function C(e) {
      return G(e, "columns");
    }
    function x(e) {
      var t = e.id,
        n = e.accessor,
        o = e.Header;
      if ("string" == typeof n) {
        t = t || n;
        var r = n.split(".");
        n = function (e) {
          return function (e, t, n) {
            if (!t) return e;
            var o,
              r = "function" == typeof t ? t : JSON.stringify(t),
              i = E.get(r) || function () {
                var e = function (e) {
                  return function e(t, n) {
                    void 0 === n && (n = []);
                    if (Array.isArray(t)) for (var o = 0; o < t.length; o += 1) e(t[o], n);else n.push(t);
                    return n;
                  }(e).map(function (e) {
                    return String(e).replace(".", "_");
                  }).join(".").replace(W, ".").replace(O, "").split(".");
                }(t);
                return E.set(r, e), e;
              }();
            try {
              o = i.reduce(function (e, t) {
                return e[t];
              }, e);
            } catch (e) {}
            return void 0 !== o ? o : n;
          }(e, r);
        };
      }
      if (!t && "string" == typeof o && o && (t = o), !t && e.columns) throw console.error(e), new Error('A column ID (or unique "Header" value) is required!');
      if (!t) throw console.error(e), new Error("A column ID (or string accessor) is required!");
      return Object.assign(e, {
        id: t,
        accessor: n
      }), e;
    }
    function P(e, t) {
      if (!t) throw new Error();
      return Object.assign(e, r({
        Header: a,
        Footer: a
      }, c, {}, t, {}, e)), Object.assign(e, {
        originalWidth: e.width
      }), e;
    }
    function B(e, t, n) {
      void 0 === n && (n = function () {
        return {};
      });
      for (var o = [], i = e, u = 0, l = function () {
          return u++;
        }, s = function () {
          var e = {
              headers: []
            },
            u = [],
            s = i.some(function (e) {
              return e.parent;
            });
          i.forEach(function (o) {
            var i,
              a = [].concat(u).reverse()[0];
            if (s) {
              if (o.parent) i = r({}, o.parent, {
                originalId: o.parent.id,
                id: o.parent.id + "_" + l(),
                headers: [o]
              }, n(o));else i = P(r({
                originalId: o.id + "_placeholder",
                id: o.id + "_placeholder_" + l(),
                placeholderOf: o,
                headers: [o]
              }, n(o)), t);
              a && a.originalId === i.originalId ? a.headers.push(o) : u.push(i);
            }
            e.headers.push(o);
          }), o.push(e), i = u;
        }; i.length;) s();
      return o.reverse();
    }
    var E = new Map();
    function I() {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
      for (var o = 0; o < t.length; o += 1) if (void 0 !== t[o]) return t[o];
    }
    function F(e) {
      if ("function" == typeof e) return e;
    }
    function G(e, t) {
      var n = [];
      return function e(o) {
        o.forEach(function (o) {
          o[t] ? e(o[t]) : n.push(o);
        });
      }(e), n;
    }
    function A(e, t) {
      var n = t.manualExpandedKey,
        o = t.expanded,
        r = t.expandSubRows,
        i = void 0 === r || r,
        u = [];
      return e.forEach(function (e) {
        return function e(t, r) {
          void 0 === r && (r = !0), t.isExpanded = t.original && t.original[n] || o[t.id], t.canExpand = t.subRows && !!t.subRows.length, r && u.push(t), t.subRows && t.subRows.length && t.isExpanded && t.subRows.forEach(function (t) {
            return e(t, i);
          });
        }(e);
      }), u;
    }
    function k(e, t, n) {
      return F(e) || t[e] || n[e] || n.text;
    }
    function H(e, t, n) {
      return e ? e(t, n) : void 0 === t;
    }
    function T() {
      throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.");
    }
    var z = null;
    var W = /\[/g,
      O = /\]/g;
    var M = function (e) {
        return r({
          role: "table"
        }, e);
      },
      j = function (e) {
        return r({
          role: "rowgroup"
        }, e);
      },
      N = function (e, t) {
        var n = t.column;
        return r({
          key: "header_" + n.id,
          colSpan: n.totalVisibleHeaderCount,
          role: "columnheader"
        }, e);
      },
      D = function (e, t) {
        var n = t.column;
        return r({
          key: "footer_" + n.id,
          colSpan: n.totalVisibleHeaderCount
        }, e);
      },
      L = function (e, t) {
        return r({
          key: "headerGroup_" + t.index,
          role: "row"
        }, e);
      },
      V = function (e, t) {
        return r({
          key: "footerGroup_" + t.index
        }, e);
      },
      _ = function (e, t) {
        return r({
          key: "row_" + t.row.id,
          role: "row"
        }, e);
      },
      X = function (e, t) {
        var n = t.cell;
        return r({
          key: "cell_" + n.row.id + "_" + n.column.id,
          role: "cell"
        }, e);
      };
    function q() {
      return {
        useOptions: [],
        stateReducers: [],
        useControlledState: [],
        columns: [],
        columnsDeps: [],
        allColumns: [],
        allColumnsDeps: [],
        accessValue: [],
        materializedColumns: [],
        materializedColumnsDeps: [],
        useInstanceAfterData: [],
        visibleColumns: [],
        visibleColumnsDeps: [],
        headerGroups: [],
        headerGroupsDeps: [],
        useInstanceBeforeDimensions: [],
        useInstance: [],
        prepareRow: [],
        getTableProps: [M],
        getTableBodyProps: [j],
        getHeaderGroupProps: [L],
        getFooterGroupProps: [V],
        getHeaderProps: [N],
        getFooterProps: [D],
        getRowProps: [_],
        getCellProps: [X],
        useFinalInstance: []
      };
    }
    l.resetHiddenColumns = "resetHiddenColumns", l.toggleHideColumn = "toggleHideColumn", l.setHiddenColumns = "setHiddenColumns", l.toggleHideAllColumns = "toggleHideAllColumns";
    var K = function (e) {
      e.getToggleHiddenProps = [U], e.getToggleHideAllColumnsProps = [$], e.stateReducers.push(J), e.useInstanceBeforeDimensions.push(Y), e.headerGroupsDeps.push(function (e, t) {
        var n = t.instance;
        return [].concat(e, [n.state.hiddenColumns]);
      }), e.useInstance.push(Q);
    };
    K.pluginName = "useColumnVisibility";
    var U = function (e, t) {
        var n = t.column;
        return [e, {
          onChange: function (e) {
            n.toggleHidden(!e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: n.isVisible,
          title: "Toggle Column Visible"
        }];
      },
      $ = function (e, t) {
        var n = t.instance;
        return [e, {
          onChange: function (e) {
            n.toggleHideAllColumns(!e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: !n.allColumnsHidden && !n.state.hiddenColumns.length,
          title: "Toggle All Columns Hidden",
          indeterminate: !n.allColumnsHidden && n.state.hiddenColumns.length
        }];
      };
    function J(e, t, n, o) {
      if (t.type === l.init) return r({
        hiddenColumns: []
      }, e);
      if (t.type === l.resetHiddenColumns) return r({}, e, {
        hiddenColumns: o.initialState.hiddenColumns || []
      });
      if (t.type === l.toggleHideColumn) {
        var i = (void 0 !== t.value ? t.value : !e.hiddenColumns.includes(t.columnId)) ? [].concat(e.hiddenColumns, [t.columnId]) : e.hiddenColumns.filter(function (e) {
          return e !== t.columnId;
        });
        return r({}, e, {
          hiddenColumns: i
        });
      }
      return t.type === l.setHiddenColumns ? r({}, e, {
        hiddenColumns: m(t.value, e.hiddenColumns)
      }) : t.type === l.toggleHideAllColumns ? r({}, e, {
        hiddenColumns: (void 0 !== t.value ? t.value : !e.hiddenColumns.length) ? o.allColumns.map(function (e) {
          return e.id;
        }) : []
      }) : void 0;
    }
    function Y(e) {
      var n = e.headers,
        o = e.state.hiddenColumns;
      t.useRef(!1).current;
      var r = 0;
      n.forEach(function (e) {
        return r += function e(t, n) {
          t.isVisible = n && !o.includes(t.id);
          var r = 0;
          return t.headers && t.headers.length ? t.headers.forEach(function (n) {
            return r += e(n, t.isVisible);
          }) : r = t.isVisible ? 1 : 0, t.totalVisibleHeaderCount = r, r;
        }(e, !0);
      });
    }
    function Q(e) {
      var n = e.columns,
        o = e.flatHeaders,
        r = e.dispatch,
        i = e.allColumns,
        u = e.getHooks,
        s = e.state.hiddenColumns,
        a = e.autoResetHiddenColumns,
        c = void 0 === a || a,
        d = h(e),
        p = i.length === s.length,
        g = t.useCallback(function (e, t) {
          return r({
            type: l.toggleHideColumn,
            columnId: e,
            value: t
          });
        }, [r]),
        v = t.useCallback(function (e) {
          return r({
            type: l.setHiddenColumns,
            value: e
          });
        }, [r]),
        m = t.useCallback(function (e) {
          return r({
            type: l.toggleHideAllColumns,
            value: e
          });
        }, [r]),
        y = f(u().getToggleHideAllColumnsProps, {
          instance: d()
        });
      o.forEach(function (e) {
        e.toggleHidden = function (t) {
          r({
            type: l.toggleHideColumn,
            columnId: e.id,
            value: t
          });
        }, e.getToggleHiddenProps = f(u().getToggleHiddenProps, {
          instance: d(),
          column: e
        });
      });
      var R = h(c);
      w(function () {
        R() && r({
          type: l.resetHiddenColumns
        });
      }, [r, n]), Object.assign(e, {
        allColumnsHidden: p,
        toggleHideColumn: g,
        setHiddenColumns: v,
        toggleHideAllColumns: m,
        getToggleHideAllColumnsProps: y
      });
    }
    var Z = {},
      ee = {},
      te = function (e, t, n) {
        return e;
      },
      ne = function (e, t) {
        return e.subRows || [];
      },
      oe = function (e, t, n) {
        return "" + (n ? [n.id, t].join(".") : t);
      },
      re = function (e) {
        return e;
      };
    function ie(e) {
      var t = e.initialState,
        n = void 0 === t ? Z : t,
        o = e.defaultColumn,
        u = void 0 === o ? ee : o,
        l = e.getSubRows,
        s = void 0 === l ? ne : l,
        a = e.getRowId,
        c = void 0 === a ? oe : a,
        d = e.stateReducer,
        f = void 0 === d ? te : d,
        p = e.useControlledState,
        g = void 0 === p ? re : p;
      return r({}, i(e, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]), {
        initialState: n,
        defaultColumn: u,
        getSubRows: s,
        getRowId: c,
        stateReducer: f,
        useControlledState: g
      });
    }
    function ue(e, t) {
      void 0 === t && (t = 0);
      var n = 0,
        o = 0,
        r = 0,
        i = 0;
      return e.forEach(function (e) {
        var u = e.headers;
        if (e.totalLeft = t, u && u.length) {
          var l = ue(u, t),
            s = l[0],
            a = l[1],
            c = l[2],
            d = l[3];
          e.totalMinWidth = s, e.totalWidth = a, e.totalMaxWidth = c, e.totalFlexWidth = d;
        } else e.totalMinWidth = e.minWidth, e.totalWidth = Math.min(Math.max(e.minWidth, e.width), e.maxWidth), e.totalMaxWidth = e.maxWidth, e.totalFlexWidth = e.canResize ? e.totalWidth : 0;
        e.isVisible && (t += e.totalWidth, n += e.totalMinWidth, o += e.totalWidth, r += e.totalMaxWidth, i += e.totalFlexWidth);
      }), [n, o, r, i];
    }
    function le(e) {
      var t = e.data,
        n = e.rows,
        o = e.flatRows,
        r = e.rowsById,
        i = e.column,
        u = e.getRowId,
        l = e.getSubRows,
        s = e.accessValueHooks,
        a = e.getInstance;
      t.forEach(function (e, t) {
        return function e(t, n, c, d, f) {
          void 0 === c && (c = 0);
          var g = t,
            v = u(t, n, d),
            m = r[v];
          if (m) m.subRows && m.originalSubRows.forEach(function (t, n) {
            return e(t, n, c + 1, m);
          });else if ((m = {
            id: v,
            original: g,
            index: n,
            depth: c,
            cells: [{}]
          }).cells.map = T, m.cells.filter = T, m.cells.forEach = T, m.cells[0].getCellProps = T, m.values = {}, f.push(m), o.push(m), r[v] = m, m.originalSubRows = l(t, n), m.originalSubRows) {
            var h = [];
            m.originalSubRows.forEach(function (t, n) {
              return e(t, n, c + 1, m, h);
            }), m.subRows = h;
          }
          i.accessor && (m.values[i.id] = i.accessor(t, n, m)), m.values[i.id] = p(s, m.values[i.id], {
            row: m,
            column: i,
            instance: a()
          });
        }(e, t, 0, void 0, n);
      });
    }
    l.resetExpanded = "resetExpanded", l.toggleRowExpanded = "toggleRowExpanded", l.toggleAllRowsExpanded = "toggleAllRowsExpanded";
    var se = function (e) {
      e.getToggleAllRowsExpandedProps = [ae], e.getToggleRowExpandedProps = [ce], e.stateReducers.push(de), e.useInstance.push(fe), e.prepareRow.push(pe);
    };
    se.pluginName = "useExpanded";
    var ae = function (e, t) {
        var n = t.instance;
        return [e, {
          onClick: function (e) {
            n.toggleAllRowsExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle All Rows Expanded"
        }];
      },
      ce = function (e, t) {
        var n = t.row;
        return [e, {
          onClick: function () {
            n.toggleRowExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle Row Expanded"
        }];
      };
    function de(e, t, n, o) {
      if (t.type === l.init) return r({
        expanded: {}
      }, e);
      if (t.type === l.resetExpanded) return r({}, e, {
        expanded: o.initialState.expanded || {}
      });
      if (t.type === l.toggleAllRowsExpanded) {
        var s = t.value,
          a = o.isAllRowsExpanded,
          c = o.rowsById;
        if (void 0 !== s ? s : !a) {
          var d = {};
          return Object.keys(c).forEach(function (e) {
            d[e] = !0;
          }), r({}, e, {
            expanded: d
          });
        }
        return r({}, e, {
          expanded: {}
        });
      }
      if (t.type === l.toggleRowExpanded) {
        var f,
          p = t.id,
          g = t.value,
          v = e.expanded[p],
          m = void 0 !== g ? g : !v;
        if (!v && m) return r({}, e, {
          expanded: r({}, e.expanded, (f = {}, f[p] = !0, f))
        });
        if (v && !m) {
          var h = e.expanded;
          h[p];
          return r({}, e, {
            expanded: i(h, [p].map(u))
          });
        }
        return e;
      }
    }
    function fe(e) {
      var n = e.data,
        o = e.rows,
        r = e.rowsById,
        i = e.manualExpandedKey,
        u = void 0 === i ? "expanded" : i,
        s = e.paginateExpandedRows,
        a = void 0 === s || s,
        c = e.expandSubRows,
        d = void 0 === c || c,
        p = e.autoResetExpanded,
        g = void 0 === p || p,
        m = e.getHooks,
        y = e.plugins,
        R = e.state.expanded,
        b = e.dispatch;
      v(y, ["useSortBy", "useGroupBy", "usePivotColumns", "useGlobalFilter"], "useExpanded");
      var S = h(g),
        C = Boolean(Object.keys(r).length && Object.keys(R).length);
      C && Object.keys(r).some(function (e) {
        return !R[e];
      }) && (C = !1), w(function () {
        S() && b({
          type: l.resetExpanded
        });
      }, [b, n]);
      var x = t.useCallback(function (e, t) {
          b({
            type: l.toggleRowExpanded,
            id: e,
            value: t
          });
        }, [b]),
        P = t.useCallback(function (e) {
          return b({
            type: l.toggleAllRowsExpanded,
            value: e
          });
        }, [b]),
        B = t.useMemo(function () {
          return a ? A(o, {
            manualExpandedKey: u,
            expanded: R,
            expandSubRows: d
          }) : o;
        }, [a, o, u, R, d]),
        E = t.useMemo(function () {
          return function (e) {
            var t = 0;
            return Object.keys(e).forEach(function (e) {
              var n = e.split(".");
              t = Math.max(t, n.length);
            }), t;
          }(R);
        }, [R]),
        I = h(e),
        F = f(m().getToggleAllRowsExpandedProps, {
          instance: I()
        });
      Object.assign(e, {
        preExpandedRows: o,
        expandedRows: B,
        rows: B,
        expandedDepth: E,
        isAllRowsExpanded: C,
        toggleRowExpanded: x,
        toggleAllRowsExpanded: P,
        getToggleAllRowsExpandedProps: F
      });
    }
    function pe(e, t) {
      var n = t.instance.getHooks,
        o = t.instance;
      e.toggleRowExpanded = function (t) {
        return o.toggleRowExpanded(e.id, t);
      }, e.getToggleRowExpandedProps = f(n().getToggleRowExpandedProps, {
        instance: o,
        row: e
      });
    }
    var ge = function (e, t, n) {
      return e = e.filter(function (e) {
        return t.some(function (t) {
          var o = e.values[t];
          return String(o).toLowerCase().includes(String(n).toLowerCase());
        });
      });
    };
    ge.autoRemove = function (e) {
      return !e;
    };
    var ve = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          var o = e.values[t];
          return void 0 === o || String(o).toLowerCase() === String(n).toLowerCase();
        });
      });
    };
    ve.autoRemove = function (e) {
      return !e;
    };
    var me = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          var o = e.values[t];
          return void 0 === o || String(o) === String(n);
        });
      });
    };
    me.autoRemove = function (e) {
      return !e;
    };
    var he = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          return e.values[t].includes(n);
        });
      });
    };
    he.autoRemove = function (e) {
      return !e || !e.length;
    };
    var ye = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          var o = e.values[t];
          return o && o.length && n.every(function (e) {
            return o.includes(e);
          });
        });
      });
    };
    ye.autoRemove = function (e) {
      return !e || !e.length;
    };
    var we = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          var o = e.values[t];
          return o && o.length && n.some(function (e) {
            return o.includes(e);
          });
        });
      });
    };
    we.autoRemove = function (e) {
      return !e || !e.length;
    };
    var Re = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          var o = e.values[t];
          return n.includes(o);
        });
      });
    };
    Re.autoRemove = function (e) {
      return !e || !e.length;
    };
    var be = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          return e.values[t] === n;
        });
      });
    };
    be.autoRemove = function (e) {
      return void 0 === e;
    };
    var Se = function (e, t, n) {
      return e.filter(function (e) {
        return t.some(function (t) {
          return e.values[t] == n;
        });
      });
    };
    Se.autoRemove = function (e) {
      return null == e;
    };
    var Ce = function (e, t, n) {
      var o = n || [],
        r = o[0],
        i = o[1];
      if ((r = "number" == typeof r ? r : -1 / 0) > (i = "number" == typeof i ? i : 1 / 0)) {
        var u = r;
        r = i, i = u;
      }
      return e.filter(function (e) {
        return t.some(function (t) {
          var n = e.values[t];
          return n >= r && n <= i;
        });
      });
    };
    Ce.autoRemove = function (e) {
      return !e || "number" != typeof e[0] && "number" != typeof e[1];
    };
    var xe = Object.freeze({
      __proto__: null,
      text: ge,
      exactText: ve,
      exactTextCase: me,
      includes: he,
      includesAll: ye,
      includesSome: we,
      includesValue: Re,
      exact: be,
      equals: Se,
      between: Ce
    });
    l.resetFilters = "resetFilters", l.setFilter = "setFilter", l.setAllFilters = "setAllFilters";
    var Pe = function (e) {
      e.stateReducers.push(Be), e.useInstance.push(Ee);
    };
    function Be(e, t, n, o) {
      if (t.type === l.init) return r({
        filters: []
      }, e);
      if (t.type === l.resetFilters) return r({}, e, {
        filters: o.initialState.filters || []
      });
      if (t.type === l.setFilter) {
        var i = t.columnId,
          u = t.filterValue,
          s = o.allColumns,
          a = o.filterTypes,
          c = s.find(function (e) {
            return e.id === i;
          });
        if (!c) throw new Error("React-Table: Could not find a column with id: " + i);
        var d = k(c.filter, a || {}, xe),
          f = e.filters.find(function (e) {
            return e.id === i;
          }),
          p = m(u, f && f.value);
        return H(d.autoRemove, p, c) ? r({}, e, {
          filters: e.filters.filter(function (e) {
            return e.id !== i;
          })
        }) : r({}, e, f ? {
          filters: e.filters.map(function (e) {
            return e.id === i ? {
              id: i,
              value: p
            } : e;
          })
        } : {
          filters: [].concat(e.filters, [{
            id: i,
            value: p
          }])
        });
      }
      if (t.type === l.setAllFilters) {
        var g = t.filters,
          v = o.allColumns,
          h = o.filterTypes;
        return r({}, e, {
          filters: m(g, e.filters).filter(function (e) {
            var t = v.find(function (t) {
              return t.id === e.id;
            });
            return !H(k(t.filter, h || {}, xe).autoRemove, e.value, t);
          })
        });
      }
    }
    function Ee(e) {
      var n = e.data,
        o = e.rows,
        r = e.flatRows,
        i = e.rowsById,
        u = e.allColumns,
        s = e.filterTypes,
        a = e.manualFilters,
        c = e.defaultCanFilter,
        d = void 0 !== c && c,
        f = e.disableFilters,
        p = e.state.filters,
        g = e.dispatch,
        v = e.autoResetFilters,
        m = void 0 === v || v,
        y = t.useCallback(function (e, t) {
          g({
            type: l.setFilter,
            columnId: e,
            filterValue: t
          });
        }, [g]),
        R = t.useCallback(function (e) {
          g({
            type: l.setAllFilters,
            filters: e
          });
        }, [g]);
      u.forEach(function (e) {
        var t = e.id,
          n = e.accessor,
          o = e.defaultCanFilter,
          r = e.disableFilters;
        e.canFilter = n ? I(!0 !== r && void 0, !0 !== f && void 0, !0) : I(o, d, !1), e.setFilter = function (t) {
          return y(e.id, t);
        };
        var i = p.find(function (e) {
          return e.id === t;
        });
        e.filterValue = i && i.value;
      });
      var b = t.useMemo(function () {
          if (a || !p.length) return [o, r, i];
          var e = [],
            t = {};
          return [function n(o, r) {
            void 0 === r && (r = 0);
            var i = o;
            return (i = p.reduce(function (e, t) {
              var n = t.id,
                o = t.value,
                i = u.find(function (e) {
                  return e.id === n;
                });
              if (!i) return e;
              0 === r && (i.preFilteredRows = e);
              var l = k(i.filter, s || {}, xe);
              return l ? (i.filteredRows = l(e, [n], o), i.filteredRows) : (console.warn("Could not find a valid 'column.filter' for column with the ID: " + i.id + "."), e);
            }, o)).forEach(function (o) {
              e.push(o), t[o.id] = o, o.subRows && (o.subRows = o.subRows && o.subRows.length > 0 ? n(o.subRows, r + 1) : o.subRows);
            }), i;
          }(o), e, t];
        }, [a, p, o, r, i, u, s]),
        S = b[0],
        C = b[1],
        x = b[2];
      t.useMemo(function () {
        u.filter(function (e) {
          return !p.find(function (t) {
            return t.id === e.id;
          });
        }).forEach(function (e) {
          e.preFilteredRows = S, e.filteredRows = S;
        });
      }, [S, p, u]);
      var P = h(m);
      w(function () {
        P() && g({
          type: l.resetFilters
        });
      }, [g, a ? null : n]), Object.assign(e, {
        preFilteredRows: o,
        preFilteredFlatRows: r,
        preFilteredRowsById: i,
        filteredRows: S,
        filteredFlatRows: C,
        filteredRowsById: x,
        rows: S,
        flatRows: C,
        rowsById: x,
        setFilter: y,
        setAllFilters: R
      });
    }
    Pe.pluginName = "useFilters", l.resetGlobalFilter = "resetGlobalFilter", l.setGlobalFilter = "setGlobalFilter";
    var Ie = function (e) {
      e.stateReducers.push(Fe), e.useInstance.push(Ge);
    };
    function Fe(e, t, n, o) {
      if (t.type === l.resetGlobalFilter) return r({}, e, {
        globalFilter: o.initialState.globalFilter || void 0
      });
      if (t.type === l.setGlobalFilter) {
        var u = t.filterValue,
          s = o.userFilterTypes,
          a = k(o.globalFilter, s || {}, xe),
          c = m(u, e.globalFilter);
        if (H(a.autoRemove, c)) {
          e.globalFilter;
          return i(e, ["globalFilter"]);
        }
        return r({}, e, {
          globalFilter: c
        });
      }
    }
    function Ge(e) {
      var n = e.data,
        o = e.rows,
        r = e.flatRows,
        i = e.rowsById,
        u = e.allColumns,
        s = e.filterTypes,
        a = e.globalFilter,
        c = e.manualGlobalFilter,
        d = e.state.globalFilter,
        f = e.dispatch,
        p = e.autoResetGlobalFilter,
        g = void 0 === p || p,
        v = e.disableGlobalFilter,
        m = t.useCallback(function (e) {
          f({
            type: l.setGlobalFilter,
            filterValue: e
          });
        }, [f]),
        y = t.useMemo(function () {
          if (c || void 0 === d) return [o, r, i];
          var e = [],
            t = {},
            n = k(a, s || {}, xe);
          if (!n) return console.warn("Could not find a valid 'globalFilter' option."), o;
          u.forEach(function (e) {
            var t = e.disableGlobalFilter;
            e.canFilter = I(!0 !== t && void 0, !0 !== v && void 0, !0);
          });
          var l = u.filter(function (e) {
            return !0 === e.canFilter;
          });
          return [function o(r) {
            return (r = n(r, l.map(function (e) {
              return e.id;
            }), d)).forEach(function (n) {
              e.push(n), t[n.id] = n, n.subRows = n.subRows && n.subRows.length ? o(n.subRows) : n.subRows;
            }), r;
          }(o), e, t];
        }, [c, d, a, s, u, o, r, i, v]),
        R = y[0],
        b = y[1],
        S = y[2],
        C = h(g);
      w(function () {
        C() && f({
          type: l.resetGlobalFilter
        });
      }, [f, c ? null : n]), Object.assign(e, {
        preGlobalFilteredRows: o,
        preGlobalFilteredFlatRows: r,
        preGlobalFilteredRowsById: i,
        globalFilteredRows: R,
        globalFilteredFlatRows: b,
        globalFilteredRowsById: S,
        rows: R,
        flatRows: b,
        rowsById: S,
        setGlobalFilter: m,
        disableGlobalFilter: v
      });
    }
    function Ae(e, t) {
      return t.reduce(function (e, t) {
        return e + ("number" == typeof t ? t : 0);
      }, 0);
    }
    Ie.pluginName = "useGlobalFilter";
    var ke = Object.freeze({
        __proto__: null,
        sum: Ae,
        min: function (e) {
          var t = e[0] || 0;
          return e.forEach(function (e) {
            "number" == typeof e && (t = Math.min(t, e));
          }), t;
        },
        max: function (e) {
          var t = e[0] || 0;
          return e.forEach(function (e) {
            "number" == typeof e && (t = Math.max(t, e));
          }), t;
        },
        minMax: function (e) {
          var t = e[0] || 0,
            n = e[0] || 0;
          return e.forEach(function (e) {
            "number" == typeof e && (t = Math.min(t, e), n = Math.max(n, e));
          }), t + ".." + n;
        },
        average: function (e) {
          return Ae(0, e) / e.length;
        },
        median: function (e) {
          if (!e.length) return null;
          var t = Math.floor(e.length / 2),
            n = [].concat(e).sort(function (e, t) {
              return e - t;
            });
          return e.length % 2 != 0 ? n[t] : (n[t - 1] + n[t]) / 2;
        },
        unique: function (e) {
          return Array.from(new Set(e).values());
        },
        uniqueCount: function (e) {
          return new Set(e).size;
        },
        count: function (e) {
          return e.length;
        }
      }),
      He = [],
      Te = {};
    l.resetGroupBy = "resetGroupBy", l.setGroupBy = "setGroupBy", l.toggleGroupBy = "toggleGroupBy";
    var ze = function (e) {
      e.getGroupByToggleProps = [We], e.stateReducers.push(Oe), e.visibleColumnsDeps.push(function (e, t) {
        var n = t.instance;
        return [].concat(e, [n.state.groupBy]);
      }), e.visibleColumns.push(Me), e.useInstance.push(Ne), e.prepareRow.push(De);
    };
    ze.pluginName = "useGroupBy";
    var We = function (e, t) {
      var n = t.header;
      return [e, {
        onClick: n.canGroupBy ? function (e) {
          e.persist(), n.toggleGroupBy();
        } : void 0,
        style: {
          cursor: n.canGroupBy ? "pointer" : void 0
        },
        title: "Toggle GroupBy"
      }];
    };
    function Oe(e, t, n, o) {
      if (t.type === l.init) return r({
        groupBy: []
      }, e);
      if (t.type === l.resetGroupBy) return r({}, e, {
        groupBy: o.initialState.groupBy || []
      });
      if (t.type === l.setGroupBy) return r({}, e, {
        groupBy: t.value
      });
      if (t.type === l.toggleGroupBy) {
        var i = t.columnId,
          u = t.value,
          s = void 0 !== u ? u : !e.groupBy.includes(i);
        return r({}, e, s ? {
          groupBy: [].concat(e.groupBy, [i])
        } : {
          groupBy: e.groupBy.filter(function (e) {
            return e !== i;
          })
        });
      }
    }
    function Me(e, t) {
      var n = t.instance.state.groupBy,
        o = n.map(function (t) {
          return e.find(function (e) {
            return e.id === t;
          });
        }).filter(Boolean),
        r = e.filter(function (e) {
          return !n.includes(e.id);
        });
      return (e = [].concat(o, r)).forEach(function (e) {
        e.isGrouped = n.includes(e.id), e.groupedIndex = n.indexOf(e.id);
      }), e;
    }
    var je = {};
    function Ne(e) {
      var n = e.data,
        o = e.rows,
        r = e.flatRows,
        i = e.rowsById,
        u = e.allColumns,
        s = e.flatHeaders,
        a = e.groupByFn,
        c = void 0 === a ? Le : a,
        d = e.manualGroupBy,
        p = e.aggregations,
        g = void 0 === p ? je : p,
        m = e.plugins,
        y = e.state.groupBy,
        R = e.dispatch,
        b = e.autoResetGroupBy,
        S = void 0 === b || b,
        C = e.disableGroupBy,
        x = e.defaultCanGroupBy,
        P = e.getHooks;
      v(m, ["useColumnOrder", "useFilters"], "useGroupBy");
      var B = h(e);
      u.forEach(function (t) {
        var n = t.accessor,
          o = t.defaultGroupBy,
          r = t.disableGroupBy;
        t.canGroupBy = n ? I(t.canGroupBy, !0 !== r && void 0, !0 !== C && void 0, !0) : I(t.canGroupBy, o, x, !1), t.canGroupBy && (t.toggleGroupBy = function () {
          return e.toggleGroupBy(t.id);
        }), t.Aggregated = t.Aggregated || t.Cell;
      });
      var E = t.useCallback(function (e, t) {
          R({
            type: l.toggleGroupBy,
            columnId: e,
            value: t
          });
        }, [R]),
        F = t.useCallback(function (e) {
          R({
            type: l.setGroupBy,
            value: e
          });
        }, [R]);
      s.forEach(function (e) {
        e.getGroupByToggleProps = f(P().getGroupByToggleProps, {
          instance: B(),
          header: e
        });
      });
      var A = t.useMemo(function () {
          if (d || !y.length) return [o, r, i, He, Te, r, i];
          var e = y.filter(function (e) {
              return u.find(function (t) {
                return t.id === e;
              });
            }),
            t = [],
            n = {},
            l = [],
            s = {},
            a = [],
            f = {},
            p = function o(r, i, d) {
              if (void 0 === i && (i = 0), i === e.length) return r;
              var p = e[i],
                v = c(r, p);
              return Object.entries(v).map(function (r, c) {
                var v = r[0],
                  m = r[1],
                  h = p + ":" + v,
                  y = o(m, i + 1, h = d ? d + ">" + h : h),
                  w = i ? G(m, "leafRows") : m,
                  R = function (t, n, o) {
                    var r = {};
                    return u.forEach(function (i) {
                      if (e.includes(i.id)) r[i.id] = n[0] ? n[0].values[i.id] : null;else {
                        var u = "function" == typeof i.aggregate ? i.aggregate : g[i.aggregate] || ke[i.aggregate];
                        if (u) {
                          var l = n.map(function (e) {
                              return e.values[i.id];
                            }),
                            s = t.map(function (e) {
                              var t = e.values[i.id];
                              if (!o && i.aggregateValue) {
                                var n = "function" == typeof i.aggregateValue ? i.aggregateValue : g[i.aggregateValue] || ke[i.aggregateValue];
                                if (!n) throw console.info({
                                  column: i
                                }), new Error("React Table: Invalid column.aggregateValue option for column listed above");
                                t = n(t, e, i);
                              }
                              return t;
                            });
                          r[i.id] = u(s, l);
                        } else {
                          if (i.aggregate) throw console.info({
                            column: i
                          }), new Error("React Table: Invalid column.aggregate option for column listed above");
                          r[i.id] = null;
                        }
                      }
                    }), r;
                  }(w, m, i),
                  b = {
                    id: h,
                    isGrouped: !0,
                    groupByID: p,
                    groupByVal: v,
                    values: R,
                    subRows: y,
                    leafRows: w,
                    depth: i,
                    index: c
                  };
                return y.forEach(function (e) {
                  t.push(e), n[e.id] = e, e.isGrouped ? (l.push(e), s[e.id] = e) : (a.push(e), f[e.id] = e);
                }), b;
              });
            }(o);
          return p.forEach(function (e) {
            t.push(e), n[e.id] = e, e.isGrouped ? (l.push(e), s[e.id] = e) : (a.push(e), f[e.id] = e);
          }), [p, t, n, l, s, a, f];
        }, [d, y, o, r, i, u, g, c]),
        k = A[0],
        H = A[1],
        T = A[2],
        z = A[3],
        W = A[4],
        O = A[5],
        M = A[6],
        j = h(S);
      w(function () {
        j() && R({
          type: l.resetGroupBy
        });
      }, [R, d ? null : n]), Object.assign(e, {
        preGroupedRows: o,
        preGroupedFlatRow: r,
        preGroupedRowsById: i,
        groupedRows: k,
        groupedFlatRows: H,
        groupedRowsById: T,
        onlyGroupedFlatRows: z,
        onlyGroupedRowsById: W,
        nonGroupedFlatRows: O,
        nonGroupedRowsById: M,
        rows: k,
        flatRows: H,
        rowsById: T,
        toggleGroupBy: E,
        setGroupBy: F
      });
    }
    function De(e) {
      e.allCells.forEach(function (t) {
        var n;
        t.isGrouped = t.column.isGrouped && t.column.id === e.groupByID, t.isPlaceholder = !t.isGrouped && t.column.isGrouped, t.isAggregated = !t.isGrouped && !t.isPlaceholder && (null == (n = e.subRows) ? void 0 : n.length);
      });
    }
    function Le(e, t) {
      return e.reduce(function (e, n, o) {
        var r = "" + n.values[t];
        return e[r] = Array.isArray(e[r]) ? e[r] : [], e[r].push(n), e;
      }, {});
    }
    var Ve = /([0-9]+)/gm;
    function _e(e, t) {
      return e === t ? 0 : e > t ? 1 : -1;
    }
    function Xe(e, t) {
      return e.values[t];
    }
    function qe(e) {
      return "number" == typeof e ? isNaN(e) || e === 1 / 0 || e === -1 / 0 ? "" : String(e) : "string" == typeof e ? e : "";
    }
    var Ke = Object.freeze({
      __proto__: null,
      alphanumeric: function (e, t, n) {
        var o = Xe(e, n),
          r = Xe(t, n);
        for (o = qe(o), r = qe(r), o = o.split(Ve).filter(Boolean), r = r.split(Ve).filter(Boolean); o.length && r.length;) {
          var i = o.shift(),
            u = r.shift(),
            l = parseInt(i, 10),
            s = parseInt(u, 10),
            a = [l, s].sort();
          if (isNaN(a[0])) {
            if (i > u) return 1;
            if (u > i) return -1;
          } else {
            if (isNaN(a[1])) return isNaN(l) ? -1 : 1;
            if (l > s) return 1;
            if (s > l) return -1;
          }
        }
        return o.length - r.length;
      },
      datetime: function (e, t, n) {
        var o = Xe(e, n),
          r = Xe(t, n);
        return _e(o = o.getTime(), r = r.getTime());
      },
      basic: function (e, t, n) {
        return _e(Xe(e, n), Xe(t, n));
      }
    });
    l.resetSortBy = "resetSortBy", l.setSortBy = "setSortBy", l.toggleSortBy = "toggleSortBy", l.clearSortBy = "clearSortBy", c.sortType = "alphanumeric", c.sortDescFirst = !1;
    var Ue = function (e) {
      e.getSortByToggleProps = [$e], e.stateReducers.push(Je), e.useInstance.push(Ye);
    };
    Ue.pluginName = "useSortBy";
    var $e = function (e, t) {
      var n = t.instance,
        o = t.column,
        r = n.isMultiSortEvent,
        i = void 0 === r ? function (e) {
          return e.shiftKey;
        } : r;
      return [e, {
        onClick: o.canSort ? function (e) {
          e.persist(), o.toggleSortBy(void 0, !n.disableMultiSort && i(e));
        } : void 0,
        style: {
          cursor: o.canSort ? "pointer" : void 0
        },
        title: o.canSort ? "Toggle SortBy" : void 0
      }];
    };
    function Je(e, t, n, o) {
      if (t.type === l.init) return r({
        sortBy: []
      }, e);
      if (t.type === l.resetSortBy) return r({}, e, {
        sortBy: o.initialState.sortBy || []
      });
      if (t.type === l.clearSortBy) return r({}, e, {
        sortBy: e.sortBy.filter(function (e) {
          return e.id !== t.columnId;
        })
      });
      if (t.type === l.setSortBy) return r({}, e, {
        sortBy: t.sortBy
      });
      if (t.type === l.toggleSortBy) {
        var i,
          u = t.columnId,
          s = t.desc,
          a = t.multi,
          c = o.allColumns,
          d = o.disableMultiSort,
          f = o.disableSortRemove,
          p = o.disableMultiRemove,
          g = o.maxMultiSortColCount,
          v = void 0 === g ? Number.MAX_SAFE_INTEGER : g,
          m = e.sortBy,
          h = c.find(function (e) {
            return e.id === u;
          }).sortDescFirst,
          y = m.find(function (e) {
            return e.id === u;
          }),
          w = m.findIndex(function (e) {
            return e.id === u;
          }),
          R = null != s,
          b = [];
        return "toggle" !== (i = !d && a ? y ? "toggle" : "add" : w !== m.length - 1 || 1 !== m.length ? "replace" : y ? "toggle" : "replace") || f || R || a && p || !(y && y.desc && !h || !y.desc && h) || (i = "remove"), "replace" === i ? b = [{
          id: u,
          desc: R ? s : h
        }] : "add" === i ? (b = [].concat(m, [{
          id: u,
          desc: R ? s : h
        }])).splice(0, b.length - v) : "toggle" === i ? b = m.map(function (e) {
          return e.id === u ? r({}, e, {
            desc: R ? s : !y.desc
          }) : e;
        }) : "remove" === i && (b = m.filter(function (e) {
          return e.id !== u;
        })), r({}, e, {
          sortBy: b
        });
      }
    }
    function Ye(e) {
      var n = e.data,
        o = e.rows,
        r = e.flatRows,
        i = e.allColumns,
        u = e.orderByFn,
        s = void 0 === u ? Qe : u,
        a = e.sortTypes,
        c = e.manualSortBy,
        d = e.defaultCanSort,
        p = e.disableSortBy,
        g = e.flatHeaders,
        m = e.state.sortBy,
        y = e.dispatch,
        R = e.plugins,
        b = e.getHooks,
        S = e.autoResetSortBy,
        C = void 0 === S || S;
      v(R, ["useFilters", "useGlobalFilter", "useGroupBy", "usePivotColumns"], "useSortBy");
      var x = t.useCallback(function (e) {
          y({
            type: l.setSortBy,
            sortBy: e
          });
        }, [y]),
        P = t.useCallback(function (e, t, n) {
          y({
            type: l.toggleSortBy,
            columnId: e,
            desc: t,
            multi: n
          });
        }, [y]),
        B = h(e);
      g.forEach(function (e) {
        var t = e.accessor,
          n = e.canSort,
          o = e.disableSortBy,
          r = e.id,
          i = t ? I(!0 !== o && void 0, !0 !== p && void 0, !0) : I(d, n, !1);
        e.canSort = i, e.canSort && (e.toggleSortBy = function (t, n) {
          return P(e.id, t, n);
        }, e.clearSortBy = function () {
          y({
            type: l.clearSortBy,
            columnId: e.id
          });
        }), e.getSortByToggleProps = f(b().getSortByToggleProps, {
          instance: B(),
          column: e
        });
        var u = m.find(function (e) {
          return e.id === r;
        });
        e.isSorted = !!u, e.sortedIndex = m.findIndex(function (e) {
          return e.id === r;
        }), e.isSortedDesc = e.isSorted ? u.desc : void 0;
      });
      var E = t.useMemo(function () {
          if (c || !m.length) return [o, r];
          var e = [],
            t = m.filter(function (e) {
              return i.find(function (t) {
                return t.id === e.id;
              });
            });
          return [function n(o) {
            var r = s(o, t.map(function (e) {
              var t = i.find(function (t) {
                return t.id === e.id;
              });
              if (!t) throw new Error("React-Table: Could not find a column with id: " + e.id + " while sorting");
              var n = t.sortType,
                o = F(n) || (a || {})[n] || Ke[n];
              if (!o) throw new Error("React-Table: Could not find a valid sortType of '" + n + "' for column '" + e.id + "'.");
              return function (t, n) {
                return o(t, n, e.id, e.desc);
              };
            }), t.map(function (e) {
              var t = i.find(function (t) {
                return t.id === e.id;
              });
              return t && t.sortInverted ? e.desc : !e.desc;
            }));
            return r.forEach(function (t) {
              e.push(t), t.subRows && 0 !== t.subRows.length && (t.subRows = n(t.subRows));
            }), r;
          }(o), e];
        }, [c, m, o, r, i, s, a]),
        G = E[0],
        A = E[1],
        k = h(C);
      w(function () {
        k() && y({
          type: l.resetSortBy
        });
      }, [c ? null : n]), Object.assign(e, {
        preSortedRows: o,
        preSortedFlatRows: r,
        sortedRows: G,
        sortedFlatRows: A,
        rows: G,
        flatRows: A,
        setSortBy: x,
        toggleSortBy: P
      });
    }
    function Qe(e, t, n) {
      return [].concat(e).sort(function (e, o) {
        for (var r = 0; r < t.length; r += 1) {
          var i = t[r],
            u = !1 === n[r] || "desc" === n[r],
            l = i(e, o);
          if (0 !== l) return u ? -l : l;
        }
        return n[0] ? e.index - o.index : o.index - e.index;
      });
    }
    l.resetPage = "resetPage", l.gotoPage = "gotoPage", l.setPageSize = "setPageSize";
    var Ze = function (e) {
      e.stateReducers.push(et), e.useInstance.push(tt);
    };
    function et(e, t, n, o) {
      if (t.type === l.init) return r({
        pageSize: 10,
        pageIndex: 0
      }, e);
      if (t.type === l.resetPage) return r({}, e, {
        pageIndex: o.initialState.pageIndex || 0
      });
      if (t.type === l.gotoPage) {
        var i = o.pageCount,
          u = o.page,
          s = m(t.pageIndex, e.pageIndex),
          a = !1;
        return s > e.pageIndex ? a = -1 === i ? u.length >= e.pageSize : s < i : s < e.pageIndex && (a = s > -1), a ? r({}, e, {
          pageIndex: s
        }) : e;
      }
      if (t.type === l.setPageSize) {
        var c = t.pageSize,
          d = e.pageSize * e.pageIndex;
        return r({}, e, {
          pageIndex: Math.floor(d / c),
          pageSize: c
        });
      }
    }
    function tt(e) {
      var n = e.rows,
        o = e.autoResetPage,
        r = void 0 === o || o,
        i = e.manualExpandedKey,
        u = void 0 === i ? "expanded" : i,
        s = e.plugins,
        a = e.pageCount,
        c = e.paginateExpandedRows,
        d = void 0 === c || c,
        f = e.expandSubRows,
        p = void 0 === f || f,
        g = e.state,
        m = g.pageSize,
        y = g.pageIndex,
        R = g.expanded,
        b = g.globalFilter,
        S = g.filters,
        C = g.groupBy,
        x = g.sortBy,
        P = e.dispatch,
        B = e.data,
        E = e.manualPagination;
      v(s, ["useGlobalFilter", "useFilters", "useGroupBy", "useSortBy", "useExpanded"], "usePagination");
      var I = h(r);
      w(function () {
        I() && P({
          type: l.resetPage
        });
      }, [P, E ? null : B, b, S, C, x]);
      var F = E ? a : Math.ceil(n.length / m),
        G = t.useMemo(function () {
          return F > 0 ? [].concat(new Array(F)).fill(null).map(function (e, t) {
            return t;
          }) : [];
        }, [F]),
        k = t.useMemo(function () {
          var e;
          if (E) e = n;else {
            var t = m * y,
              o = t + m;
            e = n.slice(t, o);
          }
          return d ? e : A(e, {
            manualExpandedKey: u,
            expanded: R,
            expandSubRows: p
          });
        }, [p, R, u, E, y, m, d, n]),
        H = y > 0,
        T = -1 === F ? k.length >= m : y < F - 1,
        z = t.useCallback(function (e) {
          P({
            type: l.gotoPage,
            pageIndex: e
          });
        }, [P]),
        W = t.useCallback(function () {
          return z(function (e) {
            return e - 1;
          });
        }, [z]),
        O = t.useCallback(function () {
          return z(function (e) {
            return e + 1;
          });
        }, [z]),
        M = t.useCallback(function (e) {
          P({
            type: l.setPageSize,
            pageSize: e
          });
        }, [P]);
      Object.assign(e, {
        pageOptions: G,
        pageCount: F,
        page: k,
        canPreviousPage: H,
        canNextPage: T,
        gotoPage: z,
        previousPage: W,
        nextPage: O,
        setPageSize: M
      });
    }
    Ze.pluginName = "usePagination", l.resetPivot = "resetPivot", l.togglePivot = "togglePivot";
    var nt = function (e) {
      e.getPivotToggleProps = [rt], e.stateReducers.push(it), e.useInstanceAfterData.push(ut), e.allColumns.push(lt), e.accessValue.push(st), e.materializedColumns.push(at), e.materializedColumnsDeps.push(ct), e.visibleColumns.push(dt), e.visibleColumnsDeps.push(ft), e.useInstance.push(pt), e.prepareRow.push(gt);
    };
    nt.pluginName = "usePivotColumns";
    var ot = [],
      rt = function (e, t) {
        var n = t.header;
        return [e, {
          onClick: n.canPivot ? function (e) {
            e.persist(), n.togglePivot();
          } : void 0,
          style: {
            cursor: n.canPivot ? "pointer" : void 0
          },
          title: "Toggle Pivot"
        }];
      };
    function it(e, t, n, o) {
      if (t.type === l.init) return r({
        pivotColumns: ot
      }, e);
      if (t.type === l.resetPivot) return r({}, e, {
        pivotColumns: o.initialState.pivotColumns || ot
      });
      if (t.type === l.togglePivot) {
        var i = t.columnId,
          u = t.value,
          s = void 0 !== u ? u : !e.pivotColumns.includes(i);
        return r({}, e, s ? {
          pivotColumns: [].concat(e.pivotColumns, [i])
        } : {
          pivotColumns: e.pivotColumns.filter(function (e) {
            return e !== i;
          })
        });
      }
    }
    function ut(e) {
      e.allColumns.forEach(function (t) {
        t.isPivotSource = e.state.pivotColumns.includes(t.id);
      });
    }
    function lt(e, t) {
      var n = t.instance;
      return e.forEach(function (e) {
        e.isPivotSource = n.state.pivotColumns.includes(e.id), e.uniqueValues = new Set();
      }), e;
    }
    function st(e, t) {
      var n = t.column;
      return n.uniqueValues && void 0 !== e && n.uniqueValues.add(e), e;
    }
    function at(e, t) {
      var n = t.instance,
        o = n.allColumns,
        i = n.state;
      if (!i.pivotColumns.length || !i.groupBy || !i.groupBy.length) return e;
      var u = i.pivotColumns.map(function (e) {
          return o.find(function (t) {
            return t.id === e;
          });
        }).filter(Boolean),
        l = o.filter(function (e) {
          return !e.isPivotSource && !i.groupBy.includes(e.id) && !i.pivotColumns.includes(e.id);
        }),
        s = C(function e(t, n, o) {
          void 0 === t && (t = 0), void 0 === o && (o = []);
          var i = u[t];
          return i ? Array.from(i.uniqueValues).sort().map(function (u) {
            var l = r({}, i, {
              Header: i.PivotHeader || "string" == typeof i.header ? i.Header + ": " + u : u,
              isPivotGroup: !0,
              parent: n,
              depth: t,
              id: n ? n.id + "." + i.id + "." + u : i.id + "." + u,
              pivotValue: u
            });
            return l.columns = e(t + 1, l, [].concat(o, [function (e) {
              return e.values[i.id] === u;
            }])), l;
          }) : l.map(function (e) {
            return r({}, e, {
              canPivot: !1,
              isPivoted: !0,
              parent: n,
              depth: t,
              id: "" + (n ? n.id + "." + e.id : e.id),
              accessor: function (t, n, r) {
                if (o.every(function (e) {
                  return e(r);
                })) return r.values[e.id];
              }
            });
          });
        }());
      return [].concat(e, s);
    }
    function ct(e, t) {
      var n = t.instance.state,
        o = n.pivotColumns,
        r = n.groupBy;
      return [].concat(e, [o, r]);
    }
    function dt(e, t) {
      var n = t.instance.state;
      return e = e.filter(function (e) {
        return !e.isPivotSource;
      }), n.pivotColumns.length && n.groupBy && n.groupBy.length && (e = e.filter(function (e) {
        return e.isGrouped || e.isPivoted;
      })), e;
    }
    function ft(e, t) {
      var n = t.instance;
      return [].concat(e, [n.state.pivotColumns, n.state.groupBy]);
    }
    function pt(e) {
      var t = e.columns,
        n = e.allColumns,
        o = e.flatHeaders,
        r = e.getHooks,
        i = e.plugins,
        u = e.dispatch,
        s = e.autoResetPivot,
        a = void 0 === s || s,
        c = e.manaulPivot,
        d = e.disablePivot,
        p = e.defaultCanPivot;
      v(i, ["useGroupBy"], "usePivotColumns");
      var g = h(e);
      n.forEach(function (t) {
        var n = t.accessor,
          o = t.defaultPivot,
          r = t.disablePivot;
        t.canPivot = n ? I(t.canPivot, !0 !== r && void 0, !0 !== d && void 0, !0) : I(t.canPivot, o, p, !1), t.canPivot && (t.togglePivot = function () {
          return e.togglePivot(t.id);
        }), t.Aggregated = t.Aggregated || t.Cell;
      });
      o.forEach(function (e) {
        e.getPivotToggleProps = f(r().getPivotToggleProps, {
          instance: g(),
          header: e
        });
      });
      var m = h(a);
      w(function () {
        m() && u({
          type: l.resetPivot
        });
      }, [u, c ? null : t]), Object.assign(e, {
        togglePivot: function (e, t) {
          u({
            type: l.togglePivot,
            columnId: e,
            value: t
          });
        }
      });
    }
    function gt(e) {
      e.allCells.forEach(function (e) {
        e.isPivoted = e.column.isPivoted;
      });
    }
    l.resetSelectedRows = "resetSelectedRows", l.toggleAllRowsSelected = "toggleAllRowsSelected", l.toggleRowSelected = "toggleRowSelected", l.toggleAllPageRowsSelected = "toggleAllPageRowsSelected";
    var vt = function (e) {
      e.getToggleRowSelectedProps = [mt], e.getToggleAllRowsSelectedProps = [ht], e.getToggleAllPageRowsSelectedProps = [yt], e.stateReducers.push(wt), e.useInstance.push(Rt), e.prepareRow.push(bt);
    };
    vt.pluginName = "useRowSelect";
    var mt = function (e, t) {
        var n = t.instance,
          o = t.row,
          r = n.manualRowSelectedKey,
          i = void 0 === r ? "isSelected" : r;
        return [e, {
          onChange: function (e) {
            o.toggleRowSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: !(!o.original || !o.original[i]) || o.isSelected,
          title: "Toggle Row Selected",
          indeterminate: o.isSomeSelected
        }];
      },
      ht = function (e, t) {
        var n = t.instance;
        return [e, {
          onChange: function (e) {
            n.toggleAllRowsSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: n.isAllRowsSelected,
          title: "Toggle All Rows Selected",
          indeterminate: Boolean(!n.isAllRowsSelected && Object.keys(n.state.selectedRowIds).length)
        }];
      },
      yt = function (e, t) {
        var n = t.instance;
        return [e, {
          onChange: function (e) {
            n.toggleAllPageRowsSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: n.isAllPageRowsSelected,
          title: "Toggle All Current Page Rows Selected",
          indeterminate: Boolean(!n.isAllPageRowsSelected && n.page.some(function (e) {
            var t = e.id;
            return n.state.selectedRowIds[t];
          }))
        }];
      };
    function wt(e, t, n, o) {
      if (t.type === l.init) return r({
        selectedRowIds: {}
      }, e);
      if (t.type === l.resetSelectedRows) return r({}, e, {
        selectedRowIds: o.initialState.selectedRowIds || {}
      });
      if (t.type === l.toggleAllRowsSelected) {
        var i = t.value,
          u = o.isAllRowsSelected,
          s = o.rowsById,
          a = o.nonGroupedRowsById,
          c = void 0 === a ? s : a,
          d = void 0 !== i ? i : !u,
          f = Object.assign({}, e.selectedRowIds);
        return d ? Object.keys(c).forEach(function (e) {
          f[e] = !0;
        }) : Object.keys(c).forEach(function (e) {
          delete f[e];
        }), r({}, e, {
          selectedRowIds: f
        });
      }
      if (t.type === l.toggleRowSelected) {
        var p = t.id,
          g = t.value,
          v = o.rowsById,
          m = o.selectSubRows,
          h = void 0 === m || m,
          y = o.getSubRows,
          w = e.selectedRowIds[p],
          R = void 0 !== g ? g : !w;
        if (w === R) return e;
        var b = r({}, e.selectedRowIds);
        return function e(t) {
          var n = v[t];
          if (n.isGrouped || (R ? b[t] = !0 : delete b[t]), h && y(n)) return y(n).forEach(function (t) {
            return e(t.id);
          });
        }(p), r({}, e, {
          selectedRowIds: b
        });
      }
      if (t.type === l.toggleAllPageRowsSelected) {
        var S = t.value,
          C = o.page,
          x = o.rowsById,
          P = o.selectSubRows,
          B = void 0 === P || P,
          E = o.isAllPageRowsSelected,
          I = o.getSubRows,
          F = void 0 !== S ? S : !E,
          G = r({}, e.selectedRowIds);
        return C.forEach(function (e) {
          return function e(t) {
            var n = x[t];
            if (n.isGrouped || (F ? G[t] = !0 : delete G[t]), B && I(n)) return I(n).forEach(function (t) {
              return e(t.id);
            });
          }(e.id);
        }), r({}, e, {
          selectedRowIds: G
        });
      }
      return e;
    }
    function Rt(e) {
      var n = e.data,
        o = e.rows,
        r = e.getHooks,
        i = e.plugins,
        u = e.rowsById,
        s = e.nonGroupedRowsById,
        a = void 0 === s ? u : s,
        c = e.autoResetSelectedRows,
        d = void 0 === c || c,
        p = e.state.selectedRowIds,
        g = e.selectSubRows,
        m = void 0 === g || g,
        y = e.dispatch,
        R = e.page,
        b = e.getSubRows;
      v(i, ["useFilters", "useGroupBy", "useSortBy", "useExpanded", "usePagination"], "useRowSelect");
      var S = t.useMemo(function () {
          var e = [];
          return o.forEach(function (t) {
            var n = m ? function e(t, n, o) {
              if (n[t.id]) return !0;
              var r = o(t);
              if (r && r.length) {
                var i = !0,
                  u = !1;
                return r.forEach(function (t) {
                  u && !i || (e(t, n, o) ? u = !0 : i = !1);
                }), !!i || !!u && null;
              }
              return !1;
            }(t, p, b) : !!p[t.id];
            t.isSelected = !!n, t.isSomeSelected = null === n, n && e.push(t);
          }), e;
        }, [o, m, p, b]),
        C = Boolean(Object.keys(a).length && Object.keys(p).length),
        x = C;
      C && Object.keys(a).some(function (e) {
        return !p[e];
      }) && (C = !1), C || R && R.length && R.some(function (e) {
        var t = e.id;
        return !p[t];
      }) && (x = !1);
      var P = h(d);
      w(function () {
        P() && y({
          type: l.resetSelectedRows
        });
      }, [y, n]);
      var B = t.useCallback(function (e) {
          return y({
            type: l.toggleAllRowsSelected,
            value: e
          });
        }, [y]),
        E = t.useCallback(function (e) {
          return y({
            type: l.toggleAllPageRowsSelected,
            value: e
          });
        }, [y]),
        I = t.useCallback(function (e, t) {
          return y({
            type: l.toggleRowSelected,
            id: e,
            value: t
          });
        }, [y]),
        F = h(e),
        G = f(r().getToggleAllRowsSelectedProps, {
          instance: F()
        }),
        A = f(r().getToggleAllPageRowsSelectedProps, {
          instance: F()
        });
      Object.assign(e, {
        selectedFlatRows: S,
        isAllRowsSelected: C,
        isAllPageRowsSelected: x,
        toggleRowSelected: I,
        toggleAllRowsSelected: B,
        getToggleAllRowsSelectedProps: G,
        getToggleAllPageRowsSelectedProps: A,
        toggleAllPageRowsSelected: E
      });
    }
    function bt(e, t) {
      var n = t.instance;
      e.toggleRowSelected = function (t) {
        return n.toggleRowSelected(e.id, t);
      }, e.getToggleRowSelectedProps = f(n.getHooks().getToggleRowSelectedProps, {
        instance: n,
        row: e
      });
    }
    var St = function (e) {
        return {};
      },
      Ct = function (e) {
        return {};
      };
    l.setRowState = "setRowState", l.setCellState = "setCellState", l.resetRowState = "resetRowState";
    var xt = function (e) {
      e.stateReducers.push(Pt), e.useInstance.push(Bt), e.prepareRow.push(Et);
    };
    function Pt(e, t, n, o) {
      var i = o.initialRowStateAccessor,
        u = void 0 === i ? St : i,
        s = o.initialCellStateAccessor,
        a = void 0 === s ? Ct : s,
        c = o.rowsById;
      if (t.type === l.init) return r({
        rowState: {}
      }, e);
      if (t.type === l.resetRowState) return r({}, e, {
        rowState: o.initialState.rowState || {}
      });
      if (t.type === l.setRowState) {
        var d,
          f = t.rowId,
          p = t.value,
          g = void 0 !== e.rowState[f] ? e.rowState[f] : u(c[f]);
        return r({}, e, {
          rowState: r({}, e.rowState, (d = {}, d[f] = m(p, g), d))
        });
      }
      if (t.type === l.setCellState) {
        var v,
          h,
          y,
          w,
          R,
          b = t.rowId,
          S = t.columnId,
          C = t.value,
          x = void 0 !== e.rowState[b] ? e.rowState[b] : u(c[b]),
          P = void 0 !== (null == x ? void 0 : null == (v = x.cellState) ? void 0 : v[S]) ? x.cellState[S] : a(null == (h = c[b]) ? void 0 : null == (y = h.cells) ? void 0 : y.find(function (e) {
            return e.column.id === S;
          }));
        return r({}, e, {
          rowState: r({}, e.rowState, (R = {}, R[b] = r({}, x, {
            cellState: r({}, x.cellState || {}, (w = {}, w[S] = m(C, P), w))
          }), R))
        });
      }
    }
    function Bt(e) {
      var n = e.autoResetRowState,
        o = void 0 === n || n,
        r = e.data,
        i = e.dispatch,
        u = t.useCallback(function (e, t) {
          return i({
            type: l.setRowState,
            rowId: e,
            value: t
          });
        }, [i]),
        s = t.useCallback(function (e, t, n) {
          return i({
            type: l.setCellState,
            rowId: e,
            columnId: t,
            value: n
          });
        }, [i]),
        a = h(o);
      w(function () {
        a() && i({
          type: l.resetRowState
        });
      }, [r]), Object.assign(e, {
        setRowState: u,
        setCellState: s
      });
    }
    function Et(e, t) {
      var n = t.instance,
        o = n.initialRowStateAccessor,
        r = void 0 === o ? St : o,
        i = n.initialCellStateAccessor,
        u = void 0 === i ? Ct : i,
        l = n.state.rowState;
      e && (e.state = void 0 !== l[e.id] ? l[e.id] : r(e), e.setState = function (t) {
        return n.setRowState(e.id, t);
      }, e.cells.forEach(function (t) {
        e.state.cellState || (e.state.cellState = {}), t.state = void 0 !== e.state.cellState[t.column.id] ? e.state.cellState[t.column.id] : u(t), t.setState = function (o) {
          return n.setCellState(e.id, t.column.id, o);
        };
      }));
    }
    xt.pluginName = "useRowState", l.resetColumnOrder = "resetColumnOrder", l.setColumnOrder = "setColumnOrder";
    var It = function (e) {
      e.stateReducers.push(Ft), e.visibleColumnsDeps.push(function (e, t) {
        var n = t.instance;
        return [].concat(e, [n.state.columnOrder]);
      }), e.visibleColumns.push(Gt), e.useInstance.push(At);
    };
    function Ft(e, t, n, o) {
      return t.type === l.init ? r({
        columnOrder: []
      }, e) : t.type === l.resetColumnOrder ? r({}, e, {
        columnOrder: o.initialState.columnOrder || []
      }) : t.type === l.setColumnOrder ? r({}, e, {
        columnOrder: m(t.columnOrder, e.columnOrder)
      }) : void 0;
    }
    function Gt(e, t) {
      var n = t.instance.state.columnOrder;
      if (!n || !n.length) return e;
      for (var o = [].concat(n), r = [].concat(e), i = [], u = function () {
          var e = o.shift(),
            t = r.findIndex(function (t) {
              return t.id === e;
            });
          t > -1 && i.push(r.splice(t, 1)[0]);
        }; r.length && o.length;) u();
      return [].concat(i, r);
    }
    function At(e) {
      var n = e.dispatch;
      e.setColumnOrder = t.useCallback(function (e) {
        return n({
          type: l.setColumnOrder,
          columnOrder: e
        });
      }, [n]);
    }
    It.pluginName = "useColumnOrder", c.canResize = !0, l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize";
    var kt = function (e) {
        e.getResizerProps = [Ht], e.getHeaderProps.push({
          style: {
            position: "relative"
          }
        }), e.stateReducers.push(Tt), e.useInstance.push(Wt), e.useInstanceBeforeDimensions.push(zt);
      },
      Ht = function (e, t) {
        var n = t.instance,
          o = t.header,
          r = n.dispatch,
          i = function (e, t) {
            var n = !1;
            if ("touchstart" === e.type) {
              if (e.touches && e.touches.length > 1) return;
              n = !0;
            }
            var o = function (e) {
                var t = [];
                return function e(n) {
                  n.columns && n.columns.length && n.columns.map(e);
                  t.push(n);
                }(e), t;
              }(t).map(function (e) {
                return [e.id, e.totalWidth];
              }),
              i = n ? Math.round(e.touches[0].clientX) : e.clientX,
              u = function (e) {
                r({
                  type: l.columnResizing,
                  clientX: e
                });
              },
              s = function () {
                return r({
                  type: l.columnDoneResizing
                });
              },
              a = {
                mouse: {
                  moveEvent: "mousemove",
                  moveHandler: function (e) {
                    return u(e.clientX);
                  },
                  upEvent: "mouseup",
                  upHandler: function (e) {
                    document.removeEventListener("mousemove", a.mouse.moveHandler), document.removeEventListener("mouseup", a.mouse.upHandler), s();
                  }
                },
                touch: {
                  moveEvent: "touchmove",
                  moveHandler: function (e) {
                    return e.cancelable && (e.preventDefault(), e.stopPropagation()), u(e.touches[0].clientX), !1;
                  },
                  upEvent: "touchend",
                  upHandler: function (e) {
                    document.removeEventListener(a.touch.moveEvent, a.touch.moveHandler), document.removeEventListener(a.touch.upEvent, a.touch.moveHandler), s();
                  }
                }
              },
              c = n ? a.touch : a.mouse,
              d = !!function () {
                if ("boolean" == typeof z) return z;
                var e = !1;
                try {
                  var t = {
                    get passive() {
                      return e = !0, !1;
                    }
                  };
                  window.addEventListener("test", null, t), window.removeEventListener("test", null, t);
                } catch (t) {
                  e = !1;
                }
                return z = e;
              }() && {
                passive: !1
              };
            document.addEventListener(c.moveEvent, c.moveHandler, d), document.addEventListener(c.upEvent, c.upHandler, d), r({
              type: l.columnStartResizing,
              columnId: t.id,
              columnWidth: t.totalWidth,
              headerIdWidths: o,
              clientX: i
            });
          };
        return [e, {
          onMouseDown: function (e) {
            return e.persist() || i(e, o);
          },
          onTouchStart: function (e) {
            return e.persist() || i(e, o);
          },
          style: {
            cursor: "col-resize"
          },
          draggable: !1,
          role: "separator"
        }];
      };
    function Tt(e, t) {
      if (t.type === l.init) return r({
        columnResizing: {
          columnWidths: {}
        }
      }, e);
      if (t.type === l.resetResize) return r({}, e, {
        columnResizing: {
          columnWidths: {}
        }
      });
      if (t.type === l.columnStartResizing) {
        var n = t.clientX,
          o = t.columnId,
          i = t.columnWidth,
          u = t.headerIdWidths;
        return r({}, e, {
          columnResizing: r({}, e.columnResizing, {
            startX: n,
            headerIdWidths: u,
            columnWidth: i,
            isResizingColumn: o
          })
        });
      }
      if (t.type === l.columnResizing) {
        var s = t.clientX,
          a = e.columnResizing,
          c = a.startX,
          d = a.columnWidth,
          f = a.headerIdWidths,
          p = (s - c) / d,
          g = {};
        return (void 0 === f ? [] : f).forEach(function (e) {
          var t = e[0],
            n = e[1];
          g[t] = Math.max(n + n * p, 0);
        }), r({}, e, {
          columnResizing: r({}, e.columnResizing, {
            columnWidths: r({}, e.columnResizing.columnWidths, {}, g)
          })
        });
      }
      return t.type === l.columnDoneResizing ? r({}, e, {
        columnResizing: r({}, e.columnResizing, {
          startX: null,
          isResizingColumn: null
        })
      }) : void 0;
    }
    kt.pluginName = "useResizeColumns";
    var zt = function (e) {
      var t = e.flatHeaders,
        n = e.disableResizing,
        o = e.getHooks,
        r = e.state.columnResizing,
        i = h(e);
      t.forEach(function (e) {
        var t = I(!0 !== e.disableResizing && void 0, !0 !== n && void 0, !0);
        e.canResize = t, e.width = r.columnWidths[e.id] || e.originalWidth || e.width, e.isResizing = r.isResizingColumn === e.id, t && (e.getResizerProps = f(o().getResizerProps, {
          instance: i(),
          header: e
        }));
      });
    };
    function Wt(e) {
      var n = e.plugins,
        o = e.dispatch,
        r = e.autoResetResize,
        i = void 0 === r || r,
        u = e.columns;
      v(n, ["useAbsoluteLayout"], "useResizeColumns");
      var s = h(i);
      w(function () {
        s() && o({
          type: l.resetResize
        });
      }, [u]);
      var a = t.useCallback(function () {
        return o({
          type: l.resetResize
        });
      }, [o]);
      Object.assign(e, {
        resetResizing: a
      });
    }
    var Ot = {
        position: "absolute",
        top: 0
      },
      Mt = function (e) {
        e.getTableBodyProps.push(jt), e.getRowProps.push(jt), e.getHeaderGroupProps.push(jt), e.getFooterGroupProps.push(jt), e.getHeaderProps.push(function (e, t) {
          var n = t.column;
          return [e, {
            style: r({}, Ot, {
              left: n.totalLeft + "px",
              width: n.totalWidth + "px"
            })
          }];
        }), e.getCellProps.push(function (e, t) {
          var n = t.cell;
          return [e, {
            style: r({}, Ot, {
              left: n.column.totalLeft + "px",
              width: n.column.totalWidth + "px"
            })
          }];
        }), e.getFooterProps.push(function (e, t) {
          var n = t.column;
          return [e, {
            style: r({}, Ot, {
              left: n.totalLeft + "px",
              width: n.totalWidth + "px"
            })
          }];
        });
      };
    Mt.pluginName = "useAbsoluteLayout";
    var jt = function (e, t) {
        return [e, {
          style: {
            position: "relative",
            width: t.instance.totalColumnsWidth + "px"
          }
        }];
      },
      Nt = {
        display: "inline-block",
        boxSizing: "border-box"
      },
      Dt = function (e, t) {
        return [e, {
          style: {
            display: "flex",
            width: t.instance.totalColumnsWidth + "px"
          }
        }];
      },
      Lt = function (e) {
        e.getRowProps.push(Dt), e.getHeaderGroupProps.push(Dt), e.getFooterGroupProps.push(Dt), e.getHeaderProps.push(function (e, t) {
          var n = t.column;
          return [e, {
            style: r({}, Nt, {
              width: n.totalWidth + "px"
            })
          }];
        }), e.getCellProps.push(function (e, t) {
          var n = t.cell;
          return [e, {
            style: r({}, Nt, {
              width: n.column.totalWidth + "px"
            })
          }];
        }), e.getFooterProps.push(function (e, t) {
          var n = t.column;
          return [e, {
            style: r({}, Nt, {
              width: n.totalWidth + "px"
            })
          }];
        });
      };
    function Vt(e) {
      e.getTableProps.push(_t), e.getRowProps.push(Xt), e.getHeaderGroupProps.push(Xt), e.getFooterGroupProps.push(Xt), e.getHeaderProps.push(qt), e.getCellProps.push(Kt), e.getFooterProps.push(Ut);
    }
    Lt.pluginName = "useBlockLayout", Vt.pluginName = "useFlexLayout";
    var _t = function (e, t) {
        return [e, {
          style: {
            minWidth: t.instance.totalColumnsMinWidth + "px"
          }
        }];
      },
      Xt = function (e, t) {
        return [e, {
          style: {
            display: "flex",
            flex: "1 0 auto",
            minWidth: t.instance.totalColumnsMinWidth + "px"
          }
        }];
      },
      qt = function (e, t) {
        var n = t.column;
        return [e, {
          style: {
            boxSizing: "border-box",
            flex: n.totalFlexWidth ? n.totalFlexWidth + " 0 auto" : void 0,
            minWidth: n.totalMinWidth + "px",
            width: n.totalWidth + "px"
          }
        }];
      },
      Kt = function (e, t) {
        var n = t.cell;
        return [e, {
          style: {
            boxSizing: "border-box",
            flex: n.column.totalFlexWidth + " 0 auto",
            minWidth: n.column.totalMinWidth + "px",
            width: n.column.totalWidth + "px"
          }
        }];
      },
      Ut = function (e, t) {
        var n = t.column;
        return [e, {
          style: {
            boxSizing: "border-box",
            flex: n.totalFlexWidth ? n.totalFlexWidth + " 0 auto" : void 0,
            minWidth: n.totalMinWidth + "px",
            width: n.totalWidth + "px"
          }
        }];
      };
    function $t(e) {
      e.stateReducers.push(Qt), e.getTableProps.push(Jt), e.getHeaderProps.push(Yt);
    }
    $t.pluginName = "useGridLayout";
    var Jt = function (e, t) {
        return [e, {
          style: {
            display: "grid",
            gridTemplateColumns: t.instance.state.gridLayout.columnWidths.map(function (e) {
              return e;
            }).join(" ")
          }
        }];
      },
      Yt = function (e, t) {
        return [e, {
          id: "header-cell-" + t.column.id,
          style: {
            position: "sticky"
          }
        }];
      };
    function Qt(e, t, n, o) {
      if ("init" === t.type) return r({
        gridLayout: {
          columnWidths: o.columns.map(function () {
            return "auto";
          })
        }
      }, e);
      if ("columnStartResizing" === t.type) {
        var i = t.columnId,
          u = o.visibleColumns.findIndex(function (e) {
            return e.id === i;
          }),
          l = function (e) {
            var t,
              n = null == (t = document.getElementById("header-cell-" + e)) ? void 0 : t.offsetWidth;
            if (void 0 !== n) return n;
          }(i);
        return void 0 !== l ? r({}, e, {
          gridLayout: r({}, e.gridLayout, {
            columnId: i,
            columnIndex: u,
            startingWidth: l
          })
        }) : e;
      }
      if ("columnResizing" === t.type) {
        var s = e.gridLayout,
          a = s.columnIndex,
          c = s.startingWidth,
          d = s.columnWidths,
          f = c - (e.columnResizing.startX - t.clientX),
          p = [].concat(d);
        return p[a] = f + "px", r({}, e, {
          gridLayout: r({}, e.gridLayout, {
            columnWidths: p
          })
        });
      }
    }
    e._UNSTABLE_usePivotColumns = nt, e.actions = l, e.defaultColumn = c, e.defaultGroupByFn = Le, e.defaultOrderByFn = Qe, e.defaultRenderer = s, e.emptyRenderer = a, e.ensurePluginOrder = v, e.flexRender = b, e.functionalUpdate = m, e.loopHooks = g, e.makePropGetter = f, e.makeRenderer = R, e.reduceHooks = p, e.safeUseLayoutEffect = y, e.useAbsoluteLayout = Mt, e.useAsyncDebounce = function (e, n) {
      void 0 === n && (n = 0);
      var r = t.useRef({}),
        i = h(e),
        u = h(n);
      return t.useCallback(function () {
        var e = o(regeneratorRuntime.mark(function e() {
          var t,
            n,
            l,
            s = arguments;
          return regeneratorRuntime.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                for (t = s.length, n = new Array(t), l = 0; l < t; l++) n[l] = s[l];
                return r.current.promise || (r.current.promise = new Promise(function (e, t) {
                  r.current.resolve = e, r.current.reject = t;
                })), r.current.timeout && clearTimeout(r.current.timeout), r.current.timeout = setTimeout(o(regeneratorRuntime.mark(function e() {
                  return regeneratorRuntime.wrap(function (e) {
                    for (;;) switch (e.prev = e.next) {
                      case 0:
                        return delete r.current.timeout, e.prev = 1, e.t0 = r.current, e.next = 5, i().apply(void 0, n);
                      case 5:
                        e.t1 = e.sent, e.t0.resolve.call(e.t0, e.t1), e.next = 12;
                        break;
                      case 9:
                        e.prev = 9, e.t2 = e.catch(1), r.current.reject(e.t2);
                      case 12:
                        return e.prev = 12, delete r.current.promise, e.finish(12);
                      case 15:
                      case "end":
                        return e.stop();
                    }
                  }, e, null, [[1, 9, 12, 15]]);
                })), u()), e.abrupt("return", r.current.promise);
              case 5:
              case "end":
                return e.stop();
            }
          }, e);
        }));
        return function () {
          return e.apply(this, arguments);
        };
      }(), [i, u]);
    }, e.useBlockLayout = Lt, e.useColumnOrder = It, e.useExpanded = se, e.useFilters = Pe, e.useFlexLayout = Vt, e.useGetLatest = h, e.useGlobalFilter = Ie, e.useGridLayout = $t, e.useGroupBy = ze, e.useMountedLayoutEffect = w, e.usePagination = Ze, e.useResizeColumns = kt, e.useRowSelect = vt, e.useRowState = xt, e.useSortBy = Ue, e.useTable = function (e) {
      for (var n = arguments.length, o = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++) o[i - 1] = arguments[i];
      e = ie(e), o = [K].concat(o);
      var u = t.useRef({}),
        s = h(u.current);
      Object.assign(s(), r({}, e, {
        plugins: o,
        hooks: q()
      })), o.filter(Boolean).forEach(function (e) {
        e(s().hooks);
      });
      var a = h(s().hooks);
      s().getHooks = a, delete s().hooks, Object.assign(s(), p(a().useOptions, ie(e)));
      var c = s(),
        d = c.data,
        v = c.columns,
        m = c.initialState,
        y = c.defaultColumn,
        w = c.getSubRows,
        b = c.getRowId,
        E = c.stateReducer,
        I = c.useControlledState,
        F = h(E),
        G = t.useCallback(function (e, t) {
          if (!t.type) throw console.info({
            action: t
          }), new Error("Unknown Action 👆");
          return [].concat(a().stateReducers, Array.isArray(F()) ? F() : [F()]).reduce(function (n, o) {
            return o(n, t, e, s()) || n;
          }, e);
        }, [a, F, s]),
        A = t.useReducer(G, void 0, function () {
          return G(m, {
            type: l.init
          });
        }),
        k = A[0],
        H = A[1],
        T = p([].concat(a().useControlledState, [I]), k, {
          instance: s()
        });
      Object.assign(s(), {
        state: T,
        dispatch: H
      });
      var z = t.useMemo(function () {
        return S(p(a().columns, v, {
          instance: s()
        }));
      }, [a, s, v].concat(p(a().columnsDeps, [], {
        instance: s()
      })));
      s().columns = z;
      var W = t.useMemo(function () {
        return p(a().allColumns, C(z), {
          instance: s()
        }).map(x);
      }, [z, a, s].concat(p(a().allColumnsDeps, [], {
        instance: s()
      })));
      s().allColumns = W;
      var O = t.useMemo(function () {
          for (var e = [], t = [], n = {}, o = [].concat(W); o.length;) {
            var r = o.shift();
            le({
              data: d,
              rows: e,
              flatRows: t,
              rowsById: n,
              column: r,
              getRowId: b,
              getSubRows: w,
              accessValueHooks: a().accessValue,
              getInstance: s
            });
          }
          return [e, t, n];
        }, [W, d, b, w, a, s]),
        M = O[0],
        j = O[1],
        N = O[2];
      Object.assign(s(), {
        rows: M,
        initialRows: [].concat(M),
        flatRows: j,
        rowsById: N
      }), g(a().useInstanceAfterData, s());
      var D = t.useMemo(function () {
        return p(a().visibleColumns, W, {
          instance: s()
        }).map(function (e) {
          return P(e, y);
        });
      }, [a, W, s, y].concat(p(a().visibleColumnsDeps, [], {
        instance: s()
      })));
      W = t.useMemo(function () {
        var e = [].concat(D);
        return W.forEach(function (t) {
          e.find(function (e) {
            return e.id === t.id;
          }) || e.push(t);
        }), e;
      }, [W, D]), s().allColumns = W;
      var L = t.useMemo(function () {
        return p(a().headerGroups, B(D, y), s());
      }, [a, D, y, s].concat(p(a().headerGroupsDeps, [], {
        instance: s()
      })));
      s().headerGroups = L;
      var V = t.useMemo(function () {
        return L.length ? L[0].headers : [];
      }, [L]);
      s().headers = V, s().flatHeaders = L.reduce(function (e, t) {
        return [].concat(e, t.headers);
      }, []), g(a().useInstanceBeforeDimensions, s());
      var _ = D.filter(function (e) {
        return e.isVisible;
      }).map(function (e) {
        return e.id;
      }).sort().join("_");
      D = t.useMemo(function () {
        return D.filter(function (e) {
          return e.isVisible;
        });
      }, [D, _]), s().visibleColumns = D;
      var X = ue(V),
        U = X[0],
        $ = X[1],
        J = X[2];
      return s().totalColumnsMinWidth = U, s().totalColumnsWidth = $, s().totalColumnsMaxWidth = J, g(a().useInstance, s()), [].concat(s().flatHeaders, s().allColumns).forEach(function (e) {
        e.render = R(s(), e), e.getHeaderProps = f(a().getHeaderProps, {
          instance: s(),
          column: e
        }), e.getFooterProps = f(a().getFooterProps, {
          instance: s(),
          column: e
        });
      }), s().headerGroups = t.useMemo(function () {
        return L.filter(function (e, t) {
          return e.headers = e.headers.filter(function (e) {
            return e.headers ? function e(t) {
              return t.filter(function (t) {
                return t.headers ? e(t.headers) : t.isVisible;
              }).length;
            }(e.headers) : e.isVisible;
          }), !!e.headers.length && (e.getHeaderGroupProps = f(a().getHeaderGroupProps, {
            instance: s(),
            headerGroup: e,
            index: t
          }), e.getFooterGroupProps = f(a().getFooterGroupProps, {
            instance: s(),
            headerGroup: e,
            index: t
          }), !0);
        });
      }, [L, s, a]), s().footerGroups = [].concat(s().headerGroups).reverse(), s().prepareRow = t.useCallback(function (e) {
        e.getRowProps = f(a().getRowProps, {
          instance: s(),
          row: e
        }), e.allCells = W.map(function (t) {
          var n = e.values[t.id],
            o = {
              column: t,
              row: e,
              value: n
            };
          return o.getCellProps = f(a().getCellProps, {
            instance: s(),
            cell: o
          }), o.render = R(s(), t, {
            row: e,
            cell: o,
            value: n
          }), o;
        }), e.cells = D.map(function (t) {
          return e.allCells.find(function (e) {
            return e.column.id === t.id;
          });
        }), g(a().prepareRow, e, {
          instance: s()
        });
      }, [a, s, W, D]), s().getTableProps = f(a().getTableProps, {
        instance: s()
      }), s().getTableBodyProps = f(a().getTableBodyProps, {
        instance: s()
      }), g(a().useFinalInstance, s()), s();
    }, Object.defineProperty(e, "__esModule", {
      value: !0
    });
  });
})(reactTable_production_min, reactTable_production_min.exports);

var reactTable_development = {exports: {}};

(function (module, exports) {
  (function (global, factory) {
    factory(exports, React__default) ;
  })(commonjsGlobal, function (exports, React) {

    React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
          args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(undefined);
        });
      };
    }
    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    var renderErr = 'Renderer Error ☝️';
    var actions = {
      init: 'init'
    };
    var defaultRenderer = function defaultRenderer(_ref) {
      var _ref$value = _ref.value,
        value = _ref$value === void 0 ? '' : _ref$value;
      return value;
    };
    var emptyRenderer = function emptyRenderer() {
      return React.createElement(React.Fragment, null, "\xA0");
    };
    var defaultColumn = {
      Cell: defaultRenderer,
      width: 150,
      minWidth: 0,
      maxWidth: Number.MAX_SAFE_INTEGER
    };
    function mergeProps() {
      for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {
        propList[_key] = arguments[_key];
      }
      return propList.reduce(function (props, next) {
        var style = next.style,
          className = next.className,
          rest = _objectWithoutPropertiesLoose(next, ["style", "className"]);
        props = _extends({}, props, {}, rest);
        if (style) {
          props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;
        }
        if (className) {
          props.className = props.className ? props.className + ' ' + className : className;
        }
        if (props.className === '') {
          delete props.className;
        }
        return props;
      }, {});
    }
    function handlePropGetter(prevProps, userProps, meta) {
      // Handle a lambda, pass it the previous props
      if (typeof userProps === 'function') {
        return handlePropGetter({}, userProps(prevProps, meta));
      } // Handle an array, merge each item as separate props

      if (Array.isArray(userProps)) {
        return mergeProps.apply(void 0, [prevProps].concat(userProps));
      } // Handle an object by default, merge the two objects

      return mergeProps(prevProps, userProps);
    }
    var makePropGetter = function makePropGetter(hooks, meta) {
      if (meta === void 0) {
        meta = {};
      }
      return function (userProps) {
        if (userProps === void 0) {
          userProps = {};
        }
        return [].concat(hooks, [userProps]).reduce(function (prev, next) {
          return handlePropGetter(prev, next, _extends({}, meta, {
            userProps: userProps
          }));
        }, {});
      };
    };
    var reduceHooks = function reduceHooks(hooks, initial, meta, allowUndefined) {
      if (meta === void 0) {
        meta = {};
      }
      return hooks.reduce(function (prev, next) {
        var nextValue = next(prev, meta);
        {
          if (!allowUndefined && typeof nextValue === 'undefined') {
            console.info(next);
            throw new Error('React Table: A reducer hook ☝️ just returned undefined! This is not allowed.');
          }
        }
        return nextValue;
      }, initial);
    };
    var loopHooks = function loopHooks(hooks, context, meta) {
      if (meta === void 0) {
        meta = {};
      }
      return hooks.forEach(function (hook) {
        var nextValue = hook(context, meta);
        {
          if (typeof nextValue !== 'undefined') {
            console.info(hook, nextValue);
            throw new Error('React Table: A loop-type hook ☝️ just returned a value! This is not allowed.');
          }
        }
      });
    };
    function ensurePluginOrder(plugins, befores, pluginName, afters) {
      if (afters) {
        throw new Error("Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin " + pluginName + ")");
      }
      var pluginIndex = plugins.findIndex(function (plugin) {
        return plugin.pluginName === pluginName;
      });
      if (pluginIndex === -1) {
        {
          throw new Error("The plugin \"" + pluginName + "\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  " + pluginName + ".pluginName = '" + pluginName + "'\n");
        }
      }
      befores.forEach(function (before) {
        var beforeIndex = plugins.findIndex(function (plugin) {
          return plugin.pluginName === before;
        });
        if (beforeIndex > -1 && beforeIndex > pluginIndex) {
          {
            throw new Error("React Table: The " + pluginName + " plugin hook must be placed after the " + before + " plugin hook!");
          }
        }
      });
    }
    function functionalUpdate(updater, old) {
      return typeof updater === 'function' ? updater(old) : updater;
    }
    function useGetLatest(obj) {
      var ref = React.useRef();
      ref.current = obj;
      return React.useCallback(function () {
        return ref.current;
      }, []);
    } // SSR has issues with useLayoutEffect still, so use useEffect during SSR

    var safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;
    function useMountedLayoutEffect(fn, deps) {
      var mountedRef = React.useRef(false);
      safeUseLayoutEffect(function () {
        if (mountedRef.current) {
          fn();
        }
        mountedRef.current = true; // eslint-disable-next-line
      }, deps);
    }
    function useAsyncDebounce(defaultFn, defaultWait) {
      if (defaultWait === void 0) {
        defaultWait = 0;
      }
      var debounceRef = React.useRef({});
      var getDefaultFn = useGetLatest(defaultFn);
      var getDefaultWait = useGetLatest(defaultWait);
      return React.useCallback( /*#__PURE__*/
      function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2() {
          var _len2,
            args,
            _key2,
            _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }
                  if (!debounceRef.current.promise) {
                    debounceRef.current.promise = new Promise(function (resolve, reject) {
                      debounceRef.current.resolve = resolve;
                      debounceRef.current.reject = reject;
                    });
                  }
                  if (debounceRef.current.timeout) {
                    clearTimeout(debounceRef.current.timeout);
                  }
                  debounceRef.current.timeout = setTimeout( /*#__PURE__*/
                  _asyncToGenerator( /*#__PURE__*/
                  regeneratorRuntime.mark(function _callee() {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            delete debounceRef.current.timeout;
                            _context.prev = 1;
                            _context.t0 = debounceRef.current;
                            _context.next = 5;
                            return getDefaultFn().apply(void 0, args);
                          case 5:
                            _context.t1 = _context.sent;
                            _context.t0.resolve.call(_context.t0, _context.t1);
                            _context.next = 12;
                            break;
                          case 9:
                            _context.prev = 9;
                            _context.t2 = _context["catch"](1);
                            debounceRef.current.reject(_context.t2);
                          case 12:
                            _context.prev = 12;
                            delete debounceRef.current.promise;
                            return _context.finish(12);
                          case 15:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, null, [[1, 9, 12, 15]]);
                  })), getDefaultWait());
                  return _context2.abrupt("return", debounceRef.current.promise);
                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        return function () {
          return _ref2.apply(this, arguments);
        };
      }(), [getDefaultFn, getDefaultWait]);
    }
    function makeRenderer(instance, column, meta) {
      if (meta === void 0) {
        meta = {};
      }
      return function (type, userProps) {
        if (userProps === void 0) {
          userProps = {};
        }
        var Comp = typeof type === 'string' ? column[type] : type;
        if (typeof Comp === 'undefined') {
          console.info(column);
          throw new Error(renderErr);
        }
        return flexRender(Comp, _extends({}, instance, {
          column: column
        }, meta, {}, userProps));
      };
    }
    function flexRender(Comp, props) {
      return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;
    }
    function isReactComponent(component) {
      return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);
    }
    function isClassComponent(component) {
      return typeof component === 'function' && function () {
        var proto = Object.getPrototypeOf(component);
        return proto.prototype && proto.prototype.isReactComponent;
      }();
    }
    function isExoticComponent(component) {
      return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);
    }
    function linkColumnStructure(columns, parent, depth) {
      if (depth === void 0) {
        depth = 0;
      }
      return columns.map(function (column) {
        column = _extends({}, column, {
          parent: parent,
          depth: depth
        });
        assignColumnAccessor(column);
        if (column.columns) {
          column.columns = linkColumnStructure(column.columns, column, depth + 1);
        }
        return column;
      });
    }
    function flattenColumns(columns) {
      return flattenBy(columns, 'columns');
    }
    function assignColumnAccessor(column) {
      // First check for string accessor
      var id = column.id,
        accessor = column.accessor,
        Header = column.Header;
      if (typeof accessor === 'string') {
        id = id || accessor;
        var accessorPath = accessor.split('.');
        accessor = function accessor(row) {
          return getBy(row, accessorPath);
        };
      }
      if (!id && typeof Header === 'string' && Header) {
        id = Header;
      }
      if (!id && column.columns) {
        console.error(column);
        throw new Error('A column ID (or unique "Header" value) is required!');
      }
      if (!id) {
        console.error(column);
        throw new Error('A column ID (or string accessor) is required!');
      }
      Object.assign(column, {
        id: id,
        accessor: accessor
      });
      return column;
    }
    function decorateColumn(column, userDefaultColumn) {
      if (!userDefaultColumn) {
        throw new Error();
      }
      Object.assign(column, _extends({
        // Make sure there is a fallback header, just in case
        Header: emptyRenderer,
        Footer: emptyRenderer
      }, defaultColumn, {}, userDefaultColumn, {}, column));
      Object.assign(column, {
        originalWidth: column.width
      });
      return column;
    } // Build the header groups from the bottom up

    function makeHeaderGroups(allColumns, defaultColumn, additionalHeaderProperties) {
      if (additionalHeaderProperties === void 0) {
        additionalHeaderProperties = function additionalHeaderProperties() {
          return {};
        };
      }
      var headerGroups = [];
      var scanColumns = allColumns;
      var uid = 0;
      var getUID = function getUID() {
        return uid++;
      };
      var _loop = function _loop() {
        // The header group we are creating
        var headerGroup = {
          headers: []
        }; // The parent columns we're going to scan next

        var parentColumns = [];
        var hasParents = scanColumns.some(function (d) {
          return d.parent;
        }); // Scan each column for parents

        scanColumns.forEach(function (column) {
          // What is the latest (last) parent column?
          var latestParentColumn = [].concat(parentColumns).reverse()[0];
          var newParent;
          if (hasParents) {
            // If the column has a parent, add it if necessary
            if (column.parent) {
              newParent = _extends({}, column.parent, {
                originalId: column.parent.id,
                id: column.parent.id + "_" + getUID(),
                headers: [column]
              }, additionalHeaderProperties(column));
            } else {
              // If other columns have parents, we'll need to add a place holder if necessary
              var originalId = column.id + "_placeholder";
              newParent = decorateColumn(_extends({
                originalId: originalId,
                id: column.id + "_placeholder_" + getUID(),
                placeholderOf: column,
                headers: [column]
              }, additionalHeaderProperties(column)), defaultColumn);
            } // If the resulting parent columns are the same, just add
            // the column and increment the header span

            if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {
              latestParentColumn.headers.push(column);
            } else {
              parentColumns.push(newParent);
            }
          }
          headerGroup.headers.push(column);
        });
        headerGroups.push(headerGroup); // Start scanning the parent columns

        scanColumns = parentColumns;
      };
      while (scanColumns.length) {
        _loop();
      }
      return headerGroups.reverse();
    }
    var pathObjCache = new Map();
    function getBy(obj, path, def) {
      if (!path) {
        return obj;
      }
      var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);
      var pathObj = pathObjCache.get(cacheKey) || function () {
        var pathObj = makePathArray(path);
        pathObjCache.set(cacheKey, pathObj);
        return pathObj;
      }();
      var val;
      try {
        val = pathObj.reduce(function (cursor, pathPart) {
          return cursor[pathPart];
        }, obj);
      } catch (e) {// continue regardless of error
      }
      return typeof val !== 'undefined' ? val : def;
    }
    function getFirstDefined() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      for (var i = 0; i < args.length; i += 1) {
        if (typeof args[i] !== 'undefined') {
          return args[i];
        }
      }
    }
    function isFunction(a) {
      if (typeof a === 'function') {
        return a;
      }
    }
    function flattenBy(arr, key) {
      var flat = [];
      var recurse = function recurse(arr) {
        arr.forEach(function (d) {
          if (!d[key]) {
            flat.push(d);
          } else {
            recurse(d[key]);
          }
        });
      };
      recurse(arr);
      return flat;
    }
    function expandRows(rows, _ref) {
      var manualExpandedKey = _ref.manualExpandedKey,
        expanded = _ref.expanded,
        _ref$expandSubRows = _ref.expandSubRows,
        expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;
      var expandedRows = [];
      var handleRow = function handleRow(row, addToExpandedRows) {
        if (addToExpandedRows === void 0) {
          addToExpandedRows = true;
        }
        row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];
        row.canExpand = row.subRows && !!row.subRows.length;
        if (addToExpandedRows) {
          expandedRows.push(row);
        }
        if (row.subRows && row.subRows.length && row.isExpanded) {
          row.subRows.forEach(function (row) {
            return handleRow(row, expandSubRows);
          });
        }
      };
      rows.forEach(function (row) {
        return handleRow(row);
      });
      return expandedRows;
    }
    function getFilterMethod(filter, userFilterTypes, filterTypes) {
      return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;
    }
    function shouldAutoRemoveFilter(autoRemove, value, column) {
      return autoRemove ? autoRemove(value, column) : typeof value === 'undefined';
    }
    function unpreparedAccessWarning() {
      throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');
    }
    var passiveSupported = null;
    function passiveEventSupported() {
      // memoize support to avoid adding multiple test events
      if (typeof passiveSupported === 'boolean') return passiveSupported;
      var supported = false;
      try {
        var options = {
          get passive() {
            supported = true;
            return false;
          }
        };
        window.addEventListener('test', null, options);
        window.removeEventListener('test', null, options);
      } catch (err) {
        supported = false;
      }
      passiveSupported = supported;
      return passiveSupported;
    } //

    var reOpenBracket = /\[/g;
    var reCloseBracket = /\]/g;
    function makePathArray(obj) {
      return flattenDeep(obj) // remove all periods in parts
      .map(function (d) {
        return String(d).replace('.', '_');
      }) // join parts using period
      .join('.') // replace brackets with periods
      .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods
      .split('.');
    }
    function flattenDeep(arr, newArr) {
      if (newArr === void 0) {
        newArr = [];
      }
      if (!Array.isArray(arr)) {
        newArr.push(arr);
      } else {
        for (var i = 0; i < arr.length; i += 1) {
          flattenDeep(arr[i], newArr);
        }
      }
      return newArr;
    }
    var defaultGetTableProps = function defaultGetTableProps(props) {
      return _extends({
        role: 'table'
      }, props);
    };
    var defaultGetTableBodyProps = function defaultGetTableBodyProps(props) {
      return _extends({
        role: 'rowgroup'
      }, props);
    };
    var defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {
      var column = _ref.column;
      return _extends({
        key: "header_" + column.id,
        colSpan: column.totalVisibleHeaderCount,
        role: 'columnheader'
      }, props);
    };
    var defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {
      var column = _ref2.column;
      return _extends({
        key: "footer_" + column.id,
        colSpan: column.totalVisibleHeaderCount
      }, props);
    };
    var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {
      var index = _ref3.index;
      return _extends({
        key: "headerGroup_" + index,
        role: 'row'
      }, props);
    };
    var defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {
      var index = _ref4.index;
      return _extends({
        key: "footerGroup_" + index
      }, props);
    };
    var defaultGetRowProps = function defaultGetRowProps(props, _ref5) {
      var row = _ref5.row;
      return _extends({
        key: "row_" + row.id,
        role: 'row'
      }, props);
    };
    var defaultGetCellProps = function defaultGetCellProps(props, _ref6) {
      var cell = _ref6.cell;
      return _extends({
        key: "cell_" + cell.row.id + "_" + cell.column.id,
        role: 'cell'
      }, props);
    };
    function makeDefaultPluginHooks() {
      return {
        useOptions: [],
        stateReducers: [],
        useControlledState: [],
        columns: [],
        columnsDeps: [],
        allColumns: [],
        allColumnsDeps: [],
        accessValue: [],
        materializedColumns: [],
        materializedColumnsDeps: [],
        useInstanceAfterData: [],
        visibleColumns: [],
        visibleColumnsDeps: [],
        headerGroups: [],
        headerGroupsDeps: [],
        useInstanceBeforeDimensions: [],
        useInstance: [],
        prepareRow: [],
        getTableProps: [defaultGetTableProps],
        getTableBodyProps: [defaultGetTableBodyProps],
        getHeaderGroupProps: [defaultGetHeaderGroupProps],
        getFooterGroupProps: [defaultGetFooterGroupProps],
        getHeaderProps: [defaultGetHeaderProps],
        getFooterProps: [defaultGetFooterProps],
        getRowProps: [defaultGetRowProps],
        getCellProps: [defaultGetCellProps],
        useFinalInstance: []
      };
    }
    actions.resetHiddenColumns = 'resetHiddenColumns';
    actions.toggleHideColumn = 'toggleHideColumn';
    actions.setHiddenColumns = 'setHiddenColumns';
    actions.toggleHideAllColumns = 'toggleHideAllColumns';
    var useColumnVisibility = function useColumnVisibility(hooks) {
      hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];
      hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];
      hooks.stateReducers.push(reducer);
      hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);
      hooks.headerGroupsDeps.push(function (deps, _ref) {
        var instance = _ref.instance;
        return [].concat(deps, [instance.state.hiddenColumns]);
      });
      hooks.useInstance.push(useInstance);
    };
    useColumnVisibility.pluginName = 'useColumnVisibility';
    var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {
      var column = _ref2.column;
      return [props, {
        onChange: function onChange(e) {
          column.toggleHidden(!e.target.checked);
        },
        style: {
          cursor: 'pointer'
        },
        checked: column.isVisible,
        title: 'Toggle Column Visible'
      }];
    };
    var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {
      var instance = _ref3.instance;
      return [props, {
        onChange: function onChange(e) {
          instance.toggleHideAllColumns(!e.target.checked);
        },
        style: {
          cursor: 'pointer'
        },
        checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,
        title: 'Toggle All Columns Hidden',
        indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length
      }];
    };
    function reducer(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          hiddenColumns: []
        }, state);
      }
      if (action.type === actions.resetHiddenColumns) {
        return _extends({}, state, {
          hiddenColumns: instance.initialState.hiddenColumns || []
        });
      }
      if (action.type === actions.toggleHideColumn) {
        var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);
        var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function (d) {
          return d !== action.columnId;
        });
        return _extends({}, state, {
          hiddenColumns: hiddenColumns
        });
      }
      if (action.type === actions.setHiddenColumns) {
        return _extends({}, state, {
          hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)
        });
      }
      if (action.type === actions.toggleHideAllColumns) {
        var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;
        return _extends({}, state, {
          hiddenColumns: shouldAll ? instance.allColumns.map(function (d) {
            return d.id;
          }) : []
        });
      }
    }
    function useInstanceBeforeDimensions(instance) {
      var headers = instance.headers,
        hiddenColumns = instance.state.hiddenColumns;
      var isMountedRef = React.useRef(false);
      if (!isMountedRef.current) ;
      var handleColumn = function handleColumn(column, parentVisible) {
        column.isVisible = parentVisible && !hiddenColumns.includes(column.id);
        var totalVisibleHeaderCount = 0;
        if (column.headers && column.headers.length) {
          column.headers.forEach(function (subColumn) {
            return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);
          });
        } else {
          totalVisibleHeaderCount = column.isVisible ? 1 : 0;
        }
        column.totalVisibleHeaderCount = totalVisibleHeaderCount;
        return totalVisibleHeaderCount;
      };
      var totalVisibleHeaderCount = 0;
      headers.forEach(function (subHeader) {
        return totalVisibleHeaderCount += handleColumn(subHeader, true);
      });
    }
    function useInstance(instance) {
      var columns = instance.columns,
        flatHeaders = instance.flatHeaders,
        dispatch = instance.dispatch,
        allColumns = instance.allColumns,
        getHooks = instance.getHooks,
        hiddenColumns = instance.state.hiddenColumns,
        _instance$autoResetHi = instance.autoResetHiddenColumns,
        autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;
      var getInstance = useGetLatest(instance);
      var allColumnsHidden = allColumns.length === hiddenColumns.length;
      var toggleHideColumn = React.useCallback(function (columnId, value) {
        return dispatch({
          type: actions.toggleHideColumn,
          columnId: columnId,
          value: value
        });
      }, [dispatch]);
      var setHiddenColumns = React.useCallback(function (value) {
        return dispatch({
          type: actions.setHiddenColumns,
          value: value
        });
      }, [dispatch]);
      var toggleHideAllColumns = React.useCallback(function (value) {
        return dispatch({
          type: actions.toggleHideAllColumns,
          value: value
        });
      }, [dispatch]);
      var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {
        instance: getInstance()
      });
      flatHeaders.forEach(function (column) {
        column.toggleHidden = function (value) {
          dispatch({
            type: actions.toggleHideColumn,
            columnId: column.id,
            value: value
          });
        };
        column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {
          instance: getInstance(),
          column: column
        });
      });
      var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);
      useMountedLayoutEffect(function () {
        if (getAutoResetHiddenColumns()) {
          dispatch({
            type: actions.resetHiddenColumns
          });
        }
      }, [dispatch, columns]);
      Object.assign(instance, {
        allColumnsHidden: allColumnsHidden,
        toggleHideColumn: toggleHideColumn,
        setHiddenColumns: setHiddenColumns,
        toggleHideAllColumns: toggleHideAllColumns,
        getToggleHideAllColumnsProps: getToggleHideAllColumnsProps
      });
    }
    var defaultInitialState = {};
    var defaultColumnInstance = {};
    var defaultReducer = function defaultReducer(state, action, prevState) {
      return state;
    };
    var defaultGetSubRows = function defaultGetSubRows(row, index) {
      return row.subRows || [];
    };
    var defaultGetRowId = function defaultGetRowId(row, index, parent) {
      return "" + (parent ? [parent.id, index].join('.') : index);
    };
    var defaultUseControlledState = function defaultUseControlledState(d) {
      return d;
    };
    function applyDefaults(props) {
      var _props$initialState = props.initialState,
        initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,
        _props$defaultColumn = props.defaultColumn,
        defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,
        _props$getSubRows = props.getSubRows,
        getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,
        _props$getRowId = props.getRowId,
        getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,
        _props$stateReducer = props.stateReducer,
        stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer,
        _props$useControlledS = props.useControlledState,
        useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS,
        rest = _objectWithoutPropertiesLoose(props, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]);
      return _extends({}, rest, {
        initialState: initialState,
        defaultColumn: defaultColumn,
        getSubRows: getSubRows,
        getRowId: getRowId,
        stateReducer: stateReducer,
        useControlledState: useControlledState
      });
    }
    var useTable = function useTable(props) {
      for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        plugins[_key - 1] = arguments[_key];
      }

      // Apply default props
      props = applyDefaults(props); // Add core plugins

      plugins = [useColumnVisibility].concat(plugins); // Create the table instance

      var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)

      var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance

      Object.assign(getInstance(), _extends({}, props, {
        plugins: plugins,
        hooks: makeDefaultPluginHooks()
      })); // Allow plugins to register hooks as early as possible

      plugins.filter(Boolean).forEach(function (plugin) {
        plugin(getInstance().hooks);
      }); // Consume all hooks and make a getter for them

      var getHooks = useGetLatest(getInstance().hooks);
      getInstance().getHooks = getHooks;
      delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table

      Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));
      var _getInstance = getInstance(),
        data = _getInstance.data,
        userColumns = _getInstance.columns,
        initialState = _getInstance.initialState,
        defaultColumn = _getInstance.defaultColumn,
        getSubRows = _getInstance.getSubRows,
        getRowId = _getInstance.getRowId,
        stateReducer = _getInstance.stateReducer,
        useControlledState = _getInstance.useControlledState; // Setup user reducer ref

      var getStateReducer = useGetLatest(stateReducer); // Build the reducer

      var reducer = React.useCallback(function (state, action) {
        // Detect invalid actions
        if (!action.type) {
          console.info({
            action: action
          });
          throw new Error('Unknown Action 👆');
        } // Reduce the state from all plugin reducers

        return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function (s, handler) {
          return handler(s, action, state, getInstance()) || s;
        }, state);
      }, [getHooks, getStateReducer, getInstance]); // Start the reducer

      var _React$useReducer = React.useReducer(reducer, undefined, function () {
          return reducer(initialState, {
            type: actions.init
          });
        }),
        reducerState = _React$useReducer[0],
        dispatch = _React$useReducer[1]; // Allow the user to control the final state with hooks

      var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {
        instance: getInstance()
      });
      Object.assign(getInstance(), {
        state: state,
        dispatch: dispatch
      }); // Decorate All the columns

      var columns = React.useMemo(function () {
        return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {
          instance: getInstance()
        }));
      }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {
        instance: getInstance()
      })));
      getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate
      // those columns (and trigger this memoization via deps)

      var allColumns = React.useMemo(function () {
        return reduceHooks(getHooks().allColumns, flattenColumns(columns), {
          instance: getInstance()
        }).map(assignColumnAccessor);
      }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {
        instance: getInstance()
      })));
      getInstance().allColumns = allColumns; // Access the row model using initial columns

      var _React$useMemo = React.useMemo(function () {
          var rows = [];
          var flatRows = [];
          var rowsById = {};
          var allColumnsQueue = [].concat(allColumns);
          while (allColumnsQueue.length) {
            var column = allColumnsQueue.shift();
            accessRowsForColumn({
              data: data,
              rows: rows,
              flatRows: flatRows,
              rowsById: rowsById,
              column: column,
              getRowId: getRowId,
              getSubRows: getSubRows,
              accessValueHooks: getHooks().accessValue,
              getInstance: getInstance
            });
          }
          return [rows, flatRows, rowsById];
        }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance]),
        rows = _React$useMemo[0],
        flatRows = _React$useMemo[1],
        rowsById = _React$useMemo[2];
      Object.assign(getInstance(), {
        rows: rows,
        initialRows: [].concat(rows),
        flatRows: flatRows,
        rowsById: rowsById // materializedColumns,
      });

      loopHooks(getHooks().useInstanceAfterData, getInstance()); // Get the flat list of all columns AFTER the rows
      // have been access, and allow hooks to decorate
      // those columns (and trigger this memoization via deps)

      var visibleColumns = React.useMemo(function () {
        return reduceHooks(getHooks().visibleColumns, allColumns, {
          instance: getInstance()
        }).map(function (d) {
          return decorateColumn(d, defaultColumn);
        });
      }, [getHooks, allColumns, getInstance, defaultColumn].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {
        instance: getInstance()
      }))); // Combine new visible columns with all columns

      allColumns = React.useMemo(function () {
        var columns = [].concat(visibleColumns);
        allColumns.forEach(function (column) {
          if (!columns.find(function (d) {
            return d.id === column.id;
          })) {
            columns.push(column);
          }
        });
        return columns;
      }, [allColumns, visibleColumns]);
      getInstance().allColumns = allColumns;
      {
        var duplicateColumns = allColumns.filter(function (column, i) {
          return allColumns.findIndex(function (d) {
            return d.id === column.id;
          }) !== i;
        });
        if (duplicateColumns.length) {
          console.info(allColumns);
          throw new Error("Duplicate columns were found with ids: \"" + duplicateColumns.map(function (d) {
            return d.id;
          }).join(', ') + "\" in the columns array above");
        }
      } // Make the headerGroups

      var headerGroups = React.useMemo(function () {
        return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance());
      }, [getHooks, visibleColumns, defaultColumn, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {
        instance: getInstance()
      })));
      getInstance().headerGroups = headerGroups; // Get the first level of headers

      var headers = React.useMemo(function () {
        return headerGroups.length ? headerGroups[0].headers : [];
      }, [headerGroups]);
      getInstance().headers = headers; // Provide a flat header list for utilities

      getInstance().flatHeaders = headerGroups.reduce(function (all, headerGroup) {
        return [].concat(all, headerGroup.headers);
      }, []);
      loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones

      var visibleColumnsDep = visibleColumns.filter(function (d) {
        return d.isVisible;
      }).map(function (d) {
        return d.id;
      }).sort().join('_');
      visibleColumns = React.useMemo(function () {
        return visibleColumns.filter(function (d) {
          return d.isVisible;
        });
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [visibleColumns, visibleColumnsDep]);
      getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point

      var _calculateHeaderWidth = calculateHeaderWidths(headers),
        totalColumnsMinWidth = _calculateHeaderWidth[0],
        totalColumnsWidth = _calculateHeaderWidth[1],
        totalColumnsMaxWidth = _calculateHeaderWidth[2];
      getInstance().totalColumnsMinWidth = totalColumnsMinWidth;
      getInstance().totalColumnsWidth = totalColumnsWidth;
      getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;
      loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other
      // prop getter properties here.
      ;

      [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function (column) {
        // Give columns/headers rendering power
        column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps

        column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {
          instance: getInstance(),
          column: column
        }); // Give columns/headers a default getFooterProps

        column.getFooterProps = makePropGetter(getHooks().getFooterProps, {
          instance: getInstance(),
          column: column
        });
      });
      getInstance().headerGroups = React.useMemo(function () {
        return headerGroups.filter(function (headerGroup, i) {
          // Filter out any headers and headerGroups that don't have visible columns
          headerGroup.headers = headerGroup.headers.filter(function (column) {
            var recurse = function recurse(headers) {
              return headers.filter(function (column) {
                if (column.headers) {
                  return recurse(column.headers);
                }
                return column.isVisible;
              }).length;
            };
            if (column.headers) {
              return recurse(column.headers);
            }
            return column.isVisible;
          }); // Give headerGroups getRowProps

          if (headerGroup.headers.length) {
            headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {
              instance: getInstance(),
              headerGroup: headerGroup,
              index: i
            });
            headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {
              instance: getInstance(),
              headerGroup: headerGroup,
              index: i
            });
            return true;
          }
          return false;
        });
      }, [headerGroups, getInstance, getHooks]);
      getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // The prepareRow function is absolutely necessary and MUST be called on
      // any rows the user wishes to be displayed.

      getInstance().prepareRow = React.useCallback(function (row) {
        row.getRowProps = makePropGetter(getHooks().getRowProps, {
          instance: getInstance(),
          row: row
        }); // Build the visible cells for each row

        row.allCells = allColumns.map(function (column) {
          var value = row.values[column.id];
          var cell = {
            column: column,
            row: row,
            value: value
          }; // Give each cell a getCellProps base

          cell.getCellProps = makePropGetter(getHooks().getCellProps, {
            instance: getInstance(),
            cell: cell
          }); // Give each cell a renderer function (supports multiple renderers)

          cell.render = makeRenderer(getInstance(), column, {
            row: row,
            cell: cell,
            value: value
          });
          return cell;
        });
        row.cells = visibleColumns.map(function (column) {
          return row.allCells.find(function (cell) {
            return cell.column.id === column.id;
          });
        }); // need to apply any row specific hooks (useExpanded requires this)

        loopHooks(getHooks().prepareRow, row, {
          instance: getInstance()
        });
      }, [getHooks, getInstance, allColumns, visibleColumns]);
      getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {
        instance: getInstance()
      });
      getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {
        instance: getInstance()
      });
      loopHooks(getHooks().useFinalInstance, getInstance());
      return getInstance();
    };
    function calculateHeaderWidths(headers, left) {
      if (left === void 0) {
        left = 0;
      }
      var sumTotalMinWidth = 0;
      var sumTotalWidth = 0;
      var sumTotalMaxWidth = 0;
      var sumTotalFlexWidth = 0;
      headers.forEach(function (header) {
        var subHeaders = header.headers;
        header.totalLeft = left;
        if (subHeaders && subHeaders.length) {
          var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left),
            totalMinWidth = _calculateHeaderWidth2[0],
            totalWidth = _calculateHeaderWidth2[1],
            totalMaxWidth = _calculateHeaderWidth2[2],
            totalFlexWidth = _calculateHeaderWidth2[3];
          header.totalMinWidth = totalMinWidth;
          header.totalWidth = totalWidth;
          header.totalMaxWidth = totalMaxWidth;
          header.totalFlexWidth = totalFlexWidth;
        } else {
          header.totalMinWidth = header.minWidth;
          header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);
          header.totalMaxWidth = header.maxWidth;
          header.totalFlexWidth = header.canResize ? header.totalWidth : 0;
        }
        if (header.isVisible) {
          left += header.totalWidth;
          sumTotalMinWidth += header.totalMinWidth;
          sumTotalWidth += header.totalWidth;
          sumTotalMaxWidth += header.totalMaxWidth;
          sumTotalFlexWidth += header.totalFlexWidth;
        }
      });
      return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];
    }
    function accessRowsForColumn(_ref) {
      var data = _ref.data,
        rows = _ref.rows,
        flatRows = _ref.flatRows,
        rowsById = _ref.rowsById,
        column = _ref.column,
        getRowId = _ref.getRowId,
        getSubRows = _ref.getSubRows,
        accessValueHooks = _ref.accessValueHooks,
        getInstance = _ref.getInstance;

      // Access the row's data column-by-column
      // We do it this way so we can incrementally add materialized
      // columns after the first pass and avoid excessive looping
      var accessRow = function accessRow(originalRow, rowIndex, depth, parent, parentRows) {
        if (depth === void 0) {
          depth = 0;
        }

        // Keep the original reference around
        var original = originalRow;
        var id = getRowId(originalRow, rowIndex, parent);
        var row = rowsById[id]; // If the row hasn't been created, let's make it

        if (!row) {
          row = {
            id: id,
            original: original,
            index: rowIndex,
            depth: depth,
            cells: [{}] // This is a dummy cell
          }; // Override common array functions (and the dummy cell's getCellProps function)
          // to show an error if it is accessed without calling prepareRow

          row.cells.map = unpreparedAccessWarning;
          row.cells.filter = unpreparedAccessWarning;
          row.cells.forEach = unpreparedAccessWarning;
          row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values

          row.values = {}; // Push this row into the parentRows array

          parentRows.push(row); // Keep track of every row in a flat array

          flatRows.push(row); // Also keep track of every row by its ID

          rowsById[id] = row; // Get the original subrows

          row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them

          if (row.originalSubRows) {
            var subRows = [];
            row.originalSubRows.forEach(function (d, i) {
              return accessRow(d, i, depth + 1, row, subRows);
            }); // Keep the new subRows array on the row

            row.subRows = subRows;
          }
        } else if (row.subRows) {
          // If the row exists, then it's already been accessed
          // Keep recursing, but don't worry about passing the
          // accumlator array (those rows already exist)
          row.originalSubRows.forEach(function (d, i) {
            return accessRow(d, i, depth + 1, row);
          });
        } // If the column has an accessor, use it to get a value

        if (column.accessor) {
          row.values[column.id] = column.accessor(originalRow, rowIndex, row);
        } // Allow plugins to manipulate the column value

        row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {
          row: row,
          column: column,
          instance: getInstance()
        }, true);
      };
      data.forEach(function (originalRow, rowIndex) {
        return accessRow(originalRow, rowIndex, 0, undefined, rows);
      });
    }
    actions.resetExpanded = 'resetExpanded';
    actions.toggleRowExpanded = 'toggleRowExpanded';
    actions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';
    var useExpanded = function useExpanded(hooks) {
      hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];
      hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];
      hooks.stateReducers.push(reducer$1);
      hooks.useInstance.push(useInstance$1);
      hooks.prepareRow.push(prepareRow);
    };
    useExpanded.pluginName = 'useExpanded';
    var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps(props, _ref) {
      var instance = _ref.instance;
      return [props, {
        onClick: function onClick(e) {
          instance.toggleAllRowsExpanded();
        },
        style: {
          cursor: 'pointer'
        },
        title: 'Toggle All Rows Expanded'
      }];
    };
    var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps(props, _ref2) {
      var row = _ref2.row;
      return [props, {
        onClick: function onClick() {
          row.toggleRowExpanded();
        },
        style: {
          cursor: 'pointer'
        },
        title: 'Toggle Row Expanded'
      }];
    }; // Reducer

    function reducer$1(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          expanded: {}
        }, state);
      }
      if (action.type === actions.resetExpanded) {
        return _extends({}, state, {
          expanded: instance.initialState.expanded || {}
        });
      }
      if (action.type === actions.toggleAllRowsExpanded) {
        var value = action.value;
        var isAllRowsExpanded = instance.isAllRowsExpanded,
          rowsById = instance.rowsById;
        var expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;
        if (expandAll) {
          var expanded = {};
          Object.keys(rowsById).forEach(function (rowId) {
            expanded[rowId] = true;
          });
          return _extends({}, state, {
            expanded: expanded
          });
        }
        return _extends({}, state, {
          expanded: {}
        });
      }
      if (action.type === actions.toggleRowExpanded) {
        var id = action.id,
          setExpanded = action.value;
        var exists = state.expanded[id];
        var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;
        if (!exists && shouldExist) {
          var _extends2;
          return _extends({}, state, {
            expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))
          });
        } else if (exists && !shouldExist) {
          var _state$expanded = state.expanded;
            _state$expanded[id];
            var rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));
          return _extends({}, state, {
            expanded: rest
          });
        } else {
          return state;
        }
      }
    }
    function useInstance$1(instance) {
      var data = instance.data,
        rows = instance.rows,
        rowsById = instance.rowsById,
        _instance$manualExpan = instance.manualExpandedKey,
        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,
        _instance$paginateExp = instance.paginateExpandedRows,
        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,
        _instance$expandSubRo = instance.expandSubRows,
        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,
        _instance$autoResetEx = instance.autoResetExpanded,
        autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx,
        getHooks = instance.getHooks,
        plugins = instance.plugins,
        expanded = instance.state.expanded,
        dispatch = instance.dispatch;
      ensurePluginOrder(plugins, ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'], 'useExpanded');
      var getAutoResetExpanded = useGetLatest(autoResetExpanded);
      var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);
      if (isAllRowsExpanded) {
        if (Object.keys(rowsById).some(function (id) {
          return !expanded[id];
        })) {
          isAllRowsExpanded = false;
        }
      } // Bypass any effects from firing when this changes

      useMountedLayoutEffect(function () {
        if (getAutoResetExpanded()) {
          dispatch({
            type: actions.resetExpanded
          });
        }
      }, [dispatch, data]);
      var toggleRowExpanded = React.useCallback(function (id, value) {
        dispatch({
          type: actions.toggleRowExpanded,
          id: id,
          value: value
        });
      }, [dispatch]);
      var toggleAllRowsExpanded = React.useCallback(function (value) {
        return dispatch({
          type: actions.toggleAllRowsExpanded,
          value: value
        });
      }, [dispatch]);
      var expandedRows = React.useMemo(function () {
        if (paginateExpandedRows) {
          return expandRows(rows, {
            manualExpandedKey: manualExpandedKey,
            expanded: expanded,
            expandSubRows: expandSubRows
          });
        }
        return rows;
      }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);
      var expandedDepth = React.useMemo(function () {
        return findExpandedDepth(expanded);
      }, [expanded]);
      var getInstance = useGetLatest(instance);
      var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {
        instance: getInstance()
      });
      Object.assign(instance, {
        preExpandedRows: rows,
        expandedRows: expandedRows,
        rows: expandedRows,
        expandedDepth: expandedDepth,
        isAllRowsExpanded: isAllRowsExpanded,
        toggleRowExpanded: toggleRowExpanded,
        toggleAllRowsExpanded: toggleAllRowsExpanded,
        getToggleAllRowsExpandedProps: getToggleAllRowsExpandedProps
      });
    }
    function prepareRow(row, _ref3) {
      var getHooks = _ref3.instance.getHooks,
        instance = _ref3.instance;
      row.toggleRowExpanded = function (set) {
        return instance.toggleRowExpanded(row.id, set);
      };
      row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {
        instance: instance,
        row: row
      });
    }
    function findExpandedDepth(expanded) {
      var maxDepth = 0;
      Object.keys(expanded).forEach(function (id) {
        var splitId = id.split('.');
        maxDepth = Math.max(maxDepth, splitId.length);
      });
      return maxDepth;
    }
    var text = function text(rows, ids, filterValue) {
      rows = rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());
        });
      });
      return rows;
    };
    text.autoRemove = function (val) {
      return !val;
    };
    var exactText = function exactText(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;
        });
      });
    };
    exactText.autoRemove = function (val) {
      return !val;
    };
    var exactTextCase = function exactTextCase(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;
        });
      });
    };
    exactTextCase.autoRemove = function (val) {
      return !val;
    };
    var includes = function includes(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return rowValue.includes(filterValue);
        });
      });
    };
    includes.autoRemove = function (val) {
      return !val || !val.length;
    };
    var includesAll = function includesAll(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return rowValue && rowValue.length && filterValue.every(function (val) {
            return rowValue.includes(val);
          });
        });
      });
    };
    includesAll.autoRemove = function (val) {
      return !val || !val.length;
    };
    var includesSome = function includesSome(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return rowValue && rowValue.length && filterValue.some(function (val) {
            return rowValue.includes(val);
          });
        });
      });
    };
    includesSome.autoRemove = function (val) {
      return !val || !val.length;
    };
    var includesValue = function includesValue(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return filterValue.includes(rowValue);
        });
      });
    };
    includesValue.autoRemove = function (val) {
      return !val || !val.length;
    };
    var exact = function exact(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return rowValue === filterValue;
        });
      });
    };
    exact.autoRemove = function (val) {
      return typeof val === 'undefined';
    };
    var equals = function equals(rows, ids, filterValue) {
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq

          return rowValue == filterValue;
        });
      });
    };
    equals.autoRemove = function (val) {
      return val == null;
    };
    var between = function between(rows, ids, filterValue) {
      var _ref = filterValue || [],
        min = _ref[0],
        max = _ref[1];
      min = typeof min === 'number' ? min : -Infinity;
      max = typeof max === 'number' ? max : Infinity;
      if (min > max) {
        var temp = min;
        min = max;
        max = temp;
      }
      return rows.filter(function (row) {
        return ids.some(function (id) {
          var rowValue = row.values[id];
          return rowValue >= min && rowValue <= max;
        });
      });
    };
    between.autoRemove = function (val) {
      return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';
    };
    var filterTypes = /*#__PURE__*/Object.freeze({
      __proto__: null,
      text: text,
      exactText: exactText,
      exactTextCase: exactTextCase,
      includes: includes,
      includesAll: includesAll,
      includesSome: includesSome,
      includesValue: includesValue,
      exact: exact,
      equals: equals,
      between: between
    });
    actions.resetFilters = 'resetFilters';
    actions.setFilter = 'setFilter';
    actions.setAllFilters = 'setAllFilters';
    var useFilters = function useFilters(hooks) {
      hooks.stateReducers.push(reducer$2);
      hooks.useInstance.push(useInstance$2);
    };
    useFilters.pluginName = 'useFilters';
    function reducer$2(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          filters: []
        }, state);
      }
      if (action.type === actions.resetFilters) {
        return _extends({}, state, {
          filters: instance.initialState.filters || []
        });
      }
      if (action.type === actions.setFilter) {
        var columnId = action.columnId,
          filterValue = action.filterValue;
        var allColumns = instance.allColumns,
          userFilterTypes = instance.filterTypes;
        var column = allColumns.find(function (d) {
          return d.id === columnId;
        });
        if (!column) {
          throw new Error("React-Table: Could not find a column with id: " + columnId);
        }
        var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
        var previousfilter = state.filters.find(function (d) {
          return d.id === columnId;
        });
        var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //

        if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {
          return _extends({}, state, {
            filters: state.filters.filter(function (d) {
              return d.id !== columnId;
            })
          });
        }
        if (previousfilter) {
          return _extends({}, state, {
            filters: state.filters.map(function (d) {
              if (d.id === columnId) {
                return {
                  id: columnId,
                  value: newFilter
                };
              }
              return d;
            })
          });
        }
        return _extends({}, state, {
          filters: [].concat(state.filters, [{
            id: columnId,
            value: newFilter
          }])
        });
      }
      if (action.type === actions.setAllFilters) {
        var filters = action.filters;
        var _allColumns = instance.allColumns,
          _userFilterTypes = instance.filterTypes;
        return _extends({}, state, {
          // Filter out undefined values
          filters: functionalUpdate(filters, state.filters).filter(function (filter) {
            var column = _allColumns.find(function (d) {
              return d.id === filter.id;
            });
            var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);
            if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)) {
              return false;
            }
            return true;
          })
        });
      }
    }
    function useInstance$2(instance) {
      var data = instance.data,
        rows = instance.rows,
        flatRows = instance.flatRows,
        rowsById = instance.rowsById,
        allColumns = instance.allColumns,
        userFilterTypes = instance.filterTypes,
        manualFilters = instance.manualFilters,
        _instance$defaultCanF = instance.defaultCanFilter,
        defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,
        disableFilters = instance.disableFilters,
        filters = instance.state.filters,
        dispatch = instance.dispatch,
        _instance$autoResetFi = instance.autoResetFilters,
        autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;
      var setFilter = React.useCallback(function (columnId, filterValue) {
        dispatch({
          type: actions.setFilter,
          columnId: columnId,
          filterValue: filterValue
        });
      }, [dispatch]);
      var setAllFilters = React.useCallback(function (filters) {
        dispatch({
          type: actions.setAllFilters,
          filters: filters
        });
      }, [dispatch]);
      allColumns.forEach(function (column) {
        var id = column.id,
          accessor = column.accessor,
          columnDefaultCanFilter = column.defaultCanFilter,
          columnDisableFilters = column.disableFilters; // Determine if a column is filterable

        column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value

        column.setFilter = function (val) {
          return setFilter(column.id, val);
        }; // Provide the current filter value to the column for
        // convenience

        var found = filters.find(function (d) {
          return d.id === id;
        });
        column.filterValue = found && found.value;
      });
      var _React$useMemo = React.useMemo(function () {
          if (manualFilters || !filters.length) {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows = [];
          var filteredRowsById = {}; // Filters top level and nested rows

          var filterRows = function filterRows(rows, depth) {
            if (depth === void 0) {
              depth = 0;
            }
            var filteredRows = rows;
            filteredRows = filters.reduce(function (filteredSoFar, _ref) {
              var columnId = _ref.id,
                filterValue = _ref.value;
              // Find the filters column
              var column = allColumns.find(function (d) {
                return d.id === columnId;
              });
              if (!column) {
                return filteredSoFar;
              }
              if (depth === 0) {
                column.preFilteredRows = filteredSoFar;
              }
              var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
              if (!filterMethod) {
                console.warn("Could not find a valid 'column.filter' for column with the ID: " + column.id + ".");
                return filteredSoFar;
              } // Pass the rows, id, filterValue and column to the filterMethod
              // to get the filtered rows back

              column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);
              return column.filteredRows;
            }, rows); // Apply the filter to any subRows
            // We technically could do this recursively in the above loop,
            // but that would severely hinder the API for the user, since they
            // would be required to do that recursion in some scenarios

            filteredRows.forEach(function (row) {
              filteredFlatRows.push(row);
              filteredRowsById[row.id] = row;
              if (!row.subRows) {
                return;
              }
              row.subRows = row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows;
            });
            return filteredRows;
          };
          return [filterRows(rows), filteredFlatRows, filteredRowsById];
        }, [manualFilters, filters, rows, flatRows, rowsById, allColumns, userFilterTypes]),
        filteredRows = _React$useMemo[0],
        filteredFlatRows = _React$useMemo[1],
        filteredRowsById = _React$useMemo[2];
      React.useMemo(function () {
        // Now that each filtered column has it's partially filtered rows,
        // lets assign the final filtered rows to all of the other columns
        var nonFilteredColumns = allColumns.filter(function (column) {
          return !filters.find(function (d) {
            return d.id === column.id;
          });
        }); // This essentially enables faceted filter options to be built easily
        // using every column's preFilteredRows value

        nonFilteredColumns.forEach(function (column) {
          column.preFilteredRows = filteredRows;
          column.filteredRows = filteredRows;
        });
      }, [filteredRows, filters, allColumns]);
      var getAutoResetFilters = useGetLatest(autoResetFilters);
      useMountedLayoutEffect(function () {
        if (getAutoResetFilters()) {
          dispatch({
            type: actions.resetFilters
          });
        }
      }, [dispatch, manualFilters ? null : data]);
      Object.assign(instance, {
        preFilteredRows: rows,
        preFilteredFlatRows: flatRows,
        preFilteredRowsById: rowsById,
        filteredRows: filteredRows,
        filteredFlatRows: filteredFlatRows,
        filteredRowsById: filteredRowsById,
        rows: filteredRows,
        flatRows: filteredFlatRows,
        rowsById: filteredRowsById,
        setFilter: setFilter,
        setAllFilters: setAllFilters
      });
    }
    actions.resetGlobalFilter = 'resetGlobalFilter';
    actions.setGlobalFilter = 'setGlobalFilter';
    var useGlobalFilter = function useGlobalFilter(hooks) {
      hooks.stateReducers.push(reducer$3);
      hooks.useInstance.push(useInstance$3);
    };
    useGlobalFilter.pluginName = 'useGlobalFilter';
    function reducer$3(state, action, previousState, instance) {
      if (action.type === actions.resetGlobalFilter) {
        return _extends({}, state, {
          globalFilter: instance.initialState.globalFilter || undefined
        });
      }
      if (action.type === actions.setGlobalFilter) {
        var filterValue = action.filterValue;
        var userFilterTypes = instance.userFilterTypes;
        var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);
        var newFilter = functionalUpdate(filterValue, state.globalFilter); //

        if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {
          state.globalFilter;
            var stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, ["globalFilter"]);
          return stateWithoutGlobalFilter;
        }
        return _extends({}, state, {
          globalFilter: newFilter
        });
      }
    }
    function useInstance$3(instance) {
      var data = instance.data,
        rows = instance.rows,
        flatRows = instance.flatRows,
        rowsById = instance.rowsById,
        allColumns = instance.allColumns,
        userFilterTypes = instance.filterTypes,
        globalFilter = instance.globalFilter,
        manualGlobalFilter = instance.manualGlobalFilter,
        globalFilterValue = instance.state.globalFilter,
        dispatch = instance.dispatch,
        _instance$autoResetGl = instance.autoResetGlobalFilter,
        autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl,
        disableGlobalFilter = instance.disableGlobalFilter;
      var setGlobalFilter = React.useCallback(function (filterValue) {
        dispatch({
          type: actions.setGlobalFilter,
          filterValue: filterValue
        });
      }, [dispatch]); // TODO: Create a filter cache for incremental high speed multi-filtering
      // This gets pretty complicated pretty fast, since you have to maintain a
      // cache for each row group (top-level rows, and each row's recursive subrows)
      // This would make multi-filtering a lot faster though. Too far?

      var _React$useMemo = React.useMemo(function () {
          if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows = [];
          var filteredRowsById = {};
          var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);
          if (!filterMethod) {
            console.warn("Could not find a valid 'globalFilter' option.");
            return rows;
          }
          allColumns.forEach(function (column) {
            var columnDisableGlobalFilter = column.disableGlobalFilter;
            column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : undefined, disableGlobalFilter === true ? false : undefined, true);
          });
          var filterableColumns = allColumns.filter(function (c) {
            return c.canFilter === true;
          }); // Filters top level and nested rows

          var filterRows = function filterRows(filteredRows) {
            filteredRows = filterMethod(filteredRows, filterableColumns.map(function (d) {
              return d.id;
            }), globalFilterValue);
            filteredRows.forEach(function (row) {
              filteredFlatRows.push(row);
              filteredRowsById[row.id] = row;
              row.subRows = row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows;
            });
            return filteredRows;
          };
          return [filterRows(rows), filteredFlatRows, filteredRowsById];
        }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns, rows, flatRows, rowsById, disableGlobalFilter]),
        globalFilteredRows = _React$useMemo[0],
        globalFilteredFlatRows = _React$useMemo[1],
        globalFilteredRowsById = _React$useMemo[2];
      var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);
      useMountedLayoutEffect(function () {
        if (getAutoResetGlobalFilter()) {
          dispatch({
            type: actions.resetGlobalFilter
          });
        }
      }, [dispatch, manualGlobalFilter ? null : data]);
      Object.assign(instance, {
        preGlobalFilteredRows: rows,
        preGlobalFilteredFlatRows: flatRows,
        preGlobalFilteredRowsById: rowsById,
        globalFilteredRows: globalFilteredRows,
        globalFilteredFlatRows: globalFilteredFlatRows,
        globalFilteredRowsById: globalFilteredRowsById,
        rows: globalFilteredRows,
        flatRows: globalFilteredFlatRows,
        rowsById: globalFilteredRowsById,
        setGlobalFilter: setGlobalFilter,
        disableGlobalFilter: disableGlobalFilter
      });
    }
    function sum(values, aggregatedValues) {
      // It's faster to just add the aggregations together instead of
      // process leaf nodes individually
      return aggregatedValues.reduce(function (sum, next) {
        return sum + (typeof next === 'number' ? next : 0);
      }, 0);
    }
    function min(values) {
      var min = values[0] || 0;
      values.forEach(function (value) {
        if (typeof value === 'number') {
          min = Math.min(min, value);
        }
      });
      return min;
    }
    function max(values) {
      var max = values[0] || 0;
      values.forEach(function (value) {
        if (typeof value === 'number') {
          max = Math.max(max, value);
        }
      });
      return max;
    }
    function minMax(values) {
      var min = values[0] || 0;
      var max = values[0] || 0;
      values.forEach(function (value) {
        if (typeof value === 'number') {
          min = Math.min(min, value);
          max = Math.max(max, value);
        }
      });
      return min + ".." + max;
    }
    function average(values) {
      return sum(null, values) / values.length;
    }
    function median(values) {
      if (!values.length) {
        return null;
      }
      var mid = Math.floor(values.length / 2);
      var nums = [].concat(values).sort(function (a, b) {
        return a - b;
      });
      return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
    }
    function unique(values) {
      return Array.from(new Set(values).values());
    }
    function uniqueCount(values) {
      return new Set(values).size;
    }
    function count(values) {
      return values.length;
    }
    var aggregations = /*#__PURE__*/Object.freeze({
      __proto__: null,
      sum: sum,
      min: min,
      max: max,
      minMax: minMax,
      average: average,
      median: median,
      unique: unique,
      uniqueCount: uniqueCount,
      count: count
    });
    var emptyArray = [];
    var emptyObject = {}; // Actions

    actions.resetGroupBy = 'resetGroupBy';
    actions.setGroupBy = 'setGroupBy';
    actions.toggleGroupBy = 'toggleGroupBy';
    var useGroupBy = function useGroupBy(hooks) {
      hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];
      hooks.stateReducers.push(reducer$4);
      hooks.visibleColumnsDeps.push(function (deps, _ref) {
        var instance = _ref.instance;
        return [].concat(deps, [instance.state.groupBy]);
      });
      hooks.visibleColumns.push(visibleColumns);
      hooks.useInstance.push(useInstance$4);
      hooks.prepareRow.push(prepareRow$1);
    };
    useGroupBy.pluginName = 'useGroupBy';
    var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {
      var header = _ref2.header;
      return [props, {
        onClick: header.canGroupBy ? function (e) {
          e.persist();
          header.toggleGroupBy();
        } : undefined,
        style: {
          cursor: header.canGroupBy ? 'pointer' : undefined
        },
        title: 'Toggle GroupBy'
      }];
    }; // Reducer

    function reducer$4(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          groupBy: []
        }, state);
      }
      if (action.type === actions.resetGroupBy) {
        return _extends({}, state, {
          groupBy: instance.initialState.groupBy || []
        });
      }
      if (action.type === actions.setGroupBy) {
        var value = action.value;
        return _extends({}, state, {
          groupBy: value
        });
      }
      if (action.type === actions.toggleGroupBy) {
        var columnId = action.columnId,
          setGroupBy = action.value;
        var resolvedGroupBy = typeof setGroupBy !== 'undefined' ? setGroupBy : !state.groupBy.includes(columnId);
        if (resolvedGroupBy) {
          return _extends({}, state, {
            groupBy: [].concat(state.groupBy, [columnId])
          });
        }
        return _extends({}, state, {
          groupBy: state.groupBy.filter(function (d) {
            return d !== columnId;
          })
        });
      }
    }
    function visibleColumns(columns, _ref3) {
      var groupBy = _ref3.instance.state.groupBy;
      // Sort grouped columns to the start of the column list
      // before the headers are built
      var groupByColumns = groupBy.map(function (g) {
        return columns.find(function (col) {
          return col.id === g;
        });
      }).filter(Boolean);
      var nonGroupByColumns = columns.filter(function (col) {
        return !groupBy.includes(col.id);
      });
      columns = [].concat(groupByColumns, nonGroupByColumns);
      columns.forEach(function (column) {
        column.isGrouped = groupBy.includes(column.id);
        column.groupedIndex = groupBy.indexOf(column.id);
      });
      return columns;
    }
    var defaultUserAggregations = {};
    function useInstance$4(instance) {
      var data = instance.data,
        rows = instance.rows,
        flatRows = instance.flatRows,
        rowsById = instance.rowsById,
        allColumns = instance.allColumns,
        flatHeaders = instance.flatHeaders,
        _instance$groupByFn = instance.groupByFn,
        groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,
        manualGroupBy = instance.manualGroupBy,
        _instance$aggregation = instance.aggregations,
        userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,
        plugins = instance.plugins,
        groupBy = instance.state.groupBy,
        dispatch = instance.dispatch,
        _instance$autoResetGr = instance.autoResetGroupBy,
        autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr,
        disableGroupBy = instance.disableGroupBy,
        defaultCanGroupBy = instance.defaultCanGroupBy,
        getHooks = instance.getHooks;
      ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy');
      var getInstance = useGetLatest(instance);
      allColumns.forEach(function (column) {
        var accessor = column.accessor,
          defaultColumnGroupBy = column.defaultGroupBy,
          columnDisableGroupBy = column.disableGroupBy;
        column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);
        if (column.canGroupBy) {
          column.toggleGroupBy = function () {
            return instance.toggleGroupBy(column.id);
          };
        }
        column.Aggregated = column.Aggregated || column.Cell;
      });
      var toggleGroupBy = React.useCallback(function (columnId, value) {
        dispatch({
          type: actions.toggleGroupBy,
          columnId: columnId,
          value: value
        });
      }, [dispatch]);
      var setGroupBy = React.useCallback(function (value) {
        dispatch({
          type: actions.setGroupBy,
          value: value
        });
      }, [dispatch]);
      flatHeaders.forEach(function (header) {
        header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {
          instance: getInstance(),
          header: header
        });
      });
      var _React$useMemo = React.useMemo(function () {
          if (manualGroupBy || !groupBy.length) {
            return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];
          } // Ensure that the list of filtered columns exist

          var existingGroupBy = groupBy.filter(function (g) {
            return allColumns.find(function (col) {
              return col.id === g;
            });
          }); // Find the columns that can or are aggregating
          // Uses each column to aggregate rows into a single value

          var aggregateRowsToValues = function aggregateRowsToValues(leafRows, groupedRows, depth) {
            var values = {};
            allColumns.forEach(function (column) {
              // Don't aggregate columns that are in the groupBy
              if (existingGroupBy.includes(column.id)) {
                values[column.id] = groupedRows[0] ? groupedRows[0].values[column.id] : null;
                return;
              } // Aggregate the values

              var aggregateFn = typeof column.aggregate === 'function' ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];
              if (aggregateFn) {
                // Get the columnValues to aggregate
                var groupedValues = groupedRows.map(function (row) {
                  return row.values[column.id];
                }); // Get the columnValues to aggregate

                var leafValues = leafRows.map(function (row) {
                  var columnValue = row.values[column.id];
                  if (!depth && column.aggregateValue) {
                    var aggregateValueFn = typeof column.aggregateValue === 'function' ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];
                    if (!aggregateValueFn) {
                      console.info({
                        column: column
                      });
                      throw new Error("React Table: Invalid column.aggregateValue option for column listed above");
                    }
                    columnValue = aggregateValueFn(columnValue, row, column);
                  }
                  return columnValue;
                });
                values[column.id] = aggregateFn(leafValues, groupedValues);
              } else if (column.aggregate) {
                console.info({
                  column: column
                });
                throw new Error("React Table: Invalid column.aggregate option for column listed above");
              } else {
                values[column.id] = null;
              }
            });
            return values;
          };
          var groupedFlatRows = [];
          var groupedRowsById = {};
          var onlyGroupedFlatRows = [];
          var onlyGroupedRowsById = {};
          var nonGroupedFlatRows = [];
          var nonGroupedRowsById = {}; // Recursively group the data

          var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {
            if (depth === void 0) {
              depth = 0;
            }

            // This is the last level, just return the rows
            if (depth === existingGroupBy.length) {
              return rows;
            }
            var columnId = existingGroupBy[depth]; // Group the rows together for this level

            var rowGroupsMap = groupByFn(rows, columnId); // Peform aggregations for each group

            var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function (_ref4, index) {
              var groupByVal = _ref4[0],
                groupedRows = _ref4[1];
              var id = columnId + ":" + groupByVal;
              id = parentId ? parentId + ">" + id : id; // First, Recurse to group sub rows before aggregation

              var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group

              var leafRows = depth ? flattenBy(groupedRows, 'leafRows') : groupedRows;
              var values = aggregateRowsToValues(leafRows, groupedRows, depth);
              var row = {
                id: id,
                isGrouped: true,
                groupByID: columnId,
                groupByVal: groupByVal,
                values: values,
                subRows: subRows,
                leafRows: leafRows,
                depth: depth,
                index: index
              };
              subRows.forEach(function (subRow) {
                groupedFlatRows.push(subRow);
                groupedRowsById[subRow.id] = subRow;
                if (subRow.isGrouped) {
                  onlyGroupedFlatRows.push(subRow);
                  onlyGroupedRowsById[subRow.id] = subRow;
                } else {
                  nonGroupedFlatRows.push(subRow);
                  nonGroupedRowsById[subRow.id] = subRow;
                }
              });
              return row;
            });
            return aggregatedGroupedRows;
          };
          var groupedRows = groupUpRecursively(rows);
          groupedRows.forEach(function (subRow) {
            groupedFlatRows.push(subRow);
            groupedRowsById[subRow.id] = subRow;
            if (subRow.isGrouped) {
              onlyGroupedFlatRows.push(subRow);
              onlyGroupedRowsById[subRow.id] = subRow;
            } else {
              nonGroupedFlatRows.push(subRow);
              nonGroupedRowsById[subRow.id] = subRow;
            }
          }); // Assign the new data

          return [groupedRows, groupedFlatRows, groupedRowsById, onlyGroupedFlatRows, onlyGroupedRowsById, nonGroupedFlatRows, nonGroupedRowsById];
        }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns, userAggregations, groupByFn]),
        groupedRows = _React$useMemo[0],
        groupedFlatRows = _React$useMemo[1],
        groupedRowsById = _React$useMemo[2],
        onlyGroupedFlatRows = _React$useMemo[3],
        onlyGroupedRowsById = _React$useMemo[4],
        nonGroupedFlatRows = _React$useMemo[5],
        nonGroupedRowsById = _React$useMemo[6];
      var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);
      useMountedLayoutEffect(function () {
        if (getAutoResetGroupBy()) {
          dispatch({
            type: actions.resetGroupBy
          });
        }
      }, [dispatch, manualGroupBy ? null : data]);
      Object.assign(instance, {
        preGroupedRows: rows,
        preGroupedFlatRow: flatRows,
        preGroupedRowsById: rowsById,
        groupedRows: groupedRows,
        groupedFlatRows: groupedFlatRows,
        groupedRowsById: groupedRowsById,
        onlyGroupedFlatRows: onlyGroupedFlatRows,
        onlyGroupedRowsById: onlyGroupedRowsById,
        nonGroupedFlatRows: nonGroupedFlatRows,
        nonGroupedRowsById: nonGroupedRowsById,
        rows: groupedRows,
        flatRows: groupedFlatRows,
        rowsById: groupedRowsById,
        toggleGroupBy: toggleGroupBy,
        setGroupBy: setGroupBy
      });
    }
    function prepareRow$1(row) {
      row.allCells.forEach(function (cell) {
        var _row$subRows;

        // Grouped cells are in the groupBy and the pivot cell for the row
        cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Placeholder cells are any columns in the groupBy that are not grouped

        cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows

        cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);
      });
    }
    function defaultGroupByFn(rows, columnId) {
      return rows.reduce(function (prev, row, i) {
        // TODO: Might want to implement a key serializer here so
        // irregular column values can still be grouped if needed?
        var resKey = "" + row.values[columnId];
        prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];
        prev[resKey].push(row);
        return prev;
      }, {});
    }
    var reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.
    // It handles numbers, mixed alphanumeric combinations, and even
    // null, undefined, and Infinity

    var alphanumeric = function alphanumeric(rowA, rowB, columnId) {
      var a = getRowValueByColumnID(rowA, columnId);
      var b = getRowValueByColumnID(rowB, columnId); // Force to strings (or "" for unsupported types)

      a = toString(a);
      b = toString(b); // Split on number groups, but keep the delimiter
      // Then remove falsey split values

      a = a.split(reSplitAlphaNumeric).filter(Boolean);
      b = b.split(reSplitAlphaNumeric).filter(Boolean); // While

      while (a.length && b.length) {
        var aa = a.shift();
        var bb = b.shift();
        var an = parseInt(aa, 10);
        var bn = parseInt(bb, 10);
        var combo = [an, bn].sort(); // Both are string

        if (isNaN(combo[0])) {
          if (aa > bb) {
            return 1;
          }
          if (bb > aa) {
            return -1;
          }
          continue;
        } // One is a string, one is a number

        if (isNaN(combo[1])) {
          return isNaN(an) ? -1 : 1;
        } // Both are numbers

        if (an > bn) {
          return 1;
        }
        if (bn > an) {
          return -1;
        }
      }
      return a.length - b.length;
    };
    function datetime(rowA, rowB, columnId) {
      var a = getRowValueByColumnID(rowA, columnId);
      var b = getRowValueByColumnID(rowB, columnId);
      a = a.getTime();
      b = b.getTime();
      return compareBasic(a, b);
    }
    function basic(rowA, rowB, columnId) {
      var a = getRowValueByColumnID(rowA, columnId);
      var b = getRowValueByColumnID(rowB, columnId);
      return compareBasic(a, b);
    } // Utils

    function compareBasic(a, b) {
      return a === b ? 0 : a > b ? 1 : -1;
    }
    function getRowValueByColumnID(row, columnId) {
      return row.values[columnId];
    }
    function toString(a) {
      if (typeof a === 'number') {
        if (isNaN(a) || a === Infinity || a === -Infinity) {
          return '';
        }
        return String(a);
      }
      if (typeof a === 'string') {
        return a;
      }
      return '';
    }
    var sortTypes = /*#__PURE__*/Object.freeze({
      __proto__: null,
      alphanumeric: alphanumeric,
      datetime: datetime,
      basic: basic
    });
    actions.resetSortBy = 'resetSortBy';
    actions.setSortBy = 'setSortBy';
    actions.toggleSortBy = 'toggleSortBy';
    actions.clearSortBy = 'clearSortBy';
    defaultColumn.sortType = 'alphanumeric';
    defaultColumn.sortDescFirst = false;
    var useSortBy = function useSortBy(hooks) {
      hooks.getSortByToggleProps = [defaultGetSortByToggleProps];
      hooks.stateReducers.push(reducer$5);
      hooks.useInstance.push(useInstance$5);
    };
    useSortBy.pluginName = 'useSortBy';
    var defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {
      var instance = _ref.instance,
        column = _ref.column;
      var _instance$isMultiSort = instance.isMultiSortEvent,
        isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {
          return e.shiftKey;
        } : _instance$isMultiSort;
      return [props, {
        onClick: column.canSort ? function (e) {
          e.persist();
          column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));
        } : undefined,
        style: {
          cursor: column.canSort ? 'pointer' : undefined
        },
        title: column.canSort ? 'Toggle SortBy' : undefined
      }];
    }; // Reducer

    function reducer$5(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          sortBy: []
        }, state);
      }
      if (action.type === actions.resetSortBy) {
        return _extends({}, state, {
          sortBy: instance.initialState.sortBy || []
        });
      }
      if (action.type === actions.clearSortBy) {
        var sortBy = state.sortBy;
        var newSortBy = sortBy.filter(function (d) {
          return d.id !== action.columnId;
        });
        return _extends({}, state, {
          sortBy: newSortBy
        });
      }
      if (action.type === actions.setSortBy) {
        var _sortBy = action.sortBy;
        return _extends({}, state, {
          sortBy: _sortBy
        });
      }
      if (action.type === actions.toggleSortBy) {
        var columnId = action.columnId,
          desc = action.desc,
          multi = action.multi;
        var allColumns = instance.allColumns,
          disableMultiSort = instance.disableMultiSort,
          disableSortRemove = instance.disableSortRemove,
          disableMultiRemove = instance.disableMultiRemove,
          _instance$maxMultiSor = instance.maxMultiSortColCount,
          maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;
        var _sortBy2 = state.sortBy; // Find the column for this columnId

        var column = allColumns.find(function (d) {
          return d.id === columnId;
        });
        var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column

        var existingSortBy = _sortBy2.find(function (d) {
          return d.id === columnId;
        });
        var existingIndex = _sortBy2.findIndex(function (d) {
          return d.id === columnId;
        });
        var hasDescDefined = typeof desc !== 'undefined' && desc !== null;
        var _newSortBy = []; // What should we do with this sort action?

        var sortAction;
        if (!disableMultiSort && multi) {
          if (existingSortBy) {
            sortAction = 'toggle';
          } else {
            sortAction = 'add';
          }
        } else {
          // Normal mode
          if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) {
            sortAction = 'replace';
          } else if (existingSortBy) {
            sortAction = 'toggle';
          } else {
            sortAction = 'replace';
          }
        } // Handle toggle states that will remove the sortBy

        if (sortAction === 'toggle' &&
        // Must be toggling
        !disableSortRemove &&
        // If disableSortRemove, disable in general
        !hasDescDefined && (
        // Must not be setting desc
        multi ? !disableMultiRemove : true) && (
        // If multi, don't allow if disableMultiRemove
        existingSortBy &&
        // Finally, detect if it should indeed be removed
        existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {
          sortAction = 'remove';
        }
        if (sortAction === 'replace') {
          _newSortBy = [{
            id: columnId,
            desc: hasDescDefined ? desc : sortDescFirst
          }];
        } else if (sortAction === 'add') {
          _newSortBy = [].concat(_sortBy2, [{
            id: columnId,
            desc: hasDescDefined ? desc : sortDescFirst
          }]); // Take latest n columns

          _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);
        } else if (sortAction === 'toggle') {
          // This flips (or sets) the
          _newSortBy = _sortBy2.map(function (d) {
            if (d.id === columnId) {
              return _extends({}, d, {
                desc: hasDescDefined ? desc : !existingSortBy.desc
              });
            }
            return d;
          });
        } else if (sortAction === 'remove') {
          _newSortBy = _sortBy2.filter(function (d) {
            return d.id !== columnId;
          });
        }
        return _extends({}, state, {
          sortBy: _newSortBy
        });
      }
    }
    function useInstance$5(instance) {
      var data = instance.data,
        rows = instance.rows,
        flatRows = instance.flatRows,
        allColumns = instance.allColumns,
        _instance$orderByFn = instance.orderByFn,
        orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,
        userSortTypes = instance.sortTypes,
        manualSortBy = instance.manualSortBy,
        defaultCanSort = instance.defaultCanSort,
        disableSortBy = instance.disableSortBy,
        flatHeaders = instance.flatHeaders,
        sortBy = instance.state.sortBy,
        dispatch = instance.dispatch,
        plugins = instance.plugins,
        getHooks = instance.getHooks,
        _instance$autoResetSo = instance.autoResetSortBy,
        autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;
      ensurePluginOrder(plugins, ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'], 'useSortBy');
      var setSortBy = React.useCallback(function (sortBy) {
        dispatch({
          type: actions.setSortBy,
          sortBy: sortBy
        });
      }, [dispatch]); // Updates sorting based on a columnId, desc flag and multi flag

      var toggleSortBy = React.useCallback(function (columnId, desc, multi) {
        dispatch({
          type: actions.toggleSortBy,
          columnId: columnId,
          desc: desc,
          multi: multi
        });
      }, [dispatch]); // use reference to avoid memory leak in #1608

      var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers

      flatHeaders.forEach(function (column) {
        var accessor = column.accessor,
          defaultColumnCanSort = column.canSort,
          columnDisableSortBy = column.disableSortBy,
          id = column.id;
        var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);
        column.canSort = canSort;
        if (column.canSort) {
          column.toggleSortBy = function (desc, multi) {
            return toggleSortBy(column.id, desc, multi);
          };
          column.clearSortBy = function () {
            dispatch({
              type: actions.clearSortBy,
              columnId: column.id
            });
          };
        }
        column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {
          instance: getInstance(),
          column: column
        });
        var columnSort = sortBy.find(function (d) {
          return d.id === id;
        });
        column.isSorted = !!columnSort;
        column.sortedIndex = sortBy.findIndex(function (d) {
          return d.id === id;
        });
        column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;
      });
      var _React$useMemo = React.useMemo(function () {
          if (manualSortBy || !sortBy.length) {
            return [rows, flatRows];
          }
          var sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns

          var availableSortBy = sortBy.filter(function (sort) {
            return allColumns.find(function (col) {
              return col.id === sort.id;
            });
          });
          var sortData = function sortData(rows) {
            // Use the orderByFn to compose multiple sortBy's together.
            // This will also perform a stable sorting using the row index
            // if needed.
            var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {
              // Support custom sorting methods for each column
              var column = allColumns.find(function (d) {
                return d.id === sort.id;
              });
              if (!column) {
                throw new Error("React-Table: Could not find a column with id: " + sort.id + " while sorting");
              }
              var sortType = column.sortType; // Look up sortBy functions in this order:
              // column function
              // column string lookup on user sortType
              // column string lookup on built-in sortType
              // default function
              // default string lookup on user sortType
              // default string lookup on built-in sortType

              var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];
              if (!sortMethod) {
                throw new Error("React-Table: Could not find a valid sortType of '" + sortType + "' for column '" + sort.id + "'.");
              } // Return the correct sortFn.
              // This function should always return in ascending order

              return function (a, b) {
                return sortMethod(a, b, sort.id, sort.desc);
              };
            }),
            // Map the directions
            availableSortBy.map(function (sort) {
              // Detect and use the sortInverted option
              var column = allColumns.find(function (d) {
                return d.id === sort.id;
              });
              if (column && column.sortInverted) {
                return sort.desc;
              }
              return !sort.desc;
            })); // If there are sub-rows, sort them

            sortedData.forEach(function (row) {
              sortedFlatRows.push(row);
              if (!row.subRows || row.subRows.length === 0) {
                return;
              }
              row.subRows = sortData(row.subRows);
            });
            return sortedData;
          };
          return [sortData(rows), sortedFlatRows];
        }, [manualSortBy, sortBy, rows, flatRows, allColumns, orderByFn, userSortTypes]),
        sortedRows = _React$useMemo[0],
        sortedFlatRows = _React$useMemo[1];
      var getAutoResetSortBy = useGetLatest(autoResetSortBy);
      useMountedLayoutEffect(function () {
        if (getAutoResetSortBy()) {
          dispatch({
            type: actions.resetSortBy
          });
        }
      }, [manualSortBy ? null : data]);
      Object.assign(instance, {
        preSortedRows: rows,
        preSortedFlatRows: flatRows,
        sortedRows: sortedRows,
        sortedFlatRows: sortedFlatRows,
        rows: sortedRows,
        flatRows: sortedFlatRows,
        setSortBy: setSortBy,
        toggleSortBy: toggleSortBy
      });
    }
    function defaultOrderByFn(arr, funcs, dirs) {
      return [].concat(arr).sort(function (rowA, rowB) {
        for (var i = 0; i < funcs.length; i += 1) {
          var sortFn = funcs[i];
          var desc = dirs[i] === false || dirs[i] === 'desc';
          var sortInt = sortFn(rowA, rowB);
          if (sortInt !== 0) {
            return desc ? -sortInt : sortInt;
          }
        }
        return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;
      });
    }
    var pluginName = 'usePagination'; // Actions

    actions.resetPage = 'resetPage';
    actions.gotoPage = 'gotoPage';
    actions.setPageSize = 'setPageSize';
    var usePagination = function usePagination(hooks) {
      hooks.stateReducers.push(reducer$6);
      hooks.useInstance.push(useInstance$6);
    };
    usePagination.pluginName = pluginName;
    function reducer$6(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          pageSize: 10,
          pageIndex: 0
        }, state);
      }
      if (action.type === actions.resetPage) {
        return _extends({}, state, {
          pageIndex: instance.initialState.pageIndex || 0
        });
      }
      if (action.type === actions.gotoPage) {
        var pageCount = instance.pageCount,
          page = instance.page;
        var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);
        var canNavigate = false;
        if (newPageIndex > state.pageIndex) {
          // next page
          canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;
        } else if (newPageIndex < state.pageIndex) {
          // prev page
          canNavigate = newPageIndex > -1;
        }
        if (!canNavigate) {
          return state;
        }
        return _extends({}, state, {
          pageIndex: newPageIndex
        });
      }
      if (action.type === actions.setPageSize) {
        var pageSize = action.pageSize;
        var topRowIndex = state.pageSize * state.pageIndex;
        var pageIndex = Math.floor(topRowIndex / pageSize);
        return _extends({}, state, {
          pageIndex: pageIndex,
          pageSize: pageSize
        });
      }
    }
    function useInstance$6(instance) {
      var rows = instance.rows,
        _instance$autoResetPa = instance.autoResetPage,
        autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa,
        _instance$manualExpan = instance.manualExpandedKey,
        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,
        plugins = instance.plugins,
        userPageCount = instance.pageCount,
        _instance$paginateExp = instance.paginateExpandedRows,
        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,
        _instance$expandSubRo = instance.expandSubRows,
        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,
        _instance$state = instance.state,
        pageSize = _instance$state.pageSize,
        pageIndex = _instance$state.pageIndex,
        expanded = _instance$state.expanded,
        globalFilter = _instance$state.globalFilter,
        filters = _instance$state.filters,
        groupBy = _instance$state.groupBy,
        sortBy = _instance$state.sortBy,
        dispatch = instance.dispatch,
        data = instance.data,
        manualPagination = instance.manualPagination;
      ensurePluginOrder(plugins, ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination');
      var getAutoResetPage = useGetLatest(autoResetPage);
      useMountedLayoutEffect(function () {
        if (getAutoResetPage()) {
          dispatch({
            type: actions.resetPage
          });
        }
      }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);
      var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);
      var pageOptions = React.useMemo(function () {
        return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function (d, i) {
          return i;
        }) : [];
      }, [pageCount]);
      var page = React.useMemo(function () {
        var page;
        if (manualPagination) {
          page = rows;
        } else {
          var pageStart = pageSize * pageIndex;
          var pageEnd = pageStart + pageSize;
          page = rows.slice(pageStart, pageEnd);
        }
        if (paginateExpandedRows) {
          return page;
        }
        return expandRows(page, {
          manualExpandedKey: manualExpandedKey,
          expanded: expanded,
          expandSubRows: expandSubRows
        });
      }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);
      var canPreviousPage = pageIndex > 0;
      var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;
      var gotoPage = React.useCallback(function (pageIndex) {
        dispatch({
          type: actions.gotoPage,
          pageIndex: pageIndex
        });
      }, [dispatch]);
      var previousPage = React.useCallback(function () {
        return gotoPage(function (old) {
          return old - 1;
        });
      }, [gotoPage]);
      var nextPage = React.useCallback(function () {
        return gotoPage(function (old) {
          return old + 1;
        });
      }, [gotoPage]);
      var setPageSize = React.useCallback(function (pageSize) {
        dispatch({
          type: actions.setPageSize,
          pageSize: pageSize
        });
      }, [dispatch]);
      Object.assign(instance, {
        pageOptions: pageOptions,
        pageCount: pageCount,
        page: page,
        canPreviousPage: canPreviousPage,
        canNextPage: canNextPage,
        gotoPage: gotoPage,
        previousPage: previousPage,
        nextPage: nextPage,
        setPageSize: setPageSize
      });
    }
    actions.resetPivot = 'resetPivot';
    actions.togglePivot = 'togglePivot';
    var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns(hooks) {
      hooks.getPivotToggleProps = [defaultGetPivotToggleProps];
      hooks.stateReducers.push(reducer$7);
      hooks.useInstanceAfterData.push(useInstanceAfterData);
      hooks.allColumns.push(allColumns);
      hooks.accessValue.push(accessValue);
      hooks.materializedColumns.push(materializedColumns);
      hooks.materializedColumnsDeps.push(materializedColumnsDeps);
      hooks.visibleColumns.push(visibleColumns$1);
      hooks.visibleColumnsDeps.push(visibleColumnsDeps);
      hooks.useInstance.push(useInstance$7);
      hooks.prepareRow.push(prepareRow$2);
    };
    _UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';
    var defaultPivotColumns = [];
    var defaultGetPivotToggleProps = function defaultGetPivotToggleProps(props, _ref) {
      var header = _ref.header;
      return [props, {
        onClick: header.canPivot ? function (e) {
          e.persist();
          header.togglePivot();
        } : undefined,
        style: {
          cursor: header.canPivot ? 'pointer' : undefined
        },
        title: 'Toggle Pivot'
      }];
    }; // Reducer

    function reducer$7(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          pivotColumns: defaultPivotColumns
        }, state);
      }
      if (action.type === actions.resetPivot) {
        return _extends({}, state, {
          pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns
        });
      }
      if (action.type === actions.togglePivot) {
        var columnId = action.columnId,
          setPivot = action.value;
        var resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);
        if (resolvedPivot) {
          return _extends({}, state, {
            pivotColumns: [].concat(state.pivotColumns, [columnId])
          });
        }
        return _extends({}, state, {
          pivotColumns: state.pivotColumns.filter(function (d) {
            return d !== columnId;
          })
        });
      }
    }
    function useInstanceAfterData(instance) {
      instance.allColumns.forEach(function (column) {
        column.isPivotSource = instance.state.pivotColumns.includes(column.id);
      });
    }
    function allColumns(columns, _ref2) {
      var instance = _ref2.instance;
      columns.forEach(function (column) {
        column.isPivotSource = instance.state.pivotColumns.includes(column.id);
        column.uniqueValues = new Set();
      });
      return columns;
    }
    function accessValue(value, _ref3) {
      var column = _ref3.column;
      if (column.uniqueValues && typeof value !== 'undefined') {
        column.uniqueValues.add(value);
      }
      return value;
    }
    function materializedColumns(materialized, _ref4) {
      var instance = _ref4.instance;
      var allColumns = instance.allColumns,
        state = instance.state;
      if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {
        return materialized;
      }
      var pivotColumns = state.pivotColumns.map(function (id) {
        return allColumns.find(function (d) {
          return d.id === id;
        });
      }).filter(Boolean);
      var sourceColumns = allColumns.filter(function (d) {
        return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);
      });
      var buildPivotColumns = function buildPivotColumns(depth, parent, pivotFilters) {
        if (depth === void 0) {
          depth = 0;
        }
        if (pivotFilters === void 0) {
          pivotFilters = [];
        }
        var pivotColumn = pivotColumns[depth];
        if (!pivotColumn) {
          return sourceColumns.map(function (sourceColumn) {
            // TODO: We could offer support here for renesting pivoted
            // columns inside copies of their header groups. For now,
            // that seems like it would be (1) overkill on nesting, considering
            // you already get nesting for every pivot level and (2)
            // really hard. :)
            return _extends({}, sourceColumn, {
              canPivot: false,
              isPivoted: true,
              parent: parent,
              depth: depth,
              id: "" + (parent ? parent.id + "." + sourceColumn.id : sourceColumn.id),
              accessor: function accessor(originalRow, i, row) {
                if (pivotFilters.every(function (filter) {
                  return filter(row);
                })) {
                  return row.values[sourceColumn.id];
                }
              }
            });
          });
        }
        var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();
        return uniqueValues.map(function (uniqueValue) {
          var columnGroup = _extends({}, pivotColumn, {
            Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? pivotColumn.Header + ": " + uniqueValue : uniqueValue,
            isPivotGroup: true,
            parent: parent,
            depth: depth,
            id: parent ? parent.id + "." + pivotColumn.id + "." + uniqueValue : pivotColumn.id + "." + uniqueValue,
            pivotValue: uniqueValue
          });
          columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [].concat(pivotFilters, [function (row) {
            return row.values[pivotColumn.id] === uniqueValue;
          }]));
          return columnGroup;
        });
      };
      var newMaterialized = flattenColumns(buildPivotColumns());
      return [].concat(materialized, newMaterialized);
    }
    function materializedColumnsDeps(deps, _ref5) {
      var _ref5$instance$state = _ref5.instance.state,
        pivotColumns = _ref5$instance$state.pivotColumns,
        groupBy = _ref5$instance$state.groupBy;
      return [].concat(deps, [pivotColumns, groupBy]);
    }
    function visibleColumns$1(visibleColumns, _ref6) {
      var state = _ref6.instance.state;
      visibleColumns = visibleColumns.filter(function (d) {
        return !d.isPivotSource;
      });
      if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {
        visibleColumns = visibleColumns.filter(function (column) {
          return column.isGrouped || column.isPivoted;
        });
      }
      return visibleColumns;
    }
    function visibleColumnsDeps(deps, _ref7) {
      var instance = _ref7.instance;
      return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);
    }
    function useInstance$7(instance) {
      var columns = instance.columns,
        allColumns = instance.allColumns,
        flatHeaders = instance.flatHeaders,
        getHooks = instance.getHooks,
        plugins = instance.plugins,
        dispatch = instance.dispatch,
        _instance$autoResetPi = instance.autoResetPivot,
        autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi,
        manaulPivot = instance.manaulPivot,
        disablePivot = instance.disablePivot,
        defaultCanPivot = instance.defaultCanPivot;
      ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns');
      var getInstance = useGetLatest(instance);
      allColumns.forEach(function (column) {
        var accessor = column.accessor,
          defaultColumnPivot = column.defaultPivot,
          columnDisablePivot = column.disablePivot;
        column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);
        if (column.canPivot) {
          column.togglePivot = function () {
            return instance.togglePivot(column.id);
          };
        }
        column.Aggregated = column.Aggregated || column.Cell;
      });
      var togglePivot = function togglePivot(columnId, value) {
        dispatch({
          type: actions.togglePivot,
          columnId: columnId,
          value: value
        });
      };
      flatHeaders.forEach(function (header) {
        header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {
          instance: getInstance(),
          header: header
        });
      });
      var getAutoResetPivot = useGetLatest(autoResetPivot);
      useMountedLayoutEffect(function () {
        if (getAutoResetPivot()) {
          dispatch({
            type: actions.resetPivot
          });
        }
      }, [dispatch, manaulPivot ? null : columns]);
      Object.assign(instance, {
        togglePivot: togglePivot
      });
    }
    function prepareRow$2(row) {
      row.allCells.forEach(function (cell) {
        // Grouped cells are in the pivotColumns and the pivot cell for the row
        cell.isPivoted = cell.column.isPivoted;
      });
    }
    var pluginName$1 = 'useRowSelect'; // Actions

    actions.resetSelectedRows = 'resetSelectedRows';
    actions.toggleAllRowsSelected = 'toggleAllRowsSelected';
    actions.toggleRowSelected = 'toggleRowSelected';
    actions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected';
    var useRowSelect = function useRowSelect(hooks) {
      hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];
      hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];
      hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];
      hooks.stateReducers.push(reducer$8);
      hooks.useInstance.push(useInstance$8);
      hooks.prepareRow.push(prepareRow$3);
    };
    useRowSelect.pluginName = pluginName$1;
    var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {
      var instance = _ref.instance,
        row = _ref.row;
      var _instance$manualRowSe = instance.manualRowSelectedKey,
        manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;
      var checked = false;
      if (row.original && row.original[manualRowSelectedKey]) {
        checked = true;
      } else {
        checked = row.isSelected;
      }
      return [props, {
        onChange: function onChange(e) {
          row.toggleRowSelected(e.target.checked);
        },
        style: {
          cursor: 'pointer'
        },
        checked: checked,
        title: 'Toggle Row Selected',
        indeterminate: row.isSomeSelected
      }];
    };
    var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {
      var instance = _ref2.instance;
      return [props, {
        onChange: function onChange(e) {
          instance.toggleAllRowsSelected(e.target.checked);
        },
        style: {
          cursor: 'pointer'
        },
        checked: instance.isAllRowsSelected,
        title: 'Toggle All Rows Selected',
        indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)
      }];
    };
    var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps(props, _ref3) {
      var instance = _ref3.instance;
      return [props, {
        onChange: function onChange(e) {
          instance.toggleAllPageRowsSelected(e.target.checked);
        },
        style: {
          cursor: 'pointer'
        },
        checked: instance.isAllPageRowsSelected,
        title: 'Toggle All Current Page Rows Selected',
        indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function (_ref4) {
          var id = _ref4.id;
          return instance.state.selectedRowIds[id];
        }))
      }];
    }; // eslint-disable-next-line max-params

    function reducer$8(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          selectedRowIds: {}
        }, state);
      }
      if (action.type === actions.resetSelectedRows) {
        return _extends({}, state, {
          selectedRowIds: instance.initialState.selectedRowIds || {}
        });
      }
      if (action.type === actions.toggleAllRowsSelected) {
        var setSelected = action.value;
        var isAllRowsSelected = instance.isAllRowsSelected,
          rowsById = instance.rowsById,
          _instance$nonGroupedR = instance.nonGroupedRowsById,
          nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;
        var selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected; // Only remove/add the rows that are visible on the screen
        //  Leave all the other rows that are selected alone.

        var selectedRowIds = Object.assign({}, state.selectedRowIds);
        if (selectAll) {
          Object.keys(nonGroupedRowsById).forEach(function (rowId) {
            selectedRowIds[rowId] = true;
          });
        } else {
          Object.keys(nonGroupedRowsById).forEach(function (rowId) {
            delete selectedRowIds[rowId];
          });
        }
        return _extends({}, state, {
          selectedRowIds: selectedRowIds
        });
      }
      if (action.type === actions.toggleRowSelected) {
        var id = action.id,
          _setSelected = action.value;
        var _rowsById = instance.rowsById,
          _instance$selectSubRo = instance.selectSubRows,
          selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo,
          getSubRows = instance.getSubRows;
        var isSelected = state.selectedRowIds[id];
        var shouldExist = typeof _setSelected !== 'undefined' ? _setSelected : !isSelected;
        if (isSelected === shouldExist) {
          return state;
        }
        var newSelectedRowIds = _extends({}, state.selectedRowIds);
        var handleRowById = function handleRowById(id) {
          var row = _rowsById[id];
          if (!row.isGrouped) {
            if (shouldExist) {
              newSelectedRowIds[id] = true;
            } else {
              delete newSelectedRowIds[id];
            }
          }
          if (selectSubRows && getSubRows(row)) {
            return getSubRows(row).forEach(function (row) {
              return handleRowById(row.id);
            });
          }
        };
        handleRowById(id);
        return _extends({}, state, {
          selectedRowIds: newSelectedRowIds
        });
      }
      if (action.type === actions.toggleAllPageRowsSelected) {
        var _setSelected2 = action.value;
        var page = instance.page,
          _rowsById2 = instance.rowsById,
          _instance$selectSubRo2 = instance.selectSubRows,
          _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2,
          isAllPageRowsSelected = instance.isAllPageRowsSelected,
          _getSubRows = instance.getSubRows;
        var _selectAll = typeof _setSelected2 !== 'undefined' ? _setSelected2 : !isAllPageRowsSelected;
        var _newSelectedRowIds = _extends({}, state.selectedRowIds);
        var _handleRowById = function _handleRowById(id) {
          var row = _rowsById2[id];
          if (!row.isGrouped) {
            if (_selectAll) {
              _newSelectedRowIds[id] = true;
            } else {
              delete _newSelectedRowIds[id];
            }
          }
          if (_selectSubRows && _getSubRows(row)) {
            return _getSubRows(row).forEach(function (row) {
              return _handleRowById(row.id);
            });
          }
        };
        page.forEach(function (row) {
          return _handleRowById(row.id);
        });
        return _extends({}, state, {
          selectedRowIds: _newSelectedRowIds
        });
      }
      return state;
    }
    function useInstance$8(instance) {
      var data = instance.data,
        rows = instance.rows,
        getHooks = instance.getHooks,
        plugins = instance.plugins,
        rowsById = instance.rowsById,
        _instance$nonGroupedR2 = instance.nonGroupedRowsById,
        nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2,
        _instance$autoResetSe = instance.autoResetSelectedRows,
        autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe,
        selectedRowIds = instance.state.selectedRowIds,
        _instance$selectSubRo3 = instance.selectSubRows,
        selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3,
        dispatch = instance.dispatch,
        page = instance.page,
        getSubRows = instance.getSubRows;
      ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'], 'useRowSelect');
      var selectedFlatRows = React.useMemo(function () {
        var selectedFlatRows = [];
        rows.forEach(function (row) {
          var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];
          row.isSelected = !!isSelected;
          row.isSomeSelected = isSelected === null;
          if (isSelected) {
            selectedFlatRows.push(row);
          }
        });
        return selectedFlatRows;
      }, [rows, selectSubRows, selectedRowIds, getSubRows]);
      var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);
      var isAllPageRowsSelected = isAllRowsSelected;
      if (isAllRowsSelected) {
        if (Object.keys(nonGroupedRowsById).some(function (id) {
          return !selectedRowIds[id];
        })) {
          isAllRowsSelected = false;
        }
      }
      if (!isAllRowsSelected) {
        if (page && page.length && page.some(function (_ref5) {
          var id = _ref5.id;
          return !selectedRowIds[id];
        })) {
          isAllPageRowsSelected = false;
        }
      }
      var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);
      useMountedLayoutEffect(function () {
        if (getAutoResetSelectedRows()) {
          dispatch({
            type: actions.resetSelectedRows
          });
        }
      }, [dispatch, data]);
      var toggleAllRowsSelected = React.useCallback(function (value) {
        return dispatch({
          type: actions.toggleAllRowsSelected,
          value: value
        });
      }, [dispatch]);
      var toggleAllPageRowsSelected = React.useCallback(function (value) {
        return dispatch({
          type: actions.toggleAllPageRowsSelected,
          value: value
        });
      }, [dispatch]);
      var toggleRowSelected = React.useCallback(function (id, value) {
        return dispatch({
          type: actions.toggleRowSelected,
          id: id,
          value: value
        });
      }, [dispatch]);
      var getInstance = useGetLatest(instance);
      var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {
        instance: getInstance()
      });
      var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {
        instance: getInstance()
      });
      Object.assign(instance, {
        selectedFlatRows: selectedFlatRows,
        isAllRowsSelected: isAllRowsSelected,
        isAllPageRowsSelected: isAllPageRowsSelected,
        toggleRowSelected: toggleRowSelected,
        toggleAllRowsSelected: toggleAllRowsSelected,
        getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,
        getToggleAllPageRowsSelectedProps: getToggleAllPageRowsSelectedProps,
        toggleAllPageRowsSelected: toggleAllPageRowsSelected
      });
    }
    function prepareRow$3(row, _ref6) {
      var instance = _ref6.instance;
      row.toggleRowSelected = function (set) {
        return instance.toggleRowSelected(row.id, set);
      };
      row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {
        instance: instance,
        row: row
      });
    }
    function getRowIsSelected(row, selectedRowIds, getSubRows) {
      if (selectedRowIds[row.id]) {
        return true;
      }
      var subRows = getSubRows(row);
      if (subRows && subRows.length) {
        var allChildrenSelected = true;
        var someSelected = false;
        subRows.forEach(function (subRow) {
          // Bail out early if we know both of these
          if (someSelected && !allChildrenSelected) {
            return;
          }
          if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {
            someSelected = true;
          } else {
            allChildrenSelected = false;
          }
        });
        return allChildrenSelected ? true : someSelected ? null : false;
      }
      return false;
    }
    var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor(row) {
      return {};
    };
    var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor(cell) {
      return {};
    }; // Actions

    actions.setRowState = 'setRowState';
    actions.setCellState = 'setCellState';
    actions.resetRowState = 'resetRowState';
    var useRowState = function useRowState(hooks) {
      hooks.stateReducers.push(reducer$9);
      hooks.useInstance.push(useInstance$9);
      hooks.prepareRow.push(prepareRow$4);
    };
    useRowState.pluginName = 'useRowState';
    function reducer$9(state, action, previousState, instance) {
      var _instance$initialRowS = instance.initialRowStateAccessor,
        initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS,
        _instance$initialCell = instance.initialCellStateAccessor,
        initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell,
        rowsById = instance.rowsById;
      if (action.type === actions.init) {
        return _extends({
          rowState: {}
        }, state);
      }
      if (action.type === actions.resetRowState) {
        return _extends({}, state, {
          rowState: instance.initialState.rowState || {}
        });
      }
      if (action.type === actions.setRowState) {
        var _extends2;
        var rowId = action.rowId,
          value = action.value;
        var oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);
        return _extends({}, state, {
          rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))
        });
      }
      if (action.type === actions.setCellState) {
        var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends3, _extends4;
        var _rowId = action.rowId,
          columnId = action.columnId,
          _value = action.value;
        var _oldRowState = typeof state.rowState[_rowId] !== 'undefined' ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);
        var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== 'undefined' ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function (cell) {
          return cell.column.id === columnId;
        }));
        return _extends({}, state, {
          rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {
            cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))
          }), _extends4))
        });
      }
    }
    function useInstance$9(instance) {
      var _instance$autoResetRo = instance.autoResetRowState,
        autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo,
        data = instance.data,
        dispatch = instance.dispatch;
      var setRowState = React.useCallback(function (rowId, value) {
        return dispatch({
          type: actions.setRowState,
          rowId: rowId,
          value: value
        });
      }, [dispatch]);
      var setCellState = React.useCallback(function (rowId, columnId, value) {
        return dispatch({
          type: actions.setCellState,
          rowId: rowId,
          columnId: columnId,
          value: value
        });
      }, [dispatch]);
      var getAutoResetRowState = useGetLatest(autoResetRowState);
      useMountedLayoutEffect(function () {
        if (getAutoResetRowState()) {
          dispatch({
            type: actions.resetRowState
          });
        }
      }, [data]);
      Object.assign(instance, {
        setRowState: setRowState,
        setCellState: setCellState
      });
    }
    function prepareRow$4(row, _ref) {
      var instance = _ref.instance;
      var _instance$initialRowS2 = instance.initialRowStateAccessor,
        initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2,
        _instance$initialCell2 = instance.initialCellStateAccessor,
        initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2,
        rowState = instance.state.rowState;
      if (row) {
        row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row);
        row.setState = function (updater) {
          return instance.setRowState(row.id, updater);
        };
        row.cells.forEach(function (cell) {
          if (!row.state.cellState) {
            row.state.cellState = {};
          }
          cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);
          cell.setState = function (updater) {
            return instance.setCellState(row.id, cell.column.id, updater);
          };
        });
      }
    }
    actions.resetColumnOrder = 'resetColumnOrder';
    actions.setColumnOrder = 'setColumnOrder';
    var useColumnOrder = function useColumnOrder(hooks) {
      hooks.stateReducers.push(reducer$a);
      hooks.visibleColumnsDeps.push(function (deps, _ref) {
        var instance = _ref.instance;
        return [].concat(deps, [instance.state.columnOrder]);
      });
      hooks.visibleColumns.push(visibleColumns$2);
      hooks.useInstance.push(useInstance$a);
    };
    useColumnOrder.pluginName = 'useColumnOrder';
    function reducer$a(state, action, previousState, instance) {
      if (action.type === actions.init) {
        return _extends({
          columnOrder: []
        }, state);
      }
      if (action.type === actions.resetColumnOrder) {
        return _extends({}, state, {
          columnOrder: instance.initialState.columnOrder || []
        });
      }
      if (action.type === actions.setColumnOrder) {
        return _extends({}, state, {
          columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)
        });
      }
    }
    function visibleColumns$2(columns, _ref2) {
      var columnOrder = _ref2.instance.state.columnOrder;

      // If there is no order, return the normal columns
      if (!columnOrder || !columnOrder.length) {
        return columns;
      }
      var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns

      var columnsCopy = [].concat(columns); // And make a new ordered array of the columns

      var columnsInOrder = []; // Loop over the columns and place them in order into the new array

      var _loop = function _loop() {
        var targetColumnId = columnOrderCopy.shift();
        var foundIndex = columnsCopy.findIndex(function (d) {
          return d.id === targetColumnId;
        });
        if (foundIndex > -1) {
          columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);
        }
      };
      while (columnsCopy.length && columnOrderCopy.length) {
        _loop();
      } // If there are any columns left, add them to the end

      return [].concat(columnsInOrder, columnsCopy);
    }
    function useInstance$a(instance) {
      var dispatch = instance.dispatch;
      instance.setColumnOrder = React.useCallback(function (columnOrder) {
        return dispatch({
          type: actions.setColumnOrder,
          columnOrder: columnOrder
        });
      }, [dispatch]);
    }
    defaultColumn.canResize = true; // Actions

    actions.columnStartResizing = 'columnStartResizing';
    actions.columnResizing = 'columnResizing';
    actions.columnDoneResizing = 'columnDoneResizing';
    actions.resetResize = 'resetResize';
    var useResizeColumns = function useResizeColumns(hooks) {
      hooks.getResizerProps = [defaultGetResizerProps];
      hooks.getHeaderProps.push({
        style: {
          position: 'relative'
        }
      });
      hooks.stateReducers.push(reducer$b);
      hooks.useInstance.push(useInstance$b);
      hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);
    };
    var defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {
      var instance = _ref.instance,
        header = _ref.header;
      var dispatch = instance.dispatch;
      var onResizeStart = function onResizeStart(e, header) {
        var isTouchEvent = false;
        if (e.type === 'touchstart') {
          // lets not respond to multiple touches (e.g. 2 or 3 fingers)
          if (e.touches && e.touches.length > 1) {
            return;
          }
          isTouchEvent = true;
        }
        var headersToResize = getLeafHeaders(header);
        var headerIdWidths = headersToResize.map(function (d) {
          return [d.id, d.totalWidth];
        });
        var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;
        var dispatchMove = function dispatchMove(clientXPos) {
          dispatch({
            type: actions.columnResizing,
            clientX: clientXPos
          });
        };
        var dispatchEnd = function dispatchEnd() {
          return dispatch({
            type: actions.columnDoneResizing
          });
        };
        var handlersAndEvents = {
          mouse: {
            moveEvent: 'mousemove',
            moveHandler: function moveHandler(e) {
              return dispatchMove(e.clientX);
            },
            upEvent: 'mouseup',
            upHandler: function upHandler(e) {
              document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);
              document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);
              dispatchEnd();
            }
          },
          touch: {
            moveEvent: 'touchmove',
            moveHandler: function moveHandler(e) {
              if (e.cancelable) {
                e.preventDefault();
                e.stopPropagation();
              }
              dispatchMove(e.touches[0].clientX);
              return false;
            },
            upEvent: 'touchend',
            upHandler: function upHandler(e) {
              document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);
              document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);
              dispatchEnd();
            }
          }
        };
        var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;
        var passiveIfSupported = passiveEventSupported() ? {
          passive: false
        } : false;
        document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);
        document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);
        dispatch({
          type: actions.columnStartResizing,
          columnId: header.id,
          columnWidth: header.totalWidth,
          headerIdWidths: headerIdWidths,
          clientX: clientX
        });
      };
      return [props, {
        onMouseDown: function onMouseDown(e) {
          return e.persist() || onResizeStart(e, header);
        },
        onTouchStart: function onTouchStart(e) {
          return e.persist() || onResizeStart(e, header);
        },
        style: {
          cursor: 'col-resize'
        },
        draggable: false,
        role: 'separator'
      }];
    };
    useResizeColumns.pluginName = 'useResizeColumns';
    function reducer$b(state, action) {
      if (action.type === actions.init) {
        return _extends({
          columnResizing: {
            columnWidths: {}
          }
        }, state);
      }
      if (action.type === actions.resetResize) {
        return _extends({}, state, {
          columnResizing: {
            columnWidths: {}
          }
        });
      }
      if (action.type === actions.columnStartResizing) {
        var clientX = action.clientX,
          columnId = action.columnId,
          columnWidth = action.columnWidth,
          headerIdWidths = action.headerIdWidths;
        return _extends({}, state, {
          columnResizing: _extends({}, state.columnResizing, {
            startX: clientX,
            headerIdWidths: headerIdWidths,
            columnWidth: columnWidth,
            isResizingColumn: columnId
          })
        });
      }
      if (action.type === actions.columnResizing) {
        var _clientX = action.clientX;
        var _state$columnResizing = state.columnResizing,
          startX = _state$columnResizing.startX,
          _columnWidth = _state$columnResizing.columnWidth,
          _state$columnResizing2 = _state$columnResizing.headerIdWidths,
          _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;
        var deltaX = _clientX - startX;
        var percentageDeltaX = deltaX / _columnWidth;
        var newColumnWidths = {};
        _headerIdWidths.forEach(function (_ref2) {
          var headerId = _ref2[0],
            headerWidth = _ref2[1];
          newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
        });
        return _extends({}, state, {
          columnResizing: _extends({}, state.columnResizing, {
            columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)
          })
        });
      }
      if (action.type === actions.columnDoneResizing) {
        return _extends({}, state, {
          columnResizing: _extends({}, state.columnResizing, {
            startX: null,
            isResizingColumn: null
          })
        });
      }
    }
    var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {
      var flatHeaders = instance.flatHeaders,
        disableResizing = instance.disableResizing,
        getHooks = instance.getHooks,
        columnResizing = instance.state.columnResizing;
      var getInstance = useGetLatest(instance);
      flatHeaders.forEach(function (header) {
        var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);
        header.canResize = canResize;
        header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;
        header.isResizing = columnResizing.isResizingColumn === header.id;
        if (canResize) {
          header.getResizerProps = makePropGetter(getHooks().getResizerProps, {
            instance: getInstance(),
            header: header
          });
        }
      });
    };
    function useInstance$b(instance) {
      var plugins = instance.plugins,
        dispatch = instance.dispatch,
        _instance$autoResetRe = instance.autoResetResize,
        autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe,
        columns = instance.columns;
      ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns');
      var getAutoResetResize = useGetLatest(autoResetResize);
      useMountedLayoutEffect(function () {
        if (getAutoResetResize()) {
          dispatch({
            type: actions.resetResize
          });
        }
      }, [columns]);
      var resetResizing = React.useCallback(function () {
        return dispatch({
          type: actions.resetResize
        });
      }, [dispatch]);
      Object.assign(instance, {
        resetResizing: resetResizing
      });
    }
    function getLeafHeaders(header) {
      var leafHeaders = [];
      var recurseHeader = function recurseHeader(header) {
        if (header.columns && header.columns.length) {
          header.columns.map(recurseHeader);
        }
        leafHeaders.push(header);
      };
      recurseHeader(header);
      return leafHeaders;
    }
    var cellStyles = {
      position: 'absolute',
      top: 0
    };
    var useAbsoluteLayout = function useAbsoluteLayout(hooks) {
      hooks.getTableBodyProps.push(getRowStyles);
      hooks.getRowProps.push(getRowStyles);
      hooks.getHeaderGroupProps.push(getRowStyles);
      hooks.getFooterGroupProps.push(getRowStyles);
      hooks.getHeaderProps.push(function (props, _ref) {
        var column = _ref.column;
        return [props, {
          style: _extends({}, cellStyles, {
            left: column.totalLeft + "px",
            width: column.totalWidth + "px"
          })
        }];
      });
      hooks.getCellProps.push(function (props, _ref2) {
        var cell = _ref2.cell;
        return [props, {
          style: _extends({}, cellStyles, {
            left: cell.column.totalLeft + "px",
            width: cell.column.totalWidth + "px"
          })
        }];
      });
      hooks.getFooterProps.push(function (props, _ref3) {
        var column = _ref3.column;
        return [props, {
          style: _extends({}, cellStyles, {
            left: column.totalLeft + "px",
            width: column.totalWidth + "px"
          })
        }];
      });
    };
    useAbsoluteLayout.pluginName = 'useAbsoluteLayout';
    var getRowStyles = function getRowStyles(props, _ref4) {
      var instance = _ref4.instance;
      return [props, {
        style: {
          position: 'relative',
          width: instance.totalColumnsWidth + "px"
        }
      }];
    };
    var cellStyles$1 = {
      display: 'inline-block',
      boxSizing: 'border-box'
    };
    var getRowStyles$1 = function getRowStyles(props, _ref) {
      var instance = _ref.instance;
      return [props, {
        style: {
          display: 'flex',
          width: instance.totalColumnsWidth + "px"
        }
      }];
    };
    var useBlockLayout = function useBlockLayout(hooks) {
      hooks.getRowProps.push(getRowStyles$1);
      hooks.getHeaderGroupProps.push(getRowStyles$1);
      hooks.getFooterGroupProps.push(getRowStyles$1);
      hooks.getHeaderProps.push(function (props, _ref2) {
        var column = _ref2.column;
        return [props, {
          style: _extends({}, cellStyles$1, {
            width: column.totalWidth + "px"
          })
        }];
      });
      hooks.getCellProps.push(function (props, _ref3) {
        var cell = _ref3.cell;
        return [props, {
          style: _extends({}, cellStyles$1, {
            width: cell.column.totalWidth + "px"
          })
        }];
      });
      hooks.getFooterProps.push(function (props, _ref4) {
        var column = _ref4.column;
        return [props, {
          style: _extends({}, cellStyles$1, {
            width: column.totalWidth + "px"
          })
        }];
      });
    };
    useBlockLayout.pluginName = 'useBlockLayout';
    function useFlexLayout(hooks) {
      hooks.getTableProps.push(getTableProps);
      hooks.getRowProps.push(getRowStyles$2);
      hooks.getHeaderGroupProps.push(getRowStyles$2);
      hooks.getFooterGroupProps.push(getRowStyles$2);
      hooks.getHeaderProps.push(getHeaderProps);
      hooks.getCellProps.push(getCellProps);
      hooks.getFooterProps.push(getFooterProps);
    }
    useFlexLayout.pluginName = 'useFlexLayout';
    var getTableProps = function getTableProps(props, _ref) {
      var instance = _ref.instance;
      return [props, {
        style: {
          minWidth: instance.totalColumnsMinWidth + "px"
        }
      }];
    };
    var getRowStyles$2 = function getRowStyles(props, _ref2) {
      var instance = _ref2.instance;
      return [props, {
        style: {
          display: 'flex',
          flex: '1 0 auto',
          minWidth: instance.totalColumnsMinWidth + "px"
        }
      }];
    };
    var getHeaderProps = function getHeaderProps(props, _ref3) {
      var column = _ref3.column;
      return [props, {
        style: {
          boxSizing: 'border-box',
          flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : undefined,
          minWidth: column.totalMinWidth + "px",
          width: column.totalWidth + "px"
        }
      }];
    };
    var getCellProps = function getCellProps(props, _ref4) {
      var cell = _ref4.cell;
      return [props, {
        style: {
          boxSizing: 'border-box',
          flex: cell.column.totalFlexWidth + " 0 auto",
          minWidth: cell.column.totalMinWidth + "px",
          width: cell.column.totalWidth + "px"
        }
      }];
    };
    var getFooterProps = function getFooterProps(props, _ref5) {
      var column = _ref5.column;
      return [props, {
        style: {
          boxSizing: 'border-box',
          flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : undefined,
          minWidth: column.totalMinWidth + "px",
          width: column.totalWidth + "px"
        }
      }];
    };
    function useGridLayout(hooks) {
      hooks.stateReducers.push(reducer$c);
      hooks.getTableProps.push(getTableProps$1);
      hooks.getHeaderProps.push(getHeaderProps$1);
    }
    useGridLayout.pluginName = 'useGridLayout';
    var getTableProps$1 = function getTableProps(props, _ref) {
      var instance = _ref.instance;
      return [props, {
        style: {
          display: "grid",
          gridTemplateColumns: instance.state.gridLayout.columnWidths.map(function (w) {
            return w;
          }).join(" ")
        }
      }];
    };
    var getHeaderProps$1 = function getHeaderProps(props, _ref2) {
      var column = _ref2.column;
      return [props, {
        id: "header-cell-" + column.id,
        style: {
          position: "sticky" //enables a scroll wrapper to be placed around the table and have sticky headers
        }
      }];
    };

    function reducer$c(state, action, previousState, instance) {
      if (action.type === "init") {
        return _extends({
          gridLayout: {
            columnWidths: instance.columns.map(function () {
              return "auto";
            })
          }
        }, state);
      }
      if (action.type === "columnStartResizing") {
        var columnId = action.columnId;
        var columnIndex = instance.visibleColumns.findIndex(function (col) {
          return col.id === columnId;
        });
        var elWidth = getElementWidth(columnId);
        if (elWidth !== undefined) {
          return _extends({}, state, {
            gridLayout: _extends({}, state.gridLayout, {
              columnId: columnId,
              columnIndex: columnIndex,
              startingWidth: elWidth
            })
          });
        } else {
          return state;
        }
      }
      if (action.type === "columnResizing") {
        var _state$gridLayout = state.gridLayout,
          _columnIndex = _state$gridLayout.columnIndex,
          startingWidth = _state$gridLayout.startingWidth,
          columnWidths = _state$gridLayout.columnWidths;
        var change = state.columnResizing.startX - action.clientX;
        var newWidth = startingWidth - change;
        var columnWidthsCopy = [].concat(columnWidths);
        columnWidthsCopy[_columnIndex] = newWidth + "px";
        return _extends({}, state, {
          gridLayout: _extends({}, state.gridLayout, {
            columnWidths: columnWidthsCopy
          })
        });
      }
    }
    function getElementWidth(columnId) {
      var _document$getElementB;
      var width = (_document$getElementB = document.getElementById("header-cell-" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;
      if (width !== undefined) {
        return width;
      }
    }
    exports._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;
    exports.actions = actions;
    exports.defaultColumn = defaultColumn;
    exports.defaultGroupByFn = defaultGroupByFn;
    exports.defaultOrderByFn = defaultOrderByFn;
    exports.defaultRenderer = defaultRenderer;
    exports.emptyRenderer = emptyRenderer;
    exports.ensurePluginOrder = ensurePluginOrder;
    exports.flexRender = flexRender;
    exports.functionalUpdate = functionalUpdate;
    exports.loopHooks = loopHooks;
    exports.makePropGetter = makePropGetter;
    exports.makeRenderer = makeRenderer;
    exports.reduceHooks = reduceHooks;
    exports.safeUseLayoutEffect = safeUseLayoutEffect;
    exports.useAbsoluteLayout = useAbsoluteLayout;
    exports.useAsyncDebounce = useAsyncDebounce;
    exports.useBlockLayout = useBlockLayout;
    exports.useColumnOrder = useColumnOrder;
    exports.useExpanded = useExpanded;
    exports.useFilters = useFilters;
    exports.useFlexLayout = useFlexLayout;
    exports.useGetLatest = useGetLatest;
    exports.useGlobalFilter = useGlobalFilter;
    exports.useGridLayout = useGridLayout;
    exports.useGroupBy = useGroupBy;
    exports.useMountedLayoutEffect = useMountedLayoutEffect;
    exports.usePagination = usePagination;
    exports.useResizeColumns = useResizeColumns;
    exports.useRowSelect = useRowSelect;
    exports.useRowState = useRowState;
    exports.useSortBy = useSortBy;
    exports.useTable = useTable;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
})(reactTable_development, reactTable_development.exports);

if (process.env.NODE_ENV === 'production') {
  reactTable.exports = reactTable_production_min.exports;
} else {
  reactTable.exports = reactTable_development.exports;
}

var hideIfLessThan = function hideIfLessThan(theme, breakpoint) {
  var maxWidth = breakpoint !== undefined ? theme.breakpoints[breakpoint] : '0px';
  return css$2(["@media (max-width:", "){display:none;}"], maxWidth);
};
var stickHorizontally = function stickHorizontally(shouldStickHorizontally, left) {
  return shouldStickHorizontally && left !== undefined ? css$2(["position:sticky;left:", "px;z-index:1;&:hover{z-index:2;}"], left) : css$2([""]);
};
var showDivider = function showDivider(shouldShowDivider) {
  return shouldShowDivider ? css$2([":after{position:absolute;top:0;right:0;bottom:0;width:", ";transform:translateX(100%);content:'';box-shadow:", ";}"], function (_ref) {
    var theme = _ref.theme;
    return theme.__hd__.table.sizes.columnDividerWidth;
  }, function (_ref2) {
    var theme = _ref2.theme;
    return theme.__hd__.table.shadows.columnDivider;
  }) : css$2([""]);
};
var StyledTH = styled.th.withConfig({
  displayName: "StyledTable__StyledTH",
  componentId: "sc-19w8dz0-0"
})(["&&{box-sizing:border-box;font-size:", ";line-height:", ";font-weight:", ";color:", ";background-color:", ";margin:0;padding:", ";width:", ";border:0 solid ", ";}&&:not(:last-child){border-right:", " solid ", ";}&&{", ";", ";", ";", ";", ";}"], function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.table.fontSizes.header;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.table.lineHeights.header;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.table.fontWeights.header;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.table.colors.headerText;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.table.colors.headerBackground;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.table.space.headerPadding;
}, function (_ref9) {
  var themeWidth = _ref9.themeWidth;
  return typeof themeWidth === 'string' ? themeWidth : undefined;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.table.colors.headerBorder;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.table.borderWidths.header;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.table.colors.headerBorder;
}, function (_ref13) {
  var themeHasBorderRight = _ref13.themeHasBorderRight;
  return themeHasBorderRight ? css$2(["&:not(:last-child){border-right:", " solid ", ";}"], function (_ref14) {
    var theme = _ref14.theme;
    return theme.__hd__.table.borderWidths.header;
  }, function (_ref15) {
    var theme = _ref15.theme;
    return theme.__hd__.table.colors.headerBorder;
  }) : css$2(["&:not(:last-child){border-right:0 solid ", ";}"], function (_ref16) {
    var theme = _ref16.theme;
    return theme.__hd__.table.colors.headerBorder;
  });
}, function (_ref17) {
  var theme = _ref17.theme,
    themeDisplayAtBreakpoint = _ref17.themeDisplayAtBreakpoint;
  return hideIfLessThan(theme, themeDisplayAtBreakpoint);
}, function (_ref18) {
  var themeSticky = _ref18.themeSticky;
  switch (themeSticky) {
    case true:
      return css$2(["position:sticky;top:0;z-index:1;"]);
    case false:
      return css$2([""]);
  }
}, function (_ref19) {
  var themeHorizontallySticky = _ref19.themeHorizontallySticky,
    themeLeft = _ref19.themeLeft;
  return stickHorizontally(themeHorizontallySticky, themeLeft);
}, function (_ref20) {
  var themeShowDivider = _ref20.themeShowDivider;
  return showDivider(themeShowDivider);
});
var StyledInnerTH = styled.div.withConfig({
  displayName: "StyledTable__StyledInnerTH",
  componentId: "sc-19w8dz0-1"
})(["&&{display:flex;align-items:center;margin:0;padding:0;", ";}"], function (_ref21) {
  var themeAlign = _ref21.themeAlign;
  switch (themeAlign) {
    case 'left':
      return css$2(["text-align:left;justify-content:flex-start;"]);
    case 'right':
      return css$2(["text-align:right;justify-content:flex-end;"]);
    case 'center':
      return css$2(["text-align:center;justify-content:center;"]);
  }
});
var StyledTD = styled.td.withConfig({
  displayName: "StyledTable__StyledTD",
  componentId: "sc-19w8dz0-2"
})(["&&{background-color:inherit;border:", " solid ", ";", ";", ";width:", ";", ";", ";}"], function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.table.borderWidths.cell;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.table.colors.cellBorder;
}, function (_ref24) {
  var theme = _ref24.theme,
    themeDisplayAtBreakpoint = _ref24.themeDisplayAtBreakpoint;
  return hideIfLessThan(theme, themeDisplayAtBreakpoint);
}, function (_ref25) {
  var themeAlign = _ref25.themeAlign;
  switch (themeAlign) {
    case undefined:
    case 'left':
      return css$2(["text-align:left;"]);
    case 'right':
      return css$2(["text-align:right;"]);
  }
}, function (props) {
  return props.themeWidth;
}, function (_ref26) {
  var themeHorizontallySticky = _ref26.themeHorizontallySticky,
    themeLeft = _ref26.themeLeft;
  return stickHorizontally(themeHorizontallySticky, themeLeft);
}, function (_ref27) {
  var themeShowDivider = _ref27.themeShowDivider;
  return showDivider(themeShowDivider);
});
var nestedRowStyle = css$2(["> tr{margin:0;padding:0;background-color:", ";&:hover{background-color:", ";}> td{overflow-wrap:break-word;font-size:", ";line-height:", ";font-weight:", ";color:", ";margin:0;padding:", ";border-bottom:", " solid ", ";}}"], function (_ref28) {
  var theme = _ref28.theme;
  return theme.__hd__.table.colors.background;
}, function (_ref29) {
  var theme = _ref29.theme;
  return theme.__hd__.table.colors.rowFocusBackground;
}, function (_ref30) {
  var theme = _ref30.theme;
  return theme.__hd__.table.fontSizes.cell;
}, function (_ref31) {
  var theme = _ref31.theme;
  return theme.__hd__.table.lineHeights.cell;
}, function (_ref32) {
  var theme = _ref32.theme;
  return theme.__hd__.table.fontWeights.cell;
}, function (_ref33) {
  var theme = _ref33.theme;
  return theme.__hd__.table.colors.cellText;
}, function (_ref34) {
  var theme = _ref34.theme;
  return theme.__hd__.table.space.cellPadding;
}, function (_ref35) {
  var theme = _ref35.theme;
  return theme.__hd__.table.borderWidths.row;
}, function (_ref36) {
  var theme = _ref36.theme;
  return theme.__hd__.table.colors.rowBorder;
});
var StyledTHead = styled.thead.withConfig({
  displayName: "StyledTable__StyledTHead",
  componentId: "sc-19w8dz0-3"
})(["&&{margin:0;padding:0;background-color:", ";}&& > tr:first-child > th:first-child{border-top-left-radius:", ";}&& > tr:first-child > th:last-child{border-top-right-radius:", ";}&& > tr:last-child > th:first-child{border-bottom-left-radius:", ";}&& > tr:last-child > th:last-child{border-bottom-right-radius:", ";}&&{", ";}"], function (_ref37) {
  var theme = _ref37.theme;
  return theme.__hd__.table.colors.headerBackground;
}, function (_ref38) {
  var theme = _ref38.theme;
  return theme.__hd__.table.radii.header;
}, function (_ref39) {
  var theme = _ref39.theme;
  return theme.__hd__.table.radii.header;
}, function (_ref40) {
  var theme = _ref40.theme;
  return theme.__hd__.table.radii.header;
}, function (_ref41) {
  var theme = _ref41.theme;
  return theme.__hd__.table.radii.header;
}, nestedRowStyle);
var StyledTBody = styled.tbody.withConfig({
  displayName: "StyledTable__StyledTBody",
  componentId: "sc-19w8dz0-4"
})(["&&{margin:0;padding:0;", ";}"], nestedRowStyle);
var StyledTable = styled.table.withConfig({
  displayName: "StyledTable",
  componentId: "sc-19w8dz0-5"
})(["&&{width:100%;text-align:left;border-collapse:separate;border-spacing:0;margin:0;padding:0;border:", " solid ", ";", ";}"], function (_ref42) {
  var theme = _ref42.theme;
  return theme.__hd__.table.borderWidths.general;
}, function (_ref43) {
  var theme = _ref43.theme;
  return theme.__hd__.table.colors.generalBorder;
}, function (_ref44) {
  var themeFixedLayout = _ref44.themeFixedLayout;
  switch (themeFixedLayout) {
    case true:
      return css$2(["table-layout:fixed;"]);
    case false:
      return css$2([""]);
  }
});
var StyledTableWrapper = styled.div.withConfig({
  displayName: "StyledTable__StyledTableWrapper",
  componentId: "sc-19w8dz0-6"
})(["&&{background:", ";margin:0;padding:0;", ";}"], function (_ref45) {
  var theme = _ref45.theme;
  return theme.__hd__.table.colors.background;
}, function (_ref46) {
  var themeSticky = _ref46.themeSticky;
  switch (themeSticky) {
    case true:
      return css$2([""]);
    case false:
      return css$2(["overflow-x:auto;"]);
  }
});
var StyledSortingArrows = styled.div.withConfig({
  displayName: "StyledTable__StyledSortingArrows",
  componentId: "sc-19w8dz0-7"
})(["&&{font-size:", ";line-height:", ";display:flex;flex-direction:column;margin:0;padding:0;margin-left:", ";}"], function (_ref47) {
  var theme = _ref47.theme;
  return theme.__hd__.table.fontSizes.sortingIcon;
}, function (_ref48) {
  var theme = _ref48.theme;
  return theme.__hd__.table.lineHeights.sortingIcon;
}, function (_ref49) {
  var theme = _ref49.theme;
  return theme.__hd__.table.space.sortingIconMarginLeft;
});
var StyledExpandableIcon = styled.div.withConfig({
  displayName: "StyledTable__StyledExpandableIcon",
  componentId: "sc-19w8dz0-8"
})(["&&{display:flex;justify-content:center;align-items:center;box-sizing:border-box;margin:0;padding:0;border:", " solid ", ";border-radius:", ";width:", ";height:", ";font-size:", ";}"], function (_ref50) {
  var theme = _ref50.theme;
  return theme.__hd__.table.borderWidths.expandableIcon;
}, function (_ref51) {
  var theme = _ref51.theme;
  return theme.__hd__.table.colors.expandableIconBorder;
}, function (_ref52) {
  var theme = _ref52.theme;
  return theme.__hd__.table.radii.expandableIcon;
}, function (_ref53) {
  var theme = _ref53.theme;
  return theme.__hd__.table.sizes.expandableIcon;
}, function (_ref54) {
  var theme = _ref54.theme;
  return theme.__hd__.table.sizes.expandableIcon;
}, function (_ref55) {
  var theme = _ref55.theme;
  return theme.__hd__.table.fontSizes.expandableIcon;
});
var StyledPaginationWrapper = styled.div.withConfig({
  displayName: "StyledTable__StyledPaginationWrapper",
  componentId: "sc-19w8dz0-9"
})(["&&{margin:0;padding:0;margin-top:", ";display:flex;justify-content:flex-end;}"], function (_ref56) {
  var theme = _ref56.theme;
  return theme.__hd__.table.space.paginationMarginTop;
});
var StyledItemsPerPageSelect = styled(Select$2).withConfig({
  displayName: "StyledTable__StyledItemsPerPageSelect",
  componentId: "sc-19w8dz0-10"
})(["&& input{width:", ";}"], function (_ref57) {
  var theme = _ref57.theme;
  return theme.__hd__.table.sizes.itemsPerPageInputWidth;
});
var StyledFilterWrapper = styled.div.withConfig({
  displayName: "StyledTable__StyledFilterWrapper",
  componentId: "sc-19w8dz0-11"
})(["&&{margin:0 0 0 auto;padding:0;}"]);
var StyledFilterTargetWrapper = styled.div.withConfig({
  displayName: "StyledTable__StyledFilterTargetWrapper",
  componentId: "sc-19w8dz0-12"
})(["&&{display:flex;margin:0;padding:0;}"]);
var StyledEmptyTableContent = styled.div.withConfig({
  displayName: "StyledTable__StyledEmptyTableContent",
  componentId: "sc-19w8dz0-13"
})(["&&{display:flex;justify-content:center;box-sizing:border-box;font-size:", ";margin:", ";padding:", ";color:", ";}"], function (_ref58) {
  var theme = _ref58.theme;
  return theme.__hd__.table.fontSizes.cell;
}, function (_ref59) {
  var theme = _ref59.theme;
  return theme.__hd__.table.space.emptyContentMargin;
}, function (_ref60) {
  var theme = _ref60.theme;
  return theme.__hd__.table.space.emptyContentPadding;
}, function (_ref61) {
  var theme = _ref61.theme;
  return theme.__hd__.table.colors.emptyText;
});
var StyledTable$1 = StyledTable;

var TableFilter = function TableFilter(_ref) {
  var renderFilter = _ref.renderFilter,
    hasFilterInput = _ref.hasFilterInput,
    dataTestId = _ref['data-test-id'];
  var _React$useState = React__default.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    open = _React$useState2[0],
    setOpen = _React$useState2[1];
  var onClose = React__default.useCallback(function () {
    return setOpen(false);
  }, [setOpen]);
  var onOpen = React__default.useCallback(function () {
    return setOpen(true);
  }, [setOpen]);
  var target = /*#__PURE__*/React__default.createElement(StyledFilterTargetWrapper, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    intent: open === true || hasFilterInput === true ? 'primary' : 'subdued-text',
    icon: "funnel-filter",
    size: "small",
    onClick: open === true ? onClose : onOpen,
    "data-test-id": "".concat(dataTestId, "__filter")
  }));
  var content = renderFilter({
    onClose: onClose
  });
  return /*#__PURE__*/React__default.createElement(StyledFilterWrapper, {
    onClick: function onClick(e) {
      e.stopPropagation();
    }
  }, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    open: open,
    content: content,
    placement: "bottom-right",
    target: target,
    onClose: onClose
  }));
};
var TableFilter$1 = TableFilter;

var TableTH = /*#__PURE__*/forwardRef(function (_a, forwardedRef) {
  var sortingProps = _a.sortingProps,
    sticky = _a.sticky,
    displayAtBreakpoint = _a.displayAtBreakpoint,
    filterable = _a.filterable,
    renderFilter = _a.renderFilter,
    hasFilterInput = _a.hasFilterInput,
    _a$align = _a.align,
    align = _a$align === void 0 ? 'left' : _a$align,
    children = _a.children,
    dataTestId = _a['data-test-id'],
    themeWidth = _a.themeWidth,
    themeHorizontallySticky = _a.themeHorizontallySticky,
    themeLeft = _a.themeLeft,
    themeShowDivider = _a.themeShowDivider,
    hasBorderRight = _a.hasBorderRight,
    otherTHProps = __rest(_a, ["sortingProps", "sticky", "displayAtBreakpoint", "filterable", "renderFilter", "hasFilterInput", "align", "children", 'data-test-id', "themeWidth", "themeHorizontallySticky", "themeLeft", "themeShowDivider", "hasBorderRight"]);
  return /*#__PURE__*/React__default.createElement(StyledTH, Object.assign({}, otherTHProps, {
    themeSticky: sticky,
    themeDisplayAtBreakpoint: displayAtBreakpoint,
    "data-test-id": dataTestId,
    themeWidth: themeWidth,
    themeHorizontallySticky: themeHorizontallySticky,
    themeLeft: themeLeft,
    themeShowDivider: themeShowDivider,
    themeHasBorderRight: hasBorderRight,
    ref: forwardedRef
  }), /*#__PURE__*/React__default.createElement(StyledInnerTH, {
    themeAlign: align
  }, children, sortingProps.sortable === true && /*#__PURE__*/React__default.createElement(StyledSortingArrows, null, /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "".concat(dataTestId, "__up"),
    icon: "carat-up",
    intent: sortingProps.sortedDesc === false ? 'primary' : 'disabled-text',
    size: "small",
    onClick: function onClick(e) {
      var _a;
      e.stopPropagation();
      (_a = sortingProps.toggleSortBy) === null || _a === void 0 ? void 0 : _a.call(sortingProps, false);
    }
  }), /*#__PURE__*/React__default.createElement(Button.Icon, {
    "data-test-id": "".concat(dataTestId, "__down"),
    icon: "carat-down",
    intent: sortingProps.sortedDesc === true ? 'primary' : 'disabled-text',
    size: "small",
    onClick: function onClick(e) {
      var _a;
      e.stopPropagation();
      (_a = sortingProps.toggleSortBy) === null || _a === void 0 ? void 0 : _a.call(sortingProps, true);
    }
  })), filterable === true && /*#__PURE__*/React__default.createElement(TableFilter$1, {
    renderFilter: renderFilter,
    hasFilterInput: hasFilterInput,
    "data-test-id": dataTestId
  })));
});
TableTH.displayName = 'TableTH';
var TableTH$1 = TableTH;

var useRowExpansionUI = (function (hooks) {
  hooks.visibleColumns.push(function (cols) {
    return [{
      id: 'expander',
      Header: function Header() {
        return null;
      },
      Cell: function Cell(_ref) {
        var row = _ref.row,
          customRowExpandable = _ref.customRowExpandable;
        return customRowExpandable(row.original) ? /*#__PURE__*/React__default.createElement(StyledExpandableIcon, Object.assign({}, row.getToggleRowExpandedProps()), /*#__PURE__*/React__default.createElement(Icon$1, {
          intent: "text",
          icon: row.isExpanded ? 'remove' : 'add'
        })) : null;
      }
    }].concat(_toConsumableArray(cols));
  });
});

function useColumnLefts(numColumns) {
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    refs = _useState2[0],
    setRefs = _useState2[1];
  var _useState3 = useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    lefts = _useState4[0],
    setLefts = _useState4[1];
  useEffect(function () {
    setRefs(Array(numColumns).fill(0).map(function () {
      return /*#__PURE__*/createRef();
    }));
    setLefts(Array(numColumns).fill(0));
  }, [numColumns]);
  var getDimensions = useCallback(function () {
    var columnWidths = refs.map(function (ref) {
      return ref.current !== null ? ref.current.offsetWidth : 0;
    });
    var cummulativeWidths = columnWidths.map(function (_, i, arr) {
      if (i === 0) return 0;
      return arr.slice(0, i).reduce(function (prevValue, currValue) {
        return prevValue + currValue;
      });
    });
    setLefts(cummulativeWidths);
  }, [refs]);
  useEffect(function () {
    getDimensions();
    window.addEventListener('resize', getDimensions);
    return function () {
      return window.removeEventListener('resize', getDimensions);
    };
  }, [getDimensions]);
  return [lefts, refs];
}

var hasFixedLayout = function hasFixedLayout(columns) {
  var headerWithWidth = columns.find(function (header) {
    return Object.keys(header).includes('width');
  });
  return headerWithWidth !== undefined;
};
var SelectionCheckbox = function SelectionCheckbox(props) {
  return /*#__PURE__*/React__default.createElement(Checkbox, Object.assign({}, props, {
    style: {
      display: 'block'
    },
    value: "",
    text: ""
  }));
};
function Table(_ref) {
  var columns = _ref.columns,
    data = _ref.data,
    loading = _ref.loading,
    _ref$sticky = _ref.sticky,
    sticky = _ref$sticky === void 0 ? false : _ref$sticky,
    _ref$horizontallyStic = _ref.horizontallySticky,
    horizontallySticky = _ref$horizontallyStic === void 0 ? false : _ref$horizontallyStic,
    _ref$selectable = _ref.selectable,
    selectable = _ref$selectable === void 0 ? false : _ref$selectable,
    selectedRows = _ref.selectedRows,
    onSelectedRowsChange = _ref.onSelectedRowsChange,
    expansion = _ref.expansion,
    expandedRows = _ref.expandedRows,
    onExpandedRowsChange = _ref.onExpandedRowsChange,
    pagination = _ref.pagination,
    rowsConfig = _ref.rows,
    onPaginationChange = _ref.onPaginationChange,
    itemsPerPage = _ref.itemsPerPage,
    onItemsPerPageChange = _ref.onItemsPerPageChange,
    filters = _ref.filters,
    onFiltersChange = _ref.onFiltersChange,
    sortBy = _ref.sortBy,
    onSortByChange = _ref.onSortByChange,
    manualSortBy = _ref.manualSortBy,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    noData = _ref.noData,
    bulkCheckSettings = _ref.bulkCheckSettings;
  var _a;
  useDeprecation('Filter property of a column is deprecated. It will be removed in the next major release of Hero-design!', columns.find(function (c) {
    return c.Filter !== undefined;
  }) !== undefined);
  var _ref2 = bulkCheckSettings || {},
    disableCheckRule = _ref2.disableCheckRule,
    bulkHeaderRenderer = _ref2.bulkHeaderRenderer,
    bulkItemRerender = _ref2.bulkItemRerender;
  var useControlledState = React__default.useCallback(function (state) {
    return Object.assign(Object.assign({}, state), {
      filters: pipe(fromUndefinedable(filters), getOrElse(function () {
        return state.filters;
      })),
      expanded: pipe(fromUndefinedable(expandedRows), getOrElse(function () {
        return state.expanded;
      })),
      sortBy: pipe(fromUndefinedable(sortBy), getOrElse(function () {
        return state.sortBy;
      })),
      selectedRowIds: pipe(fromUndefinedable(selectedRows), getOrElse(function () {
        return state.selectedRowIds;
      }))
    });
  }, [filters, expandedRows, sortBy, selectedRows]);
  var RowSelectionHeader = React__default.useCallback(function (_ref3) {
    var rows = _ref3.rows;
    var changeableRows = rows.filter(function (row) {
      var isDisable = disableCheckRule ? disableCheckRule(row) : false;
      return !isDisable;
    });
    var allSelected = changeableRows.every(function (row) {
      return row.isSelected;
    });
    var allUnselected = changeableRows.every(function (row) {
      return !row.isSelected;
    });
    var disabled = changeableRows.length === 0;
    var selectionProps = {
      checked: allSelected,
      onChange: function onChange() {
        return changeableRows.forEach(function (row) {
          return row.toggleRowSelected(!allSelected);
        });
      },
      indeterminate: !allSelected && !allUnselected,
      disabled: disabled
    };
    if (bulkHeaderRenderer) {
      return bulkHeaderRenderer(Object.assign(Object.assign({}, selectionProps), {
        rows: rows
      }));
    }
    return /*#__PURE__*/React__default.createElement(SelectionCheckbox, Object.assign({}, selectionProps));
  }, [bulkHeaderRenderer, disableCheckRule]);
  var RowSelectionCell = React__default.useCallback(function (_ref4) {
    var row = _ref4.row;
    var disabled = disableCheckRule ? disableCheckRule(row) : false;
    var _row$getToggleRowSele = row.getToggleRowSelectedProps(),
      onChange = _row$getToggleRowSele.onChange,
      checked = _row$getToggleRowSele.checked,
      indeterminate = _row$getToggleRowSele.indeterminate;
    var selectionProps = {
      checked: checked,
      onChange: onChange,
      indeterminate: indeterminate,
      disabled: disabled
    };
    if (bulkItemRerender) {
      return bulkItemRerender(Object.assign(Object.assign({}, selectionProps), {
        row: row
      }));
    }
    return /*#__PURE__*/React__default.createElement(SelectionCheckbox, Object.assign({}, selectionProps));
  }, [bulkItemRerender, disableCheckRule]);
  var useRowSelectionUI = React__default.useCallback(function (hooks) {
    hooks.visibleColumns.push(function (cols) {
      return [{
        id: 'selection',
        Header: RowSelectionHeader,
        Cell: RowSelectionCell
      }].concat(_toConsumableArray(cols));
    });
  }, [RowSelectionCell, RowSelectionHeader]);
  var emptyHook = function emptyHook(_hooks) {
    return undefined;
  };
  var _useTable = reactTable.exports.useTable.apply(void 0, [{
      columns: columns,
      data: data,
      manualFilters: true,
      manualSortBy: manualSortBy,
      getRowId: rowsConfig != null && rowsConfig.rowIdExtractor != null ? rowsConfig.rowIdExtractor : undefined,
      initialState: {
        filters: filters,
        expanded: pipe(fromUndefinedable(expandedRows), getOrElse(function () {
          return {};
        })),
        sortBy: pipe(fromUndefinedable(sortBy), getOrElse(function () {
          return [];
        })),
        selectedRowIds: pipe(fromUndefinedable(selectedRows), getOrElse(function () {
          return {};
        }))
      },
      stateReducer: function stateReducer(newState, action) {
        switch (action.type) {
          case 'toggleRowSelected':
          case 'toggleAllRowsSelected':
            pipe(fromUndefinedable(onSelectedRowsChange), getOrElse(function () {
              return noop$2;
            }), invokeWith(newState.selectedRowIds));
            break;
          case 'toggleSortBy':
            pipe(fromUndefinedable(onSortByChange), getOrElse(function () {
              return noop$2;
            }), invokeWith(newState.sortBy));
            break;
          case 'setFilter':
            pipe(fromUndefinedable(onFiltersChange), getOrElse(function () {
              return noop$2;
            }), invokeWith(newState.filters));
            break;
          case 'toggleRowExpanded':
            pipe(fromUndefinedable(onExpandedRowsChange), getOrElse(function () {
              return noop$2;
            }), invokeWith(newState.expanded));
            break;
        }
        return newState;
      },
      useControlledState: useControlledState,
      customRowExpandable: expansion !== undefined ? expansion.rowExpandable : always(false)
    }].concat(_toConsumableArray(pipe([filters !== undefined && onFiltersChange !== undefined ? reactTable.exports.useFilters : emptyHook, reactTable.exports.useSortBy, expansion !== undefined ? reactTable.exports.useExpanded : emptyHook, expansion !== undefined ? useRowExpansionUI : emptyHook, selectable === true ? reactTable.exports.useRowSelect : emptyHook, selectable === true ? useRowSelectionUI : emptyHook], reject(equal(emptyHook)))))),
    getTableProps = _useTable.getTableProps,
    getTableBodyProps = _useTable.getTableBodyProps,
    headerGroups = _useTable.headerGroups,
    rows = _useTable.rows,
    prepareRow = _useTable.prepareRow,
    headers = _useTable.headers;
  var isMultipleLevelHeader = !!headers.filter(function (header) {
    return header.columns !== undefined;
  }).length;
  var tableProps = getTableProps();
  var bodyProps = getTableBodyProps();
  // We are using headerGroups[0] here because currently we don't support multiple header groups
  var _useColumnLefts = useColumnLefts((_a = headerGroups[0]) === null || _a === void 0 ? void 0 : _a.headers.length),
    _useColumnLefts2 = _slicedToArray(_useColumnLefts, 2),
    columnLefts = _useColumnLefts2[0],
    columnRefs = _useColumnLefts2[1];
  // Column divider divides the sticky and scrollable parts of the table.
  // We want to stick expansion/selection column and the first column after expansion/selection column.
  // Since expansion/selection column does NOT have accessor, the first column with accessor will be the divider.
  var columnDividerIndex = headerGroups[0] !== undefined ? headerGroups[0].headers.findIndex(function (col) {
    return col.accessor !== undefined;
  }) : 0;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    horizontallyScrollable = _useState2[0],
    setHorizontallyScrollable = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    tableWrapperElement = _useState4[0],
    setTableWrapperElement = _useState4[1];
  useResizeObserver(function (_ref5) {
    var clientWidth = _ref5.clientWidth,
      scrollWidth = _ref5.scrollWidth;
    setHorizontallyScrollable(clientWidth < scrollWidth);
  }, tableWrapperElement);
  var isHorizontallySticky = useMemo(function () {
    return function (columnIndex) {
      return horizontallySticky && horizontallyScrollable && columnIndex <= columnDividerIndex;
    };
  }, [horizontallySticky, columnDividerIndex, horizontallyScrollable]);
  var shouldShowDivider = useMemo(function () {
    return function (columnIndex) {
      return horizontallySticky && horizontallyScrollable && columnIndex === columnDividerIndex;
    };
  }, [horizontallySticky, columnDividerIndex, horizontallyScrollable]);
  return /*#__PURE__*/React__default.createElement(Spinner$1, {
    loading: loading
  }, /*#__PURE__*/React__default.createElement(StyledTableWrapper, {
    themeSticky: sticky,
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    ref: setTableWrapperElement
  }, /*#__PURE__*/React__default.createElement(StyledTable$1, {
    style: tableProps.style,
    className: tableProps.className,
    role: tableProps.role,
    themeFixedLayout: hasFixedLayout(columns)
  }, /*#__PURE__*/React__default.createElement(StyledTHead, null, headerGroups.map(function (headerGroup) {
    var headerGroupProps = headerGroup.getHeaderGroupProps();
    return /*#__PURE__*/React__default.createElement("tr", {
      key: headerGroupProps.key
    }, headerGroup.headers.map(function (column, columnIndex) {
      var headerProps = column.getHeaderProps(column.getSortByToggleProps());
      var hasFilterInput = pipe(fromUndefinedable(filters), flatMap(find(function (filter) {
        return filter.id === column.id;
      })), map$2(function (_ref6) {
        var value = _ref6.value;
        return isDefined(value) && !(typeof value === 'string' && value === '');
      }), getOrElse(function () {
        return false;
      }));
      // TODO: this logic just work with 2 levels header. Need another logic to handle it correctly.
      var hasBorderRight = !!headers.filter(function (header) {
        var _a;
        var childrenHeaderLength = (_a = header.columns) === null || _a === void 0 ? void 0 : _a.length;
        if (!childrenHeaderLength) return false;
        var lastChildrenHeader = header.columns[childrenHeaderLength - 1];
        return lastChildrenHeader.id === column.id;
      }).length;
      return /*#__PURE__*/React__default.createElement(TableTH$1
      // XXX: Intentionally having spreading props to accept custom props from react-table
      , Object.assign({}, headerProps, {
        key: headerProps.key,
        sortingProps: {
          toggleSortBy: column.toggleSortBy,
          sortable: column.canSort,
          sorted: column.isSorted,
          sortedDesc: column.isSortedDesc
        },
        sticky: sticky,
        displayAtBreakpoint: column.displayAtBreakpoint,
        filterable: column.canFilter === true && column.Filter !== undefined,
        renderFilter: function renderFilter(props) {
          return column.render('Filter', props);
        },
        hasFilterInput: hasFilterInput,
        "data-test-id": "table__".concat(headerProps.key),
        align: column.align,
        themeWidth: column.width,
        themeHorizontallySticky: isHorizontallySticky(columnIndex),
        hasBorderRight: isMultipleLevelHeader && column.depth === 0 || hasBorderRight,
        themeLeft: columnLefts[columnIndex],
        themeShowDivider: shouldShowDivider(columnIndex),
        ref: columnRefs[columnIndex]
      }), column.render('Header'));
    }));
  })), /*#__PURE__*/React__default.createElement(StyledTBody, {
    style: bodyProps.style,
    className: bodyProps.className,
    role: bodyProps.role
  }, rows.map(function (row) {
    prepareRow(row);
    var rowProps = row.getRowProps();
    var rowClassName = rowsConfig !== undefined && rowsConfig.generateClassName !== undefined ? rowsConfig.generateClassName(row) : undefined;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: rowProps.key
    }, /*#__PURE__*/React__default.createElement("tr", {
      className: rowClassName,
      "data-test-id": "table__".concat(rowProps.key)
    }, row.cells.map(function (cell, cellIndex) {
      var cellProps = cell.getCellProps();
      return /*#__PURE__*/React__default.createElement(StyledTD, {
        key: cellProps.key,
        "data-test-id": "table__".concat(cellProps.key),
        themeAlign: cell.column.align,
        themeDisplayAtBreakpoint: cell.column.displayAtBreakpoint,
        themeHorizontallySticky: isHorizontallySticky(cellIndex),
        themeLeft: columnLefts[cellIndex],
        themeShowDivider: shouldShowDivider(cellIndex)
      }, cell.render('Cell'));
    })), expansion !== undefined && row.isExpanded === true && expansion.expandedRowRenderer(row.original));
  }))), rows.length === 0 && noData !== undefined && /*#__PURE__*/React__default.createElement(StyledEmptyTableContent, null, noData)), pipe(fromUndefinedable(pagination), map$2(function (paginationValue) {
    return /*#__PURE__*/React__default.createElement(StyledPaginationWrapper, null, /*#__PURE__*/React__default.createElement(Pagination$1, {
      current: paginationValue.current,
      total: paginationValue.total,
      onChange: onPaginationChange !== undefined ? onPaginationChange : noop$2
    }), pipe(fromUndefinedable(itemsPerPage), map$2(function (ipp) {
      return /*#__PURE__*/React__default.createElement(StyledItemsPerPageSelect, {
        size: "small",
        onChange: function onChange(val) {
          if (val !== undefined && onItemsPerPageChange !== undefined) {
            onItemsPerPageChange(val);
          }
        },
        options: ipp.options,
        value: ipp.value,
        optionMenuStyle: {
          width: 'auto'
        }
      });
    }), getOrElse(function () {
      return null;
    })));
  }), getOrElse(function () {
    return null;
  })));
}

var createFilters = function createFilters() {
  var Filters = function Filters(props) {
    useDeprecation('Table.createFilters is deprecated. Please use Filters (https://design.employmenthero.com/web/Components/Filters) instead.');
    return /*#__PURE__*/React__default.createElement(OriginalFilters, Object.assign({}, props));
  };
  var Filter = function Filter(props) {
    useDeprecation('Table.createFilters is deprecated. Please use Filters (https://design.employmenthero.com/web/Components/Filters) instead.');
    return /*#__PURE__*/React__default.createElement(Filter$1, Object.assign({}, props));
  };
  return {
    Filters: Filters,
    Filter: Filter
  };
};
var createFilters$1 = createFilters;

var saveValueToLS = function saveValueToLS(key, value) {
  return Promise.resolve(localStorage.setItem(key, JSON.stringify(value)));
};
var getValueFromLS = function getValueFromLS(key) {
  var str = localStorage.getItem(key);
  return Promise.resolve(str === null ? null : JSON.parse(str));
};
var getLSCacheProvider = function getLSCacheProvider(cacheKey) {
  return {
    save: function save(value) {
      return saveValueToLS(cacheKey, value);
    },
    load: function load() {
      return getValueFromLS(cacheKey);
    }
  };
};
var useFiltersState = function useFiltersState(_ref) {
  var initialValues = _ref.initialValues,
    cacheProvider = _ref.cacheProvider,
    _ref$cacheOnChange = _ref.cacheOnChange,
    cacheOnChange = _ref$cacheOnChange === void 0 ? false : _ref$cacheOnChange;
  var _useState = useState(initialValues),
    _useState2 = _slicedToArray(_useState, 2),
    filterValues = _useState2[0],
    setFilterValues = _useState2[1];
  var _useState3 = useState(cacheProvider !== undefined),
    _useState4 = _slicedToArray(_useState3, 2),
    loadingCache = _useState4[0],
    setCacheLoading = _useState4[1];
  useEffect(function () {
    if (cacheProvider === undefined) return;
    cacheProvider.load().then(function (cacheValue) {
      setCacheLoading(false);
      if (cacheValue !== null) setFilterValues(cacheValue);
    });
  }, [cacheProvider]);
  var persistentSetValues = useCallback(function (values) {
    setFilterValues(values);
    cacheProvider === null || cacheProvider === void 0 ? void 0 : cacheProvider.save(values);
  }, [cacheProvider]);
  var exposedSetValues = cacheOnChange ? persistentSetValues : setFilterValues;
  var cacheValues = useCallback(function () {
    cacheProvider === null || cacheProvider === void 0 ? void 0 : cacheProvider.save(filterValues);
  }, [cacheProvider, filterValues]);
  var resetCache = useCallback(function () {
    return cacheProvider === null || cacheProvider === void 0 ? void 0 : cacheProvider.save(initialValues);
  }, [cacheProvider, initialValues]);
  var resetFilters = useCallback(function () {
    return exposedSetValues(initialValues);
  }, [initialValues, exposedSetValues]);
  return {
    filterValues: filterValues,
    setFilterValues: exposedSetValues,
    loadingCache: loadingCache,
    cacheValues: cacheValues,
    resetCache: resetCache,
    resetFilters: resetFilters
  };
};
var useFiltersState$1 = useFiltersState;

var CompoundTable = Table;
CompoundTable.ActionButtons = ActionButtons$1;
CompoundTable.BulkActions = BulkActions$1;
CompoundTable.RowAction = RowAction$1;
CompoundTable.Filters = OriginalFilters;
CompoundTable.Filter = Filter$1;
CompoundTable.createFilters = createFilters$1;
CompoundTable.useFiltersState = useFiltersState$1;
CompoundTable.getLSCacheProvider = getLSCacheProvider;
var CompoundTable$1 = CompoundTable;

var TabWrapper$1 = styled.div.withConfig({
  displayName: "StyledTabs__TabWrapper",
  componentId: "sc-1epedxf-0"
})(["&&{margin:0;padding:0;}"]);
var TabList$1 = styled.div.withConfig({
  displayName: "StyledTabs__TabList",
  componentId: "sc-1epedxf-1"
})(["&&{position:relative;display:flex;margin:0;padding:0;}&&::before{position:absolute;bottom:0;left:0;right:0;content:'';border-bottom:", " solid ", ";}&&:focus{outline:none;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.tabs.borderWidths["default"];
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.tabs.colors.border;
});
var Tab$1 = styled.button.withConfig({
  displayName: "StyledTabs__Tab",
  componentId: "sc-1epedxf-2"
})(["&&{position:relative;display:inline-flex;align-items:center;white-space:nowrap;background-color:", ";border-radius:", ";margin:0;padding:", ";font-size:", ";line-height:", ";font-weight:", ";border:", " solid ", ";margin-right:", ";box-sizing:border-box;border-bottom:", " solid ", ";}&&:focus{outline:none;}&&{", ";}"], function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.tabs.colors.background;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.tabs.radii["default"];
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.tabs.space.padding;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.tabs.fontSizes["default"];
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.tabs.lineHeights["default"];
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.tabs.fontWeights["default"];
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.tabs.borderWidths["default"];
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.tabs.colors.border;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.tabs.space.marginRight;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.tabs.borderWidths["default"];
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.tabs.colors.border;
}, function (_ref14) {
  var themeVariant = _ref14.themeVariant,
    theme = _ref14.theme;
  switch (themeVariant) {
    case 'basic':
      return css$2(["color:", ";&:hover{color:", ";}&:focus{color:", ";}"], theme.__hd__.tabs.colors.text, theme.__hd__.tabs.colors.hoverText, theme.__hd__.tabs.colors.focusText);
    case 'active':
      return css$2(["background-color:", ";border-bottom:none;color:", ";&:focus{border-color:", ";}"], theme.__hd__.tabs.colors.activeBackground, theme.__hd__.tabs.colors.activeText, theme.__hd__.tabs.colors.focusBorder);
    case 'disabled':
      return css$2(["color:", ";"], theme.__hd__.tabs.colors.disabledText);
  }
});
var TruncatedTab$1 = styled(Tab$1).withConfig({
  displayName: "StyledTabs__TruncatedTab",
  componentId: "sc-1epedxf-3"
})(["&&{height:100%;max-width:", ";}"], function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.tabs.sizes.maxWidth;
});
var DropdownTabWraper$1 = styled.div.withConfig({
  displayName: "StyledTabs__DropdownTabWraper",
  componentId: "sc-1epedxf-4"
})(["&&{height:100%;display:flex;}"]);
var TabTitle$1 = styled.span.withConfig({
  displayName: "StyledTabs__TabTitle",
  componentId: "sc-1epedxf-5"
})(["&&{overflow:hidden;text-overflow:ellipsis;}"]);
var TabTitleIcon$1 = styled.span.withConfig({
  displayName: "StyledTabs__TabTitleIcon",
  componentId: "sc-1epedxf-6"
})(["&&{display:inline-flex;margin:0;padding:0;margin-right:", ";}"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.tabs.space.iconMarginRight;
});
var TabTitleArrowIcon$1 = styled.span.withConfig({
  displayName: "StyledTabs__TabTitleArrowIcon",
  componentId: "sc-1epedxf-7"
})(["&&{display:inline-flex;margin:0;padding:0;margin-left:", ";}"], function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.tabs.space.iconMarginLeft;
});
var TabPanel$1 = styled.div.withConfig({
  displayName: "StyledTabs__TabPanel",
  componentId: "sc-1epedxf-8"
})(["&&{position:relative;border:", " solid ", ";border-top:none;border-radius:", ";margin:0;padding:", ";color:", ";background:", ";font-size:", ";line-height:", ";font-weight:", ";}"], function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.tabs.borderWidths["default"];
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.tabs.colors.border;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.tabs.radii.panel;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.tabs.space.panelPadding;
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.__hd__.tabs.colors.panelText;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.__hd__.tabs.colors.panelBackground;
}, function (_ref24) {
  var theme = _ref24.theme;
  return theme.__hd__.tabs.fontSizes.panel;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.__hd__.tabs.lineHeights.panel;
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.__hd__.tabs.fontWeights.panel;
});
var OverflownMenu = styled(StyledMenu).withConfig({
  displayName: "StyledTabs__OverflownMenu",
  componentId: "sc-1epedxf-9"
})(["&&{max-height:", ";overflow-y:scroll;}"], function (_ref27) {
  var theme = _ref27.theme;
  return theme.__hd__.tabs.sizes.moreTabMaxHeight;
});

var focusTab = function focusTab(element) {
  return pipe(fromNillable(element), map$2(function (el) {
    return el.focus();
  }), getOrElse(noop$2));
};
var getTabVariant = function getTabVariant(_ref) {
  var active = _ref.active,
    disabled = _ref.disabled;
  if (disabled) {
    return 'disabled';
  }
  return active ? 'active' : 'basic';
};
var getTabWidth = function getTabWidth(element) {
  return pipe(fromNillable(element), map$2(function (el) {
    return getComputedStyle(el).width;
  }), getOrElse(function () {
    return '';
  }));
};
var getOnTabListKeydown = function getOnTabListKeydown(_ref2) {
  var tabRefs = _ref2.tabRefs,
    onChangeFocusTabIndex = _ref2.onChangeFocusTabIndex,
    tabsLength = _ref2.tabsLength,
    focusTabIndex = _ref2.focusTabIndex,
    e = _ref2.event;
  // Move right
  if (e.keyCode === 39) {
    var nextIndex = focusTabIndex + 1;
    var newFocusIndex = nextIndex >= tabsLength ? 0 : nextIndex;
    onChangeFocusTabIndex(newFocusIndex);
    focusTab(tabRefs.current[newFocusIndex]);
  }
  // Move left
  if (e.keyCode === 37) {
    var _nextIndex = focusTabIndex - 1;
    var _newFocusIndex = _nextIndex < 0 ? tabsLength - 1 : _nextIndex;
    onChangeFocusTabIndex(_newFocusIndex);
    focusTab(tabRefs.current[_newFocusIndex]);
  }
};

var TabWrapper = styled.div.withConfig({
  displayName: "StyledSubTabs__TabWrapper",
  componentId: "sc-1nwzva8-0"
})(["&&{margin:0;padding:0;position:relative;}"]);
var TabList = styled.div.withConfig({
  displayName: "StyledSubTabs__TabList",
  componentId: "sc-1nwzva8-1"
})(["&&{position:relative;margin:0;padding:0;overflow:hidden;display:flex;}&&:focus{outline:none;}&&{border-bottom:", " solid ", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.tabs.borderWidths["default"];
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.tabs.colors.border;
});
var TabListWrapper = styled.div.withConfig({
  displayName: "StyledSubTabs__TabListWrapper",
  componentId: "sc-1nwzva8-2"
})(["&&{margin:0;padding:0;position:relative;}"]);
var ActiveTabIndicator = styled.div.withConfig({
  displayName: "StyledSubTabs__ActiveTabIndicator",
  componentId: "sc-1nwzva8-3"
})(["&&{position:absolute;bottom:0;height:", ";background:", ";transition:width 0.3s,left 0.3s,right 0.3s;margin:0;padding:0;}"], function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.tabs.sizes.activeTabIndicatorHeight;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.tabs.colors.focusBorder;
});
var Tab = styled.button.withConfig({
  displayName: "StyledSubTabs__Tab",
  componentId: "sc-1nwzva8-4"
})(["&&:focus{outline:none;}&&{position:relative;background:transparent;border:none;font-size:", ";line-height:", ";font-weight:", ";margin:0;padding:", ";display:inline-flex;align-items:center;white-space:nowrap;", ";}"], function (_ref5) {
  var theme = _ref5.theme,
    themeSize = _ref5.themeSize;
  return theme.__hd__.tabs.fontSizes.subTabTitles[themeSize];
}, function (_ref6) {
  var theme = _ref6.theme,
    themeSize = _ref6.themeSize;
  return theme.__hd__.tabs.lineHeights.subTabTitles[themeSize];
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.tabs.fontWeights.subTabTitle;
}, function (_ref8) {
  var theme = _ref8.theme,
    themeSize = _ref8.themeSize;
  return theme.__hd__.tabs.space.subPadding[themeSize];
}, function (_ref9) {
  var themeVariant = _ref9.themeVariant,
    theme = _ref9.theme;
  switch (themeVariant) {
    case 'basic':
      return css$2(["color:", ";&:hover{color:", ";}&:focus{color:", ";}"], theme.__hd__.tabs.colors.text, theme.__hd__.tabs.colors.hoverText, theme.__hd__.tabs.colors.focusText);
    case 'active':
      return css$2(["color:", ";&:focus{color:", ";& ~ ", "{background-color:", ";}}"], theme.__hd__.tabs.colors.activeText, theme.__hd__.tabs.colors.subFocusText, ActiveTabIndicator, theme.__hd__.tabs.colors.subFocusText);
    case 'disabled':
      return css$2(["color:", ";"], theme.__hd__.tabs.colors.disabledText);
  }
});
var TabPanel = styled.div.withConfig({
  displayName: "StyledSubTabs__TabPanel",
  componentId: "sc-1nwzva8-5"
})(["&&{margin:0;padding:", ";}"], function (_ref10) {
  var theme = _ref10.theme,
    themeSize = _ref10.themeSize;
  return theme.__hd__.tabs.space.subTabPanelPadding[themeSize];
});
var TabTitleIcon = styled.span.withConfig({
  displayName: "StyledSubTabs__TabTitleIcon",
  componentId: "sc-1nwzva8-6"
})(["&&{display:inline-flex;margin:0;padding:0;margin-right:", ";}"], function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.tabs.space.iconMarginRight;
});
var TruncatedTab = styled(Tab).withConfig({
  displayName: "StyledSubTabs__TruncatedTab",
  componentId: "sc-1nwzva8-7"
})(["&&{height:100%;max-width:", ";}"], function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.tabs.sizes.maxWidth;
});
var DropdownTabWraper = styled.div.withConfig({
  displayName: "StyledSubTabs__DropdownTabWraper",
  componentId: "sc-1nwzva8-8"
})(["&&{height:100%;display:flex;}"]);
var TabTitle = styled.span.withConfig({
  displayName: "StyledSubTabs__TabTitle",
  componentId: "sc-1nwzva8-9"
})(["&&{overflow:hidden;text-overflow:ellipsis;}"]);
styled(StyledMenu).withConfig({
  displayName: "StyledSubTabs__OverflownMenu",
  componentId: "sc-1nwzva8-10"
})(["&&{max-height:", ";overflow-y:scroll;}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.tabs.sizes.moreTabMaxHeight;
});
var TabTitleArrowIcon = styled.span.withConfig({
  displayName: "StyledSubTabs__TabTitleArrowIcon",
  componentId: "sc-1nwzva8-11"
})(["&&{display:inline-flex;margin:0;padding:0;margin-left:", ";}"], function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.tabs.space.iconMarginLeft;
});

var TabIndicator = function TabIndicator(_ref) {
  var selectedIndex = _ref.selectedIndex,
    tabWidths = _ref.tabWidths;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    indicatorWidth = _useState2[0],
    setIndicatorWidth = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    indicatorLeft = _useState4[0],
    setIndicatorLeft = _useState4[1];
  useLayoutEffect(function () {
    setIndicatorWidth(tabWidths[selectedIndex]);
    setIndicatorLeft(selectedIndex === 0 ? '0' : "calc(".concat(tabWidths.slice(0, selectedIndex).join(' + '), ")"));
  }, [selectedIndex, tabWidths]);
  return /*#__PURE__*/React__default.createElement(ActiveTabIndicator, {
    "data-test-id": "active-tab-indicator",
    style: {
      width: indicatorWidth,
      left: indicatorLeft
    }
  });
};
var TabIndicator$1 = TabIndicator;

var subTabPrefix$2 = 'subTabs';
var VIEW_MORE_TAB$1 = 'view-more-sub-tab';
var OverflowTabList$1 = function OverflowTabList(_ref) {
  var tabs = _ref.tabs,
    selectedTabId = _ref.selectedTabId,
    onChange = _ref.onChange,
    id = _ref.id,
    focusTabIndex = _ref.focusTabIndex,
    onChangeFocusTabIndex = _ref.onChangeFocusTabIndex,
    _viewMoreText = _ref.viewMoreText,
    tabWidths = _ref.tabWidths,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size;
  var _a;
  var tabRefs = useRef([]);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    openDropdown = _useState2[0],
    setOpenDropdown = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    numberOfRenderedTabs = _useState4[0],
    setNumberOfRenderedTabs = _useState4[1];
  var tabListWrapperRef = useRef(null);
  var _useTranslation = useTranslation(),
    t = _useTranslation.t;
  var viewMoreText = _viewMoreText || t('View more');
  useLayoutEffect(function () {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);
  var onTabListKeyDown = useCallback(function (event) {
    getOnTabListKeydown({
      tabRefs: tabRefs,
      onChangeFocusTabIndex: onChangeFocusTabIndex,
      tabsLength: tabs.length,
      focusTabIndex: focusTabIndex,
      event: event
    });
  }, [tabRefs, onChangeFocusTabIndex, tabs.length, focusTabIndex]);
  var theme = useTheme();
  var maxTabWidth = parseInt(theme.__hd__.tabs.sizes.maxWidth || '', 10);
  var accTabWidths = useMemo(function () {
    var accWidth = 0;
    return tabWidths.map(function (width) {
      accWidth += Math.min(width, maxTabWidth);
      return accWidth;
    });
  }, [tabWidths, maxTabWidth]);
  var calculateNumberOfRenderedTabs = useCallback(function (_ref2) {
    var clientWidth = _ref2.clientWidth;
    var breakIdx = accTabWidths.findIndex(function (accWidth) {
      return accWidth + maxTabWidth > clientWidth;
    });
    setNumberOfRenderedTabs(breakIdx || 0);
  }, [accTabWidths, maxTabWidth]);
  var selectedTabIndex = tabs.findIndex(function (tab) {
    return tab.id === selectedTabId;
  });
  var selectedTabTitle = ((_a = tabs[selectedTabIndex]) === null || _a === void 0 ? void 0 : _a.title) || '';
  var selectedTabWasCollapsed = selectedTabIndex >= numberOfRenderedTabs;
  var renderedTabs = useMemo(function () {
    return tabs.slice(0, numberOfRenderedTabs);
  }, [numberOfRenderedTabs, tabs]);
  var collapsedTabs = useMemo(function () {
    return tabs.slice(numberOfRenderedTabs);
  }, [numberOfRenderedTabs, tabs]);
  var _useState5 = useState([]),
    _useState6 = _slicedToArray(_useState5, 2),
    overflowTabWidths = _useState6[0],
    setOverflowTabWidths = _useState6[1];
  useLayoutEffect(function () {
    var tabResizeObserver = new ResizeObserver(function () {
      var newTabWidths = tabRefs.current.map(function (tabElement) {
        return getTabWidth(tabElement);
      });
      setOverflowTabWidths(newTabWidths);
    });
    tabRefs.current.forEach(function (tabRef) {
      if (tabRef === null) return;
      tabResizeObserver.observe(tabRef);
    });
    return function () {
      tabResizeObserver.disconnect();
    };
  }, [renderedTabs]);
  useLayoutEffect(function () {
    var tabListResizeObserver = new ResizeObserver(function () {
      var _a;
      calculateNumberOfRenderedTabs({
        clientWidth: ((_a = tabListWrapperRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0
      });
    });
    if (tabListWrapperRef.current) {
      tabListResizeObserver.observe(tabListWrapperRef.current);
    }
    return function () {
      tabListResizeObserver.disconnect();
    };
  }, [tabListWrapperRef.current]);
  return /*#__PURE__*/React__default.createElement(TabListWrapper, null, /*#__PURE__*/React__default.createElement(TabList, {
    ref: tabListWrapperRef,
    role: "tablist",
    onKeyDown: onTabListKeyDown,
    tabIndex: -1,
    "data-test-id": "overflow-tab-list"
  }, renderedTabs.map(function (tab, index) {
    var active = selectedTabId === tab.id;
    var variant = getTabVariant({
      active: active,
      disabled: tab.disabled !== undefined ? tab.disabled : false
    });
    return /*#__PURE__*/React__default.createElement(Tooltip$1, {
      target: /*#__PURE__*/React__default.createElement(TruncatedTab, {
        key: tab.id,
        type: "button",
        role: "tab",
        id: "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(tab.id),
        "data-test-id": "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(tab.id),
        disabled: tab.disabled,
        "aria-selected": active,
        "aria-controls": "".concat(subTabPrefix$2, "-").concat(id, "-panel-").concat(tab.id),
        tabIndex: pipe(tabs[focusTabIndex], fromUndefinedable, map$2(function (focusedTab) {
          return focusedTab.id === tab.id ? 0 : -1;
        }), getOrElse(function () {
          return -1;
        })),
        ref: function ref(el) {
          tabRefs.current[index] = el;
        },
        onClick: function onClick(e) {
          onChange(tab.id);
          e.preventDefault();
        },
        themeVariant: variant,
        themeSize: size
      }, tab.icon !== undefined && /*#__PURE__*/React__default.createElement(TabTitleIcon, null, /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: tab.icon
      })), /*#__PURE__*/React__default.createElement(TabTitle, null, tab.title)),
      content: tab.title,
      key: "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(tab.id, "-tooltip"),
      "data-test-id": "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(tab.id, "-wrapper")
    });
  }), /*#__PURE__*/React__default.createElement(Dropdown$1, {
    open: openDropdown,
    content: /*#__PURE__*/React__default.createElement(Menu, null, collapsedTabs.map(function (tab) {
      return /*#__PURE__*/React__default.createElement(Menu.Item, {
        key: "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(tab.id, "-dropdown-item"),
        text: tab.title,
        onClick: function onClick(e) {
          onChange(tab.id);
          setOpenDropdown(false);
          e.preventDefault();
        },
        disabled: tab.disabled,
        active: selectedTabId === tab.id,
        "data-test-id": "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(tab.id)
      });
    })),
    target: /*#__PURE__*/React__default.createElement(DropdownTabWraper, null, /*#__PURE__*/React__default.createElement(Tooltip$1, {
      visible: selectedTabWasCollapsed,
      target: /*#__PURE__*/React__default.createElement(TruncatedTab, {
        key: VIEW_MORE_TAB$1,
        themeSize: size,
        type: "button",
        role: "tab",
        id: "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(VIEW_MORE_TAB$1),
        "aria-selected": selectedTabWasCollapsed,
        "aria-controls": "".concat(subTabPrefix$2, "-").concat(id, "-panel-").concat(VIEW_MORE_TAB$1),
        onClick: function onClick() {
          return setOpenDropdown(function (open) {
            return !open;
          });
        },
        themeVariant: getTabVariant({
          active: selectedTabWasCollapsed,
          disabled: false
        }),
        ref: function ref(el) {
          tabRefs.current[renderedTabs.length] = el;
        },
        "data-test-id": "".concat(subTabPrefix$2, "-").concat(id, "-tab-").concat(VIEW_MORE_TAB$1)
      }, /*#__PURE__*/React__default.createElement(TabTitle, null, selectedTabWasCollapsed ? selectedTabTitle : viewMoreText), /*#__PURE__*/React__default.createElement(TabTitleArrowIcon, null, /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: "arrow-down"
      }))),
      content: selectedTabTitle,
      style: {
        height: '100%'
      }
    })),
    onClose: function onClose() {
      return setOpenDropdown(false);
    }
  })), /*#__PURE__*/React__default.createElement(TabIndicator$1, {
    selectedIndex: selectedTabIndex < renderedTabs.length ? selectedTabIndex : renderedTabs.length,
    tabWidths: overflowTabWidths
  }));
};
var OverflowTabList$2 = OverflowTabList$1;

var subTabPrefix$1 = 'subTabs';
var NormalTabList$1 = function NormalTabList(_ref) {
  var tabs = _ref.tabs,
    selectedTabId = _ref.selectedTabId,
    onChange = _ref.onChange,
    id = _ref.id,
    focusTabIndex = _ref.focusTabIndex,
    onChangeFocusTabIndex = _ref.onChangeFocusTabIndex,
    onChangeTabWidths = _ref.onChangeTabWidths,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size;
  var tabRefs = useRef([]);
  var tabListWrapperRef = useRef(null);
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    indicatorTabWidths = _useState2[0],
    setIndicatorTabWidths = _useState2[1];
  useLayoutEffect(function () {
    var tabListResizeObserver = new ResizeObserver(function () {
      var newTabWidths = tabRefs.current.map(function (tabElement) {
        var _a;
        var tabWidth = (_a = getTabWidth(tabElement).match(/\d+/)) === null || _a === void 0 ? void 0 : _a[0];
        return parseInt(tabWidth || '0', 10);
      });
      onChangeTabWidths(newTabWidths);
      setIndicatorTabWidths(newTabWidths.map(function (width) {
        return "".concat(width, "px");
      }));
    });
    if (tabListWrapperRef.current) {
      tabListResizeObserver.observe(tabListWrapperRef.current);
    }
    return function () {
      tabListResizeObserver.disconnect();
    };
  }, [tabListWrapperRef.current]);
  var onTabListKeyDown = function onTabListKeyDown(e) {
    // Move right
    if (e.keyCode === 39) {
      var nextIndex = focusTabIndex + 1;
      var newFocusIndex = nextIndex >= tabs.length ? 0 : nextIndex;
      onChangeFocusTabIndex(newFocusIndex);
      focusTab(tabRefs.current[newFocusIndex]);
    }
    // Move left
    if (e.keyCode === 37) {
      var _nextIndex = focusTabIndex - 1;
      var _newFocusIndex = _nextIndex < 0 ? tabs.length - 1 : _nextIndex;
      onChangeFocusTabIndex(_newFocusIndex);
      focusTab(tabRefs.current[_newFocusIndex]);
    }
  };
  useLayoutEffect(function () {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);
  var selectedTabIndex = tabs.findIndex(function (tab) {
    return tab.id === selectedTabId;
  });
  return /*#__PURE__*/React__default.createElement(TabListWrapper, null, /*#__PURE__*/React__default.createElement(TabList, {
    ref: tabListWrapperRef,
    role: "tablist",
    onKeyDown: onTabListKeyDown,
    tabIndex: -1
  }, tabs.map(function (tab, index) {
    var active = selectedTabId === tab.id;
    var variant = getTabVariant({
      active: active,
      disabled: tab.disabled !== undefined ? tab.disabled : false
    });
    return /*#__PURE__*/React__default.createElement(Tab, {
      themeSize: size,
      key: tab.id,
      type: "button",
      role: "tab",
      id: "".concat(subTabPrefix$1, "-").concat(id, "-tab-").concat(tab.id),
      "aria-selected": active,
      "aria-controls": "".concat(subTabPrefix$1, "-").concat(id, "-panel-").concat(tab.id),
      disabled: tab.disabled,
      themeVariant: variant,
      tabIndex: pipe(tabs[focusTabIndex], fromUndefinedable, map$2(function (focusedTab) {
        return focusedTab.id === tab.id ? 0 : -1;
      }), getOrElse(function () {
        return -1;
      })),
      onClick: function onClick(e) {
        onChange(tab.id);
        e.preventDefault();
      },
      ref: function ref(el) {
        tabRefs.current[index] = el;
      }
    }, tab.icon !== undefined && /*#__PURE__*/React__default.createElement(TabTitleIcon, null, /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: tab.icon,
      "data-test-id": "".concat(subTabPrefix$1, "-").concat(id, "-tab-").concat(tab.id, "-icon")
    })), tab.title);
  })), /*#__PURE__*/React__default.createElement(TabIndicator$1, {
    selectedIndex: selectedTabIndex < 0 ? 0 : selectedTabIndex,
    tabWidths: indicatorTabWidths
  }));
};
var NormalTabList$2 = NormalTabList$1;

var subTabPrefix = 'subTabs';
var SubTabs = function SubTabs(_ref) {
  var onChange = _ref.onChange,
    _ref$renderActiveTabP = _ref.renderActiveTabPanelOnly,
    renderActiveTabPanelOnly = _ref$renderActiveTabP === void 0 ? false : _ref$renderActiveTabP,
    selectedTabId = _ref.selectedTabId,
    tabs = _ref.tabs,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    _ref$viewMoreText = _ref.viewMoreText,
    viewMoreText = _ref$viewMoreText === void 0 ? '' : _ref$viewMoreText,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size;
  var tabWrapperRef = useRef(null);
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    focusTabIndex = _useState2[0],
    setFocusTabIndex = _useState2[1];
  var _useState3 = useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    tabWidths = _useState4[0],
    setTabWidths = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    renderOverflowTabList = _useState6[0],
    setRenderOverflowTabList = _useState6[1];
  var totalTabWidths = useMemo(function () {
    return tabWidths.reduce(function (acc, width) {
      return acc + width;
    }, 0);
  }, [tabWidths]);
  var updateRenderOverflowTabList = useCallback(function (_ref2) {
    var clientWidth = _ref2.clientWidth;
    if (clientWidth === 0 || totalTabWidths === 0) {
      return;
    }
    setRenderOverflowTabList(totalTabWidths > clientWidth);
  }, [totalTabWidths]);
  useLayoutEffect(function () {
    updateRenderOverflowTabList(tabWrapperRef.current);
  }, [totalTabWidths]);
  useResizeObserver(updateRenderOverflowTabList, tabWrapperRef.current);
  return /*#__PURE__*/React__default.createElement(TabWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    ref: tabWrapperRef
  }, renderOverflowTabList ? /*#__PURE__*/React__default.createElement(OverflowTabList$2, {
    tabs: tabs,
    size: size,
    selectedTabId: selectedTabId,
    onChange: onChange,
    id: id,
    focusTabIndex: focusTabIndex,
    onChangeFocusTabIndex: setFocusTabIndex,
    viewMoreText: viewMoreText,
    tabWidths: tabWidths
  }) : /*#__PURE__*/React__default.createElement(NormalTabList$2, {
    size: size,
    tabs: tabs,
    selectedTabId: selectedTabId,
    onChange: onChange,
    id: id,
    focusTabIndex: focusTabIndex,
    onChangeFocusTabIndex: setFocusTabIndex,
    onChangeTabWidths: setTabWidths
  }), tabs.map(function (tab) {
    var hidden = selectedTabId !== tab.id;
    return hidden === false || renderActiveTabPanelOnly === false ? /*#__PURE__*/React__default.createElement(TabPanel, {
      themeSize: size,
      key: tab.id,
      role: "tabpanel",
      id: "".concat(subTabPrefix, "-").concat(id, "-panel-").concat(tab.id),
      "aria-labelledby": "".concat(subTabPrefix, "-").concat(id, "-tab-").concat(tab.id),
      hidden: selectedTabId !== tab.id
    }, tab.panel) : null;
  }));
};
var SubTabs$1 = SubTabs;

var tabPrefix = 'tabs';
var VIEW_MORE_TAB = 'view-more-tab';
var NormalTabList = function NormalTabList(_ref) {
  var tabs = _ref.tabs,
    selectedTabId = _ref.selectedTabId,
    onChange = _ref.onChange,
    id = _ref.id,
    focusTabIndex = _ref.focusTabIndex,
    setFocusTabIndex = _ref.setFocusTabIndex,
    setTabWidths = _ref.setTabWidths;
  var tabRefs = useRef([]);
  useEffect(function () {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);
  useEffect(function () {
    setTabWidths(tabRefs.current.map(function (tabElement) {
      var _a;
      var tabWidth = (_a = getTabWidth(tabElement).match(/\d+/)) === null || _a === void 0 ? void 0 : _a[0];
      return parseInt(tabWidth || '0', 10);
    }));
  }, [setTabWidths]);
  var onTabListKeyDown = useCallback(function (e) {
    return getOnTabListKeydown({
      tabRefs: tabRefs,
      onChangeFocusTabIndex: setFocusTabIndex,
      tabsLength: tabs.length,
      focusTabIndex: focusTabIndex,
      event: e
    });
  }, [tabRefs, setFocusTabIndex, tabs.length, focusTabIndex]);
  return /*#__PURE__*/React__default.createElement(TabList$1, {
    role: "tablist",
    onKeyDown: onTabListKeyDown,
    tabIndex: -1,
    "data-test-id": "normal-tab-list"
  }, tabs.map(function (tab, index) {
    var active = selectedTabId === tab.id;
    var variant = getTabVariant({
      active: active,
      disabled: tab.disabled !== undefined ? tab.disabled : false
    });
    return /*#__PURE__*/React__default.createElement(Tab$1, {
      key: tab.id,
      type: "button",
      role: "tab",
      id: "".concat(tabPrefix, "-").concat(id, "-tab-").concat(tab.id),
      disabled: tab.disabled,
      "aria-selected": active,
      "aria-controls": "".concat(tabPrefix, "-").concat(id, "-panel-").concat(tab.id),
      tabIndex: pipe(tabs[focusTabIndex], fromUndefinedable, map$2(function (focusedTab) {
        return focusedTab.id === tab.id ? 0 : -1;
      }), getOrElse(function () {
        return -1;
      })),
      ref: function ref(el) {
        tabRefs.current[index] = el;
      },
      onClick: function onClick(e) {
        onChange(tab.id);
        e.preventDefault();
      },
      themeVariant: variant
    }, tab.icon !== undefined && /*#__PURE__*/React__default.createElement(TabTitleIcon$1, null, /*#__PURE__*/React__default.createElement(Icon$1, {
      icon: tab.icon
    })), tab.title);
  }));
};
var OverflowTabList = function OverflowTabList(_ref2) {
  var tabs = _ref2.tabs,
    selectedTabId = _ref2.selectedTabId,
    onChange = _ref2.onChange,
    id = _ref2.id,
    tabWrapperRef = _ref2.tabWrapperRef,
    focusTabIndex = _ref2.focusTabIndex,
    setFocusTabIndex = _ref2.setFocusTabIndex,
    viewMoreText = _ref2.viewMoreText,
    tabWidths = _ref2.tabWidths;
  var _a;
  var tabRefs = useRef([]);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    openDropdown = _useState2[0],
    setOpenDropdown = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    numberOfRenderedTabs = _useState4[0],
    setNumberOfRenderedTabs = _useState4[1];
  useEffect(function () {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);
  var onTabListKeyDown = useCallback(function (e) {
    getOnTabListKeydown({
      tabRefs: tabRefs,
      onChangeFocusTabIndex: setFocusTabIndex,
      tabsLength: tabs.length,
      focusTabIndex: focusTabIndex,
      event: e
    });
  }, [tabRefs, setFocusTabIndex, tabs.length, focusTabIndex]);
  var theme = useTheme();
  var maxTabWidth = parseInt(theme.__hd__.tabs.sizes.maxWidth || '', 10);
  var tabMargin = parseInt(theme.__hd__.tabs.space.marginRight || '', 10);
  var accTabWidths = useMemo(function () {
    var accWidth = 0;
    return tabWidths.map(function (width) {
      accWidth = accWidth + Math.min(width, maxTabWidth) + tabMargin;
      return accWidth;
    });
  }, [tabWidths, tabMargin, maxTabWidth]);
  var calculateNumberOfRenderedTabs = useCallback(function (_ref3) {
    var clientWidth = _ref3.clientWidth;
    var breakIdx = accTabWidths.findIndex(function (accWidth) {
      return accWidth + maxTabWidth > clientWidth;
    });
    setNumberOfRenderedTabs(breakIdx || 0);
  }, [accTabWidths, maxTabWidth]);
  useResizeObserver(calculateNumberOfRenderedTabs, tabWrapperRef.current);
  var selectedTabIndex = tabs.findIndex(function (tab) {
    return tab.id === selectedTabId;
  });
  var selectedTabTitle = ((_a = tabs[selectedTabIndex]) === null || _a === void 0 ? void 0 : _a.title) || '';
  var selectedTabWasCollapsed = selectedTabIndex >= numberOfRenderedTabs;
  var renderedTabs = useMemo(function () {
    return tabs.slice(0, numberOfRenderedTabs);
  }, [numberOfRenderedTabs, tabs]);
  var collapsedTabs = useMemo(function () {
    return tabs.slice(numberOfRenderedTabs);
  }, [numberOfRenderedTabs, tabs]);
  return /*#__PURE__*/React__default.createElement(TabList$1, {
    role: "tablist",
    onKeyDown: onTabListKeyDown,
    tabIndex: -1,
    "data-test-id": "overflow-tab-list"
  }, renderedTabs.map(function (tab, index) {
    var active = selectedTabId === tab.id;
    var variant = getTabVariant({
      active: active,
      disabled: tab.disabled !== undefined ? tab.disabled : false
    });
    return /*#__PURE__*/React__default.createElement(Tooltip$1, {
      target: /*#__PURE__*/React__default.createElement(TruncatedTab$1, {
        key: tab.id,
        type: "button",
        role: "tab",
        id: "".concat(tabPrefix, "-").concat(id, "-tab-").concat(tab.id),
        disabled: tab.disabled,
        "aria-selected": active,
        "aria-controls": "".concat(tabPrefix, "-").concat(id, "-panel-").concat(tab.id),
        tabIndex: pipe(tabs[focusTabIndex], fromUndefinedable, map$2(function (focusedTab) {
          return focusedTab.id === tab.id ? 0 : -1;
        }), getOrElse(function () {
          return -1;
        })),
        ref: function ref(el) {
          tabRefs.current[index] = el;
        },
        onClick: function onClick(e) {
          onChange(tab.id);
          e.preventDefault();
        },
        themeVariant: variant
      }, tab.icon !== undefined && /*#__PURE__*/React__default.createElement(TabTitleIcon$1, null, /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: tab.icon
      })), /*#__PURE__*/React__default.createElement(TabTitle$1, null, tab.title)),
      content: tab.title,
      key: "".concat(tabPrefix, "-").concat(id, "-tab-").concat(tab.id, "-tooltip"),
      "data-test-id": "".concat(tabPrefix, "-").concat(id, "-tab-").concat(tab.id, "-wrapper")
    });
  }), /*#__PURE__*/React__default.createElement(Dropdown$1, {
    open: openDropdown,
    content: /*#__PURE__*/React__default.createElement(OverflownMenu, null, collapsedTabs.map(function (tab) {
      return /*#__PURE__*/React__default.createElement(Menu.Item, {
        key: "".concat(tabPrefix, "-").concat(id, "-tab-").concat(tab.id, "-dropdown-item"),
        text: tab.title,
        onClick: function onClick(e) {
          onChange(tab.id);
          setOpenDropdown(false);
          e.preventDefault();
        },
        disabled: tab.disabled,
        active: selectedTabId === tab.id,
        "data-test-id": "".concat(tabPrefix, "-").concat(id, "-tab-").concat(tab.id)
      });
    })),
    target: /*#__PURE__*/React__default.createElement(DropdownTabWraper$1, null, /*#__PURE__*/React__default.createElement(Tooltip$1, {
      visible: selectedTabWasCollapsed,
      target: /*#__PURE__*/React__default.createElement(TruncatedTab$1, {
        key: VIEW_MORE_TAB,
        type: "button",
        role: "tab",
        id: "".concat(tabPrefix, "-").concat(id, "-tab-").concat(VIEW_MORE_TAB),
        "aria-selected": selectedTabWasCollapsed,
        "aria-controls": "".concat(tabPrefix, "-").concat(id, "-panel-").concat(VIEW_MORE_TAB),
        onClick: function onClick() {
          return setOpenDropdown(function (open) {
            return !open;
          });
        },
        themeVariant: getTabVariant({
          active: selectedTabWasCollapsed,
          disabled: false
        }),
        "data-test-id": "".concat(tabPrefix, "-").concat(id, "-tab-").concat(VIEW_MORE_TAB)
      }, /*#__PURE__*/React__default.createElement(TabTitle$1, null, selectedTabWasCollapsed ? selectedTabTitle : viewMoreText), /*#__PURE__*/React__default.createElement(TabTitleArrowIcon$1, null, /*#__PURE__*/React__default.createElement(Icon$1, {
        icon: "arrow-down"
      }))),
      content: selectedTabTitle,
      style: {
        height: '100%'
      }
    })),
    onClose: function onClose() {
      return setOpenDropdown(false);
    }
  }));
};
var Tabs = function Tabs(_ref4) {
  var _ref4$renderActiveTab = _ref4.renderActiveTabPanelOnly,
    renderActiveTabPanelOnly = _ref4$renderActiveTab === void 0 ? false : _ref4$renderActiveTab,
    tabs = _ref4.tabs,
    selectedTabId = _ref4.selectedTabId,
    onChange = _ref4.onChange,
    id = _ref4.id,
    className = _ref4.className,
    style = _ref4.style,
    _ref4$sx = _ref4.sx,
    sx = _ref4$sx === void 0 ? {} : _ref4$sx,
    dataTestId = _ref4['data-test-id'],
    _ref4$viewMoreText = _ref4.viewMoreText,
    viewMoreText = _ref4$viewMoreText === void 0 ? '' : _ref4$viewMoreText;
  var tabWrapperRef = useRef(null);
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    renderOverflowTabList = _useState6[0],
    setRenderOverflowTabList = _useState6[1];
  var _useState7 = useState([]),
    _useState8 = _slicedToArray(_useState7, 2),
    tabWidths = _useState8[0],
    setTabWidths = _useState8[1];
  var _useState9 = useState(0),
    _useState10 = _slicedToArray(_useState9, 2),
    focusTabIndex = _useState10[0],
    setFocusTabIndex = _useState10[1];
  var theme = useTheme();
  var tabMargin = parseInt(theme.__hd__.tabs.space.marginRight || '', 10);
  var totalTabWidths = useMemo(function () {
    return tabWidths.reduce(function (acc, width) {
      return acc + width + tabMargin;
    }, 0);
  }, [tabWidths, tabMargin]);
  var updateRenderOverflowTabList = useCallback(function (_ref5) {
    var clientWidth = _ref5.clientWidth;
    if (clientWidth === 0 || totalTabWidths === 0) {
      return;
    }
    setRenderOverflowTabList(totalTabWidths > clientWidth);
  }, [totalTabWidths]);
  useResizeObserver(updateRenderOverflowTabList, tabWrapperRef.current);
  useEffect(function () {
    updateRenderOverflowTabList(tabWrapperRef.current);
  }, []);
  useEffect(function () {
    setFocusTabIndex(tabs.findIndex(function (tab) {
      return tab.id === selectedTabId;
    }));
  }, [selectedTabId, tabs]);
  return /*#__PURE__*/React__default.createElement(TabWrapper$1, {
    id: id,
    className: className,
    style: Object.assign(Object.assign(Object.assign({}, style), useCss(sx)), {
      visibility: totalTabWidths > 0 ? 'visible' : 'hidden'
    }),
    "data-test-id": dataTestId,
    ref: tabWrapperRef
  }, renderOverflowTabList ? /*#__PURE__*/React__default.createElement(OverflowTabList, {
    tabs: tabs,
    selectedTabId: selectedTabId,
    onChange: onChange,
    id: id,
    tabWrapperRef: tabWrapperRef,
    focusTabIndex: focusTabIndex,
    setFocusTabIndex: setFocusTabIndex,
    viewMoreText: viewMoreText,
    tabWidths: tabWidths
  }) : /*#__PURE__*/React__default.createElement(NormalTabList, {
    tabs: tabs,
    selectedTabId: selectedTabId,
    onChange: onChange,
    id: id,
    focusTabIndex: focusTabIndex,
    setFocusTabIndex: setFocusTabIndex,
    setTabWidths: setTabWidths
  }), tabs.map(function (tab) {
    var hidden = selectedTabId !== tab.id;
    return hidden === false || renderActiveTabPanelOnly === false ? /*#__PURE__*/React__default.createElement(TabPanel$1, {
      key: tab.id,
      role: "tabpanel",
      id: "".concat(tabPrefix, "-").concat(id, "-panel-").concat(tab.id),
      "aria-labelledby": "".concat(tabPrefix, "-").concat(id, "-tab-").concat(tab.id),
      hidden: selectedTabId !== tab.id
    }, tab.panel) : null;
  }));
};
Tabs.Sub = SubTabs$1;
var Tabs$1 = Tabs;

var animationDuration = '0.25s';
var PanelColumnWrapper = styled.ul.withConfig({
  displayName: "StyledTimePicker__PanelColumnWrapper",
  componentId: "sc-1czr99a-0"
})(["&&{flex:1 0 auto;width:", ";margin:0;padding:0;text-align:left;overflow-x:hidden;overflow-y:auto;list-style:none;border-left-style:solid;border-left-width:", ";border-left-color:", ";}&&:focus{outline:none;}&&:after{display:block;height:", ";content:'';}&&:first-child{border:none;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.timePicker.sizes.columnWidth;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.timePicker.borderWidths.column;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.timePicker.colors.columnBorder;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.timePicker.sizes.columnAfterHeight;
});
var PanelCellWrapper = styled.li.withConfig({
  displayName: "StyledTimePicker__PanelCellWrapper",
  componentId: "sc-1czr99a-1"
})(["&&{margin:0;padding:0;transition:background ", ";background:", ";}&&:hover{background:", ";}"], animationDuration, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.timePicker.colors.cellBackground;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.timePicker.colors.cellHover;
});
var PanelCellInner = styled.div.withConfig({
  displayName: "StyledTimePicker__PanelCellInner",
  componentId: "sc-1czr99a-2"
})(["&&{display:block;width:100%;height:", ";margin:0;padding:", ";color:", ";line-height:", ";font-size:", ";cursor:pointer;", ";}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.timePicker.sizes.cellHeight;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.timePicker.space.cellPadding;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.timePicker.colors.cell;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.timePicker.lineHeights.cell;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.timePicker.fontSizes.cell;
}, function (_ref12) {
  var themeActive = _ref12.themeActive,
    theme = _ref12.theme;
  switch (themeActive) {
    case true:
      return css$2(["background-color:", ";font-weight:", ";"], theme.__hd__.timePicker.colors.cellActive, theme.__hd__.timePicker.fontWeights.cellActive);
    case false:
      return css$2([""]);
  }
});
var PanelContainer = styled.div.withConfig({
  displayName: "StyledTimePicker__PanelContainer",
  componentId: "sc-1czr99a-3"
})(["&&{display:flex;flex:auto;height:", ";width:100%;table-layout:fixed;border-collapse:collapse;margin:0;padding:0;}&&:focus{outline:none;}"], function (_ref13) {
  var theme = _ref13.theme;
  return theme.__hd__.timePicker.sizes.columnHeight;
});
var TimePickerWrapper = styled.div.withConfig({
  displayName: "StyledTimePicker__TimePickerWrapper",
  componentId: "sc-1czr99a-4"
})(["&&{margin:0;padding:0;}&& > ", "{display:block;}"], DropdownWrapper);

var PanelColumn = function PanelColumn(props) {
  var units = props.units,
    onSelect = props.onSelect,
    value = props.value;
  var ulRef = useRef(null);
  var liRefs = useRef(new Map());
  useLayoutEffect(function () {
    var li = value !== undefined ? liRefs.current.get(value) : undefined;
    if (li !== undefined && li !== null && ulRef.current !== null) {
      ulRef.current.scrollTop = li.offsetTop;
    }
  }, [value]);
  return /*#__PURE__*/React__default.createElement(PanelColumnWrapper, {
    ref: ulRef
  }, units !== undefined && units.map(function (unit) {
    return /*#__PURE__*/React__default.createElement(PanelCellWrapper, {
      key: unit.value,
      ref: function ref(element) {
        liRefs.current.set(unit.value, element);
      },
      onClick: function onClick() {
        if (onSelect !== undefined) {
          onSelect(unit.value);
        }
      }
    }, /*#__PURE__*/React__default.createElement(PanelCellInner, {
      themeActive: unit.value === value
    }, unit.label));
  }));
};
var PanelColumn$1 = PanelColumn;

var leftPad = function leftPad(str, length) {
  var fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';
  var current = String(str);
  return current.length < length ? "".concat(fill).concat(str) : current;
};

var supportedMinuteSteps = [1, 5, 10, 15, 20, 30, 60];
var PanelContent = function PanelContent(props) {
  var resolvedValue = props.resolvedValue,
    with12Hours = props.with12Hours,
    withSeconds = props.withSeconds,
    _onSelect = props.onSelect,
    minuteStep = props.minuteStep;
  assert(supportedMinuteSteps.includes(minuteStep), "minuteStep ".concat(minuteStep, " is not supported"));
  var setTime = function setTime(isNewPM, newHour, newMinute, newSecond) {
    var newDate = new Date();
    newDate = setHours(setMinutes(setSeconds(newDate, newSecond), newMinute), !with12Hours || !isNewPM ? newHour : newHour + 12);
    return newDate;
  };
  var currentTime = resolvedValue !== undefined ? resolvedValue : new Date();
  var rawHour = getHours(currentTime);
  var minute = getMinutes(currentTime);
  var second = getSeconds(currentTime);
  var isPM = with12Hours ? rawHour >= 12 : false;
  var hour = with12Hours ? rawHour % 12 : rawHour;
  var rawHours = useMemo(function () {
    return Array.from(new Array(24), function (_, i) {
      return {
        label: leftPad(i, 2),
        value: i
      };
    });
  }, []);
  var hours = useMemo(function () {
    if (!with12Hours) return rawHours;
    // Re-generate hours for AM/PM
    return rawHours.filter(isPM ? function (h) {
      return h.value >= 12;
    } : function (h) {
      return h.value < 12;
    }).map(function (h) {
      var hourValue = h.value % 12;
      var hourLabel = hourValue === 0 ? '12' : leftPad(hourValue, 2);
      return Object.assign(Object.assign({}, h), {
        label: hourLabel,
        value: hourValue
      });
    });
  }, [with12Hours, isPM, rawHours]);
  var minutes = useMemo(function () {
    return Array.from(new Array(60 / minuteStep), function (_, i) {
      return {
        label: leftPad(i * minuteStep, 2),
        value: i * minuteStep
      };
    });
  }, [minuteStep]);
  var seconds = useMemo(function () {
    return Array.from(new Array(60), function (_, i) {
      return {
        label: leftPad(i, 2),
        value: i
      };
    });
  }, []);
  return /*#__PURE__*/React__default.createElement(PanelContainer, null, /*#__PURE__*/React__default.createElement(PanelColumn$1, {
    key: "hour",
    value: hour,
    units: hours,
    onSelect: function onSelect(newValue) {
      return _onSelect(setTime(isPM, newValue, minute, second));
    }
  }), /*#__PURE__*/React__default.createElement(PanelColumn$1, {
    key: "minute",
    value: minute,
    units: minutes,
    onSelect: function onSelect(newValue) {
      return _onSelect(setTime(isPM, hour, newValue, second));
    }
  }), withSeconds === true && /*#__PURE__*/React__default.createElement(PanelColumn$1, {
    key: "second",
    value: second,
    units: seconds,
    onSelect: function onSelect(newValue) {
      return _onSelect(setTime(isPM, hour, minute, newValue));
    }
  }), with12Hours === true && /*#__PURE__*/React__default.createElement(PanelColumn$1, {
    key: "12hours",
    value: isPM ? 1 : 0,
    units: [{
      label: 'AM',
      value: 0
    }, {
      label: 'PM',
      value: 1
    }],
    onSelect: function onSelect(newValue) {
      return _onSelect(setTime(newValue !== 0, hour, minute, second));
    }
  }));
};
var PanelContent$1 = PanelContent;

var generateFormat = function generateFormat(withSeconds, with12Hours, format) {
  if (format !== undefined) return format;
  if (withSeconds === true) {
    if (with12Hours === true) return 'hh:mm:ss aa';
    return 'HH:mm:ss';
  }
  if (with12Hours === true) return 'hh:mm aa';
  return 'HH:mm';
};
var TimePicker = function TimePicker(_ref) {
  var autoComplete = _ref.autoComplete,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    onChange = _ref.onChange,
    onBlur = _ref.onBlur,
    _ref$invalid = _ref.invalid,
    invalid = _ref$invalid === void 0 ? false : _ref$invalid,
    placeholder = _ref.placeholder,
    prefix = _ref.prefix,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    value = _ref.value,
    format = _ref.format,
    _ref$withSeconds = _ref.withSeconds,
    withSeconds = _ref$withSeconds === void 0 ? false : _ref$withSeconds,
    _ref$with12Hours = _ref.with12Hours,
    with12Hours = _ref$with12Hours === void 0 ? false : _ref$with12Hours,
    name = _ref.name,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'],
    _ref$minuteStep = _ref.minuteStep,
    minuteStep = _ref$minuteStep === void 0 ? 1 : _ref$minuteStep;
  var updatedFormat = generateFormat(withSeconds, with12Hours, format);
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    pickedTime = _useState2[0],
    setPickedTime = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  var closeDropdown = function closeDropdown() {
    return setOpen(false);
  };
  useEffect(function () {
    // XXX: this setState logic is intentionally put here, not in OnInputChange
    // Since doing that would cause the cursor to jump to the end when setState is triggered
    if (value !== undefined) {
      var parsedChange = parse(new Date())(updatedFormat)(value);
      setPickedTime(isValid(parsedChange) ? parsedChange : undefined);
    }
  }, [updatedFormat, value]);
  var onInputChange = useCallback(function (e) {
    var target = e.target;
    if (target.value !== undefined && onChange !== undefined) {
      onChange(target.value);
    }
  }, [onChange]);
  var onSelectTime = useCallback(function (selectedTime) {
    if (onChange !== undefined) {
      setPickedTime(selectedTime);
      onChange(formatTime(updatedFormat, selectedTime));
    }
  }, [onChange, updatedFormat]);
  var formatHas12Hours = updatedFormat.includes('hh');
  var formatHasSeconds = updatedFormat.includes('ss');
  var timePickerDropdownContent = /*#__PURE__*/React__default.createElement(PanelContent$1, {
    resolvedValue: pickedTime,
    with12Hours: formatHas12Hours === true,
    withSeconds: formatHasSeconds === true,
    onSelect: onSelectTime,
    minuteStep: minuteStep
  });
  var timePickerDropdownTarget = /*#__PURE__*/React__default.createElement(Input, {
    suffix: "clock-outlined",
    value: value !== undefined ? value : '',
    placeholder: placeholder !== undefined ? placeholder : updatedFormat,
    size: size,
    invalid: invalid,
    prefix: prefix,
    disabled: disabled,
    onChange: onInputChange,
    onBlur: onBlur,
    onFocus: function onFocus() {
      return setOpen(true);
    },
    id: id,
    name: name,
    autoComplete: autoComplete
  });
  return /*#__PURE__*/React__default.createElement(TimePickerWrapper, null, /*#__PURE__*/React__default.createElement(Dropdown$1, {
    open: open,
    content: timePickerDropdownContent,
    target: timePickerDropdownTarget,
    onClose: closeDropdown,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }));
};
var TimePicker$1 = TimePicker;

var TimelineItemLine = styled.div.withConfig({
  displayName: "StyledTimeline__TimelineItemLine",
  componentId: "sc-bpgnna-0"
})(["&&{position:absolute;top:", ";left:", ";height:", ";border-left:", " solid ", ";margin:0;padding:0;}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.timeline.space.itemLinePositionTop;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.__hd__.timeline.space.itemLinePositionLeft;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.timeline.sizes.itemLineHeight;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__hd__.timeline.sizes.itemLineWidth;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.timeline.colors.itemLineBg;
});
var TimelineItemContentWrapper = styled.div.withConfig({
  displayName: "StyledTimeline__TimelineItemContentWrapper",
  componentId: "sc-bpgnna-1"
})(["&&{position:relative;margin:0;padding:0;margin-left:", ";}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.timeline.space.itemContentMarginLeft;
});
var TimelineItemWrapper = styled.li.withConfig({
  displayName: "StyledTimeline__TimelineItemWrapper",
  componentId: "sc-bpgnna-2"
})(["&&{position:relative;margin:0;padding:0;padding-bottom:", ";list-style:none;}&&:last-child{padding-bottom:0;}&&:last-child ", "{display:none;}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.timeline.space.itemPaddingBottom;
}, TimelineItemLine);
var TimelineWrapper = styled.ul.withConfig({
  displayName: "StyledTimeline__TimelineWrapper",
  componentId: "sc-bpgnna-3"
})(["&&{box-sizing:border-box;margin:0;padding:0;list-style:none;}"]);
var TimelineItemMarker = styled.div.withConfig({
  displayName: "StyledTimeline__TimelineItemMarker",
  componentId: "sc-bpgnna-4"
})(["&&{position:absolute;top:", ";width:", ";height:", ";background-color:", ";border-width:", ";border-style:solid;border-radius:50%;box-sizing:border-box;margin:0;padding:0;", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.timeline.space.itemMarkerPositionTop;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.timeline.sizes.itemMarkerWidth;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.timeline.sizes.itemMarkerHeight;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.timeline.colors.itemMarkerBg;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.__hd__.timeline.borderWidths.itemMarker;
}, function (_ref13) {
  var themeIntent = _ref13.themeIntent,
    theme = _ref13.theme;
  switch (themeIntent) {
    case 'default':
      return css$2(["border-color:", ";"], theme.__hd__.timeline.colors.itemMarkerDefault);
    case 'success':
      return css$2(["border-color:", ";"], theme.__hd__.timeline.colors.itemMarkerSuccess);
    case 'info':
      return css$2(["border-color:", ";"], theme.__hd__.timeline.colors.itemMarkerInfo);
    case 'warning':
      return css$2(["border-color:", ";"], theme.__hd__.timeline.colors.itemMarkerWarning);
    case 'danger':
      return css$2(["border-color:", ";"], theme.__hd__.timeline.colors.itemMarkerDanger);
    case 'error':
      return css$2(["border-color:", ";"], theme.__hd__.timeline.colors.itemMarkerError);
  }
});
var TimelineItemText = styled.div.withConfig({
  displayName: "StyledTimeline__TimelineItemText",
  componentId: "sc-bpgnna-5"
})(["&&{font-size:", ";line-height:", ";font-weight:", ";color:", ";margin:0;padding:0;}"], function (_ref14) {
  var theme = _ref14.theme;
  return theme.__hd__.timeline.fontSizes.itemText;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.__hd__.timeline.lineHeights.itemText;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.__hd__.timeline.fontWeights.itemText;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.__hd__.timeline.colors.itemText;
});
var TimelineItemHelpText = styled.div.withConfig({
  displayName: "StyledTimeline__TimelineItemHelpText",
  componentId: "sc-bpgnna-6"
})(["&&{font-size:", ";line-height:", ";font-weight:", ";color:", ";margin:0;padding:0;}"], function (_ref18) {
  var theme = _ref18.theme;
  return theme.__hd__.timeline.fontSizes.itemHelpText;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.__hd__.timeline.lineHeights.itemHelpText;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.__hd__.timeline.fontWeights.itemHelpText;
}, function (_ref21) {
  var theme = _ref21.theme;
  return theme.__hd__.timeline.colors.itemHelpText;
});

var TimelineItem = function TimelineItem(_ref) {
  var text = _ref.text,
    helpText = _ref.helpText,
    _ref$intent = _ref.intent,
    intent = _ref$intent === void 0 ? 'default' : _ref$intent;
  return /*#__PURE__*/React__default.createElement(TimelineItemWrapper, null, /*#__PURE__*/React__default.createElement(TimelineItemLine, null), /*#__PURE__*/React__default.createElement(TimelineItemMarker, {
    themeIntent: intent
  }), /*#__PURE__*/React__default.createElement(TimelineItemContentWrapper, null, /*#__PURE__*/React__default.createElement(TimelineItemText, null, text), /*#__PURE__*/React__default.createElement(TimelineItemHelpText, null, helpText)));
};
var TimelineItem$1 = TimelineItem;

var Timeline = function Timeline(_ref) {
  var items = _ref.items,
    id = _ref.id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  return /*#__PURE__*/React__default.createElement(TimelineWrapper, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId
  }, items.map(function (item) {
    return /*#__PURE__*/React__default.createElement(TimelineItem$1, {
      key: item.id,
      text: item.text,
      helpText: item.helpText,
      intent: item.intent
    });
  }));
};
var Timeline$1 = Timeline;

var WidgetContainer = styled.div.withConfig({
  displayName: "StyledWidget__WidgetContainer",
  componentId: "sc-1pz8b58-0"
})(["&&{margin:0;padding:0;width:100%;height:100%;box-sizing:border-box;display:flex;flex-direction:column;overflow:hidden;position:relative;background:", ";border:", ";border-radius:", ";", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.__hd__.widget.colors.containerBackground;
}, function (_ref2) {
  var theme = _ref2.theme;
  return "".concat(theme.__hd__.widget.borderWidths.container, " solid ").concat(theme.__hd__.widget.colors.containerBorder);
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__hd__.widget.radii.container;
}, function (_ref4) {
  var theme = _ref4.theme,
    themeActive = _ref4.themeActive;
  if (themeActive) {
    return css$2(["border-color:", ";"], theme.__hd__.widget.colors.containerActiveBorder);
  }
});
var Header = styled.div.withConfig({
  displayName: "StyledWidget__Header",
  componentId: "sc-1pz8b58-1"
})(["&&{margin:0;padding:0;display:flex;align-items:center;padding:", ";}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.__hd__.widget.space.headerPadding;
});
var HeaderLeft = styled.div.withConfig({
  displayName: "StyledWidget__HeaderLeft",
  componentId: "sc-1pz8b58-2"
})(["&&{margin:0;padding:0;display:flex;align-items:center;gap:", ";}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.__hd__.widget.space.headerItemGap;
});
var HeaderRight = styled.div.withConfig({
  displayName: "StyledWidget__HeaderRight",
  componentId: "sc-1pz8b58-3"
})(["&&{margin:0;padding:0;display:flex;align-items:center;gap:", ";margin-left:auto;}"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.__hd__.widget.space.headerItemGap;
});
var Content = styled.div.withConfig({
  displayName: "StyledWidget__Content",
  componentId: "sc-1pz8b58-4"
})(["&&{margin:0;padding:0;flex-grow:1;overflow-y:auto;padding:", ";}"], function (_ref8) {
  var theme = _ref8.theme;
  return theme.__hd__.widget.space.contentPadding;
});
var ResizeHandle = styled.div.withConfig({
  displayName: "StyledWidget__ResizeHandle",
  componentId: "sc-1pz8b58-5"
})(["&&{margin:0;padding:0;display:flex;position:absolute;bottom:", ";right:", ";padding:", ";", ";}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.__hd__.widget.space.resizeHandleOffset;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.__hd__.widget.space.resizeHandleOffset;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.__hd__.widget.space.resizeHandlePadding;
}, function (_ref12) {
  var themeActive = _ref12.themeActive;
  if (themeActive) {
    return css$2(["cursor:nwse-resize;"]);
  }
});

var Widget = function Widget(_ref) {
  var _ref$actions = _ref.actions,
    actions = _ref$actions === void 0 ? [] : _ref$actions,
    actionsExtra = _ref.actionsExtra,
    content = _ref.content,
    dragHandleConfig = _ref.dragHandleConfig,
    resizeHandleConfig = _ref.resizeHandleConfig,
    title = _ref.title,
    titleExtra = _ref.titleExtra,
    _ref$id = _ref.id,
    id = _ref$id === void 0 ? 'hd-widget' : _ref$id,
    className = _ref.className,
    style = _ref.style,
    _ref$sx = _ref.sx,
    sx = _ref$sx === void 0 ? {} : _ref$sx,
    dataTestId = _ref['data-test-id'];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    openActionDropdown = _useState2[0],
    setOpenActionDropdown = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    draggable = _useState4[0],
    setDraggable = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    resizable = _useState6[0],
    setResizable = _useState6[1];
  var containerRef = useRef(null);
  var resizeHanleRef = useRef(null);
  var hasRightItems = actions.length > 0 || actionsExtra;
  var resetResizable = useCallback(function (e) {
    if (e.target instanceof Node && e.relatedTarget instanceof Node && containerRef.current && resizeHanleRef.current) {
      var isMoveInsideResizeHandle = resizeHanleRef.current.contains(e.target);
      var isResizeHandleContainsRelatedTarget = resizeHanleRef.current.contains(e.relatedTarget);
      var isTargetContainsResizeHandle = e.target.contains(resizeHanleRef.current);
      var isWidgetContainsTarget = containerRef.current.contains(e.target);
      var isMoveOnTopResizeHandle = isResizeHandleContainsRelatedTarget && !isTargetContainsResizeHandle && !isWidgetContainsTarget;
      if (isMoveInsideResizeHandle || isMoveOnTopResizeHandle) {
        setResizable(true);
      } else {
        setResizable(false);
      }
    }
  }, []);
  useEffect(function () {
    if (resizable) {
      document.addEventListener('mouseover', resetResizable);
    } else {
      document.removeEventListener('mouseover', resetResizable);
    }
    return function () {
      document.removeEventListener('mouseover', resetResizable);
    };
  }, [resizable, resetResizable]);
  var actionDropdown = null;
  if (actions.length > 0) {
    var actionIcon = /*#__PURE__*/React__default.createElement(Button.Icon, {
      icon: "more-horizontal",
      intent: "subdued-text",
      onClick: function onClick() {
        return setOpenActionDropdown(!openActionDropdown);
      },
      "data-test-id": "action-icon-".concat(id)
    });
    var actionList = /*#__PURE__*/React__default.createElement(Menu, null, actions.map(function (_ref2) {
      var disabled = _ref2.disabled,
        divider = _ref2.divider,
        icon = _ref2.icon,
        text = _ref2.text,
        onClick = _ref2.onClick,
        intent = _ref2.intent,
        key = _ref2.key;
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
        key: key
      }, divider === 'top' && /*#__PURE__*/React__default.createElement(Divider$1, {
        "data-test-id": "divider-top"
      }), /*#__PURE__*/React__default.createElement(Menu.Item, {
        icon: icon,
        text: text,
        onClick: onClick,
        intent: intent,
        disabled: disabled
      }), divider === 'bottom' && /*#__PURE__*/React__default.createElement(Divider$1, {
        "data-test-id": "divider-bottom"
      }));
    }));
    actionDropdown = /*#__PURE__*/React__default.createElement(Dropdown$1, {
      target: actionIcon,
      content: actionList,
      open: openActionDropdown,
      onClose: function onClose() {
        return setOpenActionDropdown(false);
      }
    });
  }
  return /*#__PURE__*/React__default.createElement(WidgetContainer, {
    id: id,
    className: className,
    style: Object.assign(Object.assign({}, style), useCss(sx)),
    "data-test-id": dataTestId,
    themeActive: draggable || resizable,
    ref: containerRef
  }, /*#__PURE__*/React__default.createElement(Header, null, /*#__PURE__*/React__default.createElement(HeaderLeft, null, dragHandleConfig && /*#__PURE__*/React__default.createElement(Button.Icon, {
    id: dragHandleConfig.id,
    className: dragHandleConfig.className,
    "data-test-id": "drag-handle-".concat(id),
    icon: "move",
    intent: draggable ? 'primary' : 'subdued-text',
    onMouseEnter: function onMouseEnter() {
      return setDraggable(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setDraggable(false);
    },
    style: {
      cursor: 'grabbing'
    }
  }), /*#__PURE__*/React__default.createElement(Typography$1.Title, {
    level: 5,
    fontWeight: "semi-bold"
  }, title), titleExtra), hasRightItems && /*#__PURE__*/React__default.createElement(HeaderRight, null, actionsExtra, actionDropdown)), /*#__PURE__*/React__default.createElement(Content, null, content), resizeHandleConfig && /*#__PURE__*/React__default.createElement(ResizeHandle, {
    id: resizeHandleConfig.id,
    className: resizeHandleConfig.className,
    "data-test-id": "resize-handle-".concat(id),
    ref: resizeHanleRef,
    onMouseEnter: function onMouseEnter() {
      return setResizable(true);
    },
    themeActive: resizable
  }, /*#__PURE__*/React__default.createElement(Icon$1, {
    "data-test-id": "resize-handle-icon-".concat(id),
    icon: "corner-resize",
    intent: resizable ? 'primary' : 'subdued-text'
  })));
};
var Widget$1 = Widget;

export { Alert$1 as Alert, Badge$1 as Badge, Banner$1 as Banner, Box$1 as Box, Breadcrumb$1 as Breadcrumb, Button, Card$1 as Card, Carousel$1 as Carousel, Chart$1 as Chart, Checkbox, Collapse$1 as Collapse, Comment$1 as Comment, index as ContextPanel, CompoundDatePicker$1 as DatePicker, Divider$1 as Divider, Dropdown$1 as Dropdown, Empty$1 as Empty, File$1 as File, CompoundFilters$1 as Filters, Form$1 as Form, CompoundGrid$1 as Grid, HeroDesignProvider$1 as HeroDesignProvider, Icon$1 as Icon, InPageNavigation$1 as InPageNavigation, Input, MediaQuery$1 as MediaQuery, Menu, CompoundModal$1 as Modal, Notification$1 as Notification, PageHeader$1 as PageHeader, Pagination$1 as Pagination, Portlet$1 as Portlet, CompoundProgress$1 as Progress, CompoundRadio$1 as Radio, Rate, Result$1 as Result, Select, CompoundSelectButton$1 as SelectButton, CompoundSideBar$1 as SideBar, SingleSlider$1 as Slider, Spinner$1 as Spinner, Statistic$1 as Statistic, Steps$1 as Steps, Switch$1 as Switch, CompoundTable$1 as Table, Tabs$1 as Tabs, Tag$1 as Tag, TagInput$1 as TagInput, TimePicker$1 as TimePicker, Timeline$1 as Timeline, Tooltip$1 as Tooltip, Typography$1 as Typography, Widget$1 as Widget, eBensTheme$1 as eBensTheme, getEBensTheme$1 as getEBensTheme, getJobsTheme$1 as getJobsTheme, getOMOPTheme$1 as getOMOPTheme, getTheme$1 as getTheme, jobsTheme$1 as jobsTheme, omopTheme$1 as omopTheme, heroSystemPalette$1 as systemPalette, heroTheme$1 as theme, scale as themeScale, useMediaQuery };
