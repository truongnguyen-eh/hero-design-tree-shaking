import type { CSSProperties } from 'react';
import defaultTheme from '../theme';
import { camelize } from '../fp/function';
import type { Theme } from '../theme';
import type {
  SxKeys,
  SxObject,
  SxValues,
  SystemProperties,
  ThemeScales,
} from '../components/common';
import type { Palette, SystemPalette } from '../theme/global/colors';
import type {
  FontWeights,
  FontSizes,
  LineHeights,
} from '../theme/global/typography';
import type { BorderWidths, Radii } from '../theme/global/borders';
import type { Space } from '../theme/global/space';
import type { Shadows } from '../theme/global/shadows';

const aliases: Partial<Record<SxKeys, keyof CSSProperties>> = {
  bgColor: 'backgroundColor',
  m: 'margin',
  mt: 'marginTop',
  mr: 'marginRight',
  mb: 'marginBottom',
  ml: 'marginLeft',
  p: 'padding',
  pt: 'paddingTop',
  pr: 'paddingRight',
  pb: 'paddingBottom',
  pl: 'paddingLeft',
};

const scaleNames: Partial<Record<keyof CSSProperties, keyof ThemeScales>> = {
  backgroundColor: 'colors',
  borderColor: 'colors',
  borderRadius: 'radii',
  borderStyle: 'borderStyles',
  borderWidth: 'borderWidths',
  boxShadow: 'shadows',
  color: 'colors',
  fontSize: 'fontSizes',
  fontWeight: 'fontWeights',
  lineHeight: 'lineHeights',
  margin: 'space',
  marginBottom: 'space',
  marginLeft: 'space',
  marginRight: 'space',
  marginTop: 'space',
  padding: 'space',
  paddingBottom: 'space',
  paddingLeft: 'space',
  paddingRight: 'space',
  paddingTop: 'space',
};

const formatCssValue = (
  themeValue: SxValues | undefined,
  sxValue: SxValues,
  unit?: string
) => {
  if (themeValue !== undefined) {
    return [themeValue, unit].filter(Boolean).join('');
  }
  return sxValue;
};

const getCssValue = (
  theme: Theme,
  value: SxValues,
  scaleName: keyof ThemeScales
) => {
  const camelValue = camelize(value.toString());
  switch (scaleName) {
    case 'borderWidths':
      return formatCssValue(
        theme.borderWidths[camelValue as keyof BorderWidths],
        value,
        'px'
      );
    case 'fontSizes':
      return formatCssValue(
        theme.fontSizes[camelValue as keyof FontSizes],
        value,
        'px'
      );
    case 'lineHeights':
      return formatCssValue(
        theme.lineHeights[camelValue as keyof LineHeights],
        value,
        'px'
      );
    case 'radii':
      return formatCssValue(
        theme.radii[camelValue as keyof Radii],
        value,
        'px'
      );
    case 'space':
      return formatCssValue(
        theme.space[camelValue as keyof Space],
        value,
        'px'
      );
    case 'colors': {
      const systemPaletteColor =
        theme.colors[camelValue as keyof SystemPalette];
      const paletteColor = theme.colors.palette[camelValue as keyof Palette];
      return formatCssValue(
        systemPaletteColor !== undefined ? systemPaletteColor : paletteColor,
        value
      );
    }
    case 'fontWeights': {
      const fontWeight = theme.fontWeights[camelValue as keyof FontWeights];
      return fontWeight !== undefined ? fontWeight : value;
    }
    case 'shadows':
      return formatCssValue(theme.shadows[camelValue as keyof Shadows], value);
    case 'borderStyles':
      return value;
  }
};

const css = (sx: SxObject, theme = defaultTheme): CSSProperties => {
  const styleObject: CSSProperties = {};

  Object.entries(sx).forEach(([prop, value]) => {
    const cssProp = aliases[prop as keyof SystemProperties] ?? prop;
    const scaleName = scaleNames[cssProp as keyof CSSProperties];

    if (scaleName === undefined) {
      styleObject[cssProp as never] = value as never;
      return;
    }

    if (value !== undefined) {
      const cssValue = getCssValue(theme, value, scaleName);
      styleObject[cssProp as never] = cssValue as never;
    }
  });

  return styleObject;
};

export { camelize };

export default css;
