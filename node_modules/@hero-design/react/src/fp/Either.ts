export interface Left<L> {
  readonly left: L;
  readonly tag: 'Left';
}

export interface Right<R> {
  readonly right: R;
  readonly tag: 'Right';
}

export type Either<L, R> = Left<L> | Right<R>;

export const isLeft = <L, R>(ml: Either<L, R>): ml is Left<L> =>
  ml.tag === 'Left';

export const isRight = <L, R>(mr: Either<L, R>): mr is Right<R> =>
  mr.tag === 'Right';

export const left = <L = never, R = never>(l: L): Either<L, R> => ({
  left: l,
  tag: 'Left',
});

export const right = <L = never, R = never>(r: R): Either<L, R> => ({
  right: r,
  tag: 'Right',
});

export const match =
  <L, R, A>(onLeft: (l: L) => A, onRight: (r: R) => A) =>
  (ml: Either<L, R>): A =>
    isLeft(ml) ? onLeft(ml.left) : onRight(ml.right);
