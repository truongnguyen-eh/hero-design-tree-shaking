interface FontSizes {
  '10xlarge': number;
  '11xlarge': number;
  '6xlarge': number;
  '7xlarge': number;
  '8xlarge': number;
  '9xlarge': number;
  large: number;
  medium: number;
  small: number;

  xlarge: number;
  xsmall: number;
  xxlarge: number;
  xxxlarge: number;
  xxxxlarge: number;
  xxxxxlarge: number;
}

type LineHeights = FontSizes;

interface FontWeights {
  bold: number;
  light: number;
  regular: number;
  semiBold: number;
}

// Hero design web typo scale is following
// https://www.ibm.com/design/language/typography/type-specs-ui#scales
const genFontSize = (prev: number, at: number): number => {
  return prev + Math.floor(Math.abs((at - 2) / 4) + 1) * 2;
};

const getFontSizes = (baseFontSize: number): FontSizes => {
  const fontSizes = Array.from(new Array(15));
  fontSizes.forEach((_, index) => {
    if (index === 0) {
      fontSizes[0] = baseFontSize;
    } else {
      fontSizes[index] = genFontSize(fontSizes[index - 1], index);
    }
    return undefined;
  });
  return {
    '11xlarge': fontSizes[14],
    '10xlarge': fontSizes[13],
    '9xlarge': fontSizes[12],
    '8xlarge': fontSizes[11],
    '7xlarge': fontSizes[10],
    '6xlarge': fontSizes[9],
    xxxxxlarge: fontSizes[8], // h1
    xxxxlarge: fontSizes[7], //  h2
    xxxlarge: fontSizes[6], //   h3
    xxlarge: fontSizes[5], //    h4
    xlarge: fontSizes[4], //     h5
    large: fontSizes[3], //      h6
    medium: fontSizes[2], //     h7
    small: fontSizes[1], //      h8
    xsmall: fontSizes[0], //     h9
  };
};

const fontWeights: FontWeights = {
  light: 200,
  regular: 400,
  semiBold: 600,
  bold: 700,
};

const getLineHeights = (fontSizes: FontSizes): LineHeights => {
  const additionalSpace = 8;
  return {
    '11xlarge': fontSizes['11xlarge'] + additionalSpace,
    '10xlarge': fontSizes['10xlarge'] + additionalSpace,
    '9xlarge': fontSizes['9xlarge'] + additionalSpace,
    '8xlarge': fontSizes['8xlarge'] + additionalSpace,
    '7xlarge': fontSizes['7xlarge'] + additionalSpace,
    '6xlarge': fontSizes['6xlarge'] + additionalSpace,
    xxxxxlarge: fontSizes.xxxxxlarge + additionalSpace, // h1
    xxxxlarge: fontSizes.xxxxlarge + additionalSpace, //   h2
    xxxlarge: fontSizes.xxxlarge + additionalSpace, //     h3
    xxlarge: fontSizes.xxlarge + additionalSpace, //       h4
    xlarge: fontSizes.xlarge + additionalSpace, //         h5
    large: fontSizes.large + additionalSpace, //           h6
    medium: fontSizes.medium + additionalSpace, //         h7
    small: fontSizes.small + additionalSpace, //           h8
    xsmall: fontSizes.xsmall + additionalSpace, //         h9
  };
};

export { getFontSizes, fontWeights, getLineHeights };
export type { FontSizes, FontWeights, LineHeights };
