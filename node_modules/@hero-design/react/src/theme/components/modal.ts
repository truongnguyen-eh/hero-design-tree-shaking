import type { GlobalTheme } from '../global';

const colorWithOpacity = (color: string, opacity: number): string =>
  `${color}${(opacity * 255).toString(16)}`;

const getModalTheme = (theme: GlobalTheme) => {
  const colors = {
    headerBasicBackground: theme.colors.defaultLightBackground,
    headerBasic: theme.colors.text,
    headerPrimaryBackground: theme.colors.primaryHeaderBackground,
    headerPrimary: theme.colors.text,
    contentBackground: theme.colors.defaultLightBackground,
    containerBackground: colorWithOpacity(
      theme.colors.defaultDarkBackground,
      0.6
    ),
    body: theme.colors.bodyText,
  };

  const sizes = {
    contentSmallMinWidth: '300px',
    contentSmallMaxWidth: '400px',
    contentMediumMinWidth: '400px',
    contentMediumMaxWidth: '600px',
    contentLargeMinWidth: '600px',
    contentLargeMaxWidth: '800px',
    contentExtraLargeMinWidth: '800px',
    contentExtraLargeMaxWidth: '960px',
    contentDoubleExtraLargeMinWidth: '960px',
    contentDoubleExtraLargeMaxWidth: '1200px',
  };

  const space = {
    headerPadding: `${theme.space.medium}px ${theme.space.large}px`,
    bodyPadding: `${theme.space.medium}px ${theme.space.large}px`,
    popUpBodyPadding: `${theme.space.medium}px ${theme.space.large}px 0 ${theme.space.large}px`,
    footerPadding: `${theme.space.medium}px ${theme.space.large}px`,
    popUpIconMarginRight: `${theme.space.medium}px`,
    popUpTitleMarginBottom: `${theme.space.small}px`,
    wrapperPaddingY: '2.5vh',
  };

  const fontSizes = {
    header: `${theme.fontSizes.xlarge}px`,
    body: `${theme.fontSizes.medium}px`,
    popUpIcon: `${theme.fontSizes.xxxxxlarge}px`,
  };

  const fontWeights = {
    header: theme.fontWeights.semiBold,
    body: theme.fontWeights.regular,
  };

  const lineHeights = {
    header: `${theme.lineHeights.xlarge}px`,
    body: `${theme.lineHeights.medium}px`,
  };

  const radii = {
    header: `${theme.radii.medium}px ${theme.radii.medium}px 0 0`,
    content: `${theme.radii.medium}px`,
  };

  return { colors, sizes, space, fontSizes, fontWeights, lineHeights, radii };
};

type ModalTheme = ReturnType<typeof getModalTheme>;

export { getModalTheme };
export type { ModalTheme };
