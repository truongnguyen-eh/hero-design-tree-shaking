import type { GlobalTheme } from '../global';

const getButtonTheme = (theme: GlobalTheme) => {
  const sizes = {
    small: `${theme.sizes.large}px`,
    medium: `${theme.sizes.xlarge}px`,
    large: `${theme.sizes.xxxlarge}px`,
    smallMinWidth: '50px',
    mediumMinWidth: '80px',
    largeMinWidth: '100px',
  };

  const space = {
    smallPadding: `${theme.space.xsmall}px ${theme.space.small}px`,
    mediumPadding: `${theme.space.small}px ${theme.space.medium}px`,
    largePadding: `${theme.space.small}px ${theme.space.medium}px`,
    iconPadding: `${theme.space.small}px`,
    inlineTextPadding: '0px',
  };

  const fontSizes = {
    small: `${theme.fontSizes.small}px`,
    medium: `${theme.fontSizes.medium}px`,
    large: `${theme.fontSizes.xlarge}px`,
  };

  const fontWeights = {
    text: theme.fontWeights.regular,
  };

  const lineHeights = {
    small: `${theme.lineHeights.small}px`,
    medium: `${theme.lineHeights.medium}px`,
    large: `${theme.lineHeights.xlarge}px`,
  };

  const borderWidths = {
    default: `${theme.borderWidths.base}px`,
  };

  const radii = {
    small: `calc(${sizes.small} / 2)`,
    medium: `calc(${sizes.medium} / 2)`,
    large: `calc(${sizes.large} / 2)`,
  };

  const colors = {
    text: {
      filledPrimary: theme.colors.lightText,
      filledDanger: theme.colors.lightText,
      filledSuccess: theme.colors.lightText,
      filledWarning: theme.colors.lightText,
      filledError: theme.colors.lightText,
      primary: theme.colors.primary,
      lightPrimary: theme.colors.lightPrimary,
      hoverPrimary: theme.colors.hoverPrimary,
      activePrimary: theme.colors.activePrimary,
      loadingPrimary: theme.colors.activePrimary,
      danger: theme.colors.danger,
      hoverDanger: theme.colors.hoverDanger,
      activeDanger: theme.colors.activeDanger,
      loadingDanger: theme.colors.activeDanger,
      success: theme.colors.success,
      hoverSuccess: theme.colors.hoverSuccess,
      activeSuccess: theme.colors.activeSuccess,
      loadingSuccess: theme.colors.activeSuccess,
      warning: theme.colors.warning,
      hoverWarning: theme.colors.hoverWarning,
      activeWarning: theme.colors.activeWarning,
      loadingWarning: theme.colors.activeWarning,
      error: theme.colors.error,
      hoverError: theme.colors.hoverError,
      activeError: theme.colors.activeError,
      loadingError: theme.colors.activeError,
      disabledText: theme.colors.subduedText,
      basicTransparent: theme.colors.lightText,
      linkSubdued: theme.colors.subduedText,
      defaultText: theme.colors.text,
      disabledLightText: theme.colors.disabledText,
    },
    background: {
      primary: theme.colors.primary,
      hoverPrimary: theme.colors.hoverPrimary,
      activePrimary: theme.colors.activePrimary,
      loadingPrimary: theme.colors.activePrimary,
      danger: theme.colors.danger,
      hoverDanger: theme.colors.hoverDanger,
      activeDanger: theme.colors.activeDanger,
      loadingDanger: theme.colors.activeDanger,
      success: theme.colors.success,
      hoverSuccess: theme.colors.hoverSuccess,
      activeSuccess: theme.colors.activeSuccess,
      loadingSuccess: theme.colors.activeSuccess,
      warning: theme.colors.warning,
      hoverWarning: theme.colors.hoverWarning,
      activeWarning: theme.colors.activeWarning,
      loadingWarning: theme.colors.activeWarning,
      error: theme.colors.error,
      hoverError: theme.colors.hoverError,
      activeError: theme.colors.activeError,
      loadingError: theme.colors.activeError,
      disabledBackground: theme.colors.neutralLightBackground,
      defaultBackground: theme.colors.defaultBackground,
      defaultLightBackground: theme.colors.defaultLightBackground,
    },
    primary: theme.colors.primary,
    hoverPrimary: theme.colors.hoverPrimary,
    activePrimary: theme.colors.activePrimary,
    loadingPrimary: theme.colors.activePrimary,
    danger: theme.colors.danger,
    hoverDanger: theme.colors.hoverDanger,
    activeDanger: theme.colors.activeDanger,
    loadingDanger: theme.colors.activeDanger,
    success: theme.colors.success,
    hoverSuccess: theme.colors.hoverSuccess,
    activeSuccess: theme.colors.activeSuccess,
    loadingSuccess: theme.colors.activeSuccess,
    warning: theme.colors.warning,
    hoverWarning: theme.colors.hoverWarning,
    activeWarning: theme.colors.activeWarning,
    loadingWarning: theme.colors.activeWarning,
    error: theme.colors.error,
    hoverError: theme.colors.hoverError,
    activeError: theme.colors.activeError,
    loadingError: theme.colors.activeError,
    basicTransparent: theme.colors.lightText,
    defaultBorder: theme.colors.disabledText,
  };

  return {
    sizes,
    space,
    fontSizes,
    fontWeights,
    lineHeights,
    borderWidths,
    radii,
    colors,
  };
};

type ButtonTheme = ReturnType<typeof getButtonTheme>;

export { getButtonTheme };
export type { ButtonTheme };
