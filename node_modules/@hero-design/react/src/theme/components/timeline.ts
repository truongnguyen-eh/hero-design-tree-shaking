import type { GlobalTheme } from '../global';

const getTimelineTheme = (theme: GlobalTheme) => {
  const itemLineWidth = theme.sizes.xxsmall;
  const itemMarkerSize = theme.sizes.medium;
  const itemBorderWidth = theme.sizes.xxsmall;
  const itemMarkerPositionTop = theme.space.xxsmall;

  const space = {
    itemPaddingBottom: `${theme.space.large}px`,
    itemLinePositionLeft: `${itemMarkerSize / 2}px`,
    itemLinePositionTop: `${itemMarkerSize + itemMarkerPositionTop}px`,
    itemMarkerPositionTop: `${itemMarkerPositionTop}px`,
    itemContentMarginLeft: `${theme.space.xlarge}px`,
  };

  const sizes = {
    itemLineWidth: `${itemLineWidth}px`,
    itemMarkerWidth: `${itemMarkerSize + itemBorderWidth}px`,
    itemMarkerHeight: `${itemMarkerSize + itemBorderWidth}px`,
    itemLineHeight: `calc(100% - ${itemMarkerSize}px)`,
  };

  const fontSizes = {
    itemText: `${theme.fontSizes.large}px`,
    itemHelpText: `${theme.fontSizes.medium}px`,
  };

  const lineHeights = {
    itemText: `${theme.lineHeights.large}px`,
    itemHelpText: `${theme.lineHeights.medium}px`,
  };

  const fontWeights = {
    itemText: theme.fontWeights.semiBold,
    itemHelpText: theme.fontWeights.regular,
  };

  const colors = {
    itemLineBg: theme.colors.neutralBackground,
    itemMarkerBg: theme.colors.defaultLightBackground,
    itemText: theme.colors.text,
    itemHelpText: theme.colors.text,
    itemMarkerDefault: theme.colors.neutralDarkBackground,
    itemMarkerSuccess: theme.colors.success,
    itemMarkerInfo: theme.colors.primary,
    itemMarkerWarning: theme.colors.warning,
    itemMarkerDanger: theme.colors.danger,
    itemMarkerError: theme.colors.error,
  };

  const borderWidths = {
    itemMarker: `${itemBorderWidth}px`,
  };

  return {
    space,
    sizes,
    fontSizes,
    lineHeights,
    fontWeights,
    colors,
    borderWidths,
  };
};

type TimelineTheme = ReturnType<typeof getTimelineTheme>;

export { getTimelineTheme };
export type { TimelineTheme };
