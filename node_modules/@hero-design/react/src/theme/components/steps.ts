import type { GlobalTheme } from '../global';

const getStepsTheme = (theme: GlobalTheme) => {
  const iconSize = theme.fontSizes.medium;
  const activeIconSize = theme.sizes.medium;
  const stepLineHeight = theme.sizes.xxsmall;

  const stepMaxWidthMobile = theme.sizes.xxlarge;
  const stepMaxWidthDesktop = theme.sizes.xxlarge * 3;

  const sizes = {
    iconSize: `${iconSize}px`,
    lineHeight: `${stepLineHeight}px`,
    activeIconSize: `${activeIconSize}px`,
    maxWidthDesktop: `${iconSize + stepMaxWidthDesktop}px`,
    maxWidthMobile: `${iconSize + stepMaxWidthMobile}px`,
  };

  const space = {
    padding: `${theme.space.medium}px 0px`,
    linePositionTop: `${(iconSize - stepLineHeight) / 2}px`,
    linePositionLeft: `calc(-50% + ${iconSize / 2}px)`,
    linePositionRight: `calc(50% + ${iconSize / 2}px)`,
    labelMargin: `${theme.space.small}px 0 0 0`,
  };

  const colors = {
    labelCompleteText: theme.colors.lightPrimary,
    labelIncompleteText: theme.colors.bodyText,
    labelActiveText: theme.colors.primary,
    lineCompleteBg: theme.colors.lightPrimary,
    lineIncompleteBg: theme.colors.neutralBackground,
    completeBg: theme.colors.defaultDarkBackground,
    activeCompleteBg: theme.colors.primaryBackground,
    activeIncompleteBg: theme.colors.defaultLightBackground,
    activeIconBorder: theme.colors.primary,
    incompleteIconBorder: theme.colors.subduedText,
  };

  const fontSizes = {
    labelInactive: `${theme.fontSizes.small}px`,
    labelActive: `${theme.fontSizes.medium}px`,
    activeIcon: `${theme.fontSizes.xsmall}px`,
  };

  const lineHeights = {
    labelInactive: `${theme.lineHeights.small}px`,
    labelActive: `${theme.lineHeights.medium}px`,
  };

  const fontWeights = {
    labelActive: theme.fontWeights.semiBold,
  };

  const radii = {
    icon: '100%',
  };

  const borderWidths = {
    activeIcon: `${theme.borderWidths.base * 2}px`,
    incompleteIcon: `${theme.borderWidths.base * 2}px`,
  };

  return {
    sizes,
    space,
    colors,
    fontSizes,
    lineHeights,
    fontWeights,
    radii,
    borderWidths,
  };
};

type StepsTheme = ReturnType<typeof getStepsTheme>;

export { getStepsTheme };
export type { StepsTheme };
