import React from 'react';
import { fireEvent } from '@testing-library/react';
import { mockResizeObserver } from 'jsdom-testing-mocks';
import { act } from 'react-dom/test-utils';
import renderWithTheme from '../../../testUtils/renderWithTheme';
import * as tabUtils from '../utils';

import Tabs from '../index';

const resizeObserver = mockResizeObserver();

describe('Tabs', () => {
  const onChange = jest.fn();
  const tabs = [
    { id: 1, title: 'Tab 1', panel: 'Tab content 1' },
    { id: 2, title: 'Tab 2', panel: 'Tab content 2' },
    { id: 3, title: 'Tab 3', panel: 'Tab content 3', disabled: true },
    { id: 4, title: <>Tab 4</>, panel: 'Tab content 4' },
    {
      id: 5,
      title: <>Tab 5 (disabled)</>,
      panel: 'Tab content 4',
      disabled: true,
    },
  ];

  it('renders correct selected tab', () => {
    const { getByText, queryByText } = renderWithTheme(
      <Tabs
        id="sample-tabs"
        tabs={tabs}
        selectedTabId={1}
        onChange={onChange}
        renderActiveTabPanelOnly
      />
    );

    expect(getByText('Tab 1')).toBeInTheDocument();
    expect(getByText('Tab 2')).toBeInTheDocument();
    expect(getByText('Tab 3')).toBeInTheDocument();
    expect(getByText('Tab 4')).toBeInTheDocument();
    expect(getByText('Tab content 1')).toBeInTheDocument();
    expect(queryByText('Tab content 2')).not.toBeInTheDocument();
    expect(queryByText('Tab content 3')).not.toBeInTheDocument();

    fireEvent.click(getByText('Tab 3'));
    fireEvent.click(getByText('Tab 5 (disabled)'));
    expect(onChange).not.toHaveBeenCalled();

    fireEvent.click(getByText('Tab 2'));
    expect(onChange).toHaveBeenCalledWith(2);

    fireEvent.click(getByText('Tab 4'));
    expect(onChange).toHaveBeenCalledWith(4);
  });

  it('renders correct selected tab and hide inactive tabs', () => {
    const { getByText } = renderWithTheme(
      <Tabs
        id="sample-tabs"
        tabs={tabs}
        selectedTabId={1}
        onChange={onChange}
      />
    );
    expect(getByText('Tab 1')).toBeInTheDocument();
    expect(getByText('Tab 2')).toBeInTheDocument();
    expect(getByText('Tab 3')).toBeInTheDocument();
    expect(getByText('Tab content 1')).toBeInTheDocument();
    expect(getByText('Tab content 2')).toBeInTheDocument();
    expect(getByText('Tab content 3')).toBeInTheDocument();
    expect(getByText('Tab content 2')).not.toBeVisible();
    expect(getByText('Tab content 3')).not.toBeVisible();
  });

  it('allows to hover tab using keyboard', () => {
    const WithHookSubTabs = () => {
      const [selectedTabId, setSelectedTabId] = React.useState<number | string>(
        1
      );
      return (
        <Tabs
          id="sample-tabs"
          tabs={tabs}
          selectedTabId={selectedTabId}
          onChange={setSelectedTabId}
        />
      );
    };
    const { getByText } = renderWithTheme(<WithHookSubTabs />);

    const tab1 = getByText('Tab 1');
    const tab2 = getByText('Tab 2');
    const tab3 = getByText('Tab 3');

    // Focus tab 1
    fireEvent.click(tab1);
    expect(tab1.tabIndex).toBe(0);
    expect(tab2.tabIndex).toBe(-1);
    expect(tab3.tabIndex).toBe(-1);

    // Use arrow key to go right
    fireEvent.keyDown(tab1, { key: 'ArrowRight', keyCode: 39 });
    expect(tab1.tabIndex).toBe(-1);
    expect(tab2.tabIndex).toBe(0);
    expect(tab3.tabIndex).toBe(-1);

    // Use arrow key to go left
    fireEvent.keyDown(tab2, { key: 'ArrowLeft', keyCode: 37 });
    expect(tab1.tabIndex).toBe(0);
    expect(tab2.tabIndex).toBe(-1);
    expect(tab3.tabIndex).toBe(-1);
  });

  it('renders OverflowTabList', async () => {
    jest.spyOn(tabUtils, 'getTabWidth').mockReturnValue('100px');

    const WithOnChange = () => {
      const newTabs = [
        { id: 1, title: '1 Tab title', panel: 'Tab 1 content' },
        {
          id: 2,
          title: '2 Very looooooooooooooooooooooooooong tab title',
          panel: 'Tab 2 content',
        },
        { id: 3, title: '3 Short title', panel: 'Tab 3 content' },
        {
          id: 4,
          title: '4 Another loooooooooooooong tab title',
          panel: 'Tab 4 content',
        },
        {
          id: 5,
          title: '5 Normal tab',
          panel: 'Tab 5 content',
          disabled: true,
        },
        { id: 6, title: '6 Pretty long tab', panel: 'Tab 6 content' },
      ];

      const [selectedTabId, setSelectedTabId] = React.useState<number | string>(
        1
      );

      return (
        <Tabs
          id="sample-tabs"
          tabs={newTabs}
          selectedTabId={selectedTabId}
          onChange={setSelectedTabId}
          renderActiveTabPanelOnly
          data-test-id="overflow-tab-test"
        />
      );
    };
    const { getByTestId, getByRole } = renderWithTheme(<WithOnChange />);

    // render normal tab
    const tabList = getByTestId('normal-tab-list');
    expect(tabList).toBeInTheDocument();

    const tabWrapper = getByTestId('overflow-tab-test');
    jest.spyOn(tabWrapper, 'clientWidth', 'get').mockImplementation(() => 500);

    resizeObserver.mockElementSize(tabWrapper, {
      contentBoxSize: { inlineSize: 1000, blockSize: 1500 },
    });

    await act(async () => {
      resizeObserver.resize();
    });

    // render tab list with overflow
    expect(getByTestId('overflow-tab-list')).toBeInTheDocument();

    await act(async () => {
      resizeObserver.resize();
    });

    // Current shown tabs
    expect(
      getByRole('tab', {
        name: '1 Tab title',
      })
    ).toBeVisible();
    expect(
      getByRole('tab', {
        name: '2 Very looooooooooooooooooooooooooong tab title',
      })
    ).toBeVisible();

    // Click on dropdown
    const dropdown = getByTestId('tabs-sample-tabs-tab-view-more-tab');
    fireEvent.click(dropdown);

    // Items in dropdown
    expect(getByTestId('tabs-sample-tabs-tab-3')).toBeVisible();
    expect(getByTestId('tabs-sample-tabs-tab-4')).toBeVisible();
    expect(getByTestId('tabs-sample-tabs-tab-5')).toBeVisible();
    expect(getByTestId('tabs-sample-tabs-tab-6')).toBeVisible();

    // Choose tab in dropdown
    fireEvent.click(getByTestId('tabs-sample-tabs-tab-3'));

    // New active tab should be visible
    expect(getByRole('tab', { name: '3 Short title' })).toBeVisible();
  });
});
