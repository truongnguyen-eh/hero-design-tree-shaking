import type { KeyboardEvent } from 'react';
import { fromNillable, map, getOrElse } from '../../fp/Option';
import { pipe, noop } from '../../fp/function';

const focusTab = (element: HTMLButtonElement | null | undefined): void =>
  pipe(
    fromNillable(element),
    map((el) => el.focus()),
    getOrElse(noop)
  );

const getTabVariant = ({
  active,
  disabled,
}: {
  active: boolean;
  disabled: boolean;
}): 'basic' | 'active' | 'disabled' => {
  if (disabled) {
    return 'disabled';
  }
  return active ? 'active' : 'basic';
};

const getTabWidth = (element: HTMLButtonElement | null | undefined): string =>
  pipe(
    fromNillable(element),
    map((el) => getComputedStyle(el).width),
    getOrElse(() => '')
  );

const getOnTabListKeydown = ({
  tabRefs,
  onChangeFocusTabIndex,
  tabsLength,
  focusTabIndex,
  event: e,
}: {
  tabRefs: React.MutableRefObject<(HTMLButtonElement | null)[]>;
  onChangeFocusTabIndex: (tabIndex: number) => void;
  tabsLength: number;
  focusTabIndex: number;
  event: KeyboardEvent;
}) => {
  // Move right
  if (e.keyCode === 39) {
    const nextIndex = focusTabIndex + 1;
    const newFocusIndex = nextIndex >= tabsLength ? 0 : nextIndex;
    onChangeFocusTabIndex(newFocusIndex);
    focusTab(tabRefs.current[newFocusIndex]);
  }

  // Move left
  if (e.keyCode === 37) {
    const nextIndex = focusTabIndex - 1;
    const newFocusIndex = nextIndex < 0 ? tabsLength - 1 : nextIndex;
    onChangeFocusTabIndex(newFocusIndex);
    focusTab(tabRefs.current[newFocusIndex]);
  }
};

export { focusTab, getTabVariant, getTabWidth, getOnTabListKeydown };
