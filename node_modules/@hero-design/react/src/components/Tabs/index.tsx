import React, {
  useRef,
  useState,
  useEffect,
  useCallback,
  useMemo,
} from 'react';
import type { ReactElement, ReactNode, KeyboardEvent, MouseEvent } from 'react';
import { useTheme } from 'styled-components';
import { useCss, useResizeObserver } from '../../utils/hooks';

import {
  TabWrapper,
  TabList,
  Tab,
  TruncatedTab,
  TabTitle,
  TabTitleIcon,
  TabTitleArrowIcon,
  TabPanel,
  DropdownTabWraper,
  OverflownMenu,
} from './StyledTabs';
import Icon from '../Icon';
import Dropdown from '../Dropdown';
import Menu from '../Menu';
import Tooltip from '../Tooltip';
import { getOnTabListKeydown, getTabVariant, getTabWidth } from './utils';
import { fromUndefinedable, getOrElse, map } from '../../fp/Option';
import { pipe } from '../../fp/function';

import SubTabs from './SubTabs';
import type { IconName } from '../Icon';
import type { CommonProps } from '../common';

export interface TabsProps extends Omit<CommonProps, 'id'> {
  /**
   * Unique identifier for Tabs container. This will be combined with the id of each Tab child to generate ARIA accessibility attributes.
   */
  id: string;
  /*
   * onChange event handler receiving id of upcoming active Tab.
   */
  onChange: (tabId: string | number) => void;
  /**
   * Whether inactive tab panels should be removed from the DOM and unmounted in React.
   */
  renderActiveTabPanelOnly?: boolean;
  /**
   * Current selected tab id.
   */
  selectedTabId: string | number;
  /**
   * List of Tab to be rendered. Each Tab must have an unquie id.
   */
  tabs: {
    disabled?: boolean;
    icon?: IconName | ReactElement;
    id: string | number;
    panel: ReactNode;
    title: string | ReactElement;
  }[];
  /**
   * Custom text for view more tab
   */
  viewMoreText?: string | ReactElement;
}

const tabPrefix = 'tabs';
const VIEW_MORE_TAB = 'view-more-tab';

const NormalTabList = ({
  tabs,
  selectedTabId,
  onChange,
  id,
  focusTabIndex,
  setFocusTabIndex,
  setTabWidths,
}: {
  tabs: TabsProps['tabs'];
  selectedTabId: TabsProps['selectedTabId'];
  onChange: TabsProps['onChange'];
  id: TabsProps['id'];
  focusTabIndex: number;
  setFocusTabIndex: React.Dispatch<React.SetStateAction<number>>;
  setTabWidths: React.Dispatch<React.SetStateAction<number[]>>;
}) => {
  const tabRefs = useRef<(HTMLButtonElement | null)[]>([]);

  useEffect(() => {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);

  useEffect(() => {
    setTabWidths(
      tabRefs.current.map((tabElement) => {
        const tabWidth = getTabWidth(tabElement).match(/\d+/)?.[0];
        return parseInt(tabWidth || '0', 10);
      })
    );
  }, [setTabWidths]);

  const onTabListKeyDown = useCallback(
    (e: KeyboardEvent) =>
      getOnTabListKeydown({
        tabRefs,
        onChangeFocusTabIndex: setFocusTabIndex,
        tabsLength: tabs.length,
        focusTabIndex,
        event: e,
      }),
    [tabRefs, setFocusTabIndex, tabs.length, focusTabIndex]
  );

  return (
    <TabList
      role="tablist"
      onKeyDown={onTabListKeyDown}
      tabIndex={-1}
      data-test-id="normal-tab-list"
    >
      {tabs.map((tab, index) => {
        const active = selectedTabId === tab.id;
        const variant = getTabVariant({
          active,
          disabled: tab.disabled !== undefined ? tab.disabled : false,
        });
        return (
          <Tab
            key={tab.id}
            type="button"
            role="tab"
            id={`${tabPrefix}-${id}-tab-${tab.id}`}
            disabled={tab.disabled}
            aria-selected={active}
            aria-controls={`${tabPrefix}-${id}-panel-${tab.id}`}
            tabIndex={pipe(
              tabs[focusTabIndex],
              fromUndefinedable,
              map((focusedTab) => (focusedTab.id === tab.id ? 0 : -1)),
              getOrElse(() => -1)
            )}
            ref={(el: HTMLButtonElement): void => {
              tabRefs.current[index] = el;
            }}
            onClick={(e: MouseEvent): void => {
              onChange(tab.id);
              e.preventDefault();
            }}
            themeVariant={variant}
          >
            {tab.icon !== undefined && (
              <TabTitleIcon>
                <Icon icon={tab.icon} />
              </TabTitleIcon>
            )}
            {tab.title}
          </Tab>
        );
      })}
    </TabList>
  );
};

export const OverflowTabList = ({
  tabs,
  selectedTabId,
  onChange,
  id,
  tabWrapperRef,
  focusTabIndex,
  setFocusTabIndex,
  viewMoreText,
  tabWidths,
}: {
  tabs: TabsProps['tabs'];
  selectedTabId: TabsProps['selectedTabId'];
  onChange: TabsProps['onChange'];
  id: TabsProps['id'];
  tabWrapperRef: React.MutableRefObject<HTMLDivElement | null>;
  focusTabIndex: number;
  setFocusTabIndex: React.Dispatch<React.SetStateAction<number>>;
  viewMoreText: TabsProps['viewMoreText'];
  tabWidths: number[];
}) => {
  const tabRefs = useRef<(HTMLButtonElement | null)[]>([]);
  const [openDropdown, setOpenDropdown] = useState(false);
  const [numberOfRenderedTabs, setNumberOfRenderedTabs] = useState(0);

  useEffect(() => {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);

  const onTabListKeyDown = useCallback(
    (e: KeyboardEvent) => {
      getOnTabListKeydown({
        tabRefs,
        onChangeFocusTabIndex: setFocusTabIndex,
        tabsLength: tabs.length,
        focusTabIndex,
        event: e,
      });
    },
    [tabRefs, setFocusTabIndex, tabs.length, focusTabIndex]
  );

  const theme = useTheme();
  const maxTabWidth = parseInt(theme.__hd__.tabs.sizes.maxWidth || '', 10);
  const tabMargin = parseInt(theme.__hd__.tabs.space.marginRight || '', 10);

  const accTabWidths = useMemo(() => {
    let accWidth = 0;
    return tabWidths.map((width) => {
      accWidth = accWidth + Math.min(width, maxTabWidth) + tabMargin;
      return accWidth;
    });
  }, [tabWidths, tabMargin, maxTabWidth]);

  const calculateNumberOfRenderedTabs = useCallback(
    ({ clientWidth }) => {
      const breakIdx = accTabWidths.findIndex(
        (accWidth) => accWidth + maxTabWidth > clientWidth
      );
      setNumberOfRenderedTabs(breakIdx || 0);
    },
    [accTabWidths, maxTabWidth]
  );

  useResizeObserver(calculateNumberOfRenderedTabs, tabWrapperRef.current);

  const selectedTabIndex = tabs.findIndex((tab) => tab.id === selectedTabId);
  const selectedTabTitle = tabs[selectedTabIndex]?.title || '';
  const selectedTabWasCollapsed = selectedTabIndex >= numberOfRenderedTabs;
  const renderedTabs = useMemo(
    () => tabs.slice(0, numberOfRenderedTabs),
    [numberOfRenderedTabs, tabs]
  );
  const collapsedTabs = useMemo(
    () => tabs.slice(numberOfRenderedTabs),
    [numberOfRenderedTabs, tabs]
  );

  return (
    <TabList
      role="tablist"
      onKeyDown={onTabListKeyDown}
      tabIndex={-1}
      data-test-id="overflow-tab-list"
    >
      {renderedTabs.map((tab, index) => {
        const active = selectedTabId === tab.id;
        const variant = getTabVariant({
          active,
          disabled: tab.disabled !== undefined ? tab.disabled : false,
        });

        return (
          <Tooltip
            target={
              <TruncatedTab
                key={tab.id}
                type="button"
                role="tab"
                id={`${tabPrefix}-${id}-tab-${tab.id}`}
                disabled={tab.disabled}
                aria-selected={active}
                aria-controls={`${tabPrefix}-${id}-panel-${tab.id}`}
                tabIndex={pipe(
                  tabs[focusTabIndex],
                  fromUndefinedable,
                  map((focusedTab) => (focusedTab.id === tab.id ? 0 : -1)),
                  getOrElse(() => -1)
                )}
                ref={(el: HTMLButtonElement): void => {
                  tabRefs.current[index] = el;
                }}
                onClick={(e: MouseEvent): void => {
                  onChange(tab.id);
                  e.preventDefault();
                }}
                themeVariant={variant}
              >
                {tab.icon !== undefined && (
                  <TabTitleIcon>
                    <Icon icon={tab.icon} />
                  </TabTitleIcon>
                )}
                <TabTitle>{tab.title}</TabTitle>
              </TruncatedTab>
            }
            content={tab.title}
            key={`${tabPrefix}-${id}-tab-${tab.id}-tooltip`}
            data-test-id={`${tabPrefix}-${id}-tab-${tab.id}-wrapper`}
          />
        );
      })}
      <Dropdown
        open={openDropdown}
        content={
          <OverflownMenu>
            {collapsedTabs.map((tab) => (
              <Menu.Item
                key={`${tabPrefix}-${id}-tab-${tab.id}-dropdown-item`}
                text={tab.title}
                onClick={(e: MouseEvent): void => {
                  onChange(tab.id);
                  setOpenDropdown(false);
                  e.preventDefault();
                }}
                disabled={tab.disabled}
                active={selectedTabId === tab.id}
                data-test-id={`${tabPrefix}-${id}-tab-${tab.id}`}
              />
            ))}
          </OverflownMenu>
        }
        target={
          <DropdownTabWraper>
            <Tooltip
              visible={selectedTabWasCollapsed}
              target={
                <TruncatedTab
                  key={VIEW_MORE_TAB}
                  type="button"
                  role="tab"
                  id={`${tabPrefix}-${id}-tab-${VIEW_MORE_TAB}`}
                  aria-selected={selectedTabWasCollapsed}
                  aria-controls={`${tabPrefix}-${id}-panel-${VIEW_MORE_TAB}`}
                  onClick={() => setOpenDropdown((open) => !open)}
                  themeVariant={getTabVariant({
                    active: selectedTabWasCollapsed,
                    disabled: false,
                  })}
                  data-test-id={`${tabPrefix}-${id}-tab-${VIEW_MORE_TAB}`}
                >
                  <TabTitle>
                    {selectedTabWasCollapsed ? selectedTabTitle : viewMoreText}
                  </TabTitle>
                  <TabTitleArrowIcon>
                    <Icon icon="arrow-down" />
                  </TabTitleArrowIcon>
                </TruncatedTab>
              }
              content={selectedTabTitle}
              style={{ height: '100%' }}
            />
          </DropdownTabWraper>
        }
        onClose={() => setOpenDropdown(false)}
      />
    </TabList>
  );
};

const Tabs = ({
  renderActiveTabPanelOnly = false,
  tabs,
  selectedTabId,
  onChange,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
  viewMoreText = '',
}: TabsProps): ReactElement => {
  const tabWrapperRef = useRef<HTMLDivElement | null>(null);
  const [renderOverflowTabList, setRenderOverflowTabList] =
    useState<boolean>(false);
  const [tabWidths, setTabWidths] = useState<number[]>([]);
  const [focusTabIndex, setFocusTabIndex] = useState<number>(0);

  const theme = useTheme();
  const tabMargin = parseInt(theme.__hd__.tabs.space.marginRight || '', 10);
  const totalTabWidths = useMemo(
    () => tabWidths.reduce((acc, width) => acc + width + tabMargin, 0),
    [tabWidths, tabMargin]
  );

  const updateRenderOverflowTabList = useCallback(
    ({ clientWidth }) => {
      if (clientWidth === 0 || totalTabWidths === 0) {
        return;
      }
      setRenderOverflowTabList(totalTabWidths > clientWidth);
    },
    [totalTabWidths]
  );

  useResizeObserver(updateRenderOverflowTabList, tabWrapperRef.current);
  useEffect(() => {
    updateRenderOverflowTabList(tabWrapperRef.current);
  }, []);

  useEffect(() => {
    setFocusTabIndex(tabs.findIndex((tab) => tab.id === selectedTabId));
  }, [selectedTabId, tabs]);

  return (
    <TabWrapper
      id={id}
      className={className}
      style={{
        ...style,
        ...useCss(sx),
        visibility: totalTabWidths > 0 ? 'visible' : 'hidden',
      }}
      data-test-id={dataTestId}
      ref={tabWrapperRef}
    >
      {renderOverflowTabList ? (
        <OverflowTabList
          tabs={tabs}
          selectedTabId={selectedTabId}
          onChange={onChange}
          id={id}
          tabWrapperRef={tabWrapperRef}
          focusTabIndex={focusTabIndex}
          setFocusTabIndex={setFocusTabIndex}
          viewMoreText={viewMoreText}
          tabWidths={tabWidths}
        />
      ) : (
        <NormalTabList
          tabs={tabs}
          selectedTabId={selectedTabId}
          onChange={onChange}
          id={id}
          focusTabIndex={focusTabIndex}
          setFocusTabIndex={setFocusTabIndex}
          setTabWidths={setTabWidths}
        />
      )}
      {tabs.map((tab) => {
        const hidden = selectedTabId !== tab.id;
        return hidden === false || renderActiveTabPanelOnly === false ? (
          <TabPanel
            key={tab.id}
            role="tabpanel"
            id={`${tabPrefix}-${id}-panel-${tab.id}`}
            aria-labelledby={`${tabPrefix}-${id}-tab-${tab.id}`}
            hidden={selectedTabId !== tab.id}
          >
            {tab.panel}
          </TabPanel>
        ) : null;
      })}
    </TabWrapper>
  );
};

Tabs.Sub = SubTabs;

export default Tabs;
