import React, {
  useRef,
  useState,
  useMemo,
  useCallback,
  useLayoutEffect,
} from 'react';
import type { ReactNode, ReactElement } from 'react';
import { useCss, useResizeObserver } from '../../../utils/hooks';

import { TabWrapper, TabPanel } from './StyledSubTabs';
import type { CommonProps } from '../../common';
import type { IconName } from '../../Icon';
import OverflowTabList from './OverflowTabList';
import NormalTabList from './NormalTabList';

const subTabPrefix = 'subTabs';

export interface SubTabsProps extends Omit<CommonProps, 'id'> {
  /**
   * Unique identifier for SubTabs container. This will be combined with the id of each SubTab child to generate ARIA accessibility attributes.
   */
  id: string;
  /*
   * onChange event handler receiving id of upcoming active SubTab.
   */
  onChange: (tabId: string | number) => void;
  /**
   * Whether inactive tab panels should be removed from the DOM and unmounted in React.
   */
  renderActiveTabPanelOnly?: boolean;
  /**
   * Current selected tab id.
   */
  selectedTabId: string | number;
  /**
   * List of Tab to be rendered. Each Tab must have an unquie id.
   */
  tabs: {
    disabled?: boolean;
    icon?: IconName | ReactElement;
    id: string | number;
    panel: ReactNode;
    title: ReactNode;
  }[];
  /**
   * Custom text for view more tab
   */
  viewMoreText?: ReactNode;
  /**
   * size of the component.
   */
  size?: 'small' | 'medium';
}

const SubTabs = ({
  onChange,
  renderActiveTabPanelOnly = false,
  selectedTabId,
  tabs,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
  viewMoreText = '',
  size = 'medium',
}: SubTabsProps): ReactElement => {
  const tabWrapperRef = useRef<HTMLDivElement | null>(null);
  const [focusTabIndex, setFocusTabIndex] = useState<number>(0);

  const [tabWidths, setTabWidths] = useState<number[]>([]);
  const [renderOverflowTabList, setRenderOverflowTabList] =
    useState<boolean>(false);

  const totalTabWidths = useMemo(
    () => tabWidths.reduce((acc, width) => acc + width, 0),
    [tabWidths]
  );

  const updateRenderOverflowTabList = useCallback(
    ({ clientWidth }) => {
      if (clientWidth === 0 || totalTabWidths === 0) {
        return;
      }
      setRenderOverflowTabList(totalTabWidths > clientWidth);
    },
    [totalTabWidths]
  );

  useLayoutEffect(() => {
    updateRenderOverflowTabList(tabWrapperRef.current);
  }, [totalTabWidths]);

  useResizeObserver(updateRenderOverflowTabList, tabWrapperRef.current);
  return (
    <TabWrapper
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
      ref={tabWrapperRef}
    >
      {renderOverflowTabList ? (
        <OverflowTabList
          tabs={tabs}
          size={size}
          selectedTabId={selectedTabId}
          onChange={onChange}
          id={id}
          focusTabIndex={focusTabIndex}
          onChangeFocusTabIndex={setFocusTabIndex}
          viewMoreText={viewMoreText}
          tabWidths={tabWidths}
        />
      ) : (
        <NormalTabList
          size={size}
          tabs={tabs}
          selectedTabId={selectedTabId}
          onChange={onChange}
          id={id}
          focusTabIndex={focusTabIndex}
          onChangeFocusTabIndex={setFocusTabIndex}
          onChangeTabWidths={setTabWidths}
        />
      )}
      {tabs.map((tab) => {
        const hidden = selectedTabId !== tab.id;
        return hidden === false || renderActiveTabPanelOnly === false ? (
          <TabPanel
            themeSize={size}
            key={tab.id}
            role="tabpanel"
            id={`${subTabPrefix}-${id}-panel-${tab.id}`}
            aria-labelledby={`${subTabPrefix}-${id}-tab-${tab.id}`}
            hidden={selectedTabId !== tab.id}
          >
            {tab.panel}
          </TabPanel>
        ) : null;
      })}
    </TabWrapper>
  );
};

export default SubTabs;
