import React, {
  useRef,
  useState,
  useMemo,
  ReactNode,
  useCallback,
  useLayoutEffect,
} from 'react';
import type { KeyboardEvent } from 'react';

import { useTheme } from 'styled-components';
import {
  TabList,
  TabTitleIcon,
  TruncatedTab,
  DropdownTabWraper,
  TabTitleArrowIcon,
  TabTitle,
  TabListWrapper,
} from './StyledSubTabs';
import { getOnTabListKeydown, getTabVariant, getTabWidth } from '../utils';
import { fromUndefinedable, getOrElse, map } from '../../../fp/Option';
import { pipe } from '../../../fp/function';
import Tooltip from '../../Tooltip';
import Dropdown from '../../Dropdown';
import Icon from '../../Icon';
import Menu from '../../Menu';
import { SelectedSubTabId, SubTabItem } from './types';
import TabIndicator from './TabIndicator';
import { useTranslation } from '../../LocaleProvider/hooks';

const subTabPrefix = 'subTabs';

const VIEW_MORE_TAB = 'view-more-sub-tab';

const OverflowTabList = ({
  tabs,
  selectedTabId,
  onChange,
  id,
  focusTabIndex,
  onChangeFocusTabIndex,
  viewMoreText: _viewMoreText,
  tabWidths,
  size = 'medium',
}: {
  tabs: SubTabItem[];
  selectedTabId: string | number;
  onChange: (id: SelectedSubTabId) => void;
  id: SelectedSubTabId;
  focusTabIndex: number;
  onChangeFocusTabIndex: (tabIndex: number) => void;
  viewMoreText?: ReactNode;
  tabWidths: number[];
  size?: 'small' | 'medium';
}) => {
  const tabRefs = useRef<(HTMLButtonElement | null)[]>([]);
  const [openDropdown, setOpenDropdown] = useState(false);
  const [numberOfRenderedTabs, setNumberOfRenderedTabs] = useState(0);
  const tabListWrapperRef = useRef<HTMLDivElement | null>(null);

  const { t } = useTranslation();
  const viewMoreText = _viewMoreText || t('View more');

  useLayoutEffect(() => {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);

  const onTabListKeyDown = useCallback(
    (event: KeyboardEvent) => {
      getOnTabListKeydown({
        tabRefs,
        onChangeFocusTabIndex,
        tabsLength: tabs.length,
        focusTabIndex,
        event,
      });
    },
    [tabRefs, onChangeFocusTabIndex, tabs.length, focusTabIndex]
  );

  const theme = useTheme();
  const maxTabWidth = parseInt(theme.__hd__.tabs.sizes.maxWidth || '', 10);

  const accTabWidths = useMemo(() => {
    let accWidth = 0;
    return tabWidths.map((width) => {
      accWidth += Math.min(width, maxTabWidth);
      return accWidth;
    });
  }, [tabWidths, maxTabWidth]);

  const calculateNumberOfRenderedTabs = useCallback(
    ({ clientWidth }) => {
      const breakIdx = accTabWidths.findIndex(
        (accWidth) => accWidth + maxTabWidth > clientWidth
      );

      setNumberOfRenderedTabs(breakIdx || 0);
    },
    [accTabWidths, maxTabWidth]
  );

  const selectedTabIndex = tabs.findIndex((tab) => tab.id === selectedTabId);
  const selectedTabTitle = tabs[selectedTabIndex]?.title || '';
  const selectedTabWasCollapsed = selectedTabIndex >= numberOfRenderedTabs;
  const renderedTabs = useMemo(
    () => tabs.slice(0, numberOfRenderedTabs),
    [numberOfRenderedTabs, tabs]
  );
  const collapsedTabs = useMemo(
    () => tabs.slice(numberOfRenderedTabs),
    [numberOfRenderedTabs, tabs]
  );

  const [overflowTabWidths, setOverflowTabWidths] = useState<string[]>([]);
  useLayoutEffect(() => {
    const tabResizeObserver = new ResizeObserver(() => {
      const newTabWidths = tabRefs.current.map((tabElement) => {
        return getTabWidth(tabElement);
      });

      setOverflowTabWidths(newTabWidths);
    });

    tabRefs.current.forEach((tabRef) => {
      if (tabRef === null) return;
      tabResizeObserver.observe(tabRef);
    });

    return () => {
      tabResizeObserver.disconnect();
    };
  }, [renderedTabs]);

  useLayoutEffect(() => {
    const tabListResizeObserver = new ResizeObserver(() => {
      calculateNumberOfRenderedTabs({
        clientWidth: tabListWrapperRef.current?.clientWidth || 0,
      });
    });

    if (tabListWrapperRef.current) {
      tabListResizeObserver.observe(tabListWrapperRef.current);
    }

    return () => {
      tabListResizeObserver.disconnect();
    };
  }, [tabListWrapperRef.current]);

  return (
    <TabListWrapper>
      <TabList
        ref={tabListWrapperRef}
        role="tablist"
        onKeyDown={onTabListKeyDown}
        tabIndex={-1}
        data-test-id="overflow-tab-list"
      >
        {renderedTabs.map((tab, index) => {
          const active = selectedTabId === tab.id;
          const variant = getTabVariant({
            active,
            disabled: tab.disabled !== undefined ? tab.disabled : false,
          });

          return (
            <Tooltip
              target={
                <TruncatedTab
                  key={tab.id}
                  type="button"
                  role="tab"
                  id={`${subTabPrefix}-${id}-tab-${tab.id}`}
                  data-test-id={`${subTabPrefix}-${id}-tab-${tab.id}`}
                  disabled={tab.disabled}
                  aria-selected={active}
                  aria-controls={`${subTabPrefix}-${id}-panel-${tab.id}`}
                  tabIndex={pipe(
                    tabs[focusTabIndex],
                    fromUndefinedable,
                    map((focusedTab) => (focusedTab.id === tab.id ? 0 : -1)),
                    getOrElse(() => -1)
                  )}
                  ref={(el: HTMLButtonElement): void => {
                    tabRefs.current[index] = el;
                  }}
                  onClick={(e): void => {
                    onChange(tab.id);
                    e.preventDefault();
                  }}
                  themeVariant={variant}
                  themeSize={size}
                >
                  {tab.icon !== undefined && (
                    <TabTitleIcon>
                      <Icon icon={tab.icon} />
                    </TabTitleIcon>
                  )}
                  <TabTitle>{tab.title}</TabTitle>
                </TruncatedTab>
              }
              content={tab.title}
              key={`${subTabPrefix}-${id}-tab-${tab.id}-tooltip`}
              data-test-id={`${subTabPrefix}-${id}-tab-${tab.id}-wrapper`}
            />
          );
        })}
        <Dropdown
          open={openDropdown}
          content={
            <Menu>
              {collapsedTabs.map((tab) => (
                <Menu.Item
                  key={`${subTabPrefix}-${id}-tab-${tab.id}-dropdown-item`}
                  text={tab.title}
                  onClick={(e): void => {
                    onChange(tab.id);
                    setOpenDropdown(false);
                    e.preventDefault();
                  }}
                  disabled={tab.disabled}
                  active={selectedTabId === tab.id}
                  data-test-id={`${subTabPrefix}-${id}-tab-${tab.id}`}
                />
              ))}
            </Menu>
          }
          target={
            <DropdownTabWraper>
              <Tooltip
                visible={selectedTabWasCollapsed}
                target={
                  <TruncatedTab
                    key={VIEW_MORE_TAB}
                    themeSize={size}
                    type="button"
                    role="tab"
                    id={`${subTabPrefix}-${id}-tab-${VIEW_MORE_TAB}`}
                    aria-selected={selectedTabWasCollapsed}
                    aria-controls={`${subTabPrefix}-${id}-panel-${VIEW_MORE_TAB}`}
                    onClick={() => setOpenDropdown((open) => !open)}
                    themeVariant={getTabVariant({
                      active: selectedTabWasCollapsed,
                      disabled: false,
                    })}
                    ref={(el: HTMLButtonElement): void => {
                      tabRefs.current[renderedTabs.length] = el;
                    }}
                    data-test-id={`${subTabPrefix}-${id}-tab-${VIEW_MORE_TAB}`}
                  >
                    <TabTitle>
                      {selectedTabWasCollapsed
                        ? selectedTabTitle
                        : viewMoreText}
                    </TabTitle>
                    <TabTitleArrowIcon>
                      <Icon icon="arrow-down" />
                    </TabTitleArrowIcon>
                  </TruncatedTab>
                }
                content={selectedTabTitle}
                style={{ height: '100%' }}
              />
            </DropdownTabWraper>
          }
          onClose={() => setOpenDropdown(false)}
        />
      </TabList>
      <TabIndicator
        selectedIndex={
          selectedTabIndex < renderedTabs.length
            ? selectedTabIndex
            : renderedTabs.length
        }
        tabWidths={overflowTabWidths}
      />
    </TabListWrapper>
  );
};

export default OverflowTabList;
