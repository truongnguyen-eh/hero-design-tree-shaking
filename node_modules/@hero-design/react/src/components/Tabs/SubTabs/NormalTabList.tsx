import React, { useRef, useState, useLayoutEffect } from 'react';
import type { MouseEvent, KeyboardEvent } from 'react';

import { TabList, Tab, TabTitleIcon, TabListWrapper } from './StyledSubTabs';
import { focusTab, getTabVariant, getTabWidth } from '../utils';
import { fromUndefinedable, getOrElse, map } from '../../../fp/Option';
import { pipe } from '../../../fp/function';
import Icon from '../../Icon';
import { SelectedSubTabId, SubTabItem } from './types';
import TabIndicator from './TabIndicator';

const subTabPrefix = 'subTabs';

const NormalTabList = ({
  tabs,
  selectedTabId,
  onChange,
  id,
  focusTabIndex,
  onChangeFocusTabIndex,
  onChangeTabWidths,
  size = 'medium',
}: {
  tabs: SubTabItem[];
  selectedTabId: SelectedSubTabId;
  onChange: (id: SelectedSubTabId) => void;
  id: SelectedSubTabId;
  focusTabIndex: number;
  onChangeFocusTabIndex: (tabIndex: number) => void;
  onChangeTabWidths: (tabWidths: number[]) => void;
  size?: 'small' | 'medium';
}) => {
  const tabRefs = useRef<Array<HTMLButtonElement | null>>([]);
  const tabListWrapperRef = useRef<HTMLDivElement | null>(null);

  const [indicatorTabWidths, setIndicatorTabWidths] = useState<string[]>([]);

  useLayoutEffect(() => {
    const tabListResizeObserver = new ResizeObserver(() => {
      const newTabWidths = tabRefs.current.map((tabElement) => {
        const tabWidth = getTabWidth(tabElement).match(/\d+/)?.[0];
        return parseInt(tabWidth || '0', 10);
      });

      onChangeTabWidths(newTabWidths);

      setIndicatorTabWidths(newTabWidths.map((width) => `${width}px`));
    });

    if (tabListWrapperRef.current) {
      tabListResizeObserver.observe(tabListWrapperRef.current);
    }

    return () => {
      tabListResizeObserver.disconnect();
    };
  }, [tabListWrapperRef.current]);

  const onTabListKeyDown = (e: KeyboardEvent): void => {
    // Move right
    if (e.keyCode === 39) {
      const nextIndex = focusTabIndex + 1;
      const newFocusIndex = nextIndex >= tabs.length ? 0 : nextIndex;
      onChangeFocusTabIndex(newFocusIndex);
      focusTab(tabRefs.current[newFocusIndex]);
    }

    // Move left
    if (e.keyCode === 37) {
      const nextIndex = focusTabIndex - 1;
      const newFocusIndex = nextIndex < 0 ? tabs.length - 1 : nextIndex;
      onChangeFocusTabIndex(newFocusIndex);
      focusTab(tabRefs.current[newFocusIndex]);
    }
  };

  useLayoutEffect(() => {
    tabRefs.current = tabRefs.current.slice(0, tabs.length);
  }, [tabs]);

  const selectedTabIndex = tabs.findIndex((tab) => tab.id === selectedTabId);

  return (
    <TabListWrapper>
      <TabList
        ref={tabListWrapperRef}
        role="tablist"
        onKeyDown={onTabListKeyDown}
        tabIndex={-1}
      >
        {tabs.map((tab, index) => {
          const active = selectedTabId === tab.id;
          const variant = getTabVariant({
            active,
            disabled: tab.disabled !== undefined ? tab.disabled : false,
          });
          return (
            <Tab
              themeSize={size}
              key={tab.id}
              type="button"
              role="tab"
              id={`${subTabPrefix}-${id}-tab-${tab.id}`}
              aria-selected={active}
              aria-controls={`${subTabPrefix}-${id}-panel-${tab.id}`}
              disabled={tab.disabled}
              themeVariant={variant}
              tabIndex={pipe(
                tabs[focusTabIndex],
                fromUndefinedable,
                map((focusedTab) => (focusedTab.id === tab.id ? 0 : -1)),
                getOrElse(() => -1)
              )}
              onClick={(e: MouseEvent): void => {
                onChange(tab.id);
                e.preventDefault();
              }}
              ref={(el: HTMLButtonElement): void => {
                tabRefs.current[index] = el;
              }}
            >
              {tab.icon !== undefined && (
                <TabTitleIcon>
                  <Icon
                    icon={tab.icon}
                    data-test-id={`${subTabPrefix}-${id}-tab-${tab.id}-icon`}
                  />
                </TabTitleIcon>
              )}
              {tab.title}
            </Tab>
          );
        })}
      </TabList>
      <TabIndicator
        selectedIndex={selectedTabIndex < 0 ? 0 : selectedTabIndex}
        tabWidths={indicatorTabWidths}
      />
    </TabListWrapper>
  );
};

export default NormalTabList;
