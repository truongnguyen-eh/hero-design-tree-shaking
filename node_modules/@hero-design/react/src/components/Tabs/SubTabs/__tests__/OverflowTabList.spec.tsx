import React from 'react';
import { act, fireEvent } from '@testing-library/react';

import { mockResizeObserver } from 'jsdom-testing-mocks';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import { SubTabItem } from '../types';
import OverflowTabList from '../OverflowTabList';

const resizeObserver = mockResizeObserver();
// mock function getTabWidth
jest.mock('../../utils', () => {
  const utils = jest.requireActual('../../utils');
  return {
    ...utils,
    getTabWidth: () => '100px',
  };
});

describe('OverflowTabList', () => {
  it('renders', async () => {
    const tabs: SubTabItem[] = [
      {
        id: 1,
        title: 'Tab 1',
        panel: <div>Tab 1 content</div>,
        icon: 'home',
      },
      {
        id: 2,
        title: 'Tab 2',
        panel: <div>Tab 2 content</div>,
        disabled: true,
      },
      { id: 3, title: 'Tab 3', panel: 'Tab content 3' },
      {
        id: 4,
        title: 'Tab 4',
        panel: <div>Tab 4 content</div>,
      },
    ];
    const onChange = jest.fn();
    const setFocusTabIndex = jest.fn();
    jest.useFakeTimers();

    const { getByText, getByTestId, queryByText, container } = renderWithTheme(
      <OverflowTabList
        tabs={tabs}
        selectedTabId={3}
        onChange={onChange}
        id="sample-tabs"
        focusTabIndex={0}
        onChangeFocusTabIndex={setFocusTabIndex}
        tabWidths={[100, 100, 100, 100]}
      />
    );

    // resize tabListWrapper
    const tabListWrapper = getByTestId('overflow-tab-list');
    jest
      .spyOn(tabListWrapper, 'clientWidth', 'get')
      .mockImplementation(() => 600);
    resizeObserver.mockElementSize(tabListWrapper, {
      contentBoxSize: { inlineSize: 600, blockSize: 700 },
    });

    await act(async () => {
      jest.runAllTimers();
      resizeObserver.resize(tabListWrapper);
    });

    // resize tabs
    const tab2 = getByTestId('subTabs-sample-tabs-tab-2');
    resizeObserver.mockElementSize(tab2, {
      contentBoxSize: { inlineSize: 150, blockSize: 700 },
    });

    await act(async () => {
      resizeObserver.resize(tab2);
    });

    // match snapshot
    expect(container).toMatchSnapshot();

    expect(getByText('Tab 1')).toBeVisible();
    expect(getByText('Tab 2')).toBeVisible();

    // should show `More` instead of `Tab 3`
    expect(queryByText('Tab 3')).toBeVisible();
    expect(queryByText('Tab 4')).toBeNull();

    // should show Tab 3 after clicking on `More`
    fireEvent.click(getByText('View more'));

    expect(getByText('Tab 4')).toBeVisible();

    // test disabled item
    fireEvent.click(getByText('Tab 2'));
    expect(onChange).not.toHaveBeenCalled();

    fireEvent.click(getByText('Tab 3'));
    expect(onChange).toHaveBeenCalledWith(3);

    // verify tab indicator
    expect(getByTestId('active-tab-indicator')).toHaveStyle(
      'left: calc(100px + 100px)'
    );
    expect(getByTestId('active-tab-indicator')).toHaveStyle('width: 100px');
  });
});
