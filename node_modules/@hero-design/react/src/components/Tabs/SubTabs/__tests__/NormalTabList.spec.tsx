import React from 'react';
import { screen, fireEvent, act } from '@testing-library/react';

import { mockResizeObserver } from 'jsdom-testing-mocks';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import { SubTabItem } from '../types';
import NormalTabList from '../NormalTabList';

const resizeObserver = mockResizeObserver();
describe('NormalTabList', () => {
  it('renders', async () => {
    const tabs: SubTabItem[] = [
      {
        id: 1,
        title: 'Tab 1',
        panel: <div>Tab 1 content</div>,
        icon: 'home',
      },
      {
        id: 2,
        title: 'Tab 2',
        panel: <div>Tab 2 content</div>,
      },
      { id: 3, title: 'Tab 3', panel: 'Tab content 3', disabled: true },
    ];
    const selectedTabId = '1';
    const onChange = jest.fn();
    const focusTabIndex = 0;
    const setFocusTabIndex = jest.fn();
    const setTabWidths = jest.fn();

    jest.useFakeTimers();
    const { getByText, container } = renderWithTheme(
      <div
        style={{
          width: 960,
          height: 60,
        }}
      >
        <NormalTabList
          tabs={tabs}
          selectedTabId={selectedTabId}
          onChange={onChange}
          id="sample-tabs"
          focusTabIndex={focusTabIndex}
          onChangeFocusTabIndex={setFocusTabIndex}
          onChangeTabWidths={setTabWidths}
        />
      </div>
    );

    const tab2 = getByText('Tab 2');
    resizeObserver.mockElementSize(tab2, {
      contentBoxSize: { inlineSize: 100, blockSize: 200 },
    });

    await act(async () => {
      jest.runAllTimers();
      resizeObserver.resize();
    });

    // match snapshot
    expect(container).toMatchSnapshot();

    expect(getByText('Tab 1')).toBeVisible();
    expect(getByText('Tab 2')).toBeVisible();
    expect(getByText('Tab 3')).toBeInTheDocument();
    expect(screen.getByTestId('subTabs-sample-tabs-tab-1-icon')).toBeDefined();
    fireEvent.click(getByText('Tab 3'));
    expect(onChange).not.toHaveBeenCalled();

    fireEvent.click(getByText('Tab 2'));
    expect(onChange).toHaveBeenCalledWith(2);
  });

  it('has active tab indicator', async () => {
    jest.useFakeTimers();

    const tabs: SubTabItem[] = [
      {
        id: 1,
        title: 'Tab 1',
        panel: <div>Tab 1 content</div>,
        icon: 'home',
      },
      {
        id: 2,
        title: 'Tab 2',
        panel: <div>Tab 2 content</div>,
      },
      { id: 3, title: 'Tab 3', panel: 'Tab content 3', disabled: true },
    ];
    const selectedTabId = '1';
    const onChange = jest.fn();
    const focusTabIndex = 0;
    const setFocusTabIndex = jest.fn();
    const setTabWidths = jest.fn();

    jest.useFakeTimers();
    const { getByText, getByTestId } = renderWithTheme(
      <div
        style={{
          width: 960,
          height: 60,
        }}
      >
        <NormalTabList
          tabs={tabs}
          selectedTabId={selectedTabId}
          onChange={onChange}
          id="sample-tabs"
          focusTabIndex={focusTabIndex}
          onChangeFocusTabIndex={setFocusTabIndex}
          onChangeTabWidths={setTabWidths}
        />
      </div>
    );

    const activeTabIndicator = getByTestId('active-tab-indicator');
    expect(activeTabIndicator).toBeInTheDocument();

    const tab2 = getByText('Tab 2');
    resizeObserver.mockElementSize(tab2, {
      contentBoxSize: { inlineSize: 100, blockSize: 200 },
    });
  });
});
