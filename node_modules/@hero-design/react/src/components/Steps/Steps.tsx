import React from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../utils/hooks';

import { Wrapper, StepWrapper, StepLine, StepLabel } from './StyledSteps';
import StepIcon from './StepIcon';
import assert from '../../utils/assert';
import { fromUndefinedable, getOrElse, isSome, map } from '../../fp/Option';
import { invokeWith, pipe } from '../../fp/function';
import type { CommonProps } from '../common';

export interface StepsProps extends CommonProps {
  /**
   * Current step. This is 1-based indexing.
   */
  current: number;
  /**
   * Set the handler to handle `click` event.
   */
  onClick?: (step: {
    id: string | number;
    status: 'complete' | 'incomplete';
    text: string;
  }) => void;
  /**
   * An array of steps to be rendered.
   */
  steps: {
    id: string | number;
    status: 'complete' | 'incomplete';
    text: string;
    clickable?: boolean;
  }[];
  /**
   * Steps variant
   */
  variant?: 'basic' | 'compact';
}

const Steps = ({
  steps,
  current,
  onClick,
  id,
  className,
  style,
  sx = {},
  variant = 'basic',
  'data-test-id': dataTestId,
}: StepsProps): ReactElement => {
  assert(
    current >= 1 && current <= steps.length,
    `[Steps] Current:${current} is not in range [1, ${steps.length}]`
  );
  const maybeOnClick = fromUndefinedable(onClick);
  const hasOnClick = isSome(maybeOnClick);

  return (
    <Wrapper
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      {steps.map((step, index) => {
        const { text, status } = step;
        const active = index === current - 1;
        const onClickStep = (): void =>
          pipe(
            maybeOnClick,
            map(invokeWith(step)),
            getOrElse(() => undefined)
          );
        const maybeClickable = fromUndefinedable(step.clickable);
        const clickable = getOrElse(() => true)(maybeClickable);

        return (
          <StepWrapper
            themeNumberOfSteps={steps.length}
            key={step.id}
            themeVariant={variant}
          >
            <StepIcon
              clickable={hasOnClick && clickable}
              onClick={onClickStep}
              active={active}
              status={status}
            />
            <StepLabel
              themeClickable={hasOnClick && clickable}
              themeActive={active}
              themeStatus={status}
              themeVariant={variant}
              onClick={onClickStep}
            >
              {text}
            </StepLabel>
            {index !== 0 && (
              <StepLine themeStatus={active === true ? 'complete' : status} />
            )}
          </StepWrapper>
        );
      })}
    </Wrapper>
  );
};

export default Steps;
