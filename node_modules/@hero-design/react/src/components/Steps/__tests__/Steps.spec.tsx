import React from 'react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Steps from '../Steps';

const steps: React.ComponentProps<typeof Steps>['steps'] = [
  {
    id: 1,
    status: 'complete',
    text: 'Request a demo',
  },
  {
    id: 2,
    status: 'complete',
    text: 'Choose a plan',
  },
  {
    id: 3,
    status: 'complete',
    text: 'Sign up',
    clickable: true,
  },
  {
    id: 4,
    status: 'incomplete',
    text: 'Implement',
    clickable: false,
  },
];

describe('rendering', () => {
  it('renders labels & icons', () => {
    const { getByText, container } = renderWithTheme(
      <Steps steps={steps} current={1} />
    );
    expect(getByText('Request a demo')).toBeVisible();
    expect(getByText('Choose a plan')).toBeVisible();
    expect(getByText('Sign up')).toBeVisible();
    expect(getByText('Implement')).toBeVisible();

    expect(container.querySelectorAll('i')[0]).toHaveClass(
      'hero-icon-checkmark'
    );
    expect(container.querySelectorAll('i')[1]).toHaveClass(
      'hero-icon-circle-ok'
    );
    expect(container.querySelectorAll('i')[2]).toHaveClass(
      'hero-icon-circle-ok'
    );
    expect(container.querySelectorAll('i')[3]).toBeUndefined();
  });

  it('renders icons only in compact variant', () => {
    const { getByText, container } = renderWithTheme(
      <Steps steps={steps} current={1} variant="compact" />
    );
    expect(getByText('Request a demo')).not.toBeVisible();
    expect(getByText('Choose a plan')).not.toBeVisible();
    expect(getByText('Sign up')).not.toBeVisible();
    expect(getByText('Implement')).not.toBeVisible();

    expect(container.querySelectorAll('i')[0]).toHaveClass(
      'hero-icon-checkmark'
    );
    expect(container.querySelectorAll('i')[1]).toHaveClass(
      'hero-icon-circle-ok'
    );
    expect(container.querySelectorAll('i')[2]).toHaveClass(
      'hero-icon-circle-ok'
    );
    expect(container.querySelectorAll('i')[3]).toBeUndefined();
  });
});

describe('interaction', () => {
  it('allows to click on step', () => {
    const onClick = jest.fn();
    const { getByText } = renderWithTheme(
      <Steps steps={steps} current={1} onClick={onClick} />
    );
    expect(onClick).not.toHaveBeenCalled();

    userEvent.click(getByText('Request a demo'));
    expect(onClick).toHaveBeenCalledTimes(1);
    expect(onClick).toHaveBeenLastCalledWith({
      id: 1,
      status: 'complete',
      text: 'Request a demo',
    });

    userEvent.click(getByText('Choose a plan'));
    expect(onClick).toHaveBeenCalledTimes(2);
    expect(onClick).toHaveBeenLastCalledWith({
      id: 2,
      status: 'complete',
      text: 'Choose a plan',
    });

    userEvent.click(getByText('Sign up'));
    expect(onClick).toHaveBeenCalledTimes(3);
    expect(onClick).toHaveBeenLastCalledWith({
      id: 3,
      status: 'complete',
      text: 'Sign up',
      clickable: true,
    });

    expect(() => userEvent.click(getByText('Implement'))).toThrowError(
      'unable to click element as it has or inherits pointer-events set to "none"'
    );
  });
});
