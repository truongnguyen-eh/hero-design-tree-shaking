import styled, { css } from 'styled-components';
import type {
  FlattenInterpolation,
  ThemeProps,
  DefaultTheme,
} from 'styled-components';

type Intent =
  | 'primary'
  | 'success'
  | 'danger'
  | 'warning'
  | 'error'
  | 'archived';

type Variant = 'basic' | 'filled' | 'outlined';

type FilledVariant =
  | 'filled-primary'
  | 'filled-success'
  | 'filled-danger'
  | 'filled-warning'
  | 'filled-error'
  | 'filled-archived';

type OutlinedVariant =
  | 'outlined-primary'
  | 'outlined-success'
  | 'outlined-danger'
  | 'outlined-warning'
  | 'outlined-error'
  | 'outlined-archived';

type ThemeVariant = 'basic' | FilledVariant | OutlinedVariant;

const BACKGROUND_INTENTS = {
  primary: 'primaryBackground',
  success: 'successBackground',
  danger: 'dangerBackground',
  warning: 'warningBackground',
  error: 'errorBackground',
  archived: 'archivedBackground',
} as const;

const HOVER_BTN_INTENTS = {
  primary: 'hoverPrimaryCloseBtn',
  success: 'hoverSuccessCloseBtn',
  danger: 'hoverDangerCloseBtn',
  warning: 'hoverWarningCloseBtn',
  error: 'hoverErrorCloseBtn',
} as const;

const ACTIVE_BTN_INTENTS = {
  primary: 'activePrimaryCloseBtn',
  success: 'activeSuccessCloseBtn',
  danger: 'activeDangerCloseBtn',
  warning: 'activeWarningCloseBtn',
  error: 'activeErrorCloseBtn',
} as const;

const genFilledStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: white;
  border-color: ${({ theme }) => theme.__hd__.tag.colors[intent]};
  background: ${({ theme }) => theme.__hd__.tag.colors[intent]};
`;

const genOutlinedStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: ${({ theme }) => theme.__hd__.tag.colors[intent]};
  border-color: ${({ theme }) => theme.__hd__.tag.colors[intent]};
  background: ${({ theme }) =>
    theme.__hd__.tag.colors[BACKGROUND_INTENTS[intent]]};
`;

const closeBtnFilledStyles = css`
  color: ${({ theme }) => theme.__hd__.tag.colors.closeBtn};
  &:hover {
    opacity: 0.4;
  }
  &:active {
    opacity: 0.7;
  }
`;

const genCloseBtnOutlinedStyles = (
  intent: 'primary' | 'danger' | 'success' | 'warning' | 'error'
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: ${({ theme }) => theme.__hd__.tag.colors[intent]};
  &:hover {
    color: ${({ theme }) => theme.__hd__.tag.colors[HOVER_BTN_INTENTS[intent]]};
  }
  &:active {
    color: ${({ theme }) =>
      theme.__hd__.tag.colors[ACTIVE_BTN_INTENTS[intent]]};
  }
`;

const CloseButton = styled.button<{ themeVariant: ThemeVariant }>`
  display: flex;
  align-items: center;
  border: none;
  background: transparent;
  margin: 0;
  padding: ${({ theme }) => theme.__hd__.tag.space.closeBtnPadding};
  font-size: ${({ theme }) => theme.__hd__.tag.fontSizes.closeBtn};

  &:hover {
    cursor: pointer;
  }

  &:focus {
    outline: none;
  }

  ${({ themeVariant, theme }) => {
    switch (themeVariant) {
      case 'basic':
      case 'outlined-archived':
        return css`
          color: ${theme.__hd__.tag.colors.basicCloseBtn};
          &:hover {
            color: ${theme.__hd__.tag.colors.hoverBasicCloseBtn};
          }
          &:active {
            color: ${theme.__hd__.tag.colors.defaultText};
          }
        `;
      case 'filled-primary':
      case 'filled-success':
      case 'filled-danger':
      case 'filled-warning':
      case 'filled-error':
      case 'filled-archived':
        return closeBtnFilledStyles;
      case 'outlined-primary':
        return genCloseBtnOutlinedStyles('primary');
      case 'outlined-success':
        return genCloseBtnOutlinedStyles('success');
      case 'outlined-danger':
        return genCloseBtnOutlinedStyles('danger');
      case 'outlined-warning':
        return genCloseBtnOutlinedStyles('warning');
      case 'outlined-error':
        return genCloseBtnOutlinedStyles('error');
    }
  }};
`;

const StyledTag = styled.span<{
  themeSize: 'small' | 'medium' | 'large';
  themeVariant: ThemeVariant;
}>`
  display: inline-flex;
  align-items: center;
  box-sizing: border-box;
  border: ${({ theme }) => theme.__hd__.tag.borderWidths.default} solid;
  border-radius: ${({ theme }) => theme.__hd__.tag.radii.default};
  font-weight: ${({ theme }) => theme.__hd__.tag.fontWeights.default};
  line-height: 1;
  margin: 0;
  padding: 0;

  ${({ themeSize, theme }) => {
    switch (themeSize) {
      case 'small':
        return css`
          font-size: ${theme.__hd__.tag.fontSizes.small};
          padding: ${theme.__hd__.tag.space.smallPadding};
        `;
      case 'medium':
        return css`
          font-size: ${theme.__hd__.tag.fontSizes.medium};
          padding: ${theme.__hd__.tag.space.mediumPadding};
        `;
      case 'large':
        return css`
          font-size: ${theme.__hd__.tag.fontSizes.large};
          padding: ${theme.__hd__.tag.space.largePadding};
        `;
    }
  }};

  ${({ themeVariant, theme }) => {
    switch (themeVariant) {
      case 'basic':
        return css`
          color: ${theme.__hd__.tag.colors.defaultText};
          border-color: ${theme.__hd__.tag.colors.defaultBorder};
          background: ${theme.__hd__.tag.colors.defaultBackground};
        `;
      case 'filled-primary':
        return genFilledStyles('primary');
      case 'filled-success':
        return genFilledStyles('success');
      case 'filled-danger':
        return genFilledStyles('danger');
      case 'filled-warning':
        return genFilledStyles('warning');
      case 'filled-error':
        return genFilledStyles('error');
      case 'filled-archived':
        return genFilledStyles('archived');
      case 'outlined-primary':
        return genOutlinedStyles('primary');
      case 'outlined-success':
        return genOutlinedStyles('success');
      case 'outlined-danger':
        return genOutlinedStyles('danger');
      case 'outlined-warning':
        return genOutlinedStyles('warning');
      case 'outlined-error':
        return genOutlinedStyles('error');
      case 'outlined-archived':
        return genOutlinedStyles('archived');
    }
  }};
`;

export { StyledTag, CloseButton };
export type { Intent, Variant, FilledVariant, OutlinedVariant, ThemeVariant };
