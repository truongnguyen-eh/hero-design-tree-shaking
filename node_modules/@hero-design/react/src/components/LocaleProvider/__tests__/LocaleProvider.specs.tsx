import React, { useState } from 'react';

import renderWithTheme from '../../../testUtils/renderWithTheme';
import Input from '../../Input';
import createFilters from '../../Table/Filters/createFilters';
import LocaleProvider from '..';
import viVN from '../../../locales/vi_VN';

type FilterTypes = {
  a?: string;
  b?: string;
  c?: string;
  d?: string;
  e?: string;
};

const { Filters, Filter } = createFilters<FilterTypes>();

const ExampleFilters = () => {
  const renderInput = ({
    value,
    onChange,
  }: {
    value?: string;
    onChange: (v?: string) => void;
  }) => <Input value={value} onChange={(e) => onChange(e.target.value)} />;
  const [filterValues, setFilterValues] = useState<FilterTypes>({});
  return (
    <Filters value={filterValues} onChange={setFilterValues}>
      <Filter icon="search-outlined" noCaret filterKey="a">
        {renderInput}
      </Filter>
      <Filter icon="search-outlined" noCaret filterKey="b">
        {renderInput}
      </Filter>
      <Filter icon="search-outlined" noCaret filterKey="c">
        {renderInput}
      </Filter>
      <Filter icon="search-outlined" noCaret filterKey="d">
        {renderInput}
      </Filter>
      <Filter icon="search-outlined" noCaret filterKey="e">
        {renderInput}
      </Filter>
    </Filters>
  );
};

describe('LocaleProvider', () => {
  it('works without provider', async () => {
    const { getByText } = renderWithTheme(<ExampleFilters />);

    expect(getByText('More')).toBeInTheDocument();
  });

  it('works with provider', async () => {
    const { getByText } = renderWithTheme(
      <LocaleProvider locale={viVN}>
        <ExampleFilters />
      </LocaleProvider>
    );
    expect(getByText('ThÃªm')).toBeInTheDocument();
  });

  it('works with fallback translations', async () => {
    const { getByText } = renderWithTheme(
      <LocaleProvider
        locale={{ lang: 'en-AU', translations: { Search: 'Search' } }}
      >
        <ExampleFilters />
      </LocaleProvider>
    );
    expect(getByText('More')).toBeInTheDocument();
  });
});
