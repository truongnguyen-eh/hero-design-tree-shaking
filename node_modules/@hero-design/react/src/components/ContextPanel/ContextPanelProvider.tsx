import React, { createContext, useContext, useMemo, useState } from 'react';

type ContextPanelContextType = {
  hasHeader: boolean;
  hasFooter: boolean;
  setHasHeader: (hasHeader: boolean) => void;
  setHasFooter: (hasFooter: boolean) => void;
};

const ContextPanelContext = createContext<ContextPanelContextType | undefined>(
  undefined
);

interface ContextPanelProviderProps {
  children: (value: ContextPanelContextType) => React.ReactNode;
}

const ContextPanelProvider = ({ children }: ContextPanelProviderProps) => {
  const [hasHeader, setHasHeader] = useState(false);
  const [hasFooter, setHasFooter] = useState(false);

  const value = useMemo(
    () => ({
      hasHeader,
      hasFooter,
      setHasHeader,

      setHasFooter,
    }),
    [hasHeader, hasFooter, setHasHeader, setHasFooter]
  );

  return (
    <ContextPanelContext.Provider value={value}>
      {children(value)}
    </ContextPanelContext.Provider>
  );
};

export const useContextPanelContext = () => {
  const context = useContext(ContextPanelContext);
  if (context === undefined) {
    throw new Error(
      'useContextPanelContext must be used within a ContextPanelProvider'
    );
  }
  return context;
};

export default ContextPanelProvider;
