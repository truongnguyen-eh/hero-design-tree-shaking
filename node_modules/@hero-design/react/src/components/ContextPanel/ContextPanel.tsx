import React from 'react';
import Portal from '../Portal';
import {
  StyledContextPanel,
  StyledContextPanelContainer,
  StyledContextPanelOverlay,
} from './StyledContextPanel';
import { getDefaultPortalContainer } from '../../utils/getDefaultPortalContainer';
import { CommonProps } from '../common';
import ContextPanelProvider from './ContextPanelProvider';
import ContextPanelHeader from './ContextPanelHeader';
import ContextPanelFooter from './ContextPanelFooter';
import ContextPanelBody from './ContextPanelBody';
import ContextPanelCloseButton from './ContextPanelCloseButton';
import { useScrollLock } from '../Modal/hooks';

export interface ContextPanelProps extends CommonProps {
  /**
   * Panel children content
   */
  children?: React.ReactNode;
  /**
   * Whether to use portal to render the panel
   */
  withPortal?: boolean;
  /**
   * Whether the panel is open
   */
  open: boolean;
  /**
   * handle when user close the panel
   */
  onClose?: () => void;
  /**
   * Whether clicking outside the panel overlap to invoke onClose
   */
  canOutsideClickClose?: boolean;
  /**
   * title of the panel
   */
  title?: string | React.ReactNode;
  /**
   * footer of the panel
   */
  footer?: string | React.ReactNode;
  /**
   * body of the panel
   */
  body?: string | React.ReactNode;
}

const ContextPanel = ({
  children,
  withPortal = false,
  open,
  className,
  id,
  style,
  sx,
  onClose,
  canOutsideClickClose = true,
  'data-test-id': dataTestId = 'context-panel',
  title,
  footer,
  body,
}: ContextPanelProps) => {
  useScrollLock(open);

  const handleClickOverlay = (e: React.MouseEvent<HTMLDivElement>) => {
    e.stopPropagation();
    if (canOutsideClickClose) {
      onClose?.();
    }
  };
  return (
    <Portal withPortal={withPortal} container={getDefaultPortalContainer()}>
      <ContextPanelProvider>
        {({ hasFooter }) =>
          open && (
            <StyledContextPanelContainer
              data-test-id={`${dataTestId}-container`}
            >
              <StyledContextPanelOverlay
                data-test-id={`${dataTestId}-overlay`}
                onClick={handleClickOverlay}
              />
              <StyledContextPanel
                themeHasFooter={hasFooter}
                themeOpen={open}
                className={className}
                id={id}
                style={style}
                sx={sx}
                data-test-id={`${dataTestId}-context-panel`}
              >
                {!!title && (
                  <ContextPanelHeader data-test-id={`${dataTestId}-header`}>
                    {title}
                    <ContextPanelCloseButton
                      data-test-id={`${dataTestId}-close-button`}
                      onClick={(e): void => {
                        e.preventDefault();
                        onClose?.();
                      }}
                    />
                  </ContextPanelHeader>
                )}
                {!!body && (
                  <ContextPanelBody data-test-id={`${dataTestId}-body`}>
                    {body}
                  </ContextPanelBody>
                )}
                {!!footer && (
                  <ContextPanelFooter data-test-id={`${dataTestId}-footer`}>
                    {footer}
                  </ContextPanelFooter>
                )}
                {children}
              </StyledContextPanel>
            </StyledContextPanelContainer>
          )
        }
      </ContextPanelProvider>
    </Portal>
  );
};

export default ContextPanel;
