import React from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../utils/hooks';

import { GroupWrapper } from './StyledCheckbox';
import Checkbox from './Checkbox';
import type { CommonProps } from '../common';

export interface Option<T extends string | number> {
  disabled?: boolean;
  text: string | ReactElement;
  value: T;
}

export interface CheckboxGroupProps<T extends string | number>
  extends CommonProps {
  /**
   * Layout to render checkboxes.
   */
  layout?: 'vertical' | 'horizontal';
  /**
   * Checkbox group name, used for form submission.
   */
  name?: string;
  /**
   * Change event handler.
   */
  onChange: (value: T[]) => void;
  /**
   * An array of checkbox options to be selected. Shape of an option:
   * {
   *   disabled?: boolean;
   *   text: string | ReactElement;
   *   value: T;
   * }
   */
  options: Option<T>[];
  /**
   * Selected value. T is a generic type.
   */
  value: T[];
}

const CheckboxGroup = <T extends string | number>({
  name,
  value,
  options,
  onChange,
  layout = 'vertical',
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: CheckboxGroupProps<T>): ReactElement => {
  return (
    <GroupWrapper
      themeLayout={layout}
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      {options.map((option) => (
        <Checkbox
          key={option.value}
          value={option.value}
          text={option.text}
          name={name}
          checked={value.includes(option.value)}
          disabled={option.disabled}
          onChange={(e): void => {
            const newValue = e.target.checked
              ? [...value, option.value]
              : value.filter((v) => v !== option.value);
            onChange(newValue);
          }}
        />
      ))}
    </GroupWrapper>
  );
};

export default CheckboxGroup;
