import React from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../utils/hooks';

import { ButtonGroupWrapper } from './StyledCheckbox';
import CheckboxButton from './CheckboxButton';
import type { CommonProps } from '../common';

export interface Option<T extends string | number> {
  disabled?: boolean;
  text: string | ReactElement;
  value: T;
}

export interface CheckboxButtonGroupProps<T extends string | number>
  extends CommonProps {
  /**
   * Checkbox group name, used for form submission.
   */
  name?: string;
  /**
   * Change event handler.
   */
  onChange: (value: T[]) => void;
  /**
   * An array of checkbox options to be selected. Shape of an option:
   * {
   *   disabled?: boolean;
   *   text: string | ReactElement;
   *   value: T;
   * }
   */
  options: Option<T>[];
  /**
   * The size of the checkbox.
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Selected value. T is a generic type.
   */
  value: T[];
}

const CheckboxButtonGroup = <T extends string | number>({
  name,
  value,
  options,
  onChange,
  size = 'medium',
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: CheckboxButtonGroupProps<T>): ReactElement => (
  <ButtonGroupWrapper
    themeSize={size}
    id={id}
    className={className}
    style={{ ...style, ...useCss(sx) }}
    data-test-id={dataTestId}
  >
    {options.map((option) => (
      <CheckboxButton
        key={option.value}
        text={option.text}
        value={option.value}
        disabled={option.disabled}
        name={name}
        checked={value.includes(option.value)}
        onChange={(e): void => {
          const newValue = e.target.checked
            ? [...value, option.value]
            : value.filter((v) => v !== option.value);
          onChange(newValue);
        }}
        size={size}
      />
    ))}
  </ButtonGroupWrapper>
);

export default CheckboxButtonGroup;
