import styled, { css } from 'styled-components';
import type {
  FlattenInterpolation,
  ThemeProps,
  DefaultTheme,
} from 'styled-components';
import type { InputHTMLAttributes } from 'react';

const StyledInput = styled.input<
  {
    themeDisabled: boolean;
  } & InputHTMLAttributes<HTMLInputElement>
>`
  appearance: none;
  position: relative;
  height: ${({ theme }) => theme.__hd__.radio.sizes.height};
  width: ${({ theme }) => theme.__hd__.radio.sizes.width};
  flex-shrink: 0;
  border-radius: ${({ theme }) => theme.__hd__.radio.radii.default};
  border: ${({ theme }) => theme.__hd__.radio.borderWidths.default} solid
    ${({ theme }) => theme.__hd__.radio.colors.defaultBorder};
  margin: 0;
  padding: 0;

  &:after {
    content: '';
    position: absolute;
    height: ${({ theme }) => theme.__hd__.radio.sizes.checkmarkHeight};
    width: ${({ theme }) => theme.__hd__.radio.sizes.checkmarkWidth};
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
    border-radius: ${({ theme }) => theme.__hd__.radio.radii.default};
  }

  &:focus {
    outline: none;
  }

  ${({ themeDisabled, theme }) => {
    switch (themeDisabled) {
      case false:
        return css`
          cursor: pointer;
          color: ${theme.__hd__.radio.colors.defaultText};
          &:hover {
            border-color: ${theme.__hd__.radio.colors.hoverBorder};
          }
          &:checked {
            border-color: ${theme.__hd__.radio.colors.activeBorder};
            &::after {
              background-color: ${theme.__hd__.radio.colors.defaultCheckmark};
            }
          }
        `;
      case true:
        return css`
          cursor: not-allowed;
          color: ${theme.__hd__.radio.colors.disabledText};
          background-color: ${theme.__hd__.radio.colors.disabledBackground};
          &:checked {
            border-color: ${theme.__hd__.radio.colors.disabledBorder};
            &::after {
              background-color: ${theme.__hd__.radio.colors.disabledCheckmark};
            }
          }
        `;
    }
  }};
`;

const StyledLabel = styled.label<{
  themeDisabled: boolean;
}>`
  font-size: ${({ theme }) => theme.__hd__.radio.fontSizes.default};
  display: flex;
  align-items: center;
  line-height: ${({ theme }) => theme.__hd__.radio.lineHeights.default};
  font-weight: ${({ theme }) => theme.__hd__.radio.fontWeights.default};
  margin: 0;
  padding: 0;

  ${({ themeDisabled, theme }) => {
    switch (themeDisabled) {
      case false:
        return css`
          cursor: pointer;
          color: ${theme.__hd__.radio.colors.defaultText};
        `;
      case true:
        return css`
          cursor: not-allowed;
          color: ${theme.__hd__.radio.colors.disabledText};
        `;
    }
  }};

  > ${StyledInput} {
    margin: ${({ theme }) => theme.__hd__.radio.space.margin};
  }
`;

const StyledText = styled.div`
  margin: 0;
  padding: 0;
`;

const StyledWrapper = styled.div<{ themeLayout: 'vertical' | 'horizontal' }>`
  margin: 0;
  padding: 0;

  ${({ themeLayout }) => {
    switch (themeLayout) {
      case 'vertical':
        return css``;
      case 'horizontal':
        return css`
          display: flex;
        `;
    }
  }};
`;

const Spacer = styled.div<{ themeLayout: 'vertical' | 'horizontal' }>`
  margin: 0;
  padding: 0;

  ${({ themeLayout, theme }) => {
    switch (themeLayout) {
      case 'vertical':
        return css`
          margin-top: ${theme.__hd__.radio.space.groupVerticalMargin};
        `;
      case 'horizontal':
        return css`
          margin-left: ${theme.__hd__.radio.space.groupHorizontalMargin};
        `;
    }
  }};
`;

const StyledRadioButton = styled.span<{
  themeSize: 'small' | 'medium' | 'large';
}>`
  display: inline-flex;
  align-items: center;
  box-sizing: border-box;
  border: ${({ theme }) => theme.__hd__.radio.borderWidths.default} solid
    ${({ theme }) => theme.__hd__.radio.colors.defaultBorder};
  border-radius: ${({ theme }) => theme.__hd__.radio.radii.button};
  line-height: 100%;
  color: ${({ theme }) => theme.__hd__.radio.colors.defaultText};
  background: transparent;
  cursor: pointer;
  font-weight: ${({ theme }) => theme.__hd__.radio.fontWeights.default};
  margin: 0;
  padding: 0;

  &:hover {
    color: ${({ theme }) => theme.__hd__.radio.colors.hoverText};
    border-color: ${({ theme }) => theme.__hd__.radio.colors.hoverBorder};
  }

  ${({ themeSize, theme }) => {
    switch (themeSize) {
      case 'small':
        return css`
          font-size: ${theme.__hd__.radio.fontSizes.buttonSmall};
          padding: ${theme.__hd__.radio.space.buttonSmallPadding};
          height: ${theme.__hd__.radio.sizes.buttonSmall};
        `;
      case 'medium':
        return css`
          font-size: ${theme.__hd__.radio.fontSizes.buttonMedium};
          padding: ${theme.__hd__.radio.space.buttonMediumPadding};
          height: ${theme.__hd__.radio.sizes.buttonMedium};
        `;
      case 'large':
        return css`
          font-size: ${theme.__hd__.radio.fontSizes.buttonLarge};
          padding: ${theme.__hd__.radio.space.buttonLargePadding};
          height: ${theme.__hd__.radio.sizes.buttonLarge};
        `;
    }
  }};
`;

type ThemeStatus = 'disabled' | 'enabled';

type AdvancedIntent = 'primary' | 'danger' | 'success' | 'warning' | 'error';

const HOVER_COLORS = {
  primary: 'hoverPrimary',
  danger: 'hoverDanger',
  success: 'hoverSuccess',
  warning: 'hoverWarning',
  error: 'hoverError',
} as const;

const getAdvancedIntentStyles = (
  intent: AdvancedIntent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  & ~ ${StyledRadioButton} {
    border-color: ${({ theme }) =>
      theme.__hd__.radio.colors[HOVER_COLORS[intent]]};
    color: ${({ theme }) => theme.__hd__.radio.colors[intent]};
  }

  &:checked ~ ${StyledRadioButton} {
    color: ${({ theme }) => theme.__hd__.radio.colors.enabledSelectedText};
    border-color: ${({ theme }) =>
      theme.__hd__.radio.colors[HOVER_COLORS[intent]]};
    background-color: ${({ theme }) => theme.__hd__.radio.colors[intent]};
  }

  &:hover ~ ${StyledRadioButton} {
    border-color: ${({ theme }) =>
      theme.__hd__.radio.colors[HOVER_COLORS[intent]]};
    background-color: ${({ theme }) => theme.__hd__.radio.colors[intent]};
    color: ${({ theme }) => theme.__hd__.radio.colors.enabledSelectedText};
  }
`;

const StyledRadioButtonInput = styled.input<{
  themeIntent: 'basic' | AdvancedIntent;
  themeStatus: ThemeStatus;
}>`
  display: none;
  margin: 0;
  padding: 0;

  ${({ themeIntent, theme }) => {
    switch (themeIntent) {
      case 'basic':
        return css`
          &:checked ~ ${StyledRadioButton} {
            color: ${theme.__hd__.radio.colors.enabledSelectedText};
            border-color: ${theme.__hd__.radio.colors.hoverBorder};
            background-color: ${theme.__hd__.radio.colors
              .buttonCheckedBackground};
            &:hover {
              color: ${theme.__hd__.radio.colors.enabledSelectedText};
            }
          }
        `;
      case 'primary':
        return getAdvancedIntentStyles('primary');
      case 'danger':
        return getAdvancedIntentStyles('danger');
      case 'success':
        return getAdvancedIntentStyles('success');
      case 'warning':
        return getAdvancedIntentStyles('warning');
      case 'error':
        return getAdvancedIntentStyles('error');
    }
  }};

  ${({ themeStatus, theme }) => {
    switch (themeStatus) {
      case 'disabled':
        return css`
          ~ ${StyledRadioButton} {
            cursor: not-allowed;
            color: ${theme.__hd__.radio.colors.disabledText};
            background-color: ${theme.__hd__.radio.colors
              .buttonDisabledBackground};
            &:hover {
              color: ${theme.__hd__.radio.colors.disabledText};
              border-color: ${theme.__hd__.radio.colors.disabledBorder};
            }
          }
          &:checked ~ ${StyledRadioButton} {
            color: ${theme.__hd__.radio.colors.disabledSelectedText};
            background-color: ${theme.__hd__.radio.colors
              .buttonDisabledCheckedBackground};
            border: none;
          }
        `;
      case 'enabled':
        return css``;
    }
  }};
`;

const StyledRadioButtonLabel = styled.label`
  display: inline-flex;
  align-items: center;
  margin: 0;
  padding: 0;
`;

const StyledRadioButtonGroupWrapper = styled.div<{
  preCheckedIndex: number;
  themeLayout: 'no-gap' | 'gap-small' | 'gap-medium' | 'gap-large';
}>`
  display: inline-flex;
  align-items: center;
  flex-wrap: wrap;
  margin: 0;
  padding: 0;

  ${({ themeLayout, theme, preCheckedIndex }) => {
    switch (themeLayout) {
      case 'no-gap':
        return css`
          > ${StyledRadioButtonLabel} > ${StyledRadioButton} {
            border-radius: 0;
          }

          > ${StyledRadioButtonLabel}:first-child > ${StyledRadioButton} {
            border-top-left-radius: ${theme.__hd__.radio.radii.button};
            border-bottom-left-radius: ${theme.__hd__.radio.radii.button};
          }

          > ${StyledRadioButtonLabel}:last-child > ${StyledRadioButton} {
            border-top-right-radius: ${theme.__hd__.radio.radii.button};
            border-bottom-right-radius: ${theme.__hd__.radio.radii.button};
          }

          > ${StyledRadioButtonLabel}:not(:first-child) > ${StyledRadioButton} {
            border-left-width: 0px;

            &:hover {
              border-left-width: ${theme.__hd__.radio.borderWidths.default};
              margin-left: -${theme.__hd__.radio.borderWidths.default};
            }
          }

          > ${StyledRadioButtonLabel}:nth-child(${preCheckedIndex + 1})
            > ${StyledRadioButton} {
            border-right-width: ${theme.__hd__.radio.borderWidths.default};
            border-right-style: solid;
            border-right-color: ${theme.__hd__.radio.colors.hoverBorder};
          }
        `;
      case 'gap-small':
        return css`
          margin: ${theme.__hd__.radio.space.buttonGroupSmallMargin};
          width: ${theme.__hd__.radio.sizes.buttonGroupSmallWidth};
          > * {
            margin: ${theme.__hd__.radio.space.buttonSmallMargin};
          }
        `;
      case 'gap-medium':
        return css`
          margin: ${theme.__hd__.radio.space.buttonGroupMediumMargin};
          width: ${theme.__hd__.radio.sizes.buttonGroupMediumWidth};
          > * {
            margin: ${theme.__hd__.radio.space.buttonMediumMargin};
          }
        `;
      case 'gap-large':
        return css`
          margin: ${theme.__hd__.radio.space.buttonGroupLargeMargin};
          width: ${theme.__hd__.radio.sizes.buttonGroupLargeWidth};
          > * {
            margin: ${theme.__hd__.radio.space.buttonLargeMargin};
          }
        `;
    }
  }};
`;

export {
  StyledInput,
  StyledLabel,
  StyledText,
  StyledWrapper,
  Spacer,
  StyledRadioButton,
  StyledRadioButtonInput,
  StyledRadioButtonLabel,
  StyledRadioButtonGroupWrapper,
};
