import React from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../utils/hooks';

import Radio from './Radio';
import { StyledWrapper, Spacer } from './StyledRadio';
import type { CommonProps } from '../common';

export interface Option<T extends string | number> {
  disabled?: boolean;
  text: string | ReactElement;
  value: T;
}

export interface RadioGroupProps<T extends string | number>
  extends CommonProps {
  /**
   * Layout to render the group.
   */
  layout?: 'vertical' | 'horizontal';
  /**
   * Radio group name, used for form submission, this MUST be unique in a page, otherwise same name radio group will share the same selection.
   */
  name?: string;
  /**
   * Change event handler receiving selected radio's value.
   */
  onChange: (value: T) => void;
  /**
   * An array of radio options to be selected. Shape of an option:
   * {
   *   disabled?: boolean;
   *   text: string | ReactElement;
   *   value: T;
   * }
   */
  options: Option<T>[];
  /**
   * Radio input value. T is a generic type.
   */
  value: T;
}

const RadioGroup = <T extends string | number>({
  name,
  value,
  layout = 'vertical',
  onChange,
  options,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: RadioGroupProps<T>): ReactElement => {
  return (
    <StyledWrapper
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
      themeLayout={layout}
    >
      {options.map((option, index) => {
        return (
          <React.Fragment key={option.value}>
            {index !== 0 && <Spacer themeLayout={layout} />}
            <Radio
              name={name}
              text={option.text}
              value={option.value}
              disabled={option.disabled}
              checked={option.value === value}
              onChange={(e): void => {
                if (e.target.checked) {
                  onChange(option.value);
                }
              }}
            />
          </React.Fragment>
        );
      })}
    </StyledWrapper>
  );
};

export default RadioGroup;
