import React from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../utils/hooks';

import RadioButton from './RadioButton';
import { StyledRadioButtonGroupWrapper } from './StyledRadio';
import type { RadioButtonProps } from './RadioButton';
import type { CommonProps } from '../common';

export interface Option<T extends string | number> {
  disabled?: boolean;
  intent?: RadioButtonProps['intent'];
  text: string | ReactElement;
  value: T;
}

export interface RadioButtonGroupProps<T extends string | number>
  extends CommonProps {
  /**
   * Layout to render radios.
   */
  layout?: 'no-gap' | 'gap';
  /**
   * Radio group name, used for form submission, this MUST be unique in a page, otherwise same name radio group will share the same selection.
   */
  name?: string;
  /**
   * Change event handler receiving selected radio's value.
   */
  onChange: (value: T) => void;
  /**
   * An array of radio options to be selected. Shape of an option:
   * {
   *   disabled?: boolean;
   *   intent?: 'basic' | 'success' | 'primary' | 'warning' | 'danger' | 'error';
   *   text: string | ReactElement;
   *   value: T;
   * }
   */
  options: Option<T>[];
  /**
   * Size of button.
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Radio input value. T is a generic type.
   */
  value?: T;
}

const GAP_LAYOUTS = {
  small: 'gap-small',
  medium: 'gap-medium',
  large: 'gap-large',
} as const;

const RadioButtonGroup = <T extends string | number>({
  layout = 'no-gap',
  name,
  value,
  onChange,
  options,
  size = 'medium',
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: RadioButtonGroupProps<T>): ReactElement => {
  const checkedOptIndex = options.findIndex(
    (option) => option.value === value && option.disabled !== true
  );
  const preCheckedIndex = checkedOptIndex - 1;

  return (
    <StyledRadioButtonGroupWrapper
      preCheckedIndex={preCheckedIndex}
      themeLayout={layout === 'no-gap' ? layout : GAP_LAYOUTS[size]}
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      {options.map((option) => {
        return (
          <RadioButton
            key={option.value}
            name={name}
            text={option.text}
            value={option.value}
            intent={option.intent}
            disabled={option.disabled}
            checked={option.value === value}
            size={size}
            onChange={(e): void => {
              if (e.target.checked === true) {
                onChange(option.value);
              }
            }}
          />
        );
      })}
    </StyledRadioButtonGroupWrapper>
  );
};

export default RadioButtonGroup;
