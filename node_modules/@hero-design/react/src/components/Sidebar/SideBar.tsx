import React, {
  useState,
  useEffect,
  useMemo,
  useCallback,
  MouseEvent,
} from 'react';

import type { ReactElement, CSSProperties } from 'react';
import type { SideBarItem } from './types';
import type { CommonProps } from '../common';

import Icon from '../Icon';
import Divider from '../Divider';
import Typography from '../Typography';
import Badge from '../Badge';
import SideBarContext from './SideBarContext';
import {
  SideBarContainer,
  NavBar,
  SideBarBackground,
  SideBarWrapper,
  ScrollWrapper,
  HeaderItemsContainer,
  ItemsContainer,
  HeaderItem,
  PrimaryItem,
  ItemLinkWraper,
  PanelWrapper,
  PrimaryItemIconWrapper,
} from './StyledSideBar';
import { useCss } from '../../utils/hooks';

export interface SideBarProps extends CommonProps {
  /**
   * List of side bar items.
   */
  items: {
    header: SideBarItem[];
    body: SideBarItem[];
    footer: SideBarItem[];
  };
  /**
   * Selected menu item ID.
   */
  selectedItemId?: string;
  /**
   * Event handler for clicking on side bar items.
   */
  onClickItem: (item: SideBarItem) => void;
}

const checkIfSidebarContainsTarget = (
  sidebarWrapperElement: HTMLElement | null,
  target: Node
) => {
  if (sidebarWrapperElement === null) {
    return undefined;
  }

  return sidebarWrapperElement.contains(target);
};

const SideBar = ({
  items,
  selectedItemId,
  onClickItem,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: SideBarProps): ReactElement => {
  const { header, body, footer } = items;
  const showHeader = header.length > 0;
  const showBody = body.length > 0;
  const showFooter = footer.length > 0;
  const flattenItems = useMemo(
    () => [...header, ...body, ...footer],
    [header, body, footer]
  );

  const [isDirty, setIsDirty] = useState<boolean>(false);
  const [showPanel, setShowPanel] = useState<boolean>(false);
  const [panelContent, setPanelContent] = useState<React.ReactNode>(null);
  const [wrapperElement, setWrapperElement] = useState<HTMLElement | null>(
    null
  );

  const sideBarContextValue = useMemo(
    () => ({
      closePanel: () => {
        setShowPanel(false);
        setIsDirty(false);
      },
    }),
    []
  );

  const hanldeClickItem = useCallback(
    (item: SideBarItem) => {
      setIsDirty(true);
      onClickItem(item);
    },
    [onClickItem]
  );

  useEffect(() => {
    const foundItem = flattenItems.find((item) => item.id === selectedItemId);
    if (foundItem?.panel !== undefined && isDirty) {
      setShowPanel(true);
      setPanelContent(foundItem.panel);
    } else {
      setShowPanel(false);
      const timer = window.setTimeout(() => setPanelContent(null), 300);
      return () => window.clearTimeout(timer);
    }
  }, [selectedItemId, flattenItems, isDirty]);

  const clickOutsideSidebar = useCallback(
    (e) => {
      const clickedInSidebar = checkIfSidebarContainsTarget(
        wrapperElement,
        e.target
      );
      if (clickedInSidebar === false) {
        setShowPanel(false);
        setIsDirty(false);
      }
    },
    [setIsDirty, setShowPanel, wrapperElement]
  );

  useEffect(() => {
    document.addEventListener('click', clickOutsideSidebar, true);
    return (): void => {
      document.removeEventListener('click', clickOutsideSidebar, true);
    };
  }, [clickOutsideSidebar]);

  const renderPrimaryItems = (
    itemList: SideBarItem[],
    additionalStyle?: CSSProperties
  ) => (
    <>
      <Divider />
      <ItemsContainer style={additionalStyle}>
        {itemList.map((item) => {
          const itemElement = (
            <PrimaryItem
              themeActive={item.id === selectedItemId}
              onClick={() => !item.disabled && hanldeClickItem(item)}
              data-test-id={`primary-item-${item.id}`}
              themeDisabled={item.disabled}
            >
              <PrimaryItemIconWrapper>
                <Icon
                  icon={item.icon}
                  size="medium"
                  sx={{ zIndex: 1 }}
                  intent={item.disabled ? 'disabled-text' : undefined}
                />
              </PrimaryItemIconWrapper>
              <Typography.Text
                tagName="span"
                fontSize={12}
                sx={{
                  color: item.disabled ? undefined : 'inherit',
                  letterSpacing: '0.03em',
                }}
                intent={item.disabled ? 'disabled' : undefined}
              >
                {item.text}
              </Typography.Text>
            </PrimaryItem>
          );

          return (
            <ItemLinkWraper
              key={item.id}
              href={item.url}
              onClick={(e: MouseEvent) => e.preventDefault()}
              {...item.dataAttrs}
            >
              {item.count !== undefined ? (
                <Badge.Count
                  key={item.id}
                  content={item.count}
                  intent="primary"
                >
                  {itemElement}
                </Badge.Count>
              ) : (
                itemElement
              )}
            </ItemLinkWraper>
          );
        })}
      </ItemsContainer>
    </>
  );

  return (
    <SideBarContainer
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      <SideBarContext.Provider value={sideBarContextValue}>
        <NavBar ref={setWrapperElement}>
          <SideBarBackground />
          <ScrollWrapper themeShowPanel={showPanel}>
            <SideBarWrapper>
              {showHeader && (
                <HeaderItemsContainer>
                  {header.map((item) => {
                    const itemElement = (
                      <HeaderItem
                        themeActive={item.id === selectedItemId}
                        onClick={() => hanldeClickItem(item)}
                        data-test-id={`header-item-${item.id}`}
                      >
                        <Icon icon={item.icon} />
                      </HeaderItem>
                    );

                    return (
                      <ItemLinkWraper
                        key={item.id}
                        href={item.url}
                        onClick={(e: MouseEvent) => e.preventDefault()}
                        {...item.dataAttrs}
                      >
                        {item.count !== undefined ? (
                          <Badge.Count
                            key={item.id}
                            content={item.count}
                            intent="primary"
                          >
                            {itemElement}
                          </Badge.Count>
                        ) : (
                          itemElement
                        )}
                      </ItemLinkWraper>
                    );
                  })}
                </HeaderItemsContainer>
              )}
              {showBody && renderPrimaryItems(body, { flex: 1 })}
              {showFooter && renderPrimaryItems(footer)}
            </SideBarWrapper>
          </ScrollWrapper>
          <PanelWrapper themeActive={showPanel}>{panelContent}</PanelWrapper>
        </NavBar>
      </SideBarContext.Provider>
    </SideBarContainer>
  );
};

export default SideBar;
