import React, {
  useMemo,
  useState,
  useEffect,
  useContext,
  useCallback,
  MouseEvent,
} from 'react';

import type { ReactElement } from 'react';
import type { CommonProps } from '../common';
import type { PanelItem } from './types';

import Box from '../Box';
import Typography from '../Typography';
import Icon from '../Icon';
import Button from '../Button';
import Badge from '../Badge';
import SideBarContext from './SideBarContext';
import {
  PanelBackground,
  PanelScroller,
  PanelContainer,
  BackButtonWrapper,
  PanelItemWrapper,
  ItemLinkWrapper,
  PanelItemsContainer,
  PanelHeaderWrapper,
  PanelSubheaderWrapper,
} from './StyledPanel';
import { useCss } from '../../utils/hooks';
import { useTranslation } from '../LocaleProvider/hooks';

export interface PanelProps extends CommonProps {
  /**
   * Panel heading.
   */
  heading: string;
  /**
   * Selected menu item ID.
   */
  selectedItemId?: string;
  /**
   * Event handler for clicking on panel items.
   */
  onClickItem: (item?: PanelItem) => void;
  /**
   * List of panel items.
   */
  items: { [key: string]: PanelItem[] };
  /*
   * Panel varirant.
   */
  variant?: 'blank' | 'menu';
  /*
   * Content to fill in panel in case of `blank` variant.
   */
  children?: React.ReactNode;
}
const Panel = ({
  heading,
  items,
  selectedItemId,
  onClickItem,
  variant = 'menu',
  children,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: PanelProps): ReactElement => {
  const sxCss = useCss(sx);

  // TODO: refactor for better performance with different data structure
  const secondaryItems = useMemo(() => Object.values(items).flat(), [items]);
  const tertiaryItems = useMemo(
    () =>
      secondaryItems
        .map((item) => (item.subItems !== undefined ? item.subItems : []))
        .flat(),
    [secondaryItems]
  );

  const [selectedSecondaryItem, setSelectedSecondaryItem] =
    useState<PanelItem>();
  const [isDirty, setIsDirty] = useState<boolean>(false);
  const [showSecondaryMenu, setShowSecondaryMenu] = useState<boolean>(true);
  const { closePanel } = useContext(SideBarContext);

  const handleClickItem = useCallback(
    async (item: PanelItem) => {
      const asyncClickItem = async () => onClickItem(item);
      await asyncClickItem();
      setIsDirty(true);
    },
    [onClickItem]
  );

  useEffect(() => {
    const foundSecItem = secondaryItems.find(
      (item) => item.id === selectedItemId
    );

    if (foundSecItem !== undefined) {
      setSelectedSecondaryItem(foundSecItem);
      if (foundSecItem.subItems !== undefined) {
        setShowSecondaryMenu(false);
      } else if (isDirty) {
        closePanel();
        setIsDirty(false);
      }
    } else {
      const foundTerItem = tertiaryItems.find(
        (item) => item.id === selectedItemId
      );
      if (foundTerItem !== undefined) {
        setShowSecondaryMenu(false);
        setSelectedSecondaryItem(
          secondaryItems.find((item) => item.subItems?.includes(foundTerItem))
        );
        if (isDirty) {
          closePanel();
          setIsDirty(false);
        }
      } else {
        setSelectedSecondaryItem(undefined);
        setShowSecondaryMenu(true);
      }
    }
  }, [
    selectedItemId,
    secondaryItems,
    tertiaryItems,
    closePanel,
    onClickItem,
    isDirty,
  ]);

  const renderPanelItem = (item: PanelItem, active: boolean) => (
    <ItemLinkWrapper
      key={item.id}
      href={item.url}
      onClick={(e: MouseEvent) => e.preventDefault()}
      {...item.dataAttrs}
    >
      <PanelItemWrapper
        onClick={() => handleClickItem(item)}
        themeActive={active}
      >
        <Typography.Text
          intent={active ? 'main' : 'body'}
          fontWeight={active ? 'semi-bold' : 'regular'}
        >
          {item.text}
        </Typography.Text>
        {item.count !== undefined && <Badge content={item.count} />}
      </PanelItemWrapper>
    </ItemLinkWrapper>
  );

  const { t } = useTranslation();

  if (variant === 'blank') {
    return (
      <>
        <PanelBackground />
        <PanelScroller>
          <PanelContainer
            id={id}
            className={className}
            style={{ ...style, ...sxCss }}
            data-test-id={dataTestId}
          >
            <Box pl="medium" pr="medium">
              <PanelHeaderWrapper>
                <Typography.Title level={5} fontWeight="bold">
                  {heading}
                </Typography.Title>
                <Button.Icon
                  icon="cancel"
                  intent="subdued-text"
                  onClick={closePanel}
                />
              </PanelHeaderWrapper>
            </Box>
            {children}
          </PanelContainer>
        </PanelScroller>
      </>
    );
  }

  return (
    <>
      <PanelBackground />
      <PanelScroller>
        <PanelContainer
          id={id}
          className={className}
          style={{ ...style, ...sxCss }}
          data-test-id={dataTestId}
        >
          <Box pl="medium" pr="medium">
            <PanelHeaderWrapper>
              <Typography.Title level={5} fontWeight="bold">
                {heading}
              </Typography.Title>
              <Button.Icon
                icon="cancel"
                intent="subdued-text"
                size="small"
                onClick={closePanel}
              />
            </PanelHeaderWrapper>
          </Box>
          <BackButtonWrapper
            themeVisibility={!showSecondaryMenu}
            onClick={() => onClickItem(undefined)}
          >
            <Icon icon="single-left-arrow" size="small" intent="primary" />
            <Typography.Text fontSize={12} fontWeight="bold" intent="primary">
              {t('Back to')} {selectedSecondaryItem?.text}
            </Typography.Text>
          </BackButtonWrapper>
          {showSecondaryMenu ? (
            Object.entries(items).map((entry) => {
              const [subHeader, secItems] = entry;
              return (
                <PanelItemsContainer key={subHeader}>
                  {subHeader !== '' && (
                    <PanelSubheaderWrapper>
                      <Typography.Text fontWeight="bold">
                        {subHeader}
                      </Typography.Text>
                    </PanelSubheaderWrapper>
                  )}
                  {secItems.map((item) => {
                    const active = item.id === selectedItemId;
                    return renderPanelItem(item, active);
                  })}
                </PanelItemsContainer>
              );
            })
          ) : (
            <PanelItemsContainer>
              {selectedSecondaryItem?.subItems?.map((item) => {
                const active = item.id === selectedItemId;
                return renderPanelItem(item, active);
              })}
            </PanelItemsContainer>
          )}
        </PanelContainer>
      </PanelScroller>
    </>
  );
};

export default Panel;
