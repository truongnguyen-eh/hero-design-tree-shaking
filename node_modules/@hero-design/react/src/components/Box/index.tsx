import React from 'react';
import type { AriaAttributes, ReactElement, ReactNode } from 'react';
import { StyledBox } from './StyledBox';
import { useCss } from '../../utils/hooks';
import type { CommonProps, SystemProperties } from '../common';

export interface BoxProps
  extends SystemProperties,
    CommonProps,
    AriaAttributes {
  /**
   * Box's children node.
   */
  children?: ReactNode;
  /**
   * Set the handler to handle `click` event.
   */
  onClick?: React.MouseEventHandler<HTMLElement>;
  /**
   * You can use the tagName prop to change the element render, just like styled-components.
   */
  tagName?: keyof JSX.IntrinsicElements;
}

const Box = ({
  bgColor,
  borderColor,
  borderRadius,
  borderStyle,
  borderWidth,
  boxShadow,
  children,
  color,
  fontSize,
  fontWeight,
  lineHeight,
  m,
  mb,
  ml,
  mr,
  mt,
  p,
  pb,
  pl,
  pr,
  pt,
  sx = {},
  className,
  id,
  style,
  'data-test-id': dataTestId,
  onClick,
  tagName = 'div',
  ...ariaProps
}: BoxProps): ReactElement => (
  <StyledBox
    themeBgColor={bgColor}
    themeBorderColor={borderColor}
    themeBorderRadius={borderRadius}
    themeBorderStyle={borderStyle}
    themeBorderWidth={borderWidth}
    themeBoxShadow={boxShadow}
    themeColor={color}
    themeFontSize={fontSize}
    themeFontWeight={fontWeight}
    themeLineHeight={lineHeight}
    themeMargin={m}
    themeMarginBottom={mb}
    themeMarginLeft={ml}
    themeMarginRight={mr}
    themeMarginTop={mt}
    themePadding={p}
    themePaddingBottom={pb}
    themePaddingLeft={pl}
    themePaddingRight={pr}
    themePaddingTop={pt}
    className={className}
    id={id}
    style={{ ...style, ...useCss(sx) }}
    data-test-id={dataTestId}
    onClick={onClick}
    as={tagName}
    {...ariaProps}
  >
    {children}
  </StyledBox>
);

export default Box;
