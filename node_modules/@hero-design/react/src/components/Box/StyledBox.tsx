import styled, { css } from 'styled-components';
import { camelize } from '../../fp/function';
import type { FontWeights } from '../../theme/global/typography';
import type { ThemeScales } from '../common';
import type { Palette, SystemPalette } from '../../theme/global/colors';

const StyledBox = styled.div<{
  themeBgColor?: ThemeScales['colors'];
  themeBorderColor?: ThemeScales['colors'];
  themeBorderRadius?: ThemeScales['radii'];
  themeBorderStyle?: ThemeScales['borderStyles'];
  themeBorderWidth?: ThemeScales['borderWidths'];
  themeBoxShadow?: ThemeScales['shadows'];
  themeColor?: ThemeScales['colors'];
  themeFontSize?: ThemeScales['fontSizes'];
  themeFontWeight?: ThemeScales['fontWeights'];
  themeLineHeight?: ThemeScales['lineHeights'];
  themeMargin?: ThemeScales['space'];
  themeMarginBottom?: ThemeScales['space'];
  themeMarginLeft?: ThemeScales['space'];
  themeMarginRight?: ThemeScales['space'];
  themeMarginTop?: ThemeScales['space'];
  themePadding?: ThemeScales['space'];
  themePaddingBottom?: ThemeScales['space'];
  themePaddingLeft?: ThemeScales['space'];
  themePaddingRight?: ThemeScales['space'];
  themePaddingTop?: ThemeScales['space'];
}>`
  margin: 0;
  padding: 0;

  ${({ themeBgColor, theme }) => {
    switch (themeBgColor) {
      case undefined:
        return css``;
      default: {
        const systemPaletteColor =
          theme.colors[camelize(themeBgColor) as keyof SystemPalette];
        const paletteColor =
          theme.colors.palette[camelize(themeBgColor) as keyof Palette];

        return css`
          background-color: ${systemPaletteColor !== undefined
            ? systemPaletteColor
            : paletteColor};
        `;
      }
    }
  }};

  ${({ themeBorderColor, theme }) => {
    switch (themeBorderColor) {
      case undefined:
        return css``;
      default: {
        const systemPaletteColor =
          theme.colors[camelize(themeBorderColor) as keyof SystemPalette];
        const paletteColor =
          theme.colors.palette[camelize(themeBorderColor) as keyof Palette];
        return css`
          border-color: ${systemPaletteColor !== undefined
            ? systemPaletteColor
            : paletteColor};
        `;
      }
    }
  }};

  ${({ themeBorderRadius, theme }) => {
    switch (themeBorderRadius) {
      case undefined:
        return css``;
      default:
        return css`
          border-radius: ${theme.radii[themeBorderRadius]}px;
        `;
    }
  }};

  ${({ themeBorderStyle }) => {
    switch (themeBorderStyle) {
      case undefined:
        return css``;
      default:
        return css`
          border-style: ${themeBorderStyle};
        `;
    }
  }};

  ${({ themeBorderWidth, theme }) => {
    switch (themeBorderWidth) {
      case undefined:
        return css``;
      default:
        return css`
          border-width: ${theme.borderWidths[themeBorderWidth]}px;
        `;
    }
  }};

  ${({ themeBoxShadow, theme }) => {
    switch (themeBoxShadow) {
      case undefined:
        return css``;
      default:
        return css`
          box-shadow: ${theme.shadows[themeBoxShadow]};
        `;
    }
  }};

  ${({ themeColor, theme }) => {
    switch (themeColor) {
      case undefined:
        return css``;
      default: {
        const systemPaletteColor =
          theme.colors[camelize(themeColor) as keyof SystemPalette];
        const paletteColor =
          theme.colors.palette[camelize(themeColor) as keyof Palette];
        return css`
          color: ${systemPaletteColor !== undefined
            ? systemPaletteColor
            : paletteColor};
        `;
      }
    }
  }};

  ${({ themeFontSize, theme }) => {
    switch (themeFontSize) {
      case undefined:
        return css``;
      default:
        return css`
          font-size: ${theme.fontSizes[themeFontSize]}px;
        `;
    }
  }};

  ${({ themeFontWeight, theme }) => {
    switch (themeFontWeight) {
      case undefined:
        return css``;
      default:
        return css`
          font-weight: ${theme.fontWeights[
            camelize(themeFontWeight) as keyof FontWeights
          ]};
        `;
    }
  }};

  ${({ themeLineHeight, theme }) => {
    switch (themeLineHeight) {
      case undefined:
        return css``;
      default:
        return css`
          line-height: ${theme.lineHeights[themeLineHeight]}px;
        `;
    }
  }};

  ${({ themeMargin, theme }) => {
    switch (themeMargin) {
      case undefined:
        return css``;
      default:
        return css`
          margin: ${theme.space[themeMargin]}px;
        `;
    }
  }};

  ${({ themeMarginBottom, theme }) => {
    switch (themeMarginBottom) {
      case undefined:
        return css``;
      default:
        return css`
          margin-bottom: ${theme.space[themeMarginBottom]}px;
        `;
    }
  }};

  ${({ themeMarginLeft, theme }) => {
    switch (themeMarginLeft) {
      case undefined:
        return css``;
      default:
        return css`
          margin-left: ${theme.space[themeMarginLeft]}px;
        `;
    }
  }};

  ${({ themeMarginRight, theme }) => {
    switch (themeMarginRight) {
      case undefined:
        return css``;
      default:
        return css`
          margin-right: ${theme.space[themeMarginRight]}px;
        `;
    }
  }};

  ${({ themeMarginTop, theme }) => {
    switch (themeMarginTop) {
      case undefined:
        return css``;
      default:
        return css`
          margin-top: ${theme.space[themeMarginTop]}px;
        `;
    }
  }};

  ${({ themePadding, theme }) => {
    switch (themePadding) {
      case undefined:
        return css``;
      default:
        return css`
          padding: ${theme.space[themePadding]}px;
        `;
    }
  }};

  ${({ themePaddingBottom, theme }) => {
    switch (themePaddingBottom) {
      case undefined:
        return css``;
      default:
        return css`
          padding-bottom: ${theme.space[themePaddingBottom]}px;
        `;
    }
  }};

  ${({ themePaddingLeft, theme }) => {
    switch (themePaddingLeft) {
      case undefined:
        return css``;
      default:
        return css`
          padding-left: ${theme.space[themePaddingLeft]}px;
        `;
    }
  }};

  ${({ themePaddingRight, theme }) => {
    switch (themePaddingRight) {
      case undefined:
        return css``;
      default:
        return css`
          padding-right: ${theme.space[themePaddingRight]}px;
        `;
    }
  }};

  ${({ themePaddingTop, theme }) => {
    switch (themePaddingTop) {
      case undefined:
        return css``;
      default:
        return css`
          padding-top: ${theme.space[themePaddingTop]}px;
        `;
    }
  }};
`;

export { StyledBox };
