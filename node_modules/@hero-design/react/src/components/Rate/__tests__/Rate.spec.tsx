import React from 'react';
import { fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { act } from 'react-dom/test-utils';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Rate from '../Rate';

describe('rendering', () => {
  it('renders rate', () => {
    const { getAllByTestId } = renderWithTheme(
      <Rate
        name="rating"
        value={1}
        onChange={jest.fn()}
        options={[{ value: 1 }, { value: 2 }, { value: 3 }]}
      />
    );
    expect(getAllByTestId('active-rate-icon')).toHaveLength(1);
    expect(getAllByTestId('inactive-rate-icon')).toHaveLength(2);
    expect(getAllByTestId('active-rate-icon')[0]).toBeVisible();
    expect(getAllByTestId('inactive-rate-icon')[0]).toBeVisible();
    expect(getAllByTestId('inactive-rate-icon')[1]).toBeVisible();
  });

  it('allows to customise value of rate icons', () => {
    const { getAllByTestId } = renderWithTheme(
      <Rate
        name="rating"
        value="bad"
        onChange={jest.fn()}
        options={[{ value: 'bad' }, { value: 'normal' }, { value: 'good' }]}
      />
    );
    expect(getAllByTestId('active-rate-icon')).toHaveLength(1);
    expect(getAllByTestId('inactive-rate-icon')).toHaveLength(2);
    expect(getAllByTestId('active-rate-icon')[0]).toBeVisible();
    expect(getAllByTestId('inactive-rate-icon')[0]).toBeVisible();
    expect(getAllByTestId('inactive-rate-icon')[1]).toBeVisible();
  });
});

describe('interaction', () => {
  it('triggers onChange when clicking on a rating', () => {
    const onChange = jest.fn();
    const { getAllByTestId } = renderWithTheme(
      <Rate
        name="rating"
        value={1}
        onChange={onChange}
        options={[{ value: 1 }, { value: 2 }, { value: 3 }]}
      />
    );
    fireEvent.click(getAllByTestId('inactive-rate-icon')[0] as HTMLElement);
    expect(onChange).toHaveBeenCalledTimes(1);
    expect(onChange).toHaveBeenCalledWith(2);
  });

  it('onChange is not triggered when clicking on a rating if the component is disabled', () => {
    const onChange = jest.fn();
    const { getAllByTestId } = renderWithTheme(
      <Rate
        name="rating"
        value={1}
        disabled
        onChange={onChange}
        options={[{ value: 1 }, { value: 2 }, { value: 3 }]}
      />
    );
    fireEvent.click(getAllByTestId('inactive-rate-icon')[0] as HTMLElement);
    expect(onChange).toHaveBeenCalledTimes(0);
  });

  it('shows tooltipContent when tooltipContent is passed and Rate is being hovered', async () => {
    const options = [
      { value: 1, tooltipContent: <strong>Bad</strong> },
      { value: 2, tooltipContent: <strong>Normal</strong> },
      { value: 3, tooltipContent: <strong>Good</strong> },
    ];
    const { getByTestId, getAllByTestId, getByText } = renderWithTheme(
      <Rate
        name="tooltipped-rating"
        value={3}
        onChange={jest.fn()}
        options={options}
        data-test-id="example-rate"
      />
    );

    await act(async () => {
      userEvent.hover(getAllByTestId('active-rate-icon')[0]);
    });
    expect(getByText('Bad')).toBeInTheDocument();

    await act(async () => {
      userEvent.hover(getAllByTestId('inactive-rate-icon')[0]);
    });
    expect(getByText('Normal')).toBeInTheDocument();

    await act(async () => {
      userEvent.hover(getByTestId('inactive-rate-icon'));
    });
    expect(getByText('Good')).toBeInTheDocument();
  });
});
