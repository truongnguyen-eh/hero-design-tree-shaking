import React, { useState } from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../utils/hooks';

import RateIcon from './RateIcon';
import Tooltip from '../Tooltip';
import { RateWrapper } from './StyledRate';
import type { CommonProps } from '../common';

export interface RateOption<T extends string | number> {
  value: T;
  /** Additional tooltip rendered on top of the option */
  tooltipContent?: string | ReactElement;
}

export interface RateGroupProps<T extends string | number> extends CommonProps {
  /**
   * Whether the rate is disabled.
   */
  disabled?: boolean;
  /**
   * Rate name, used for form submission, this MUST be unique in a page, otherwise same name rate will share the same selection.
   */
  name?: string;
  /**
   * Change event handler receiving selected rate's value.
   */
  onChange?: (value: T) => void;
  /**
   * An array of rate options to be selected. Shape of an option:
   * {
   *   value: T;
   *   tooltipContent?: string | ReactElement;
   * }
   */
  options: RateOption<T>[];
  /**
   * Whether the rate is readonly.
   */
  readonly?: boolean;
  /**
   * Rate size.
   */
  size?: 'medium' | 'large';
  /**
   * Rate input value.
   */
  value?: T;
}

const getThemeStatus = (disabled: boolean, readonly: boolean) => {
  if (disabled) {
    return 'disabled';
  }
  if (readonly) {
    return 'readonly';
  }
  return 'normal';
};

const RateGroup = <T extends string | number>({
  disabled = false,
  readonly = false,
  name,
  options,
  onChange,
  value,
  size = 'medium',
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: RateGroupProps<T>): ReactElement => {
  const [hoverValue, setHoverValue] = useState<T | null>(null);
  const hasTooltip = options.some(({ tooltipContent }) => tooltipContent);
  return (
    <RateWrapper
      themeLayout={size}
      themeStatus={getThemeStatus(disabled, readonly)}
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      {options.map((option, index) => {
        const currentIndex = options.findIndex(
          (opt) => opt.value === (hoverValue ?? value)
        );
        const SingleRate = (
          <RateIcon
            key={option.value}
            name={name}
            value={option.value}
            size={size}
            checked={option.value === value}
            active={index <= currentIndex}
            disabled={disabled || readonly}
            setHoverValue={setHoverValue}
            onChange={(e) => {
              if (e.target.checked && onChange !== undefined) {
                onChange(option.value);
              }
            }}
          />
        );
        return hasTooltip ? (
          <Tooltip
            key={`tooltip-wrapper-${option.value}`}
            visible={!!option.tooltipContent}
            content={option.tooltipContent ?? ''}
            target={SingleRate}
            data-test-id={`tooltip-wrapper-${option.value}`}
          />
        ) : (
          SingleRate
        );
      })}
    </RateWrapper>
  );
};

export default RateGroup;
