import React, { useCallback, useEffect, useState } from 'react';
import { useFloating, offset, flip, autoUpdate } from '@floating-ui/react-dom';
import { useTheme } from 'styled-components';
import type { ReactElement, ReactNode } from 'react';
import type { Placement } from '@floating-ui/react-dom';
import { useCss, useResizeObserver } from '../../utils/hooks';

import {
  DropdownWrapper,
  DropdownPopper,
  ContentWrapper,
} from './StyledDropdown';
import assert from '../../utils/assert';
import type { CommonProps } from '../common';

export interface DropdownProps extends CommonProps {
  /**
   * Content of the dropdown, usually a menu.
   */
  content: ReactNode;
  /**
   * Whether the dropdown takes up the entire line.
   */
  display?: 'inline-block' | 'block';
  /**
   * Whether to keep dropdown content mounted when dropdown is closed.
   */
  keepContentMounted?: boolean;
  /**
   * Opening callback.
   */
  onOpen?: () => void;
  /**
   * Closing callback.
   */
  onClose: () => void;
  /**
   * Whether the dropdown is open.
   */
  open: boolean;
  /**
   * Placement of dropdown content to the target.
   */
  placement?: 'bottom-left' | 'bottom-right';
  /**
   * Target element that dropdown menu is relative to.
   */
  target: ReactElement;
}

const PLACEMENT_MAP: {
  'bottom-left': 'bottom-start';
  'bottom-right': 'bottom-end';
} = {
  'bottom-left': 'bottom-start',
  'bottom-right': 'bottom-end',
};

const DISPLAY_PROPERTIES = ['inline-block', 'block'];

const FALLBACK_PLACEMENT_MAP: {
  'bottom-left': Placement[];
  'bottom-right': Placement[];
} = {
  'bottom-left': ['bottom-end', 'top-start', 'top-end'],
  'bottom-right': ['bottom-start', 'top-end', 'top-start'],
};

const checkIfDropdownContainTarget = (
  dropdownWrapperElement: HTMLDivElement | null,
  target: Node
): boolean | undefined => {
  if (dropdownWrapperElement === null) {
    return undefined;
  }

  return dropdownWrapperElement.contains(target);
};

const Dropdown = ({
  open,
  content,
  target,
  keepContentMounted = false,
  placement = 'bottom-left',
  display = 'inline-block',
  onOpen,
  onClose,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: DropdownProps): ReactElement => {
  assert(
    DISPLAY_PROPERTIES.includes(display),
    `[Dropdown] display:${display} isn't among the supported values (block, inline-block)`
  );

  const [wrapperElement, setWrapperElement] = useState<HTMLDivElement | null>(
    null
  );
  const [dropdownElement, setDropdownElement] = useState<HTMLDivElement | null>(
    null
  );
  const [dropDownMinWidth, setDropdownMinWidth] = useState<number>();
  const theme = useTheme();

  const { floatingStyles, update } = useFloating({
    elements: { reference: wrapperElement, floating: dropdownElement },
    strategy: 'fixed',
    placement: PLACEMENT_MAP[placement],
    transform: false,
    middleware: [
      offset(theme.__hd__.dropdown.space.margin),
      flip({ fallbackPlacements: FALLBACK_PLACEMENT_MAP[placement] }),
    ],
    whileElementsMounted: autoUpdate,
  });

  const clickOutside = useCallback(
    (e) => {
      const clickInWrapper = checkIfDropdownContainTarget(
        wrapperElement,
        e.target
      );

      if (clickInWrapper === false) {
        onClose();
      }
    },
    [onClose, wrapperElement]
  );

  const wrapperResizeCallback = useCallback(
    ({ width }) => {
      setDropdownMinWidth(width);
    },
    [setDropdownMinWidth, open]
  );

  useEffect(() => {
    if (open === true) {
      onOpen?.();
      update();
    }
  }, [open, update]);

  useEffect(() => {
    if (open === true) {
      document.addEventListener('click', clickOutside, true);
    }

    return (): void => {
      document.removeEventListener('click', clickOutside, true);
    };
  }, [open, clickOutside]);

  useResizeObserver(wrapperResizeCallback, wrapperElement);

  const css = useCss(sx);

  return (
    <DropdownWrapper ref={setWrapperElement} themeDisplay={display}>
      {target}
      {(open === true || keepContentMounted === true) && (
        <DropdownPopper
          ref={setDropdownElement}
          style={floatingStyles}
          open={open}
        >
          <ContentWrapper
            style={{ minWidth: dropDownMinWidth, ...style, ...css }}
            id={id}
            className={className}
            data-test-id={dataTestId}
          >
            {content}
          </ContentWrapper>
        </DropdownPopper>
      )}
    </DropdownWrapper>
  );
};

export default Dropdown;
