import React from 'react';
import { fireEvent, waitFor, screen } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import type { ReactElement } from 'react';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Dropdown, { type DropdownProps } from '..';
import Menu from '../../Menu';
import Button from '../../Button';

const DropdownButton = (props: Partial<DropdownProps>): ReactElement => {
  const [open, setOpen] = React.useState<boolean>(false);
  const content = (
    <Menu>
      <Menu.Item text="Item 1" />
      <Menu.Item text="Item 2" disabled />
    </Menu>
  );
  return (
    <Dropdown
      open={open}
      content={content}
      target={<Button text="Click me!" onClick={(): void => setOpen(!open)} />}
      onClose={(): void => setOpen(false)}
      {...props}
    />
  );
};

describe('rendering', () => {
  it('hide dropdown content at first', async () => {
    const { queryByText } = renderWithTheme(<DropdownButton />);

    await waitFor(() => {
      expect(queryByText('Click me!')).toBeInTheDocument();
      expect(queryByText('Item 1')).not.toBeInTheDocument();
      expect(queryByText('Item 2')).not.toBeInTheDocument();
    });
  });
});

describe('interaction', () => {
  it('allows to toggle dropdown content', async () => {
    const { queryByText, getByText } = renderWithTheme(<DropdownButton />);

    expect(queryByText('Item 1')).not.toBeInTheDocument();
    expect(queryByText('Item 2')).not.toBeInTheDocument();

    await act(async () => {
      fireEvent.click(getByText('Click me!'));
    });

    expect(queryByText('Item 1')).toBeInTheDocument();
    expect(queryByText('Item 2')).toBeInTheDocument();

    await act(async () => {
      fireEvent.click(getByText('Click me!'));
    });

    expect(queryByText('Item 1')).not.toBeInTheDocument();
    expect(queryByText('Item 2')).not.toBeInTheDocument();
  });

  it('triggers onOpen when dropdown content is opened', async () => {
    const props = {
      onOpen: jest.fn(),
    };

    renderWithTheme(<DropdownButton {...props} />);

    // Open dropdown
    fireEvent.click(screen.getByText('Click me!'));
    expect(await screen.findByText('Item 1')).toBeInTheDocument();
    expect(props.onOpen).toHaveBeenCalledTimes(1);

    // Close dropdown
    fireEvent.click(screen.getByText('Click me!'));
    expect(screen.queryByText('Item 1')).not.toBeInTheDocument();
    expect(props.onOpen).toHaveBeenCalledTimes(1);
  });
});
