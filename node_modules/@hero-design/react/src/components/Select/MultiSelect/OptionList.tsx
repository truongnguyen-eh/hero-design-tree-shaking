import React, { useRef, useCallback } from 'react';
import type { UseComboboxReturnValue } from 'downshift';
import type { CSSProperties } from 'react';
import {
  MenuWrapper,
  CategoryWrapper,
  HelpTextWrapper,
  CheckmarkWrapper,
} from '../StyledSelect';
import { checkAtBottom, getAccumulatedIndex } from '../utils';
import Divider from '../../Divider';
import Menu from '../../Menu';
import Typography from '../../Typography';
import Icon from '../../Icon';
import type { MultiBaseOption, GroupedMultiOption } from '../types';
import type { MultiSelectProps } from '.';

type OptionListComponentProps<
  V extends string | number,
  T extends MultiBaseOption<V>
> = {
  categories: GroupedMultiOption<V, T>[];
  hasResults: boolean;
  newOption: MultiBaseOption<V>;
  style: CSSProperties;
} & Pick<
  UseComboboxReturnValue<MultiBaseOption<V>>,
  'getMenuProps' | 'getItemProps' | 'highlightedIndex'
> &
  Pick<
    MultiSelectProps<V, T>,
    | 'optionRenderer'
    | 'loading'
    | 'onScrollListToBottom'
    | 'onCreateNewOption'
    | 'noResults'
    | 'value'
    | 'query'
  >;

const OptionList = <V extends string | number, T extends MultiBaseOption<V>>({
  categories,
  hasResults,
  newOption,
  value,
  query,
  getItemProps,
  getMenuProps,
  highlightedIndex,
  onScrollListToBottom,
  onCreateNewOption,
  loading,
  noResults,
  optionRenderer,
  style,
}: OptionListComponentProps<V, T>) => {
  const menuRef = useRef<HTMLDivElement | null>(null);

  const onScrollToBottom = useCallback((): void => {
    const isAtBottom = checkAtBottom(menuRef.current);
    if (
      isAtBottom === true &&
      loading !== true &&
      onScrollListToBottom !== undefined
    ) {
      onScrollListToBottom();
    }
  }, [loading, onScrollListToBottom]);

  return (
    <MenuWrapper
      {...getMenuProps({ ref: menuRef })}
      onScroll={onScrollToBottom}
      style={style}
    >
      <Menu>
        {categories.map((opt, catIndex) => {
          const accumulatedIndex = getAccumulatedIndex(categories, catIndex);
          return (
            <React.Fragment key={opt.category}>
              {opt.category !== '' && (
                <CategoryWrapper>
                  <Typography.Text
                    tagName="span"
                    fontSize={12}
                    fontWeight="semi-bold"
                    intent="subdued"
                  >
                    {opt.category}
                  </Typography.Text>
                </CategoryWrapper>
              )}
              {opt.options.map((item, index) => {
                const actualIndex = accumulatedIndex + index;
                const isActiveItem = value?.includes(item.value) ?? false;
                const helpTextElement = (
                  <HelpTextWrapper>
                    {item.helpText !== undefined && (
                      <Typography.Text
                        tagName="span"
                        intent={isActiveItem ? 'main' : 'subdued'}
                      >
                        {item.helpText}
                      </Typography.Text>
                    )}
                    <CheckmarkWrapper shown={isActiveItem}>
                      <Icon
                        intent={
                          item.disabled === true ? 'subdued-text' : 'primary'
                        }
                        icon="checkmark"
                      />
                    </CheckmarkWrapper>
                  </HelpTextWrapper>
                );

                return (
                  <Menu.Item
                    key={item.value}
                    text={
                      optionRenderer !== undefined
                        ? optionRenderer({ option: item, index })
                        : item.text
                    }
                    focused={actualIndex === highlightedIndex}
                    active={isActiveItem}
                    textElement={helpTextElement}
                    {...getItemProps({
                      item,
                      index: actualIndex,
                    })}
                    disabled={item.disabled}
                  />
                );
              })}
              {catIndex < categories.length - 1 && <Divider />}
            </React.Fragment>
          );
        })}
        {hasResults === false &&
          loading !== true &&
          onCreateNewOption !== undefined &&
          query !== undefined && (
            <Menu.Item
              icon="add"
              text={query}
              focused={highlightedIndex === 0}
              {...getItemProps({
                item: newOption,
                index: 0,
              })}
            />
          )}
      </Menu>
      {hasResults === false && onCreateNewOption === undefined && noResults}
    </MenuWrapper>
  );
};

export default OptionList;
