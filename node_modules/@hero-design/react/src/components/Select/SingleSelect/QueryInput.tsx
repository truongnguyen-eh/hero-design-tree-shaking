import React, { useRef } from 'react';

import type { UseComboboxReturnValue } from 'downshift';
import type { ChangeEvent } from 'react';
import { InputContainer, SelectedItemText } from './Styled';
import { getThemeState } from '../../Input/utils';
import Affix from '../../Input/Affix';
import StyledInput, { InputWrapper } from '../../Input/StyledInput';
import SuffixIcon from '../SuffixIcon';
import { useHover } from '../../../utils/hooks';
import type { BaseOption } from '../types';
import type { SelectProps } from '.';

type QueryInputComponentProps<
  V extends string | number,
  T extends BaseOption<V>
> = {
  selectedItem: T | undefined;
} & Pick<UseComboboxReturnValue<T>, 'getInputProps' | 'isOpen'> &
  Pick<
    SelectProps<V, T>,
    | 'aria-labelledby'
    | 'selectedOptionRenderer'
    | 'id'
    | 'autoComplete'
    | 'clearable'
    | 'query'
    | 'onQueryChange'
    | 'value'
    | 'onChange'
    | 'disabled'
    | 'prefix'
    | 'loading'
    | 'invalid'
    | 'placeholder'
    | 'size'
    | 'onFocus'
    | 'onBlur'
    | 'onKeyDown'
    | 'onKeyUp'
    | 'inputRef'
  >;

const getOptionText = <V extends string | number, T extends BaseOption<V>>({
  option,
}: {
  option: T;
}) => option.text;

const QueryInput = <V extends string | number, T extends BaseOption<V>>({
  selectedItem,
  getInputProps,
  isOpen,
  selectedOptionRenderer = getOptionText,
  id,
  autoComplete,
  clearable,
  value,
  onChange,
  query,
  onQueryChange,
  disabled,
  prefix,
  loading,
  invalid,
  placeholder,
  size = 'medium',
  onFocus,
  onBlur,
  onKeyDown,
  onKeyUp,
  inputRef,
  'aria-labelledby': ariaLabelledBy,
}: QueryInputComponentProps<V, T>) => {
  const inputWrapperRef = useRef<HTMLDivElement>(null);
  const isHoveringInput = useHover(inputWrapperRef);

  const readonly = onQueryChange === undefined;
  const removeShown =
    clearable === true && value !== undefined && isHoveringInput;
  const selectedItemText =
    selectedItem !== undefined
      ? selectedOptionRenderer({ option: selectedItem })
      : '';
  const isEditing = query !== undefined && query.length > 0;

  const inputProps = getInputProps({
    onChange: (e: ChangeEvent<HTMLInputElement>): void => {
      onQueryChange?.(e.target.value);
    },
    onBlur,
    onFocus,
    onKeyDown,
    onKeyUp,
    ref: inputRef,
  });

  return (
    <InputWrapper
      themeSize={size}
      themeState={getThemeState({ disabled, invalid })}
      ref={inputWrapperRef}
      data-test-id="query-input"
    >
      <Affix affix={prefix} themeSize={size} />
      <InputContainer themePaddingLeft={prefix === undefined ? size : 'none'}>
        <StyledInput
          {...inputProps}
          value={query ?? ''}
          disabled={disabled}
          readOnly={readonly}
          autoComplete={autoComplete}
          id={id}
          aria-labelledby={ariaLabelledBy}
          placeholder={selectedItemText === '' ? placeholder : ''}
          themePaddingLeft="none"
          themePaddingRight="none"
        />
        <SelectedItemText
          themeState={disabled !== true ? 'enabled' : 'disabled'}
          data-test-id="selected-item-text"
        >
          {isEditing ? '' : selectedItemText}
        </SelectedItemText>
      </InputContainer>
      <Affix
        affix={
          <SuffixIcon
            loading={loading}
            open={isOpen}
            onChange={onChange}
            removeShown={removeShown}
          />
        }
        themeSize={size}
        themeMarginLeft="auto"
      />
    </InputWrapper>
  );
};

export default QueryInput;
