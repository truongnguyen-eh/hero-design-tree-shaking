import React, { useCallback, useMemo } from 'react';
import { StyledHiddenInput } from './Styled';
import { flat, map } from '../../../fp/Array';
import { mapOptions } from '../utils';
import { pipe } from '../../../fp/function';
import type { SelectProps } from '.';
import type { BaseOption } from '../types';

const HiddenInput = <V extends string | number, T extends BaseOption<V>>({
  options,
  value,
  onChange,
  onQueryChange,
  name,
}: Pick<
  SelectProps<V, T>,
  'options' | 'value' | 'onChange' | 'onQueryChange' | 'name'
>) => {
  const flatOptions = useMemo(
    () =>
      pipe(
        options,
        mapOptions,
        map((opt) => opt.options),
        flat
      ),
    [options]
  );
  const onChangeInputValue = useCallback(
    (e) => {
      const foundItem = flatOptions.find(
        (item) => item.value === e.target.value
      );
      if (foundItem !== undefined) {
        onChange(foundItem.value);
        onQueryChange?.(undefined);
      }
    },
    [flatOptions, onChange, onQueryChange]
  );

  return (
    <StyledHiddenInput
      name={name}
      value={value === undefined ? '' : value}
      onChange={onChangeInputValue}
      tabIndex={-1}
    />
  );
};

export default HiddenInput;
