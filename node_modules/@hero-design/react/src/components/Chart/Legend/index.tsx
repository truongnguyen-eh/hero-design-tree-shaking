import React from 'react';
import {
  StyledLegendCircle,
  StyledLegendContainer,
  StyledLegendCheckBox,
} from './StyledLegend';
import Typography from '../../Typography';
import { CheckboxProps } from '../../Checkbox/Checkbox';

type LegendVariant = 'circle' | 'checkbox';
export interface LegendProps {
  /**
   * Color of legend circle.
   */
  color: string;
  /**
   * Legend title.
   */
  title: string;
  /**
   * Variant of legend. Two type is available: circle and checkbox.
   */
  variant?: LegendVariant;
  /**
   * Checkbox checked props.
   */
  checked?: CheckboxProps['checked'];
  /**
   * Checkbox onChange props.
   */
  onCheckboxChange?: CheckboxProps['onChange'];
  /**
   * Checkbox value props.
   */
  checkboxValue?: CheckboxProps['value'];
  /**
   * Data test id.
   */
  dataTestId?: string;
}

const Legend = ({
  color,
  title,
  variant = 'circle',
  onCheckboxChange,
  checked,
  checkboxValue,
  dataTestId = 'legend',
}: LegendProps) => {
  const legendPrefixMapping: Record<LegendVariant, React.ReactNode> = {
    circle: (
      <StyledLegendCircle
        data-test-id={`${dataTestId}-prefix-${checkboxValue}-circle`}
        themeColor={color}
      />
    ),
    checkbox: (
      <StyledLegendCheckBox
        data-test-id={`${dataTestId}-prefix-${checkboxValue}-checkbox`}
        value={checkboxValue || ''}
        text=""
        checked={checked}
        onChange={onCheckboxChange}
        themeColor={color}
      />
    ),
  };
  return (
    <StyledLegendContainer data-test-id={`${dataTestId}-${checkboxValue}`}>
      {legendPrefixMapping[variant]}
      <Typography.Text intent="subdued" fontSize={12} fontWeight="light">
        {title}
      </Typography.Text>
    </StyledLegendContainer>
  );
};

export default Legend;
