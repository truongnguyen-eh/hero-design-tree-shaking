import React, { useMemo } from 'react';
import Legend from '.';
import Button from '../../Button';
import Tooltip from '../../Tooltip';
import { BaseLegendConfig } from '../type';
import { CommonProps } from '../../common';
import { StyledLegendBox } from './StyledLegend';
import { useTranslation } from '../../LocaleProvider/hooks';

interface LegendCheckboxGroupProps<T> extends BaseLegendConfig, CommonProps {
  value?: string[];
  onChange?: (value: string[]) => void;
  getValue: (value: T) => string;
  getDisplayText: (value: T) => string;
  getColor: (value: T) => string;
  data: T[];
}

const LegendCheckboxGroup = <T,>(props: LegendCheckboxGroupProps<T>) => {
  const {
    value,
    onChange,
    getValue,
    getDisplayText,
    data,
    getColor,
    viewMoreText,
    maxLegend = 4,
    'data-test-id': dataTestId,
    sx,
    className,
    id,
    viewMoreDirection = 'horizontal',
  } = props;

  const { t } = useTranslation();

  const dataByValue = useMemo(
    () =>
      data?.reduce((acc: { [key: string]: T }, item) => {
        acc[getValue(item)] = item;
        return acc;
      }, {}),
    [data, getValue]
  );

  const handleCheckboxChange = (checkboxValue: string, checked: boolean) => {
    if (checked) {
      onChange?.(
        [...(value || []), checkboxValue].filter(
          (item) => !!dataByValue?.[item]
        )
      );
    } else {
      onChange?.(
        (value || []).filter(
          (item) => item !== checkboxValue && !!dataByValue?.[item]
        )
      );
    }
  };

  const selectedLegendByName = useMemo(
    () =>
      value?.reduce((acc: { [key: string]: boolean }, legend) => {
        acc[legend] = true;
        return acc;
      }, {}),
    [value]
  );
  const slicedData = useMemo(() => data.slice(0, maxLegend), [maxLegend, data]);

  const restData = useMemo(
    () => data.slice(maxLegend, data.length),
    [maxLegend, data]
  );

  const renderCheckboxItem = (item: T) => {
    const checkboxValue = getValue(item);
    const checked = selectedLegendByName?.[checkboxValue];
    const displayText = getDisplayText(item);
    return (
      <Legend
        key={checkboxValue}
        variant="checkbox"
        title={displayText}
        color={getColor?.(item)}
        checkboxValue={checkboxValue}
        checked={checked}
        onCheckboxChange={() => handleCheckboxChange(checkboxValue, !checked)}
        dataTestId={dataTestId || undefined}
      />
    );
  };
  return (
    <StyledLegendBox
      data-test-id={dataTestId}
      className={className}
      sx={sx}
      id={id}
    >
      {slicedData.map(renderCheckboxItem)}
      {restData?.length > 0 && (
        <Tooltip
          variant="light"
          target={
            <Button
              text={viewMoreText || t('More')}
              variant="text"
              intent="primary"
              rightIcon="arrow-down"
            />
          }
          content={
            <StyledLegendBox
              data-test-id="legend-view-more-wrapper"
              themeDirection={viewMoreDirection}
            >
              {restData?.map(renderCheckboxItem)}
            </StyledLegendBox>
          }
          interactive
          placement="bottom"
          data-test-id="legend-view-more-text"
        />
      )}
    </StyledLegendBox>
  );
};

export default LegendCheckboxGroup;
