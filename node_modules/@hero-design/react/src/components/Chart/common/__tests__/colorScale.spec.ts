import renderHookWithTheme from '../../../../testUtils/renderHookWithTheme';
import { ChartColor, chartColors } from '../../constants';
import {
  COLOR_MESSAGE_ERROR,
  getColorFromTheme,
  useColorScale,
} from '../colorScale';
import theme from '../../../../theme';

describe('colorScale', () => {
  it('return default color', () => {
    const labels = ['1', '2', '3'];
    const { result } = renderHookWithTheme(() => useColorScale(labels));

    const colors = labels.map((label) => result.current(label));

    const colorsFromChartTheme = chartColors
      .slice(0, labels.length)
      .map((c) => getColorFromTheme(c, theme));

    expect(colors).toStrictEqual(colorsFromChartTheme);
  });

  it('render all custom colors', () => {
    const customColors: Array<{
      label: string;
      color: ChartColor;
    }> = [
      {
        label: '1',
        color: 'blueDark30',
      },
      {
        label: '2',
        color: 'blueLight30',
      },
      {
        label: '3',
        color: 'dodgerBlueDark30',
      },
    ];

    const labels = customColors.map(({ label }) => label);
    const { result } = renderHookWithTheme(() =>
      useColorScale(labels, customColors)
    );

    const colors = customColors.map(({ label }) => result.current(label));

    const customColorChartTheme = customColors.map(({ color }) =>
      getColorFromTheme(color, theme)
    );

    expect(colors).toStrictEqual(customColorChartTheme);
  });

  it('should throw error if colors length is not greater than label length', () => {
    const customColors: Array<{
      label: string;
      color: ChartColor;
    }> = [
      {
        label: '1',
        color: 'blueDark30',
      },
    ];

    const { result } = renderHookWithTheme(() =>
      useColorScale(['1', '2'], customColors)
    );

    expect(result.error?.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
  });

  it('should throw error if custom color is not contain enough label', () => {
    const customColors: Array<{
      label: string;
      color: ChartColor;
    }> = [
      {
        label: '1',
        color: 'blueDark30',
      },
      {
        label: '3',
        color: 'dodgerBlueLight30',
      },
    ];

    const { result } = renderHookWithTheme(() =>
      useColorScale(['1', '2'], customColors)
    );

    expect(result.error?.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
  });
});
