import * as d3 from 'd3';
import { useMemo } from 'react';
import { Series } from '../type';

interface UseSeriesProps<D> {
  legends: Array<string>;
  maxValue: number;
  minDisplayPercentage: number;
  labels: Array<string>;
  data: Array<Series<Array<D>>>;
}

const useSeries = <D,>({
  legends,
  maxValue,
  minDisplayPercentage,
  labels,
  data,
}: UseSeriesProps<D>) => {
  const stackSeries = useMemo(
    () =>
      d3
        .stack<{
          label: string;
          data: Record<string, string | number>;
        }>()
        .keys(legends)
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetNone)
        .value((d, key) =>
          !d.data[key]
            ? 0
            : Math.max(Number(d.data[key]) / maxValue, minDisplayPercentage) *
              maxValue
        ),
    [legends, maxValue, minDisplayPercentage]
  );

  return useMemo(
    () =>
      stackSeries(
        labels.map((label, index) => {
          const stackedSeries = data.reduce((prev, next) => {
            return {
              ...prev,
              [next.label]: next.data[index],
            };
          }, {});
          return {
            ...stackedSeries,
            data: stackedSeries,
            label,
          };
        })
      ),
    [data, labels, stackSeries]
  );
};

export default useSeries;
