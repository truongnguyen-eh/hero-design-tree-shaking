import React, { memo, useLayoutEffect, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';
import { YAxisConfig } from '../../type';

interface YAxisTitleProps {
  height: number;
  yAxisConfig?: Omit<YAxisConfig, 'maxValue'>;
  setSize: (size: { width: number; height: number }) => void;
  yAxisWidth: number;
}

const YAxisTitle = ({
  yAxisConfig,
  height,
  setSize,
  yAxisWidth,
}: YAxisTitleProps) => {
  const YAxisTitleRef = useRef(null);

  const theme = useTheme();

  const {
    __hd__: { horizontalBarChart: horizontalBarChartTheme },
  } = theme;

  const { verticalTitleY } = horizontalBarChartTheme.space;
  useLayoutEffect(() => {
    const yAxisTitleElement = d3.select(YAxisTitleRef.current);

    if (yAxisConfig?.title) {
      const yAxisTitle = yAxisTitleElement
        .append('text')
        .attr('class', 'vertical-title')
        .attr('text-anchor', 'middle')
        .attr('y', verticalTitleY - yAxisWidth)
        .attr('x', -height / 2)
        .attr('transform', 'rotate(-90)')
        .text(yAxisConfig.title);

      const { width: yAxisTitleWidth, height: yAxisTitleHeight } =
        yAxisTitle.node()?.getBoundingClientRect() || {};

      setSize({
        width: yAxisTitleWidth || 0,
        height: yAxisTitleHeight || 0,
      });

      return () => {
        yAxisTitle.remove();
      };
    }
  });
  return <g ref={YAxisTitleRef} />;
};

export default memo(YAxisTitle);
