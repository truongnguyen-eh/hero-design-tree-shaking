import React, { memo, useLayoutEffect, useMemo, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';
import { TickConfig, XAxisConfig } from '../../type';

interface XAxisProps {
  width: number;
  height: number;
  maxValue: number;
  minValue: number;
  xAxisConfig?: Omit<XAxisConfig, 'labels'> & { tick?: TickConfig };
}

const XAxis = ({
  maxValue,
  minValue,
  width,
  height,
  xAxisConfig,
}: XAxisProps) => {
  const theme = useTheme();

  const {
    __hd__: { horizontalBarChart: horizontalBarChartTheme },
  } = theme;

  const { xAxisTransform, horizontalBarMarginTop } =
    horizontalBarChartTheme.space;

  const XAxisRef = useRef(null);

  const xScale = useMemo(() => {
    return d3.scaleLinear().domain([minValue, maxValue]).range([0, width]);
  }, [maxValue, minValue, width]);

  const stepValue = useMemo(
    () => (2 * maxValue) / (xAxisConfig?.step || 0 - 1),
    [maxValue, xAxisConfig?.step]
  );

  const rangeValue = useMemo(
    () => d3.range(minValue, maxValue + stepValue, stepValue),
    [maxValue, minValue, stepValue]
  );

  const tickValues = useMemo(
    () => [
      ...[...rangeValue].slice(0, Math.floor(rangeValue.length / 2)),
      0,
      ...[...rangeValue].slice(
        Math.floor(rangeValue.length / 2),
        rangeValue.length
      ),
    ],
    [rangeValue]
  );

  useLayoutEffect(() => {
    const xAxisElement = d3.select(XAxisRef.current);
    const xAxisGenerator = d3
      .axisBottom(xScale)
      .tickSize(0)
      .tickValues(tickValues);

    const xAxis = xAxisElement
      .append('g')
      .attr(
        'transform',
        `translate(0,${height + xAxisTransform - horizontalBarMarginTop})`
      )
      .attr('class', 'x-axis')
      .call(xAxisGenerator)
      .call((g) => g.select('.domain').remove());

    return () => {
      xAxis.remove();
    };
  }, [height, horizontalBarMarginTop, tickValues, xAxisTransform, xScale]);

  return <g ref={XAxisRef} />;
};

export default memo(XAxis);
