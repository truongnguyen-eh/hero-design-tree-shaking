import React, { memo, useMemo, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';
import { TickConfig, XAxisConfig } from '../../type';

interface GridAreaProps {
  width: number;
  height: number;
  maxValue: number;
  minValue: number;
  xAxisConfig: Omit<XAxisConfig, 'labels'> & { tick?: TickConfig };
  highlightMiddleLine?: boolean;
}

const GridArea = ({
  xAxisConfig,
  maxValue,
  minValue,
  width,
  height,
  highlightMiddleLine,
}: GridAreaProps) => {
  const theme = useTheme();

  const {
    __hd__: { horizontalBarChart: horizontalBarChartTheme },
  } = theme;

  const { gridLineBackgroundColor } = horizontalBarChartTheme.colors;
  const gridAreaRef = useRef(null);

  const xScale = useMemo(() => {
    return d3.scaleLinear().domain([minValue, maxValue]).range([0, width]);
  }, [minValue, maxValue, width]);

  const grid =
    xAxisConfig?.tick?.interval &&
    d3
      .range(-(maxValue || 0), (maxValue || 0) + 1, xAxisConfig.tick.interval)
      .map((value) => (
        <g key={value} className="grid-line">
          <line
            strokeDasharray={highlightMiddleLine && value === 0 ? undefined : 7}
            x1={xScale(value)}
            x2={xScale(value)}
            y1={0}
            y2={height}
            stroke={gridLineBackgroundColor}
            opacity={highlightMiddleLine && value === 0 ? 0.6 : 0.3}
          />
        </g>
      ));

  return <g ref={gridAreaRef}>{grid}</g>;
};

export default memo(GridArea);
