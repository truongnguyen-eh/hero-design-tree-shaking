import React, { memo, useLayoutEffect, useMemo, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';
import type { BarConfig, DataValue, YAxisConfig } from '../../type';

interface YAxisProps {
  height: number;
  yAxisConfig?: Omit<YAxisConfig, 'maxValue'>;
  dataLength: number;
  getAxisSize: (size: { width: number; height: number }) => void;
  barSize?: BarConfig<DataValue>['size'];
}

const YAxis = ({
  yAxisConfig,
  height,
  dataLength,
  barSize = 'large',
  getAxisSize,
}: YAxisProps) => {
  const theme = useTheme();

  const {
    __hd__: { horizontalBarChart: horizontalBarChartTheme },
  } = theme;

  const { yAxisTransformHorizontal, horizontalBarMarginTop } =
    horizontalBarChartTheme.space;

  const { barHeight: heightMapping } = horizontalBarChartTheme.sizes;

  const barHeight = heightMapping[barSize];

  const YAxisRef = useRef(null);
  const labels = useMemo(
    () => yAxisConfig?.labels || [],
    [yAxisConfig?.labels]
  );
  const yScale = useMemo(() => {
    return d3
      .scaleBand<string>()
      .domain(labels as Iterable<string>)
      .range([0, height]);
  }, [labels, height]);

  useLayoutEffect(() => {
    const yAxisElement = d3.select(YAxisRef.current);
    const yAxisGenerator = d3.axisLeft(yScale).tickSize(0);

    // Because the label top is align with bar. So it can not center of the bar
    // The solution: number of bars multiplied with bar height and get a half
    const barMarginTop = (dataLength * barHeight) / 2;
    const yAxis = yAxisElement
      .append('g')
      .attr(
        'transform',
        `translate(${yAxisTransformHorizontal}, ${barMarginTop})`
      )
      .attr('class', 'y-axis')
      .call(yAxisGenerator)
      .call((g) => g.select('.domain').remove());

    const { width: yAxisW, height: yAxisH } =
      yAxis.node()?.getBoundingClientRect() || {};

    getAxisSize({ width: yAxisW || 0, height: yAxisH || 0 });

    return () => {
      yAxis.remove();
    };
  }, [
    barHeight,
    horizontalBarMarginTop,
    dataLength,
    getAxisSize,
    yAxisTransformHorizontal,
    yScale,
  ]);

  return <g ref={YAxisRef} />;
};

export default memo(YAxis);
