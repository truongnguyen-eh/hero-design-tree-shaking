import { useRef, useEffect } from 'react';
import { DataValue } from './type';

export const usePrevious = <T>(value: T) => {
  const ref = useRef<T>();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
};

export const difference = <T>(array1: T[], array2: T[]): T[] => {
  // Create an empty array to store the difference
  const diff: T[] = [];
  // Loop over the elements of the first array
  // eslint-disable-next-line no-restricted-syntax
  for (const element of array1) {
    // Check if the element is in the second array
    if (!array2.includes(element)) {
      // If not, add it to the difference array
      diff.push(element);
    }
  }
  // Return the difference array
  return diff;
};

export const clamp = (val: number, min: number, max: number) =>
  Math.min(Math.max(val, min), max);

export const isNull = (value: DataValue): value is number =>
  value == null && value === undefined;

export const totalOfMaxValuesFromEachRows = (
  data: Array<{
    data: DataValue[];
  }>
) => {
  if (data.length === 0) return 0;

  const rowsValues = new Array(data[0].data.length).fill(0).map((_, index) => {
    return data.reduce((prev, curr) => {
      if (isNull(curr.data[index])) return prev;

      return prev + curr.data[index]!;
    }, 0);
  });

  return Math.max(...rowsValues);
};

/**
 * this function to check is array 1 contain array 2 for primitive type
 */
export const contains = <Data>(arr1: Array<Data>, arr2: Array<Data>) => {
  return arr2.every((ele) => arr1.includes(ele));
};

export const filterElementHasNoColor = <D extends object>(
  data: Array<D & { color?: string }>
): Array<D & { color: string }> => {
  return data.filter((element) => element.color !== undefined) as Array<
    D & { color: string }
  >;
};

export const getParentElement = (ele: HTMLElement | null | undefined) => {
  const parentEle = ele?.parentNode;

  return parentEle !== undefined ? (parentEle as HTMLElement) : null;
};
