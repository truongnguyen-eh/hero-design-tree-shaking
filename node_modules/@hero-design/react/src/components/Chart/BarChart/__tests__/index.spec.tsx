import React from 'react';
import userEvent from '@testing-library/user-event';
import { screen, fireEvent, act } from '@testing-library/react';
import BarChart, { BarChartProps } from '..';
import renderWithTheme from '../../../../testUtils/renderWithTheme';
import { COLOR_MESSAGE_ERROR } from '../../common/colorScale';
import theme from '../../../../theme';

type Data = BarChartProps;
const data: Data['data'] = [
  { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },
  { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },
  { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },
  { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },
  { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },
];

const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];

const yAxisConfig: Data['yAxisConfig'] = {
  title: 'Vertical Title',
  labels,
};

const xAxisConfig: Data['xAxisConfig'] = {
  title: 'Horizontal Title',
  maxValue: 25,
  tick: {
    interval: 5,
  },
  step: 1,
};

const legendConfig: Data['legendConfig'] = {
  selectable: true,
  viewMoreText: 'More',
  maxLegend: 4,
};

const navigationConfig: Data['navigationConfig'] = {
  visible: true,
};
describe('Bar Chart', () => {
  beforeAll(() => {
    global.ResizeObserver = jest.fn().mockImplementation(() => ({
      observe: jest.fn(),
      unobserve: jest.fn(),
      disconnect: jest.fn(),
    }));
  });
  it('renders correctly', () => {
    const { getByTestId, container, getByText, getAllByTestId } =
      renderWithTheme(
        <BarChart
          data-test-id="bar-chart"
          data={data}
          yAxisConfig={yAxisConfig}
          xAxisConfig={xAxisConfig}
          legendConfig={legendConfig}
          navigationConfig={navigationConfig}
        />
      );

    expect(container.querySelectorAll('rect').length).toBe(35);
    expect(getAllByTestId('bar-chart-grid-line')).toHaveLength(6);
    expect(container.querySelectorAll('g.y-axis>g.tick>text').length).toBe(
      yAxisConfig.labels?.length
    );
    expect(container.querySelectorAll('g.x-axis>g.tick>text').length).toBe(
      xAxisConfig.maxValue! + 1
    );

    expect(getByText('Vertical Title')).toBeInTheDocument();
    expect(getByText('Horizontal Title')).toBeInTheDocument();

    expect(getByTestId('bar-chart')).toBeInTheDocument();
    expect(getByTestId('bar-chart-navigate-button-prev')).toBeInTheDocument();
    expect(getByTestId('bar-chart-navigate-button-next')).toBeInTheDocument();

    expect(container).toMatchSnapshot();
  });

  it('displays legends and circle prefix', () => {
    const { getByText, getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={{ ...legendConfig, maxLegend: 10, selectable: false }}
      />
    );
    expect(getByText('07th')).toBeInTheDocument();
    expect(getByText('14th')).toBeInTheDocument();
    expect(getByText('21st')).toBeInTheDocument();
    expect(getByText('25th')).toBeInTheDocument();
    expect(getByText('31st')).toBeInTheDocument();

    expect(getByTestId('legend-prefix-07th-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-14th-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-21st-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-25th-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-31st-circle')).toBeInTheDocument();
  });

  it('displays legends and checkboxes', () => {
    const { getByText, getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={{ ...legendConfig, maxLegend: 10 }}
      />
    );
    expect(getByText('07th')).toBeInTheDocument();
    expect(getByText('14th')).toBeInTheDocument();
    expect(getByText('21st')).toBeInTheDocument();
    expect(getByText('25th')).toBeInTheDocument();
    expect(getByText('31st')).toBeInTheDocument();

    expect(
      getByTestId('bar-chart-legend-checkbox-legend-prefix-07th-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('bar-chart-legend-checkbox-legend-prefix-14th-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('bar-chart-legend-checkbox-legend-prefix-21st-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('bar-chart-legend-checkbox-legend-prefix-25th-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('bar-chart-legend-checkbox-legend-prefix-31st-checkbox')
    ).toBeInTheDocument();
  });

  it('handle on click uncontrolled checkbox', () => {
    const { container, getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
      />
    );

    const firstCheckbox = getByTestId(
      'bar-chart-legend-checkbox-legend-prefix-07th-checkbox'
    );

    expect(firstCheckbox).toBeInTheDocument();

    userEvent.click(firstCheckbox);
    expect(container.querySelectorAll('rect').length).toBe(28);
  });

  it('handle on click controlled checkbox', () => {
    const onChange = jest.fn();
    const { container, getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={{
          ...legendConfig,
          onChange,
        }}
      />
    );

    const firstCheckbox = getByTestId(
      'bar-chart-legend-checkbox-legend-prefix-07th-checkbox'
    );

    expect(firstCheckbox).toBeInTheDocument();

    userEvent.click(firstCheckbox);
    expect(onChange).toHaveBeenCalledWith(['14th', '21st', '25th', '31st']);
    expect(onChange).toBeCalledTimes(1);
    expect(container.querySelectorAll('rect').length).toBe(35);
  });

  it('hover bar', async () => {
    const { container } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
      />
    );

    const bar = container.querySelectorAll('rect')[0];

    expect(bar).toBeInTheDocument();

    userEvent.hover(bar);

    expect(screen.getByTestId('bar-chart-tooltip')).toBeInTheDocument();
  });

  it('hover more button', async () => {
    const { getByText } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
      />
    );
    const moreLegendBtn = getByText('More');

    expect(moreLegendBtn).toBeInTheDocument();

    await act(async () => {
      fireEvent.touchStart(moreLegendBtn);
    });

    expect(getByText('31st')).toBeInTheDocument();
  });

  it('can click navigation button', async () => {
    const onNavigate = jest.fn();

    const { getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        navigationConfig={{
          visible: true,
          onNavigate: (direction) => {
            onNavigate(direction);
          },
        }}
      />
    );
    userEvent.click(getByTestId('bar-chart-navigate-button-prev'));

    expect(onNavigate).toHaveBeenCalledWith('prev');
    userEvent.click(getByTestId('bar-chart-navigate-button-next'));

    expect(onNavigate).toHaveBeenCalledWith('next');
  });

  it('can click on a bar segment', () => {
    const onClick = jest.fn();
    const { getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ onClick }}
      />
    );
    const bar = getByTestId('bar-chart-May-07th-2.2');
    fireEvent.click(bar!);
    expect(onClick).toBeCalledTimes(1);
    expect(onClick).toBeCalledWith(expect.anything(), {
      label: 'May',
      legend: '07th',
      data: 2.2,
    });
  });

  it('matched multiple segment', async () => {
    const { getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        highlightedItems={[
          {
            legend: '07th',
            label: 'Jun',
          },
        ]}
      />
    );

    expect(getByTestId('bar-chart-Jun-07th-1')).toHaveAttribute(
      'filter',
      'drop-shadow(1px 1px 4px rgb(0 0 0 / 0.3))'
    );
  });

  it('show total', () => {
    const { getAllByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true }}
      />
    );
    expect(getAllByTestId('bar-chart-total-badge')).toHaveLength(7);
  });
  it('change total format', () => {
    const { getAllByText } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
      />
    );
    expect(getAllByText('100M')).toHaveLength(7);
  });

  it('custom bar color', () => {
    const { getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
        styleConfig={{
          series: [
            {
              label: '07th',
              color: 'redLight30',
            },
            {
              label: '14th',
              color: 'violetLight30',
            },
            {
              label: '21st',
              color: 'greenLight30',
            },
            {
              label: '25th',
              color: 'orangeLight30',
            },
            {
              label: '31st',
              color: 'purpleLight30',
            },
          ],
        }}
      />
    );

    expect(getByTestId('bar-chart-May-07th-2.2').getAttribute('fill')).toBe(
      theme.colors.palette['redLight30']
    );
  });

  it('throw error if color is missing', async () => {
    try {
      renderWithTheme(
        <BarChart
          data-test-id="bar-chart"
          data={data}
          yAxisConfig={yAxisConfig}
          xAxisConfig={xAxisConfig}
          legendConfig={legendConfig}
          barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
          styleConfig={{
            series: [
              {
                label: '07th',
              },
              {
                label: '14th',
                color: 'violetLight30',
              },
              {
                label: '21st',
                color: 'greenLight30',
              },
              {
                label: '25th',
                color: 'orangeLight30',
              },
              {
                label: '31st',
                color: 'purpleLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it('throw error if missing label', async () => {
    try {
      renderWithTheme(
        <BarChart
          data-test-id="bar-chart"
          data={data}
          yAxisConfig={yAxisConfig}
          xAxisConfig={xAxisConfig}
          legendConfig={legendConfig}
          barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
          styleConfig={{
            series: [
              {
                label: '14th',
                color: 'violetLight30',
              },
              {
                label: '21st',
                color: 'greenLight30',
              },
              {
                label: '25th',
                color: 'orangeLight30',
              },
              {
                label: '31st',
                color: 'purpleLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it.each`
    size        | height
    ${'large'}  | ${theme.__hd__.barChart.sizes.barHeight.large}
    ${'medium'} | ${theme.__hd__.barChart.sizes.barHeight.medium}
  `('return correct bar height', ({ size, height }) => {
    const { getByTestId } = renderWithTheme(
      <BarChart
        data-test-id="bar-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true, size }}
      />
    );
    expect(getByTestId('bar-chart-May-07th-2.2').getAttribute('height')).toBe(
      height.toString()
    );
  });

  it.each`
    disabledDirection | enabledDirection
    ${'prev'}         | ${'next'}
    ${'next'}         | ${'prev'}
  `(
    'should disable prev button',
    async ({ disabledDirection, enabledDirection }) => {
      const onNavigate = jest.fn();
      const { getByTestId } = renderWithTheme(
        <BarChart
          data-test-id="bar-chart"
          data={data}
          yAxisConfig={yAxisConfig}
          xAxisConfig={xAxisConfig}
          legendConfig={legendConfig}
          navigationConfig={{
            visible: true,
            onNavigate: (direction) => {
              onNavigate(direction);
            },
            disabledButtons: disabledDirection,
          }}
        />
      );

      const disableButton = getByTestId(
        `bar-chart-navigate-button-${disabledDirection}`
      );

      expect(disableButton).toBeVisible();
      expect(disableButton).toBeDisabled();

      userEvent.click(disableButton);

      expect(onNavigate).toBeCalledTimes(0);

      const enabledButton = getByTestId(
        `bar-chart-navigate-button-${enabledDirection}`
      );

      expect(enabledButton).toBeVisible();
      expect(enabledButton).toBeEnabled();

      userEvent.click(enabledButton);

      expect(onNavigate).toBeCalledTimes(1);
    }
  );
});
