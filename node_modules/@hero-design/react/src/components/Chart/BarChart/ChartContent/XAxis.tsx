import React, { memo, useLayoutEffect, useMemo, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';

interface XAxisProps {
  width: number;
  height: number;
  maxValue: number;
  minValue: number;
  defaultStep: number;
}

const XAxis = ({
  maxValue,
  minValue,
  width,
  height,
  defaultStep,
}: XAxisProps) => {
  const theme = useTheme();

  const {
    __hd__: { barChart: barChartTheme },
  } = theme;

  const { xAxisTransform, barMarginTop } = barChartTheme.space;

  const XAxisRef = useRef(null);

  const xScale = useMemo(() => {
    return d3.scaleLinear().domain([minValue, maxValue]).range([0, width]);
  }, [maxValue, minValue, width]);

  const ticksValues = useMemo(
    () =>
      maxValue && typeof defaultStep !== 'undefined'
        ? Array.from({ length: maxValue + 1 }, (_v, i) => i).filter(
            (v) => v % defaultStep === 0
          )
        : Array.from({ length: (maxValue || 0) + 1 }, (_v, i) => i),
    [maxValue, defaultStep]
  );

  useLayoutEffect(() => {
    const xAxisElement = d3.select(XAxisRef.current);
    const xAxisGenerator = d3
      .axisBottom(xScale)
      .tickSize(0)
      .tickValues(ticksValues);

    const xAxis = xAxisElement
      .append('g')
      .attr(
        'transform',
        `translate(0,${height + xAxisTransform - barMarginTop})`
      )
      .attr('class', 'x-axis')
      .call(xAxisGenerator)
      .call((g) => g.select('.domain').remove());

    return () => {
      xAxis.remove();
    };
  }, [barMarginTop, height, ticksValues, xAxisTransform, xScale]);

  return <g ref={XAxisRef} />;
};

export default memo(XAxis);
