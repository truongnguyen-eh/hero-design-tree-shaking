import React, { forwardRef } from 'react';
import { StyledTooltip } from '../../StyledChart';
import { StyledTooltipContentWrapper } from '../StyledBarChart';
import { CommonProps } from '../../../common';
import { DataValue } from '../../type';
import DefaultTooltip from './DefaultTooltip';

interface BarTooltipProps extends CommonProps {
  show?: boolean;
  color?: string;
  title?: string;
  value?: string | number;
  percent?: string | number;
  yAxisLabel?: string;
  tooltipRenderer?: (props: {
    label?: string;
    value?: DataValue;
    legendColor?: string;
    yAxisLabel?: string;
  }) => React.ReactNode;
}

const BarTooltip = forwardRef<HTMLDivElement, BarTooltipProps>(
  (
    {
      show,
      'data-test-id': dataTestId,
      color,
      title,
      value,
      percent,
      tooltipRenderer,
      yAxisLabel,
    },
    ref
  ) => {
    const renderTooltip = React.useCallback(() => {
      return tooltipRenderer ? (
        tooltipRenderer({
          label: title,
          value: Number(value),
          legendColor: color,
          yAxisLabel,
        })
      ) : (
        <DefaultTooltip
          label={title}
          value={value ? Number(value) : undefined}
          legendColor={color}
          percent={percent?.toString()}
        />
      );
    }, [yAxisLabel, color, percent, title, tooltipRenderer, value]);

    return (
      <StyledTooltip
        ref={ref}
        style={{ position: 'fixed', display: show ? 'block' : 'none' }}
        data-test-id={`${dataTestId}-tooltip`}
        variant="light"
      >
        <StyledTooltipContentWrapper>
          {renderTooltip()}
        </StyledTooltipContentWrapper>
      </StyledTooltip>
    );
  }
);

export default BarTooltip;
