import React, { memo, useMemo } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';
import { CommonProps } from '../../../common';

interface GridAreaProps extends CommonProps {
  width: number;
  height: number;
  maxValue: number;
  minValue: number;
  tickInterval?: number;
  highlightMiddleLine?: boolean;
}

const GridArea = ({
  tickInterval,
  maxValue,
  minValue,
  width,
  height,
  highlightMiddleLine,
  'data-test-id': dataTestId,
}: GridAreaProps) => {
  const theme = useTheme();

  const {
    __hd__: { barChart: barChartTheme },
  } = theme;

  const { gridLineBackgroundColor } = barChartTheme.colors;

  const xScale = useMemo(() => {
    return d3.scaleLinear().domain([minValue, maxValue]).range([0, width]);
  }, [minValue, maxValue, width]);

  const grid =
    tickInterval &&
    d3.range(0, maxValue + 1, tickInterval).map((value) => {
      const isHighlightedLine = highlightMiddleLine && value === 0;

      return (
        <g key={value} data-test-id={dataTestId}>
          <line
            strokeDasharray={isHighlightedLine ? undefined : 7}
            x1={xScale(value)}
            x2={xScale(value)}
            y1={0}
            y2={height}
            stroke={gridLineBackgroundColor}
            opacity={isHighlightedLine ? 0.6 : 0.3}
          />
        </g>
      );
    });

  return <g>{grid}</g>;
};

export default memo(GridArea);
