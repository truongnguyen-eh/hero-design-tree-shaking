import React, { memo, useCallback, useLayoutEffect, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';
import { CommonProps } from '../../../common';
import { BarConfig, DataValue } from '../../type';

interface RectProps extends CommonProps {
  width: number;
  color: string;
  x?: number;
  y?: number;
  onMouseOver?: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;
  onMouseMove?: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;
  onMouseOut?: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;
  onClick?: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;
  isHovered?: boolean;
  isHighlighted?: boolean;
  size?: BarConfig<DataValue>['size'];
}

const Rect = ({
  width,
  x,
  y,
  color,
  onMouseOver,
  onMouseMove,
  onMouseOut,
  onClick,
  'data-test-id': dataTestId,
  className,
  isHovered,
  isHighlighted,
  size = 'large',
}: RectProps) => {
  const HOVER_EFFECT_DURATION = 150;
  const theme = useTheme();

  const rectRef = useRef<SVGRectElement>(null);

  const {
    __hd__: { barChart: barChartTheme },
  } = theme;

  const { barDropShadow } = barChartTheme.boxShadows;

  const { barHeight: barHeightMapping } = barChartTheme.sizes;

  const barHeight = barHeightMapping[size];

  const { bar: barBorderRadiusMapping } = barChartTheme.radii;

  const barBorderRadius = barBorderRadiusMapping[size];

  const { barHoverTransform: barHoverTransformMapping } = barChartTheme.space;

  const barHoverTransform = barHoverTransformMapping[size];

  const handleIsHoveredEvent = useCallback(
    (
      rectElement: d3.Selection<
        SVGRectElement | null,
        unknown,
        null,
        undefined
      >,
      hovered?: boolean
    ) => {
      if (hovered) {
        rectElement
          .transition()
          .duration(HOVER_EFFECT_DURATION)
          .attr('y', y || 0)
          .attr('height', barHeight)
          .attr('rx', barBorderRadius)
          .attr('ry', barBorderRadius);
        return;
      }

      if (hovered === false) {
        rectElement
          .transition()
          .duration(HOVER_EFFECT_DURATION)
          .attr('y', (y || 0) + barHoverTransform)
          .attr('height', barHeightMapping.inactive)
          .attr('rx', barBorderRadiusMapping.inactive)
          .attr('ry', barBorderRadiusMapping.inactive);
        return;
      }

      if (hovered === undefined) {
        rectElement
          .transition()
          .duration(HOVER_EFFECT_DURATION)
          .attr('y', y || 0)
          .attr('height', barHeight)
          .attr('rx', barBorderRadius)
          .attr('ry', barBorderRadius);
      }
    },
    [
      barBorderRadius,
      barBorderRadiusMapping.inactive,
      barHeight,
      barHeightMapping.inactive,
      barHoverTransform,
      y,
    ]
  );

  const handleHighlightedEvent = useCallback(
    (
      rectElement: d3.Selection<
        SVGRectElement | null,
        unknown,
        null,
        undefined
      >,
      highlighted: boolean,
      hovered?: boolean
    ) => {
      if (highlighted) {
        rectElement
          .transition()
          .duration(HOVER_EFFECT_DURATION)
          .attr('y', y || 0)
          .attr('height', barHeight)
          .attr('rx', barBorderRadius)
          .attr('ry', barBorderRadius);
        return;
      }

      if (!highlighted && hovered) {
        rectElement
          .transition()
          .attr('y', y || 0)
          .attr('height', barHeight)
          .attr('rx', barBorderRadius)
          .attr('ry', barBorderRadius);
        return;
      }

      if (!highlighted && !hovered) {
        rectElement
          .transition()
          .attr('y', (y || 0) + barHoverTransform)
          .attr('height', barHeightMapping.inactive)
          .attr('rx', barBorderRadiusMapping.inactive)
          .attr('ry', barBorderRadiusMapping.inactive);
      }
    },
    [
      barBorderRadius,
      barBorderRadiusMapping.inactive,
      barHeight,
      barHeightMapping.inactive,
      barHoverTransform,
      y,
    ]
  );

  useLayoutEffect(() => {
    const rectElement = d3.select(rectRef.current);

    if (typeof isHighlighted === 'undefined') {
      handleIsHoveredEvent(rectElement, isHovered);
      return;
    }

    if (typeof isHighlighted !== 'undefined') {
      handleHighlightedEvent(rectElement, isHighlighted, isHovered);
    }
  }, [
    isHovered,
    isHighlighted,
    barBorderRadiusMapping.inactive,
    barHeight,
    barHeightMapping.inactive,
    barHoverTransform,
    y,
    barBorderRadius,
    handleIsHoveredEvent,
    handleHighlightedEvent,
  ]);

  return (
    <rect
      ref={rectRef}
      onMouseOver={onMouseOver}
      onMouseMove={onMouseMove}
      onMouseOut={onMouseOut}
      onClick={onClick}
      className={className}
      data-test-id={dataTestId}
      y={y}
      height={barHeight}
      x={x}
      width={width < 0 ? 0 : width}
      fill={color}
      filter={
        isHovered || isHighlighted ? `drop-shadow(${barDropShadow})` : undefined
      }
      cursor="pointer"
      rx={barBorderRadius}
      ry={barBorderRadius}
    />
  );
};

export default memo(Rect);
