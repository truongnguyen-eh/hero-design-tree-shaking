import React from 'react';
import { fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../../testUtils/renderWithTheme';
import MultiplePieChart from '../index';
import theme from '../../../../theme';
import { COLOR_MESSAGE_ERROR } from '../../common/colorScale';

describe('rendering', () => {
  it('render correct slices of multiple pie chart', () => {
    const { container, getByTestId } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
      />
    );

    expect(container.querySelectorAll('g')).toHaveLength(3);
    expect(container.querySelectorAll('path')).toHaveLength(6);
    expect(getByTestId('multiple-pie-chart-arc-A-slice-Mon')).toBeVisible();
    expect(getByTestId('multiple-pie-chart-arc-A-slice-Tue')).toBeVisible();
    expect(getByTestId('multiple-pie-chart-arc-B-slice-Mon')).toBeVisible();
    expect(getByTestId('multiple-pie-chart-arc-B-slice-Tue')).toBeVisible();
    expect(getByTestId('multiple-pie-chart-arc-C-slice-Mon')).toBeVisible();
    expect(getByTestId('multiple-pie-chart-arc-C-slice-Tue')).toBeVisible();
  });

  it('render correct legend', () => {
    const { getByTestId, rerender, queryByTestId } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
        legendConfig={{
          maxLegend: 4,
        }}
      />
    );
    expect(getByTestId('multiple-pie-chart-legend')).toBeInTheDocument();

    rerender(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
        legendConfig={{
          maxLegend: 4,
          selectable: true,
        }}
      />
    );

    expect(
      queryByTestId('multiple-pie-chart-checkbox-legend')
    ).toBeInTheDocument();
  });

  it('render uncontrolled checkbox legend', () => {
    const { getByTestId, container, queryByTestId } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
        legendConfig={{
          maxLegend: 4,
          selectable: true,
        }}
      />
    );
    expect(container.querySelectorAll('g')).toHaveLength(3);
    expect(container.querySelectorAll('path')).toHaveLength(6);
    const checkbox = getByTestId(
      'multiple-pie-chart-checkbox-legend-prefix-Mon-checkbox'
    );
    fireEvent.click(checkbox);

    expect(container.querySelectorAll('g')).toHaveLength(3);
    expect(container.querySelectorAll('path')).toHaveLength(3);

    expect(
      queryByTestId('multiple-pie-chart-arc-A-slice-Mon')
    ).not.toBeInTheDocument();
    expect(
      queryByTestId('multiple-pie-chart-arc-B-slice-Mon')
    ).not.toBeInTheDocument();
    expect(
      queryByTestId('multiple-pie-chart-arc-C-slice-Mon')
    ).not.toBeInTheDocument();
  });

  it('render controlled checkbox legend', () => {
    const onChange = jest.fn();

    const { getByTestId, container } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
        legendConfig={{
          maxLegend: 4,
          selectable: true,
          value: ['Mon'],
          onChange,
        }}
      />
    );

    expect(container.querySelectorAll('g')).toHaveLength(3);
    expect(container.querySelectorAll('path')).toHaveLength(3);

    const checkbox = getByTestId(
      'multiple-pie-chart-checkbox-legend-prefix-Tue-checkbox'
    );
    fireEvent.click(checkbox);

    expect(onChange).toBeCalledTimes(1);
    expect(onChange).toBeCalledWith(['Mon', 'Tue']);
  });

  it('render correct title', () => {
    const { rerender, queryByTestId, queryByText } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
      />
    );
    expect(queryByTestId('multiple-pie-chart-title')).not.toBeInTheDocument();

    rerender(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        title="My Chart"
        data-test-id="multiple-pie-chart"
      />
    );

    expect(queryByText('My Chart')).toBeInTheDocument();
    expect(queryByText('Out to in: A, B, C')).toBeInTheDocument();
  });

  it('render correct highlightedItems', () => {
    const { queryByTestId } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        title="My Chart"
        data-test-id="multiple-pie-chart"
        highlightedItems={[
          {
            label: 'A',
            legend: 'Mon',
          },
        ]}
      />
    );

    expect(queryByTestId('multiple-pie-chart-arc-A-slice-Mon')).toHaveAttribute(
      'filter',
      theme.__hd__.chart.shadows.multiplePie.slice
    );
  });

  it('render correct tooltip', () => {
    const { getByTestId, getByText, queryByText } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        title="My Chart"
        data-test-id="multiple-pie-chart"
        highlightedItems={[
          {
            label: 'A',
            legend: 'Mon',
          },
        ]}
      />
    );

    const slice = getByTestId('multiple-pie-chart-arc-A-slice-Mon');

    userEvent.hover(slice);
    expect(getByText('A | Mon')).toBeVisible();
    userEvent.unhover(slice);
    expect(queryByText('A | Mon')).not.toBeInTheDocument();
  });

  it('custom bar color', () => {
    const { getByTestId } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
        legendConfig={{
          maxLegend: 4,
        }}
        styleConfig={{
          series: [
            {
              label: 'Mon',
              color: 'blueDark30',
            },
            {
              label: 'Tue',
              color: 'blueLight30',
            },
          ],
        }}
      />
    );

    expect(
      getByTestId('multiple-pie-chart-arc-A-slice-Mon').getAttribute('fill')
    ).toBe(theme.colors.palette['blueDark30']);
  });

  it('throw error if color is missing', async () => {
    try {
      renderWithTheme(
        <MultiplePieChart
          data={[
            { data: [10, 15, 5], label: 'Mon' },
            { data: [20, 20, 25], label: 'Tue' },
          ]}
          labels={['A', 'B', 'C']}
          data-test-id="multiple-pie-chart"
          legendConfig={{
            maxLegend: 4,
          }}
          styleConfig={{
            series: [
              {
                label: 'A',
              },
              {
                label: 'B',
                color: 'blueLight30',
              },
              {
                label: 'C',
                color: 'dodgerBlueDark30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it('throw error if missing label', async () => {
    try {
      renderWithTheme(
        <MultiplePieChart
          data={[
            { data: [10, 15, 5], label: 'Mon' },
            { data: [20, 20, 25], label: 'Tue' },
          ]}
          labels={['A', 'B', 'C']}
          data-test-id="multiple-pie-chart"
          legendConfig={{
            maxLegend: 4,
          }}
          styleConfig={{
            series: [
              {
                label: 'B',
                color: 'blueLight30',
              },
              {
                label: 'C',
                color: 'dodgerBlueDark30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });
});

describe('interative', () => {
  it('onClick handler should work', async () => {
    const onClick = jest.fn();
    const { getByTestId } = renderWithTheme(
      <MultiplePieChart
        data={[
          { data: [10, 15, 5], label: 'Mon' },
          { data: [20, 20, 25], label: 'Tue' },
        ]}
        labels={['A', 'B', 'C']}
        data-test-id="multiple-pie-chart"
        onClick={onClick}
      />
    );
    const slice1 = getByTestId('multiple-pie-chart-arc-A-slice-Mon');
    fireEvent.click(slice1);
    expect(onClick).toBeCalledTimes(1);
    expect(onClick).toBeCalledWith(new MouseEvent('click'), {
      label: 'Mon',
      labelIndex: 0,
      value: 10,
      index: 0,
      pieLabel: 'A',
    });
  });
});
