import React from 'react';
import { fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../../testUtils/renderWithTheme';
import PieChart from '../index';
import theme from '../../../../theme';
import { COLOR_MESSAGE_ERROR } from '../../common/colorScale';

describe('rendering', () => {
  it('render correct slices of pie chart', () => {
    const { container, getByTestId } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
      />
    );

    expect(container.querySelectorAll('path')).toHaveLength(2);
    expect(getByTestId('piechart-slice-Blue')).toBeVisible();
    expect(getByTestId('piechart-slice-Yellow')).toBeVisible();
  });

  it('render correct total', () => {
    const { getByText } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        alwaysShowTotal
      />
    );

    expect(getByText('30')).toBeVisible();
  });

  it('render correct legend', () => {
    const { getByTestId, rerender, queryByTestId } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        legendConfig={{
          maxLegend: 4,
        }}
      />
    );
    expect(getByTestId('piechart-legend')).toBeInTheDocument();

    rerender(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        legendConfig={{
          maxLegend: 4,
          selectable: true,
        }}
      />
    );

    expect(queryByTestId('piechart-checkbox-legend')).toBeInTheDocument();
  });

  it('render uncontrolled checkbox legend', () => {
    const { getByTestId, container, queryByTestId } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        legendConfig={{
          maxLegend: 4,
          selectable: true,
        }}
      />
    );
    const checkbox = getByTestId(
      'piechart-checkbox-legend-prefix-Blue-checkbox'
    );
    fireEvent.click(checkbox);
    expect(container.querySelectorAll('path')).toHaveLength(1);
    expect(queryByTestId('piechart-slice-Yellow')).toBeInTheDocument();
    expect(queryByTestId('piechart-slice-Blue')).not.toBeInTheDocument();
  });

  it('render controlled checkbox legend', () => {
    const onChange = jest.fn();
    const { container, queryByTestId, getByTestId } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        legendConfig={{
          maxLegend: 4,
          selectable: true,
          value: ['Yellow'],
          onChange,
        }}
      />
    );
    expect(container.querySelectorAll('path')).toHaveLength(1);
    expect(queryByTestId('piechart-slice-Yellow')).toBeInTheDocument();
    expect(queryByTestId('piechart-slice-Blue')).not.toBeInTheDocument();

    const checkbox = getByTestId(
      'piechart-checkbox-legend-prefix-Blue-checkbox'
    );
    fireEvent.click(checkbox);
    expect(onChange).toBeCalledTimes(1);
    expect(onChange).toBeCalledWith(['Yellow', 'Blue']);
  });

  it('render correct title', () => {
    const { rerender, queryByTestId, queryByText } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
      />
    );
    expect(queryByTestId('piechart-title')).not.toBeInTheDocument();

    rerender(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        title="My Chart"
      />
    );

    expect(queryByText('My Chart')).toBeInTheDocument();
  });

  it('render correct icon', () => {
    const { getByTestId } = renderWithTheme(
      <PieChart
        data={[
          { label: 'user', data: { value: 10, icon: 'user' } },
          { label: 'cake', data: { value: 20, icon: 'cake' } },
        ]}
        data-test-id="piechart"
      />
    );
    const slice = getByTestId('piechart-slice-user');
    userEvent.hover(slice);
    expect(
      getByTestId('piechart-inner-content').firstChild?.firstChild
    ).toHaveClass('hero-icon-user');
  });

  it('render correct highlightedItems', () => {
    const { queryByTestId } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        highlightedItems={['Yellow']}
      />
    );

    expect(queryByTestId('piechart-slice-Yellow')).toHaveAttribute(
      'filter',
      theme.__hd__.chart.shadows.pie.slice
    );
  });

  it('render correct totalFormatter', () => {
    const { getByTestId, getByText } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10.123456789 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        highlightedItems={['Yellow']}
        totalFormatter={(value) => value.toFixed(2)}
      />
    );
    userEvent.hover(getByTestId('piechart-slice-Yellow'));
    expect(getByText('30.12 Total')).toBeVisible();
  });

  it('custom color', () => {
    const { getByTestId } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        legendConfig={{
          maxLegend: 4,
          selectable: true,
        }}
        styleConfig={{
          series: [
            {
              label: 'Blue',
              color: 'blueLight30',
            },
            {
              label: 'Yellow',
              color: 'yellowLight30',
            },
          ],
        }}
      />
    );

    expect(getByTestId('piechart-slice-Blue').getAttribute('fill')).toBe(
      theme.colors.palette['blueLight30']
    );
  });

  it('throw error if color is missing', async () => {
    try {
      renderWithTheme(
        <PieChart
          data={[
            { label: 'Blue', data: 10 },
            { label: 'Yellow', data: 20 },
          ]}
          data-test-id="piechart"
          legendConfig={{
            maxLegend: 4,
            selectable: true,
          }}
          styleConfig={{
            series: [
              {
                label: 'Blue',
              },
              {
                label: 'Yellow',
                color: 'yellowLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it('throw error if missing label', async () => {
    try {
      renderWithTheme(
        <PieChart
          data={[
            { label: 'Blue', data: 10 },
            { label: 'Yellow', data: 20 },
          ]}
          data-test-id="piechart"
          legendConfig={{
            maxLegend: 4,
            selectable: true,
          }}
          styleConfig={{
            series: [
              {
                label: 'Yellow',
                color: 'yellowLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it('render correct custom central content', () => {
    const { getByText } = renderWithTheme(
      <PieChart
        data={[
          { label: 'Blue', data: 10 },
          { label: 'Yellow', data: 20 },
        ]}
        data-test-id="piechart"
        centralContentRenderer={() => <div>Total: 30</div>}
      />
    );
    expect(getByText('Total: 30')).toBeVisible();
  });
});

describe('interative', () => {
  it('onClick handler should work', async () => {
    const data = [
      { label: 'Blue', data: 10 },
      { label: 'Yellow', data: 20 },
    ];
    const onClick = jest.fn();
    const { getByTestId } = renderWithTheme(
      <PieChart data={data} data-test-id="piechart" onClick={onClick} />
    );
    const slice1 = getByTestId('piechart-slice-Blue');
    fireEvent.click(slice1);
    expect(onClick).toBeCalledTimes(1);
    expect(onClick).toBeCalledWith(new MouseEvent('click'), data[0]);
  });

  it('mouse handler should work', () => {
    const onMouseOver = jest.fn();
    const onMouseOut = jest.fn();
    const data = [
      { label: 'Blue', data: 10 },
      { label: 'Yellow', data: 20 },
    ];
    const { getByTestId } = renderWithTheme(
      <PieChart
        data={data}
        data-test-id="piechart"
        itemConfig={{
          onMouseOut,
          onMouseOver,
        }}
      />
    );
    const slice1 = getByTestId('piechart-slice-Blue');
    userEvent.hover(slice1);
    expect(onMouseOver).toBeCalledTimes(1);
    expect(onMouseOver).toBeCalledWith(new MouseEvent('mouseover'), data[0]);
    expect(onMouseOut).not.toBeCalled();
    userEvent.unhover(slice1);
    expect(onMouseOut).toBeCalledTimes(1);
    expect(onMouseOut).toBeCalledWith(new MouseEvent('mouseout'), data[0]);
  });
});
