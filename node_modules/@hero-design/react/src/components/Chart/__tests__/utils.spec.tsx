import {
  clamp,
  totalOfMaxValuesFromEachRows,
  isNull,
  contains,
  filterElementHasNoColor,
  getParentElement,
} from '../utils';

describe('Utils', () => {
  describe('clamp', () => {
    it('returns return value within limits', () => {
      expect(clamp(1, 2, 3)).toBe(2);
      expect(clamp(2, 1, 3)).toBe(2);
      expect(clamp(3, 1, 2)).toBe(2);
    });
  });

  describe('totalOfMaxValuesFromEachRows', () => {
    const data = [
      { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4], color: 'red' },
      { label: '08th', data: [2.2, 1, 2, 2.5, 4, 3, 4], color: 'red' },
    ];

    it.each([
      [data, 8],
      [[], 0],
    ])('returns the max sum of the rows', (input, output) => {
      expect(totalOfMaxValuesFromEachRows(input)).toBe(output);
    });
  });

  describe('isNull', () => {
    it('returns true if value is undefined', () => {
      expect(isNull(undefined)).toBe(true);
      expect(isNull(0)).toBe(false);
      expect(isNull(1)).toBe(false);
    });
  });
});

describe('contains', () => {
  it('should return true if array 1 contain array 2', () => {
    const result = contains([1, 2, 3], [1, 2]);

    expect(result).toBeTruthy();
  });

  it('should return false if array 1 can not contain array 2', () => {
    const result = contains([1, 2, 3], [1, 3, 4]);
    expect(result).toBeFalsy();
  });
});

describe('filterElementHasNoColor', () => {
  it('return filter array to make all elements in array have attribute color', () => {
    const data = [
      {
        label: '1',
        color: '1',
      },
      {
        label: '2',
      },
    ];

    expect(filterElementHasNoColor(data)).toStrictEqual([
      {
        label: '1',
        color: '1',
      },
    ]);
  });
});

describe('getParentElement', () => {
  const parent = document.createElement('div');
  const child = document.createElement('button');
  parent.appendChild(child);
  it('return parent element', () => {
    expect(getParentElement(child)).toBe(parent);
  });

  it('return null if child element is undefined', () => {
    expect(getParentElement(undefined)).toBeNull();
  });

  it('return null if child is null', () => {
    expect(getParentElement(null)).toBeNull();
  });
});
