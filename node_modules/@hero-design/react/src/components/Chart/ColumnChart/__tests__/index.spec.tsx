import React from 'react';
import userEvent from '@testing-library/user-event';
import { screen, fireEvent, act } from '@testing-library/react';
import ColumnChart, { ColumnChartProps } from '..';
import renderWithTheme from '../../../../testUtils/renderWithTheme';
import Box from '../../../Box';
import Typography from '../../../Typography';
import theme from '../../../../theme';
import { COLOR_MESSAGE_ERROR } from '../../common/colorScale';

type Data = ColumnChartProps;
const data: Data['data'] = [
  { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },
  { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },
  { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },
  { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },
  { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },
];

const yAxisConfig: Data['yAxisConfig'] = {
  title: 'Vertical Title',
  maxValue: 9,
  tick: {
    interval: 1,
  },
  step: 1,
};

const xAxisConfig: Data['xAxisConfig'] = {
  title: 'Horizontal Title',
  labels: [
    'May 2023',
    'Jun 2023',
    'Jul 2023',
    'Aug 2023',
    'Sep 2023',
    'Jun 2024',
    'Jul 2024 too too too too too too long',
  ],
};

const legendConfig: Data['legendConfig'] = {
  selectable: true,
  maxLegend: 4,
  viewMoreText: 'More',
};

const navigationConfig: Data['navigationConfig'] = {
  visible: true,
};

describe('Column Chart', () => {
  beforeAll(() => {
    global.ResizeObserver = jest.fn().mockImplementation(() => ({
      observe: jest.fn(),
      unobserve: jest.fn(),
      disconnect: jest.fn(),
    }));
  });
  it('renders correctly', () => {
    const { getByTitle, getByTestId, container, getByText, getAllByTestId } =
      renderWithTheme(
        <ColumnChart
          data-test-id="column-chart"
          data={data}
          yAxisConfig={yAxisConfig}
          xAxisConfig={xAxisConfig}
          legendConfig={legendConfig}
          navigationConfig={navigationConfig}
        />
      );
    expect(container.querySelectorAll('rect').length).toBe(35);
    expect(getAllByTestId('column-chart-grid-line')).toHaveLength(10);
    expect(container.querySelectorAll('g.y-axis>g.tick>text').length).toBe(
      yAxisConfig.maxValue! + 1
    );
    expect(container.querySelectorAll('g.x-axis>g.tick>text').length).toBe(
      xAxisConfig.labels?.length
    );

    expect(getByText('Vertical Title')).toBeInTheDocument();
    expect(getByText('Horizontal Title')).toBeInTheDocument();

    expect(getByTestId('column-chart')).toBeInTheDocument();
    expect(
      getByTestId('column-chart-navigate-button-prev')
    ).toBeInTheDocument();
    expect(
      getByTestId('column-chart-navigate-button-next')
    ).toBeInTheDocument();

    expect(container).toMatchSnapshot();

    // Check if the long label is truncated
    expect(getByText('Jul 2024 ...')).toBeInTheDocument();

    // Check if the long label has a tooltip
    expect(
      getByTitle('Jul 2024 too too too too too too long')
    ).toBeInTheDocument();
  });

  it('displays legends and circle prefix', () => {
    const { getByText, getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={{ ...legendConfig, maxLegend: 10, selectable: false }}
      />
    );
    expect(getByText('07th')).toBeInTheDocument();
    expect(getByText('14th')).toBeInTheDocument();
    expect(getByText('21st')).toBeInTheDocument();
    expect(getByText('25th')).toBeInTheDocument();
    expect(getByText('31st')).toBeInTheDocument();

    expect(getByTestId('legend-prefix-07th-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-14th-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-21st-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-25th-circle')).toBeInTheDocument();
    expect(getByTestId('legend-prefix-31st-circle')).toBeInTheDocument();
  });

  it('displays legends and checkboxes', () => {
    const { getByText, getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={{ ...legendConfig, maxLegend: 10 }}
      />
    );
    expect(getByText('07th')).toBeInTheDocument();
    expect(getByText('14th')).toBeInTheDocument();
    expect(getByText('21st')).toBeInTheDocument();
    expect(getByText('25th')).toBeInTheDocument();
    expect(getByText('31st')).toBeInTheDocument();

    expect(
      getByTestId('column-chart-legend-checkbox-legend-prefix-07th-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('column-chart-legend-checkbox-legend-prefix-14th-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('column-chart-legend-checkbox-legend-prefix-21st-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('column-chart-legend-checkbox-legend-prefix-25th-checkbox')
    ).toBeInTheDocument();
    expect(
      getByTestId('column-chart-legend-checkbox-legend-prefix-31st-checkbox')
    ).toBeInTheDocument();
  });

  it('handle on click uncontrolled checkbox', () => {
    const { container, getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
      />
    );

    const firstCheckbox = getByTestId(
      'column-chart-legend-checkbox-legend-prefix-07th-checkbox'
    );

    expect(firstCheckbox).toBeInTheDocument();

    userEvent.click(firstCheckbox);
    expect(container.querySelectorAll('rect').length).toBe(28);
  });

  it('handle on click controlled checkbox', () => {
    const onChange = jest.fn();
    const { container, getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={{
          ...legendConfig,
          onChange,
        }}
      />
    );

    const firstCheckbox = getByTestId(
      'column-chart-legend-checkbox-legend-prefix-07th-checkbox'
    );

    expect(firstCheckbox).toBeInTheDocument();

    userEvent.click(firstCheckbox);
    expect(onChange).toHaveBeenCalledWith(['14th', '21st', '25th', '31st']);
    expect(onChange).toBeCalledTimes(1);
    expect(container.querySelectorAll('rect').length).toBe(35);
  });

  it('hover column bar', async () => {
    const { container } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
      />
    );

    const bar = container.querySelectorAll('rect')[0];

    expect(bar).toBeInTheDocument();

    userEvent.hover(bar);

    expect(screen.getByTestId('column-chart-tooltip')).toBeInTheDocument();
  });

  it('hover more button', async () => {
    const { getByText } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
      />
    );
    const moreLegendBtn = getByText('More');

    expect(moreLegendBtn).toBeInTheDocument();

    await act(async () => {
      fireEvent.touchStart(moreLegendBtn);
    });

    expect(getByText('31st')).toBeInTheDocument();
  });

  it('can click navigation button', async () => {
    const onNavigate = jest.fn();

    const { getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        navigationConfig={{
          visible: true,
          onNavigate: (direction) => {
            onNavigate(direction);
          },
        }}
      />
    );
    userEvent.click(getByTestId('column-chart-navigate-button-prev'));

    expect(onNavigate).toHaveBeenCalledWith('prev');
    userEvent.click(getByTestId('column-chart-navigate-button-next'));

    expect(onNavigate).toHaveBeenCalledWith('next');
  });

  it('can click on a bar segment', () => {
    const onClick = jest.fn();
    const { getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ onClick }}
      />
    );
    const bar = getByTestId('column-chart-May 2023-07th-2.2');
    if (bar) fireEvent.click(bar);
    expect(onClick).toBeCalledTimes(1);
    expect(onClick).toBeCalledWith(expect.anything(), {
      label: 'May 2023',
      legend: '07th',
      data: 2.2,
    });
  });

  it('matched multiple segment', async () => {
    const { getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        highlightedItems={[
          {
            legend: '07th',
            label: 'May 2023',
          },
          {
            legend: '31st',
            label: 'May 2023',
          },
          {
            legend: '31st',
            label: 'Aug 2023',
          },
        ]}
      />
    );
    expect(getByTestId('column-chart-May 2023-07th-2.2')).toHaveAttribute(
      'filter',
      'drop-shadow(1px 1px 4px rgb(0 0 0 / 0.3))'
    );
    expect(getByTestId('column-chart-May 2023-31st-10.2')).toHaveAttribute(
      'filter',
      'drop-shadow(1px 1px 4px rgb(0 0 0 / 0.3))'
    );
    expect(getByTestId('column-chart-Aug 2023-31st-9.5')).toHaveAttribute(
      'filter',
      'drop-shadow(1px 1px 4px rgb(0 0 0 / 0.3))'
    );
  });

  it('show total', () => {
    const { getAllByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true }}
      />
    );
    expect(getAllByTestId('column-chart-total-badge')).toHaveLength(7);
  });
  it('change total format', () => {
    const { getAllByText } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
      />
    );
    expect(getAllByText('100M')).toHaveLength(7);
  });

  it('show custom tooltip', () => {
    const wrapper = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        tooltipRenderer={({ label, legendColor, value }) => (
          <div data-test-id="custome-tooltip">
            <Box
              data-test-id="legend-circle"
              style={{
                backgroundColor: legendColor,
                width: theme.sizes.xsmall,
                height: theme.sizes.xsmall,
                borderRadius: theme.radii.medium,
              }}
            />
            <Typography.Text
              fontSize={14}
              fontWeight="light"
              intent="subdued"
              tagName="span"
            >
              {label}
            </Typography.Text>
            <Typography.Text fontSize={14} fontWeight="light" tagName="span">
              {value}
            </Typography.Text>
          </div>
        )}
      />
    );

    expect(wrapper.getByTestId('column-chart')).toBeInTheDocument();
  });

  it('custom bar color', () => {
    const { getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
        styleConfig={{
          series: [
            {
              label: '07th',
              color: 'redLight30',
            },
            {
              label: '14th',
              color: 'violetLight30',
            },
            {
              label: '21st',
              color: 'greenLight30',
            },
            {
              label: '25th',
              color: 'orangeLight30',
            },
            {
              label: '31st',
              color: 'purpleLight30',
            },
          ],
        }}
      />
    );

    expect(
      getByTestId('column-chart-Jun 2023-07th-1').getAttribute('fill')
    ).toBe(theme.colors.palette['redLight30']);
  });

  it('throw error if color is missing', async () => {
    try {
      renderWithTheme(
        <ColumnChart
          data-test-id="column-chart"
          data={data}
          yAxisConfig={yAxisConfig}
          xAxisConfig={xAxisConfig}
          legendConfig={legendConfig}
          barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
          styleConfig={{
            series: [
              {
                label: '07th',
              },
              {
                label: '14th',
                color: 'violetLight30',
              },
              {
                label: '21st',
                color: 'greenLight30',
              },
              {
                label: '25th',
                color: 'orangeLight30',
              },
              {
                label: '31st',
                color: 'purpleLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it('throw error if missing label', async () => {
    try {
      renderWithTheme(
        <ColumnChart
          data-test-id="column-chart"
          data={data}
          yAxisConfig={yAxisConfig}
          xAxisConfig={xAxisConfig}
          legendConfig={legendConfig}
          barConfig={{ showTotal: true, totalFormatter: () => '100M' }}
          styleConfig={{
            series: [
              {
                label: '14th',
                color: 'violetLight30',
              },
              {
                label: '21st',
                color: 'greenLight30',
              },
              {
                label: '25th',
                color: 'orangeLight30',
              },
              {
                label: '31st',
                color: 'purpleLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it.each`
    size        | width
    ${'large'}  | ${theme.__hd__.columnChart.sizes.barWidth.large}
    ${'medium'} | ${theme.__hd__.columnChart.sizes.barWidth.medium}
  `('return correct bar width', ({ size, width }) => {
    const { getByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        barConfig={{ showTotal: true, size }}
      />
    );
    expect(
      getByTestId('column-chart-Jun 2023-07th-1').getAttribute('width')
    ).toBe(width.toString());
  });

  it('disable prev navigation button', () => {
    const onNavigate = jest.fn();
    const { getByTestId, queryByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        navigationConfig={{
          ...navigationConfig,
          onNavigate,
          disabledButtons: 'prev',
        }}
      />
    );

    const disabledButton = queryByTestId('column-chart-navigate-button-prev');

    expect(disabledButton).toBeVisible();
    expect(disabledButton).toBeDisabled();

    userEvent.click(disabledButton!);

    expect(onNavigate).toBeCalledTimes(0);

    expect(getByTestId('column-chart-navigate-button-next')).toBeVisible();
  });

  it('disable next navigation button', () => {
    const onNavigate = jest.fn();
    const { getByTestId, queryByTestId } = renderWithTheme(
      <ColumnChart
        data-test-id="column-chart"
        data={data}
        yAxisConfig={yAxisConfig}
        xAxisConfig={xAxisConfig}
        legendConfig={legendConfig}
        navigationConfig={{
          ...navigationConfig,
          onNavigate,
          disabledButtons: 'next',
        }}
      />
    );

    const disabledButton = queryByTestId('column-chart-navigate-button-next');

    expect(disabledButton).toBeVisible();
    expect(disabledButton).toBeDisabled();

    userEvent.click(disabledButton!);

    expect(onNavigate).toBeCalledTimes(0);

    expect(getByTestId('column-chart-navigate-button-prev')).toBeVisible();
  });
});
