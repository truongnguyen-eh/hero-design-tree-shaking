import React, { memo, useLayoutEffect, useMemo, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';
import { BarConfig, XAxisConfig } from '../../type';

interface XAxisProps {
  width: number;
  height: number;
  xAxisConfig?: Omit<XAxisConfig, 'maxValue'>;
  size?: BarConfig<unknown>['size'];
}

const XAxis = ({ xAxisConfig, width, height, size = 'large' }: XAxisProps) => {
  const theme = useTheme();

  const {
    __hd__: { columnChart: columnChartTheme },
  } = theme;

  const { barWidth } = columnChartTheme.sizes;

  const { xAxisTransform, xAxisLabelHorizontalPadding } =
    columnChartTheme.space;

  const XAxisRef = useRef(null);

  const labels = useMemo(
    () => xAxisConfig?.labels || [],
    [xAxisConfig?.labels]
  );

  const xScale = useMemo(() => {
    return d3
      .scaleBand<string>()
      .domain(labels as Iterable<string>)
      .range([0, width]);
  }, [labels, width]);

  // calculate max-width of x axis label. if < barWidth, get barWidth
  const xAxisLabelMaxWidth = Math.max(
    xScale.bandwidth() - 2 * xAxisLabelHorizontalPadding,
    barWidth[size]
  );

  useLayoutEffect(() => {
    const xAxisElement = d3.select(XAxisRef.current);

    const xAxisGenerator = d3.axisBottom(xScale).tickSize(0);

    const xAxis = xAxisElement
      .append('g')
      .attr('transform', `translate(0,${height + xAxisTransform})`)
      .attr('class', 'x-axis')
      .call(xAxisGenerator)
      .call((g) => g.select('.domain').remove())

      // fix issue: https://github.com/Thinkei/hero-design/issues/2696
      // solution: inspire from https://codepen.io/ChangedPurpose/pen/pEdapE
      .selectAll('.tick')
      .selectAll('text')
      .html('')
      .append('tspan')
      .text((d) => {
        return `${d}`;
      })
      .each(function (_, i, nodes) {
        const xAxisLabelElement = d3.select(nodes[i]);
        let textLength = nodes[i].getComputedTextLength?.();
        let text = xAxisLabelElement.text();
        const originalText = text;
        while (textLength > xAxisLabelMaxWidth && text.length > 0) {
          text = text.slice(0, -1);
          xAxisLabelElement.text(`${text}...`);
          textLength = nodes[i].getComputedTextLength();
        }

        if (text !== originalText) {
          // add tooltip for xAxisLabelElement
          xAxisLabelElement
            .attr('title', originalText)
            .append('title')
            .text(originalText);
        }
      });

    return () => {
      xAxis.remove();
    };
  }, [height, width, xAxisLabelMaxWidth, xAxisTransform, xScale]);

  return <g ref={XAxisRef} />;
};

export default memo(XAxis);
