import React, { memo, useLayoutEffect, useMemo, useRef } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';

interface YAxisProps {
  height: number;
  maxValue: number;
  minValue: number;
  getAxisSize: (size: { width: number; height: number }) => void;
  step?: number;
}

const YAxis = ({
  maxValue,
  minValue,
  height,
  getAxisSize,
  step,
}: YAxisProps) => {
  const theme = useTheme();

  const {
    __hd__: { columnChart: columnChartTheme },
  } = theme;

  const { yAxisTransform, barMarginTop } = columnChartTheme.space;

  const YAxisRef = useRef(null);

  const yScale = useMemo(() => {
    return d3.scaleLinear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);

  const tickValues = useMemo(
    () =>
      step
        ? Array.from({ length: maxValue + 1 }, (_v, i) => i).filter(
            (v) => v % (step || 1) === 0
          )
        : Array.from({ length: maxValue + 1 }, (_v, i) => i),
    [maxValue, step]
  );

  useLayoutEffect(() => {
    const yAxisElement = d3.select(YAxisRef.current);

    const yAxisGenerator = d3
      .axisLeft(yScale)
      .tickSize(0)
      .tickValues(tickValues);

    const yAxis = yAxisElement
      .append('g')
      .attr('transform', `translate(${yAxisTransform},0)`)
      .attr('class', 'y-axis')
      .call(yAxisGenerator)
      .call((g) => g.select('.domain').remove());

    const { width: yAxisW, height: yAxisH } =
      yAxis.node()?.getBoundingClientRect() || {};

    getAxisSize({ width: yAxisW || 0, height: yAxisH || 0 });

    return () => {
      yAxis.remove();
    };
  }, [barMarginTop, getAxisSize, height, tickValues, yAxisTransform, yScale]);

  return <g ref={YAxisRef} />;
};

export default memo(YAxis);
