import React from 'react';
import { NavigationConfig } from '../type';
import {
  StyledNavigationButtonsChildrenWrapper,
  StyledNavigationButtonsWrapper,
  StyledNavigateButton,
  StyledNavigateButtonWrapper,
} from './StyledLineChart';

type NavigationButtonsProps = {
  'data-test-id'?: string;
  visible?: boolean;
  onNavigate?: (direction: 'next' | 'prev') => void;
  children: React.ReactNode;
  disabledButtons?: NavigationConfig['disabledButtons'];
};
// This comopnent helps to render navigation buttons for line chart
const NavigationButtons = ({
  'data-test-id': dataTestId,
  visible,
  onNavigate,
  children,
  disabledButtons,
}: NavigationButtonsProps) => {
  return (
    <StyledNavigationButtonsWrapper>
      {visible && (
        <StyledNavigateButtonWrapper>
          <StyledNavigateButton
            size="large"
            icon="single-left-arrow"
            intent="text"
            onClick={() => onNavigate?.('prev')}
            data-test-id={
              dataTestId ? `${dataTestId}-navigate-button-prev` : undefined
            }
            disabled={disabledButtons === 'prev'}
          />
        </StyledNavigateButtonWrapper>
      )}
      <StyledNavigationButtonsChildrenWrapper>
        {children}
      </StyledNavigationButtonsChildrenWrapper>
      {visible && (
        <StyledNavigateButtonWrapper>
          <StyledNavigateButton
            size="large"
            icon="single-right-arrow"
            intent="text"
            onClick={() => onNavigate?.('next')}
            data-test-id={
              dataTestId ? `${dataTestId}-navigate-button-next` : undefined
            }
            disabled={disabledButtons === 'next'}
          />
        </StyledNavigateButtonWrapper>
      )}
    </StyledNavigationButtonsWrapper>
  );
};

export default NavigationButtons;
