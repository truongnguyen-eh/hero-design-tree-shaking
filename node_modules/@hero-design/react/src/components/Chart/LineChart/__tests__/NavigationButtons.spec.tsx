import userEvent from '@testing-library/user-event';
import React from 'react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';
import NavigationButtons from '../NavigationButtons';

describe('NavigationButtons', () => {
  it('should render', () => {
    const wrapper = renderWithTheme(
      <NavigationButtons visible data-test-id="navigation-buttons">
        <div>chart content</div>
      </NavigationButtons>
    );

    expect(wrapper.container).toMatchSnapshot();
    expect(wrapper.getByText('chart content')).toBeVisible();
    expect(
      wrapper.getByTestId('navigation-buttons-navigate-button-prev')
    ).toBeVisible();
    expect(
      wrapper.getByTestId('navigation-buttons-navigate-button-next')
    ).toBeVisible();
  });

  it('should not render if visible = false', () => {
    const wrapper = renderWithTheme(
      <NavigationButtons data-test-id="navigation-buttons">
        <div>chart content</div>
      </NavigationButtons>
    );

    expect(wrapper.container).toMatchSnapshot();
    expect(wrapper.getByText('chart content')).toBeVisible();
    expect(
      wrapper.queryAllByTestId('navigation-buttons-navigate-button-prev')
    ).toHaveLength(0);
    expect(
      wrapper.queryAllByTestId('navigation-buttons-navigate-button-next')
    ).toHaveLength(0);
  });

  it.each`
    disabledDirection | enabledDirection
    ${'prev'}         | ${'next'}
    ${'next'}         | ${'prev'}
  `('should disable prev button', ({ disabledDirection, enabledDirection }) => {
    const onNavigate = jest.fn();
    const { getByTestId } = renderWithTheme(
      <NavigationButtons
        data-test-id="navigation-buttons"
        disabledButtons={disabledDirection}
        onNavigate={onNavigate}
        visible
      >
        <div>chart content</div>
      </NavigationButtons>
    );

    const disableButton = getByTestId(
      `navigation-buttons-navigate-button-${disabledDirection}`
    );

    expect(disableButton).toBeVisible();
    expect(disableButton).toBeDisabled();

    userEvent.click(disableButton!);

    expect(onNavigate).toBeCalledTimes(0);

    const enabledButton = getByTestId(
      `navigation-buttons-navigate-button-${enabledDirection}`
    );

    expect(enabledButton).toBeVisible();
    expect(enabledButton).toBeEnabled();

    userEvent.click(enabledButton);

    expect(onNavigate).toBeCalledTimes(1);
  });
});
