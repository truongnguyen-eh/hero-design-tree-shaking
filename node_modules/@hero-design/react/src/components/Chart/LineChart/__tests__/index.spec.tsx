/* eslint-disable no-var */
import React from 'react';
import { fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import LineChart from '../index';
import renderWithTheme from '../../../../testUtils/renderWithTheme';
import { COLOR_MESSAGE_ERROR } from '../../common/colorScale';
import theme from '../../../../theme';

const labels = [
  'May 2023',
  'Jun 2023',
  'Jul 2023',
  'Aug 2023',
  'Sep 2023',
  'Jun 2024',
  'Jul 2024',
];
const data = [
  { label: 'Kien Tran', data: [-2.2, 1, 2, 2.5, 4, 3, 4] },
  { label: 'Hau Dao', data: [1, 3, 1.5, 0.5, 2, 2, 3] },
  { label: 'Phuc Dang', data: [2, 2, 1.6, 1.5, 1, 1, 2] },
  { label: 'Vinh Phan', data: [3, 5, 2.3, 3, 3, 3, 1] },
  { label: 'Luan Lai', data: [2, 1, 3, 2, 1.5, 0.6, 1] },
];

// const numberOfColumns = 5;
describe('LineChart', () => {
  var wrapper: ReturnType<typeof renderWithTheme>;
  const onNavigateSpy = jest.fn();

  beforeEach(() => {
    global.ResizeObserver = jest.fn().mockImplementation(() => ({
      observe: jest.fn(),
      unobserve: jest.fn(),
      disconnect: jest.fn(),
    }));
    // spyOn SVG element with getBoundingClientRect return value
    jest.spyOn(HTMLElement.prototype, 'getBoundingClientRect').mockReturnValue({
      width: 960,
      height: 480,
    } as DOMRect);

    wrapper = renderWithTheme(
      <LineChart
        data={data}
        xAxisConfig={{
          title: 'Horizontal Title',
          labels,
        }}
        yAxisConfig={{
          title: 'Vertical Title',
          maxValue: 5,
          step: 1,
          tick: {
            interval: 1,
          },
        }}
        data-test-id="line-chart"
        legendConfig={{
          selectable: true,
          viewMoreText: 'More',
          maxLegend: 4,
        }}
        navigationConfig={{
          visible: true,
          onNavigate: onNavigateSpy,
        }}
      />
    );
  });

  it('should render correctly', async () => {
    await waitFor(() => {
      return expect(wrapper.getByTestId('line-chart-content-svg'));
    });

    expect(wrapper.container).toMatchSnapshot();

    // verify line-chart-content-tooltip display is none
    expect(wrapper.getByTestId('line-chart-content-tooltip')).toHaveStyle(
      'display: none'
    );

    // verify legends
    ['Kien Tran', 'Hau Dao', 'Phuc Dang', 'Vinh Phan'].forEach(
      (seriesLabel) => {
        const legend = wrapper.getByTestId('line-chart-checkbox-legend');
        expect(legend).toHaveTextContent(seriesLabel);
      }
    );

    // legend config shows 4 legends and 1 more
    ['Luan Lai'].forEach((seriesLabel) => {
      const legend = wrapper.getByTestId('line-chart-checkbox-legend');
      expect(legend).not.toHaveTextContent(seriesLabel);
    });
    // // verify x axis label
    [
      'May 2023',
      'Jun 2023',
      'Jul 2023',
      'Aug 2023',
      'Sep 2023',
      'Jun 2024',
      'Jul 2024',
    ].forEach((label) => {
      expect(wrapper.getByText(label)).toBeVisible();
    });

    // verify y axis label
    ['-3', '-2', '-1', '0', '1', '2', '3', '4', '5'].forEach((label) => {
      expect(wrapper.getByText(label)).toBeVisible();
    });

    // verify data-test-id="line-chart-content-series-lines-Vinh Phan" is rendered
    ['Kien Tran', 'Hau Dao', 'Phuc Dang', 'Vinh Phan', 'Luan Lai'].forEach(
      (seriesLabel) => {
        const seriesLine = wrapper.getByTestId(
          `line-chart-content-series-lines-${seriesLabel}`
        );
        expect(seriesLine).toBeVisible();

        // verify line type should be default
        expect(
          wrapper.getByTestId(
            `line-chart-content-series-lines-${seriesLabel}-stroke-line`
          )
        ).toBeVisible();
      }
    );

    // verify axis titles
    expect(wrapper.getByText('Horizontal Title')).toBeVisible();
    expect(wrapper.getByText('Vertical Title')).toBeVisible();
  });

  it('should reload chart when users click navigation button', async () => {
    fireEvent.click(wrapper.getByTestId('line-chart-navigate-button-next'));
    expect(onNavigateSpy).toHaveBeenCalledWith('next');

    fireEvent.click(wrapper.getByTestId('line-chart-navigate-button-prev'));
    expect(onNavigateSpy).toHaveBeenCalledWith('prev');
  });

  it('should show/hide series lines when users click legend checkbox', () => {
    // click on legend
    const legend = wrapper.getByTestId(
      'line-chart-checkbox-legend-prefix-Kien Tran-checkbox'
    );

    fireEvent.click(legend);
    ['Kien Tran'].forEach((seriesLabel) => {
      expect(
        wrapper.queryAllByTestId(
          `line-chart-content-series-lines-${seriesLabel}`
        )
      ).toHaveLength(0);
    });
  });

  it('custom line color', async () => {
    const { getByTestId } = renderWithTheme(
      <LineChart
        data={data}
        xAxisConfig={{
          title: 'Horizontal Title',
          labels,
        }}
        yAxisConfig={{
          title: 'Vertical Title',
          maxValue: 5,
          step: 1,
          tick: {
            interval: 1,
          },
        }}
        data-test-id="line-chart"
        legendConfig={{
          selectable: true,
          viewMoreText: 'More',
          maxLegend: 4,
        }}
        navigationConfig={{
          visible: true,
          onNavigate: onNavigateSpy,
        }}
        styleConfig={{
          series: [
            {
              label: 'Kien Tran',
              color: 'redLight30',
            },
            {
              label: 'Hau Dao',
              color: 'violetLight30',
            },
            {
              label: 'Phuc Dang',
              color: 'greenLight30',
            },
            {
              label: 'Vinh Phan',
              color: 'orangeLight30',
            },
            {
              label: 'Luan Lai',
              color: 'purpleLight30',
            },
          ],
        }}
      />
    );

    await waitFor(() => {
      return expect(wrapper.getByTestId('line-chart-content-svg'));
    });

    const lineWrapper = getByTestId(
      'line-chart-content-series-lines-Kien Tran-stroke-line'
    );
    expect(lineWrapper).toBeInTheDocument();

    lineWrapper.querySelectorAll('line').forEach(async (line) => {
      expect(line).toBeInTheDocument();
      await waitFor(() => {
        expect(line.getAttribute('stroke')).toBe(
          theme.colors.palette['redLight30']
        );
      });
    });
  });

  it('throw error if color is missing', async () => {
    try {
      renderWithTheme(
        <LineChart
          data={data}
          xAxisConfig={{
            title: 'Horizontal Title',
            labels,
          }}
          yAxisConfig={{
            title: 'Vertical Title',
            maxValue: 5,
            step: 1,
            tick: {
              interval: 1,
            },
          }}
          data-test-id="line-chart"
          legendConfig={{
            selectable: true,
            viewMoreText: 'More',
            maxLegend: 4,
          }}
          navigationConfig={{
            visible: true,
            onNavigate: onNavigateSpy,
          }}
          styleConfig={{
            series: [
              {
                label: 'Kien Tran',
              },
              {
                label: 'Hau Dao',
                color: 'violetLight30',
              },
              {
                label: 'Phuc Dang',
                color: 'greenLight30',
              },
              {
                label: 'Vinh Phan',
                color: 'orangeLight30',
              },
              {
                label: 'Luan Lai',
                color: 'purpleLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });

  it('throw error if missing label', async () => {
    try {
      renderWithTheme(
        <LineChart
          data={data}
          xAxisConfig={{
            title: 'Horizontal Title',
            labels,
          }}
          yAxisConfig={{
            title: 'Vertical Title',
            maxValue: 5,
            step: 1,
            tick: {
              interval: 1,
            },
          }}
          data-test-id="line-chart"
          legendConfig={{
            selectable: true,
            viewMoreText: 'More',
            maxLegend: 4,
          }}
          navigationConfig={{
            visible: true,
            onNavigate: onNavigateSpy,
          }}
          styleConfig={{
            series: [
              {
                label: 'Hau Dao',
                color: 'violetLight30',
              },
              {
                label: 'Phuc Dang',
                color: 'greenLight30',
              },
              {
                label: 'Vinh Phan',
                color: 'orangeLight30',
              },
              {
                label: 'Luan Lai',
                color: 'purpleLight30',
              },
            ],
          }}
        />
      );
    } catch (error) {
      if (error instanceof Error) {
        expect(error.message).toBe(`[Hero-design] ${COLOR_MESSAGE_ERROR}`);
      }
    }
  });
});

describe('LineChart navigation interaction', () => {
  it.each`
    disabledDirection | enabledDirection
    ${'prev'}         | ${'next'}
    ${'next'}         | ${'prev'}
  `(
    'should disable prev button',
    async ({ disabledDirection, enabledDirection }) => {
      const onNavigate = jest.fn();
      const { getByTestId } = renderWithTheme(
        <LineChart
          data={data}
          xAxisConfig={{
            title: 'Horizontal Title',
            labels,
          }}
          yAxisConfig={{
            title: 'Vertical Title',
            maxValue: 5,
            step: 1,
            tick: {
              interval: 1,
            },
          }}
          data-test-id="line-chart"
          legendConfig={{
            selectable: true,
            viewMoreText: 'More',
            maxLegend: 4,
          }}
          navigationConfig={{
            visible: true,
            onNavigate,
            disabledButtons: disabledDirection,
          }}
        />
      );

      const disableButton = getByTestId(
        `line-chart-navigate-button-${disabledDirection}`
      );

      expect(disableButton).toBeVisible();
      expect(disableButton).toBeDisabled();

      userEvent.click(disableButton);

      expect(onNavigate).toBeCalledTimes(0);

      const enabledButton = getByTestId(
        `line-chart-navigate-button-${enabledDirection}`
      );

      expect(enabledButton).toBeVisible();
      expect(enabledButton).toBeEnabled();

      userEvent.click(enabledButton);

      expect(onNavigate).toBeCalledTimes(1);
    }
  );
});
