import React from 'react';
import { fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../../../testUtils/renderWithTheme';
import SeriesLine from '../SeriesLine';
import theme from '../../../../../theme';

describe('SeriesLine', () => {
  it.each`
    label                     | isFillColor | points                                              | lineType            | color                   | expectedStrokeDasharray | expectedStrokeWidth
    ${'highlighted-label'}    | ${false}    | ${[{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 1 }]} | ${'highlighted'}    | ${theme.colors.primary} | ${null}                 | ${4}
    ${'default-label'}        | ${false}    | ${[{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 1 }]} | ${'default'}        | ${theme.colors.primary} | ${null}                 | ${2}
    ${'no-highlighted-label'} | ${true}     | ${[{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 1 }]} | ${'no-highlighted'} | ${theme.colors.primary} | ${'4 4'}                | ${2}
  `(
    'should render a line correctly with $label',
    ({
      label,
      isFillColor,
      points,
      lineType,
      color,
      expectedStrokeDasharray,
      expectedStrokeWidth,
    }) => {
      const { container, getByTestId, queryByTestId } = renderWithTheme(
        <SeriesLine
          label={label}
          points={points}
          type={lineType}
          color={color}
          data-test-id="line"
          isFillColor={isFillColor}
          width={960}
          height={480}
        />
      );
      expect(container).toMatchSnapshot();
      // find first line element
      const lineElement = getByTestId('line-stroke-line-0');

      if (expectedStrokeDasharray) {
        expect(lineElement).toHaveAttribute(
          'stroke-dasharray',
          expectedStrokeDasharray
        );
      } else {
        expect(lineElement).not.toHaveAttribute('stroke-dasharray');
      }
      expect(lineElement).toHaveAttribute(
        'stroke-width',
        expectedStrokeWidth.toString()
      );
      expect(lineElement).toHaveAttribute('stroke', color);
      if (isFillColor) {
        expect(getByTestId('line-fill-path')).toBeInTheDocument();
      } else {
        expect(queryByTestId('line-fill-path')).toBeNull();
      }
    }
  );

  it('should fire mouse events', () => {
    const onMouseOut = jest.fn();
    const onMouseOver = jest.fn();
    const onMouseMove = jest.fn();
    const { getByTestId } = renderWithTheme(
      <SeriesLine
        label="label"
        points={[
          { x: 1, y: 2 },
          { x: 2, y: 3 },
          { x: 3, y: 1 },
        ]}
        color={theme.colors.primary}
        onMouseOut={onMouseOut}
        onMouseOver={onMouseOver}
        onMouseMove={onMouseMove}
        data-test-id="line"
        width={960}
        height={480}
      />
    );
    const line = getByTestId('line');
    fireEvent.mouseOut(line, { clientX: 10, clientY: 20 });

    expect(onMouseOut).toHaveBeenCalledTimes(1);
    // verify the second argument is "label"
    expect(onMouseOut.mock.calls[0][1]).toBe('label');
    // find mouseover event with x and y
    fireEvent.mouseOver(line, { clientX: 10, clientY: 20 });

    // verify onMouseOver is called with correct arguments
    expect(onMouseOver).toHaveBeenCalledTimes(1);
    // verify the second argument is "label"
    expect(onMouseOver.mock.calls[0][1]).toBe('label');

    fireEvent.mouseMove(line, { clientX: 10, clientY: 20 });

    // verify onMousMove is called with correct arguments
    expect(onMouseMove).toHaveBeenCalledTimes(1);
    // verify the second argument is "label"
    expect(onMouseMove.mock.calls[0][1]).toBe('label');
  });
});
