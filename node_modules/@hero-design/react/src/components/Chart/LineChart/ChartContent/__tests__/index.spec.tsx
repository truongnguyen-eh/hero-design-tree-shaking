import React from 'react';
import { act, fireEvent, waitFor } from '@testing-library/react';
import renderWithTheme from '../../../../../testUtils/renderWithTheme';
import LineChartContent, { maxValueFromDataSet, minValueFromDataSet } from '..';
import { theme } from '../../../../..';

const data = [
  {
    color: theme.colors.primary,
    isHighlighted: false,
    label: 'Kien Tran',
    data: [-2.2, 1, 2, 2.5],
  },
  {
    color: theme.colors.primary,
    isHighlighted: false,
    label: 'Hau Dao',
    data: [1, 3, 1.5, 0.5],
  },
  {
    color: theme.colors.primary,
    isHighlighted: false,
    label: 'Phuc Dang',
    data: [2, 2, 1.6, 1.5],
  },
  {
    color: theme.colors.primary,
    isHighlighted: false,
    label: 'Vinh Phan',
    data: [3, 5, 2.3, 3],
  },
  {
    color: theme.colors.primary,
    isHighlighted: false,
    label: 'Luan Lai',
    data: [2, 1, 3, 2],
  },
];
describe('LineChartContent', () => {
  beforeAll(() => {
    global.ResizeObserver = jest.fn().mockImplementation(() => ({
      observe: jest.fn(),
      unobserve: jest.fn(),
      disconnect: jest.fn(),
    }));
    // spyOn SVG element with getBoundingClientRect return value
    jest.spyOn(HTMLElement.prototype, 'getBoundingClientRect').mockReturnValue({
      width: 960,
      height: 480,
    } as DOMRect);
  });
  it.each`
    tickInterval | maxValue | minValue | step         | expectedYAxisLabels
    ${1}         | ${6}     | ${-3}    | ${1}         | ${['-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6']}
    ${undefined} | ${6}     | ${-2.2}  | ${undefined} | ${['-2.2', '-1.2', '-0.2', '0.8', '1.8', '2.8', '3.8', '4.8', '5.8', '6']}
  `(
    'should render axis labels correctly',
    async ({ tickInterval, maxValue, minValue, step, expectedYAxisLabels }) => {
      const wrapper = renderWithTheme(
        <LineChartContent
          data={data}
          xAxisConfig={{
            title: 'Horizontal Title',
            labels: [
              'May 2023',
              'Jun 2023',
              'Jul 2023',
              'Aug 2023',
              'Sep 2023',
            ],
          }}
          yAxisConfig={{
            title: 'Vertical Title',
            maxValue,
            step,
            minValue,
            tick: {
              interval: tickInterval,
            },
          }}
          data-test-id="line-chart-content"
        />
      );
      await waitFor(() => {
        return expect(wrapper.getByTestId('line-chart-content-svg'));
      });

      expect(wrapper.container).toMatchSnapshot();
      expectedYAxisLabels.forEach((label: string) => {
        expect(wrapper.getByText(label)).toBeInTheDocument();
      });
    }
  );

  describe('no highlighted lines', () => {
    it('should render correctly', async () => {
      const wrapper = renderWithTheme(
        <LineChartContent
          data={data}
          xAxisConfig={{
            title: 'Horizontal Title',
            labels: [
              'May 2023',
              'Jun 2023',
              'Jul 2023',
              'Aug 2023',
              'Sep 2023',
            ],
          }}
          yAxisConfig={{
            title: 'Vertical Title',
            maxValue: 5,
            tick: {
              interval: 1,
            },
          }}
          data-test-id="line-chart-content"
        />
      );
      await waitFor(() => {
        return expect(wrapper.getByTestId('line-chart-content-svg'));
      });

      expect(wrapper.container).toMatchSnapshot();

      // verify line-chart-content-tooltip display is none
      expect(wrapper.getByTestId('line-chart-content-tooltip')).toHaveStyle(
        'display: none'
      );

      // verify data-test-id="line-chart-content-series-lines-Vinh Phan" is rendered
      ['Kien Tran', 'Hau Dao', 'Phuc Dang', 'Vinh Phan', 'Luan Lai'].forEach(
        (seriesLabel) => {
          const seriesLine = wrapper.getByTestId(
            `line-chart-content-series-lines-${seriesLabel}`
          );
          expect(seriesLine).toBeVisible();

          // verify line type should be default
          expect(
            wrapper.getByTestId(
              `line-chart-content-series-lines-${seriesLabel}-stroke-line-0`
            )
          ).toHaveAttribute('stroke-width', '2');
        }
      );
      // verify x axis label
      ['May 2023', 'Jun 2023', 'Jul 2023', 'Aug 2023', 'Sep 2023'].forEach(
        (label) => {
          expect(wrapper.getByText(label)).toBeVisible();
        }
      );

      // verify y axis label
      ['-3', '-2', '-1', '0', '1', '2', '3', '4', '5'].forEach((label) => {
        expect(wrapper.getByText(label)).toBeInTheDocument();
      });
    });
  });

  describe('with highlighted lines', () => {
    it('should render correctly', async () => {
      // set isHighlighted = true for Phuc Dang and Kien Tran
      const dataWithHighlightedLine = data.map((item) => {
        if (item.label === 'Phuc Dang' || item.label === 'Kien Tran') {
          return {
            ...item,
            isHighlighted: true,
          };
        }
        return item;
      });
      const wrapper = renderWithTheme(
        <LineChartContent
          data={dataWithHighlightedLine}
          xAxisConfig={{
            title: 'Horizontal Title',
            labels: [
              'May 2023',
              'Jun 2023',
              'Jul 2023',
              'Aug 2023',
              'Sep 2023',
            ],
          }}
          yAxisConfig={{
            title: 'Vertical Title',
            maxValue: 5,
            tick: {
              interval: 1,
            },
          }}
          data-test-id="line-chart-content"
        />
      );
      await waitFor(() => {
        return expect(wrapper.getByTestId('line-chart-content-svg'));
      });

      expect(wrapper.container).toMatchSnapshot();

      // verify line-chart-content-tooltip display is none
      expect(wrapper.getByTestId('line-chart-content-tooltip')).toHaveStyle(
        'display: none'
      );

      // verify data-test-id="line-chart-content-series-lines-Vinh Phan" is rendered
      ['Hau Dao', 'Vinh Phan', 'Luan Lai'].forEach((seriesLabel) => {
        const seriesLine = wrapper.getByTestId(
          `line-chart-content-series-lines-${seriesLabel}`
        );
        expect(seriesLine).toBeVisible();

        // verify line type should be no-highlight
        expect(
          wrapper.getByTestId(
            `line-chart-content-series-lines-${seriesLabel}-stroke-line-0`
          )
        ).toHaveAttribute('stroke-width', '2');
        expect(
          wrapper.getByTestId(
            `line-chart-content-series-lines-${seriesLabel}-stroke-line-0`
          )
        ).toHaveAttribute('stroke-dasharray', '4 4');
      });

      // verify Phuc Dang line type should be highlighted
      ['Kien Tran', 'Phuc Dang'].forEach((seriesLabel) => {
        const seriesLine = wrapper.getByTestId(
          `line-chart-content-series-lines-${seriesLabel}`
        );
        expect(seriesLine).toBeVisible();

        // verify line type should be highlighted
        expect(
          wrapper.getByTestId(
            `line-chart-content-series-lines-${seriesLabel}-stroke-line-0`
          )
        ).toHaveAttribute('stroke-width', '4');
      });
    });
  });

  describe('with tooltip', () => {
    it('should render correctly', async () => {
      SVGSVGElement.prototype.getScreenCTM = jest.fn().mockReturnValue({
        inverse: () => ({
          x: 100,
          y: 100,
        }),
      } as any);
      SVGSVGElement.prototype.createSVGPoint = jest.fn().mockReturnValue({
        x: 100,
        y: 100,
        matrixTransform: () => ({
          x: 100,
          y: 100,
        }),
      } as any);

      const wrapper = renderWithTheme(
        <LineChartContent
          data={data}
          xAxisConfig={{
            title: 'Horizontal Title',
            labels: [
              'May 2023',
              'Jun 2023',
              'Jul 2023',
              'Aug 2023',
              'Sep 2023',
            ],
          }}
          yAxisConfig={{
            title: 'Vertical Title',
            maxValue: 5,
            tick: {
              interval: 1,
            },
          }}
          data-test-id="line-chart-content"
        />
      );
      await waitFor(() => {
        return expect(wrapper.getByTestId('line-chart-content-svg'));
      });

      expect(wrapper.getByTestId('line-chart-content-tooltip')).toHaveStyle(
        'display: none'
      );
      // verify data-tet-id="highlight-circle" has property display none
      expect(wrapper.getByTestId('highlight-circle')).toHaveAttribute(
        'display',
        'none'
      );

      act(() => {
        fireEvent.mouseMove(
          wrapper.getByTestId('line-chart-content-series-lines-Kien Tran')
        );
      });

      // after mouse move , tooltip and highlight should be visible
      expect(wrapper.getByTestId('line-chart-content-tooltip')).toHaveStyle(
        'display: block'
      );
      expect(wrapper.getByTestId('highlight-circle')).toHaveAttribute(
        'display',
        'block'
      );
    });
  });
});

describe('maxValueFromDataSet', () => {
  it('should return max value from data set', () => {
    const value = maxValueFromDataSet(data);
    expect(value).toEqual(5);
  });
});

describe('minValueFromDataSet', () => {
  it('should return max value from data set', () => {
    const value = minValueFromDataSet(data);
    expect(value).toEqual(-2.2);
  });
});
