import React from 'react';
import { fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../../../testUtils/renderWithTheme';
import SeriesLines from '../SeriesLines';
import theme from '../../../../../theme';

const points = [
  {
    x: 0,
    y: 0,
  },
  {
    x: 1,
    y: 1,
  },
  {
    x: 2,
    y: 2,
  },
];

describe('SeriesLines', () => {
  it('should render with no hightlighted item', () => {
    const { container, getByTestId } = renderWithTheme(
      <SeriesLines
        seriesLinesData={[
          {
            points,
            color: theme.colors.primary,
            label: 'series-1',
            isHighlighted: false,
          },
        ]}
        width={960}
        height={480}
        data-test-id="series-lines"
      />
    );
    expect(container).toMatchSnapshot();

    // the numbers of lines should be 1
    expect(container.querySelectorAll('line').length).toBe(2);

    expect(getByTestId('series-lines-series-1-stroke-line-0')).toHaveAttribute(
      'stroke',
      theme.colors.primary
    );
    expect(getByTestId('series-lines-series-1-stroke-line-0')).toHaveAttribute(
      'stroke-width',
      '2'
    );
    expect(getByTestId('series-lines-series-1-stroke-line-0')).toHaveAttribute(
      'stroke',
      theme.colors.primary
    );
  });

  it('should render with hightlighted item', () => {
    const { container } = renderWithTheme(
      <SeriesLines
        seriesLinesData={[
          {
            points,
            color: theme.colors.primary,
            label: 'series-highlighted',
            isHighlighted: true,
          },
          {
            points,
            color: theme.colors.primary,
            label: 'series-no-highlighted',
            isHighlighted: false,
          },
        ]}
        data-test-id="series-lines"
        width={960}
        height={480}
      />
    );
    expect(container).toMatchSnapshot();
    // query highlighted line by data-test-id
    const highlightLines = container.querySelector(
      '[data-test-id="series-lines-series-highlighted-stroke-line"]'
    )!;
    // the numbers of lines should be 2
    expect(highlightLines.querySelectorAll('line').length).toBe(2);
    // verify the highlighted line style
    highlightLines.querySelectorAll('line').forEach((line) => {
      expect(line.getAttribute('stroke')).toBe(theme.colors.primary);
      expect(line.getAttribute('stroke-width')).toBe('4');
      // no stroke-dasharray
      expect(line.getAttribute('stroke-dasharray')).toBe(null);
    });

    // query highlighted line by data-test-id
    const noHighlightLines = container.querySelector(
      '[data-test-id="series-lines-series-no-highlighted-stroke-line"]'
    )!;
    // the numbers of lines should be 2
    expect(noHighlightLines.querySelectorAll('line').length).toBe(2);
    // verify the no-highlighted line style
    noHighlightLines.querySelectorAll('line').forEach((line) => {
      expect(line.getAttribute('stroke')).toBe(theme.colors.primary);
      expect(line.getAttribute('stroke-width')).toBe('2');
      // with stroke-dasharray
      expect(line.getAttribute('stroke-dasharray')).toBe('4 4');
    });
  });

  it('should fire mouse events', () => {
    const onMouseOut = jest.fn();
    const onMouseOver = jest.fn();
    const onMouseMove = jest.fn();
    const { getByTestId } = renderWithTheme(
      <SeriesLines
        onMouseOut={onMouseOut}
        onMouseOver={onMouseOver}
        onMouseMove={onMouseMove}
        seriesLinesData={[
          {
            points,
            color: theme.colors.primary,
            label: 'series-1',
            isHighlighted: false,
          },
        ]}
        data-test-id="series-lines"
        width={960}
        height={480}
      />
    );

    const line = getByTestId('series-lines-series-1');
    fireEvent.mouseOut(line, { clientX: 10, clientY: 20 });

    expect(onMouseOut).toHaveBeenCalledTimes(1);
    // verify the second argument is "label"
    expect(onMouseOut.mock.calls[0][1]).toBe('series-1');
    // find mouseover event with x and y
    fireEvent.mouseOver(line, { clientX: 10, clientY: 20 });

    // verify onMouseOver is called with correct arguments
    expect(onMouseOver).toHaveBeenCalledTimes(1);
    // verify the second argument is "label"
    expect(onMouseOver.mock.calls[0][1]).toBe('series-1');

    fireEvent.mouseMove(line, { clientX: 10, clientY: 20 });

    // verify onMousMove is called with correct arguments
    expect(onMouseMove).toHaveBeenCalledTimes(1);
    // verify the second argument is "label"
    expect(onMouseMove.mock.calls[0][1]).toBe('series-1');
  });

  it('should render with fill-color', () => {
    const { container, getByTestId } = renderWithTheme(
      <SeriesLines
        seriesLinesData={[
          {
            points,
            color: theme.colors.primary,
            label: 'series-1',
            isHighlighted: false,
          },
        ]}
        width={960}
        height={480}
        isFillColor
        data-test-id="series-lines"
      />
    );
    expect(container).toMatchSnapshot();

    // the numbers of lines should be 1 (fill color path)
    expect(container.querySelectorAll('path').length).toBe(1);
    // expect series-lines-series-1-stroke-line-0 have correct properties
    expect(getByTestId('series-lines-series-1-stroke-line-0')).toHaveAttribute(
      'stroke',
      theme.colors.primary
    );
    expect(getByTestId('series-lines-series-1-stroke-line-0')).toHaveAttribute(
      'stroke-width',
      '2'
    );
    expect(getByTestId('series-lines-series-1-stroke-line-0')).toHaveAttribute(
      'stroke',
      theme.colors.primary
    );

    expect(getByTestId('series-lines-series-1-fill-path')).toHaveAttribute(
      'd',
      'M 0 0 L 1 1 L 2 2 V 480 H 0 Z'
    );
  });
});
