import React, { memo, useMemo } from 'react';
import * as d3 from 'd3';
import { useTheme } from 'styled-components';

type YAxisGridProps = {
  /*
   * The y axis max value
   */
  maxValue: number;
  /*
   * The y axis min value
   */
  minValue: number;
  /**
   * The y axis interval
   * */
  interval: number;

  // The width of the chart.
  width: number;
  // The height of the chart.
  height: number;
  // The data test id of the grid lines.
  'data-test-id'?: string;
};
// This component renders the y-axis grid lines
const YAxisGrid = ({
  maxValue,
  minValue,
  interval,
  width,
  height,
  'data-test-id': dataTestId,
}: YAxisGridProps) => {
  const yScale = useMemo(() => {
    return d3.scaleLinear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);

  const lineChartTheme = useTheme().__hd__.lineChart;

  const ticksValues = useMemo(() => {
    const ticks = [];
    for (let i = minValue; i <= maxValue; i += interval) {
      ticks.push(i);
    }

    return ticks;
  }, [maxValue, minValue, interval]);

  const yAxisGrid = ticksValues.map((value) => {
    const y = yScale(value);
    return (
      <g key={yScale(value)} data-test-id="y-axis-grid-line">
        <line
          strokeDasharray={lineChartTheme.strokeDasharray.gridLine}
          x1={0}
          x2={width}
          y1={y}
          y2={y}
          stroke={lineChartTheme.colors.gridLineBackgroundColor}
          opacity={lineChartTheme.opacity.gridLine}
        />
      </g>
    );
  });

  return <g data-test-id={dataTestId}>{yAxisGrid}</g>;
};

export default memo(YAxisGrid);
