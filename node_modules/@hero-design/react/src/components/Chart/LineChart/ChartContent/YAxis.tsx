import React, { memo, useMemo, useRef, useLayoutEffect, useState } from 'react';
import { useTheme } from 'styled-components';
import * as d3 from 'd3';
import { ElementSize } from '../types';

type YAxisProps = {
  maxValue: number;
  minValue: number;
  step: number;
  width: number;
  height: number;
};

const formatFloat = (value: number) => {
  // Use toFixed(15) to ensure all available decimal places
  let formattedString = parseFloat(value.toFixed(15)).toString();

  // Remove trailing zeros after the decimal point
  formattedString = formattedString.replace(/(\.\d*?)0+$/, '$1');

  return formattedString;
};

// this component render the y axis values
const YAxis = ({ maxValue, minValue, step, width, height }: YAxisProps) => {
  const yAxisRef = useRef(null);
  // Y axis
  const yScale = useMemo(() => {
    return d3.scaleLinear().domain([minValue, maxValue]).range([height, 0]);
  }, [height, maxValue, minValue]);

  const {
    __hd__: { lineChart: lineChartTheme },
  } = useTheme();
  const { yAxisTransform } = lineChartTheme.space;

  // get array of numbers from 0 to max value with step
  const ticksValues = useMemo(() => {
    const ticks = [];
    for (let i = minValue; i <= maxValue; i += step) {
      ticks.push(i);
    }

    if (ticks[ticks.length - 1] !== maxValue) {
      ticks.push(maxValue);
    }
    return ticks;
  }, [maxValue, minValue, step]);

  const [yAxisSize, setYAxisSize] = useState<ElementSize>({
    height: 0,
    width: 0,
  });

  useLayoutEffect(() => {
    const yAxisSVGElement = d3.select(yAxisRef.current);
    const yAxisGenerator = d3
      .axisLeft(yScale)
      .tickSize(0)
      .tickFormat((d: d3.NumberValue) => {
        return formatFloat(d.valueOf());
      })
      .tickValues(ticksValues);
    const yAxis = yAxisSVGElement
      .append('g')
      .attr(
        'transform',
        `translate(${width - yAxisTransform - yAxisSize.width} ,0)`
      )
      .attr('class', 'y-axis')
      .call(yAxisGenerator)
      .call((g) => g.select('.domain').remove());

    const { width: yAxisW, height: yAxisH } =
      yAxis.node()?.getBoundingClientRect() || {};

    setYAxisSize({ width: yAxisW || 0, height: yAxisH || 0 });
    return () => {
      yAxisSVGElement.selectAll('*').remove();
    };
  }, [yScale, height, width, ticksValues, yAxisSize.width, yAxisTransform]);

  return <g data-test-id="y-axis-container" ref={yAxisRef} />;
};

export default memo(YAxis);
