import React, { memo, useMemo, useRef, useLayoutEffect } from 'react';
import { useTheme } from 'styled-components';
import * as d3 from 'd3';
import { LineChartXAxisConfig } from '../types';

type XAxisProps = {
  // x axis config
  xAxisConfig?: LineChartXAxisConfig;
  // width of the chart
  width: number;
  // height of the chart
  height: number;
};

// this component render x axis labels
const XAxis = ({ xAxisConfig, width, height }: XAxisProps) => {
  const xAxisRef = useRef(null);
  const xScale = useMemo(() => {
    const labels = xAxisConfig?.labels ?? [];
    return d3.scalePoint<string>(labels, [0, width]).align(0);
  }, [xAxisConfig?.labels, width]);

  const {
    __hd__: { lineChart: lineChartTheme },
  } = useTheme();
  const { xAxisTransform, xAxisLabelHorizontalPadding } = lineChartTheme.space;
  const { xAxisLabelMinWidth } = lineChartTheme.sizes;
  // calculate max-width of x axis label. if < barWidth, get barWidth
  const xAxisLabelMaxWidth = Math.max(
    xScale.step() - 2 * xAxisLabelHorizontalPadding,
    xAxisLabelMinWidth
  );

  useLayoutEffect(() => {
    const xAxisSVGElement = d3.select(xAxisRef.current);
    const xAxisGenerator = d3.axisBottom(xScale).tickSize(0);
    xAxisSVGElement
      .append('g')
      .attr('transform', `translate(0,${height + xAxisTransform})`)
      .attr('class', 'x-axis')
      .call(xAxisGenerator)
      .call((g) => g.select('.domain').remove())
      // fix issue: https://github.com/Thinkei/hero-design/issues/2696
      // solution: inspire from https://codepen.io/ChangedPurpose/pen/pEdapE
      .selectAll('.tick')
      .selectAll('text')
      .html('')
      .append('tspan')
      .text((d) => {
        return `${d}`;
      })
      .each(function (_, i, nodes) {
        const xAxisLabelElement = d3.select(nodes[i]);
        let textLength = nodes[i].getComputedTextLength();
        let text = xAxisLabelElement.text();
        while (textLength > xAxisLabelMaxWidth && text.length > 0) {
          text = text.slice(0, -1);
          xAxisLabelElement.text(`${text}...`);
          textLength = nodes[i].getComputedTextLength();
        }
      });

    return () => {
      xAxisSVGElement.selectAll('*').remove();
    };
  }, [xScale, height, width, xAxisLabelMaxWidth, xAxisTransform]);

  return <g data-test-id="x-axis-container" ref={xAxisRef} />;
};

export default memo(XAxis);
