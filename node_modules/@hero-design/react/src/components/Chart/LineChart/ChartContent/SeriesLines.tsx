import React, { memo, useMemo } from 'react';
import SeriesLine, { LineType } from './SeriesLine';
import { CommonProps } from '../../../common';

type Point = {
  x: number;
  y: number;
};

export type SeriesLinesData = {
  points: Point[];
  color: string;
  label: string;
  isHighlighted: boolean;
};

interface SeriesLinesProps extends CommonProps {
  /**
   * Array of series lines data.
   */
  seriesLinesData: Array<SeriesLinesData>;
  /**
   * Width of draw area.
   */
  width: number;
  /**
   * Height of draw area.
   */
  height: number;
  /**
   * Indicate to fill the area under the line.
   * */
  isFillColor?: boolean;
  /**
   * Callback function that is fired when the mouse enters the element.
   */
  onMouseOut?: (event: React.MouseEvent<SVGElement>, label: string) => void;
  /**
   * Callback function that is fired when the mouse leaves the element.
   */
  onMouseMove?: (event: React.MouseEvent<SVGElement>, label: string) => void;
  /**
   * Callback function that is fired when the mouse moves over the element.
   */
  onMouseOver?: (event: React.MouseEvent<SVGElement>, label: string) => void;
}

// this component renders the lines of the chart
const SeriesLines = ({
  'data-test-id': dataTestId,
  seriesLinesData,
  onMouseOver: _onMouseOver,
  onMouseOut: _onMouseOut,
  onMouseMove: _onMouseMove,
  width,
  height,
  isFillColor = false,
}: SeriesLinesProps) => {
  const onMouseOver = React.useCallback(
    (e, label) => {
      if (_onMouseOver) {
        _onMouseOver(e, label);
      }
    },
    [_onMouseOver]
  );

  const onMouseOut = React.useCallback(
    (e, label) => {
      if (_onMouseOut) {
        _onMouseOut(e, label);
      }
    },
    [_onMouseOut]
  );

  const onMouseMove = React.useCallback(
    (e, label) => {
      if (_onMouseMove) {
        _onMouseMove(e, label);
      }
    },
    [_onMouseMove]
  );

  const lines = useMemo(() => {
    const isAnyHighlighted = seriesLinesData.some(
      (seriesLineData) => seriesLineData.isHighlighted
    );

    return seriesLinesData.map(({ label, points, color, isHighlighted }) => {
      const lineType = ((): LineType => {
        if (!isAnyHighlighted) {
          return 'default';
        }

        return isHighlighted ? 'highlighted' : 'no-highlighted';
      })();

      return (
        <SeriesLine
          width={width}
          height={height}
          data-test-id={`${dataTestId}-${label}`}
          key={label}
          points={points}
          type={lineType}
          label={label}
          color={color}
          onMouseOver={onMouseOver}
          onMouseOut={onMouseOut}
          onMouseMove={onMouseMove}
          isFillColor={isFillColor}
        />
      );
    });
  }, [
    seriesLinesData,
    isFillColor,
    onMouseOver,
    onMouseOut,
    onMouseMove,
    dataTestId,
    width,
    height,
  ]);

  return <g data-test-id={dataTestId}>{lines}</g>;
};

export default memo(SeriesLines);
