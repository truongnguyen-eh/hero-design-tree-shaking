/* eslint-disable import/no-extraneous-dependencies */
import React from 'react';
import MediaQuery from '../index';
import renderWithTheme from '../../../testUtils/renderWithTheme';

// mock the useSizeMediaQuery hook
jest.mock('../../../utils/hooks', () => ({
  useSizeMediaQuery: () => 'small',
}));

describe('MediaQuery component', () => {
  // test the children prop
  test('renders children as a function of size', () => {
    const { getByTestId } = renderWithTheme(
      <MediaQuery>
        {(size) => <div data-test-id="children">{size}</div>}
      </MediaQuery>
    );
    expect(getByTestId('children')).toHaveTextContent('small');
  });

  // test the size props
  test('renders the component corresponding to the size', () => {
    const { getByTestId, queryByTestId } = renderWithTheme(
      <MediaQuery
        small={<div data-test-id="small">Small</div>}
        medium={<div data-test-id="medium">Medium</div>}
        large={<div data-test-id="large">Large</div>}
        xlarge={<div data-test-id="xlarge">XLarge</div>}
      />
    );
    expect(getByTestId('small')).toBeInTheDocument();
    expect(queryByTestId('medium')).not.toBeInTheDocument();
    expect(queryByTestId('large')).not.toBeInTheDocument();
    expect(queryByTestId('xlarge')).not.toBeInTheDocument();
  });

  // test the as prop
  test('renders the wrapper component with the rest props', () => {
    const { getByTestId } = renderWithTheme(
      <MediaQuery
        as="section"
        className="wrapper"
        data-test-id="wrapper-component"
      >
        {(size) => <div data-testid="children">{size}</div>}
      </MediaQuery>
    );
    const wrapper = getByTestId('wrapper-component');
    expect(wrapper).toHaveClass('wrapper');
    const elm = wrapper.tagName;
    expect(elm).toBe('SECTION');
  });
});
