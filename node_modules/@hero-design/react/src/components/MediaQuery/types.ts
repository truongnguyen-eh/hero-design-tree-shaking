import React from 'react';

export type BaseMediaQueryProps<C extends React.ElementType> = {
  /**
   * You can use the as prop to change the element render, just like styled-components.
   */
  as?: C;
};

export interface MediaQueryWithChildrenProps<C extends React.ElementType>
  extends BaseMediaQueryProps<C> {
  /**
   * Render function of children, take breakpoint as argument.
   */
  children: (bp: 'small' | 'medium' | 'large' | 'xlarge') => React.ReactNode;
}

export interface MediaQueryWithParamProps<C extends React.ElementType>
  extends BaseMediaQueryProps<C> {
  /**
   * Element to render when the breakpoint is small.
   */
  small?: React.ReactNode;
  /**
   * Element to render when the breakpoint is medium.
   */
  medium?: React.ReactNode;
  /**
   * Element to render when the breakpoint is large.
   */
  large?: React.ReactNode;
  /**
   * Element to render when the breakpoint is xlarge.
   */
  xlarge?: React.ReactNode;
  children?: undefined;
}

type InternalMediaQueryProps<C extends React.ElementType> =
  | MediaQueryWithParamProps<C>
  | MediaQueryWithChildrenProps<C>;

export type MediaQueryProps<C extends React.ElementType> =
  InternalMediaQueryProps<C> &
    Omit<React.ComponentProps<C>, keyof InternalMediaQueryProps<C>>;
