import { useTheme } from 'styled-components';
import React, { useState } from 'react';
import type { IdType } from 'react-table';
import type { Key, ReactElement } from 'react';
import { useCss } from '../../../utils/hooks';
import { Wrapper } from './Styled';

import Badge from '../../Badge';
import Button from '../../Button';
import Divider from '../../Divider';
import Dropdown from '../../Dropdown';
import Menu from '../../Menu';
import Typography from '../../Typography';
import type { CommonProps } from '../../common';
import type { IconName } from '../../Icon';
import type { DividerProps } from '../../Divider';
import { useMediaQuery } from '../../MediaQuery';
import { useTranslation } from '../../LocaleProvider/hooks';

interface BulkActionsProps<D extends Record<string, unknown>>
  extends CommonProps {
  /**
   * List of actions.
   * It's recommended that each action MUST have a key. Otherwise, React defaults to using index as key, which is an anti-pattern in React.
   */
  actions: {
    divider?: 'before' | 'after';
    icon?: IconName;
    intent?: 'primary' | 'danger' | 'success' | 'warning' | 'error';
    key?: Key;
    onClick: (selectedData: D[]) => void;
    text: string;
    variant?:
      | 'basic'
      | 'basic-transparent'
      | 'filled'
      | 'outlined'
      | 'text'
      | 'filled-reversed';
  }[];
  /**
   * Table data
   */
  data: D[];
  /**
   * Table selected rows
   */
  selectedRows: Record<IdType<D>, boolean>;
  /**
   * This function to help us detect unique rows and also how it constructs each row's underlying id property.
   */
  rowIdExtractor?: (row: D, index: number) => string;
}

const VerticalDivider = ({ sx, ...props }: DividerProps) => (
  <Divider {...props} variant="vertical" sx={{ ...sx, alignSelf: 'stretch' }} />
);

const BulkActions = <D extends Record<string, unknown>>({
  data,
  selectedRows,
  actions,
  id,
  className,
  style,
  sx = {},
  rowIdExtractor,
  'data-test-id': dataTestId,
}: BulkActionsProps<D>): ReactElement => {
  const [open, setOpen] = useState(false);
  const theme = useTheme();
  const selectedData = data.filter((row, index) =>
    rowIdExtractor
      ? selectedRows[rowIdExtractor(row, index)]
      : selectedRows[index]
  );

  const size = useMediaQuery();

  const isLargeScreen = size === 'large' || size === 'xlarge';

  const { t } = useTranslation();

  return (
    <Wrapper
      id={id}
      className={className}
      data-test-id={dataTestId}
      style={{ ...style, ...useCss(sx) }}
    >
      {isLargeScreen ? (
        <>
          <Typography.Text>
            {t('Selected rows')}
            <Badge
              intent="basic"
              content={selectedData.length}
              style={{ marginLeft: theme.space.small, lineHeight: 'unset' }}
            />
          </Typography.Text>
          <VerticalDivider sx={{ ml: 'small' }} />
          {actions.map(
            ({ text, icon, intent, variant, onClick, divider, key }) => (
              <React.Fragment key={key}>
                {divider === 'before' && (
                  <VerticalDivider
                    data-test-id="divider-left"
                    sx={{ ml: 'small' }}
                  />
                )}
                <Button
                  variant={variant}
                  text={text}
                  icon={icon}
                  intent={intent}
                  disabled={selectedData.length === 0}
                  onClick={() => onClick(selectedData)}
                  sx={{ ml: 'small' }}
                />
                {divider === 'after' && (
                  <VerticalDivider
                    data-test-id="divider-right"
                    sx={{ ml: 'small' }}
                  />
                )}
              </React.Fragment>
            )
          )}
        </>
      ) : (
        <Dropdown
          open={open}
          content={
            <Menu>
              {actions.map(({ text, icon, intent, onClick, divider, key }) => (
                <React.Fragment key={key}>
                  {divider === 'before' && (
                    <Divider data-test-id="divider-top" />
                  )}
                  <Menu.Item
                    text={
                      <Button
                        variant="text"
                        text={text}
                        icon={icon}
                        intent={intent}
                        sx={{ p: 0 }}
                      />
                    }
                    onClick={() => onClick(selectedData)}
                  />
                  {divider === 'after' && (
                    <Divider data-test-id="divider-bottom" />
                  )}
                </React.Fragment>
              ))}
            </Menu>
          }
          placement="bottom-right"
          target={
            <Button
              variant="text"
              intent="primary"
              text={
                <>
                  Selected rows
                  <Badge
                    intent="primary"
                    content={selectedData.length}
                    style={{ marginLeft: theme.space.small }}
                  />
                </>
              }
              rightIcon="single-down-arrow"
              disabled={selectedData.length === 0}
              onClick={() => setOpen(!open)}
              style={{
                display: 'inline-flex',
                alignItems: 'center',
                padding: 0,
              }}
            />
          }
          onClose={() => setOpen(false)}
        />
      )}
    </Wrapper>
  );
};

export default BulkActions;
