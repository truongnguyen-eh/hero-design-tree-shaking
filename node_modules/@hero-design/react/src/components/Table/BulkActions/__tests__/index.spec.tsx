import React from 'react';
import { fireEvent } from '@testing-library/react';

import renderWithTheme from '../../../../testUtils/renderWithTheme';
import BulkActions from '../index';

const matchMediaFn = jest.fn((query) => ({
  matches: false,
  media: query,
  onchange: null,
  addListener: jest.fn(), // deprecated
  removeListener: jest.fn(), // deprecated
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  dispatchEvent: jest.fn(),
}));

Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: matchMediaFn,
});

describe('BulkActions', () => {
  it('renders correctly when no row selected', () => {
    const { getByText, getByRole } = renderWithTheme(
      <BulkActions
        data={[
          {
            name: 'Tung',
            age: 20,
          },
          {
            name: 'Teng',
            age: 30,
          },
        ]}
        selectedRows={{ 1: false }}
        actions={[]}
      />
    );

    expect(getByText('Selected rows')).toBeVisible();
    expect(getByText('0')).toBeVisible();
    expect(getByRole('button')).toBeDisabled();
  });

  it('shows actions dropdown when click icon', async () => {
    const { queryByText, findByText, getByRole } = renderWithTheme(
      <BulkActions
        data={[
          {
            name: 'Tung',
            age: 20,
          },
          {
            name: 'Teng',
            age: 30,
          },
        ]}
        selectedRows={{ 1: true }}
        actions={[{ text: 'View', onClick: jest.fn() }]}
      />
    );

    expect(queryByText('View')).not.toBeInTheDocument();
    fireEvent.click(getByRole('button'));
    expect(await findByText('View')).toBeInTheDocument();
  });

  it('passes selected data to action click handler', () => {
    const clickHandler = jest.fn();
    const { getByText, getByRole } = renderWithTheme(
      <BulkActions
        data={[
          {
            name: 'Tung',
            age: 20,
          },
          {
            name: 'Teng',
            age: 30,
          },
        ]}
        selectedRows={{ 1: true }}
        actions={[{ text: 'View', onClick: clickHandler }]}
      />
    );

    fireEvent.click(getByRole('button'));
    fireEvent.click(getByText('View'));
    expect(clickHandler).toHaveBeenCalledWith([{ name: 'Teng', age: 30 }]);
  });

  it('renders divider corectly', () => {
    const { getByTestId, queryByTestId, getByRole } = renderWithTheme(
      <BulkActions
        data={[
          {
            name: 'Tung',
            age: 20,
          },
          {
            name: 'Teng',
            age: 30,
          },
        ]}
        selectedRows={{ 1: true }}
        actions={[
          { text: 'View', onClick: jest.fn(), divider: 'after' },
          { text: 'Delete', onClick: jest.fn() },
        ]}
      />
    );

    fireEvent.click(getByRole('button'));
    expect(getByTestId('divider-bottom')).toBeInTheDocument();
    expect(queryByTestId('divider-top')).not.toBeInTheDocument();

    fireEvent.click(document.body);
    expect(queryByTestId('divider-bottom')).not.toBeInTheDocument();
  });

  it('renders corectly on large screen', () => {
    matchMediaFn.mockImplementation((query) => ({
      matches: true,
      media: query,
      onchange: null,
      addListener: jest.fn(), // deprecated
      removeListener: jest.fn(), // deprecated
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    }));

    const clickHandler = jest.fn();

    const { getByTestId, getByRole, getByText } = renderWithTheme(
      <BulkActions
        data={[
          {
            name: 'Tung',
            age: 20,
          },
          {
            name: 'Teng',
            age: 30,
          },
        ]}
        selectedRows={{ 1: true }}
        actions={[
          { text: 'View', onClick: clickHandler, divider: 'after' },
          { text: 'Edit', onClick: jest.fn() },
          { text: 'Delete', onClick: jest.fn(), divider: 'before' },
        ]}
      />
    );

    expect(getByText('Selected rows')).toBeVisible();
    expect(getByText('1')).toBeVisible();

    expect(getByRole('button', { name: 'View' })).toBeVisible();
    expect(getByRole('button', { name: 'Edit' })).toBeVisible();
    expect(getByRole('button', { name: 'Delete' })).toBeVisible();

    expect(getByTestId('divider-right')).toBeVisible();
    expect(getByTestId('divider-left')).toBeVisible();

    fireEvent.click(getByRole('button', { name: 'View' }));
    expect(clickHandler).toHaveBeenCalledWith([{ name: 'Teng', age: 30 }]);
  });
});
