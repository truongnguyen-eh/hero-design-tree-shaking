import React, { useState, useCallback } from 'react';
import type { ReactElement, MouseEvent, Key } from 'react';
import { useCss } from '../../../utils/hooks';
import Button from '../../Button';
import Menu from '../../Menu';
import Dropdown from '../../Dropdown';
import assert from '../../../utils/assert';
import Divider from '../../Divider';
import type { IconName } from '../../Icon';
import type { CommonProps } from '../../common';
import { ButtonProps } from '../../Button/Button';

interface RowActionProps extends CommonProps {
  /**
   * List of actions to be shown in the action menu, it contains at least 1 actions.
   * It's recommended that each action MUST have a key. Otherwise, React defaults to using index as key, which is an anti-pattern in React.
   * */
  actions: {
    divider?: 'top' | 'bottom';
    icon?: IconName;
    intent?: 'text' | 'danger';
    key?: Key;
    onClick?: (e: MouseEvent) => void;
    text: string;
  }[];
}

const RowAction = ({
  actions,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: RowActionProps): ReactElement => {
  assert(actions.length > 0, `[RowAction] Need at least 1 action to render`);

  const [open, setOpen] = useState(false);
  const closeDropdown = useCallback(() => {
    setOpen(false);
  }, [setOpen]);
  const css = useCss(sx);

  if (actions.length === 1 && actions[0] !== undefined) {
    const buttonIntent: ButtonProps['intent'] =
      actions[0].intent === 'danger' ? 'danger' : undefined;
    return (
      <Button
        onClick={actions[0].onClick}
        icon={actions[0].icon}
        text={actions[0].text}
        intent={buttonIntent}
        variant="text"
        className={className}
        style={{ ...style, padding: 0 }}
        data-test-id={dataTestId}
        id={id}
      />
    );
  }

  const dropdownContent = (
    <Menu>
      {actions.map(({ divider, icon, text, onClick, intent, key }) => {
        return (
          <React.Fragment key={key}>
            {divider === 'top' && <Divider data-test-id="divider-top" />}
            <Menu.Item
              icon={icon}
              text={text}
              onClick={onClick}
              intent={intent}
            />
            {divider === 'bottom' && <Divider data-test-id="divider-bottom" />}
          </React.Fragment>
        );
      })}
    </Menu>
  );

  return (
    <Dropdown
      target={
        <Button.Icon
          icon="more-horizontal"
          intent="subdued-text"
          onClick={() => setOpen(!open)}
          data-test-id="three-dot-button"
        />
      }
      content={dropdownContent}
      open={open}
      onClose={closeDropdown}
      className={className}
      style={{ ...style, ...css }}
      data-test-id={dataTestId}
      id={id}
    />
  );
};

export default RowAction;
