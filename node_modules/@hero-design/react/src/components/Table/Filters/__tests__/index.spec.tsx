import React from 'react';

import { fireEvent, waitFor, within } from '@testing-library/react';
import useFiltersState, { getLSCacheProvider } from '../useFiltersState';

import Checkbox from '../../../Checkbox';
import DatePicker from '../../../DatePicker';
import createFilters from '../createFilters';
import Input from '../../../Input';
import MultiSelect from '../../../Select/MultiSelect';
import Radio from '../../../Radio';
import Select from '../../../Select/SingleSelect';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

const ageOptions = [
  { value: 50, text: 'Age 50' },
  { value: 51, text: 'Age 51' },
  { value: 80, text: 'Age 80' },
  { value: 99, text: 'Age 99' },
  { value: 21, text: 'Age 21' },
];

type FilterTypes = {
  age: (string | number)[];
  dob?: string;
  ['employee_status']: string | number;
  ['marital_status']: (string | number)[];
  name?: string;
  ['name_select']?: string | number;
  ['working_range']?: {
    endDate?: string;
    startDate?: string;
  };
};

const { Filters, Filter } = createFilters<FilterTypes>();

const ExampleFilters = ({
  filterValues,
  setFilterValues,
}: {
  filterValues: FilterTypes;
  setFilterValues: (values: FilterTypes) => void;
}) => {
  return (
    <Filters
      value={filterValues}
      onChange={setFilterValues}
      clearButtonProps={{ text: 'Clear' }}
    >
      <Filter icon="search-outlined" noCaret filterKey="name">
        {({ value, onChange }) => (
          <Input value={value} onChange={(e) => onChange(e.target.value)} />
        )}
      </Filter>
      <Filter label="Marital status" filterKey="marital_status">
        {({ value, onChange }) => (
          <Checkbox.Group
            value={value}
            onChange={onChange}
            options={[
              { value: 'single', text: 'Single' },
              { value: 'in relationship', text: 'In Relationship' },
              { value: 'complicated', text: 'Complicated' },
            ]}
          />
        )}
      </Filter>
      <Filter label="Employee status" filterKey="employee_status">
        {({ value, onChange }) => (
          <Radio.Group
            value={value}
            onChange={onChange}
            options={[
              { value: 'active', text: 'Active' },
              { value: 'inactive', text: 'Inactive' },
            ]}
          />
        )}
      </Filter>
      <Filter label="Date of birth" filterKey="dob">
        {({ value, onChange }) => (
          <DatePicker value={value} onChange={onChange} />
        )}
      </Filter>
      <Filter label="Working date range" filterKey="working_range">
        {({ value, onChange }) => (
          <DatePicker.Range value={value} onChange={onChange} />
        )}
      </Filter>
      <Filter label="Employee name" filterKey="name_select" clearable={false}>
        {({ value, onChange }) => (
          <Select
            value={value}
            onChange={onChange}
            data-test-id="name-single-select"
            options={[
              { value: 'vy nguyen', text: 'Vy Nguyen' },
              { value: 'hau dao', text: 'Hau Dao' },
              { value: 'hanh le', text: 'Hanh Le' },
              { value: 'tuan thieu', text: 'Tuan Thieu' },
              { value: 'vinh tony', text: 'Vinh Tony' },
            ]}
          />
        )}
      </Filter>
      <Filter
        label="Employee age"
        filterKey="age"
        formatValue={(value) =>
          value
            .map(
              (v) => ageOptions.find((option) => option.value === v)?.text ?? ''
            )
            .join(', ')
        }
      >
        {({ value, onChange }) => (
          <MultiSelect value={value} onChange={onChange} options={ageOptions} />
        )}
      </Filter>
    </Filters>
  );
};

const NoCacheExample = () => {
  const { filterValues, setFilterValues } = useFiltersState<FilterTypes>({
    initialValues: {
      marital_status: [],
      age: [50, 51],
      employee_status: '',
      working_range: { startDate: '02/05/2021', endDate: '10/05/2021' },
    },
  });

  return (
    <ExampleFilters
      filterValues={filterValues}
      setFilterValues={setFilterValues}
    />
  );
};

const cacheProvider = getLSCacheProvider<FilterTypes>('tests/employeeFilters');

const CacheExample = () => {
  const { filterValues, setFilterValues } = useFiltersState<FilterTypes>({
    initialValues: {
      marital_status: [],
      age: [50, 51],
      employee_status: '',
    },
    cacheProvider,
    cacheOnChange: true,
  });

  return (
    <ExampleFilters
      filterValues={filterValues}
      setFilterValues={setFilterValues}
    />
  );
};

describe('Filters', () => {
  it('renders correctly', async () => {
    const { getByText, queryByTestId, getByTestId } = renderWithTheme(
      <NoCacheExample />
    );

    expect(getByText('Marital status')).toBeVisible();
    expect(getByText('Employee status')).toBeVisible();

    fireEvent.click(getByText('More'));
    await waitFor(() => {
      expect(getByText('Date of birth')).toBeVisible();
      expect(getByText('Working date range')).toBeVisible();
      expect(getByText('Employee name')).toBeVisible();
      expect(getByText('Employee age')).toBeVisible();
    });

    fireEvent.click(getByText('Employee age'));
    fireEvent.click(getByText('Age 99'));
    expect(getByText('Age 50, Age 51, Age 99')).toBeVisible();
    fireEvent.click(
      within(getByTestId('filter-value-tag-Employee age')).getByRole('button')
    );

    expect(
      queryByTestId('filter-value-tag-Employee age')
    ).not.toBeInTheDocument();
  });

  it('only clears clearable filters in More dropdown', async () => {
    const { getByText, queryByText, getByTestId, queryByDisplayValue } =
      renderWithTheme(<NoCacheExample />);

    fireEvent.click(getByText('More'));
    const nameSingleSelect = getByTestId('name-single-select');

    await waitFor(() => {
      expect(queryByDisplayValue('02/05/2021')).toBeVisible();
      expect(queryByDisplayValue('10/05/2021')).toBeVisible();
    });

    fireEvent.click(nameSingleSelect);
    fireEvent.click(getByText('Vinh Tony'));
    expect(nameSingleSelect).toSelectItem('Vinh Tony');

    fireEvent.click(getByText('Employee age'));
    fireEvent.click(getByText('Age 80'));
    expect(getByText('Age 50, Age 51, Age 80')).toBeVisible();

    const clearButton = within(
      getByTestId('grouped-filter-dropdown')
    ).getByText('Clear');
    fireEvent.click(clearButton);

    expect(queryByDisplayValue('02/05/2021')).not.toBeInTheDocument();
    expect(queryByDisplayValue('10/05/2021')).not.toBeInTheDocument();
    expect(nameSingleSelect).toSelectItem('Vinh Tony');
    expect(queryByText('Age 50, Age 51, Age 80')).not.toBeInTheDocument();
  });

  it('saves values to cache when enabled', async () => {
    const { getByText } = renderWithTheme(<CacheExample />);

    fireEvent.click(getByText('Employee age'));
    fireEvent.click(getByText('Age 99'));

    expect(await cacheProvider.load()).toEqual({
      marital_status: [],
      age: [50, 51, 99],
      employee_status: '',
    });
  });
});
