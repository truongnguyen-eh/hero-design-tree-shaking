import React from 'react';

import { fireEvent, waitFor } from '@testing-library/react';

import FilterDropdown from '../FilterDropdown';
import Filters from '../Filters';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

describe('FilterDropdown', () => {
  it('renders correctly', () => {
    const props = {
      buttonText: 'Marital Status',
      content: <div>Filter Content</div>,
    };
    const { getByText } = renderWithTheme(
      <Filters
        applyButtonProps={{ text: 'Apply', onClick: jest.fn() }}
        value={{}}
        onChange={() => undefined}
      >
        <FilterDropdown dirty={false} {...props} />
      </Filters>
    );

    expect(getByText('Marital Status')).toBeVisible();
    expect(getByText('Filter Content')).not.toBeVisible();
    fireEvent.click(getByText('Marital Status'));
    waitFor(() => expect(getByText('Filter Content')).toBeVisible());

    fireEvent.click(getByText('Apply'));
    expect(getByText('Filter Content')).not.toBeVisible();
  });

  it('calls onClearButtonClick when clicking on Clear button', () => {
    const onClear = jest.fn();
    const props = {
      buttonText: 'Marital Status',
      content: <div>Filter Content</div>,
      dirty: false,
      onClearButtonClick: onClear,
    };
    const { getByText } = renderWithTheme(
      <Filters
        clearButtonProps={{ text: 'Clear' }}
        value={{}}
        onChange={() => undefined}
      >
        <FilterDropdown {...props} />
      </Filters>
    );

    fireEvent.click(getByText('Clear'));
    expect(onClear).toBeCalledTimes(1);
  });
});
