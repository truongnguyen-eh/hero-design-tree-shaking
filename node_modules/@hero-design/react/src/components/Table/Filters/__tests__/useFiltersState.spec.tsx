import React from 'react';

import { fireEvent, waitFor } from '@testing-library/react';

import renderWithTheme from '../../../../testUtils/renderWithTheme';
import useFiltersState, { getLSCacheProvider } from '../useFiltersState';
import type { CacheProvider } from '../useFiltersState';

const NoCacheExample = () => {
  const { filterValues, setFilterValues, resetFilters } = useFiltersState({
    initialValues: {
      someKey: 'test',
    },
  });

  return (
    <div>
      <input
        value={filterValues.someKey}
        onChange={(e) => setFilterValues({ someKey: e.target.value })}
        placeholder="Type here ..."
      />
      <button type="button" onClick={() => resetFilters()}>
        Reset
      </button>
    </div>
  );
};

const defaultProvider =
  getLSCacheProvider<{ someKey: string }>('tests/someFilters');

const customProvider: CacheProvider<{ someKey: string }> & {
  value: null | { someKey: string };
} = {
  value: null,
  save(newValue) {
    return new Promise((resolve) => {
      setTimeout(() => {
        this.value = newValue;
        resolve();
      }, 100);
    });
  },
  load() {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.value);
      }, 100);
    });
  },
};

const CacheExample = ({
  options,
}: {
  options?: {
    cacheOnChange?: boolean;
    cacheProvider?: CacheProvider<{ someKey: string }>;
  };
}) => {
  const {
    filterValues,
    setFilterValues,
    cacheValues,
    loadingCache,
    resetCache,
  } = useFiltersState({
    initialValues: {
      someKey: 'test',
    },
    cacheProvider: defaultProvider,
    ...options,
  });

  return (
    <div>
      <input
        value={filterValues.someKey}
        onChange={(e) => setFilterValues({ someKey: e.target.value })}
        placeholder="Type here ..."
      />
      {loadingCache && <span>Cache is loading ...</span>}
      <button type="button" onClick={() => cacheValues()}>
        Save to cache
      </button>
      <button type="button" onClick={() => resetCache()}>
        Reset cache
      </button>
    </div>
  );
};

describe('useFiltersState', () => {
  it('works without cache', () => {
    const { getByText, getByDisplayValue, getByPlaceholderText } =
      renderWithTheme(<NoCacheExample />);

    expect(getByDisplayValue('test')).toBeVisible();
    fireEvent.change(getByPlaceholderText('Type here ...'), {
      target: { value: 'some value' },
    });
    expect(getByDisplayValue('some value')).toBeVisible();

    fireEvent.click(getByText('Reset'));
    expect(getByDisplayValue('test')).toBeVisible();
  });

  it('works with cache', async () => {
    const { getByText, getByDisplayValue, getByPlaceholderText } =
      renderWithTheme(<CacheExample />);

    expect(getByDisplayValue('test')).toBeVisible();
    fireEvent.change(getByPlaceholderText('Type here ...'), {
      target: { value: 'some value' },
    });
    expect(getByDisplayValue('some value')).toBeVisible();

    expect(await defaultProvider.load()).toEqual(null);
    fireEvent.click(getByText('Save to cache'));
    expect(await defaultProvider.load()).toEqual({
      someKey: 'some value',
    });

    fireEvent.click(getByText('Reset cache'));
    expect(await defaultProvider.load()).toEqual({
      someKey: 'test',
    });
  });

  it('works with cache and cacheOnChange enabled', async () => {
    const { getByDisplayValue, getByPlaceholderText } = renderWithTheme(
      <CacheExample options={{ cacheOnChange: true }} />
    );

    expect(getByDisplayValue('test')).toBeVisible();
    fireEvent.change(getByPlaceholderText('Type here ...'), {
      target: { value: 'something' },
    });
    expect(getByDisplayValue('something')).toBeVisible();

    expect(await defaultProvider.load()).toEqual({
      someKey: 'something',
    });
  });

  it('works with async cache', async () => {
    const { getByText, queryByText, getByDisplayValue, getByPlaceholderText } =
      renderWithTheme(
        <CacheExample
          options={{ cacheProvider: customProvider, cacheOnChange: true }}
        />
      );

    expect(getByText('Cache is loading ...')).toBeVisible();
    waitFor(() =>
      expect(queryByText('Cache is loading ...')).not.toBeVisible()
    );
    expect(getByDisplayValue('test')).toBeVisible();
    fireEvent.change(getByPlaceholderText('Type here ...'), {
      target: { value: 'something' },
    });
    expect(getByDisplayValue('something')).toBeVisible();

    expect(await defaultProvider.load()).toEqual({
      someKey: 'something',
    });
  });
});
