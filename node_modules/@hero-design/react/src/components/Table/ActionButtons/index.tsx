import React from 'react';
import { useTheme } from 'styled-components';
import type { Key, MouseEvent, ReactElement } from 'react';
import { useCss } from '../../../utils/hooks';
import { Wrapper } from './Styled';
import Button from '../../Button';
import assert from '../../../utils/assert';
import type { CommonProps } from '../../common';
import type { IconName } from '../../Icon';

type ButtonConfig = {
  icon?: IconName;
  onClick?: (e: MouseEvent) => void;
  role?: 'primary' | 'secondary';
  text: string;
};

interface ActionButtonsProps extends CommonProps {
  /**
   * List of action buttons to be shown, default role is secondary.
   * It's recommended that each action MUST have a key. Otherwise, React defaults to using index as key, which is an anti-pattern in React.
   * */
  buttons: {
    icon?: IconName;
    key?: Key;
    onClick?: (e: MouseEvent) => void;
    role?: 'primary' | 'secondary';
    text: string;
    disabled?: boolean;
  }[];
}

export const variantByRole = (
  role: 'primary' | 'secondary'
): 'filled' | 'outlined' => {
  return (
    {
      primary: 'filled',
      secondary: 'outlined',
    } as const
  )[role];
};

const isPrimary = (button: ButtonConfig): boolean => button.role === 'primary';

const ActionButtons = ({
  buttons,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: ActionButtonsProps): ReactElement => {
  assert(
    buttons.length > 0,
    `[ActionButtons] Need at least 1 button to render`
  );
  assert(
    buttons.length <= 4,
    `[ActionButtons] Maximum 4 buttons could be rendered`
  );
  assert(
    buttons.filter(isPrimary).length === 1,
    `[ActionButtons] Need to have exactly 1 primary button`
  );
  const theme = useTheme();

  return (
    <Wrapper
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      {buttons.map(
        ({ role = 'secondary', icon, text, onClick, key, disabled }) => (
          <Button
            key={key}
            icon={icon}
            text={text}
            onClick={onClick}
            variant={variantByRole(role)}
            disabled={disabled}
            style={{ marginRight: theme.space.medium }}
          />
        )
      )}
    </Wrapper>
  );
};

export default ActionButtons;
