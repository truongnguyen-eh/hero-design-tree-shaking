import React from 'react';

import {
  getDotState,
  getDotDirection,
  getButtonPlacement,
  usePropsOrInternalState,
} from '../utils';

describe('usePropsOrInternalState', () => {
  const myInitialState = 0;

  const setState = jest.fn();

  const useStateSpy = jest.spyOn(React, 'useState');

  useStateSpy.mockImplementation((init = 0) => [init, setState]);

  it.each`
    value        | setValue     | returnedTuple
    ${undefined} | ${undefined} | ${[myInitialState, setState]}
    ${3}         | ${jest.fn()} | ${[3, jest.fn()]}
  `(
    'returns correct data when value is $value and setValue is $setValue',
    ({ value, setValue, returnedTuple }) => {
      expect(JSON.stringify(usePropsOrInternalState(value, setValue))).toEqual(
        JSON.stringify(returnedTuple)
      );
    }
  );
});

describe('getDotDirection', () => {
  it.each`
    dotPlacement | state
    ${'top'}     | ${'row'}
    ${'bottom'}  | ${'row'}
    ${'left'}    | ${'column'}
    ${'right'}   | ${'column'}
  `(
    'returns $state when placement is $placement',
    ({ dotPlacement, state }) => {
      expect(getDotDirection({ dotPlacement })).toEqual(state);
    }
  );
});

describe('getDotState', () => {
  it.each`
    active   | dotPlacement | state
    ${true}  | ${'top'}     | ${'activeRow'}
    ${true}  | ${'bottom'}  | ${'activeRow'}
    ${true}  | ${'left'}    | ${'activeColumn'}
    ${true}  | ${'right'}   | ${'activeColumn'}
    ${false} | ${'top'}     | ${'defaultRow'}
    ${false} | ${'bottom'}  | ${'defaultRow'}
    ${false} | ${'left'}    | ${'defaultColumn'}
    ${false} | ${'right'}   | ${'defaultColumn'}
  `(
    'returns $state when placement is $placement and active is $active',
    ({ active, dotPlacement, state }) => {
      expect(getDotState({ active, dotPlacement })).toEqual(state);
    }
  );
});

describe('getButtonPlacement', () => {
  it.each`
    dotPlacement | state
    ${'top'}     | ${'middleRow'}
    ${'bottom'}  | ${'middleRow'}
    ${'left'}    | ${'leftColumn'}
    ${'right'}   | ${'rightColumn'}
  `(
    'returns $state when placement is $placement',
    ({ dotPlacement, state }) => {
      expect(getButtonPlacement({ dotPlacement })).toEqual(state);
    }
  );
});
