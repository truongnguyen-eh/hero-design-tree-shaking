import React from 'react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Carousel from '../index';

describe('Carousel', () => {
  const collection = [
    {
      id: 1,
      content: <p>Slide 1</p>,
    },
    {
      id: 2,
      content: <p>Slide 2</p>,
    },
  ];

  beforeAll(() => {
    jest.useFakeTimers();
  });

  afterAll(() => {
    jest.useRealTimers();
  });

  it('renders spinner when loading', () => {
    const { getByTestId, queryByTestId } = renderWithTheme(
      <Carousel collection={collection} loading />
    );

    expect(getByTestId('spinner')).toBeInTheDocument();
    expect(queryByTestId('slide-collection')).not.toBeInTheDocument();
  });

  it('renders correctly', () => {
    const { getByTestId, queryByTestId } = renderWithTheme(
      <Carousel collection={collection} />
    );

    // render 2 slides
    expect(queryByTestId('spinner')).not.toBeInTheDocument();
    expect(getByTestId('slide-1')).toBeInTheDocument();
    expect(getByTestId('slide-1')).toHaveStyle('width: 100%');
    expect(getByTestId('slide-2')).toBeInTheDocument();
    expect(getByTestId('slide-2')).toHaveStyle('width: 100%');

    // render navigation buttons and navigation dots
    expect(getByTestId('previous-slide-button')).toBeInTheDocument();
    expect(getByTestId('next-slide-button')).toBeInTheDocument();
    expect(getByTestId('dot-navigation-button-1')).toBeInTheDocument();
    expect(getByTestId('dot-navigation-button-2')).toBeInTheDocument();
  });

  it('renders multiple slides', () => {
    const { getByTestId, queryByTestId } = renderWithTheme(
      <Carousel collection={collection} shownSlides={2} />
    );

    // render 2 slides
    expect(queryByTestId('spinner')).not.toBeInTheDocument();
    expect(getByTestId('multi-slide-1')).toBeInTheDocument();
    expect(getByTestId('multi-slide-1')).toHaveStyle('width: 50%');
    expect(getByTestId('multi-slide-2')).toBeInTheDocument();
    expect(getByTestId('multi-slide-2')).toHaveStyle('width: 50%');
  });

  it('allows to navigate through slides', () => {
    const { getByTestId } = renderWithTheme(
      <Carousel collection={collection} />
    );

    const slideCollection = getByTestId('slide-collection');
    const preSlideBtn = getByTestId('previous-slide-button');
    const nextSlideBtn = getByTestId('next-slide-button');
    const slide1Btn = getByTestId('dot-navigation-button-1');
    const slide2Btn = getByTestId('dot-navigation-button-2');

    // Slide 1 is active
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Go to slide 2
    userEvent.click(slide2Btn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });

    // Go to slide 1
    userEvent.click(slide1Btn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Go to next slide
    userEvent.click(nextSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });
    userEvent.click(nextSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Go to previous slide
    userEvent.click(preSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });
    userEvent.click(preSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });
  });

  it('allows to navigate through multiple slides', () => {
    const testCollection = [
      {
        id: 1,
        content: <p>Slide 1</p>,
      },
      {
        id: 2,
        content: <p>Slide 2</p>,
      },
      {
        id: 3,
        content: <p>Slide 3</p>,
      },
      {
        id: 4,
        content: <p>Slide 4</p>,
      },
      {
        id: 5,
        content: <p>Slide 5</p>,
      },
      {
        id: 6,
        content: <p>Slide 6</p>,
      },
    ];
    const { getByTestId } = renderWithTheme(
      <Carousel collection={testCollection} shownSlides={2} scrollStep={2} />
    );

    const slideCollection = getByTestId('slide-collection');
    const preSlideBtn = getByTestId('previous-slide-button');
    const nextSlideBtn = getByTestId('next-slide-button');

    // Slide 1, 2 is active
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Go to slide 3, 4
    userEvent.click(nextSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });
    // Go to slide 5, 6
    userEvent.click(nextSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-200%)' });

    // Go to slide 3, 4
    userEvent.click(preSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });
    // Go to slide 1, 2
    userEvent.click(preSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });
  });

  it('goes through slides automatically', async () => {
    const { getByTestId } = renderWithTheme(
      <Carousel collection={collection} autoPlay />
    );
    const slideCollection = getByTestId('slide-collection');

    // Slide 1 is active
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Automatically goes to slide 2
    jest.advanceTimersByTime(2000);

    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });

    // Stop going through slide when hovering the slide
    userEvent.hover(slideCollection);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });

    // Re-create interval to go through slide;
    userEvent.unhover(slideCollection);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });

    jest.advanceTimersByTime(4000);

    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });
  });

  it('goes through slides automatically while allows manual navigation', async () => {
    const { getByTestId } = renderWithTheme(
      <Carousel collection={collection} autoPlay />
    );
    const slideCollection = getByTestId('slide-collection');
    const nextSlideBtn = getByTestId('next-slide-button');

    // Slide 1 is active
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Automatically goes to slide 2
    jest.advanceTimersByTime(2000);

    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });

    // Stop going through slide when hovering the slide
    userEvent.hover(slideCollection);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });

    // Manuall click to next slide
    userEvent.click(nextSlideBtn);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Autoplay is still being stopped
    jest.advanceTimersByTime(2000);
    expect(slideCollection).toHaveStyle({ transform: 'translateX(-0%)' });

    // Re-create interval to go through slide;
    userEvent.unhover(slideCollection);
    jest.advanceTimersByTime(2000);

    expect(slideCollection).toHaveStyle({ transform: 'translateX(-100%)' });
  });
});
