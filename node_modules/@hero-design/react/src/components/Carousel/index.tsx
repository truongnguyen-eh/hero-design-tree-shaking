import React, { useState, useEffect, useCallback } from 'react';
import type { ReactNode, ReactElement, Dispatch, SetStateAction } from 'react';

import { useCss } from '../../utils/hooks';

import {
  StyledButton,
  StyledButtonWrapper,
  StyledButtonList,
  CarouselContainer,
  CarouselWrapper,
  CarouselSingleSlide,
  CarouselSlideCollection,
  StyledButtonIconWrapper,
  MultipleSlideItem,
} from './StyledCarousel';
import Spinner from '../Spinner';
import Button from '../Button';
import {
  getDotDirection,
  getDotState,
  getButtonPlacement,
  usePropsOrInternalState,
} from './utils';
import type { CommonProps } from '../common';

export interface CarouselProps extends CommonProps {
  /**
   * Whether to scroll automatically.
   */
  autoPlay?: boolean;
  /**
   * List of items to be shown to the story board. Each item must have an unquie id.
   */
  collection: {
    content: ReactNode;
    id: number;
  }[];
  /**
   * Position of dots button. Default is 'bottom', 'left' and 'right' does not work for multiple slides.
   */
  dotPlacement?: 'top' | 'right' | 'bottom' | 'left';
  /**
   * Set interval of each slide.
   */
  interval?: number;
  /**
   * Set loading state of carousel.
   */
  loading?: boolean;
  /**
   * onItemIndexChange event handler receiving index of selected Item.
   */
  onItemIndexChange?: Dispatch<SetStateAction<number>>;
  /**
   * Current selected item index.
   */
  selectedItemIndex?: number;
  /**
   * Number of slides to be shown.
   */
  shownSlides?: number;
  /**
   * Number of slides to be scrolled when clicking next or previous button.
   */
  scrollStep?: number;
  /**
   * Color of slide background to have corresponding dots color.
   */
  variant?: 'light' | 'dark';
}

const Carousel = ({
  autoPlay = false,
  collection,
  dotPlacement = 'bottom',
  interval = 2000,
  loading = false,
  shownSlides = 1,
  scrollStep = 1,
  variant = 'light',
  className,
  style,
  sx = {},
  id,
  'data-test-id': dataTestId,
  selectedItemIndex,
  onItemIndexChange,
}: CarouselProps): ReactElement => {
  const [currentItemIndex, setCurrentItemIndex] = usePropsOrInternalState(
    selectedItemIndex,
    onItemIndexChange
  );

  const [pausingAutoPlay, setPausingAutoPlay] = useState(false);

  const onMouseEnter = useCallback(() => {
    setPausingAutoPlay(true);
  }, []);

  const onMouseLeave = useCallback(() => {
    setPausingAutoPlay(false);
  }, []);

  const moveToNextSlide = useCallback(
    (max: number) => {
      setCurrentItemIndex((curr) => {
        const next = curr + scrollStep;
        if (next > max) {
          return 0;
        }
        return next;
      });
    },
    [setCurrentItemIndex, scrollStep]
  );

  const moveToPrevSlide = useCallback(
    (max: number) => {
      setCurrentItemIndex((curr) => {
        const next = curr - scrollStep;
        if (next < 0) {
          return max;
        }
        return next;
      });
    },
    [setCurrentItemIndex, scrollStep]
  );

  const onNextButtonClick = useCallback(() => {
    moveToNextSlide(collection.length - 1);
  }, [collection, moveToNextSlide]);

  const onPrevButtonClick = useCallback(() => {
    moveToPrevSlide(collection.length - 1);
  }, [collection, moveToPrevSlide]);

  const isSingleSlideCarousel = shownSlides === 1;

  useEffect(() => {
    let timer: number;

    if (autoPlay === true && loading === false && pausingAutoPlay === false) {
      timer = window.setInterval(() => {
        moveToNextSlide(collection.length - 1);
      }, interval);
    }

    return () => {
      window.clearInterval(timer);
    };
  }, [
    autoPlay,
    pausingAutoPlay,
    loading,
    moveToNextSlide,
    interval,
    collection.length,
  ]);

  return (
    <CarouselContainer
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
      onMouseEnter={onMouseEnter}
      onMouseLeave={onMouseLeave}
      themeIsSingleSlideCarousel={isSingleSlideCarousel}
      themeDotPlacement={dotPlacement}
    >
      {loading === true ? (
        <Spinner
          data-test-id="spinner"
          style={{ minHeight: '100%', justifyContent: 'center' }}
        />
      ) : (
        <>
          <CarouselWrapper>
            <CarouselSlideCollection
              data-test-id="slide-collection"
              currentSlide={currentItemIndex}
              themeDotDirection={getDotDirection({ dotPlacement })}
              themeSlideWidth={isSingleSlideCarousel ? 100 : 100 / shownSlides}
            >
              {isSingleSlideCarousel
                ? collection.map((item) => {
                    return (
                      <CarouselSingleSlide
                        key={item.id}
                        data-test-id={`slide-${item.id}`}
                      >
                        {item.content}
                      </CarouselSingleSlide>
                    );
                  })
                : collection.map((item) => (
                    <MultipleSlideItem
                      key={item.id}
                      data-test-id={`multi-slide-${item.id}`}
                      themeSlideWidth={100 / shownSlides}
                    >
                      {item.content}
                    </MultipleSlideItem>
                  ))}
            </CarouselSlideCollection>
          </CarouselWrapper>
          <StyledButtonIconWrapper
            themeButtonPlacement={
              isSingleSlideCarousel
                ? getButtonPlacement({ dotPlacement })
                : 'middleRow'
            }
            themeVariant={variant}
            themeIsSingleSlideCarousel={isSingleSlideCarousel}
          >
            <Button.Icon
              data-test-id="previous-slide-button"
              icon={
                dotPlacement === 'top' || dotPlacement === 'bottom'
                  ? 'circle-left'
                  : 'circle-up'
              }
              onClick={onPrevButtonClick}
            />
            <Button.Icon
              data-test-id="next-slide-button"
              icon={
                dotPlacement === 'top' || dotPlacement === 'bottom'
                  ? 'circle-right'
                  : 'circle-down'
              }
              onClick={onNextButtonClick}
            />
          </StyledButtonIconWrapper>
          <StyledButtonWrapper
            themeDotPlacement={dotPlacement}
            themeDotDirection={getDotDirection({ dotPlacement })}
            themeIsSingleSlideCarousel={isSingleSlideCarousel}
          >
            {collection.map((item, index) => {
              const active = currentItemIndex === index;

              return (
                <StyledButtonList
                  key={item.id}
                  themeDotState={getDotState({
                    active,
                    dotPlacement,
                  })}
                >
                  <StyledButton
                    data-test-id={`dot-navigation-button-${item.id}`}
                    type="button"
                    onClick={(e): void => {
                      e.preventDefault();
                      setCurrentItemIndex(index);
                    }}
                    active={active}
                    themeVariant={variant}
                    themeDotDirection={getDotDirection({ dotPlacement })}
                  />
                </StyledButtonList>
              );
            })}
          </StyledButtonWrapper>
        </>
      )}
    </CarouselContainer>
  );
};

export default Carousel;
