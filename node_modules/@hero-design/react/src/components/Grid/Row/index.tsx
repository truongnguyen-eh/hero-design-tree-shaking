import React from 'react';
import type { ReactElement, ReactNode } from 'react';
import { useCss } from '../../../utils/hooks';
import StyledRow from './StyledRow';
import assert from '../../../utils/assert';
import type { CommonProps } from '../../common';
import type { Space } from '../../../theme/global/space';

type Gutter = keyof Space | 'none';

export interface RowProps extends CommonProps {
  /**
   * Row's children node.
   */
  children?: ReactNode;
  /**
   * Space between columns, format is [horizontal, vertical].
   *
   * Each value can be none or a space value (xxsmall | xsmall | small | medium | large | xlarge | xxlarge | xxxlarge | xxxxlarge), none corresponds to no space.
   */
  gutter?: [Gutter, Gutter];
}

const Row = ({
  gutter = ['none', 'none'],
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
  children,
}: RowProps): ReactElement => {
  assert(
    gutter.length === 2,
    `[Grid.Row] Gutter:${gutter} doesn't match format [horizontal, vertical]`
  );

  return (
    <StyledRow
      gutter={gutter}
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      {children}
    </StyledRow>
  );
};

export default Row;
