import React from 'react';
import { useTheme } from 'styled-components';
import type { ReactElement, SVGProps } from 'react';
import type { DefaultTheme } from 'styled-components';
import { useCss } from '../../utils/hooks';
import Icon from '../Icon';
import { Info, Wrapper } from './StyledProgressCircle';
import type { CommonProps } from '../common';
import useGetProgressState from './useGetProgressState';
import { getColorFromProgressIntent } from './utils';
import { ProgressIntent } from './types';

export interface ProgressCircleProps extends CommonProps {
  /**
   * Set intent for your custom progress.
   */
  intent?: ProgressIntent;
  /**
   * Size of progress.
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Status of progress. Use `custom` if you wanna control the intent of the progress on your own.
   */
  status?: 'active' | 'exception' | 'custom';
  /**
   * The progress completion percentage: 0-100.
   */
  value: number;
  /*
   * Custom displayed value.
   */
  valueRenderer?: (value: number) => React.ReactNode;
  /**
   * Whether to display the progress value and the status icon.
   */
  withInfo?: boolean;
}

const FULL_CIRCLE = 295.31;

const SQUARE_SVG = '0 0 100 100';

const CIRCLE_PATH_PROPS = {
  d: `M 50,50 m 0,-47
  a 47,47 0 1 1 0,94
  a 47,47 0 1 1 0,-94`,
  fillOpacity: 0,
  strokeLinecap: 'round',
  strokeDashoffset: '0px',
} as SVGProps<SVGPathElement>;

const STROKE_ANIMATION = {
  transition:
    'stroke-dashoffset 0.4s ease 0s, stroke-dasharray 0.4s ease 0s, stroke 0.4s ease 0s, stroke-width 0.06s ease 0.3s, opacity 0.4s ease 0s',
};

export const mapStrokeWidthFromSize = (
  size: NonNullable<ProgressCircleProps['size']>,
  theme: DefaultTheme
): string =>
  ({
    small: theme.__hd__.progress.sizes.circleSmallStroke,
    medium: theme.__hd__.progress.sizes.circleMediumStroke,
    large: theme.__hd__.progress.sizes.circleLargeStroke,
  }[size]);

const defaultValueRenderer = (value: number) => `${value}%`;

const ProgressCircle = ({
  intent = 'primary',
  size = 'medium',
  status = 'active',
  withInfo = true,
  value,
  valueRenderer = defaultValueRenderer,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: ProgressCircleProps): ReactElement => {
  const theme = useTheme();

  const { internalIntent, percentage } = useGetProgressState({
    value,
    status,
    intent,
  });

  const stroke =
    ((percentage === undefined ? 0 : percentage) / 100) * FULL_CIRCLE;
  const strokeWidth = mapStrokeWidthFromSize(size, theme);

  return (
    <Wrapper
      themeSize={size}
      themeIntent={internalIntent}
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      <svg viewBox={SQUARE_SVG}>
        <path
          stroke={theme.__hd__.progress.colors.progress.background}
          strokeWidth={strokeWidth}
          strokeDasharray={`${FULL_CIRCLE}px, ${FULL_CIRCLE}px`}
          {...CIRCLE_PATH_PROPS}
        />
        <path
          stroke={getColorFromProgressIntent({
            theme,
            intent: internalIntent,
            getter: (themeIntent) =>
              theme.__hd__.progress.colors.progress[themeIntent],
          })}
          strokeWidth={strokeWidth}
          strokeDasharray={`${stroke}px, ${FULL_CIRCLE}px`}
          style={STROKE_ANIMATION}
          {...CIRCLE_PATH_PROPS}
        />
      </svg>
      {withInfo === true && (
        <Info>
          {status === 'exception' && <Icon icon="cancel" intent="danger" />}
          {status === 'active' && percentage === 100 && (
            <Icon icon="checkmark" intent="success" />
          )}
          {((status === 'active' && percentage < 100) || status === 'custom') &&
            valueRenderer(percentage)}
        </Info>
      )}
    </Wrapper>
  );
};

export default ProgressCircle;
