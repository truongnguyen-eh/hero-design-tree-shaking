import styled, { css } from 'styled-components';
import { ProgressIntent } from './types';
import { getColorFromProgressIntent } from './utils';
import Tooltip from '../Tooltip';
import { ThemeScales } from '../common';
import { Palette, SystemPalette } from '../../theme/global/colors';
import { camelize } from '../../fp/function';

type SizeVariant =
  | 'small-horizontal'
  | 'small-vertical'
  | 'medium-horizontal'
  | 'medium-vertical';

const Wrapper = styled.div<{
  themeSize: 'small' | 'medium';
  themeVariant: 'horizontal' | 'vertical';
}>`
  box-sizing: border-box;
  color: ${({ theme }) => theme.__hd__.progress.colors.text};
  position: relative;
  display: flex;
  align-items: center;
  margin: 0;
  padding: 0;
  font-weight: ${({ theme }) => theme.__hd__.progress.fontWeights.default};

  ${({ themeSize, themeVariant, theme }) => {
    switch (`${themeSize}-${themeVariant}` as SizeVariant) {
      case 'small-horizontal':
        return css`
          font-size: ${theme.__hd__.progress.fontSizes.barSmall};
          line-height: ${theme.__hd__.progress.lineHeights.barSmall};
          height: ${theme.__hd__.progress.sizes.barWrapperSmall};
        `;
      case 'small-vertical':
        return css`
          font-size: ${theme.__hd__.progress.fontSizes.barSmall};
          line-height: ${theme.__hd__.progress.lineHeights.barSmall};
          width: ${theme.__hd__.progress.sizes.barWrapperSmall};
          height: 100%;
          flex-direction: column-reverse;
        `;
      case 'medium-horizontal':
        return css`
          font-size: ${theme.__hd__.progress.fontSizes.barMedium};
          line-height: ${theme.__hd__.progress.lineHeights.barMedium};
          height: ${theme.__hd__.progress.sizes.barWrapperMedium};
        `;
      case 'medium-vertical':
        return css`
          font-size: ${theme.__hd__.progress.fontSizes.barMedium};
          line-height: ${theme.__hd__.progress.lineHeights.barMedium};
          width: ${theme.__hd__.progress.sizes.barWrapperMedium};
          height: 100%;
          flex-direction: column-reverse;
        `;
    }
  }};
`;

const Background = styled.div<{
  themeFullWidth: boolean;
  themeSize: 'small' | 'medium';
  themeVariant: 'horizontal' | 'vertical';
}>`
  background-color: ${({ theme }) =>
    theme.__hd__.progress.colors.progress.background};
  border-radius: ${({ theme }) => theme.__hd__.progress.radii.bar};
  margin: 0;
  padding: 0;
  position: relative;
  display: flex;
  z-index: 1;

  ${({ themeSize, themeVariant, themeFullWidth, theme }) => {
    switch (`${themeSize}-${themeVariant}` as SizeVariant) {
      case 'small-horizontal':
        return css`
          height: ${theme.__hd__.progress.sizes.barSmall};
          width: ${themeFullWidth
            ? '100%'
            : `calc(100% - ${theme.__hd__.progress.sizes.barTextWidth})`};
        `;
      case 'medium-horizontal':
        return css`
          height: ${theme.__hd__.progress.sizes.barMedium};
          width: ${themeFullWidth
            ? '100%'
            : `calc(100% - ${theme.__hd__.progress.sizes.barTextWidth})`};
        `;
      case 'small-vertical':
        return css`
          width: ${theme.__hd__.progress.sizes.barSmall};
          height: 100%;
          flex-direction: column-reverse;
        `;
      case 'medium-vertical':
        return css`
          width: ${theme.__hd__.progress.sizes.barMedium};
          height: 100%;
          flex-direction: column-reverse;
        `;
    }
  }};
`;

const ProgressPercentage = styled.div<{
  themeIntent: ProgressIntent;
  themeSize: 'small' | 'medium';
  themeVariant: 'horizontal' | 'vertical';
  themeValue: number;
}>`
  transition: all 0.4s cubic-bezier(0.08, 0.82, 0.17, 1) 0s;
  border-radius: ${({ theme }) => theme.__hd__.progress.radii.bar};
  margin: 0;
  padding: 0;
  background-color: ${({ theme, themeIntent }) =>
    getColorFromProgressIntent({
      theme,
      intent: themeIntent,
      getter: (definedThemeIntent) =>
        theme.__hd__.progress.colors.progress[definedThemeIntent],
    })};

  ${({ themeSize, themeVariant, themeValue, theme }) => {
    switch (`${themeSize}-${themeVariant}` as SizeVariant) {
      case 'small-horizontal':
        return css`
          width: ${themeValue}%;
          height: ${theme.__hd__.progress.sizes.barSmall};
        `;
      case 'medium-horizontal':
        return css`
          width: ${themeValue}%;
          height: ${theme.__hd__.progress.sizes.barMedium};
        `;
      case 'small-vertical':
        return css`
          height: ${themeValue}%;
          width: ${theme.__hd__.progress.sizes.barSmall};
        `;
      case 'medium-vertical':
        return css`
          height: ${themeValue}%;
          width: ${theme.__hd__.progress.sizes.barMedium};
        `;
    }
  }};
`;

const Info = styled.div<{
  themeVariant: 'horizontal' | 'vertical';
  themeValue: number;
}>`
  display: flex;
  box-sizing: border-box;
  margin: 0;
  padding: 0;

  ${({ themeVariant, themeValue, theme }) => {
    switch (themeVariant) {
      case 'horizontal':
        return css`
          width: ${theme.__hd__.progress.sizes.barTextWidth};
          padding-left: ${theme.__hd__.progress.space.barTextPadding};
        `;
      case 'vertical':
        return css`
          position: absolute;
          bottom: ${themeValue}%;
          left: ${theme.__hd__.progress.space.barTextLeft};
          margin-left: ${theme.__hd__.progress.space.barTextMargin};
          transform: translateY(50%);
        `;
    }
  }};
`;

const MarkerTooltip = styled(Tooltip)<{
  themeVariant: 'horizontal' | 'vertical';
  themeValue: number;
}>`
  position: absolute;

  ${({ themeVariant, themeValue }) => {
    switch (themeVariant) {
      case 'horizontal':
        return css`
          left: ${themeValue}%;
          top: 50%;
          transform: translate(-50%, -50%);
        `;
      case 'vertical':
        return css`
          bottom: ${themeValue}%;
          left: 50%;
          transform: translate(-50%, 50%);
        `;
    }
  }};
`;

const Marker = styled.div<{
  themeSize: 'small' | 'medium';
  themeVariant: 'horizontal' | 'vertical';
  themeIntent: ThemeScales['colors'];
}>`
  margin: 0;
  padding: 0;
  background-color: ${({ theme, themeIntent }) =>
    theme.colors.palette[camelize(themeIntent) as keyof Palette] ||
    theme.colors[camelize(themeIntent) as keyof SystemPalette]};

  ${({ themeSize, themeVariant, theme }) => {
    switch (`${themeSize}-${themeVariant}` as SizeVariant) {
      case 'small-horizontal':
        return css`
          width: ${theme.__hd__.progress.sizes.markerSmallShortDim};
          height: ${theme.__hd__.progress.sizes.markerSmallLongDim};
          border-radius: calc(
            ${theme.__hd__.progress.sizes.markerSmallShortDim} / 2
          );
        `;
      case 'medium-horizontal':
        return css`
          width: ${theme.__hd__.progress.sizes.markerMediumShortDim};
          height: ${theme.__hd__.progress.sizes.markerMediumLongDim};
          border-radius: calc(
            ${theme.__hd__.progress.sizes.markerMediumShortDim} / 2
          );
        `;
      case 'small-vertical':
        return css`
          height: ${theme.__hd__.progress.sizes.markerSmallShortDim};
          width: ${theme.__hd__.progress.sizes.markerSmallLongDim};
          border-radius: calc(
            ${theme.__hd__.progress.sizes.markerSmallShortDim} / 2
          );
        `;
      case 'medium-vertical':
        return css`
          height: ${theme.__hd__.progress.sizes.markerMediumShortDim};
          width: ${theme.__hd__.progress.sizes.markerMediumLongDim};
          border-radius: calc(
            ${theme.__hd__.progress.sizes.markerMediumShortDim} / 2
          );
        `;
    }
  }};
`;

const AbsoluteMarker = styled(Marker)<{
  themeValue: number;
}>`
  position: absolute;

  ${({ themeVariant, themeValue }) => {
    switch (themeVariant) {
      case 'horizontal':
        return css`
          left: ${themeValue}%;
          top: 50%;
          transform: translate(-50%, -50%);
        `;
      case 'vertical':
        return css`
          bottom: ${themeValue}%;
          left: 50%;
          transform: translate(-50%, 50%);
        `;
    }
  }};
`;

export {
  Wrapper,
  Background,
  ProgressPercentage,
  Info,
  Marker,
  MarkerTooltip,
  AbsoluteMarker,
};
