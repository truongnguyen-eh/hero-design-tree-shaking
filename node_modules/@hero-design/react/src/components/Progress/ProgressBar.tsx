import React from 'react';
import type { ReactElement } from 'react';
import { useCss, useDeprecation } from '../../utils/hooks';
import Icon from '../Icon';
import {
  Background,
  Info,
  ProgressPercentage,
  Wrapper,
  Marker,
  MarkerTooltip,
  AbsoluteMarker,
} from './StyledProgressBar';
import type { CommonProps } from '../common';
import useGetProgressState from './useGetProgressState';
import ProgressCircle from './ProgressCircle';
import { ProgressIntent } from './types';
import { ThemeScales } from '../common';

export interface ProgressBarProps extends CommonProps {
  /**
   * Set intent for your custom progress.
   */
  intent?: ProgressIntent;
  /**
   * Markers of the progress.
   */
  markers?: {
    value: number;
    text?: string | ReactElement;
    intent: ThemeScales['colors'];
  }[];
  /**
   * Size of progress.
   */
  size?: 'small' | 'medium';
  /**
   * Status of progress. Use `custom` if you wanna control the intent of the progress on your own.
   */
  status?: 'active' | 'exception' | 'custom';
  /**
   * The progress completion percentage: 0-100.
   */
  value: number;
  /*
   * Custom displayed value.
   */
  valueRenderer?: (value: number) => React.ReactNode;
  /**
   * Variant 'bar' and 'circle' are deprecated, please use only 'vertical' and 'horizontal'. For a circle progress bar, please use Progress.Circle.
   */
  variant?: 'bar' | 'circle' | 'vertical' | 'horizontal';
  /**
   * Whether to display the progress value and the status icon.
   */
  withInfo?: boolean;
}

const defaultValueRenderer = (value: number) => `${value}%`;

const ProgressBar = ({
  intent = 'primary',
  size = 'medium',
  status = 'active',
  withInfo = true,
  value,
  valueRenderer = defaultValueRenderer,
  variant: _variant,
  markers,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: ProgressBarProps): ReactElement => {
  const variant: ProgressBarProps['variant'] =
    _variant === undefined || _variant === 'bar' ? 'horizontal' : _variant;

  useDeprecation(
    "Variant 'bar' and 'circle' are deprecated, please use only 'vertical' and 'horizontal'. For a circle progress bar, please use Progress.Circle.",
    _variant === 'bar' || _variant === 'circle'
  );

  const { internalIntent, percentage } = useGetProgressState({
    value,
    status,
    intent,
  });
  const css = useCss(sx);

  return variant === 'horizontal' || variant === 'vertical' ? (
    <Wrapper
      themeSize={size}
      themeVariant={variant}
      id={id}
      className={className}
      style={{ ...style, ...css }}
      data-test-id={dataTestId}
    >
      <Background
        themeSize={size}
        themeVariant={variant}
        themeFullWidth={withInfo === false}
      >
        <ProgressPercentage
          themeSize={size}
          themeVariant={variant}
          themeIntent={internalIntent}
          themeValue={percentage}
        />
        {markers?.map((marker) =>
          marker.text ? (
            <MarkerTooltip
              key={marker.value}
              themeVariant={variant}
              themeValue={marker.value}
              placement={variant === 'horizontal' ? 'top' : 'right'}
              target={
                <Marker
                  key={marker.value}
                  themeSize={size}
                  themeVariant={variant}
                  themeIntent={marker.intent}
                />
              }
              content={marker.text}
              data-test-id={
                dataTestId && `${dataTestId}-marker-${marker.value}`
              }
            />
          ) : (
            <AbsoluteMarker
              key={marker.value}
              themeSize={size}
              themeVariant={variant}
              themeIntent={marker.intent}
              themeValue={marker.value}
              data-test-id={
                dataTestId && `${dataTestId}-marker-${marker.value}`
              }
            />
          )
        )}
      </Background>
      {withInfo === true && (
        <Info themeVariant={variant} themeValue={percentage}>
          {status === 'exception' && (
            <Icon icon="circle-cancel" intent="danger" />
          )}
          {status === 'active' && percentage === 100 && (
            <Icon icon="circle-ok" intent="success" />
          )}
          {((status === 'active' && percentage < 100) || status === 'custom') &&
            valueRenderer(percentage)}
        </Info>
      )}
    </Wrapper>
  ) : (
    <ProgressCircle
      intent={internalIntent}
      size={size}
      status={status}
      withInfo={withInfo}
      value={percentage}
      valueRenderer={valueRenderer}
      id={id}
      className={className}
      style={{ ...style, ...css }}
      data-test-id={dataTestId}
    />
  );
};

export default ProgressBar;
