import theme from '../../../theme';
import { getColorFromProgressIntent } from '../utils';

describe('Utils: getColorFromProgressIntent', () => {
  describe('progress theme intent', () => {
    it.each`
      progressIntent | expected
      ${'primary'}   | ${'primary'}
      ${'success'}   | ${'success'}
      ${'warning'}   | ${'warning'}
      ${'danger'}    | ${'danger'}
      ${'error'}     | ${'error'}
      ${'archived'}  | ${'archived'}
    `(
      'should invoke getter with `$expected` when provided intent is `$progressIntent`',
      ({ progressIntent, expected }) => {
        const mockGetter = jest.fn();

        getColorFromProgressIntent({
          theme,
          intent: progressIntent,
          getter: mockGetter,
        });

        expect(mockGetter).toHaveBeenCalledWith(expected);
      }
    );
  });

  describe('custom intent', () => {
    it('should use fallback color if provided', () => {
      const mockGetter = jest.fn();
      const fallbackColor = '#d1d1d1';

      const output = getColorFromProgressIntent({
        theme,
        fallbackColor,
        intent: 'yellow',
        getter: mockGetter,
      });

      expect(mockGetter).not.toHaveBeenCalled();
      expect(output).toEqual(fallbackColor);
    });

    it.each`
      customIntent      | expected
      ${'yellow'}       | ${theme.colors.palette.yellow}
      ${'lightPrimary'} | ${theme.colors.lightPrimary}
    `(
      'should extract color from theme correctly when provided intent is `$customIntent`',
      ({ customIntent, expected }) => {
        const mockGetter = jest.fn();

        const output = getColorFromProgressIntent({
          theme,
          intent: customIntent,
          getter: mockGetter,
        });

        expect(mockGetter).not.toHaveBeenCalled();
        expect(output).toEqual(expected);
      }
    );
  });
});
