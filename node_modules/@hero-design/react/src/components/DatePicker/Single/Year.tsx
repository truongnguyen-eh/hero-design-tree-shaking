import React, { ReactElement, useCallback, useMemo } from 'react';
import addYears from 'date-fns/fp/addYears';
import subYears from 'date-fns/fp/subYears';
import { CommonProps } from '../../common';
import { IconName } from '../../Icon';
import { StyledSingleSelect } from './StyledSingle';
import { generateYearOptions } from '../Calendar/utils';

interface SingleYear extends CommonProps {
  /**
   * Specify the [automated assistance](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) in filling out form field values by the browser.
   */
  autoComplete?: string;
  /**
   * Whether the picker is disabled.
   */
  disabled?: boolean;
  /**
   * Whether the input is invalid.
   */
  invalid?: boolean;
  /**
   * Name of <input> element, is used to refer to the form data for submission.
   */
  name?: string;
  /**
   * Blur event handler.
   */
  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
  /**
   * onChange event handler.
   */
  onChange?: (value: number) => void;
  /**
   * Placeholder text in the absence of any value.
   */
  placeholder?: string;
  /**
   * Name of Icon or an Icon element to render on the left side of the input, before the user's cursor.
   */
  prefix?: IconName | ReactElement;
  /**
   * The size of the input box.
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Current selected date which must be in correct format. If value is invalid, it will be skipped.
   */
  value?: number;
  /**
   * The earliest year of the date user can select.
   */
  minYear?: number;
  /**
   * The earliest year of the date user can select.
   */
  maxYear?: number;
}

const DEFAULT_GAP = 100;

const SingleYear = ({
  autoComplete,
  className,
  disabled,
  invalid,
  id,
  name,
  onBlur,
  onChange,
  placeholder,
  prefix,
  size,
  style,
  sx,
  value,
  minYear,
  maxYear,
  'data-test-id': dataTestId,
}: SingleYear) => {
  const currentDate = useMemo(() => new Date(), []);

  const defaultMinYear = useMemo(
    () =>
      minYear ? new Date(minYear, 1, 1) : subYears(DEFAULT_GAP, currentDate),
    [currentDate, minYear]
  );

  const defaultMaxYear = useMemo(
    () =>
      maxYear ? new Date(maxYear, 1, 1) : addYears(DEFAULT_GAP, currentDate),
    [currentDate, maxYear]
  );
  const handleChange = useCallback(
    (_value) => {
      if (_value) {
        onChange?.(_value);
      }
    },
    [onChange]
  );

  const options = useMemo(
    () =>
      generateYearOptions({ minDate: defaultMinYear, maxDate: defaultMaxYear }),
    [defaultMaxYear, defaultMinYear]
  );

  return (
    <StyledSingleSelect
      autoComplete={autoComplete}
      className={className}
      disabled={disabled}
      invalid={invalid}
      id={id}
      name={name}
      onBlur={onBlur}
      options={options}
      onChange={handleChange}
      placeholder={placeholder}
      prefix={prefix}
      size={size}
      style={style}
      sx={sx}
      value={value}
      data-test-id={dataTestId}
    />
  );
};

export default SingleYear;
