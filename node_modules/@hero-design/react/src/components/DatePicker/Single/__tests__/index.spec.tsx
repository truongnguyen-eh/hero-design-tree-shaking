import React from 'react';
import userEvent from '@testing-library/user-event';
import { fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';
import SingleMonth from '../Month';
import { generateMonths } from '../util';
import SingleYear from '../Year';

describe('Single Month component', () => {
  const monthOptions = generateMonths(0, 11, 'LLLL');
  it('render correctly', () => {
    const { getByText, getByPlaceholderText } = renderWithTheme(
      <SingleMonth placeholder="Single Month" />
    );

    const select = getByPlaceholderText('Single Month');

    userEvent.click(select);

    monthOptions.forEach(({ text }) => {
      expect(getByText(text)).toBeVisible();
    });
  });

  it('can choose new option', () => {
    const onChange = jest.fn();
    const TestComponent = () => {
      const [value, setValue] = React.useState<number>();

      return (
        <SingleMonth
          placeholder="Single Month"
          value={value}
          onChange={(v) => {
            onChange(v);
            setValue(v);
          }}
          data-test-id="single-month"
        />
      );
    };
    const { getByRole, getByPlaceholderText, getByTestId } = renderWithTheme(
      <TestComponent />
    );

    const select = getByPlaceholderText('Single Month') as HTMLInputElement;

    fireEvent.click(select);

    const options = getByRole('option', { name: 'November' });

    fireEvent.click(options);

    expect(getByTestId('selected-item-text')).toHaveTextContent('November');

    expect(onChange).toBeCalledTimes(1);
    expect(onChange).toBeCalledWith(10);
  });

  it('disabled month', () => {
    const { getByText, getByPlaceholderText } = renderWithTheme(
      <SingleMonth placeholder="Single Month" minMonth={1} maxMonth={10} />
    );

    const select = getByPlaceholderText('Single Month');

    userEvent.click(select);

    expect(getByText('January').getAttribute('role')).toBeNull();
    expect(getByText('December').getAttribute('role')).toBeNull();
  });
});

describe('Single Year', () => {
  it('render correctly', () => {
    const { getByText, getByPlaceholderText, queryByText } = renderWithTheme(
      <SingleYear placeholder="Single Year" minYear={2024} maxYear={2026} />
    );

    const select = getByPlaceholderText('Single Year');
    userEvent.click(select);

    expect(queryByText('2023')).not.toBeInTheDocument();
    expect(getByText('2024')).toBeVisible();
    expect(getByText('2025')).toBeVisible();
    expect(getByText('2026')).toBeVisible();
    expect(queryByText('2027')).not.toBeInTheDocument();
  });

  it('do not change value when we do not add value props', () => {
    const { getByPlaceholderText, getByRole, getAllByTestId } = renderWithTheme(
      <SingleYear placeholder="Single Year" minYear={2024} maxYear={2026} />
    );

    const select = getByPlaceholderText('Single Year');
    userEvent.click(select);

    const monthOptions = getByRole('option', { name: '2025' });

    userEvent.click(monthOptions);

    expect(getAllByTestId('selected-item-text')[0]).not.toHaveTextContent(
      '2025'
    );
  });

  it('can choose new option', () => {
    const onChange = jest.fn();
    const TestComponent = () => {
      const [value, setValue] = React.useState<number>();

      return (
        <SingleYear
          placeholder="Single Year"
          minYear={2024}
          maxYear={2026}
          value={value}
          onChange={(v) => {
            onChange(v);
            setValue(v);
          }}
        />
      );
    };
    const { getByRole, getByPlaceholderText, getByTestId } = renderWithTheme(
      <TestComponent />
    );

    const select = getByPlaceholderText('Single Year') as HTMLSelectElement;

    fireEvent.click(select);

    const monthOptions = getByRole('option', { name: '2025' });

    fireEvent.click(monthOptions);

    expect(getByTestId('selected-item-text')).toHaveTextContent('2025');
    expect(onChange).toBeCalledTimes(1);
    expect(onChange).toBeCalledWith(2025);
  });

  it('with minYear', () => {
    const TestComponent = () => {
      const [value, setValue] = React.useState<number>();

      return (
        <SingleYear
          placeholder="Single Year"
          minYear={2024}
          value={value}
          onChange={(v) => {
            setValue(v);
          }}
        />
      );
    };
    const { queryByText, getByPlaceholderText } = renderWithTheme(
      <TestComponent />
    );

    const select = getByPlaceholderText('Single Year') as HTMLSelectElement;

    userEvent.click(select);

    const unableMonth = queryByText('2023');
    expect(unableMonth).not.toBeInTheDocument();
  });
  it('with maxYear', () => {
    const TestComponent = () => {
      const [value, setValue] = React.useState<number>();

      return (
        <SingleYear
          placeholder="Single Year"
          maxYear={2024}
          value={value}
          onChange={(v) => {
            setValue(v);
          }}
        />
      );
    };
    const { queryByText, getByPlaceholderText } = renderWithTheme(
      <TestComponent />
    );

    const select = getByPlaceholderText('Single Year') as HTMLSelectElement;

    userEvent.click(select);

    const unableMonth = queryByText('2025');
    expect(unableMonth).not.toBeInTheDocument();
  });
});
