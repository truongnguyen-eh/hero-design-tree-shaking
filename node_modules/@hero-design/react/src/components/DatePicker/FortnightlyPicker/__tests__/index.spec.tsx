import React from 'react';
import { fireEvent, waitFor } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import FortnightlyPicker from '../index';

describe('rendering', () => {
  it('renders correctly', () => {
    const { container } = renderWithTheme(
      <FortnightlyPicker
        minDate={new Date(2021, 0, 1)}
        maxDate={new Date(2021, 0, 31)}
      />
    );
    expect(container).toMatchSnapshot();
  });

  it('renders correct fortnightly list', async () => {
    const { getByText, getByPlaceholderText } = renderWithTheme(
      <FortnightlyPicker
        placeholder="Select Fortnightly"
        onChange={jest.fn()}
        minDate={new Date(2021, 0, 1)}
        maxDate={new Date(2021, 0, 31)}
      />
    );

    fireEvent.click(getByPlaceholderText('Select Fortnightly'));

    await waitFor(() => {
      expect(getByText('03 Jan 2021')).toBeVisible();
      expect(getByText('17 Jan 2021')).toBeVisible();
    });
  });

  it('allows to custom fortnightly format', async () => {
    const { getByText, getByPlaceholderText } = renderWithTheme(
      <FortnightlyPicker
        placeholder="Select Fortnightly"
        onChange={jest.fn()}
        minDate={new Date(2021, 0, 1)}
        maxDate={new Date(2021, 0, 31)}
        format="'Week' ww', 'yyyy"
      />
    );

    fireEvent.click(getByPlaceholderText('Select Fortnightly'));

    await waitFor(() => {
      expect(getByText('Week 02, 2021')).toBeVisible();
    });
  });

  it('allows to custom weekStartsOn', async () => {
    const { getByText, getByPlaceholderText } = renderWithTheme(
      <FortnightlyPicker
        placeholder="Select Fortnightly"
        onChange={jest.fn()}
        minDate={new Date(2021, 0, 1)}
        maxDate={new Date(2021, 0, 31)}
        weekStartsOn={1}
      />
    );

    fireEvent.click(getByPlaceholderText('Select Fortnightly'));

    await waitFor(() => {
      expect(getByText('04 Jan 2021')).toBeVisible();
      expect(getByText('18 Jan 2021')).toBeVisible();
    });
  });
});
