import React, { useCallback, useMemo } from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../../utils/hooks';
import { generateFortnightlyTime } from './utils';
import { CommonProps } from '../../common';
import { IconName } from '../../Icon';
import { StyledFortnightlyPicker } from './StyledFortnightlyPicker';

interface FortnightlyPickerProps extends CommonProps {
  /**
   * Specify the [automated assistance](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) in filling out form field values by the browser.
   */
  autoComplete?: string;
  /**
   * Whether the picker is disabled.
   */
  disabled?: boolean;
  /**
   * Week format. Following date-fns's format (https://date-fns.org/v2.16.1/docs/format).
   */
  format?: string;
  /**
   * Whether the input is invalid.
   */
  invalid?: boolean;
  /**
   * Name of <input> element, is used to refer to the form data for submission.
   */
  name?: string;
  /**
   * Blur event handler.
   */
  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
  /**
   * onChange event handler.
   */
  onChange?: (value: string | number) => void;
  /**
   * Placeholder text in the absence of any value.
   */
  placeholder?: string;
  /**
   * Name of Icon or an Icon element to render on the left side of the input, before the user's cursor.
   */
  prefix?: IconName | ReactElement;
  /**
   * The size of the input box.
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Current selected date which must be in correct format. If value is invalid, it will be skipped.
   */
  value?: string | number;
  /**
   * The earliest date user can select.
   */
  minDate: Date;
  /**
   * The latest date user can select.
   */
  maxDate: Date;
  /**
   * The index of the first day of the week (0 - Sunday)
   */
  weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
}

const FortnightlyPicker = ({
  autoComplete,
  value,
  onChange,
  onBlur,
  size = 'medium',
  invalid = false,
  placeholder = 'Select date',
  prefix,
  disabled = false,
  format = 'dd MMM yyyy',
  name,
  id,
  className,
  style = {},
  sx = {},
  'data-test-id': dataTestId,
  minDate,
  maxDate,
  weekStartsOn = 0,
}: FortnightlyPickerProps): ReactElement => {
  const options = useMemo(() => {
    return generateFortnightlyTime(minDate, maxDate, format, weekStartsOn).map(
      (fortnightly) => ({
        value: fortnightly,
        text: fortnightly,
      })
    );
  }, [format, maxDate, minDate]);

  const handleChange = useCallback(
    (_value?: string | number) => {
      if (_value) {
        onChange?.(_value);
      }
    },
    [onChange]
  );

  return (
    <StyledFortnightlyPicker
      className={className}
      autoComplete={autoComplete}
      name={name}
      placeholder={placeholder}
      disabled={disabled}
      size={size}
      value={value}
      options={options}
      onChange={handleChange}
      onBlur={onBlur}
      invalid={invalid}
      prefix={prefix}
      id={id}
      data-test-id={dataTestId}
      style={{ ...style, ...useCss(sx) }}
    />
  );
};

export default FortnightlyPicker;
