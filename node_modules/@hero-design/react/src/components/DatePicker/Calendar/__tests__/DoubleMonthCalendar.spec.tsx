import React from 'react';
import { fireEvent, waitFor } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import DoubleMonthCalendar from '../DoubleMonthCalendar';

describe('rendering', () => {
  it('renders double calendar', async () => {
    const { getAllByText } = renderWithTheme(
      <DoubleMonthCalendar
        minDate={new Date(2021, 0)}
        maxDate={new Date(2021, 11)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );

    await waitFor(() => {
      // shows month of year
      expect(getAllByText('Jan').length).toBe(4);
      expect(getAllByText('Feb').length).toBe(4);
      expect(getAllByText('Mar').length).toBe(4);
      expect(getAllByText('Apr').length).toBe(4);
      expect(getAllByText('May').length).toBe(4);
      expect(getAllByText('Jun').length).toBe(4);
      expect(getAllByText('Jun').length).toBe(4);
      expect(getAllByText('Jul').length).toBe(4);
      expect(getAllByText('Aug').length).toBe(4);
      expect(getAllByText('Sep').length).toBe(4);
      expect(getAllByText('Oct').length).toBe(4);
      expect(getAllByText('Nov').length).toBe(4);
      expect(getAllByText('Dec').length).toBe(4);
    });
  });
});

describe('interaction', () => {
  it('allows to select year on the navigation', async () => {
    const { getByTestId, getAllByText } = renderWithTheme(
      <DoubleMonthCalendar
        startDate={new Date(2021, 3)}
        endDate={new Date(2021, 4)}
        minDate={new Date(1922, 6)}
        maxDate={new Date(2122, 4)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );
    const firstYearSelect = getByTestId('first-year-select');
    const secondYearSelect = getByTestId('second-year-select');

    fireEvent.click(firstYearSelect);
    fireEvent.click(getAllByText('2024')[0]);

    await waitFor(() => {
      expect(firstYearSelect).toSelectItem('2024');
      expect(secondYearSelect).toSelectItem('2025');
    });

    fireEvent.click(secondYearSelect);
    fireEvent.click(getAllByText('2028')[1]);

    await waitFor(() => {
      expect(firstYearSelect).toSelectItem('2027');
      expect(secondYearSelect).toSelectItem('2028');
    });
  });

  it('allows to select a month range', async () => {
    const onSelectDate = jest.fn();
    const { getAllByText } = renderWithTheme(
      <DoubleMonthCalendar
        startDate={new Date(2021, 3)}
        endDate={new Date(2021, 4)}
        minDate={new Date(1922, 6)}
        maxDate={new Date(2122, 4)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
        onSelectDate={onSelectDate}
      />
    );
    fireEvent.click(getAllByText('Jan')[1]);

    await waitFor(() => {
      expect(onSelectDate).toHaveBeenCalledTimes(1);
      expect(onSelectDate).toHaveBeenCalledWith(new Date(2021, 0));
    });

    fireEvent.click(getAllByText('Dec')[3]);

    await waitFor(() => {
      expect(onSelectDate).toHaveBeenCalledTimes(2);
      expect(onSelectDate).toHaveBeenCalledWith(new Date(2022, 11));
    });
  });

  it('allows to select a month range by navigation', async () => {
    const onSelectStartDate = jest.fn();
    const onSelectEndDate = jest.fn();

    const { getAllByText, getByTestId } = renderWithTheme(
      <DoubleMonthCalendar
        startDate={new Date(2021, 3)}
        endDate={new Date(2021, 4)}
        minDate={new Date(1922, 6)}
        maxDate={new Date(2122, 4)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
        onSelectStartDate={onSelectStartDate}
        onSelectEndDate={onSelectEndDate}
      />
    );
    const firstMonthSelect = getByTestId('first-month-select');
    const secondMonthSelect = getByTestId('second-month-select');

    fireEvent.click(firstMonthSelect);
    fireEvent.click(getAllByText('Jan')[0]);

    await waitFor(() => {
      expect(onSelectStartDate).toHaveBeenCalledTimes(1);
      expect(onSelectStartDate).toHaveBeenCalledWith(new Date(2021, 0));
    });

    fireEvent.click(secondMonthSelect);
    fireEvent.click(getAllByText('Dec')[2]);

    await waitFor(() => {
      expect(onSelectEndDate).toHaveBeenCalledTimes(1);
      expect(onSelectEndDate).toHaveBeenCalledWith(new Date(2022, 11));
    });
  });

  it('does not allow to select a new date out of range', async () => {
    const onSelectDate = jest.fn();
    const { getAllByText } = renderWithTheme(
      <DoubleMonthCalendar
        startDate={new Date(2021, 5)}
        endDate={new Date(2022, 5)}
        minDate={new Date(2021, 1)}
        maxDate={new Date(2022, 6)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
        onSelectDate={onSelectDate}
      />
    );
    fireEvent.click(getAllByText('Jan')[1]);

    await waitFor(() => {
      expect(onSelectDate).toHaveBeenCalledTimes(0);
    });
  });
});
