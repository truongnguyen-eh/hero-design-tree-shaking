import React from 'react';
import { waitFor, fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import DoubleCalendar from '../DoubleCalendar';

describe('rendering', () => {
  it('renders double calendar', async () => {
    const { getAllByText, getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 1, 19)}
        endDate={new Date(2021, 1, 25)}
        minDate={new Date(2021, 1, 1)}
        maxDate={new Date(2021, 1, 26)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );

    await waitFor(() => {
      const firstMonthSelect = getByTestId('first-month-select');
      const firstYearSelect = getByTestId('first-year-select');
      const secondMonthSelect = getByTestId('second-month-select');
      const secondYearSelect = getByTestId('second-year-select');

      expect(firstMonthSelect).toSelectItem('Feb');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('Mar');
      expect(secondYearSelect).toSelectItem('2021');

      // shows days of week
      expect(getAllByText('Su').length).toBe(2);
      expect(getAllByText('Mo').length).toBe(2);
      expect(getAllByText('Tu').length).toBe(2);
      expect(getAllByText('We').length).toBe(2);
      expect(getAllByText('Th').length).toBe(2);
      expect(getAllByText('Fr').length).toBe(2);
      expect(getAllByText('Sa').length).toBe(2);
      // shows normal/selected dates
      expect(getAllByText('19').length).toBe(2);
      expect(getAllByText('23').length).toBe(2);
      expect(getAllByText('25').length).toBe(2);
      // shows disabled date
      expect(getAllByText('31').length).toBe(2);
      expect(getAllByText('26').length).toBe(2);
    });
  });
});

describe('interaction', () => {
  describe('when user selects calendar min year', () => {
    it('allows to disable previous year button', async () => {
      const { getByTestId, getAllByText } = renderWithTheme(
        <DoubleCalendar
          startDate={new Date(2021, 1, 19)}
          endDate={new Date(2021, 1, 25)}
          minDate={new Date(1922, 4, 19)}
          maxDate={new Date(2122, 4, 19)}
          dateClickCount={0}
          isSettingStartDate={false}
          isSettingEndDate={false}
        />
      );

      const yearSelect = getByTestId('first-year-select');
      const subYearArrow = getByTestId('sub-year-date-range-picker');

      fireEvent.click(yearSelect);
      fireEvent.click(getAllByText('1922')[0]);

      expect(subYearArrow).toHaveStyle(
        `
        color: #727478;
        cursor: not-allowed;
        `
      );
    });

    it('allows to disable previous month button', async () => {
      const { getByTestId, getAllByText } = renderWithTheme(
        <DoubleCalendar
          startDate={new Date(2021, 1, 19)}
          endDate={new Date(2021, 1, 25)}
          minDate={new Date(1922, 6, 19)}
          maxDate={new Date(2122, 4, 19)}
          dateClickCount={0}
          isSettingStartDate={false}
          isSettingEndDate={false}
        />
      );

      const yearSelect = getByTestId('second-year-select');
      const subMonthArrow = getByTestId('sub-month-date-range-picker');

      fireEvent.click(yearSelect);
      fireEvent.click(getAllByText('1922')[0]);

      expect(subMonthArrow).toHaveStyle(
        `
      color: #727478;
      cursor: not-allowed;
      `
      );
    });
  });

  describe('when user selects calendar max year', () => {
    it('allows to disable next year button', async () => {
      const { getByTestId, getAllByText } = renderWithTheme(
        <DoubleCalendar
          startDate={new Date(2021, 1, 19)}
          endDate={new Date(2021, 1, 25)}
          minDate={new Date(1922, 4, 19)}
          maxDate={new Date(2122, 4, 19)}
          dateClickCount={0}
          isSettingStartDate={false}
          isSettingEndDate={false}
        />
      );

      const yearSelect = getByTestId('second-year-select');
      const addYearArrow = getByTestId('add-year-date-range-picker-mobile');

      fireEvent.click(yearSelect);
      fireEvent.click(getAllByText('2122')[0]);

      expect(addYearArrow).toHaveStyle(
        `
      color: #727478;
      cursor: not-allowed;
      `
      );
    });

    it('allows to disable next month button', async () => {
      const { getByTestId, getAllByText } = renderWithTheme(
        <DoubleCalendar
          startDate={new Date(2021, 8, 19)}
          endDate={new Date(2021, 8, 25)}
          minDate={new Date(1922, 4, 19)}
          maxDate={new Date(2122, 5, 19)}
          dateClickCount={0}
          isSettingStartDate={false}
          isSettingEndDate={false}
        />
      );

      const yearSelect = getByTestId('second-year-select');
      const addMonthArrow = getByTestId('add-month-date-range-picker-desktop');

      fireEvent.click(yearSelect);
      fireEvent.click(getAllByText('2122')[0]);

      expect(addMonthArrow).toHaveStyle(
        `
      color: #727478;
      cursor: not-allowed;
      `
      );
    });
  });

  it('allows to add/sub month on desktop', async () => {
    const { getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );
    const firstMonthSelect = getByTestId('first-month-select');
    const firstYearSelect = getByTestId('first-year-select');
    const subMonthButton = getByTestId('sub-month-date-range-picker');
    const addMonthButton = getByTestId('add-month-date-range-picker-desktop');
    const secondMonthSelect = getByTestId('second-month-select');
    const secondYearSelect = getByTestId('second-year-select');

    fireEvent.click(subMonthButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('Apr');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('May');
      expect(secondYearSelect).toSelectItem('2021');
    });

    fireEvent.click(addMonthButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('May');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('Jun');
      expect(secondYearSelect).toSelectItem('2021');
    });
  });

  it('allows to add/sub year on desktop', async () => {
    const { getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );
    const firstMonthSelect = getByTestId('first-month-select');
    const firstYearSelect = getByTestId('first-year-select');
    const subYearButton = getByTestId('sub-year-date-range-picker');
    const addYearButton = getByTestId('add-year-date-range-picker-desktop');
    const secondMonthSelect = getByTestId('second-month-select');
    const secondYearSelect = getByTestId('second-year-select');

    fireEvent.click(subYearButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('May');
      expect(firstYearSelect).toSelectItem('2020');
      expect(secondMonthSelect).toSelectItem('Jun');
      expect(secondYearSelect).toSelectItem('2020');
    });

    fireEvent.click(addYearButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('May');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('Jun');
      expect(secondYearSelect).toSelectItem('2021');
    });
  });

  it('allows to add/sub month on mobile', async () => {
    const { getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );
    const firstMonthSelect = getByTestId('first-month-select');
    const firstYearSelect = getByTestId('first-year-select');
    const subMonthButton = getByTestId('sub-month-date-range-picker');
    const addMonthButton = getByTestId('add-month-date-range-picker-mobile');
    const secondMonthSelect = getByTestId('second-month-select');
    const secondYearSelect = getByTestId('second-year-select');

    fireEvent.click(subMonthButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('Apr');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('May');
      expect(secondYearSelect).toSelectItem('2021');
    });

    fireEvent.click(addMonthButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('May');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('Jun');
      expect(secondYearSelect).toSelectItem('2021');
    });
  });

  it('allows to add/sub year on mobile', async () => {
    const { getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );
    const firstMonthSelect = getByTestId('first-month-select');
    const firstYearSelect = getByTestId('first-year-select');
    const subYearButton = getByTestId('sub-year-date-range-picker');
    const addYearButton = getByTestId('add-year-date-range-picker-mobile');
    const secondMonthSelect = getByTestId('second-month-select');
    const secondYearSelect = getByTestId('second-year-select');

    fireEvent.click(subYearButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('May');
      expect(firstYearSelect).toSelectItem('2020');
      expect(secondMonthSelect).toSelectItem('Jun');
      expect(secondYearSelect).toSelectItem('2020');
    });

    fireEvent.click(addYearButton);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('May');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('Jun');
      expect(secondYearSelect).toSelectItem('2021');
    });
  });

  it('allows to select month and year', async () => {
    const { getAllByText, getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
      />
    );
    const firstMonthSelect = getByTestId('first-month-select');
    const firstYearSelect = getByTestId('first-year-select');
    const secondMonthSelect = getByTestId('second-month-select');
    const secondYearSelect = getByTestId('second-year-select');

    fireEvent.click(firstMonthSelect);
    fireEvent.click(getAllByText('Dec')[0]);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('Dec');
      expect(firstYearSelect).toSelectItem('2021');
      expect(secondMonthSelect).toSelectItem('Jan');
      expect(secondYearSelect).toSelectItem('2022');
    });

    fireEvent.click(secondMonthSelect);
    fireEvent.click(getAllByText('May')[1]);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('Apr');
      expect(firstYearSelect).toSelectItem('2022');
      expect(secondMonthSelect).toSelectItem('May');
      expect(secondYearSelect).toSelectItem('2022');
    });

    fireEvent.click(firstMonthSelect);
    fireEvent.click(getAllByText('2023')[0]);

    await waitFor(() => {
      expect(firstYearSelect).toSelectItem('2023');
      expect(secondYearSelect).toSelectItem('2023');
    });

    fireEvent.click(secondYearSelect);
    fireEvent.click(getAllByText('2025')[1]);

    await waitFor(() => {
      expect(firstYearSelect).toSelectItem('2025');
      expect(secondYearSelect).toSelectItem('2025');
    });
  });

  it('allows to select a date', async () => {
    const onSelectDate = jest.fn();
    const { getAllByText, getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
        onSelectDate={onSelectDate}
      />
    );
    fireEvent.click(getByTestId('first-month-select'));
    fireEvent.click(getAllByText('Dec')[0]);
    fireEvent.click(getAllByText(2)[2]);

    await waitFor(() => {
      expect(onSelectDate).toHaveBeenCalledTimes(1);
      expect(onSelectDate).toHaveBeenCalledWith(new Date(2022, 0, 2));
    });
  });

  it('does not allow to select a new date out of range', async () => {
    const onSelectDate = jest.fn();
    const { getAllByText } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        minDate={new Date(2021, 4, 10)}
        maxDate={new Date(2021, 4, 30)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
        onSelectDate={onSelectDate}
      />
    );

    fireEvent.click(getAllByText(2)[1]);

    await waitFor(() => {
      expect(onSelectDate).not.toHaveBeenCalled();
    });
  });

  it('extends year options when users choose out of range month using dropdown navigation', async () => {
    const onSelectDate = jest.fn();
    const { getAllByText, getByTestId } = renderWithTheme(
      <DoubleCalendar
        startDate={new Date(2021, 4, 19)}
        endDate={new Date(2021, 4, 25)}
        minDate={new Date(2021, 4, 10)}
        maxDate={new Date(2025, 4, 30)}
        dateClickCount={0}
        isSettingStartDate={false}
        isSettingEndDate={false}
        onSelectDate={onSelectDate}
      />
    );

    const firstMonthSelect = getByTestId('first-month-select');
    const firstYearSelect = getByTestId('first-year-select');
    const secondMonthSelect = getByTestId('second-month-select');
    const secondYearSelect = getByTestId('second-year-select');
    fireEvent.click(firstMonthSelect);
    fireEvent.click(getAllByText('Dec')[0]);
    fireEvent.click(firstYearSelect);
    fireEvent.click(getAllByText('2025')[0]);

    await waitFor(() => {
      expect(secondMonthSelect).toSelectItem('Jan');
      expect(secondYearSelect).toSelectItem('2026');
    });

    fireEvent.click(secondMonthSelect);
    fireEvent.click(getAllByText('Jan')[1]);
    fireEvent.click(secondYearSelect);
    fireEvent.click(getAllByText('2021')[1]);

    await waitFor(() => {
      expect(firstMonthSelect).toSelectItem('Dec');
      expect(firstYearSelect).toSelectItem('2020');
    });
  });
});
