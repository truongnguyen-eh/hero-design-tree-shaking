import React from 'react';
import { waitFor, fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import Calendar from '../index';

describe('rendering', () => {
  it('renders calendar correctly', async () => {
    const { getByText, getByTestId } = renderWithTheme(
      <Calendar
        selectedDate={new Date(2021, 1, 19)}
        minDate={new Date(2021, 1, 1)}
        maxDate={new Date(2021, 1, 23)}
      />
    );

    await waitFor(() => {
      const monthSelect = getByTestId('month-select');
      const yearSelect = getByTestId('year-select');

      // shows month in select
      expect(monthSelect).toSelectItem('Feb');
      // shows year in select
      expect(yearSelect).toSelectItem('2021');
      // shows days of week
      expect(getByText('Su')).toBeInTheDocument();
      expect(getByText('Mo')).toBeInTheDocument();
      expect(getByText('Tu')).toBeInTheDocument();
      expect(getByText('We')).toBeInTheDocument();
      expect(getByText('Th')).toBeInTheDocument();
      expect(getByText('Fr')).toBeInTheDocument();
      expect(getByText('Sa')).toBeInTheDocument();
      // shows selected date
      expect(getByText('19')).toBeInTheDocument();
      // shows disabled date
      expect(getByText('31')).toBeInTheDocument();
      expect(getByText('24')).toBeInTheDocument();
      // shows normal date
      expect(getByText('18')).toBeInTheDocument();
    });
  });
});

describe('interaction', () => {
  it('allows to add/sub month', async () => {
    const { getByTestId } = renderWithTheme(
      <Calendar selectedDate={new Date(2021, 1, 19)} />
    );

    const monthSelect = getByTestId('month-select');
    const addMonthArrow = getByTestId('add-month');
    const subMonthArrow = getByTestId('sub-month');

    fireEvent.click(addMonthArrow);

    await waitFor(() => {
      expect(monthSelect).toSelectItem('Mar');
    });

    fireEvent.click(subMonthArrow);

    await waitFor(() => {
      expect(monthSelect).toSelectItem('Feb');
    });
  });
  it('allows to add/sub year', async () => {
    const { getByTestId } = renderWithTheme(
      <Calendar selectedDate={new Date(2021, 4, 19)} />
    );

    const yearSelect = getByTestId('year-select');
    const addYearArrow = getByTestId('add-year');
    const subYearArrow = getByTestId('sub-year');

    fireEvent.click(addYearArrow);

    await waitFor(() => {
      expect(yearSelect).toSelectItem('2022');
    });

    fireEvent.click(subYearArrow);

    await waitFor(() => {
      expect(yearSelect).toSelectItem('2021');
    });
  });

  describe('when user selects calendar min year', () => {
    it('allows to disable previous year, and previous month', async () => {
      const { getByTestId, getByText } = renderWithTheme(
        <Calendar
          selectedDate={new Date(2021, 4, 19)}
          minDate={new Date(1922, 4, 19)}
          maxDate={new Date(2122, 4, 19)}
        />
      );

      const yearSelect = getByTestId('year-select');
      const subYearArrow = getByTestId('sub-year');
      const subMonthArrow = getByTestId('sub-month');

      fireEvent.click(yearSelect);
      fireEvent.click(getByText('1922'));

      expect(subYearArrow).toHaveStyle(
        `
        color: #727478;
        cursor: not-allowed;
        `
      );

      expect(subMonthArrow).toHaveStyle(
        `
        color: #727478;
        cursor: not-allowed;
        `
      );
    });
  });

  describe('when user selects calendar max year', () => {
    it('allows to disable next year button, and next month button', async () => {
      const { getByTestId, getByText } = renderWithTheme(
        <Calendar
          selectedDate={new Date(2120, 11, 19)}
          minDate={new Date(1922, 4, 19)}
          maxDate={new Date(2122, 4, 19)}
        />
      );

      const yearSelect = getByTestId('year-select');
      const addYearArrow = getByTestId('add-year');
      const addMonthArrow = getByTestId('add-month');

      fireEvent.click(yearSelect);
      fireEvent.click(getByText('2122'));

      expect(addYearArrow).toHaveStyle(
        `
      color: #727478;
      cursor: not-allowed;
      `
      );

      expect(addMonthArrow).toHaveStyle(
        `
      color: #727478;
      cursor: not-allowed;
      `
      );
    });
  });

  it('allows to select month and year', async () => {
    const { getByText, getByTestId } = renderWithTheme(
      <Calendar selectedDate={new Date(2021, 1, 19)} />
    );

    const monthSelect = getByTestId('month-select');
    const yearSelect = getByTestId('year-select');

    fireEvent.click(monthSelect);
    fireEvent.click(getByText('Mar'));

    await waitFor(() => {
      expect(monthSelect).toSelectItem('Mar');
    });

    fireEvent.click(yearSelect);
    fireEvent.click(getByText('2025'));

    await waitFor(() => {
      expect(yearSelect).toSelectItem('2025');
    });
  });

  it('allows to select a new date', async () => {
    const onSelectDate = jest.fn();
    const { getByText, getByTestId } = renderWithTheme(
      <Calendar
        selectedDate={new Date(2021, 1, 19)}
        onSelectDate={onSelectDate}
      />
    );

    fireEvent.click(getByTestId('month-select'));
    fireEvent.click(getByText('Mar'));
    fireEvent.click(getByTestId('year-select'));
    fireEvent.click(getByText('2025'));
    fireEvent.click(getByText('10'));

    await waitFor(() => {
      expect(onSelectDate).toHaveBeenCalledTimes(1);
      expect(onSelectDate).toHaveBeenCalledWith(new Date(2025, 2, 10));
    });
  });

  it('does not allow to select a new date out of range', async () => {
    const onSelectDate = jest.fn();
    const { getByText } = renderWithTheme(
      <Calendar
        selectedDate={new Date(2021, 1, 19)}
        minDate={new Date(2021, 1, 3)}
        maxDate={new Date(2021, 1, 20)}
        onSelectDate={onSelectDate}
      />
    );

    fireEvent.click(getByText('28'));

    await waitFor(() => {
      expect(onSelectDate).not.toHaveBeenCalled();
    });
  });
});
