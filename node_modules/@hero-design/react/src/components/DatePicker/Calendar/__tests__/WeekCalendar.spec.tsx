import React from 'react';
import { waitFor, fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import Calendar from '../index';

import {
  FirstRowOfWeekCalendar,
  DayComponent,
  WeekComponent,
  SelectMonthAndYear,
} from '../WeekCalendar';
import type { DayState, WeekState } from '../StyledCalendar';

describe('SelectMonthAndYear', () => {
  it('renders correctly', () => {
    const props = {
      year: 2021,
      month: 11,
      onChangeMonth: jest.fn(),
      onChangeYear: jest.fn(),
      date: new Date(2021, 12, 19),
      setDate: jest.fn(),
    };
    const { getByTestId } = renderWithTheme(<SelectMonthAndYear {...props} />);

    const monthSelect = getByTestId('month-select');
    expect(monthSelect).toSelectItem('Dec');
    const yearSelect = getByTestId('year-select');
    expect(yearSelect).toSelectItem('2021');
  });
});

describe('FirstRowOfWeekCalendar', () => {
  it('renders correctly', () => {
    const { getByText } = renderWithTheme(<FirstRowOfWeekCalendar />);
    expect(getByText('Week')).toBeInTheDocument();
    // shows days of week
    expect(getByText('Su')).toBeInTheDocument();
    expect(getByText('Mo')).toBeInTheDocument();
    expect(getByText('Tu')).toBeInTheDocument();
    expect(getByText('We')).toBeInTheDocument();
    expect(getByText('Th')).toBeInTheDocument();
    expect(getByText('Fr')).toBeInTheDocument();
    expect(getByText('Sa')).toBeInTheDocument();
  });
});

describe('DayComponent', () => {
  it('renders correctly', () => {
    const props = {
      day: 1,
      dateState: 'enabled' as DayState,
      onMouseOver: jest.fn(),
    };
    const { getByText } = renderWithTheme(<DayComponent {...props} />);
    expect(getByText('1')).toBeInTheDocument();
  });
});

describe('WeekComponent', () => {
  it('renders correctly', () => {
    const props = {
      showedWeekNumber: 34,
      firstDateState: 'enabled' as WeekState,
      onMouseOver: jest.fn(),
    };
    const { getByText } = renderWithTheme(<WeekComponent {...props} />);
    expect(getByText('34')).toBeInTheDocument();
  });
});

describe('Week Calendar', () => {
  it('renders correctly', async () => {
    const { getByText, getByTestId } = renderWithTheme(
      <Calendar.Week selectedFirstDateOfWeek={new Date(2021, 1, 19)} />
    );

    await waitFor(() => {
      // shows month in select
      const monthSelect = getByTestId('month-select');
      expect(monthSelect).toSelectItem('Feb');
      // shows year in select
      const yearSelect = getByTestId('year-select');
      expect(yearSelect).toSelectItem('2021');
      // shows days of week
      expect(getByText('Su')).toBeInTheDocument();
      expect(getByText('Mo')).toBeInTheDocument();
      expect(getByText('Tu')).toBeInTheDocument();
      expect(getByText('We')).toBeInTheDocument();
      expect(getByText('Th')).toBeInTheDocument();
      expect(getByText('Fr')).toBeInTheDocument();
      expect(getByText('Sa')).toBeInTheDocument();
      // shows selected date
      expect(getByText('19')).toBeInTheDocument();
      // shows disabled date
      expect(getByText('31')).toBeInTheDocument();
    });
  });
});

describe('interaction', () => {
  it('allows to add/sub month', async () => {
    const { getByTestId } = renderWithTheme(
      <Calendar.Week selectedFirstDateOfWeek={new Date(2021, 1, 19)} />
    );

    const monthSelect = getByTestId('month-select');
    const addMonthArrow = getByTestId('add-month-week-picker');
    const subMonthArrow = getByTestId('sub-month-week-picker');

    fireEvent.click(addMonthArrow);
    await waitFor(() => {
      expect(monthSelect).toSelectItem('Mar');
    });

    fireEvent.click(subMonthArrow);
    await waitFor(() => {
      expect(monthSelect).toSelectItem('Feb');
    });
  });

  it('allows to add/sub year', async () => {
    const { getByTestId } = renderWithTheme(
      <Calendar.Week selectedFirstDateOfWeek={new Date(2021, 1, 19)} />
    );

    const yearSelect = getByTestId('year-select');
    const addYearArrow = getByTestId('add-year-week-picker');
    const subYearArrow = getByTestId('sub-year-week-picker');

    expect(yearSelect).toSelectItem('2021');

    fireEvent.click(addYearArrow);
    await waitFor(() => {
      expect(yearSelect).toSelectItem('2022');
    });

    fireEvent.click(subYearArrow);
    await waitFor(() => {
      expect(yearSelect).toSelectItem('2021');
    });
  });

  it('allows to select month and year', async () => {
    const { getByText, getByTestId } = renderWithTheme(
      <Calendar.Week selectedFirstDateOfWeek={new Date(2021, 1, 19)} />
    );

    const monthSelect = getByTestId('month-select');
    fireEvent.click(monthSelect);
    fireEvent.click(getByText('Mar'));

    await waitFor(() => {
      expect(monthSelect).toSelectItem('Mar');
    });

    const yearSelect = getByTestId('year-select');
    fireEvent.click(yearSelect);
    fireEvent.click(getByText('2025'));

    await waitFor(() => {
      expect(yearSelect).toSelectItem('2025');
    });
  });

  it('allows to select a new start of week date', async () => {
    const onSelectFirstDateOfWeek = jest.fn();
    const { getByText, getByTestId } = renderWithTheme(
      <Calendar.Week
        selectedFirstDateOfWeek={new Date(2021, 1, 19)}
        onSelectFirstDateOfWeek={onSelectFirstDateOfWeek}
      />
    );

    const monthSelect = getByTestId('month-select');
    fireEvent.click(monthSelect);
    fireEvent.click(getByText('Mar'));
    const yearSelect = getByTestId('year-select');
    fireEvent.click(yearSelect);
    fireEvent.click(getByText('2025'));
    fireEvent.click(getByText('29'));

    await waitFor(() => {
      expect(onSelectFirstDateOfWeek).toHaveBeenCalledTimes(1);
      expect(onSelectFirstDateOfWeek).toHaveBeenCalledWith(
        new Date(2025, 2, 23)
      );
    });
  });

  it('allows to select a new start of week date with custom weekStartsOn', async () => {
    const onSelectFirstDateOfWeek = jest.fn();
    const { getByText, getByTestId } = renderWithTheme(
      <Calendar.Week
        selectedFirstDateOfWeek={new Date(2021, 1, 19)}
        onSelectFirstDateOfWeek={onSelectFirstDateOfWeek}
        weekStartsOn={3}
      />
    );

    const monthSelect = getByTestId('month-select');
    fireEvent.click(monthSelect);
    fireEvent.click(getByText('Mar'));
    const yearSelect = getByTestId('year-select');
    fireEvent.click(yearSelect);
    fireEvent.click(getByText('2025'));
    fireEvent.click(getByText('29'));

    await waitFor(() => {
      expect(onSelectFirstDateOfWeek).toHaveBeenCalledTimes(1);
      expect(onSelectFirstDateOfWeek).toHaveBeenCalledWith(
        new Date(2025, 2, 26)
      );
    });
  });

  describe('when user selects calendar min year', () => {
    beforeEach(() => {
      jest.useFakeTimers();
      jest.setSystemTime(new Date(2022, 5, 19));
    });

    it('allows to disable previous year and previous month', async () => {
      const { getByTestId, getByText } = renderWithTheme(
        <Calendar.Week selectedFirstDateOfWeek={new Date(2021, 4, 19)} />
      );

      const yearSelect = getByTestId('year-select');
      const subYearArrow = getByTestId('sub-year-week-picker');
      const subMonthArrow = getByTestId('sub-month-week-picker');

      fireEvent.click(yearSelect);
      fireEvent.click(getByText('1922'));

      expect(subYearArrow).toHaveStyle(
        `
        color: #727478;
        cursor: not-allowed;
        `
      );
      expect(subMonthArrow).toHaveStyle(
        `
        color: #727478;
        cursor: not-allowed;
        `
      );
    });
  });

  describe('when user selects calendar max year', () => {
    beforeEach(() => {
      jest.useFakeTimers();
      jest.setSystemTime(new Date(2022, 5, 19));
    });

    it('allows to disable next year button and nextMonth button', async () => {
      const { getByTestId, getByText } = renderWithTheme(
        <Calendar.Week selectedFirstDateOfWeek={new Date(2120, 11, 19)} />
      );

      const yearSelect = getByTestId('year-select');
      const addYearArrow = getByTestId('add-year-week-picker');
      const addMonthArrow = getByTestId('add-month-week-picker');

      fireEvent.click(yearSelect);
      fireEvent.click(getByText('2122'));

      expect(addYearArrow).toHaveStyle(
        `
      color: #727478;
      cursor: not-allowed;
      `
      );

      expect(addMonthArrow).toHaveStyle(
        `
      color: #727478;
      cursor: not-allowed;
      `
      );
    });
  });
});
