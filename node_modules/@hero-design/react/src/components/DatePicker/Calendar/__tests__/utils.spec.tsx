import {
  getMonthMatrix,
  generateMonthOptions,
  generateYearOptions,
  getSingleCalendarDayState,
  getDoubleCalendarDayState,
  getMonthPickerOptions,
  getWeekCalendarDayState,
  getWeekCalendarState,
  disableYear,
  disableMonthsNavigation,
  disableMonthOption,
  getDoubleCalendarMonthState,
  getWeekDays,
  getWeekState,
  isDisabledDate,
  isInHoveringRange,
} from '../utils';

describe('getMonthMatrix', () => {
  it('returns correct month matrix', () => {
    const month = 4; // May
    const year = 2021; // 2021
    const expectedMatrix = [
      [
        { date: new Date(year, month - 1, 25), disabled: true },
        { date: new Date(year, month - 1, 26), disabled: true },
        { date: new Date(year, month - 1, 27), disabled: true },
        { date: new Date(year, month - 1, 28), disabled: true },
        { date: new Date(year, month - 1, 29), disabled: true },
        { date: new Date(year, month - 1, 30), disabled: true },
        { date: new Date(year, month, 1), disabled: false },
      ],
      [
        { date: new Date(year, month, 2), disabled: false },
        { date: new Date(year, month, 3), disabled: false },
        { date: new Date(year, month, 4), disabled: false },
        { date: new Date(year, month, 5), disabled: false },
        { date: new Date(year, month, 6), disabled: false },
        { date: new Date(year, month, 7), disabled: false },
        { date: new Date(year, month, 8), disabled: false },
      ],
      [
        { date: new Date(year, month, 9), disabled: false },
        { date: new Date(year, month, 10), disabled: false },
        { date: new Date(year, month, 11), disabled: false },
        { date: new Date(year, month, 12), disabled: false },
        { date: new Date(year, month, 13), disabled: false },
        { date: new Date(year, month, 14), disabled: false },
        { date: new Date(year, month, 15), disabled: false },
      ],
      [
        { date: new Date(year, month, 16), disabled: false },
        { date: new Date(year, month, 17), disabled: false },
        { date: new Date(year, month, 18), disabled: false },
        { date: new Date(year, month, 19), disabled: false },
        { date: new Date(year, month, 20), disabled: false },
        { date: new Date(year, month, 21), disabled: false },
        { date: new Date(year, month, 22), disabled: false },
      ],
      [
        { date: new Date(year, month, 23), disabled: false },
        { date: new Date(year, month, 24), disabled: false },
        { date: new Date(year, month, 25), disabled: false },
        { date: new Date(year, month, 26), disabled: false },
        { date: new Date(year, month, 27), disabled: false },
        { date: new Date(year, month, 28), disabled: false },
        { date: new Date(year, month, 29), disabled: false },
      ],
      [
        { date: new Date(year, month, 30), disabled: false },
        { date: new Date(year, month, 31), disabled: false },
        { date: new Date(year, month + 1, 1), disabled: true },
        { date: new Date(year, month + 1, 2), disabled: true },
        { date: new Date(year, month + 1, 3), disabled: true },
        { date: new Date(year, month + 1, 4), disabled: true },
        { date: new Date(year, month + 1, 5), disabled: true },
      ],
    ];

    expect(getMonthMatrix({ month, year })).toEqual(expectedMatrix);
  });

  it('returns correct month matrix with custom weekStartsOn', () => {
    const month = 4; // May
    const year = 2021; // 2021
    const expectedMatrix = [
      [
        { date: new Date(year, month - 1, 26), disabled: true },
        { date: new Date(year, month - 1, 27), disabled: true },
        { date: new Date(year, month - 1, 28), disabled: true },
        { date: new Date(year, month - 1, 29), disabled: true },
        { date: new Date(year, month - 1, 30), disabled: true },
        { date: new Date(year, month, 1), disabled: false },
        { date: new Date(year, month, 2), disabled: false },
      ],
      [
        { date: new Date(year, month, 3), disabled: false },
        { date: new Date(year, month, 4), disabled: false },
        { date: new Date(year, month, 5), disabled: false },
        { date: new Date(year, month, 6), disabled: false },
        { date: new Date(year, month, 7), disabled: false },
        { date: new Date(year, month, 8), disabled: false },
        { date: new Date(year, month, 9), disabled: false },
      ],
      [
        { date: new Date(year, month, 10), disabled: false },
        { date: new Date(year, month, 11), disabled: false },
        { date: new Date(year, month, 12), disabled: false },
        { date: new Date(year, month, 13), disabled: false },
        { date: new Date(year, month, 14), disabled: false },
        { date: new Date(year, month, 15), disabled: false },
        { date: new Date(year, month, 16), disabled: false },
      ],
      [
        { date: new Date(year, month, 17), disabled: false },
        { date: new Date(year, month, 18), disabled: false },
        { date: new Date(year, month, 19), disabled: false },
        { date: new Date(year, month, 20), disabled: false },
        { date: new Date(year, month, 21), disabled: false },
        { date: new Date(year, month, 22), disabled: false },
        { date: new Date(year, month, 23), disabled: false },
      ],
      [
        { date: new Date(year, month, 24), disabled: false },
        { date: new Date(year, month, 25), disabled: false },
        { date: new Date(year, month, 26), disabled: false },
        { date: new Date(year, month, 27), disabled: false },
        { date: new Date(year, month, 28), disabled: false },
        { date: new Date(year, month, 29), disabled: false },
        { date: new Date(year, month, 30), disabled: false },
      ],
      [
        { date: new Date(year, month, 31), disabled: false },
        { date: new Date(year, month + 1, 1), disabled: true },
        { date: new Date(year, month + 1, 2), disabled: true },
        { date: new Date(year, month + 1, 3), disabled: true },
        { date: new Date(year, month + 1, 4), disabled: true },
        { date: new Date(year, month + 1, 5), disabled: true },
        { date: new Date(year, month + 1, 6), disabled: true },
      ],
    ];

    expect(getMonthMatrix({ month, year, weekStartsOn: 1 })).toEqual(
      expectedMatrix
    );
  });

  it('returns correct month matrix with min/max dates', () => {
    const month = 4; // May
    const year = 2021; // 2021
    const minDate = new Date(year, month, 2);
    const maxDate = new Date(year, month, 29);
    const expectedMatrix = [
      [
        { date: new Date(year, month - 1, 25), disabled: true },
        { date: new Date(year, month - 1, 26), disabled: true },
        { date: new Date(year, month - 1, 27), disabled: true },
        { date: new Date(year, month - 1, 28), disabled: true },
        { date: new Date(year, month - 1, 29), disabled: true },
        { date: new Date(year, month - 1, 30), disabled: true },
        { date: new Date(year, month, 1), disabled: true },
      ],
      [
        { date: new Date(year, month, 2), disabled: false },
        { date: new Date(year, month, 3), disabled: false },
        { date: new Date(year, month, 4), disabled: false },
        { date: new Date(year, month, 5), disabled: false },
        { date: new Date(year, month, 6), disabled: false },
        { date: new Date(year, month, 7), disabled: false },
        { date: new Date(year, month, 8), disabled: false },
      ],
      [
        { date: new Date(year, month, 9), disabled: false },
        { date: new Date(year, month, 10), disabled: false },
        { date: new Date(year, month, 11), disabled: false },
        { date: new Date(year, month, 12), disabled: false },
        { date: new Date(year, month, 13), disabled: false },
        { date: new Date(year, month, 14), disabled: false },
        { date: new Date(year, month, 15), disabled: false },
      ],
      [
        { date: new Date(year, month, 16), disabled: false },
        { date: new Date(year, month, 17), disabled: false },
        { date: new Date(year, month, 18), disabled: false },
        { date: new Date(year, month, 19), disabled: false },
        { date: new Date(year, month, 20), disabled: false },
        { date: new Date(year, month, 21), disabled: false },
        { date: new Date(year, month, 22), disabled: false },
      ],
      [
        { date: new Date(year, month, 23), disabled: false },
        { date: new Date(year, month, 24), disabled: false },
        { date: new Date(year, month, 25), disabled: false },
        { date: new Date(year, month, 26), disabled: false },
        { date: new Date(year, month, 27), disabled: false },
        { date: new Date(year, month, 28), disabled: false },
        { date: new Date(year, month, 29), disabled: false },
      ],
      [
        { date: new Date(year, month, 30), disabled: true },
        { date: new Date(year, month, 31), disabled: true },
        { date: new Date(year, month + 1, 1), disabled: true },
        { date: new Date(year, month + 1, 2), disabled: true },
        { date: new Date(year, month + 1, 3), disabled: true },
        { date: new Date(year, month + 1, 4), disabled: true },
        { date: new Date(year, month + 1, 5), disabled: true },
      ],
    ];

    expect(getMonthMatrix({ month, year, minDate, maxDate })).toEqual(
      expectedMatrix
    );
  });
});

describe('generateYearOptions', () => {
  it('returns correct year options', () => {
    const minDate = new Date(2021, 5, 1);
    const maxDate = new Date(2025, 1, 1);
    const expectedYears = [
      { value: 2021, text: '2021' },
      { value: 2022, text: '2022' },
      { value: 2023, text: '2023' },
      { value: 2024, text: '2024' },
      { value: 2025, text: '2025' },
    ];

    expect(generateYearOptions({ minDate, maxDate })).toEqual(expectedYears);
  });
});

describe('generateMonthOptions', () => {
  describe('when years of minDate and maxDate are different', () => {
    const minDate = new Date(2021, 5, 1);
    const maxDate = new Date(2025, 1, 1);

    it('returns all months', () => {
      const expectMonths = [
        { value: 0, text: 'Jan' },
        { value: 1, text: 'Feb' },
        { value: 2, text: 'Mar' },
        { value: 3, text: 'Apr' },
        { value: 4, text: 'May' },
        { value: 5, text: 'Jun' },
        { value: 6, text: 'Jul' },
        { value: 7, text: 'Aug' },
        { value: 8, text: 'Sep' },
        { value: 9, text: 'Oct' },
        { value: 10, text: 'Nov' },
        { value: 11, text: 'Dec' },
      ];

      expect(generateMonthOptions({ minDate, maxDate, year: 2022 })).toEqual(
        expectMonths
      );
    });

    it('disables months prior to minDate', () => {
      const expectMonths = [
        { value: 0, text: 'Jan', disabled: true },
        { value: 1, text: 'Feb', disabled: true },
        { value: 2, text: 'Mar', disabled: true },
        { value: 3, text: 'Apr', disabled: true },
        { value: 4, text: 'May', disabled: true },
        { value: 5, text: 'Jun' },
        { value: 6, text: 'Jul' },
        { value: 7, text: 'Aug' },
        { value: 8, text: 'Sep' },
        { value: 9, text: 'Oct' },
        { value: 10, text: 'Nov' },
        { value: 11, text: 'Dec' },
      ];

      expect(generateMonthOptions({ minDate, maxDate, year: 2021 })).toEqual(
        expectMonths
      );
    });

    it('disables months following maxDate', () => {
      const expectMonths = [
        { value: 0, text: 'Jan' },
        { value: 1, text: 'Feb' },
        { value: 2, text: 'Mar', disabled: true },
        { value: 3, text: 'Apr', disabled: true },
        { value: 4, text: 'May', disabled: true },
        { value: 5, text: 'Jun', disabled: true },
        { value: 6, text: 'Jul', disabled: true },
        { value: 7, text: 'Aug', disabled: true },
        { value: 8, text: 'Sep', disabled: true },
        { value: 9, text: 'Oct', disabled: true },
        { value: 10, text: 'Nov', disabled: true },
        { value: 11, text: 'Dec', disabled: true },
      ];

      expect(generateMonthOptions({ minDate, maxDate, year: 2025 })).toEqual(
        expectMonths
      );
    });
  });

  describe('when years of minDate and maxDate are the same', () => {
    it('disables months not within maxDate and minDate', () => {
      const minDate = new Date(2021, 1, 1);
      const maxDate = new Date(2021, 1, 20);
      const expectMonths = [
        { value: 0, text: 'Jan', disabled: true },
        { value: 1, text: 'Feb' },
        { value: 2, text: 'Mar', disabled: true },
        { value: 3, text: 'Apr', disabled: true },
        { value: 4, text: 'May', disabled: true },
        { value: 5, text: 'Jun', disabled: true },
        { value: 6, text: 'Jul', disabled: true },
        { value: 7, text: 'Aug', disabled: true },
        { value: 8, text: 'Sep', disabled: true },
        { value: 9, text: 'Oct', disabled: true },
        { value: 10, text: 'Nov', disabled: true },
        { value: 11, text: 'Dec', disabled: true },
      ];

      expect(generateMonthOptions({ minDate, maxDate, year: 2021 })).toEqual(
        expectMonths
      );
    });
  });

  describe('when selected year is out of minDate and maxDate range', () => {
    it('disables all months following maxDate, minDate', () => {
      const minDate = new Date(2021, 1, 1);
      const maxDate = new Date(2021, 1, 20);

      const expectMonths = [
        { value: 0, text: 'Jan', disabled: true },
        { value: 1, text: 'Feb', disabled: true },
        { value: 2, text: 'Mar', disabled: true },
        { value: 3, text: 'Apr', disabled: true },
        { value: 4, text: 'May', disabled: true },
        { value: 5, text: 'Jun', disabled: true },
        { value: 6, text: 'Jul', disabled: true },
        { value: 7, text: 'Aug', disabled: true },
        { value: 8, text: 'Sep', disabled: true },
        { value: 9, text: 'Oct', disabled: true },
        { value: 10, text: 'Nov', disabled: true },
        { value: 11, text: 'Dec', disabled: true },
      ];

      expect(generateMonthOptions({ minDate, maxDate, year: 2022 })).toEqual(
        expectMonths
      );
    });
  });
});

describe('getSingleCalendarDayState', () => {
  it.each`
    dateOfWeek                                          | selectedDate             | state
    ${{ date: new Date(), disabled: true }}             | ${undefined}             | ${'disabled'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${'selected'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${undefined}             | ${'enabled'}
    ${{ date: new Date(), disabled: false }}            | ${undefined}             | ${'today'}
  `('returns $state', ({ dateOfWeek, selectedDate, state }) => {
    expect(getSingleCalendarDayState({ dateOfWeek, selectedDate })).toEqual(
      state
    );
  });
});

describe('getWeekCalendarState', () => {
  it.each`
    dateOfWeek                                          | selectedDate             | weekStartsOn | state
    ${{ date: new Date(), disabled: true }}             | ${undefined}             | ${undefined} | ${'disabled'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${undefined} | ${'inHoveringWeek'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${undefined}             | ${undefined} | ${'inHoveringWeek'}
    ${{ date: new Date(), disabled: false }}            | ${undefined}             | ${undefined} | ${'enabled'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 18)} | ${1}         | ${'inHoveringWeek'}
  `(
    'returns $state when dateOfWeek is $dateOfWeek and selectedDate is $selectedDate and weekStartsOn is $weekStartsOn',
    ({ dateOfWeek, selectedDate, weekStartsOn, state }) => {
      const tempDate = new Date(2021, 1, 19);
      expect(
        getWeekCalendarState({
          dateOfWeek,
          selectedDate,
          tempDate,
          weekStartsOn,
        })
      ).toEqual(state);
    }
  );

  it.each`
    dateOfWeek                                          | tempDate                 | state
    ${{ date: new Date(), disabled: true }}             | ${undefined}             | ${'disabled'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${'inHoveringWeek'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${undefined}             | ${'enabled'}
    ${{ date: new Date(), disabled: false }}            | ${undefined}             | ${'enabled'}
  `(
    'returns $state when when dateOfWeek is $dateOfWeek and tempDate is $tempDate',
    ({ dateOfWeek, tempDate, state }) => {
      const selectedDate = new Date(2021, 1, 19);
      expect(
        getWeekCalendarState({ dateOfWeek, selectedDate, tempDate })
      ).toEqual(state);
    }
  );
});

describe('getWeekCalendarDayState', () => {
  it.each`
    dateOfWeek                                          | selectedDate             | weekStartsOn | state
    ${{ date: new Date(), disabled: true }}             | ${undefined}             | ${undefined} | ${'today'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${undefined} | ${'selectedWeekDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${undefined}             | ${undefined} | ${'inHoveringWeekDate'}
    ${{ date: new Date(), disabled: false }}            | ${undefined}             | ${undefined} | ${'today'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${1}         | ${'selectedWeekDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${2}         | ${'selectedWeekDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${3}         | ${'selectedWeekDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${4}         | ${'selectedWeekDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${5}         | ${'selectedFirstDateOfWeek'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${6}         | ${'selectedLastDateOfWeek'}
  `(
    'returns $state when when dateOfWeek is $dateOfWeek and selectedDate is $selectedDate and weekStartsOn is $weekStartsOn',
    ({ dateOfWeek, selectedDate, state, weekStartsOn }) => {
      const tempDate = new Date(2021, 1, 19);
      expect(
        getWeekCalendarDayState({
          dateOfWeek,
          selectedDate,
          tempDate,
          weekStartsOn,
        })
      ).toEqual(state);
    }
  );

  it.each`
    dateOfWeek                                          | tempDate                 | state
    ${{ date: new Date(), disabled: true }}             | ${undefined}             | ${'today'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${new Date(2021, 1, 19)} | ${'selectedWeekDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${undefined}             | ${'selectedWeekDate'}
    ${{ date: new Date(), disabled: false }}            | ${undefined}             | ${'today'}
  `(
    'returns $state when when dateOfWeek is $dateOfWeek and tempDate is $tempDate',
    ({ dateOfWeek, tempDate, state }) => {
      const selectedDate = new Date(2021, 1, 19);
      expect(
        getWeekCalendarDayState({ dateOfWeek, selectedDate, tempDate })
      ).toEqual(state);
    }
  );
});

describe('getDoubleCalendarDayState', () => {
  it.each`
    dateOfWeek                                          | isSettingStartDate | isSettingEndDate | dateClickCount | startDate                | endDate                  | tempDate                 | state
    ${{ date: new Date(), disabled: true }}             | ${false}           | ${false}         | ${0}           | ${undefined}             | ${undefined}             | ${undefined}             | ${'disabled'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${false}           | ${true}          | ${1}           | ${new Date(2021, 4, 12)} | ${undefined}             | ${undefined}             | ${'disabled'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${true}            | ${false}         | ${1}           | ${undefined}             | ${new Date(2021, 1, 1)}  | ${undefined}             | ${'disabled'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${false}           | ${false}         | ${0}           | ${new Date(2021, 1, 19)} | ${new Date(2021, 1, 19)} | ${undefined}             | ${'selectedRangeDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${false}           | ${false}         | ${0}           | ${new Date(2021, 1, 19)} | ${undefined}             | ${undefined}             | ${'selectedStartDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${false}           | ${false}         | ${0}           | ${undefined}             | ${new Date(2021, 1, 19)} | ${undefined}             | ${'selectedEndDate'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${true}            | ${false}         | ${0}           | ${undefined}             | ${new Date(2021, 1, 20)} | ${new Date(2021, 1, 18)} | ${'inHoveringRange'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${false}           | ${true}          | ${0}           | ${new Date(2021, 1, 18)} | ${undefined}             | ${new Date(2021, 1, 20)} | ${'inHoveringRange'}
    ${{ date: new Date(), disabled: false }}            | ${false}           | ${false}         | ${0}           | ${undefined}             | ${undefined}             | ${undefined}             | ${'today'}
    ${{ date: new Date(2021, 1, 19), disabled: false }} | ${false}           | ${false}         | ${0}           | ${undefined}             | ${undefined}             | ${undefined}             | ${'enabled'}
  `(
    'retunrs $state',
    ({
      dateOfWeek,
      isSettingStartDate,
      isSettingEndDate,
      dateClickCount,
      startDate,
      endDate,
      tempDate,
      state,
    }) => {
      expect(
        getDoubleCalendarDayState({
          dateOfWeek,
          isSettingStartDate,
          isSettingEndDate,
          dateClickCount,
          startDate,
          endDate,
          tempDate,
        })
      ).toEqual(state);
    }
  );
});

describe('getMonthPickerOptions', () => {
  it('returns correct month options', () => {
    const minDate = new Date(2021, 2);
    const maxDate = new Date(2021, 5);
    const year = 2021;
    const expectedResult = [
      {
        text: 'Jan',
        date: new Date(2020, 12),
        disabled: true,
      },
      {
        text: 'Feb',
        date: new Date(year, 1),
        disabled: true,
      },
      {
        text: 'Mar',
        date: new Date(year, 2),
        disabled: false,
      },
      {
        text: 'Apr',
        date: new Date(year, 3),
        disabled: false,
      },
      {
        text: 'May',
        date: new Date(year, 4),
        disabled: false,
      },
      {
        text: 'Jun',
        date: new Date(year, 5),
        disabled: false,
      },
      {
        text: 'Jul',
        date: new Date(year, 6),
        disabled: true,
      },
      {
        text: 'Aug',
        date: new Date(year, 7),
        disabled: true,
      },
      {
        text: 'Sep',
        date: new Date(year, 8),
        disabled: true,
      },

      {
        text: 'Oct',
        date: new Date(year, 9),
        disabled: true,
      },
      {
        text: 'Nov',
        date: new Date(year, 10),
        disabled: true,
      },
      {
        text: 'Dec',
        date: new Date(year, 11),
        disabled: true,
      },
    ];

    expect(getMonthPickerOptions({ minDate, maxDate, year })).toEqual(
      expectedResult
    );
  });
});

describe('disableMonthsNavigation', () => {
  const calendarMinDate = new Date(1922, 6, 17);
  const calendarMaxDate = new Date(2122, 4, 22);

  const returnedValue1 = {
    disabledPreviousMonth: false,
    disabledNextMonth: false,
  };

  const returnedValue2 = {
    disabledPreviousMonth: true,
    disabledNextMonth: false,
  };

  const returnedValue3 = {
    disabledPreviousMonth: false,
    disabledNextMonth: true,
  };

  it.each`
    date                     | returnedValue
    ${new Date(1923, 5, 20)} | ${returnedValue1}
    ${new Date(1922, 6, 18)} | ${returnedValue2}
    ${new Date(2122, 4, 19)} | ${returnedValue3}
  `('returns correct data when date is $date', ({ date, returnedValue }) => {
    expect(
      disableMonthsNavigation(date, calendarMinDate, calendarMaxDate)
    ).toEqual(returnedValue);
  });
});

describe('disableYear', () => {
  const yearOptions = [
    {
      value: 2021,
      text: '2021',
    },
    {
      value: 2022,
      text: '2022',
    },
    {
      value: 2023,
      text: '2023',
    },
  ];
  it.each`
    year    | returnedValue
    ${2020} | ${true}
    ${2021} | ${false}
    ${2022} | ${false}
    ${2024} | ${true}
  `('returns correct data when year is $year', ({ year, returnedValue }) => {
    expect(disableYear(year, yearOptions)).toEqual(returnedValue);
  });
});

describe('getDoubleCalendarMonthState', () => {
  // Define the test data as an array of objects
  // Each object has the input and output values for one test case
  const testData = [
    {
      dateClickCount: 0,
      month: { date: new Date(2023, 8), disabled: false },
      endDate: undefined,
      isSettingEndDate: false,
      isSettingStartDate: false,
      startDate: undefined,
      tempDate: undefined,
      expected: 'enabled',
    },
    {
      dateClickCount: 0,
      month: { date: new Date(2023, 9), disabled: false },
      endDate: new Date(2023, 9),
      isSettingEndDate: false,
      isSettingStartDate: false,
      startDate: new Date(2023, 9),
      tempDate: undefined,
      expected: 'selectedRangeDate',
    },
    {
      dateClickCount: 0,
      month: { date: new Date(2023, 9), disabled: false },
      endDate: undefined,
      isSettingEndDate: false,
      isSettingStartDate: true,
      startDate: new Date(2023, 9),
      tempDate: undefined,
      expected: 'selectedStartDate',
    },
    {
      dateClickCount: 0,
      month: { date: new Date(2023, 9), disabled: false },
      endDate: new Date(2023, 9),
      isSettingEndDate: false,
      isSettingStartDate: true,
      startDate: undefined,
      tempDate: undefined,
      expected: 'selectedEndDate',
    },
    {
      dateClickCount: 0,
      month: { date: new Date(2023, 9), disabled: true },
      endDate: new Date(2023, 10),
      isSettingEndDate: false,
      isSettingStartDate: true,
      startDate: new Date(2023, 10),
      tempDate: undefined,
      expected: 'disabled',
    },
    {
      dateClickCount: 0,
      month: { date: new Date(2023, 9), disabled: false },
      endDate: new Date(2023, 10),
      isSettingEndDate: false,
      isSettingStartDate: false,
      startDate: new Date(2023, 8),
      tempDate: undefined,
      expected: 'inRange',
    },
  ];
  it.each(testData)(
    'returns $expected when dateClickCount is $dateClickCount and month is $month and endDate is $endDate and isSettingEndDate is $isSettingEndDate and isSettingStartDate is $isSettingStartDate and startDate is $startDate and tempDate is $tempDate',
    ({
      dateClickCount,
      month,
      endDate,
      isSettingEndDate,
      isSettingStartDate,
      startDate,
      tempDate,
      expected,
    }) => {
      // Call the function with the input values and store the result
      const result = getDoubleCalendarMonthState({
        dateClickCount,
        month,
        endDate,
        isSettingEndDate,
        isSettingStartDate,
        startDate,
        tempDate,
      });

      // Assert that the result matches the expected output value
      expect(result).toBe(expected);
    }
  );
});

describe('getWeekDays', () => {
  it.each`
    weekStartsOn | expected
    ${0}         | ${['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']}
    ${1}         | ${['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']}
    ${2}         | ${['Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo']}
    ${3}         | ${['We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu']}
    ${4}         | ${['Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We']}
    ${5}         | ${['Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th']}
    ${6}         | ${['Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr']}
  `(
    'should return $expected when weekStartsOn is $weekStartsOn',
    ({ weekStartsOn, expected }) => {
      const result = getWeekDays({ weekStartsOn });
      expect(result).toEqual(expected);
    }
  );
});

describe('getWeekState', () => {
  it.each`
    date                    | dateOfWeek              | weekStartsOn | selected | expected
    ${new Date(2022, 0, 2)} | ${new Date(2022, 0, 2)} | ${0}         | ${true}  | ${'selectedFirstDateOfWeek'}
    ${new Date(2022, 0, 2)} | ${new Date(2022, 0, 2)} | ${0}         | ${false} | ${'inHoveringFirstDateOfWeek'}
    ${new Date(2022, 0, 2)} | ${new Date(2022, 0, 8)} | ${0}         | ${true}  | ${'selectedLastDateOfWeek'}
    ${new Date(2022, 0, 2)} | ${new Date(2022, 0, 8)} | ${0}         | ${false} | ${'inHoveringLastDateOfWeek'}
    ${new Date(2022, 0, 2)} | ${new Date(2022, 0, 4)} | ${0}         | ${true}  | ${'selectedWeekDate'}
    ${new Date(2022, 0, 2)} | ${new Date(2022, 0, 4)} | ${0}         | ${false} | ${'inHoveringWeekDate'}
    ${new Date(2022, 0, 2)} | ${new Date(2022, 0, 9)} | ${0}         | ${true}  | ${null}
  `(
    'returns $expected when date is $date, dateOfWeek is $dateOfWeek, weekStartsOn is $weekStartsOn, and selected is $selected',
    ({ date, dateOfWeek, weekStartsOn, selected, expected }) => {
      const result = getWeekState({ date, dateOfWeek, weekStartsOn, selected });
      expect(result).toBe(expected);
    }
  );
});

describe('disableMonthOption', () => {
  it.each`
    monthOpt        | minMonth | maxMonth | expected
    ${{ value: 5 }} | ${4}     | ${6}     | ${{ value: 5 }}
    ${{ value: 3 }} | ${4}     | ${6}     | ${{ value: 3, disabled: true }}
    ${{ value: 7 }} | ${4}     | ${6}     | ${{ value: 7, disabled: true }}
  `(
    'returns $expected when monthOpt is $monthOpt, minMonth is $minMonth, and maxMonth is $maxMonth',
    ({ monthOpt, minMonth, maxMonth, expected }) => {
      const result = disableMonthOption({ monthOpt, minMonth, maxMonth });
      expect(result).toEqual(expected);
    }
  );
});

describe('isDisabledDate', () => {
  it.each`
    dateDisabled | startDate               | endDate                 | isSettingStartDate | isSettingEndDate | dateClickCount | expected
    ${true}      | ${undefined}            | ${undefined}            | ${false}           | ${false}         | ${0}           | ${true}
    ${false}     | ${new Date(2022, 0, 1)} | ${undefined}            | ${false}           | ${true}          | ${1}           | ${false}
    ${false}     | ${undefined}            | ${new Date(2022, 0, 1)} | ${true}            | ${false}         | ${1}           | ${true}
    ${false}     | ${new Date(2022, 0, 1)} | ${new Date(2022, 0, 1)} | ${true}            | ${true}          | ${1}           | ${true}
  `(
    'returns $expected when date is $date, startDate is $startDate, endDate is $endDate, isSettingStartDate is $isSettingStartDate, isSettingEndDate is $isSettingEndDate, and dateClickCount is $dateClickCount',
    ({
      dateDisabled,
      startDate,
      endDate,
      isSettingStartDate,
      isSettingEndDate,
      dateClickCount,
      expected,
    }) => {
      const result = isDisabledDate({
        date: { date: new Date(), disabled: dateDisabled },
        startDate,
        endDate,
        isSettingStartDate,
        isSettingEndDate,
        dateClickCount,
      });
      expect(result).toBe(expected);
    }
  );
});

describe('isInHoveringRange', () => {
  it.each`
    date                                               | startDate               | endDate                 | tempDate                | isSettingStartDate | isSettingEndDate | expected
    ${{ date: new Date(2024, 3, 5), disabled: false }} | ${undefined}            | ${new Date(2024, 3, 2)} | ${new Date(2024, 3, 4)} | ${true}            | ${false}         | ${false}
    ${{ date: new Date(2024, 3, 1), disabled: false }} | ${undefined}            | ${new Date(2024, 3, 2)} | ${new Date(2024, 3, 4)} | ${true}            | ${false}         | ${false}
    ${{ date: new Date(2024, 3, 3), disabled: false }} | ${new Date(2024, 3, 3)} | ${undefined}            | ${new Date(2024, 3, 5)} | ${false}           | ${true}          | ${false}
    ${{ date: new Date(2024, 3, 3), disabled: false }} | ${new Date(2024, 3, 3)} | ${undefined}            | ${new Date(2024, 3, 5)} | ${false}           | ${true}          | ${false}
    ${{ date: new Date(2024, 3, 5), disabled: false }} | ${new Date(2024, 3, 3)} | ${new Date(2024, 3, 7)} | ${new Date(2024, 3, 5)} | ${true}            | ${false}         | ${true}
    ${{ date: new Date(2024, 3, 8), disabled: false }} | ${new Date(2024, 3, 3)} | ${new Date(2024, 3, 7)} | ${new Date(2024, 3, 5)} | ${true}            | ${false}         | ${false}
    ${{ date: new Date(2024, 3, 4), disabled: false }} | ${new Date(2024, 3, 3)} | ${new Date(2024, 3, 7)} | ${new Date(2024, 3, 5)} | ${false}           | ${true}          | ${true}
    ${{ date: new Date(2024, 3, 3), disabled: false }} | ${new Date(2024, 3, 3)} | ${new Date(2024, 3, 7)} | ${new Date(2024, 3, 5)} | ${false}           | ${true}          | ${false}
  `(
    'returns $expected when date is $date, startDate is $startDate, endDate is $endDate, tempDate is $tempDate, isSettingStartDate is $isSettingStartDate, and isSettingEndDate is $isSettingEndDate',
    ({
      date,
      startDate,
      endDate,
      tempDate,
      isSettingStartDate,
      isSettingEndDate,
      expected,
    }) => {
      const result = isInHoveringRange({
        date,
        startDate,
        endDate,
        tempDate,
        isSettingStartDate,
        isSettingEndDate,
      });
      expect(result).toBe(expected);
    }
  );
});
