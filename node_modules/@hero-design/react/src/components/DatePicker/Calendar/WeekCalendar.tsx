import React, { useState, useCallback, useEffect, useMemo } from 'react';
import getDate from 'date-fns/fp/getDate';
import getWeek from 'date-fns/getWeek';
import getMonth from 'date-fns/fp/getMonth';
import getYear from 'date-fns/fp/getYear';
import addMonths from 'date-fns/fp/addMonths';
import subMonths from 'date-fns/fp/subMonths';
import addYears from 'date-fns/fp/addYears';
import subYears from 'date-fns/fp/subYears';
import setMonth from 'date-fns/fp/setMonth';
import setYear from 'date-fns/fp/setYear';

import type { ReactElement, MouseEvent } from 'react';
import Select from '../../Select';
import Divider from '../../Divider';
import Button from '../../Button';

import {
  Container,
  Navigation,
  CalendarWrapper,
  CalendarRow,
  DayWrapper,
  Day,
  Week,
  WeekWrapper,
} from './StyledCalendar';

import {
  getMonthMatrix,
  generateYearOptions,
  generateMonthOptions,
  getWeekCalendarDayState,
  getWeekCalendarState,
  disableYear,
  disableMonthsNavigation,
  getWeekDays,
} from './utils';
import type { WeekState, DayState } from './StyledCalendar';
import { useTranslation } from '../../LocaleProvider/hooks';

type SelectMonthAndYearProps = {
  currentDate?: Date;
  date: Date;
  month: number;
  onChangeMonth: (month?: string | number) => void;
  onChangeYear: (year?: string | number) => void;
  setDate: (date: Date) => void;
  year: number;
};
export const SelectMonthAndYear = ({
  currentDate = new Date(),
  year,
  month,
  onChangeMonth,
  onChangeYear,
  date,
  setDate,
}: SelectMonthAndYearProps): ReactElement => {
  const calendarMinDate = subYears(100, currentDate);
  const calendarMaxDate = addYears(100, currentDate);

  const yearOptions = generateYearOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
  });

  const monthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year,
  });

  const { disabledPreviousMonth, disabledNextMonth } = disableMonthsNavigation(
    date,
    calendarMinDate,
    calendarMaxDate
  );

  const disabledNextYear = disableYear(year + 1, yearOptions);
  const disabledPreviousYear = disableYear(year - 1, yearOptions);

  const onNavigationClick = useCallback(
    ({ isMoveBack }: { isMoveBack: boolean }): void => {
      const newDate = isMoveBack ? subMonths(1, date) : addMonths(1, date);
      setDate(newDate);
    },
    [date, setDate]
  );

  const onDoubleNavigationClick = useCallback(
    ({ isMoveBack }: { isMoveBack: boolean }): void => {
      const newDate = isMoveBack ? subYears(1, date) : addYears(1, date);
      setDate(newDate);
    },
    [date, setDate]
  );

  return (
    <Navigation>
      <Button.Icon
        size="small"
        icon="double-left-arrows"
        intent="primary"
        onClick={(): void => onDoubleNavigationClick({ isMoveBack: true })}
        sx={{
          mr: 'small',
        }}
        data-test-id="sub-year-week-picker"
        disabled={disabledPreviousYear}
      />
      <Button.Icon
        size="small"
        icon="single-left-arrow"
        intent="primary"
        onClick={() => onNavigationClick({ isMoveBack: true })}
        data-test-id="sub-month-week-picker"
        sx={{
          mr: 'small',
        }}
        disabled={disabledPreviousMonth}
      />
      <Select
        options={monthOptions}
        value={month}
        onChange={onChangeMonth}
        data-test-id="month-select"
      />
      <Select
        options={yearOptions}
        value={year}
        onChange={onChangeYear}
        data-test-id="year-select"
      />
      <Button.Icon
        size="small"
        icon="single-right-arrow"
        intent="primary"
        onClick={(): void => onNavigationClick({ isMoveBack: false })}
        sx={{
          mr: 'small',
          ml: 'small',
        }}
        data-test-id="add-month-week-picker"
        disabled={disabledNextMonth}
      />
      <Button.Icon
        size="small"
        icon="double-right-arrows"
        intent="primary"
        disabled={disabledNextYear}
        onClick={(): void => onDoubleNavigationClick({ isMoveBack: false })}
        data-test-id="add-year-week-picker"
      />
    </Navigation>
  );
};

export const FirstRowOfWeekCalendar = ({
  weekStartsOn,
}: {
  weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
}) => {
  const days = useMemo(() => getWeekDays({ weekStartsOn }), [weekStartsOn]);
  const { t } = useTranslation();
  return (
    <CalendarRow>
      <WeekWrapper>
        <Day themeState="dayLabel">{t('Week')}</Day>
      </WeekWrapper>
      <Divider variant="vertical" marginX="xsmall" />
      {days.map((day) => (
        <DayWrapper key={day}>
          <Day themeState="dayLabel">{day}</Day>
        </DayWrapper>
      ))}
    </CalendarRow>
  );
};

type WeekComponentProps = {
  firstDateState: WeekState;
  onMouseOver: () => void;
  showedWeekNumber: number;
};
export const WeekComponent = ({
  onMouseOver,
  firstDateState,
  showedWeekNumber,
}: WeekComponentProps): ReactElement => {
  return (
    <WeekWrapper>
      <Week
        onMouseOver={onMouseOver}
        onFocus={onMouseOver}
        themeState={firstDateState}
      >
        {showedWeekNumber}
      </Week>
    </WeekWrapper>
  );
};

type DayComponentProps = {
  dateState: DayState;
  day: number;
  onMouseOver: () => void;
};
export const DayComponent = ({
  day,
  dateState,
  onMouseOver,
}: DayComponentProps): ReactElement => {
  return (
    <DayWrapper
      themeState={dateState}
      onMouseOver={onMouseOver}
      onFocus={onMouseOver}
    >
      <Day themeState={dateState}>{day}</Day>
    </DayWrapper>
  );
};

type DayProps = {
  date: Date;
  disabled: boolean;
};
type WeekProps = DayProps[];
type CalendarComponentProps = {
  monthMatrix: WeekProps[];
  onSelectFirstDateOfWeek?: (date: Date) => void;
  selectedFirstDateOfWeek?: Date;
  setTempDate: (date: Date) => void;
  tempDate?: Date;
  weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
};
const CalendarMatrix = ({
  monthMatrix,
  onSelectFirstDateOfWeek,
  selectedFirstDateOfWeek,
  setTempDate,
  tempDate,
  weekStartsOn,
}: CalendarComponentProps): ReactElement => {
  return (
    <>
      {monthMatrix.map((week: WeekProps, weekNumber: number) => {
        const firstDate = week[0] !== undefined ? week[0].date : new Date();

        const onDateClick = (e: MouseEvent): void => {
          if (onSelectFirstDateOfWeek !== undefined) {
            onSelectFirstDateOfWeek(firstDate);
          }
          e.preventDefault();
        };

        const onMouseOverDay = (hoveredDate: Date): void => {
          setTempDate(hoveredDate);
        };

        const firstDateObject = {
          date: week[0] !== undefined ? week[0].date : new Date(),
          disabled: week[0] !== undefined ? week[0]?.disabled : false,
        };
        const showedWeekNumber = getWeek(firstDate, { weekStartsOn });
        const firstDateState = getWeekCalendarState({
          dateOfWeek: firstDateObject,
          selectedDate: selectedFirstDateOfWeek,
          tempDate,
          weekStartsOn,
        });

        return (
          // eslint-disable-next-line react/no-array-index-key
          <CalendarRow key={weekNumber} onClick={(e) => onDateClick(e)}>
            <WeekComponent
              onMouseOver={(): void => onMouseOverDay(firstDate)}
              firstDateState={firstDateState}
              showedWeekNumber={showedWeekNumber}
            />
            <Divider variant="vertical" marginX="xsmall" />
            {week.map((dateOfWeek) => {
              const day = getDate(dateOfWeek.date);
              const dateState = getWeekCalendarDayState({
                dateOfWeek,
                selectedDate: selectedFirstDateOfWeek,
                tempDate,
                weekStartsOn,
              });

              return (
                <DayComponent
                  // eslint-disable-next-line react/no-array-index-key
                  key={`${weekNumber}-${day}`}
                  day={day}
                  dateState={dateState}
                  onMouseOver={(): void => onMouseOverDay(dateOfWeek.date)}
                />
              );
            })}
          </CalendarRow>
        );
      })}
    </>
  );
};

export interface WeekCalendarProps {
  onSelectFirstDateOfWeek?: (date: Date) => void;
  selectedFirstDateOfWeek?: Date;
  weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
}
const WeekCalendar = ({
  onSelectFirstDateOfWeek,
  selectedFirstDateOfWeek,
  weekStartsOn = 0,
}: WeekCalendarProps): ReactElement => {
  const currentDate = new Date();
  const initialDate =
    selectedFirstDateOfWeek !== undefined
      ? selectedFirstDateOfWeek
      : currentDate;
  const [date, setDate] = useState<Date>(initialDate);
  const [tempDate, setTempDate] = useState<Date>();
  const month = getMonth(date);
  const year = getYear(date);

  const onChangeMonth = useCallback(
    (newMonth) => {
      setDate(setMonth(newMonth, date));
    },
    [date, setDate]
  );

  const onChangeYear = useCallback(
    (newYear) => {
      setDate(setYear(newYear, date));
    },
    [date, setDate]
  );

  useEffect(() => {
    setDate(
      selectedFirstDateOfWeek !== undefined
        ? selectedFirstDateOfWeek
        : new Date()
    );
  }, [selectedFirstDateOfWeek, setDate]);

  const monthMatrix = getMonthMatrix({ month, year, weekStartsOn });
  return (
    <Container>
      <SelectMonthAndYear
        currentDate={currentDate}
        year={year}
        month={month}
        onChangeMonth={onChangeMonth}
        onChangeYear={onChangeYear}
        date={date}
        setDate={setDate}
      />
      <CalendarWrapper>
        <FirstRowOfWeekCalendar weekStartsOn={weekStartsOn} />
        <CalendarMatrix
          monthMatrix={monthMatrix}
          onSelectFirstDateOfWeek={onSelectFirstDateOfWeek}
          selectedFirstDateOfWeek={selectedFirstDateOfWeek}
          setTempDate={setTempDate}
          tempDate={tempDate}
          weekStartsOn={weekStartsOn}
        />
      </CalendarWrapper>
    </Container>
  );
};

export default WeekCalendar;
