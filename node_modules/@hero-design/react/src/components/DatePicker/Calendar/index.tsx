import React, { useState, useCallback, useEffect } from 'react';
import getDate from 'date-fns/fp/getDate';
import getMonth from 'date-fns/fp/getMonth';
import getYear from 'date-fns/fp/getYear';
import addYears from 'date-fns/fp/addYears';
import subYears from 'date-fns/fp/subYears';
import addMonths from 'date-fns/fp/addMonths';
import subMonths from 'date-fns/fp/subMonths';
import setMonth from 'date-fns/fp/setMonth';
import setYear from 'date-fns/fp/setYear';

import type { ReactElement, MouseEvent } from 'react';
import Select from '../../Select';
import Button from '../../Button';

import {
  Container,
  Navigation,
  CalendarWrapper,
  CalendarRow,
  DayWrapper,
  Day,
} from './StyledCalendar';

import {
  getWeekDays,
  getMonthMatrix,
  getSingleCalendarDayState,
  generateYearOptions,
  generateMonthOptions,
  disableYear,
  disableMonthsNavigation,
} from './utils';

import DoubleCalendar from './DoubleCalendar';
import MonthCalendar from './MonthCalendar';
import WeekCalendar from './WeekCalendar';
import DoubleMonthCalendar from './DoubleMonthCalendar';

interface CalendarProps {
  maxDate?: Date;
  minDate?: Date;
  onSelectDate?: (date: Date) => void;
  selectedDate?: Date;
}

const Calendar = ({
  selectedDate,
  onSelectDate,
  minDate,
  maxDate,
}: CalendarProps): ReactElement => {
  const currentDate = new Date();
  const initialDate = selectedDate !== undefined ? selectedDate : currentDate;
  const [date, setDate] = useState<Date>(initialDate);
  const month = getMonth(date);
  const year = getYear(date);

  const calendarMinDate =
    minDate !== undefined ? minDate : subYears(100, currentDate);
  const calendarMaxDate =
    maxDate !== undefined ? maxDate : addYears(100, currentDate);

  const yearOptions = generateYearOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
  });

  const monthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year,
  });

  const { disabledPreviousMonth, disabledNextMonth } = disableMonthsNavigation(
    date,
    calendarMinDate,
    calendarMaxDate
  );

  const disabledNextYear = disableYear(year + 1, yearOptions);
  const disabledPreviousYear = disableYear(year - 1, yearOptions);

  const onChangeMonth = useCallback(
    (newMonth) => {
      setDate(setMonth(newMonth, date));
    },
    [date, setDate]
  );

  const onChangeYear = useCallback(
    (newYear) => {
      setDate(setYear(newYear, date));
    },
    [date, setDate]
  );

  useEffect(() => {
    setDate(selectedDate !== undefined ? selectedDate : new Date());
  }, [selectedDate, setDate]);

  const monthMatrix = getMonthMatrix({
    month,
    year,
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
  });

  const onDoubleNavigationClick = useCallback(
    ({ isMoveBack }: { isMoveBack: boolean }): void => {
      const newDate = isMoveBack ? subYears(1, date) : addYears(1, date);
      setDate(newDate);
    },
    [date, setDate]
  );

  const onNavigationClick = useCallback(
    ({ isMoveBack }: { isMoveBack: boolean }): void => {
      const newDate = isMoveBack ? subMonths(1, date) : addMonths(1, date);
      setDate(newDate);
    },
    [date, setDate]
  );

  return (
    <Container>
      <Navigation>
        <Button.Icon
          size="small"
          icon="double-left-arrows"
          intent="primary"
          onClick={(): void => onDoubleNavigationClick({ isMoveBack: true })}
          sx={{
            mr: 'small',
          }}
          data-test-id="sub-year"
          disabled={disabledPreviousYear}
        />
        <Button.Icon
          size="small"
          icon="single-left-arrow"
          intent="primary"
          onClick={(): void => onNavigationClick({ isMoveBack: true })}
          disabled={disabledPreviousMonth}
          data-test-id="sub-month"
          sx={{
            mr: 'small',
          }}
        />
        <Select
          options={monthOptions}
          value={month}
          onChange={onChangeMonth}
          data-test-id="month-select"
        />
        <Select
          options={yearOptions}
          value={year}
          onChange={onChangeYear}
          data-test-id="year-select"
        />
        <Button.Icon
          size="small"
          icon="single-right-arrow"
          intent="primary"
          onClick={(): void => onNavigationClick({ isMoveBack: false })}
          disabled={disabledNextMonth}
          sx={{
            mr: 'small',
            ml: 'small',
          }}
          data-test-id="add-month"
        />
        <Button.Icon
          size="small"
          icon="double-right-arrows"
          intent="primary"
          disabled={disabledNextYear}
          onClick={(): void => onDoubleNavigationClick({ isMoveBack: false })}
          data-test-id="add-year"
        />
      </Navigation>
      <CalendarWrapper>
        <CalendarRow>
          {getWeekDays().map((day) => (
            <DayWrapper key={day}>
              <Day themeState="dayLabel">{day}</Day>
            </DayWrapper>
          ))}
        </CalendarRow>
        {monthMatrix.map((week, weekNumber) => (
          // eslint-disable-next-line react/no-array-index-key
          <CalendarRow key={weekNumber}>
            {week.map((dateOfWeek) => {
              const day = getDate(dateOfWeek.date);
              const onDateClick = (e: MouseEvent, clickedDate: Date): void => {
                if (onSelectDate !== undefined) {
                  onSelectDate(clickedDate);
                }
                e.preventDefault();
              };
              const dateState = getSingleCalendarDayState({
                dateOfWeek,
                selectedDate,
              });
              return (
                // eslint-disable-next-line react/no-array-index-key
                <DayWrapper key={`${weekNumber}-${day}`}>
                  <Day
                    themeState={dateState}
                    onClick={
                      dateState !== 'disabled'
                        ? (e): void => onDateClick(e, dateOfWeek.date)
                        : undefined
                    }
                  >
                    {day}
                  </Day>
                </DayWrapper>
              );
            })}
          </CalendarRow>
        ))}
      </CalendarWrapper>
    </Container>
  );
};

Calendar.Double = DoubleCalendar;
Calendar.Month = MonthCalendar;
Calendar.Week = WeekCalendar;
Calendar.DoubleMonth = DoubleMonthCalendar;

export default Calendar;
