/* eslint-disable react/no-unused-prop-types */
import React, { useState, useCallback, useMemo } from 'react';
import getYear from 'date-fns/fp/getYear';
import addYears from 'date-fns/fp/addYears';
import subYears from 'date-fns/fp/subYears';
import setYear from 'date-fns/fp/setYear';

import type { ReactElement, MouseEvent } from 'react';
import endOfYear from 'date-fns/fp/endOfYear';
import startOfYear from 'date-fns/fp/startOfYear';
import Select from '../../Select';
import Divider from '../../Divider';

import {
  Container,
  Navigation,
  DoubleCalendarContainer,
  CalendarContainer,
  CalendarWrapper,
  MonthGrid,
  MonthGridItem,
  Month,
  MonthWrapper,
} from './StyledCalendar';

import {
  generateMonthOptions,
  generateYearOptions,
  getDoubleCalendarMonthState,
  getMonthPickerOptions,
} from './utils';

export interface SingleMonthCalendarProps {
  dateClickCount: number;
  startDate?: Date;
  endDate?: Date;
  isSettingEndDate: boolean;
  isSettingStartDate: boolean;
  maxDate?: Date;
  minDate?: Date;
  tempDate?: Date;
  selectedYear: number;
  onMonthClick: (e: MouseEvent<HTMLSpanElement>, clickedDate: Date) => void;
  onMouseOverDay: (date: Date) => void;
}

const SingleMonthCalendar = ({
  isSettingEndDate,
  dateClickCount,
  startDate,
  endDate,
  tempDate,
  isSettingStartDate,
  selectedYear,
  minDate,
  maxDate,
  onMonthClick,
  onMouseOverDay,
}: SingleMonthCalendarProps) => {
  const monthOptions = useMemo(
    () => getMonthPickerOptions({ year: selectedYear, minDate, maxDate }),
    [maxDate, minDate, selectedYear]
  );
  return (
    <CalendarWrapper>
      <MonthGrid>
        {monthOptions.map((currentMonth) => {
          const monthState = getDoubleCalendarMonthState({
            month: currentMonth,
            isSettingEndDate,
            dateClickCount,
            startDate,
            endDate,
            tempDate,
            isSettingStartDate,
          });
          return (
            <MonthGridItem key={currentMonth.text}>
              <MonthWrapper themeState={monthState}>
                <Month
                  themeState={monthState}
                  onClick={
                    !['disabled', 'outOfTheMonth'].includes(monthState)
                      ? (e) => onMonthClick(e, currentMonth.date)
                      : undefined
                  }
                  onMouseOver={() => onMouseOverDay(currentMonth.date)}
                  onFocus={() => onMouseOverDay(currentMonth.date)}
                >
                  {currentMonth.text}
                </Month>
              </MonthWrapper>
            </MonthGridItem>
          );
        })}
      </MonthGrid>
    </CalendarWrapper>
  );
};

export interface DoubleMonthCalendarProps {
  dateClickCount: number;
  endDate?: Date;
  isSettingEndDate: boolean;
  isSettingStartDate: boolean;
  maxDate?: Date;
  minDate?: Date;
  onSelectDate?: (date: Date) => void;
  onSelectStartDate?: (date: Date) => void;
  onSelectEndDate?: (date: Date) => void;
  startDate?: Date;
}

const DoubleMonthCalendar = ({
  startDate,
  endDate,
  minDate,
  maxDate,
  onSelectDate,
  onSelectStartDate,
  onSelectEndDate,
  isSettingStartDate,
  isSettingEndDate,
  dateClickCount,
}: DoubleMonthCalendarProps): ReactElement => {
  const currentDate = useMemo(() => new Date(), []);
  const initialDate = startDate !== undefined ? startDate : currentDate;
  const [date, setDate] = useState<Date>(initialDate);
  const [tempDate, setTempDate] = useState<Date>();
  const year = getYear(date);

  const calendarMinDate = useMemo(
    () =>
      minDate !== undefined ? minDate : startOfYear(subYears(100, currentDate)),
    [minDate, currentDate]
  );

  const calendarMaxDate = useMemo(
    () =>
      maxDate !== undefined ? maxDate : endOfYear(addYears(100, currentDate)),
    [maxDate, currentDate]
  );

  const nextYear = useMemo(() => {
    const minYear = getYear(calendarMinDate);
    const maxYear = getYear(calendarMaxDate);
    if (year < minYear) return year;
    if (year + 1 <= maxYear) {
      return year + 1;
    }
    return year;
  }, [calendarMinDate, calendarMaxDate, year]);

  const initialYearOptions = useMemo(
    () =>
      generateYearOptions({
        minDate: calendarMinDate,
        maxDate: calendarMaxDate,
      }),
    [calendarMinDate, calendarMaxDate]
  );

  const yearOptions = initialYearOptions;

  const monthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year,
  });

  const nextMonthOptions = generateMonthOptions({
    minDate: calendarMinDate,
    maxDate: calendarMaxDate,
    year: nextYear,
  });

  const onChangeMonth = useCallback(
    (newMonth) => {
      onSelectStartDate?.(new Date(year, newMonth));
    },
    [onSelectStartDate, year]
  );

  const onChangeYear = useCallback(
    (newYear) => {
      setDate(setYear(newYear, date));
    },
    [date, setDate]
  );

  const onChangeNextMonth = useCallback(
    (newMonth) => {
      onSelectEndDate?.(new Date(nextYear, newMonth));
    },
    [onSelectEndDate, nextYear]
  );

  const onChangeNextYear = useCallback(
    (newYear) => {
      const minYear = getYear(calendarMinDate);
      setDate(new Date(minYear < newYear - 1 ? newYear - 1 : newYear, 0));
    },
    [calendarMinDate]
  );

  const onMouseOverDay = useCallback(
    (hoveredDate: Date): void => {
      setTempDate(hoveredDate);
    },
    [setTempDate]
  );

  const onMonthClick = useCallback(
    (e: MouseEvent<HTMLSpanElement>, clickedDate: Date): void => {
      if (onSelectDate !== undefined) {
        onSelectDate(clickedDate);
      }
      e.preventDefault();
    },
    [onSelectDate]
  );

  return (
    <Container>
      <DoubleCalendarContainer>
        <CalendarContainer>
          <Navigation>
            <Select
              options={monthOptions}
              value={startDate?.getMonth()}
              onChange={onChangeMonth}
              data-test-id="first-month-select"
            />
            <Select
              options={yearOptions}
              value={year}
              onChange={onChangeYear}
              data-test-id="first-year-select"
            />
          </Navigation>
          <SingleMonthCalendar
            minDate={minDate}
            maxDate={maxDate}
            isSettingEndDate={isSettingEndDate}
            dateClickCount={dateClickCount}
            startDate={startDate}
            endDate={endDate}
            tempDate={tempDate}
            isSettingStartDate={isSettingStartDate}
            onMonthClick={onMonthClick}
            onMouseOverDay={onMouseOverDay}
            selectedYear={year}
          />
        </CalendarContainer>
        <Divider marginX="small" />
        <CalendarContainer>
          <Navigation>
            <Select
              options={nextMonthOptions}
              value={endDate?.getMonth()}
              onChange={onChangeNextMonth}
              data-test-id="second-month-select"
            />
            <Select
              options={yearOptions}
              value={nextYear}
              onChange={onChangeNextYear}
              data-test-id="second-year-select"
            />
          </Navigation>
          <SingleMonthCalendar
            minDate={minDate}
            maxDate={maxDate}
            isSettingEndDate={isSettingEndDate}
            dateClickCount={dateClickCount}
            startDate={startDate}
            endDate={endDate}
            tempDate={tempDate}
            isSettingStartDate={isSettingStartDate}
            onMonthClick={onMonthClick}
            onMouseOverDay={onMouseOverDay}
            selectedYear={nextYear}
          />
        </CalendarContainer>
      </DoubleCalendarContainer>
    </Container>
  );
};

export default DoubleMonthCalendar;
