import startOfMonth from 'date-fns/fp/startOfMonth';
import endOfMonth from 'date-fns/fp/endOfMonth';
import startOfWeek from 'date-fns/startOfWeek';
import endOfWeek from 'date-fns/endOfWeek';
import eachWeekOfInterval from 'date-fns/eachWeekOfInterval';
import eachDayOfInterval from 'date-fns/fp/eachDayOfInterval';
import addDays from 'date-fns/fp/addDays';
import addWeeks from 'date-fns/fp/addWeeks';
import subDays from 'date-fns/fp/subDays';
import getMonth from 'date-fns/fp/getMonth';
import getYear from 'date-fns/fp/getYear';
import isSameDay from 'date-fns/fp/isSameDay';
import isBefore from 'date-fns/fp/isBefore';
import isAfter from 'date-fns/fp/isAfter';
import eachYearOfInterval from 'date-fns/fp/eachYearOfInterval';
import addMonths from 'date-fns/fp/addMonths';
import subMonths from 'date-fns/fp/subMonths';
import startOfYear from 'date-fns/fp/startOfYear';
import endOfYear from 'date-fns/fp/endOfYear';
import subYears from 'date-fns/fp/subYears';
import addYears from 'date-fns/fp/addYears';
import isSameMonth from 'date-fns/fp/isSameMonth';
import format from 'date-fns/format';

type WeekStartDate = 0 | 1 | 2 | 3 | 4 | 5 | 6;

const getMonths = () =>
  Array.from(Array(12)).map((_, month) => format(new Date(2024, month), 'LLL'));

const getWeekDays = (
  opts: { weekStartsOn?: WeekStartDate } = { weekStartsOn: 0 }
) => {
  const { weekStartsOn = 0 } = opts;
  return Array.from(Array(7)).map((_, day) =>
    format(addDays(day, startOfWeek(new Date(), { weekStartsOn })), 'EEEEEE')
  );
};

const getMonthMatrix = ({
  month,
  year,
  minDate,
  maxDate,
  weekStartsOn = 0,
}: {
  maxDate?: Date;
  minDate?: Date;
  month: number;
  year: number;
  weekStartsOn?: WeekStartDate;
}): { date: Date; disabled: boolean }[][] => {
  const date = new Date(year, month);
  const weekStartDates = eachWeekOfInterval(
    {
      start: startOfMonth(date),
      end: addWeeks(1, endOfMonth(date)),
    },
    { weekStartsOn }
  );

  const monthMatrix = weekStartDates
    .filter((_date, index) => index < 6)
    .map((weekStartDate) =>
      eachDayOfInterval({
        start: startOfWeek(weekStartDate, { weekStartsOn }),
        end: endOfWeek(weekStartDate, { weekStartsOn }),
      }).map((dateOfWeek) => ({
        date: dateOfWeek,
        disabled:
          getMonth(dateOfWeek) !== month ||
          (minDate !== undefined && isBefore(minDate, dateOfWeek)) ||
          (maxDate !== undefined && isAfter(maxDate, dateOfWeek)),
      }))
    );

  return monthMatrix;
};

const getSingleCalendarDayState = ({
  dateOfWeek,
  selectedDate,
}: {
  dateOfWeek: { date: Date; disabled: boolean };
  selectedDate?: Date;
}): 'enabled' | 'disabled' | 'selected' | 'today' => {
  if (dateOfWeek.disabled === true) {
    return 'disabled';
  }

  if (selectedDate !== undefined && isSameDay(dateOfWeek.date, selectedDate)) {
    return 'selected';
  }

  if (isSameDay(dateOfWeek.date, new Date())) {
    return 'today';
  }

  return 'enabled';
};

const getWeekCalendarState = ({
  dateOfWeek,
  selectedDate,
  tempDate,
  weekStartsOn,
}: {
  dateOfWeek: { date: Date; disabled: boolean };
  selectedDate?: Date;
  tempDate?: Date;
  weekStartsOn?: WeekStartDate;
}): 'enabled' | 'disabled' | 'selected' | 'inHoveringWeek' => {
  if (selectedDate !== undefined) {
    const firstDateOfWeek = startOfWeek(selectedDate, { weekStartsOn });
    if (isSameDay(firstDateOfWeek, dateOfWeek.date)) {
      return 'selected';
    }
  }
  if (tempDate !== undefined) {
    const firstDateOfWeek = startOfWeek(tempDate, { weekStartsOn });
    const lastDateOfWeek = endOfWeek(tempDate, { weekStartsOn });
    if (
      (isAfter(firstDateOfWeek, dateOfWeek.date) &&
        isBefore(lastDateOfWeek, dateOfWeek.date)) ||
      isSameDay(firstDateOfWeek, dateOfWeek.date) ||
      isSameDay(lastDateOfWeek, dateOfWeek.date)
    ) {
      return 'inHoveringWeek';
    }
  }

  if (dateOfWeek.disabled === true) {
    return 'disabled';
  }

  return 'enabled';
};

const getWeekState = ({
  date,
  dateOfWeek,
  weekStartsOn,
  selected,
}: {
  date: Date;
  dateOfWeek: Date;
  weekStartsOn: WeekStartDate;
  selected: boolean;
}) => {
  const firstDateOfWeek = startOfWeek(date, { weekStartsOn });
  const lastDateOfWeek = endOfWeek(date, { weekStartsOn });

  if (isSameDay(firstDateOfWeek, dateOfWeek)) {
    return selected ? 'selectedFirstDateOfWeek' : 'inHoveringFirstDateOfWeek';
  }

  if (isSameDay(lastDateOfWeek, dateOfWeek)) {
    return selected ? 'selectedLastDateOfWeek' : 'inHoveringLastDateOfWeek';
  }

  if (
    isAfter(firstDateOfWeek, dateOfWeek) &&
    isBefore(lastDateOfWeek, dateOfWeek)
  ) {
    return selected ? 'selectedWeekDate' : 'inHoveringWeekDate';
  }

  return null;
};

const getWeekCalendarDayState = ({
  dateOfWeek,
  selectedDate,
  tempDate,
  weekStartsOn = 0,
}: {
  dateOfWeek: { date: Date; disabled: boolean };
  selectedDate?: Date;
  tempDate?: Date;
  weekStartsOn?: WeekStartDate;
}):
  | 'enabled'
  | 'disabled'
  | 'today'
  | 'inHoveringWeekDate'
  | 'selectedWeekDate'
  | 'selectedFirstDateOfWeek'
  | 'selectedLastDateOfWeek'
  | 'inHoveringFirstDateOfWeek'
  | 'inHoveringLastDateOfWeek' => {
  if (selectedDate !== undefined) {
    const state = getWeekState({
      date: selectedDate,
      dateOfWeek: dateOfWeek.date,
      weekStartsOn,
      selected: true,
    });
    if (state) {
      return state;
    }
  }

  if (tempDate !== undefined) {
    const state = getWeekState({
      date: tempDate,
      dateOfWeek: dateOfWeek.date,
      weekStartsOn,
      selected: false,
    });
    if (state) {
      return state;
    }
  }

  if (isSameDay(dateOfWeek.date, new Date())) {
    return 'today';
  }

  if (dateOfWeek.disabled === true) {
    return 'disabled';
  }

  return 'enabled';
};

type YearType = {
  text: string;
  value: number;
};

const generateYearOptions = ({
  maxDate,
  minDate,
}: {
  maxDate: Date;
  minDate: Date;
}): YearType[] => {
  return eachYearOfInterval({ start: minDate, end: maxDate }).map(
    (dateOfYear) => {
      const year = getYear(dateOfYear);
      return {
        value: year,
        text: year.toString(),
      };
    }
  );
};

type MonthType = {
  disabled?: boolean;
  text: string;
  value: number;
};

const disableMonthOption = ({
  monthOpt,
  minMonth,
  maxMonth,
}: {
  monthOpt: MonthType;
  minMonth: number;
  maxMonth: number;
}) => {
  if (monthOpt.value < minMonth || monthOpt.value > maxMonth) {
    return { ...monthOpt, disabled: true };
  }
  return monthOpt;
};

const generateMonthOptions = ({
  maxDate,
  minDate,
  year,
}: {
  maxDate: Date;
  minDate: Date;
  year: number;
}): MonthType[] => {
  const monthOptions = getMonths().map((month, index) => ({
    value: index,
    text: month,
  }));

  const minYear = getYear(minDate);
  const maxYear = getYear(maxDate);

  const minMonth = getMonth(minDate);
  const maxMonth = getMonth(maxDate);

  if (year > minYear && year < maxYear) return monthOptions;

  if (minYear === year && maxYear === year) {
    return monthOptions.map((monthOpt) =>
      disableMonthOption({ monthOpt, minMonth, maxMonth })
    );
  }

  if (year === minYear && minYear < maxYear) {
    return monthOptions.map((monthOpt) =>
      disableMonthOption({ monthOpt, minMonth, maxMonth: 11 })
    );
  }

  if (minYear < maxYear && year === maxYear) {
    return monthOptions.map((monthOpt) =>
      disableMonthOption({ monthOpt, minMonth: 0, maxMonth })
    );
  }

  return monthOptions.map((monthOpt) => {
    return { ...monthOpt, disabled: true };
  });
};

const getMonthPickerOptions = ({
  maxDate,
  minDate,
  year,
}: {
  maxDate?: Date;
  minDate?: Date;
  year: number;
}): {
  date: Date;
  disabled: boolean;
  text: string;
}[] => {
  const result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((monthIndex) => {
    const monthStartDate = startOfMonth(new Date(year, monthIndex));
    const disabled =
      (minDate !== undefined && isBefore(minDate, monthStartDate)) ||
      (maxDate !== undefined && isAfter(maxDate, monthStartDate));
    const text = getMonths()[monthIndex];
    return {
      date: monthStartDate,
      disabled,
      text: text !== undefined ? text : '',
    };
  });

  return result;
};

const disableMonthsNavigation = (date: Date, minDate: Date, maxDate: Date) => {
  const startOfMonthMinDate = startOfMonth(minDate);
  const endOfMonthMaxDate = endOfMonth(maxDate);

  const dateInPreviousMonth = subMonths(1, date);
  const dateInNextMonth = addMonths(1, date);

  return {
    disabledPreviousMonth: isBefore(startOfMonthMinDate, dateInPreviousMonth),
    disabledNextMonth: isAfter(endOfMonthMaxDate, dateInNextMonth),
  };
};

const disableMonthRangeNavigation = (
  date: Date,
  minDate: Date,
  maxDate: Date
) => {
  const startOfMonthMinDate = startOfYear(minDate);
  const endOfMonthMaxDate = endOfYear(maxDate);

  const dateInPreviousYear = subYears(1, date);
  const dateInNextYear = addYears(1, date);

  return {
    disabledPreviousYear: isBefore(startOfMonthMinDate, dateInPreviousYear),
    disabledNextYear: isAfter(endOfMonthMaxDate, dateInNextYear),
  };
};

const disableYear = (year: number, yearOptions: YearType[]) => {
  const foundYear = yearOptions.find((yearOpt) => yearOpt.value === year);

  return foundYear === undefined;
};

// Double Calendar utils

const isDisabledDate = ({
  date,
  startDate,
  endDate,
  isSettingStartDate,
  isSettingEndDate,
  dateClickCount,
}: {
  date: { date: Date; disabled: boolean };
  startDate?: Date;
  endDate?: Date;
  isSettingEndDate: boolean;
  isSettingStartDate: boolean;
  dateClickCount: number;
}) =>
  date.disabled ||
  (!!startDate &&
    isSettingEndDate &&
    dateClickCount === 1 &&
    isBefore(startDate, date.date)) ||
  (!!endDate &&
    isSettingStartDate &&
    dateClickCount === 1 &&
    isAfter(endDate, date.date));

const isInHoveringRange = ({
  date,
  startDate,
  endDate,
  tempDate,
  isSettingStartDate,
  isSettingEndDate,
}: {
  date: { date: Date; disabled: boolean };
  startDate?: Date;
  endDate?: Date;
  tempDate?: Date;
  isSettingEndDate: boolean;
  isSettingStartDate: boolean;
}) =>
  (!!endDate &&
    !!tempDate &&
    isSettingStartDate &&
    isAfter(subDays(1, tempDate), date.date) &&
    isBefore(endDate, date.date)) ||
  (!!startDate &&
    !!tempDate &&
    isSettingEndDate &&
    isAfter(startDate, date.date) &&
    isBefore(addDays(1, tempDate), date.date));

const getDoubleCalendarDayState = ({
  dateOfWeek,
  isSettingStartDate,
  isSettingEndDate,
  dateClickCount,
  startDate,
  endDate,
  tempDate,
}: {
  dateClickCount: number;
  dateOfWeek: { date: Date; disabled: boolean };
  endDate?: Date;
  isSettingEndDate: boolean;
  isSettingStartDate: boolean;
  startDate?: Date;
  tempDate?: Date;
}):
  | 'enabled'
  | 'disabled'
  | 'selectedRangeDate'
  | 'selectedStartDate'
  | 'selectedEndDate'
  | 'today'
  | 'inRange'
  | 'inHoveringRange' => {
  if (
    isDisabledDate({
      date: dateOfWeek,
      startDate,
      endDate,
      isSettingEndDate,
      isSettingStartDate,
      dateClickCount,
    })
  ) {
    return 'disabled';
  }

  if (
    startDate !== undefined &&
    endDate !== undefined &&
    isSameDay(startDate, endDate) &&
    isSameDay(dateOfWeek.date, startDate)
  ) {
    return 'selectedRangeDate';
  }

  if (startDate !== undefined && isSameDay(dateOfWeek.date, startDate)) {
    return 'selectedStartDate';
  }

  if (endDate !== undefined && isSameDay(dateOfWeek.date, endDate)) {
    return 'selectedEndDate';
  }

  if (
    startDate !== undefined &&
    endDate !== undefined &&
    isAfter(startDate, dateOfWeek.date) &&
    isBefore(endDate, dateOfWeek.date)
  ) {
    return 'inRange';
  }

  if (
    isInHoveringRange({
      date: dateOfWeek,
      startDate,
      endDate,
      tempDate,
      isSettingStartDate,
      isSettingEndDate,
    })
  ) {
    return 'inHoveringRange';
  }

  if (isSameDay(dateOfWeek.date, new Date())) {
    return 'today';
  }

  return 'enabled';
};

const getDoubleCalendarMonthState = ({
  month,
  isSettingStartDate,
  isSettingEndDate,
  dateClickCount,
  startDate,
  endDate,
  tempDate,
}: {
  dateClickCount: number;
  month: { date: Date; disabled: boolean };
  endDate?: Date;
  isSettingEndDate: boolean;
  isSettingStartDate: boolean;
  startDate?: Date;
  tempDate?: Date;
}):
  | 'enabled'
  | 'disabled'
  | 'selectedRangeDate'
  | 'selectedStartDate'
  | 'selectedEndDate'
  | 'today'
  | 'inRange'
  | 'inHoveringRange'
  | 'outOfTheMonth' => {
  if (
    isDisabledDate({
      date: month,
      startDate,
      endDate,
      isSettingEndDate,
      isSettingStartDate,
      dateClickCount,
    })
  ) {
    return 'disabled';
  }

  if (
    startDate &&
    endDate &&
    isSameMonth(startDate, endDate) &&
    isSameMonth(month.date, startDate)
  ) {
    return 'selectedRangeDate';
  }

  if (startDate && isSameMonth(month.date, startDate)) {
    return 'selectedStartDate';
  }

  if (endDate && isSameMonth(month.date, endDate)) {
    return 'selectedEndDate';
  }

  if (
    startDate &&
    endDate &&
    isAfter(startDate, month.date) &&
    isBefore(endDate, month.date)
  ) {
    return 'inRange';
  }

  if (
    isInHoveringRange({
      date: month,
      startDate,
      endDate,
      tempDate,
      isSettingStartDate,
      isSettingEndDate,
    })
  ) {
    return 'inHoveringRange';
  }

  if (isSameMonth(month.date, new Date())) {
    return 'today';
  }

  return 'enabled';
};

export {
  getMonths,
  getMonthMatrix,
  getSingleCalendarDayState,
  getDoubleCalendarDayState,
  generateYearOptions,
  generateMonthOptions,
  getMonthPickerOptions,
  getWeekCalendarDayState,
  getWeekCalendarState,
  disableYear,
  disableMonthsNavigation,
  disableMonthRangeNavigation,
  disableMonthOption,
  getDoubleCalendarMonthState,
  getWeekDays,
  getWeekState,
  isDisabledDate,
  isInHoveringRange,
};
export type { YearType };
