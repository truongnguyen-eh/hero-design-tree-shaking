import React from 'react';
import { fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Widget from '../index';

describe('rendering', () => {
  it('renders correctly', () => {
    const { queryAllByTestId, getByText } = renderWithTheme(
      <Widget
        id="widget-render"
        title="Title"
        titleExtra={<div>Extra</div>}
        content={<div>Content</div>}
        actionsExtra={<div>Paginator</div>}
      />
    );

    expect(queryAllByTestId('drag-handle-widget-render')).toHaveLength(0);
    expect(getByText('Title')).toBeVisible();
    expect(getByText('Extra')).toBeVisible();
    expect(getByText('Content')).toBeVisible();
    expect(getByText('Paginator')).toBeVisible();
    expect(queryAllByTestId('resize-handle-widget-render')).toHaveLength(0);
  });
});

describe('interaction', () => {
  it('allows to open action dropdown', () => {
    const clickFn = jest.fn();
    const { getByTestId, getByText } = renderWithTheme(
      <Widget
        id="widget-action"
        title="Beta feature"
        actions={[
          {
            key: 'view',
            icon: 'eye-outlined',
            text: 'View details',
            onClick: clickFn,
          },
          {
            key: 'remove',
            icon: 'circle-remove-outlined',
            text: 'Remove widget',
            divider: 'top',
            intent: 'danger',
            disabled: true,
          },
        ]}
      />
    );

    expect(getByTestId('action-icon-widget-action')).toBeVisible();
    fireEvent.click(getByTestId('action-icon-widget-action'));
    expect(getByText('View details')).toBeVisible();
    expect(getByText('Remove widget')).toBeVisible();
    fireEvent.click(getByText('View details'));
    expect(clickFn).toHaveBeenCalledTimes(1);
    fireEvent.click(getByText('Remove widget'));
    expect(clickFn).toHaveBeenCalledTimes(1);
  });

  it('supports dragging/resizing effects', () => {
    const { getByTestId, getByText, container } = renderWithTheme(
      <div style={{ position: 'relative' }} data-test-id="widget-wrapper">
        <Widget
          id="widget-active"
          title="Title"
          titleExtra={<div>Extra</div>}
          actionsExtra={<div>Paginator</div>}
          content="Content"
          dragHandleConfig={{ id: 'drag-handle' }}
          resizeHandleConfig={{ id: 'resize-handle' }}
        />
        <div
          data-test-id="on-top-handle"
          style={{
            width: 5,
            height: 5,
            position: 'absolute',
            bottom: 0,
            right: 0,
          }}
        />
      </div>
    );

    expect(getByText('Title')).toBeVisible();

    const dragHandle = getByTestId('drag-handle-widget-active');
    const widgetWrapper = container.firstChild?.firstChild;

    // Hover to set draggable state
    fireEvent.mouseEnter(dragHandle);
    expect(widgetWrapper).toHaveStyle(`border-color: #7622d7`);
    fireEvent.mouseLeave(dragHandle);
    expect(widgetWrapper).toHaveStyle(`border-color: #dadbde`);

    const resizeHandle = getByTestId('resize-handle-widget-active');

    // Hover to set resizable state
    fireEvent.mouseEnter(resizeHandle);
    expect(widgetWrapper).toHaveStyle(`border-color: #7622d7`);

    // Reset resizable state
    // Move to content
    fireEvent.mouseOver(getByText('Content'), { relatedTarget: resizeHandle });
    expect(widgetWrapper).toHaveStyle(`border-color: #dadbde`);

    // Move to resize icon
    fireEvent.mouseEnter(resizeHandle);
    expect(widgetWrapper).toHaveStyle(`border-color: #7622d7`);
    fireEvent.mouseOver(getByTestId('resize-handle-icon-widget-active'), {
      relatedTarget: resizeHandle,
    });
    expect(widgetWrapper).toHaveStyle(`border-color: #7622d7`);

    // Move to custom handle on top of resize handle
    fireEvent.mouseOver(getByTestId('on-top-handle'), {
      relatedTarget: resizeHandle,
    });
    expect(widgetWrapper).toHaveStyle(`border-color: #7622d7`);

    // Move out of widget
    fireEvent.mouseOver(getByTestId('widget-wrapper'), {
      relatedTarget: widgetWrapper,
    });
    expect(widgetWrapper).toHaveStyle(`border-color: #dadbde`);
  });
});
