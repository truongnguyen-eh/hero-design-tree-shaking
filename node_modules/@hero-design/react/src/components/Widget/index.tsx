import React, { useState, useRef, useEffect, useCallback } from 'react';
import type { ReactNode, ReactElement, Key, MouseEvent } from 'react';

import {
  WidgetContainer,
  Header,
  HeaderLeft,
  HeaderRight,
  Content,
  ResizeHandle,
} from './StyledWidget';
import Button from '../Button';
import Divider from '../Divider';
import Dropdown from '../Dropdown';
import Icon from '../Icon';
import Menu from '../Menu';
import Typography from '../Typography';

import { useCss } from '../../utils/hooks';

import type { IconName } from '../Icon';
import type { CommonProps } from '../common';

interface WidgetProps extends CommonProps {
  /**
   * Widget actions.
   * It's recommended that each action MUST have a key. Otherwise, React defaults to using index as key, which is an anti-pattern in React.
   */
  actions?: {
    disabled?: boolean;
    divider?: 'top' | 'bottom';
    icon?: IconName;
    intent?: 'text' | 'danger';
    key?: Key;
    onClick?: (e: MouseEvent) => void;
    text: string;
  }[];
  /**
   * Custom extra acions to render next to action dropdown.
   */
  actionsExtra?: ReactElement;
  /**
   * Widget content.
   */
  content?: ReactNode;
  /**
   * Configuration for drag handle.
   */
  dragHandleConfig?: {
    id?: string;
    className?: string;
  };
  /**
   * Configuration for resize handle.
   */
  resizeHandleConfig?: {
    id?: string;
    className?: string;
  };
  /**
   * Widget title.
   */
  title: string;
  /**
   * Extra content next to the title.
   */
  titleExtra?: ReactElement;
}

const Widget = ({
  actions = [],
  actionsExtra,
  content,
  dragHandleConfig,
  resizeHandleConfig,
  title,
  titleExtra,
  id = 'hd-widget',
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: WidgetProps) => {
  const [openActionDropdown, setOpenActionDropdown] = useState(false);
  const [draggable, setDraggable] = useState(false);
  const [resizable, setResizable] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const resizeHanleRef = useRef<HTMLDivElement>(null);
  const hasRightItems = actions.length > 0 || actionsExtra;

  const resetResizable = useCallback((e: globalThis.MouseEvent) => {
    if (
      e.target instanceof Node &&
      e.relatedTarget instanceof Node &&
      containerRef.current &&
      resizeHanleRef.current
    ) {
      const isMoveInsideResizeHandle = resizeHanleRef.current.contains(
        e.target
      );

      const isResizeHandleContainsRelatedTarget =
        resizeHanleRef.current.contains(e.relatedTarget);
      const isTargetContainsResizeHandle = e.target.contains(
        resizeHanleRef.current
      );
      const isWidgetContainsTarget = containerRef.current.contains(e.target);
      const isMoveOnTopResizeHandle =
        isResizeHandleContainsRelatedTarget &&
        !isTargetContainsResizeHandle &&
        !isWidgetContainsTarget;

      if (isMoveInsideResizeHandle || isMoveOnTopResizeHandle) {
        setResizable(true);
      } else {
        setResizable(false);
      }
    }
  }, []);

  useEffect(() => {
    if (resizable) {
      document.addEventListener('mouseover', resetResizable);
    } else {
      document.removeEventListener('mouseover', resetResizable);
    }

    return () => {
      document.removeEventListener('mouseover', resetResizable);
    };
  }, [resizable, resetResizable]);

  let actionDropdown: ReactElement | null = null;

  if (actions.length > 0) {
    const actionIcon = (
      <Button.Icon
        icon="more-horizontal"
        intent="subdued-text"
        onClick={() => setOpenActionDropdown(!openActionDropdown)}
        data-test-id={`action-icon-${id}`}
      />
    );

    const actionList = (
      <Menu>
        {actions.map(
          ({ disabled, divider, icon, text, onClick, intent, key }) => {
            return (
              <React.Fragment key={key}>
                {divider === 'top' && <Divider data-test-id="divider-top" />}
                <Menu.Item
                  icon={icon}
                  text={text}
                  onClick={onClick}
                  intent={intent}
                  disabled={disabled}
                />
                {divider === 'bottom' && (
                  <Divider data-test-id="divider-bottom" />
                )}
              </React.Fragment>
            );
          }
        )}
      </Menu>
    );

    actionDropdown = (
      <Dropdown
        target={actionIcon}
        content={actionList}
        open={openActionDropdown}
        onClose={() => setOpenActionDropdown(false)}
      />
    );
  }

  return (
    <WidgetContainer
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
      themeActive={draggable || resizable}
      ref={containerRef}
    >
      <Header>
        <HeaderLeft>
          {dragHandleConfig && (
            <Button.Icon
              id={dragHandleConfig.id}
              className={dragHandleConfig.className}
              data-test-id={`drag-handle-${id}`}
              icon="move"
              intent={draggable ? 'primary' : 'subdued-text'}
              onMouseEnter={() => setDraggable(true)}
              onMouseLeave={() => setDraggable(false)}
              style={{ cursor: 'grabbing' }}
            />
          )}
          <Typography.Title level={5} fontWeight="semi-bold">
            {title}
          </Typography.Title>
          {titleExtra}
        </HeaderLeft>
        {hasRightItems && (
          <HeaderRight>
            {actionsExtra}
            {actionDropdown}
          </HeaderRight>
        )}
      </Header>
      <Content>{content}</Content>
      {resizeHandleConfig && (
        <ResizeHandle
          id={resizeHandleConfig.id}
          className={resizeHandleConfig.className}
          data-test-id={`resize-handle-${id}`}
          ref={resizeHanleRef}
          onMouseEnter={() => setResizable(true)}
          themeActive={resizable}
        >
          <Icon
            data-test-id={`resize-handle-icon-${id}`}
            icon="corner-resize"
            intent={resizable ? 'primary' : 'subdued-text'}
          />
        </ResizeHandle>
      )}
    </WidgetContainer>
  );
};
export default Widget;
