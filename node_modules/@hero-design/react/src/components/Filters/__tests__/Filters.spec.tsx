import React from 'react';
import { fireEvent } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import renderWithTheme from '../../../testUtils/renderWithTheme';
import Filters from '../index';
import { FilterValue } from '../types';
import Radio from '../../Radio';
import Select from '../../Select';
import * as hooks from '../../../utils/hooks';

Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation((query) => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // Deprecated
    removeListener: jest.fn(), // Deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

describe('rendering', () => {
  it.each`
    size        | noSelectedTags
    ${'small'}  | ${false}
    ${'medium'} | ${true}
  `(
    'rendering filters component with size $size, noSelectedTags $noSelectedTags',
    async ({ noSelectedTags, size }) => {
      const leftAddon = () => <Filters.Label text="Filter by" />;

      const MyFiltersExample = () => {
        const initialFilterValues: FilterValue = {
          status: 'Pending',
          reportingPersonnel: 'all',
          search: '',
        };
        const [filterValues, setFilterValues] =
          React.useState(initialFilterValues);

        return (
          <Filters
            leftAddon={leftAddon}
            value={filterValues}
            onChange={setFilterValues}
            noSelectedTags={noSelectedTags}
            size={size}
          >
            <Filters.Filter text="Status" filterKey="status">
              {({ value, onChange }) => (
                <Radio.Group
                  value={String(value)}
                  onChange={onChange}
                  options={[
                    { value: 'Pending', text: 'Pending' },
                    { value: 'Approved', text: 'Approved' },
                    { value: 'Declined', text: 'Declined' },
                  ]}
                />
              )}
            </Filters.Filter>
            <Filters.Filter
              text="Leave category"
              filterKey="leaveCategory"
              noDropdown
            >
              {({ value, onChange }) => (
                <Select
                  placeholder="Leave category"
                  value={String(value)}
                  onChange={onChange}
                  options={[
                    { value: 'Annual Leave', text: 'Annual Leave' },
                    {
                      value: 'Compassionate Leave',
                      text: 'Compassionate Leave',
                    },
                    { value: 'Leisure Rules Day', text: 'Leisure Rules Day' },
                    {
                      value: 'Paid Paternity Leave',
                      text: 'Paid Paternity Leave',
                    },
                    { value: 'Sick Leave', text: 'Sick Leave' },
                    { value: 'Study Leave', text: 'Study Leave' },
                    { value: 'Unpaid Leave', text: 'Unpaid Leave' },
                    { value: 'Working From Home', text: 'Working From Home' },
                  ]}
                />
              )}
            </Filters.Filter>
            <Filters.Group text="More">
              <Filters.Group.Filter
                text="Personnel"
                tooltip={{ content: 'Employee name' }}
                filterKey="personnel"
              >
                {({ value, onChange }) => (
                  <Select
                    value={value as string}
                    onChange={onChange}
                    options={[
                      { value: 'Vinh Hoang', text: 'Vinh Hoang' },
                      { value: 'Kien Tran', text: 'Kien Tran' },
                    ]}
                    placeholder="Select..."
                  />
                )}
              </Filters.Group.Filter>
              <Filters.Group.Filter
                text="Reporting personnel"
                filterKey="reportingPersonnel"
              >
                {({ value, onChange }) => (
                  <Radio.Group
                    value={value as string}
                    onChange={onChange}
                    options={[
                      { value: 'direct', text: 'Direct' },
                      { value: 'indirect', text: 'Indirect' },
                      { value: 'all', text: 'All personnel' },
                    ]}
                  />
                )}
              </Filters.Group.Filter>
            </Filters.Group>
          </Filters>
        );
      };

      const { queryByText, getByText, getByTestId, getByPlaceholderText } =
        renderWithTheme(<MyFiltersExample />);

      if (size === 'small') {
        expect(getByText('Status')).toHaveStyle('font-size: 12px');
        expect(getByText('More')).toHaveStyle('font-size: 12px');
      } else {
        expect(getByText('Status')).toHaveStyle('font-size: 14px');
        expect(getByText('More')).toHaveStyle('font-size: 14px');
      }

      expect(getByText('Status')).toBeInTheDocument();
      expect(getByPlaceholderText('Leave category')).toBeVisible();

      if (noSelectedTags) {
        expect(queryByText('all')).toBeNull();
      } else {
        expect(getByText('all')).toBeInTheDocument();
      }
      expect(getByText('More')).toBeInTheDocument();
      expect(getByText('Filter by')).toBeInTheDocument();

      await act(async () => {
        fireEvent.click(getByText('Status'));
      });

      expect(getByText('Approved')).toBeInTheDocument();

      await act(async () => {
        fireEvent.click(getByText('Declined'));
      });

      // Click outside
      await act(async () => {
        fireEvent.click(getByText('Filter by'));
      });
      if (noSelectedTags) {
        expect(queryByText('Declined')).toBeNull();
      } else {
        expect(getByText('Declined')).toBeInTheDocument();
      }

      await act(async () => {
        fireEvent.click(getByText('More'));
      });

      expect(getByText('Personnel')).toBeInTheDocument();
      expect(getByTestId('personnel-tooltip')).toBeInTheDocument();

      await act(async () => {
        fireEvent.click(getByText('Indirect'));
      });

      // Click outside
      await act(async () => {
        fireEvent.click(getByText('Filter by'));
      });

      if (noSelectedTags) {
        expect(queryByText('indirect')).toBeNull();
      } else {
        expect(getByText('indirect')).toBeInTheDocument();
      }
    }
  );

  it('renders Filter.Group with large wide layout', () => {
    jest.spyOn(hooks, 'useSizeMediaQuery').mockImplementation(() => 'large');

    const MyFiltersExample = () => {
      const initialFilterValues: FilterValue = {
        status: 'Pending',
        reportingPersonnel: 'all',
        search: '',
      };
      const [filterValues, setFilterValues] =
        React.useState(initialFilterValues);

      return (
        <Filters value={filterValues} onChange={setFilterValues}>
          <Filters.Filter text="Status" filterKey="status">
            {({ value, onChange }) => (
              <Radio.Group
                value={String(value)}
                onChange={onChange}
                options={[
                  { value: 'Pending', text: 'Pending' },
                  { value: 'Approved', text: 'Approved' },
                  { value: 'Declined', text: 'Declined' },
                ]}
              />
            )}
          </Filters.Filter>
          <Filters.Group text="More">
            <Filters.Group.Filter
              text="Personnel"
              tooltip={{ content: 'Employee name' }}
              filterKey="personnel"
            >
              {({ value, onChange }) => (
                <Select
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'Vinh Hoang', text: 'Vinh Hoang' },
                    { value: 'Kien Tran', text: 'Kien Tran' },
                  ]}
                  placeholder="Select..."
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
          </Filters.Group>
        </Filters>
      );
    };

    const { getByTestId } = renderWithTheme(<MyFiltersExample />);

    expect(getByTestId('large-wide-content-wrapper')).toBeInTheDocument();
  });

  it('renders Filter.Group with xlarge wide layout', () => {
    jest.spyOn(hooks, 'useSizeMediaQuery').mockImplementation(() => 'xlarge');

    const MyFiltersExample = () => {
      const initialFilterValues: FilterValue = {
        status: 'Pending',
        reportingPersonnel: 'all',
        search: '',
      };
      const [filterValues, setFilterValues] =
        React.useState(initialFilterValues);

      return (
        <Filters value={filterValues} onChange={setFilterValues}>
          <Filters.Filter text="Status" filterKey="status">
            {({ value, onChange }) => (
              <Radio.Group
                value={String(value)}
                onChange={onChange}
                options={[
                  { value: 'Pending', text: 'Pending' },
                  { value: 'Approved', text: 'Approved' },
                  { value: 'Declined', text: 'Declined' },
                ]}
              />
            )}
          </Filters.Filter>
          <Filters.Group text="More">
            <Filters.Group.Filter
              text="Personnel"
              tooltip={{ content: 'Employee name' }}
              filterKey="personnel"
            >
              {({ value, onChange }) => (
                <Select
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'Vinh Hoang', text: 'Vinh Hoang' },
                    { value: 'Kien Tran', text: 'Kien Tran' },
                  ]}
                  placeholder="Select..."
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
            <Filters.Group.Filter
              text="Reporting personnel"
              filterKey="reportingPersonnel"
            >
              {({ value, onChange }) => (
                <Radio.Group
                  value={value as string}
                  onChange={onChange}
                  options={[
                    { value: 'direct', text: 'Direct' },
                    { value: 'indirect', text: 'Indirect' },
                    { value: 'all', text: 'All personnel' },
                  ]}
                />
              )}
            </Filters.Group.Filter>
          </Filters.Group>
        </Filters>
      );
    };

    const { getByTestId } = renderWithTheme(<MyFiltersExample />);

    expect(getByTestId('xlarge-wide-content-wrapper')).toBeInTheDocument();
  });
});
