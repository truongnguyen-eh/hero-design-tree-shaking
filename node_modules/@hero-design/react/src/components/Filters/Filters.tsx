import React, { useRef, ReactNode, ReactElement, useCallback } from 'react';

import { FiltersProvider, useFiltersContext } from './FiltersContext';
import {
  StyledTagList,
  FiltersWrapper,
  StyledFiltersHeader,
  StyledFilterListWithAddons,
  StyledFilterList,
} from './StyledFilters';
import { CommonProps } from '../common';
import css from '../../utils/css';

import { FilterSize, FilterValue } from './types';
import { FilterProps } from './Filter';
import { useMediaQuery } from '../MediaQuery';
import { useControllableState } from '../../utils/hooks';

interface RenderProps {
  commitAll: () => void;
  dirty: boolean;
  resetAll: () => void;
  size: FilterSize;
}

export interface FiltersProps<T extends FilterValue> extends CommonProps {
  children:
    | ReactElement<FilterProps<T, keyof T>>
    | ReactElement<FilterProps<T, keyof T>>[];
  defaultValue?: T;
  leftAddon?: (renderProps: RenderProps) => ReactNode;
  onChange: (value: FilterValue) => void;
  rightAddon?: (renderProps: RenderProps) => ReactNode;
  controlled?: boolean;
  value: T;
  /**
   * Filter value that hasn't been committed yet
   */
  draftValue?: T;
  /**
   * Function to call when draft filter value changes
   */
  onDraftValueChange?: (value: T) => void;
  /**
   * Hide selected tags
   * */
  noSelectedTags?: boolean;
  /**
   * Size of Filter components
   * */
  size?: 'small' | 'medium';
}

const Addon = ({
  render,
}: {
  render?: (renderProps: RenderProps) => ReactNode;
}) => {
  const { resetAll, commitAll, dirty, size } = useFiltersContext();
  if (render === undefined) {
    return null;
  }
  return <>{render({ resetAll, commitAll, dirty, size })}</>;
};

const Filters = <T extends FilterValue>({
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
  children,
  leftAddon,
  rightAddon,
  value,
  onChange,
  defaultValue,
  draftValue,
  onDraftValueChange,
  noSelectedTags = false,
  size = 'medium',
}: FiltersProps<T>) => {
  const selectedTagsRef = useRef<HTMLDivElement>(null);
  const [valueState, setValueState] = useControllableState<T>({
    defaultValue: typeof defaultValue !== 'undefined' ? defaultValue : value,
    value: draftValue,
    onChange: onDraftValueChange,
  });
  const onValueStateChange = useCallback(
    (v) => setValueState(v),
    [setValueState]
  );

  const screenSize = useMediaQuery();

  const isLargeScreen = screenSize === 'large' || screenSize === 'xlarge';

  return (
    <FiltersProvider
      selectedTagsRef={selectedTagsRef}
      value={value}
      onChange={onChange}
      defaultValue={defaultValue}
      valueState={valueState}
      onValueStateChange={onValueStateChange}
      size={size}
    >
      <FiltersWrapper
        id={id}
        className={className}
        data-test-id={dataTestId}
        style={{ ...style, ...css(sx) }}
      >
        {isLargeScreen === false && (
          <StyledFiltersHeader>
            <Addon render={leftAddon} />
            <Addon render={rightAddon} />
          </StyledFiltersHeader>
        )}
        <StyledFilterListWithAddons>
          {isLargeScreen === true && <Addon render={leftAddon} />}
          <StyledFilterList>{children}</StyledFilterList>
          {isLargeScreen === true && <Addon render={rightAddon} />}
        </StyledFilterListWithAddons>
        {!noSelectedTags && (
          <StyledTagList
            data-test-id="selected-tag-list"
            ref={selectedTagsRef}
          />
        )}
      </FiltersWrapper>
    </FiltersProvider>
  );
};

export default Filters;
