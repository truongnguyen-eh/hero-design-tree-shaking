import React, { ReactElement, useContext, useEffect, useState } from 'react';
import ReactDOM from 'react-dom';

import FiltersContext from './FiltersContext';
import Tag from '../Tag';
import Typography from '../Typography';

const SelectedTag = ({
  label,
  value,
  onRemove,
}: {
  label?: string;
  onRemove?: () => void;
  value: string | ReactElement;
}) => {
  const { selectedTagsRef } = useContext(FiltersContext);
  const [forceRender, setForceRender] = useState(false);
  useEffect(() => {
    setForceRender(!forceRender);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedTagsRef]);
  if (selectedTagsRef.current === null) return null;

  return ReactDOM.createPortal(
    <Tag
      sx={{
        bgColor: 'violet-light-90',
        borderColor: 'violet-light-90',
        mr: 'small',
      }}
      data-test-id={`filter-value-tag-${label}`}
      text={
        <Typography.Text
          tagName="span"
          fontSize={12}
          style={{ margin: 0, padding: 0, lineHeight: 1 }}
        >
          {label !== undefined && `${label}: `}
          <strong>{value}</strong>
        </Typography.Text>
      }
      onRemove={onRemove}
    />,
    selectedTagsRef.current
  );
};

export default SelectedTag;
