import React, { useState, ReactElement, useMemo } from 'react';
import Box from '../Box';
import Dropdown from '../Dropdown';
import Icon, { IconName } from '../Icon';
import { FilterWrapper, StyledDropdownButton } from './StyledFilters';
import { FilterSize, FilterValue } from './types';
import { useFilterContext, useFiltersContext } from './FiltersContext';
import { formatValue, hasSelection, resetValue } from './utils';
import SelectedTag from './SelectedTag';

export type RenderProps<T extends FilterValue, K extends keyof T> = {
  closeDropdown: () => void;
  commit: (v: T[K]) => void;
  defaultValue?: T[K];
  dirty: boolean;
  onChange: (v: T[K]) => void;
  reset: (v?: T[K]) => void;
  resetAll: () => void;
  value: T[K];
  size: FilterSize;
};

export type TagProps<T extends FilterValue, K extends keyof T> = {
  commit: (v: T[K]) => void;
  defaultValue?: T[K];
  filterKey: K;
  label?: string | ReactElement;
  value: T[K];
  size: FilterSize;
};

export type FilterProps<T extends FilterValue, K extends keyof T> = {
  children: (renderProps: RenderProps<T, K>) => ReactElement;
  filterKey: K;
  icon?: IconName | ReactElement;
  isApplyChangeOnClose?: boolean;
  noCaret?: boolean;
  noDropdown?: boolean;
  onOpen?: (renderProps: RenderProps<T, K>) => void;
  onClose?: (renderProps: RenderProps<T, K>) => void;
  onTagRemove?: ((renderProps: TagProps<T, K>) => void) | null;
  tagValueRenderer?: (renderProps: TagProps<T, K>) => string;
  text?: string;
};

const DropdownButton = ({
  text,
  onClick,
  active,
  leftIcon,
  rightIcon,
  size: themeSize = 'medium',
}: {
  active: boolean;
  leftIcon?: IconName | ReactElement;
  onClick?: () => void;
  rightIcon?: IconName | ReactElement;
  text?: string;
  size?: 'small' | 'medium';
}) => {
  return (
    <StyledDropdownButton
      onClick={onClick}
      themeActive={active}
      themeSize={themeSize}
    >
      {leftIcon !== undefined ? (
        <Icon icon={leftIcon} data-test-id="filter-icon" sx={{ mr: 'small' }} />
      ) : null}
      {text}
      {rightIcon !== undefined ? (
        <Icon icon={rightIcon} data-test-id="filter-icon" />
      ) : null}
    </StyledDropdownButton>
  );
};

const getCaretIcon = (open: boolean): IconName => {
  return open === true ? 'arrow-up' : 'arrow-down';
};

const defaultTagValueRenderer = <T extends FilterValue, K extends keyof T>({
  value,
}: TagProps<T, K>) => formatValue(value);

const defaultOnTagRemove = <T extends FilterValue, K extends keyof T>({
  commit,
  value,
}: TagProps<T, K>) => commit(resetValue(value) as T[K]);

const Filter = <T extends FilterValue, K extends keyof T>({
  text,
  icon,
  noCaret = false,
  noDropdown = false,
  filterKey,
  children,
  onOpen,
  onClose,
  tagValueRenderer = defaultTagValueRenderer,
  onTagRemove = defaultOnTagRemove,
  isApplyChangeOnClose = true,
}: FilterProps<T, K>) => {
  const [openDropdown, setOpenDropdown] = useState(false);

  const {
    valueForKey,
    valueStateForKey,
    defaultValueForKey,
    onValueStateChangeForKey,
    onChangeForKey,
    resetForKey,
  } = useFilterContext<T, K>(filterKey);
  const { resetAll, size } = useFiltersContext();

  const renderProps: RenderProps<T, K> = useMemo(
    () => ({
      value: valueStateForKey,
      onChange: onValueStateChangeForKey,
      defaultValue: defaultValueForKey,
      commit: onChangeForKey,
      dirty: valueForKey !== valueStateForKey,
      reset: resetForKey,
      resetAll,
      closeDropdown: () => setOpenDropdown(false),
      size,
    }),
    [
      valueStateForKey,
      onValueStateChangeForKey,
      valueForKey,
      onChangeForKey,
      resetForKey,
      resetAll,
      defaultValueForKey,
      size,
    ]
  );

  const tagProps = useMemo(
    () => ({
      defaultValue: defaultValueForKey,
      value: valueForKey,
      label: text,
      filterKey,
      commit: onChangeForKey,
      size,
    }),
    [valueForKey, text, filterKey, defaultValueForKey, onChangeForKey, size]
  );

  const active = useMemo(() => hasSelection(valueForKey), [valueForKey]);

  const tagValue = tagValueRenderer(tagProps);

  return (
    <>
      {noDropdown ? (
        <FilterWrapper themeActive={active}>
          {children(renderProps)}
        </FilterWrapper>
      ) : (
        <Dropdown
          open={openDropdown}
          onClose={() => {
            setOpenDropdown(false);
            onClose?.(renderProps);
            if (isApplyChangeOnClose && renderProps.dirty) {
              renderProps.commit(renderProps.value);
            }
          }}
          onOpen={() => {
            onOpen?.(renderProps);
          }}
          content={
            <Box sx={{ padding: 'medium', minWidth: 250 }}>
              {children(renderProps)}
            </Box>
          }
          target={
            <DropdownButton
              size={size}
              active={active}
              text={text}
              leftIcon={icon}
              rightIcon={
                noCaret === true ? undefined : getCaretIcon(openDropdown)
              }
              onClick={() => setOpenDropdown((v) => !v)}
            />
          }
        />
      )}
      {tagValue !== '' ? (
        <SelectedTag
          label={text}
          value={tagValue}
          onRemove={
            onTagRemove === null ? undefined : () => onTagRemove(tagProps)
          }
        />
      ) : null}
    </>
  );
};

Filter.displayName = 'Filters.Filter';

export default Filter;
