import React, {
  createContext,
  RefObject,
  ReactNode,
  useContext,
  useCallback,
  useMemo,
} from 'react';

import { FilterSize, FilterValue } from './types';

import { noop } from '../../fp/function';

export type FiltersContextType = {
  defaultValue?: FilterValue;
  onChange: (value: FilterValue) => void;
  onValueStateChange: (value: FilterValue) => void;
  selectedTagsRef: RefObject<HTMLElement>;
  value: FilterValue;
  valueState: FilterValue;
  size: FilterSize;
};

const FiltersContext = createContext<FiltersContextType>({
  selectedTagsRef: { current: null },
  value: {},
  valueState: {},
  onChange: noop,
  onValueStateChange: noop,
  size: 'medium',
});

export const useFilterContext = <T extends FilterValue, K extends keyof T>(
  key: K
) => {
  const {
    size,
    value,
    defaultValue,
    valueState,
    onChange,
    onValueStateChange,
  } = useContext(FiltersContext);

  const valueForKey = (value as T)[key];
  const defaultValueForKey = (defaultValue as T)?.[key];
  const valueStateForKey = (valueState as T)[key];
  const onChangeForKey = useCallback(
    (newValue: T[K]) => {
      onChange({
        ...value,
        [key]: newValue,
      });
      onValueStateChange({
        ...valueState,
        [key]: newValue,
      });
    },
    [key, value, onChange, valueState, onValueStateChange]
  );
  const onValueStateChangeForKey = useCallback(
    (newValue: T[K]) =>
      onValueStateChange({
        ...valueState,
        [key]: newValue,
      }),
    [key, valueState, onValueStateChange]
  );

  const resetForKey = useCallback(
    (resetValue?: T[K]) => {
      onChange({
        ...value,
        [key]: resetValue ?? defaultValueForKey,
      });
      onValueStateChange({
        ...valueState,
        [key]: resetValue ?? defaultValueForKey,
      });
    },
    [onChange, value, key, defaultValueForKey, onValueStateChange, valueState]
  );

  return {
    valueForKey,
    onChangeForKey,
    resetForKey,
    valueStateForKey,
    onValueStateChangeForKey,
    defaultValueForKey,
    size,
  };
};

export const useFiltersContext = () => {
  const {
    size,
    value,
    defaultValue,
    onChange,
    valueState,
    onValueStateChange,
  } = useContext(FiltersContext);

  const dirty = useMemo(
    () =>
      Object.keys(value).some((key) => {
        const valueForKey = value[key];
        const valueStateForKey = valueState[key];
        return valueForKey !== valueStateForKey;
      }),
    [valueState, value]
  );

  const resetAll = useCallback(() => {
    if (defaultValue === undefined) {
      throw new Error("Can't reset all filters if defaultValue is undefined");
    }
    onChange(defaultValue);
    onValueStateChange(defaultValue);
  }, [onChange, defaultValue, onValueStateChange]);

  const commitAll = useCallback(() => {
    onChange(valueState);
  }, [valueState, onChange]);

  return {
    resetAll,
    commitAll,
    dirty,
    value,
    defaultValue,
    onChange,
    valueState,
    onValueStateChange,
    size,
  };
};

export const FiltersProvider = ({
  children,
  selectedTagsRef,
  value,
  onChange,
  defaultValue,
  valueState,
  onValueStateChange,
  size,
}: FiltersContextType & { children: ReactNode }) => {
  const contextValue = useMemo(
    () => ({
      selectedTagsRef,
      value,
      onChange,
      defaultValue,
      valueState,
      onValueStateChange,
      size,
    }),
    [
      value,
      onChange,
      valueState,
      onValueStateChange,
      selectedTagsRef,
      defaultValue,
      size,
    ]
  );
  return (
    <FiltersContext.Provider value={contextValue}>
      {children}
    </FiltersContext.Provider>
  );
};

export default FiltersContext;
