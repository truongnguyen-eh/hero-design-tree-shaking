import React, { ReactElement, useEffect, useMemo } from 'react';
import { FilterValue } from '../types';
import { useFilterContext, useFiltersContext } from '../FiltersContext';
import { formatValue, resetValue } from '../utils';
import SelectedTag from '../SelectedTag';
import Typography from '../../Typography';
import Box from '../../Box';
import Tooltip from '../../Tooltip';
import Icon from '../../Icon';
import { GroupFilterWrapper } from './StyledGroupFilter';
import { useGroupContext } from './GroupContext';

export type RenderProps<T extends FilterValue, K extends keyof T> = {
  commit: (v: T[K]) => void;
  defaultValue?: T[K];
  dirty: boolean;
  onChange: (v: T[K]) => void;
  reset: (v?: T[K]) => void;
  resetAll: () => void;
  value: T[K];
};

export type TagProps<T extends FilterValue, K extends keyof T> = {
  commit: (v: T[K]) => void;
  defaultValue?: T[K];
  filterKey: K;
  label?: string | ReactElement;
  value: T[K];
};

export type FilterProps<T extends FilterValue, K extends keyof T> = {
  children: (renderProps: RenderProps<T, K>) => ReactElement;
  filterKey: K;
  onTagRemove?: ((renderProps: TagProps<T, K>) => void) | null;
  tagRemovable?: boolean;
  tagValueRenderer?: (renderProps: TagProps<T, K>) => string;
  text?: string;
  tooltip?: {
    content: string | ReactElement;
    placement?: 'top' | 'bottom' | 'left' | 'right';
  };
};

const defaultTagValueRenderer = <T extends FilterValue, K extends keyof T>({
  value,
}: TagProps<T, K>) => formatValue(value);

const defaultOnTagRemove = <T extends FilterValue, K extends keyof T>({
  commit,
  value,
}: TagProps<T, K>) => commit(resetValue(value) as T[K]);

const Filter = <T extends FilterValue, K extends keyof T>({
  text,
  tooltip,
  filterKey,
  children,
  tagValueRenderer = defaultTagValueRenderer,
  onTagRemove = defaultOnTagRemove,
  tagRemovable = true,
}: FilterProps<T, K>) => {
  const {
    valueForKey,
    valueStateForKey,
    defaultValueForKey,
    onValueStateChangeForKey,
    onChangeForKey,
    resetForKey,
  } = useFilterContext<T, K>(filterKey);
  const { addFilterKey, removeFilterKey } = useGroupContext();

  const { resetAll } = useFiltersContext();

  const renderProps = useMemo(
    () => ({
      value: valueStateForKey,
      onChange: onValueStateChangeForKey,
      defaultValue: defaultValueForKey,
      commit: onChangeForKey,
      dirty: valueStateForKey !== valueForKey,
      reset: resetForKey,
      resetAll,
    }),
    [
      valueStateForKey,
      onValueStateChangeForKey,
      valueForKey,
      onChangeForKey,
      resetForKey,
      resetAll,
      defaultValueForKey,
    ]
  );

  const tagProps = useMemo(
    () => ({
      defaultValue: defaultValueForKey,
      value: valueForKey,
      label: text,
      filterKey,
      commit: onChangeForKey,
    }),
    [valueForKey, text, filterKey, defaultValueForKey, onChangeForKey]
  );

  const tagValue = tagValueRenderer(tagProps);

  useEffect(() => {
    addFilterKey(filterKey as string);
    return () => {
      removeFilterKey(filterKey as string);
    };
  }, [filterKey, addFilterKey, removeFilterKey]);

  return (
    <GroupFilterWrapper>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 'xsmall' }}>
        <Typography.Text fontWeight="semi-bold">{text}</Typography.Text>
        {tooltip && (
          <Tooltip
            data-test-id={`${filterKey as string}-tooltip`}
            target={<Icon icon="circle-info-outlined" size="small" />}
            placement={tooltip.placement || 'right'}
            content={tooltip.content}
            sx={{ ml: 'xsmall', display: 'flex' }}
          />
        )}
      </Box>
      {children(renderProps)}
      {tagValue !== '' ? (
        <SelectedTag
          label={text}
          value={tagValue}
          onRemove={
            !tagRemovable || onTagRemove === null
              ? undefined
              : () => onTagRemove(tagProps)
          }
        />
      ) : null}
    </GroupFilterWrapper>
  );
};

Filter.displayName = 'Filters.Group.Filter';

export default Filter;
