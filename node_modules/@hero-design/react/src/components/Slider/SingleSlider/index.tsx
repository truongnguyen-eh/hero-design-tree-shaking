import React, { useRef, useState } from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../../utils/hooks';
import {
  SliderTooltip,
  SliderRail,
  SliderTrack,
  SliderContainer,
  SliderThumb,
} from '../StyledSlider';
import {
  preventKeyboardScrolling,
  getValueByMouseEvent,
  getValueByKeyboard,
  useSliderData,
  removeListener,
  addListener,
} from '../utils';
import type { CommonProps } from '../../common';

export interface SingleSliderProps extends CommonProps {
  /**
   * Whether the slider's tooltip is always shown.
   */
  alwaysShowTooltip?: boolean;
  /**
   * Custom text for tooltip. If defined, it will replace the auto generated tooltip.
   */
  customTooltipText?: string;
  /**
   * Whether the slider is disabled.
   */
  disabled?: boolean;
  /**
   * Slider max value.
   */
  max?: number;
  /**
   * Slider min value.
   */
  min?: number;
  /**
   * onChange event handler.
   */
  onChange?: (value: number) => void;
  /**
   * Slider step.
   */
  step?: number;
  /**
   * Current slider's value.
   */
  value: number;
}

const SingleSlider = ({
  min = 0,
  max = 100,
  step = 1,
  value,
  disabled,
  alwaysShowTooltip,
  customTooltipText,
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
  onChange,
}: SingleSliderProps): ReactElement => {
  const refSlider = useRef<HTMLDivElement>(null);

  const { valueInNumber, valueInPercent } = useSliderData({ min, max, value });

  const toolTip =
    customTooltipText !== undefined ? customTooltipText : valueInNumber;

  const [labelId] = useState<string>(`tooltip_${Date.now().toString()}`);

  const onKeyDown = (e: React.KeyboardEvent): void => {
    preventKeyboardScrolling(e);
    if (disabled !== true && onChange !== undefined) {
      const newValueInNumber = getValueByKeyboard(
        valueInNumber,
        step,
        min,
        max,
        e.key
      );
      if (onChange !== undefined) {
        onChange(newValueInNumber);
      }
    }
  };

  const onMouseMove = (e: Event): void => {
    e.stopPropagation();

    if (refSlider.current === null) return;

    const { width: railWidth, x: railOffsetLeft } =
      refSlider.current.getBoundingClientRect();

    const newValueInNumber = getValueByMouseEvent(
      e,
      railWidth,
      railOffsetLeft,
      min,
      max,
      step
    );

    if (onChange !== undefined) {
      onChange(newValueInNumber);
    }
  };

  const onClickSlider = (e: React.MouseEvent | Event): void =>
    onMouseMove(e as Event);

  const handleAddListener = (e: { stopPropagation: () => void }) => {
    e.stopPropagation();
    const onMouseUp = removeListener(onMouseMove);
    addListener(onMouseMove, onMouseUp);
  };

  return (
    <SliderContainer
      ref={refSlider}
      id={id}
      style={{ ...style, ...useCss(sx) }}
      className={className}
      data-test-id={dataTestId}
      onKeyDown={onKeyDown}
      onMouseDown={onClickSlider}
      disabled={disabled === true}
    >
      <SliderRail />
      <SliderTrack style={{ width: `${valueInPercent}%` }} />
      <SliderThumb
        aria-valuemax={max}
        aria-valuemin={min}
        aria-valuenow={valueInNumber}
        aria-disabled={disabled === true}
        aria-orientation="horizontal"
        tabIndex={0}
        aria-labelledby={labelId}
        style={{ left: `${valueInPercent}%` }}
        onMouseDown={handleAddListener}
        onTouchStart={handleAddListener}
        data-test-id="slider-thumb"
      >
        <SliderTooltip
          id={labelId}
          role="tooltip"
          aria-label={`${toolTip}`}
          alwaysShowTooltip={alwaysShowTooltip === true}
        >
          {toolTip}
        </SliderTooltip>
      </SliderThumb>
    </SliderContainer>
  );
};

export default SingleSlider;
