import React from 'react';
import type { ReactElement } from 'react';
import { useCss } from '../../utils/hooks';

import { StyledBadge } from './StyledBadge';
import { MAX_NUMBER, getPaddingState, isNumber } from './utils';

import Status from './Status';
import Count from './Count';
import type { CommonProps } from '../common';
import type {
  BadgeVariant,
  BadgeIntent,
  BadgeThemeVariant,
} from './StyledBadge';

export interface StandaloneBadgeProps extends CommonProps {
  /**
   * Content to be displayed, can be number or string.
   */
  content: number | string;
  /**
   * Visual intent color to apply to badge.
   */
  intent?:
    | 'basic'
    | 'success'
    | 'primary'
    | 'warning'
    | 'danger'
    | 'error'
    | 'archived';
  /**
   * Badge variant.
   */
  variant?: 'filled' | 'outlined';
}

const FILLED_VARIANTS = {
  basic: 'filled-basic',
  success: 'filled-success',
  primary: 'filled-primary',
  warning: 'filled-warning',
  danger: 'filled-danger',
  error: 'filled-error',
  archived: 'filled-archived',
} as const;

const OUTLINED_VARIANTS = {
  basic: 'outlined-basic',
  success: 'outlined-success',
  primary: 'outlined-primary',
  warning: 'outlined-warning',
  danger: 'outlined-danger',
  error: 'outlined-error',
  archived: 'outlined-archived',
} as const;

const getThemeVariant = (
  variant: BadgeVariant,
  intent: BadgeIntent
): BadgeThemeVariant => {
  switch (variant) {
    case 'filled':
      return FILLED_VARIANTS[intent];
    case 'outlined':
      return OUTLINED_VARIANTS[intent];
  }
};

const Badge = ({
  content,
  intent = 'primary',
  variant = 'filled',
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: StandaloneBadgeProps): ReactElement => {
  const themeVariant = getThemeVariant(variant, intent);

  return (
    <StyledBadge
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
      themePadding={getPaddingState(content)}
      themeVariant={themeVariant}
    >
      {isNumber(content) && content > MAX_NUMBER ? `${MAX_NUMBER}+` : content}
    </StyledBadge>
  );
};

Badge.Status = Status;
Badge.Count = Count;

export default Badge;
