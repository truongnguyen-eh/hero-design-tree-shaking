import React, { Fragment, useState } from 'react';

import type { CommonProps } from '../common';
import type { InPageNavItem } from './types';

import Box from '../Box';
import Typography from '../Typography';
import Icon from '../Icon';
import Menu from '../Menu';
import Dropdown from '../Dropdown';
import Tooltip from '../Tooltip';
import {
  VerticalWrapper,
  HorizontalContainer,
  HorizontalWrapper,
  VerticalItem,
  HorizontalItem,
  MoreItem,
  IconListWrapper,
} from './StyledNavigation';

import { useCss } from '../../utils/hooks';
import { useTranslation } from '../LocaleProvider/hooks';
import IconButton from '../Button/IconButton';

const ITEM_BREAKPOINT = 4;
const MORE_BUTTON_ID = '__hd__more';

export interface InPageNavigationProps extends CommonProps {
  /**
   * Heading.
   */
  heading?: string;
  /**
   * List of items.
   */
  items: { [key: string]: InPageNavItem[] };
  /**
   * Event handler when clicking on an item.
   */
  onClickItem: (item: InPageNavItem) => void;
  /**
   * Selected item ID.
   */
  selectedItemId?: string;
  /**
   * Layout of the component.
   */
  variant?: 'vertical' | 'horizontal';
}

const SuffixSection = ({ item }: { item: InPageNavItem }) => {
  const { actions, disabledReason, disabled, suffix, id } = item;

  return !disabledReason ? (
    <IconListWrapper>
      {suffix && (
        <Icon
          icon={suffix.icon}
          intent={disabled ? 'subdued-text' : suffix.intent}
          data-test-id={`${id}-suffix-icon`}
        />
      )}
      {actions &&
        actions.map(({ icon, onClick, intent }, index) => (
          <IconButton
            key={`${icon}-action`}
            icon={icon}
            disabled={disabled}
            onClick={onClick}
            intent={disabled ? 'subdued-text' : intent}
            data-test-id={`${id}-actions-icon-${index}`}
          />
        ))}
    </IconListWrapper>
  ) : null;
};

const InPageNavigation = ({
  heading,
  items,
  onClickItem,
  selectedItemId,
  variant = 'vertical',
  id,
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: InPageNavigationProps) => {
  const { t } = useTranslation();
  const sxCss = useCss(sx);
  const [beingClickedItemId, setBeingClickedItemId] = useState<string>();
  const [openMoreItems, setOpenMoreItems] = useState<boolean>(false);
  const removedHeaderItems = Object.values(items).flat();
  const shownItems =
    ITEM_BREAKPOINT < removedHeaderItems.length
      ? removedHeaderItems.slice(0, ITEM_BREAKPOINT)
      : removedHeaderItems;
  const moreItems =
    ITEM_BREAKPOINT < removedHeaderItems.length
      ? removedHeaderItems.slice(ITEM_BREAKPOINT, removedHeaderItems.length)
      : [];

  const generateTextIntent = (
    item: InPageNavItem,
    selectedId: string | undefined
  ) => {
    if (item.disabled) return 'subdued';
    return item.id === selectedId ? 'main' : 'body';
  };

  const moreButton = (
    <HorizontalItem
      onMouseDown={() => setBeingClickedItemId(MORE_BUTTON_ID)}
      onClick={() => {
        setOpenMoreItems((open) => !open);
        setBeingClickedItemId(undefined);
      }}
      themeClickedState={beingClickedItemId === MORE_BUTTON_ID}
      themeBreakPoint={1}
    >
      <Typography.Text
        tagName="span"
        intent="body"
        style={{ display: 'flex', alignItems: 'center' }}
      >
        {t('More')}
        <Icon icon="arrow-down" sx={{ ml: 'small' }} />
      </Typography.Text>
    </HorizontalItem>
  );

  const moreItemList = (
    <Menu>
      {moreItems.map((item) => (
        <MoreItem
          key={item.id}
          onMouseDown={() => setBeingClickedItemId(item.id)}
          onClick={() => {
            if (!item.disabled) {
              onClickItem(item);
            }
            setBeingClickedItemId(undefined);
            setOpenMoreItems(false);
          }}
          themeClickedState={beingClickedItemId === item.id}
          themeDisabledState={item.disabled}
        >
          {item.prefix && (
            <Icon
              icon={item.prefix.icon}
              intent={item.disabled ? 'subdued-text' : item.prefix?.intent}
              sx={{ mr: 'small' }}
              data-test-id={`${item.id}-prefix-icon`}
            />
          )}
          <Typography.Text
            tagName="span"
            intent={generateTextIntent(item, selectedItemId)}
            fontWeight={item.id === selectedItemId ? 'semi-bold' : 'regular'}
            sx={{ mr: 'large', flex: '1' }}
          >
            {item.text}
          </Typography.Text>
          {item.disabledReason && (
            <Tooltip
              target={<Icon icon="lock" intent="disabled-text" />}
              content={item.disabledReason}
              sx={{ ml: 'auto' }}
            />
          )}
          <SuffixSection item={item} />
        </MoreItem>
      ))}
    </Menu>
  );

  switch (variant) {
    case 'vertical':
      return (
        <VerticalWrapper
          className={className}
          id={id}
          data-test-id={dataTestId}
          style={{ ...style, ...sxCss }}
        >
          {heading !== undefined && (
            <Box pl="small" mb="medium">
              <Typography.Title level={4}>{heading}</Typography.Title>
            </Box>
          )}
          {Object.entries(items).map((entry) => {
            const [subHeader, subItems] = entry;

            return (
              <Fragment key={subHeader}>
                {subHeader !== '' && (
                  <Box pl="small" mb="small" mt="small">
                    <Typography.Text fontSize={16} fontWeight="semi-bold">
                      {subHeader}
                    </Typography.Text>
                  </Box>
                )}
                {subItems.map((item) => (
                  <VerticalItem
                    key={item.id}
                    onMouseDown={() => setBeingClickedItemId(item.id)}
                    onClick={() => {
                      if (!item.disabled) {
                        onClickItem(item);
                      }
                      setBeingClickedItemId(undefined);
                    }}
                    themeClickedState={beingClickedItemId === item.id}
                    themeDisabledState={!!item.disabled}
                  >
                    {item.prefix && (
                      <Icon
                        icon={item.prefix.icon}
                        intent={
                          item.disabled ? 'subdued-text' : item.prefix?.intent
                        }
                        size="xlarge"
                        sx={{ mr: 'small' }}
                        data-test-id={`${item.id}-prefix-icon`}
                      />
                    )}
                    <Typography.Text
                      tagName="span"
                      intent={generateTextIntent(item, selectedItemId)}
                      fontWeight={
                        item.id === selectedItemId ? 'semi-bold' : 'regular'
                      }
                      sx={{ flex: '1' }}
                    >
                      {item.text}
                    </Typography.Text>
                    {item.disabledReason && (
                      <Tooltip
                        target={<Icon icon="lock" intent="disabled-text" />}
                        content={item.disabledReason}
                        sx={{ ml: 'auto' }}
                      />
                    )}
                    <SuffixSection item={item} />
                  </VerticalItem>
                ))}
              </Fragment>
            );
          })}
        </VerticalWrapper>
      );
    case 'horizontal':
      return (
        <HorizontalContainer>
          <HorizontalWrapper
            className={className}
            id={id}
            data-test-id={dataTestId}
            style={{ ...style, ...sxCss }}
          >
            {shownItems.map((item) => {
              return (
                <HorizontalItem
                  key={item.id}
                  onMouseDown={() => setBeingClickedItemId(item.id)}
                  onClick={() => {
                    if (!item.disabled) {
                      onClickItem(item);
                    }
                    setBeingClickedItemId(undefined);
                  }}
                  themeClickedState={beingClickedItemId === item.id}
                  themeDisabledState={!!item.disabled}
                  themeBreakPoint={ITEM_BREAKPOINT + 1}
                >
                  {item.prefix && (
                    <Icon
                      icon={item.prefix.icon}
                      intent={
                        item.disabled ? 'subdued-text' : item.prefix?.intent
                      }
                      size="xlarge"
                      sx={{ mr: 'small' }}
                      data-test-id={`${item.id}-prefix-icon`}
                    />
                  )}
                  <Typography.Text
                    tagName="span"
                    intent={generateTextIntent(item, selectedItemId)}
                    fontWeight={
                      item.id === selectedItemId ? 'semi-bold' : 'regular'
                    }
                    sx={{ flex: '1' }}
                  >
                    {item.text}
                  </Typography.Text>
                  {item.disabledReason && (
                    <Tooltip
                      target={<Icon icon="lock" intent="disabled-text" />}
                      content={item.disabledReason}
                      sx={{ ml: 'auto' }}
                    />
                  )}
                  <SuffixSection item={item} />
                </HorizontalItem>
              );
            })}
            {moreItems.length > 0 && (
              <Dropdown
                open={openMoreItems}
                content={moreItemList}
                target={moreButton}
                onClose={() => setOpenMoreItems(false)}
                placement="bottom-right"
              />
            )}
          </HorizontalWrapper>
        </HorizontalContainer>
      );
  }
};

export type { InPageNavItem };

export default InPageNavigation;
