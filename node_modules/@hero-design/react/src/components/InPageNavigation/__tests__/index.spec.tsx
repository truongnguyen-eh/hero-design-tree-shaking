import React from 'react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import InPageNavigation from '../index';

describe('InPageNavigation', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const items = {
    '': [
      {
        id: 'overview',
        text: 'Overview',
      },
      {
        id: 'personal_details',
        text: 'Personal details',
        prefix: {
          icon: 'directory-outlined' as const,
        },
        suffix: {
          icon: 'circle-ok-outlined' as const,
          intent: 'success' as const,
        },
      },
      {
        id: 'employment_details',
        text: 'Employment details',
        disabled: true,
        disabledReason: 'This page has been locked',
      },
    ],
    Documents: [
      {
        id: 'hr_documents',
        text: 'HR documents',
      },
      {
        id: 'uploaded_documents',
        text: 'Uploaded documents',
      },
      {
        id: 'certifications',
        text: 'Certifications',
      },
    ],
  };
  const onClickItem = jest.fn();

  it('renders vertical layout correctly', () => {
    const { getByText, getByTestId, container } = renderWithTheme(
      <InPageNavigation
        heading="Employee Files"
        items={items}
        onClickItem={onClickItem}
        variant="vertical"
      />
    );

    expect(getByText('Employee Files')).toBeInTheDocument();
    expect(getByText('Overview')).toBeInTheDocument();
    expect(getByText('Personal details')).toBeInTheDocument();
    expect(getByTestId('personal_details-prefix-icon')).toBeInTheDocument();
    expect(getByTestId('personal_details-suffix-icon')).toBeInTheDocument();
    expect(getByText('Documents')).toBeInTheDocument();
    expect(getByText('HR documents')).toBeInTheDocument();
    userEvent.hover(container.getElementsByClassName('hero-icon-lock')[0]);
    expect(getByText('This page has been locked')).toBeInTheDocument();
  });

  it('renders horizontal layout correctly', () => {
    const { getByText, getByTestId, queryAllByText } = renderWithTheme(
      <InPageNavigation
        heading="Employee Files"
        items={items}
        onClickItem={onClickItem}
        variant="horizontal"
      />
    );

    expect(getByText('Overview')).toBeInTheDocument();
    expect(getByText('Personal details')).toBeInTheDocument();
    expect(getByTestId('personal_details-prefix-icon')).toBeInTheDocument();
    expect(getByTestId('personal_details-suffix-icon')).toBeInTheDocument();
    expect(getByText('Employment details')).toBeInTheDocument();
    expect(getByText('HR documents')).toBeInTheDocument();
    expect(getByText('More')).toBeInTheDocument();
    expect(queryAllByText('Uploaded documents').length).toEqual(0);
    expect(queryAllByText('Certifications').length).toEqual(0);
  });

  it('allows to click on item', () => {
    const { getByText } = renderWithTheme(
      <InPageNavigation
        heading="Employee Files"
        items={items}
        onClickItem={onClickItem}
      />
    );

    userEvent.click(getByText('HR documents'));
    expect(onClickItem).toHaveBeenCalledWith({
      id: 'hr_documents',
      text: 'HR documents',
    });
  });

  it('disallows to click on disabled item', () => {
    const { getByText } = renderWithTheme(
      <InPageNavigation
        heading="Employee Files"
        items={items}
        onClickItem={onClickItem}
      />
    );

    userEvent.click(getByText('Employment details'));
    expect(onClickItem).not.toHaveBeenCalled();
  });

  it('allows to see more items', () => {
    const { getByText, queryAllByText } = renderWithTheme(
      <InPageNavigation
        heading="Employee Files"
        items={items}
        onClickItem={onClickItem}
        variant="horizontal"
      />
    );

    expect(queryAllByText('Uploaded documents').length).toEqual(0);
    expect(queryAllByText('Certifications').length).toEqual(0);

    userEvent.click(getByText('More'));
    expect(getByText('Uploaded documents')).toBeInTheDocument();
    expect(getByText('Certifications')).toBeInTheDocument();
  });

  it('can click icon', () => {
    const onClickIcon = jest.fn();
    const itemsWithOnClick = {
      '': [
        {
          id: 'overview',
          text: 'Overview',
        },
        {
          id: 'personal_details',
          text: 'Personal details',
          disabled: true,
          disabledReason: 'Upgrade your plan to use this',
          prefix: {
            icon: 'user-outlined' as const,
          },
        },
        {
          id: 'employment_details',
          text: 'Employment details',
          actions: [
            {
              icon: 'pencil-outlined' as const,
              intent: 'primary' as const,
              onClick: onClickIcon,
            },
          ],
        },
      ],
      Documents: [
        {
          id: 'hr_documents',
          text: 'HR documents',
        },
        {
          id: 'uploaded_documents',
          text: 'Uploaded documents',
          actions: [
            {
              icon: 'cancel' as const,
              intent: 'error' as const,
              onClick: onClickIcon,
            },
          ],
        },
        {
          id: 'certifications',
          text: 'Certifications',
          suffix: {
            icon: 'circle-ok-outlined' as const,
            intent: 'success' as const,
          },
        },
      ],
    };

    const { getByTestId } = renderWithTheme(
      <InPageNavigation items={itemsWithOnClick} onClickItem={onClickItem} />
    );

    userEvent.click(getByTestId('employment_details-actions-icon-0'));
    expect(onClickIcon).toBeCalledTimes(1);

    userEvent.click(getByTestId('uploaded_documents-actions-icon-0'));
    expect(onClickIcon).toBeCalledTimes(2);
  });

  it('can not click icon if disabled', () => {
    const onClickIcon = jest.fn();
    const itemsWithOnClick = {
      '': [
        {
          id: 'overview',
          text: 'Overview',
        },
        {
          id: 'personal_details',
          text: 'Personal details',
          disabled: true,
          disabledReason: 'Upgrade your plan to use this',
          prefix: {
            icon: 'user-outlined' as const,
          },
        },
        {
          id: 'employment_details',
          text: 'Employment details',
          disabled: true,
          actions: [
            {
              icon: 'pencil-outlined' as const,
              intent: 'primary' as const,
              onClick: onClickIcon,
            },
          ],
        },
      ],
      Documents: [
        {
          id: 'hr_documents',
          text: 'HR documents',
        },
        {
          id: 'uploaded_documents',
          text: 'Uploaded documents',
          disabled: true,
          actions: [
            {
              icon: 'cancel' as const,
              intent: 'error' as const,
              onClick: onClickIcon,
            },
          ],
        },
        {
          id: 'certifications',
          text: 'Certifications',
          suffix: {
            icon: 'circle-ok-outlined' as const,
            intent: 'success' as const,
          },
        },
      ],
    };

    const { getByTestId } = renderWithTheme(
      <InPageNavigation items={itemsWithOnClick} onClickItem={onClickItem} />
    );

    userEvent.click(getByTestId('employment_details-actions-icon-0'));
    expect(onClickIcon).toBeCalledTimes(0);

    userEvent.click(getByTestId('uploaded_documents-actions-icon-0'));
    expect(onClickIcon).toBeCalledTimes(0);
  });

  it('do not render icon if disableReason existed', async () => {
    const onClickIcon = jest.fn();
    const itemsWithOnClick = {
      '': [
        {
          id: 'overview',
          text: 'Overview',
        },
        {
          id: 'personal_details',
          text: 'Personal details',
          disabled: true,
          disabledReason: 'Upgrade your plan to use this',
          prefix: {
            icon: 'user-outlined' as const,
          },
        },
        {
          id: 'employment_details',
          text: 'Employment details',
          disabled: true,
          disabledReason: 'Upgrade your plan to use this',
          actions: [
            {
              icon: 'pencil-outlined' as const,
              intent: 'primary' as const,
              onClick: onClickIcon,
            },
          ],
        },
      ],
      Documents: [
        {
          id: 'hr_documents',
          text: 'HR documents',
        },
        {
          id: 'uploaded_documents',
          text: 'Uploaded documents',
          disabled: true,
          disabledReason: 'Upgrade your plan to use this',
          actions: [
            {
              icon: 'cancel' as const,
              intent: 'error' as const,
              onClick: onClickIcon,
            },
          ],
        },
        {
          id: 'certifications',
          text: 'Certifications',
          suffix: {
            icon: 'circle-ok-outlined' as const,
            intent: 'success' as const,
          },
        },
      ],
    };

    const { queryByTestId } = renderWithTheme(
      <InPageNavigation items={itemsWithOnClick} onClickItem={onClickItem} />
    );

    expect(
      await queryByTestId('employment_details-actions-icon-0')
    ).not.toBeInTheDocument();

    expect(
      await queryByTestId('uploaded_documents-actions-icon-0')
    ).not.toBeInTheDocument();
  });
});
