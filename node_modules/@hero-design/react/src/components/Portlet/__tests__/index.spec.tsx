import React from 'react';
import { fireEvent, screen, waitFor } from '@testing-library/react';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Portlet from '..';

describe('rendering', () => {
  it('renders only portlet title and content by default', () => {
    const { getByText } = renderWithTheme(
      <Portlet title="Portlet title">
        <div>Portlet content</div>
      </Portlet>
    );

    expect(getByText('Portlet title')).toBeInTheDocument();
    expect(getByText('Portlet content')).toBeInTheDocument();
  });

  it('allows to show custom actions', async () => {
    const onRemove = jest.fn();
    const onRefresh = jest.fn();
    const onEdit = jest.fn();
    const onSend = jest.fn();

    renderWithTheme(
      <Portlet
        title="Portlet title"
        actions={[
          {
            icon: 'menu',
            menus: [
              {
                value: 'pencil',
                item: {
                  text: 'Edit',
                  onClick: onEdit,
                },
              },
              {
                value: 'send',
                item: {
                  text: 'Send',
                  onClick: onSend,
                },
              },
            ],
            'data-test-id': 'portlet-menu-button',
          },
          {
            icon: 'sync',
            onClick: onRefresh,
            'data-test-id': 'sync-button',
          },
          {
            icon: 'cancel',
            onClick: onRemove,
            'data-test-id': 'remove-button',
          },
        ]}
      >
        Portlet content
      </Portlet>
    );
    expect(screen.getByTestId('sync-button')).toBeInTheDocument();
    fireEvent.click(screen.getByTestId('sync-button'));
    expect(onRefresh).toBeCalledTimes(1);

    expect(screen.getByTestId('remove-button')).toBeInTheDocument();
    fireEvent.click(screen.getByTestId('remove-button'));
    expect(onRemove).toBeCalledTimes(1);

    expect(screen.getByTestId('portlet-menu-button')).toBeInTheDocument();
    fireEvent.click(screen.getByTestId('portlet-menu-button'));

    expect(await screen.findByText('Edit')).toBeInTheDocument();
    expect(screen.getByText('Send')).toBeInTheDocument();

    fireEvent.click(screen.getByText('Edit'));
    expect(onEdit).toBeCalledTimes(1);

    fireEvent.click(screen.getByTestId('portlet-menu-button'));
    fireEvent.click(await screen.findByText('Send'));
    expect(onSend).toBeCalledTimes(1);
  });

  it.each`
    badge                 | expected
    ${10}                 | ${'10'}
    ${'New'}              | ${'New'}
    ${(<span>New</span>)} | ${'New'}
  `('allows to show a custom badge', ({ badge, expected }) => {
    const { getByText } = renderWithTheme(
      <Portlet title="Portlet title" titleExtra={badge}>
        Portlet content
      </Portlet>
    );
    expect(getByText(expected)).toBeInTheDocument();
  });
});

describe('interaction', () => {
  it('allows to control open state with close button', async () => {
    const ComponentUnderTest = () => {
      const [state, setState] = React.useState(false);
      return (
        <Portlet
          title="Portlet title"
          open={state}
          actions={[
            {
              icon: 'cancel',
              'data-test-id': 'portlet-close-button',
              onClick: () => setState((v) => !v),
            },
          ]}
        >
          <div>Portlet content</div>
        </Portlet>
      );
    };
    const { getByText, getByTestId, queryByText } = renderWithTheme(
      <ComponentUnderTest />
    );

    // Content is hidden because open state is initially false
    expect(queryByText('Portlet content')).not.toBeInTheDocument();

    // Expand the portlet
    fireEvent.click(getByTestId('portlet-close-button'));
    await waitFor(() =>
      expect(getByText('Portlet content')).toBeInTheDocument()
    );

    // Collapse the portlet
    fireEvent.click(getByTestId('portlet-close-button'));
    await waitFor(() =>
      expect(queryByText('Portlet content')).not.toBeInTheDocument()
    );
  });
});
