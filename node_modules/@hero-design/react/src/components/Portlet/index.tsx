import React, { ReactElement, ReactNode, isValidElement } from 'react';

import Typography from '../Typography';
import Button from '../Button';
import Spinner from '../Spinner';
import { useCss } from '../../utils/hooks';
import type { CommonProps } from '../common';
import Collapse from '../Collapse';
import {
  StyledActionWrapper,
  StyledHeaderWrapper,
  StyledPortletWrapper,
  StyledTitleWrapper,
} from './StyledPortlet';
import Badge from '../Badge';
import type { PorletAction } from './types';
import PortletActionDropdown from './PortletActionDropdown';

export interface PortletProps extends CommonProps {
  /**
   * Portlet title.
   */
  title: string | ReactElement;
  /**
   * Used to show a number or a badge next to the portlet title.
   */
  titleExtra?: number | string | ReactElement;

  /**
   * Open state of the portlet.
   */
  open?: boolean;

  /**
   * Portlet content.
   */
  children?: ReactNode;

  /**
   * Additional action buttons to render in the porlet header.
   */
  actions?: PorletAction[];

  /**
   * Loading state.
   */
  loading?: boolean;
  /**
   * Whether or not to keep the content stay mounted when collapsed.
   */
  keepChildrenMounted?: boolean;
}

const Portlet = ({
  title,
  titleExtra,
  children,
  loading,
  className,
  'data-test-id': dataTestId,
  actions,
  style,
  id,
  sx = {},
  open = true,
  keepChildrenMounted = false,
}: PortletProps) => {
  const titleExtraElement = React.useMemo(() => {
    if (isValidElement(titleExtra)) {
      return titleExtra;
    }

    switch (typeof titleExtra) {
      case 'number':
        return (
          <Typography.Text
            fontSize={18}
            fontWeight="semi-bold"
            intent="subdued"
          >
            {titleExtra.toString()}
          </Typography.Text>
        );
      case 'string':
        return (
          <Badge content={titleExtra} intent="primary" variant="outlined" />
        );
      default:
        return null;
    }
  }, [titleExtra]);

  return (
    <StyledPortletWrapper
      id={id}
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      <Spinner loading={loading} size="small">
        <StyledHeaderWrapper themeOpen={open}>
          <StyledTitleWrapper>
            {isValidElement(title) ? (
              title
            ) : (
              <Typography.Text fontSize={18} fontWeight="semi-bold">
                {title}
              </Typography.Text>
            )}
            {titleExtraElement}
          </StyledTitleWrapper>
          {Array.isArray(actions) && actions?.length > 0 && (
            <StyledActionWrapper>
              {actions.map(({ menus, ...buttonProps }, index) => {
                return Array.isArray(menus) && menus.length > 0 ? (
                  <PortletActionDropdown
                    // eslint-disable-next-line react/no-array-index-key
                    key={index}
                    menus={menus}
                    {...buttonProps}
                  />
                ) : (
                  // eslint-disable-next-line react/no-array-index-key
                  <Button.Icon key={index} {...buttonProps} />
                );
              })}
            </StyledActionWrapper>
          )}
        </StyledHeaderWrapper>
        <Collapse keepChildrenMounted={keepChildrenMounted} open={open}>
          {children}
        </Collapse>
      </Spinner>
    </StyledPortletWrapper>
  );
};

export default Portlet;
