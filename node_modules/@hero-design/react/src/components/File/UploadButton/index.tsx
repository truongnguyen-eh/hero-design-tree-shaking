import React, { useRef, useCallback } from 'react';
import type { ReactElement, ReactChild } from 'react';
import { useCss } from '../../../utils/hooks';

import Button from '../../Button';
import { HiddenInput, FileUploadWrapper } from './StyledUploadButton';
import { isValidExtension } from '../utils';
import { fromUndefinedable, getOrElse, map } from '../../../fp/Option';
import { invoke, invokeWith, noop, pipe } from '../../../fp/function';
import { reduce } from '../../../fp/Array';
import { match, right, left } from '../../../fp/Either';
import type { CommonProps } from '../../common';
import type { Either } from '../../../fp/Either';

export interface UploadButtonProps extends CommonProps {
  /**
   * A comma-separated list of one or more file types, or [unique file type specifiers](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept#unique_file_type_specifiers), describing which file types to allow.
   */
  accept?: string;
  /**
   * Loading state of upload button.
   */
  loading?: boolean;
  /**
   * Maximum file size (in `bytes`).
   */
  maxSize?: number;
  /**
   * Allow to select multiple files.
   */
  multiple?: boolean;
  /**
   * Event handler receiving accepted files.
   */
  onAccept?: (files: File[]) => void;
  /**
   * Event handler receiving rejected files.
   */
  onReject?: (
    rejectedFiles: {
      file: File;
      reason: 'size-limit-exceeded' | 'format-not-allowed';
    }[]
  ) => void;
  /**
   * Upload Button label.
   */
  text: ReactChild;
  /**
   * Upload Button type.
   */
  variant?: 'filled' | 'outlined';
}

const DEFAULT_MAX_SIZE = 100 * 1024 * 1024 * 1024; // 100GBs

const stopPropagationEvent = (e: React.MouseEvent<HTMLElement>): void => {
  e.stopPropagation();
};

const eitherValidOrInvalid =
  (allowedExtensions: string[], allowedMaxSize: number) =>
  (
    file: File
  ): Either<File, [File, 'format-not-allowed' | 'size-limit-exceeded']> => {
    const hasValidExtension = allowedExtensions.some(
      isValidExtension(file.name, file.type)
    );
    if (allowedExtensions.length > 0 && hasValidExtension === false) {
      return right([file, 'format-not-allowed']);
    }
    if (file.size > allowedMaxSize) {
      return right([file, 'size-limit-exceeded']);
    }
    return left(file);
  };

const UploadButton = ({
  onAccept,
  onReject,
  multiple = false,
  accept,
  loading = false,
  maxSize,
  text,
  id,
  variant = 'outlined',
  className,
  style,
  sx = {},
  'data-test-id': dataTestId,
}: UploadButtonProps): ReactElement => {
  const inputRef = useRef<HTMLInputElement>(null);
  const onUploadButtonClick = useCallback(() => {
    if (inputRef.current !== null) {
      inputRef.current.value = '';
      inputRef.current.click();
    }
  }, []);

  const allowedExtensions = React.useMemo(
    () =>
      pipe(
        accept,
        fromUndefinedable,
        map((acc) => acc.split(',').map((i) => i.trim())),
        getOrElse(() => [])
      ),
    [accept]
  );

  const allowedMaxSize = React.useMemo(
    () =>
      pipe(
        maxSize,
        fromUndefinedable,
        getOrElse(() => DEFAULT_MAX_SIZE)
      ),
    [maxSize]
  );

  const onChanged = React.useCallback(
    (files: File[]) => {
      const { validFiles, invalidFiles } = pipe(
        multiple === true ? files : files.slice(0, 1),
        reduce(
          (
            acc: {
              invalidFiles: {
                file: File;
                reason: 'format-not-allowed' | 'size-limit-exceeded';
              }[];
              validFiles: File[];
            },
            cur: File
          ) =>
            pipe(
              cur,
              eitherValidOrInvalid(allowedExtensions, allowedMaxSize),
              match(
                (file) => ({ ...acc, validFiles: [...acc.validFiles, file] }),
                ([file, reason]) => ({
                  ...acc,
                  invalidFiles: [...acc.invalidFiles, { file, reason }],
                })
              )
            ),
          { validFiles: [], invalidFiles: [] }
        )
      );
      if (validFiles.length > 0) {
        pipe(
          onAccept,
          fromUndefinedable,
          getOrElse(() => noop),
          invokeWith(validFiles)
        );
      }

      if (invalidFiles.length > 0) {
        pipe(
          onReject,
          fromUndefinedable,
          getOrElse(() => noop),
          invokeWith(invalidFiles)
        );
      }
    },
    [multiple, allowedMaxSize, allowedExtensions, onAccept, onReject]
  );

  const onInputChange = useCallback(
    (e) => {
      pipe(e.target.files, Array.from, invoke(onChanged));
    },
    [onChanged]
  );

  return (
    <FileUploadWrapper
      className={className}
      style={{ ...style, ...useCss(sx) }}
      data-test-id={dataTestId}
    >
      <Button
        loading={loading}
        text={text}
        icon="upload-outlined"
        variant={variant}
        intent="primary"
        onClick={onUploadButtonClick}
        data-test-id="upload-button"
      />
      <HiddenInput
        type="file"
        ref={inputRef}
        onChange={onInputChange}
        multiple={multiple}
        accept={accept}
        onClick={stopPropagationEvent}
        id={id}
        data-test-id="input-files"
      />
    </FileUploadWrapper>
  );
};

export default UploadButton;
