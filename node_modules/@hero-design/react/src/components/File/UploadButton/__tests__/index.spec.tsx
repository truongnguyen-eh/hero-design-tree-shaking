import React from 'react';
import { fireEvent, createEvent } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import UploadButton from '..';

const fireInputChangeEvent = (
  element: HTMLElement,
  files: {
    name: string;
    size: number;
    type: string;
  }[]
): void => {
  const mockFiles = files.map((file) => {
    const mockFile = new File([file.name], file.name, {
      type: file.type,
    });
    Object.defineProperty(mockFile, 'size', {
      value: file.size,
    });
    return mockFile;
  });

  const fileSelectEvent = createEvent.change(element, {
    target: { files: mockFiles },
  });

  fireEvent(element, fileSelectEvent);
};

describe('rendering', () => {
  const filledStyle = `
        color: #ffffff;
        background: #7622d7;
        border: none;
      `;
  const outlinedStyle = `
      color: #7622d7;
      background: transparent;
      border-color: #7622d7;
    `;

  it.each`
    variant       | returnedStyle
    ${'filled'}   | ${filledStyle}
    ${'outlined'} | ${outlinedStyle}
  `(
    'renders correctly when variant is $variant',
    ({ variant, returnedStyle }) => {
      const onAccept = jest.fn();
      const onReject = jest.fn();

      const { getByTestId } = renderWithTheme(
        <UploadButton
          onAccept={onAccept}
          onReject={onReject}
          variant={variant}
          text="Upload"
        />
      );

      const uploadButton = getByTestId('upload-button');

      expect(uploadButton).toHaveStyle(returnedStyle);
    }
  );

  it('renders loading icon', () => {
    const onAccept = jest.fn();
    const onReject = jest.fn();

    const { container } = renderWithTheme(
      <UploadButton
        text="Upload"
        onAccept={onAccept}
        onReject={onReject}
        loading
      />
    );
    expect(container.querySelectorAll('i')).toHaveLength(1);
  });

  it('renders upload button text', () => {
    const onAccept = jest.fn();
    const onReject = jest.fn();

    const { getByText } = renderWithTheme(
      <UploadButton
        onAccept={onAccept}
        onReject={onReject}
        loading
        text="Upload Documents"
      />
    );
    expect(getByText('Upload Documents')).toBeInTheDocument();
  });
});

describe('interaction', () => {
  describe('selecting valid files by click upload button', () => {
    it('allows to click button to select valid files', () => {
      const onAccept = jest.fn();
      const onReject = jest.fn();
      const { getByTestId } = renderWithTheme(
        <UploadButton text="Upload" onAccept={onAccept} onReject={onReject} />
      );

      const hiddenInput = getByTestId('input-files');
      fireInputChangeEvent(hiddenInput, [
        {
          name: 'test.png',
          type: 'image/png',
          size: 100 * 1024,
        },
      ]);
      expect(onAccept).toHaveBeenCalledWith([expect.any(File)]);
      expect(onReject).not.toHaveBeenCalled();
    });

    it('allows to click upload button to select multiple valid files', () => {
      const onAccept = jest.fn();
      const onReject = jest.fn();
      const { getByTestId } = renderWithTheme(
        <UploadButton
          text="Upload"
          onAccept={onAccept}
          onReject={onReject}
          multiple
        />
      );
      const hiddenInput = getByTestId('input-files');
      fireInputChangeEvent(hiddenInput, [
        {
          name: 'test1.png',
          type: 'image/jpg',
          size: 100 * 1024,
        },
        {
          name: 'test2.png',
          type: 'image/jpg',
          size: 200 * 1024,
        },
      ]);
      expect(onAccept).toHaveBeenCalledWith([
        expect.any(File),
        expect.any(File),
      ]);
      expect(onReject).not.toHaveBeenCalled();
    });
  });

  describe('Clicking upload button to select invalid files', () => {
    it('DOES NOT allow to click upload button to select invalid file size', () => {
      const onAccept = jest.fn();
      const onReject = jest.fn();
      const { getByTestId } = renderWithTheme(
        <UploadButton
          text="Upload"
          accept="image/*"
          onAccept={onAccept}
          onReject={onReject}
          maxSize={1024}
        />
      );
      const hiddenInput = getByTestId('input-files');
      fireInputChangeEvent(hiddenInput, [
        {
          name: 'test.png',
          type: 'image/png',
          size: 1025,
        },
      ]);
      expect(onReject).toHaveBeenCalledWith([
        expect.objectContaining({
          file: expect.any(File),
          reason: 'size-limit-exceeded',
        }),
      ]);
      expect(onAccept).not.toHaveBeenCalled();
    });
  });

  describe('clicking upload button to select mixing invalid & valid files', () => {
    it('allows to select valid files but NOT invalid ones type', () => {
      const onAccept = jest.fn();
      const onReject = jest.fn();
      const { getByTestId } = renderWithTheme(
        <UploadButton
          text="Upload"
          accept="image/*"
          onAccept={onAccept}
          onReject={onReject}
          multiple
          maxSize={1024}
        />
      );
      const hiddenInput = getByTestId('input-files');
      fireInputChangeEvent(hiddenInput, [
        {
          name: 'test.gzip',
          type: 'application/gzip',
          size: 1024,
        },
        {
          name: 'test.jpg',
          type: 'image/jpg',
          size: 1024,
        },
        {
          name: 'test.gzip',
          type: 'application/gzip',
          size: 1025,
        },
        {
          name: 'test.png',
          type: 'image/png',
          size: 1025,
        },
      ]);
      expect(onReject).toHaveBeenCalledWith([
        expect.objectContaining({
          file: expect.any(File),
          reason: 'format-not-allowed',
        }),
        expect.objectContaining({
          file: expect.any(File),
          reason: 'format-not-allowed',
        }),
        expect.objectContaining({
          file: expect.any(File),
          reason: 'size-limit-exceeded',
        }),
      ]);
      expect(onAccept).toHaveBeenCalledWith([expect.any(File)]);
    });
  });
});
