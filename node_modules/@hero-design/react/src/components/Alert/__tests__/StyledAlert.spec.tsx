import React from 'react';

import theme from '../../../theme';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import {
  StyledIconWrapper,
  StyledAlert,
  StyledCloseButton,
} from '../StyledAlert';

describe('StyledIconWrapper', () => {
  it('returns default style', () => {
    const { container } = renderWithTheme(
      <StyledIconWrapper themeSize="default" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-top: ${theme.__hd__.alert.space.iconDefaultMarginTop};
      margin-right: ${theme.__hd__.alert.space.iconDefaultMarginRight};
      line-height: ${theme.__hd__.alert.lineHeights.iconDefault};
    `);
  });

  it('returns compact style', () => {
    const { container } = renderWithTheme(
      <StyledIconWrapper themeSize="compact" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-top: ${theme.__hd__.alert.space.iconCompactMarginTop};
      margin-right: ${theme.__hd__.alert.space.iconCompactMarginRight};
      line-height: ${theme.__hd__.alert.lineHeights.iconCompact};
    `);
  });

  it('returns inherit color', () => {
    const { container } = renderWithTheme(
      <StyledIconWrapper themeSize="compact" />
    );

    expect(container.firstChild).toHaveStyle(`
      color: inherit;
    `);
  });
});

describe('StyledAlert', () => {
  it('returns correct style', () => {
    const { container } = renderWithTheme(
      <StyledAlert themeIntent="success" themeSize="default" />
    );

    expect(container.firstChild).toHaveStyle(`
      color: ${theme.__hd__.alert.colors.text};
      border-width: ${theme.__hd__.alert.borderWidths.wrapper};
    `);
  });

  it('returns default style', () => {
    const { container } = renderWithTheme(
      <StyledAlert themeIntent="success" themeSize="default" />
    );

    expect(container.firstChild).toHaveStyle(`
      padding: ${theme.__hd__.alert.space.defaultPadding};
    `);
  });

  it('returns compact style', () => {
    const { container } = renderWithTheme(
      <StyledAlert themeIntent="success" themeSize="compact" />
    );

    expect(container.firstChild).toHaveStyle(`
      padding: ${theme.__hd__.alert.space.compactPadding};
    `);
  });

  it.each`
    themeIntent  | expectedBorderColor
    ${'success'} | ${theme.__hd__.alert.colors.borderSuccess}
    ${'info'}    | ${theme.__hd__.alert.colors.borderInfo}
    ${'warning'} | ${theme.__hd__.alert.colors.borderWarning}
    ${'danger'}  | ${theme.__hd__.alert.colors.borderDanger}
    ${'error'}   | ${theme.__hd__.alert.colors.borderError}
  `(
    'returns correct border color when intent is $themeIntent',
    ({ themeIntent, expectedBorderColor }) => {
      const { container } = renderWithTheme(
        <StyledAlert themeIntent={themeIntent} themeSize="compact" />
      );

      expect(container.firstChild).toHaveStyle(`
        border-color: ${expectedBorderColor};
      `);
    }
  );
});

describe('StyledCloseButton', () => {
  it('returns default style', () => {
    const { container } = renderWithTheme(
      <StyledCloseButton themeSize="default" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-top: ${theme.__hd__.alert.space.iconDefaultMarginTop};
      line-height: ${theme.__hd__.alert.lineHeights.iconDefault}
    `);
  });

  it('returns compact style', () => {
    const { container } = renderWithTheme(
      <StyledCloseButton themeSize="compact" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-right: ${theme.__hd__.alert.space.iconCompactMarginRight};
      line-height: ${theme.__hd__.alert.lineHeights.iconCompact}
    `);
  });

  it('returns inherit color', () => {
    const { container } = renderWithTheme(
      <StyledCloseButton themeSize="default" />
    );

    expect(container.firstChild).toHaveStyle(`
      color: inherit;
    `);
  });
});
