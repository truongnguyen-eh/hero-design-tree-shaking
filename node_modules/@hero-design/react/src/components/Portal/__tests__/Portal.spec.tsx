import React, { useState } from 'react';
import Portal from '../index';
import renderWithTheme from '../../../testUtils/renderWithTheme';
import { getDefaultPortalContainer } from '../../../utils/getDefaultPortalContainer';

describe('Portal', () => {
  it('should render inside specified container', () => {
    const TestComponent = () => {
      const [containerRef, setContainerRef] = useState<HTMLDivElement | null>(
        null
      );

      return (
        <>
          <div id="test-1">
            <Portal withPortal container={containerRef}>
              <div id="portal" />
            </Portal>
          </div>
          <div id="test-2" ref={setContainerRef} />
        </>
      );
    };
    renderWithTheme(<TestComponent />);

    const test1Element = document.getElementById('test-1') as HTMLDivElement;
    const test2Element = document.getElementById('test-2') as HTMLDivElement;

    expect(
      test1Element.contains(document.getElementById('portal'))
    ).toBeFalsy();
    expect(
      test2Element.contains(document.getElementById('portal'))
    ).toBeTruthy();
  });

  it('should append component into document.body when container is not specified ', () => {
    renderWithTheme(
      <div id="root">
        <Portal withPortal container={getDefaultPortalContainer()}>
          <div id="portal" />
        </Portal>
      </div>
    );

    const rootElement = document.getElementById('root') as HTMLDivElement;

    expect(rootElement.contains(document.getElementById('portal'))).toBeFalsy();
    expect(
      document.body.contains(document.getElementById('portal'))
    ).toBeTruthy();
  });
});
