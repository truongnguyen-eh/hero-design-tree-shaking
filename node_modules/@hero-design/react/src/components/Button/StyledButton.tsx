import styled, { css } from 'styled-components';
import type {
  FlattenInterpolation,
  ThemeProps,
  DefaultTheme,
} from 'styled-components';

type Intent = 'primary' | 'danger' | 'success' | 'warning' | 'error';

type ThemeVariant =
  | 'basic'
  | 'basic-transparent'
  | 'filled-primary'
  | 'filled-danger'
  | 'filled-success'
  | 'filled-warning'
  | 'filled-error'
  | 'outlined-primary'
  | 'outlined-danger'
  | 'outlined-success'
  | 'outlined-warning'
  | 'outlined-error'
  | 'text-primary'
  | 'text-danger'
  | 'text-success'
  | 'text-warning'
  | 'text-error'
  | 'filled-reversed-primary'
  | 'filled-reversed-danger'
  | 'filled-reversed-success'
  | 'filled-reversed-warning'
  | 'filled-reversed-error'
  | 'inline-text-primary'
  | 'inline-text-danger'
  | 'inline-text-success'
  | 'inline-text-warning'
  | 'inline-text-error';

const FILLED_TEXT_COLORS = {
  primary: 'filledPrimary',
  danger: 'filledDanger',
  success: 'filledSuccess',
  warning: 'filledWarning',
  error: 'filledError',
} as const;

const HOVER_COLORS = {
  primary: 'hoverPrimary',
  danger: 'hoverDanger',
  success: 'hoverSuccess',
  warning: 'hoverWarning',
  error: 'hoverError',
} as const;

const ACTIVE_COLORS = {
  primary: 'activePrimary',
  danger: 'activeDanger',
  success: 'activeSuccess',
  warning: 'activeWarning',
  error: 'activeError',
} as const;

const genFilledStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  border: none;
  color: ${({ theme }) =>
    theme.__hd__.button.colors.text[FILLED_TEXT_COLORS[intent]]};
  background: ${({ theme }) => theme.__hd__.button.colors.background[intent]};
  &:hover,
  &:focus {
    background: ${({ theme }) =>
      theme.__hd__.button.colors.background[HOVER_COLORS[intent]]};
  }
  &:active {
    background: ${({ theme }) =>
      theme.__hd__.button.colors.background[ACTIVE_COLORS[intent]]};
  }
  &:disabled {
    background: ${({ theme }) =>
      theme.__hd__.button.colors.background.disabledBackground};
    color: ${({ theme }) => theme.__hd__.button.colors.text.disabledText};
    cursor: not-allowed;
  }
`;

const genOutlinedStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: ${({ theme }) => theme.__hd__.button.colors.text[intent]};
  border-color: ${({ theme }) => theme.__hd__.button.colors[intent]};
  background: transparent;
  &:hover,
  &:focus {
    color: ${({ theme }) =>
      theme.__hd__.button.colors.text[HOVER_COLORS[intent]]};
    border-color: ${({ theme }) =>
      theme.__hd__.button.colors[HOVER_COLORS[intent]]};
  }
  &:active {
    color: ${({ theme }) =>
      theme.__hd__.button.colors.text[ACTIVE_COLORS[intent]]};
    border-color: ${({ theme }) =>
      theme.__hd__.button.colors[ACTIVE_COLORS[intent]]};
  }
  &:disabled {
    color: ${({ theme }) => theme.__hd__.button.colors.text.disabledLightText};
    border-color: ${({ theme }) => theme.__hd__.button.colors.defaultBorder};
    cursor: not-allowed;
  }
`;

const genTextStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: ${({ theme }) => theme.__hd__.button.colors.text[intent]};
  border: none;
  background: transparent;
  min-width: unset;
  &:hover,
  &:focus {
    color: ${({ theme }) =>
      theme.__hd__.button.colors.text[HOVER_COLORS[intent]]};
  }
  &:active {
    color: ${({ theme }) =>
      theme.__hd__.button.colors.text[ACTIVE_COLORS[intent]]};
  }
  &:disabled {
    color: ${({ theme }) => theme.__hd__.button.colors.text.disabledText};
    cursor: not-allowed;
  }
`;

const genInlineTextStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  ${genTextStyles(intent)}
  padding: ${({ theme }) => theme.__hd__.button.space.inlineTextPadding};
`;

const genFilledReversedStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  border: none;
  background: white;
  color: ${({ theme }) => theme.__hd__.button.colors.text[intent]};
  &:hover {
    opacity: 0.4;
  }
  &:focus,
  &:active {
    opacity: 0.7;
  }
  &:disabled {
    opacity: 1;
    background: ${({ theme }) =>
      theme.__hd__.button.colors.background.disabledBackground};
    color: ${({ theme }) => theme.__hd__.button.colors.text.disabledText};
    cursor: not-allowed;
  }
`;

const genLoadingStyles = (variant: ThemeVariant) => {
  switch (variant) {
    case 'basic':
      return css`
        color: ${({ theme }) => theme.__hd__.button.colors.text.activePrimary};
        border-color: ${({ theme }) =>
          theme.__hd__.button.colors.activePrimary};
      `;
    case 'basic-transparent':
    case 'filled-reversed-primary':
    case 'filled-reversed-success':
    case 'filled-reversed-warning':
    case 'filled-reversed-danger':
    case 'filled-reversed-error':
      return css`
        opacity: 0.7;
      `;
    case 'filled-primary':
      return css`
        background: ${({ theme }) =>
          theme.__hd__.button.colors.background.loadingPrimary};
      `;
    case 'filled-success':
      return css`
        background: ${({ theme }) =>
          theme.__hd__.button.colors.background.loadingSuccess};
      `;
    case 'filled-warning':
      return css`
        background: ${({ theme }) =>
          theme.__hd__.button.colors.background.loadingWarning};
      `;
    case 'filled-danger':
      return css`
        background: ${({ theme }) =>
          theme.__hd__.button.colors.background.loadingDanger};
      `;
    case 'filled-error':
      return css`
        background: ${({ theme }) =>
          theme.__hd__.button.colors.background.loadingError};
      `;
    case 'outlined-primary':
    case 'text-primary':
      return css`
        color: ${({ theme }) => theme.__hd__.button.colors.text.loadingPrimary};
        border-color: ${({ theme }) =>
          theme.__hd__.button.colors.loadingPrimary};
      `;
    case 'outlined-success':
    case 'text-success':
      return css`
        color: ${({ theme }) => theme.__hd__.button.colors.text.loadingSuccess};
        border-color: ${({ theme }) =>
          theme.__hd__.button.colors.loadingSuccess};
      `;
    case 'outlined-warning':
    case 'text-warning':
      return css`
        color: ${({ theme }) => theme.__hd__.button.colors.text.loadingWarning};
        border-color: ${({ theme }) =>
          theme.__hd__.button.colors.loadingWarning};
      `;
    case 'outlined-danger':
    case 'text-danger':
      return css`
        color: ${({ theme }) => theme.__hd__.button.colors.text.loadingDanger};
        border-color: ${({ theme }) =>
          theme.__hd__.button.colors.loadingDanger};
      `;
    case 'outlined-error':
    case 'text-error':
      return css`
        color: ${({ theme }) => theme.__hd__.button.colors.text.loadingError};
        border-color: ${({ theme }) => theme.__hd__.button.colors.loadingError};
      `;
  }
};

const StyledButton = styled('button').withConfig({
  shouldForwardProp: (prop, _defaultValidatorFn) =>
    !['loading', 'themeSize', 'themeVariant'].includes(prop),
})<{
  loading?: boolean;
  themeSize: 'small' | 'medium' | 'large';
  themeVariant: ThemeVariant;
}>`
  box-sizing: border-box;
  white-space: nowrap;
  line-height: 100%;
  border-style: solid;
  border-width: ${({ theme }) => theme.__hd__.button.borderWidths.default};
  font-weight: ${({ theme }) => theme.__hd__.button.fontWeights.text};
  margin: 0;
  cursor: pointer;

  &:focus {
    outline: none;
  }

  ${({ themeSize, theme }) => {
    switch (themeSize) {
      case 'small':
        return css`
          height: ${theme.__hd__.button.sizes.small};
          padding: ${theme.__hd__.button.space.smallPadding};
          font-size: ${theme.__hd__.button.fontSizes.small};
          border-radius: ${theme.__hd__.button.radii.small};
          min-width: ${theme.__hd__.button.sizes.smallMinWidth};
        `;
      case 'medium':
        return css`
          height: ${theme.__hd__.button.sizes.medium};
          padding: ${theme.__hd__.button.space.mediumPadding};
          font-size: ${theme.__hd__.button.fontSizes.medium};
          border-radius: ${theme.__hd__.button.radii.medium};
          min-width: ${theme.__hd__.button.sizes.mediumMinWidth};
        `;
      case 'large':
        return css`
          height: ${theme.__hd__.button.sizes.large};
          padding: ${theme.__hd__.button.space.largePadding};
          font-size: ${theme.__hd__.button.fontSizes.large};
          border-radius: ${theme.__hd__.button.radii.large};
          min-width: ${theme.__hd__.button.sizes.largeMinWidth};
        `;
    }
  }};

  ${({ themeVariant, theme }) => {
    switch (themeVariant) {
      case 'basic':
        return css`
          color: ${theme.__hd__.button.colors.text.defaultText};
          border-color: ${theme.__hd__.button.colors.defaultBorder};
          background: ${theme.__hd__.button.colors.background
            .defaultLightBackground};
          &:hover,
          &:focus {
            color: ${theme.__hd__.button.colors.text.hoverPrimary};
            border-color: ${theme.__hd__.button.colors.hoverPrimary};
          }
          &:active {
            color: ${theme.__hd__.button.colors.text.activePrimary};
            border-color: ${theme.__hd__.button.colors.activePrimary};
          }
          &:disabled {
            background: ${theme.__hd__.button.colors.background
              .defaultBackground};
            color: ${theme.__hd__.button.colors.text.disabledText};
            border-color: ${theme.__hd__.button.colors.defaultBorder};
            cursor: not-allowed;
          }
        `;
      case 'basic-transparent':
        return css`
          color: ${theme.__hd__.button.colors.text.basicTransparent};
          border-color: ${theme.__hd__.button.colors.basicTransparent};
          background: transparent;
          &:hover {
            opacity: 0.4;
          }
          &:focus,
          &:active {
            opacity: 0.7;
          }
          &:disabled {
            opacity: 1;
            color: ${theme.__hd__.button.colors.text.disabledLightText};
            border-color: ${theme.__hd__.button.colors.defaultBorder};
            cursor: not-allowed;
          }
        `;
      case 'filled-primary':
        return genFilledStyles('primary');
      case 'filled-danger':
        return genFilledStyles('danger');
      case 'filled-success':
        return genFilledStyles('success');
      case 'filled-warning':
        return genFilledStyles('warning');
      case 'filled-error':
        return genFilledStyles('error');
      case 'outlined-primary':
        return genOutlinedStyles('primary');
      case 'outlined-danger':
        return genOutlinedStyles('danger');
      case 'outlined-success':
        return genOutlinedStyles('success');
      case 'outlined-warning':
        return genOutlinedStyles('warning');
      case 'outlined-error':
        return genOutlinedStyles('error');
      case 'text-primary':
        return genTextStyles('primary');
      case 'text-danger':
        return genTextStyles('danger');
      case 'text-success':
        return genTextStyles('success');
      case 'text-warning':
        return genTextStyles('warning');
      case 'text-error':
        return genTextStyles('error');
      case 'inline-text-primary':
        return genInlineTextStyles('primary');
      case 'inline-text-danger':
        return genInlineTextStyles('danger');
      case 'inline-text-success':
        return genInlineTextStyles('success');
      case 'inline-text-warning':
        return genInlineTextStyles('warning');
      case 'inline-text-error':
        return genInlineTextStyles('error');
      case 'filled-reversed-primary':
        return genFilledReversedStyles('primary');
      case 'filled-reversed-danger':
        return genFilledReversedStyles('danger');
      case 'filled-reversed-success':
        return genFilledReversedStyles('success');
      case 'filled-reversed-warning':
        return genFilledReversedStyles('warning');
      case 'filled-reversed-error':
        return genFilledReversedStyles('error');
    }
  }};

  ${({ loading, themeVariant }) =>
    loading === true
      ? css`
          pointer-events: none;
          ${genLoadingStyles(themeVariant)}
        `
      : ''};
`;

const IconWrapper = styled.span<{ themePosition: 'left' | 'right' }>`
  margin: 0;
  padding: 0;
  > * {
    vertical-align: top;
  }

  ${({ themePosition, theme }) => {
    switch (themePosition) {
      case 'left':
        return css`
          padding-right: ${theme.__hd__.button.space.iconPadding};
        `;
      case 'right':
        return css`
          padding-left: ${theme.__hd__.button.space.iconPadding};
        `;
    }
  }};
`;

const StyledIconButton = styled.button<{
  themeSize: 'small' | 'medium' | 'large';
}>`
  display: inline-flex;
  margin: 0;
  padding: 0;
  border: none;
  background: transparent;
  cursor: pointer;
  color: inherit;

  &:focus,
  &:active {
    outline: none;
  }

  &:disabled {
    color: ${({ theme }) => theme.__hd__.button.colors.text.disabledText};
    cursor: not-allowed;
  }

  ${({ themeSize, theme }) => {
    switch (themeSize) {
      case 'small':
        return css`
          font-size: ${theme.__hd__.button.fontSizes.small};
        `;
      case 'medium':
        return css`
          font-size: ${theme.__hd__.button.fontSizes.medium};
        `;
      case 'large':
        return css`
          font-size: ${theme.__hd__.button.fontSizes.large};
        `;
    }
  }};
`;

export { IconWrapper, StyledButton, StyledIconButton };
export type { Intent, ThemeVariant };
