import React from 'react';
import { fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Button from '..';

const IconButton = Button.Icon;

describe('rendering', () => {
  it('renders icon', () => {
    const { container } = renderWithTheme(<IconButton icon="heart" />);
    expect(container.querySelectorAll('i')).toHaveLength(1);
  });

  it('renders custom icon as a react element', () => {
    const customIcon = <p>Custom Icon</p>;
    const { getByText } = renderWithTheme(<IconButton icon={customIcon} />);

    expect(getByText('Custom Icon')).toBeInTheDocument();
  });
});

describe('interaction', () => {
  it('allows to click on', () => {
    const onClick = jest.fn();
    const onMouseDown = jest.fn();
    const { getByRole } = renderWithTheme(
      <IconButton icon="heart" onClick={onClick} onMouseDown={onMouseDown} />
    );
    userEvent.click(getByRole('button'));
    expect(onMouseDown).toHaveBeenCalledTimes(1);
    expect(onClick).toHaveBeenCalledTimes(1);
  });

  it('allows to blur', () => {
    const onBlur = jest.fn();
    const { getByRole } = renderWithTheme(
      <IconButton icon="heart" onBlur={onBlur} />
    );
    fireEvent.click(getByRole('button'));
    fireEvent.blur(getByRole('button'));
    expect(onBlur).toHaveBeenCalledTimes(1);
  });

  it('allows to disable', () => {
    const onClick = jest.fn();
    const { getByRole } = renderWithTheme(
      <IconButton icon="heart" disabled onClick={onClick} />
    );

    fireEvent.click(getByRole('button'));

    expect(onClick).toHaveBeenCalledTimes(0);
  });
});

describe('accessibility', () => {
  it('supports ARIA props', () => {
    const { container } = renderWithTheme(
      <IconButton aria-label="Aria label" icon="heart" />
    );

    expect(container.firstChild).toHaveAccessibleName('Aria label');
  });
});
