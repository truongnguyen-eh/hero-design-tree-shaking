import styled, { css } from 'styled-components';
import { Link } from 'react-router-dom';

interface StyledProps {
  themeDisabled: boolean;
  themeIntent:
    | 'primary'
    | 'light-primary'
    | 'danger'
    | 'success'
    | 'warning'
    | 'error'
    | 'subdued-text';
  themeSize: 'small' | 'medium' | 'large' | 'inherit';
}

const styles = css<StyledProps>`
  white-space: nowrap;
  text-decoration: none;
  font-weight: ${({ theme }) => theme.__hd__.button.fontWeights.text};
  margin: 0;
  padding: 0;

  ${({ themeSize, theme }) => {
    switch (themeSize) {
      case 'small':
        return css`
          font-size: ${theme.__hd__.button.fontSizes.small};
          line-height: ${theme.__hd__.button.lineHeights.small};
        `;
      case 'medium':
        return css`
          font-size: ${theme.__hd__.button.fontSizes.medium};
          line-height: ${theme.__hd__.button.lineHeights.medium};
        `;
      case 'large':
        return css`
          font-size: ${theme.__hd__.button.fontSizes.large};
          line-height: ${theme.__hd__.button.lineHeights.large};
        `;
      case 'inherit':
        return css`
          font-size: inherit;
          line-height: inherit;
        `;
    }
  }};

  ${({ themeIntent, theme }) => {
    switch (themeIntent) {
      case 'primary':
        return css`
          color: ${theme.__hd__.button.colors.text.primary};
          &:hover,
          &:focus {
            color: ${theme.__hd__.button.colors.text.hoverPrimary};
          }
        `;
      case 'light-primary':
        return css`
          color: ${theme.__hd__.button.colors.text.lightPrimary};
          &:hover,
          &:focus {
            color: ${theme.__hd__.button.colors.text.lightPrimary};
          }
        `;
      case 'success':
        return css`
          color: ${theme.__hd__.button.colors.text.success};
          &:hover,
          &:focus {
            color: ${theme.__hd__.button.colors.text.hoverSuccess};
          }
        `;
      case 'warning':
        return css`
          color: ${theme.__hd__.button.colors.text.warning};
          &:hover,
          &:focus {
            color: ${theme.__hd__.button.colors.text.hoverWarning};
          }
        `;
      case 'danger':
        return css`
          color: ${theme.__hd__.button.colors.text.danger};
          &:hover,
          &:focus {
            color: ${theme.__hd__.button.colors.text.hoverDanger};
          }
        `;
      case 'error':
        return css`
          color: ${theme.__hd__.button.colors.text.error};
          &:hover,
          &:focus {
            color: ${theme.__hd__.button.colors.text.hoverError};
          }
        `;
      case 'subdued-text':
        return css`
          color: ${theme.__hd__.button.colors.text.linkSubdued};
        `;
    }
  }};

  ${({ themeDisabled, theme }) => {
    switch (themeDisabled) {
      case true:
        return css`
          color: ${theme.__hd__.button.colors.text.disabledText};
          pointer-events: none;
        `;
      case false:
        return css`
          &:hover,
          &:focus {
            text-decoration: underline;
          }
        `;
    }
  }};
`;

const StyledLink = styled.a<StyledProps>`
  ${styles};
`;

const StyledRouterLink = styled(Link)<StyledProps>`
  ${styles};
`;

const StyledIconWrapper = styled.span<{ themePosition: 'left' | 'right' }>`
  margin: 0;
  padding: 0;
  * {
    vertical-align: middle;
  }

  ${({ themePosition, theme }) => {
    switch (themePosition) {
      case 'left':
        return css`
          padding-right: ${theme.__hd__.button.space.iconPadding};
        `;
      case 'right':
        return css`
          padding-left: ${theme.__hd__.button.space.iconPadding};
        `;
    }
  }};
`;

export { StyledLink, StyledRouterLink, StyledIconWrapper };
