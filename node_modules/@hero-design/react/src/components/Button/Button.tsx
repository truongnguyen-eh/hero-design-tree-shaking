import React, { forwardRef } from 'react';
import type {
  MouseEvent,
  FocusEvent,
  ReactElement,
  ReactChild,
  AriaAttributes,
  RefObject,
} from 'react';
import { useCss } from '../../utils/hooks';
import { StyledButton, IconWrapper } from './StyledButton';
import Icon from '../Icon';
import { fromUndefinedable, getOrElse, map, none, some } from '../../fp/Option';
import { pipe } from '../../fp/function';
import type { Intent, ThemeVariant } from './StyledButton';
import type { IconName } from '../Icon';
import type { CommonProps } from '../common';
import type { Option } from '../../fp/Option';

export interface ButtonProps extends CommonProps, AriaAttributes {
  /**
   * Disable state of button.
   */
  disabled?: boolean;
  /**
   * Icon name to render before the text.
   */
  icon?: IconName;
  /**
   * Visual intent color to apply to button. It is required for `filled`, `outlined` and `text` variants.
   */
  intent?: 'primary' | 'danger' | 'success' | 'warning' | 'error';
  /**
   * Loading state of button.
   */
  loading?: boolean;
  /**
   * Set handler to handler `blur` event.
   */
  onBlur?: (e: FocusEvent) => void;
  /**
   * Set the handler to handle `click` event.
   */
  onClick?: (e: MouseEvent) => void;
  /**
   * Ref passing to the button.
   */
  ref?: RefObject<HTMLButtonElement>;
  /**
   * Icon name to render after the text.
   */
  rightIcon?: IconName;
  /**
   * Size of button.
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Button label.
   */
  text: ReactChild;
  /**
   * Specifies the HTML attribute type of button.
   */
  type?: 'submit' | 'reset' | 'button';
  /**
   * Button type.
   */
  variant?:
    | 'basic'
    | 'basic-transparent'
    | 'filled'
    | 'outlined'
    | 'text'
    | 'inline-text'
    | 'filled-reversed';
}

const FILLED_VARIANTS = {
  primary: 'filled-primary',
  success: 'filled-success',
  danger: 'filled-danger',
  warning: 'filled-warning',
  error: 'filled-error',
  black: 'filled-black',
} as const;

const OUTLINED_VARIANTS = {
  primary: 'outlined-primary',
  success: 'outlined-success',
  danger: 'outlined-danger',
  warning: 'outlined-warning',
  error: 'outlined-error',
  black: 'outlined-black',
} as const;

const TEXT_VARIANTS = {
  primary: 'text-primary',
  success: 'text-success',
  danger: 'text-danger',
  warning: 'text-warning',
  error: 'text-error',
  black: 'text-black',
} as const;

const INLINE_TEXT_VARIANTS = {
  primary: 'inline-text-primary',
  success: 'inline-text-success',
  danger: 'inline-text-danger',
  warning: 'inline-text-warning',
  error: 'inline-text-error',
  black: 'inline-text-black',
} as const;

const FILLED_REVERSED_VARIANTS = {
  primary: 'filled-reversed-primary',
  success: 'filled-reversed-success',
  danger: 'filled-reversed-danger',
  warning: 'filled-reversed-warning',
  error: 'filled-reversed-error',
  black: 'filled-reversed-black',
} as const;

export const getThemeVariant = (
  variant:
    | 'basic'
    | 'basic-transparent'
    | 'filled'
    | 'outlined'
    | 'text'
    | 'inline-text'
    | 'filled-reversed',
  intent: Intent
): ThemeVariant => {
  switch (variant) {
    case 'basic':
    case 'basic-transparent':
      return variant;
    case 'filled':
      return FILLED_VARIANTS[intent];
    case 'outlined':
      return OUTLINED_VARIANTS[intent];
    case 'text':
      return TEXT_VARIANTS[intent];
    case 'inline-text':
      return INLINE_TEXT_VARIANTS[intent];
    case 'filled-reversed':
      return FILLED_REVERSED_VARIANTS[intent];
  }
};

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      text,
      icon,
      rightIcon,
      onClick,
      onBlur,
      variant = 'filled',
      intent = 'primary',
      loading,
      disabled,
      size = 'medium',
      type = 'button',
      id,
      className,
      style,
      sx = {},
      'data-test-id': dataTestId,
      ...ariaProps
    }: ButtonProps,
    forwardedRef
  ): ReactElement => {
    const maybeIcon = fromUndefinedable(icon);
    const maybeLoading: Option<IconName> =
      loading === true ? some('loading') : none;

    const mapToLeftIcon = map(
      (ic: IconName): ReactElement => (
        <IconWrapper themePosition="left">
          <Icon icon={loading === true ? 'loading' : ic} spin={loading} />
        </IconWrapper>
      )
    );

    return (
      <StyledButton
        onClick={onClick}
        onBlur={onBlur}
        loading={loading}
        disabled={disabled}
        type={type}
        id={id}
        className={className}
        style={{ ...style, ...useCss(sx) }}
        data-test-id={dataTestId}
        themeSize={size}
        themeVariant={getThemeVariant(variant, intent)}
        ref={forwardedRef}
        {...ariaProps}
      >
        {pipe(
          maybeIcon,
          mapToLeftIcon,
          getOrElse(() =>
            pipe(
              maybeLoading,
              mapToLeftIcon,
              getOrElse(() => null)
            )
          )
        )}
        {text}
        {rightIcon !== undefined && (
          <IconWrapper themePosition="right">
            <Icon icon={rightIcon} />
          </IconWrapper>
        )}
      </StyledButton>
    );
  }
);

Button.displayName = 'Button';

export default Button;
