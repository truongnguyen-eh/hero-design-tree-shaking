import React from 'react';
import type { ReactElement } from 'react';
import type { CommonProps } from '../../common';
import type { InputProps } from '../../Input/Input';
import type { TextAreaProps } from '../../Input/TextArea';
export interface FieldProps extends CommonProps {
    /**
     * Input component to be wrapped.
     */
    children: ReactElement<InputProps | TextAreaProps>;
    /**
     * Validation status of children's value.
     */
    validateStatus?: 'success' | 'warning' | 'error' | 'validating';
}
export declare const getValidateSuffixElement: (children: ReactElement<InputProps>, validateStatus: 'success' | 'warning' | 'error' | 'validating') => React.JSX.Element;
export declare const getValidatedChildren: (children: ReactElement<InputProps | TextAreaProps>, validateStatus?: 'success' | 'warning' | 'error' | 'validating') => React.JSX.Element;
declare const Field: ({ children, validateStatus, id, className, style, sx, "data-test-id": dataTestId, }: FieldProps) => React.JSX.Element;
export default Field;
