/// <reference types="react" />
import { ChartColor } from './constants';
export interface Series<Data> {
    /**
     * Label of series.
     */
    label: string;
    /**
     * Data of series.
     */
    data: Data;
}
export declare type BaseLegendConfig = {
    /**
     * Max number of legend visible to user. Default is 4.
     */
    maxLegend?: number;
    /**
     * Custom text for view more legend.
     */
    viewMoreText?: string;
    /**
     * Choose the display direction for items.
     */
    viewMoreDirection?: 'vertical' | 'horizontal';
};
declare type CheckboxLegendConfig = {
    /**
     * To display legend as checkbox or circle.
     */
    selectable: true;
    /**
     * Selected value of the checkbox group.
     */
    value?: string[];
    /**
     * Change event handler of checkbox group.
     */
    onChange?: (value: string[]) => void;
};
declare type BasicLegendConfig = {
    /**
     * To display legend as checkbox or circle.
     */
    selectable?: false;
};
export declare type LegendConfig = BaseLegendConfig & (BasicLegendConfig | CheckboxLegendConfig);
export declare type BarConfig<Data> = {
    /**
     * Handler for clicking on a bar section
     */
    onClick?: (e: PointerEvent, value: Series<Data> & {
        legend: string;
    }) => void;
    /**
     * Show total badge
     */
    showTotal?: boolean;
    /**
     * Total formatter
     */
    totalFormatter?: (totalValue: number) => string;
    /**
     * Config the bar sizes.
     */
    size?: 'medium' | 'large';
};
export interface YAxisConfig {
    /**
     * Y axis title.
     */
    title?: string;
    /**
     * Max value of y axis.
     */
    maxValue?: number;
    /**
     * Labels of y axis.
     */
    labels?: Array<string>;
    /**
     * step of column.
     */
    step?: number;
}
export interface XAxisConfig {
    /**
     * X axis title.
     */
    title?: string;
    /**
     * Max value of x axis.
     */
    maxValue?: number;
    /**
     * Labels of x axis.
     */
    labels?: Array<string>;
    /**
     * step of column.
     */
    step?: number;
}
export interface TickConfig {
    /**
     * The tick interval across the axis.
     */
    interval: number;
}
export interface NavigationConfig {
    /**
     * Show navigate button.
     */
    visible?: boolean;
    /**
     * Handle navigate button click.
     */
    onNavigate?: (direction: 'next' | 'prev') => void;
    /**
     * Disable the prev or next navigation button.
     */
    disabledButtons?: 'prev' | 'next';
}
export declare type MatchedSegment = Array<{
    label: string;
    legend: string;
}>;
export declare type DataValue = number | undefined;
export interface StyleConfig {
    /**
     * Chart colors config.
     */
    series?: Array<{
        label: string;
        color?: ChartColor;
    }>;
}
export interface ItemConfig<T> {
    /**
     * Mouse over event.
     */
    onMouseOver?: (e: React.MouseEvent<HTMLElement>, data: T) => void;
    /**
     * Mouse out event.
     */
    onMouseOut?: (e: React.MouseEvent<HTMLElement>, data: T) => void;
}
export {};
