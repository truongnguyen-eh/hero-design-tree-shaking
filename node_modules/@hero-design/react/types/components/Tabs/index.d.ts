import React from 'react';
import type { ReactElement, ReactNode } from 'react';
import type { IconName } from '../Icon';
import type { CommonProps } from '../common';
export interface TabsProps extends Omit<CommonProps, 'id'> {
    /**
     * Unique identifier for Tabs container. This will be combined with the id of each Tab child to generate ARIA accessibility attributes.
     */
    id: string;
    onChange: (tabId: string | number) => void;
    /**
     * Whether inactive tab panels should be removed from the DOM and unmounted in React.
     */
    renderActiveTabPanelOnly?: boolean;
    /**
     * Current selected tab id.
     */
    selectedTabId: string | number;
    /**
     * List of Tab to be rendered. Each Tab must have an unquie id.
     */
    tabs: {
        disabled?: boolean;
        icon?: IconName | ReactElement;
        id: string | number;
        panel: ReactNode;
        title: string | ReactElement;
    }[];
    /**
     * Custom text for view more tab
     */
    viewMoreText?: string | ReactElement;
}
export declare const OverflowTabList: ({ tabs, selectedTabId, onChange, id, tabWrapperRef, focusTabIndex, setFocusTabIndex, viewMoreText, tabWidths, }: {
    tabs: TabsProps['tabs'];
    selectedTabId: TabsProps['selectedTabId'];
    onChange: TabsProps['onChange'];
    id: TabsProps['id'];
    tabWrapperRef: React.MutableRefObject<HTMLDivElement | null>;
    focusTabIndex: number;
    setFocusTabIndex: React.Dispatch<React.SetStateAction<number>>;
    viewMoreText: TabsProps['viewMoreText'];
    tabWidths: number[];
}) => React.JSX.Element;
declare const Tabs: {
    ({ renderActiveTabPanelOnly, tabs, selectedTabId, onChange, id, className, style, sx, "data-test-id": dataTestId, viewMoreText, }: TabsProps): ReactElement;
    Sub: ({ onChange, renderActiveTabPanelOnly, selectedTabId, tabs, id, className, style, sx, "data-test-id": dataTestId, viewMoreText, size, }: import("./SubTabs").SubTabsProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
};
export default Tabs;
