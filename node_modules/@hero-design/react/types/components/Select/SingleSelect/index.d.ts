import React from 'react';
import type { ReactElement, ReactNode, CSSProperties, FocusEvent } from 'react';
import type { CommonProps } from '../../common';
import type { IconName } from '../../Icon';
import type { BaseOption, GroupedOption } from '../types';
export interface SelectProps<V extends string | number, T extends BaseOption<V>> extends CommonProps {
    /**
     * HTML ID of an element that should be used as the label (for assistive tech).
     */
    'aria-labelledby'?: string;
    /**
     * Specify the [automated assistance](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) in filling out form field values by the browser.
     */
    autoComplete?: string;
    /**
     * Allow to clear value after selecting an item.
     */
    clearable?: boolean;
    /**
     * Whether the select is disabled.
     */
    disabled?: boolean;
    /**
     * Whether the input is invalid.
     */
    invalid?: boolean;
    /**
     * Loading state of Select, which will render a spinner at bottom of the option list.
     */
    loading?: boolean;
    /**
     * Name of <input> element, is used to refer to the form data for submission.
     */
    name?: string;
    /**
     * Content to render when filtering items returns zero results.
     */
    noResults?: ReactNode;
    /**
     * Blur event handler.
     */
    onBlur?: (e: FocusEvent<HTMLInputElement>) => void;
    /**
     * onChange event handler.
     */
    onChange: (value?: V) => void;
    /**
     * Callback to allow to create new option when option not found based on query (only when the callback is defined).
     */
    onCreateNewOption?: (optionText: string) => void;
    /**
     * Focus event handler.
     */
    onFocus?: (e: FocusEvent<HTMLInputElement>) => void;
    /**
     * Event handler on key down of input.
     */
    onKeyDown?: (e: React.KeyboardEvent) => void;
    /**
     * Event handler on key up of input.
     */
    onKeyUp?: (e: React.KeyboardEvent) => void;
    /**
     * Callback invoked when the query string changes.
     */
    onQueryChange?: (query?: string) => void;
    /**
     * Handle scroll event when scrolling to the bottom of the option list.
     */
    onScrollListToBottom?: () => void;
    /**
     * Additonal inline style for option menu dropdown.
     */
    optionMenuStyle?: CSSProperties;
    /**
     * Customise option renderer.
     */
    optionRenderer?: ({ option, index, }: {
        index: number;
        option: T;
    }) => ReactElement;
    /**
     * Customise option predicater.
     */
    optionPredicate?: (query?: string) => (option: T) => boolean;
    /**
     * An array of (grouped) options to be selected.
     *
     * The generic parameter T should extend BaseOption:
     *
     * type BaseOption = {
     *   disabled?: boolean;
     *   helpText?: string;
     *   text: string;
     *   value: string | number;
     * };
     *
     * type GroupedOption<T> = {
     *   category: string;
     *   options: T[];
     * };
     */
    options: Array<GroupedOption<V, T>> | Array<T>;
    /**
     * Placeholder text in the absence of any value.
     */
    placeholder?: string;
    /**
     * Name of Icon or an Icon element to render on the left side of the input.
     */
    prefix?: IconName | ReactElement;
    /**
     * Query string to filter options. This value is controlled: its state if defined must be managed externally.
     */
    query?: string;
    /**
     * Customise selected option renderer.
     */
    selectedOptionRenderer?: ({ option }: {
        option: T;
    }) => string | ReactElement;
    /**
     * The size of the input box.
     */
    size?: 'small' | 'medium' | 'large';
    /**
     * Current selected value.
     */
    value?: V;
    /**
     * Input ref passing to query input element
     */
    inputRef?: React.Ref<HTMLInputElement>;
}
declare const Select: <V extends string | number, T extends BaseOption<V>>({ options, value, onBlur, onChange, onFocus, query, onQueryChange, onKeyDown, onKeyUp, optionRenderer, optionPredicate, selectedOptionRenderer, noResults, disabled, size, invalid, placeholder, prefix, onScrollListToBottom, loading, name, onCreateNewOption, id, "aria-labelledby": ariaLabelledBy, className, style, sx, autoComplete, optionMenuStyle, clearable, "data-test-id": dataTestId, inputRef, }: SelectProps<V, T>) => ReactElement;
export default Select;
