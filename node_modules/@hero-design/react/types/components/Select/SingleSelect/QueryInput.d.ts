import React from 'react';
import type { UseComboboxReturnValue } from 'downshift';
import type { BaseOption } from '../types';
import type { SelectProps } from '.';
declare type QueryInputComponentProps<V extends string | number, T extends BaseOption<V>> = {
    selectedItem: T | undefined;
} & Pick<UseComboboxReturnValue<T>, 'getInputProps' | 'isOpen'> & Pick<SelectProps<V, T>, 'aria-labelledby' | 'selectedOptionRenderer' | 'id' | 'autoComplete' | 'clearable' | 'query' | 'onQueryChange' | 'value' | 'onChange' | 'disabled' | 'prefix' | 'loading' | 'invalid' | 'placeholder' | 'size' | 'onFocus' | 'onBlur' | 'onKeyDown' | 'onKeyUp' | 'inputRef'>;
declare const QueryInput: <V extends string | number, T extends BaseOption<V>>({ selectedItem, getInputProps, isOpen, selectedOptionRenderer, id, autoComplete, clearable, value, onChange, query, onQueryChange, disabled, prefix, loading, invalid, placeholder, size, onFocus, onBlur, onKeyDown, onKeyUp, inputRef, "aria-labelledby": ariaLabelledBy, }: QueryInputComponentProps<V, T>) => React.JSX.Element;
export default QueryInput;
