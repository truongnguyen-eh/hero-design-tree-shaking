import type { GroupedOption, BaseOption } from './types';
declare const checkAtBottom: (element: HTMLDivElement | null) => boolean | undefined;
declare const getItemOffsetTop: (itemEl: HTMLLIElement | null) => number | undefined;
declare const isGroupedOptions: <V extends string | number, T extends BaseOption<V>>(options: T[] | GroupedOption<V, T>[]) => options is GroupedOption<V, T>[];
declare const mapOptions: <V extends string | number, T extends BaseOption<V>>(options: T[] | GroupedOption<V, T>[]) => GroupedOption<V, T>[];
declare const optionPredicate: <V extends string | number, T extends BaseOption<V>>(query?: string) => (option: T) => boolean;
declare const filterGroupedOptions: <V extends string | number, T extends BaseOption<V>>(predicate: (opt: T) => boolean, groupedOptions: GroupedOption<V, T>[]) => GroupedOption<V, T>[];
declare const getAccumulatedIndex: <V extends string | number, T extends BaseOption<V>>(options: GroupedOption<V, T>[], catIndex: number) => number;
declare const findNonDisabledItemIdx: <V extends string | number, T extends BaseOption<V>>(items: T[], currIdx: number, type: 'prev' | 'next') => number;
export { isGroupedOptions, checkAtBottom, getItemOffsetTop, mapOptions, filterGroupedOptions, optionPredicate, getAccumulatedIndex, findNonDisabledItemIdx, };
