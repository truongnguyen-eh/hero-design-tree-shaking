import React from 'react';
import type { ReactElement, ChangeEvent } from 'react';
import type { IconName } from '../Icon';
import type { CommonProps } from '../common';
export interface TagInputProps extends Omit<CommonProps, 'id'> {
    /**
     * HTML ID of an element that should be used as the label (for assistive tech).
     */
    'aria-labelledby'?: string;
    /**
     * Whether the input is disabled.
     */
    disabled?: boolean;
    /**
     * Id of <input> element.
     */
    id?: string;
    /**
     * Whether the input is invalid
     */
    invalid?: boolean;
    /**
     * Name of <input> element, is used to refer to the form data for submission.
     */
    name?: string;
    /**
     * Change event handler. Use `event.target.value` for new value
     */
    onChange?: (e: ChangeEvent) => void;
    /**
     * Callback invoked when the user clicks the X button on a tag. Receives value of removed tag.
     */
    onRemove?: (tag: {
        text: string | ReactElement;
        value?: string | number;
    }) => void;
    /**
     * Placeholder text in the absence of any value.
     */
    placeholder?: string;
    /**
     * Name of Icon or an Icon element to render on the left side of the input, before the user's cursor.
     */
    prefix?: IconName | ReactElement;
    /**
     * Whether or not Input's value is read only.
     */
    readonly?: boolean;
    /**
     * The size of the input box.
     */
    size?: 'small' | 'medium' | 'large';
    /**
     * Name of Icon or an Icon element to render on the right side of the input.
     */
    suffix?: IconName | ReactElement;
    /**
     * Array of tags to be rendered inside the input.
     */
    tags: {
        text: string | ReactElement;
        value?: string | number;
        removable?: boolean;
    }[];
    /**
     * The input's content value.
     */
    value?: string;
}
declare const TagInput: React.ForwardRefExoticComponent<TagInputProps & React.RefAttributes<HTMLInputElement>>;
export default TagInput;
