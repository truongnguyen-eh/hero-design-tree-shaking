declare type WeekStartDate = 0 | 1 | 2 | 3 | 4 | 5 | 6;
declare const getMonths: () => string[];
declare const getWeekDays: (opts?: {
    weekStartsOn?: WeekStartDate;
}) => string[];
declare const getMonthMatrix: ({ month, year, minDate, maxDate, weekStartsOn, }: {
    maxDate?: Date | undefined;
    minDate?: Date | undefined;
    month: number;
    year: number;
    weekStartsOn?: WeekStartDate | undefined;
}) => {
    date: Date;
    disabled: boolean;
}[][];
declare const getSingleCalendarDayState: ({ dateOfWeek, selectedDate, }: {
    dateOfWeek: {
        date: Date;
        disabled: boolean;
    };
    selectedDate?: Date | undefined;
}) => 'enabled' | 'disabled' | 'selected' | 'today';
declare const getWeekCalendarState: ({ dateOfWeek, selectedDate, tempDate, weekStartsOn, }: {
    dateOfWeek: {
        date: Date;
        disabled: boolean;
    };
    selectedDate?: Date | undefined;
    tempDate?: Date | undefined;
    weekStartsOn?: WeekStartDate | undefined;
}) => 'enabled' | 'disabled' | 'selected' | 'inHoveringWeek';
declare const getWeekState: ({ date, dateOfWeek, weekStartsOn, selected, }: {
    date: Date;
    dateOfWeek: Date;
    weekStartsOn: WeekStartDate;
    selected: boolean;
}) => "selectedWeekDate" | "selectedFirstDateOfWeek" | "selectedLastDateOfWeek" | "inHoveringWeekDate" | "inHoveringFirstDateOfWeek" | "inHoveringLastDateOfWeek" | null;
declare const getWeekCalendarDayState: ({ dateOfWeek, selectedDate, tempDate, weekStartsOn, }: {
    dateOfWeek: {
        date: Date;
        disabled: boolean;
    };
    selectedDate?: Date | undefined;
    tempDate?: Date | undefined;
    weekStartsOn?: WeekStartDate | undefined;
}) => 'enabled' | 'disabled' | 'today' | 'inHoveringWeekDate' | 'selectedWeekDate' | 'selectedFirstDateOfWeek' | 'selectedLastDateOfWeek' | 'inHoveringFirstDateOfWeek' | 'inHoveringLastDateOfWeek';
declare type YearType = {
    text: string;
    value: number;
};
declare const generateYearOptions: ({ maxDate, minDate, }: {
    maxDate: Date;
    minDate: Date;
}) => YearType[];
declare type MonthType = {
    disabled?: boolean;
    text: string;
    value: number;
};
declare const disableMonthOption: ({ monthOpt, minMonth, maxMonth, }: {
    monthOpt: MonthType;
    minMonth: number;
    maxMonth: number;
}) => MonthType;
declare const generateMonthOptions: ({ maxDate, minDate, year, }: {
    maxDate: Date;
    minDate: Date;
    year: number;
}) => MonthType[];
declare const getMonthPickerOptions: ({ maxDate, minDate, year, }: {
    maxDate?: Date | undefined;
    minDate?: Date | undefined;
    year: number;
}) => {
    date: Date;
    disabled: boolean;
    text: string;
}[];
declare const disableMonthsNavigation: (date: Date, minDate: Date, maxDate: Date) => {
    disabledPreviousMonth: boolean;
    disabledNextMonth: boolean;
};
declare const disableMonthRangeNavigation: (date: Date, minDate: Date, maxDate: Date) => {
    disabledPreviousYear: boolean;
    disabledNextYear: boolean;
};
declare const disableYear: (year: number, yearOptions: YearType[]) => boolean;
declare const isDisabledDate: ({ date, startDate, endDate, isSettingStartDate, isSettingEndDate, dateClickCount, }: {
    date: {
        date: Date;
        disabled: boolean;
    };
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    isSettingEndDate: boolean;
    isSettingStartDate: boolean;
    dateClickCount: number;
}) => boolean;
declare const isInHoveringRange: ({ date, startDate, endDate, tempDate, isSettingStartDate, isSettingEndDate, }: {
    date: {
        date: Date;
        disabled: boolean;
    };
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    tempDate?: Date | undefined;
    isSettingEndDate: boolean;
    isSettingStartDate: boolean;
}) => boolean;
declare const getDoubleCalendarDayState: ({ dateOfWeek, isSettingStartDate, isSettingEndDate, dateClickCount, startDate, endDate, tempDate, }: {
    dateClickCount: number;
    dateOfWeek: {
        date: Date;
        disabled: boolean;
    };
    endDate?: Date | undefined;
    isSettingEndDate: boolean;
    isSettingStartDate: boolean;
    startDate?: Date | undefined;
    tempDate?: Date | undefined;
}) => 'enabled' | 'disabled' | 'selectedRangeDate' | 'selectedStartDate' | 'selectedEndDate' | 'today' | 'inRange' | 'inHoveringRange';
declare const getDoubleCalendarMonthState: ({ month, isSettingStartDate, isSettingEndDate, dateClickCount, startDate, endDate, tempDate, }: {
    dateClickCount: number;
    month: {
        date: Date;
        disabled: boolean;
    };
    endDate?: Date | undefined;
    isSettingEndDate: boolean;
    isSettingStartDate: boolean;
    startDate?: Date | undefined;
    tempDate?: Date | undefined;
}) => 'enabled' | 'disabled' | 'selectedRangeDate' | 'selectedStartDate' | 'selectedEndDate' | 'today' | 'inRange' | 'inHoveringRange' | 'outOfTheMonth';
export { getMonths, getMonthMatrix, getSingleCalendarDayState, getDoubleCalendarDayState, generateYearOptions, generateMonthOptions, getMonthPickerOptions, getWeekCalendarDayState, getWeekCalendarState, disableYear, disableMonthsNavigation, disableMonthRangeNavigation, disableMonthOption, getDoubleCalendarMonthState, getWeekDays, getWeekState, isDisabledDate, isInHoveringRange, };
export type { YearType };
