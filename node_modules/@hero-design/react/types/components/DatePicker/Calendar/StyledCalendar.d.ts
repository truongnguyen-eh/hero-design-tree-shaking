export declare type DayState = 'selectedRangeDate' | 'selectedWeekDate' | 'selectedFirstDateOfWeek' | 'selectedLastDateOfWeek' | 'selectedStartDate' | 'selectedEndDate' | 'inRange' | 'inHoveringRange' | 'inHoveringWeekDate' | 'inHoveringFirstDateOfWeek' | 'inHoveringLastDateOfWeek' | 'enabled' | 'disabled' | 'selected' | 'today' | 'dayLabel';
export declare type WeekState = 'disabled' | 'enabled' | 'selected' | 'inHoveringWeek';
declare const Container: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const NavigationWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const MobileRightArrowsDateRangeWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const DesktopRightArrowsDateRangeWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const Navigation: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const DoubleCalendarContainer: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const CalendarContainer: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const CalendarWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const CalendarRow: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const DayWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeState?: DayState | undefined;
}, never>;
declare const Day: import("styled-components").StyledComponent<"span", import("styled-components").DefaultTheme, {
    themeState: DayState;
}, never>;
declare const WeekWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const Week: import("styled-components").StyledComponent<"span", import("styled-components").DefaultTheme, {
    themeState: WeekState;
}, never>;
declare const MonthNavigation: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare type MonthState = 'enabled' | 'disabled' | 'selectedRangeDate' | 'selectedStartDate' | 'selectedEndDate' | 'today' | 'inRange' | 'inHoveringRange' | 'outOfTheMonth' | 'selected';
declare const Month: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeState: MonthState;
}, never>;
declare const MonthGrid: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const MonthWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeState: MonthState;
}, never>;
declare const MonthGridItem: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
export { Container, NavigationWrapper, Navigation, DoubleCalendarContainer, CalendarContainer, CalendarWrapper, CalendarRow, DayWrapper, Day, Week, WeekWrapper, Month, MonthNavigation, MonthGrid, MonthGridItem, DesktopRightArrowsDateRangeWrapper, MobileRightArrowsDateRangeWrapper, MonthWrapper, };
