import React, { ReactElement, ReactNode } from 'react';
import { IconName } from '../../Icon';
import { FilterSize, FilterValue } from '../types';
import { FilterProps } from './Filter';
export declare type RenderProps<T extends FilterValue> = {
    closeDropdown: () => void;
    commit: (v?: Partial<T>) => void;
    commitAll: () => void;
    dirty: boolean;
    reset: (v?: Partial<T>) => void;
    resetAll: () => void;
    size: FilterSize;
};
export interface FilterGroupProps<T extends FilterValue> {
    bottomAddon?: (renderProps: RenderProps<T>) => ReactNode;
    children: ReactElement<FilterProps<T, keyof T>> | ReactElement<FilterProps<T, keyof T>>[];
    icon?: IconName | ReactElement;
    isApplyChangeOnClose?: boolean;
    noCaret?: boolean;
    onClose?: (renderProps: RenderProps<T>) => void;
    text?: string;
    'data-test-id'?: string;
}
declare const Group: {
    <T extends FilterValue>({ text, icon, noCaret, children, onClose, isApplyChangeOnClose, bottomAddon, "data-test-id": dataTestId, }: FilterGroupProps<T>): React.JSX.Element;
    displayName: string;
};
export default Group;
