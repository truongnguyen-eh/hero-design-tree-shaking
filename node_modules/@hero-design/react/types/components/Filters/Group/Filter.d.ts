import React, { ReactElement } from 'react';
import { FilterValue } from '../types';
export declare type RenderProps<T extends FilterValue, K extends keyof T> = {
    commit: (v: T[K]) => void;
    defaultValue?: T[K];
    dirty: boolean;
    onChange: (v: T[K]) => void;
    reset: (v?: T[K]) => void;
    resetAll: () => void;
    value: T[K];
};
export declare type TagProps<T extends FilterValue, K extends keyof T> = {
    commit: (v: T[K]) => void;
    defaultValue?: T[K];
    filterKey: K;
    label?: string | ReactElement;
    value: T[K];
};
export declare type FilterProps<T extends FilterValue, K extends keyof T> = {
    children: (renderProps: RenderProps<T, K>) => ReactElement;
    filterKey: K;
    onTagRemove?: ((renderProps: TagProps<T, K>) => void) | null;
    tagRemovable?: boolean;
    tagValueRenderer?: (renderProps: TagProps<T, K>) => string;
    text?: string;
    tooltip?: {
        content: string | ReactElement;
        placement?: 'top' | 'bottom' | 'left' | 'right';
    };
};
declare const Filter: {
    <T extends FilterValue, K extends keyof T>({ text, tooltip, filterKey, children, tagValueRenderer, onTagRemove, tagRemovable, }: FilterProps<T, K>): React.JSX.Element;
    displayName: string;
};
export default Filter;
