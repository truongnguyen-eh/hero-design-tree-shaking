import React, { ReactNode, ReactElement } from 'react';
import { CommonProps } from '../common';
import { FilterSize, FilterValue } from './types';
import { FilterProps } from './Filter';
interface RenderProps {
    commitAll: () => void;
    dirty: boolean;
    resetAll: () => void;
    size: FilterSize;
}
export interface FiltersProps<T extends FilterValue> extends CommonProps {
    children: ReactElement<FilterProps<T, keyof T>> | ReactElement<FilterProps<T, keyof T>>[];
    defaultValue?: T;
    leftAddon?: (renderProps: RenderProps) => ReactNode;
    onChange: (value: FilterValue) => void;
    rightAddon?: (renderProps: RenderProps) => ReactNode;
    controlled?: boolean;
    value: T;
    /**
     * Filter value that hasn't been committed yet
     */
    draftValue?: T;
    /**
     * Function to call when draft filter value changes
     */
    onDraftValueChange?: (value: T) => void;
    /**
     * Hide selected tags
     * */
    noSelectedTags?: boolean;
    /**
     * Size of Filter components
     * */
    size?: 'small' | 'medium';
}
declare const Filters: <T extends FilterValue>({ id, className, style, sx, "data-test-id": dataTestId, children, leftAddon, rightAddon, value, onChange, defaultValue, draftValue, onDraftValueChange, noSelectedTags, size, }: FiltersProps<T>) => React.JSX.Element;
export default Filters;
