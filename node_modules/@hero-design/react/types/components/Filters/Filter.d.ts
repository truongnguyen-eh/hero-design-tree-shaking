import React, { ReactElement } from 'react';
import { IconName } from '../Icon';
import { FilterSize, FilterValue } from './types';
export declare type RenderProps<T extends FilterValue, K extends keyof T> = {
    closeDropdown: () => void;
    commit: (v: T[K]) => void;
    defaultValue?: T[K];
    dirty: boolean;
    onChange: (v: T[K]) => void;
    reset: (v?: T[K]) => void;
    resetAll: () => void;
    value: T[K];
    size: FilterSize;
};
export declare type TagProps<T extends FilterValue, K extends keyof T> = {
    commit: (v: T[K]) => void;
    defaultValue?: T[K];
    filterKey: K;
    label?: string | ReactElement;
    value: T[K];
    size: FilterSize;
};
export declare type FilterProps<T extends FilterValue, K extends keyof T> = {
    children: (renderProps: RenderProps<T, K>) => ReactElement;
    filterKey: K;
    icon?: IconName | ReactElement;
    isApplyChangeOnClose?: boolean;
    noCaret?: boolean;
    noDropdown?: boolean;
    onOpen?: (renderProps: RenderProps<T, K>) => void;
    onClose?: (renderProps: RenderProps<T, K>) => void;
    onTagRemove?: ((renderProps: TagProps<T, K>) => void) | null;
    tagValueRenderer?: (renderProps: TagProps<T, K>) => string;
    text?: string;
};
declare const Filter: {
    <T extends FilterValue, K extends keyof T>({ text, icon, noCaret, noDropdown, filterKey, children, onOpen, onClose, tagValueRenderer, onTagRemove, isApplyChangeOnClose, }: FilterProps<T, K>): React.JSX.Element;
    displayName: string;
};
export default Filter;
