import React, { RefObject, ReactNode } from 'react';
import { FilterSize, FilterValue } from './types';
export declare type FiltersContextType = {
    defaultValue?: FilterValue;
    onChange: (value: FilterValue) => void;
    onValueStateChange: (value: FilterValue) => void;
    selectedTagsRef: RefObject<HTMLElement>;
    value: FilterValue;
    valueState: FilterValue;
    size: FilterSize;
};
declare const FiltersContext: React.Context<FiltersContextType>;
export declare const useFilterContext: <T extends FilterValue, K extends keyof T>(key: K) => {
    valueForKey: T[K];
    onChangeForKey: (newValue: T[K]) => void;
    resetForKey: (resetValue?: T[K] | undefined) => void;
    valueStateForKey: T[K];
    onValueStateChangeForKey: (newValue: T[K]) => void;
    defaultValueForKey: T[K];
    size: FilterSize;
};
export declare const useFiltersContext: () => {
    resetAll: () => void;
    commitAll: () => void;
    dirty: boolean;
    value: FilterValue;
    defaultValue: FilterValue | undefined;
    onChange: (value: FilterValue) => void;
    valueState: FilterValue;
    onValueStateChange: (value: FilterValue) => void;
    size: FilterSize;
};
export declare const FiltersProvider: ({ children, selectedTagsRef, value, onChange, defaultValue, valueState, onValueStateChange, size, }: FiltersContextType & {
    children: ReactNode;
}) => React.JSX.Element;
export default FiltersContext;
