/// <reference types="react" />
import { ProgressIntent } from './types';
import { ThemeScales } from '../common';
declare const Wrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeSize: 'small' | 'medium';
    themeVariant: 'horizontal' | 'vertical';
}, never>;
declare const Background: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeFullWidth: boolean;
    themeSize: 'small' | 'medium';
    themeVariant: 'horizontal' | 'vertical';
}, never>;
declare const ProgressPercentage: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeIntent: ProgressIntent;
    themeSize: 'small' | 'medium';
    themeVariant: 'horizontal' | 'vertical';
    themeValue: number;
}, never>;
declare const Info: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeVariant: 'horizontal' | 'vertical';
    themeValue: number;
}, never>;
declare const MarkerTooltip: import("styled-components").StyledComponent<({ content, placement: placementFromProps, target, interactive, interactiveTimeout, id, className, style, withPortal, sx, "data-test-id": dataTestId, open: controlledOpen, visible, variant, delay, }: import("../Tooltip").TooltipProps) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>, import("styled-components").DefaultTheme, {
    themeVariant: 'horizontal' | 'vertical';
    themeValue: number;
}, never>;
declare const Marker: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeSize: 'small' | 'medium';
    themeVariant: 'horizontal' | 'vertical';
    themeIntent: ThemeScales['colors'];
}, never>;
declare const AbsoluteMarker: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    themeSize: 'small' | 'medium';
    themeVariant: 'horizontal' | 'vertical';
    themeIntent: ThemeScales['colors'];
} & {
    themeValue: number;
}, never>;
export { Wrapper, Background, ProgressPercentage, Info, Marker, MarkerTooltip, AbsoluteMarker, };
