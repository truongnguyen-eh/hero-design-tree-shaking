import React from 'react';
import type { MouseEvent, FocusEvent, ReactChild, AriaAttributes, RefObject } from 'react';
import type { Intent, ThemeVariant } from './StyledButton';
import type { IconName } from '../Icon';
import type { CommonProps } from '../common';
export interface ButtonProps extends CommonProps, AriaAttributes {
    /**
     * Disable state of button.
     */
    disabled?: boolean;
    /**
     * Icon name to render before the text.
     */
    icon?: IconName;
    /**
     * Visual intent color to apply to button. It is required for `filled`, `outlined` and `text` variants.
     */
    intent?: 'primary' | 'danger' | 'success' | 'warning' | 'error';
    /**
     * Loading state of button.
     */
    loading?: boolean;
    /**
     * Set handler to handler `blur` event.
     */
    onBlur?: (e: FocusEvent) => void;
    /**
     * Set the handler to handle `click` event.
     */
    onClick?: (e: MouseEvent) => void;
    /**
     * Ref passing to the button.
     */
    ref?: RefObject<HTMLButtonElement>;
    /**
     * Icon name to render after the text.
     */
    rightIcon?: IconName;
    /**
     * Size of button.
     */
    size?: 'small' | 'medium' | 'large';
    /**
     * Button label.
     */
    text: ReactChild;
    /**
     * Specifies the HTML attribute type of button.
     */
    type?: 'submit' | 'reset' | 'button';
    /**
     * Button type.
     */
    variant?: 'basic' | 'basic-transparent' | 'filled' | 'outlined' | 'text' | 'inline-text' | 'filled-reversed';
}
export declare const getThemeVariant: (variant: 'basic' | 'basic-transparent' | 'filled' | 'outlined' | 'text' | 'inline-text' | 'filled-reversed', intent: Intent) => ThemeVariant;
declare const Button: React.ForwardRefExoticComponent<Omit<ButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
export default Button;
