import React from 'react';
import type { ReactElement } from 'react';
import type { ButtonProps } from '../../Button/Button';
import type { CommonProps } from '../../common';
import type { FilterProps } from './Filter';
import type { FilterValues } from './types';
export interface FiltersProps<T extends FilterValues> extends CommonProps {
    /**
     * Props will be passed to the apply button, if this is undefined, the apply button won't be rendered
     */
    applyButtonProps?: ButtonProps;
    /**
     * List of filters
     */
    children: ReactElement<FilterProps<T, keyof T>> | ReactElement<FilterProps<T, keyof T>>[];
    /**
     * Props will be passed to the clear button, if this is undefined or clearable prop of Filter component is set to false, the clear button won't be rendered
     */
    clearButtonProps?: ButtonProps;
    /**
     * Function to update filter value
     */
    onChange: (value: T) => void;
    /**
     * Function to call when reset filter state
     */
    onReset?: () => void;
    /**
     * Function to call when saving filter state
     */
    onSave?: (value: T) => void;
    /**
     * Filter value, each filter in children will using this value to extract its own value by key
     *
     * PossibleFilterValue is union of all possible value for all of the filter type
     */
    value: T;
}
declare const Filters: {
    <T extends FilterValues>({ value, onChange, onSave, onReset, applyButtonProps, clearButtonProps, children, id, className, style, sx, "data-test-id": dataTestId, }: FiltersProps<T>): React.JSX.Element;
    displayName: string;
};
export default Filters;
