import type { FilterValues } from './types';
export declare type CacheProvider<T> = {
    load: () => Promise<T | null>;
    save: (value: T) => Promise<void>;
};
export declare const getLSCacheProvider: <T>(cacheKey: string) => CacheProvider<T>;
declare type UseFiltersStateInput<T extends FilterValues> = {
    cacheOnChange?: boolean;
    cacheProvider?: CacheProvider<T>;
    initialValues: T;
};
declare type UseFiltersStateOutput<T extends FilterValues> = {
    cacheValues: () => void;
    filterValues: T;
    loadingCache: boolean;
    resetCache: () => void;
    resetFilters: () => void;
    setFilterValues: (newFilterValues: T) => void;
};
declare const useFiltersState: <T extends FilterValues>({ initialValues, cacheProvider, cacheOnChange, }: UseFiltersStateInput<T>) => UseFiltersStateOutput<T>;
export default useFiltersState;
