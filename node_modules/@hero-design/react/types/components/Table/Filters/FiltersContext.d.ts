import React from 'react';
import type { RefObject, ReactNode } from 'react';
import type { ButtonProps } from '../../Button/Button';
import type { FilterValues } from './types';
export declare type FiltersContextType = {
    applyButtonProps?: ButtonProps;
    clearButtonProps?: ButtonProps;
    isGrouped: boolean;
    onSave?: (values: FilterValues) => void;
    onValuesChange: (values: FilterValues) => void;
    selectedTagsRef: RefObject<HTMLElement>;
    values: FilterValues;
};
declare const FiltersContext: React.Context<FiltersContextType>;
export declare const FiltersProvider: <T extends FilterValues>({ value, children, }: {
    children: ReactNode;
    value: Omit<FiltersContextType, "onValuesChange" | "onSave"> & {
        onSave?: ((v: T) => void) | undefined;
        onValuesChange: (v: T) => void;
    };
}) => React.JSX.Element;
export declare const useFilterState: <T extends FilterValues, K extends keyof T>(key: K) => readonly [T[K], (newValue: T[K]) => void, (newValue: T[K]) => void];
export declare const useChangeGroupFilter: <T extends FilterValues, K extends keyof T>(keys: K[]) => readonly [(newValues: T[K][]) => void];
export declare const useDirtyCheck: <T extends FilterValues, K extends keyof T>(key: K) => boolean;
export declare const useGroupDirtyCheck: <T extends FilterValues, K extends keyof T>(keys: K[]) => boolean;
export default FiltersContext;
