import type { IdType } from 'react-table';
import type { Key, ReactElement } from 'react';
import type { CommonProps } from '../../common';
import type { IconName } from '../../Icon';
interface BulkActionsProps<D extends Record<string, unknown>> extends CommonProps {
    /**
     * List of actions.
     * It's recommended that each action MUST have a key. Otherwise, React defaults to using index as key, which is an anti-pattern in React.
     */
    actions: {
        divider?: 'before' | 'after';
        icon?: IconName;
        intent?: 'primary' | 'danger' | 'success' | 'warning' | 'error';
        key?: Key;
        onClick: (selectedData: D[]) => void;
        text: string;
        variant?: 'basic' | 'basic-transparent' | 'filled' | 'outlined' | 'text' | 'filled-reversed';
    }[];
    /**
     * Table data
     */
    data: D[];
    /**
     * Table selected rows
     */
    selectedRows: Record<IdType<D>, boolean>;
    /**
     * This function to help us detect unique rows and also how it constructs each row's underlying id property.
     */
    rowIdExtractor?: (row: D, index: number) => string;
}
declare const BulkActions: <D extends Record<string, unknown>>({ data, selectedRows, actions, id, className, style, sx, rowIdExtractor, "data-test-id": dataTestId, }: BulkActionsProps<D>) => ReactElement;
export default BulkActions;
