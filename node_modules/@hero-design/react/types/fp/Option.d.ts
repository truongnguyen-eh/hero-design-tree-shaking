import type { Lazy } from './Lazy';
export interface None {
    readonly tag: 'None';
}
export interface Some<A> {
    readonly tag: 'Some';
    readonly value: A;
}
export declare type Option<A> = None | Some<A>;
export declare const none: Option<never>;
export declare const some: <A>(a: A) => Option<A>;
export declare const isSome: <A>(ma: Option<A>) => ma is Some<A>;
export declare const isNone: <A>(ma: Option<A>) => ma is None;
export declare function fromUndefinedable<A>(a: A): Option<NonNullable<A>>;
export declare function fromNullable<A>(a: A): Option<NonNullable<A>>;
export declare function fromNillable<A>(a: A): Option<NonNullable<A>>;
export declare function toNullable<A>(ma: Option<A>): A | null;
export declare function toUndefinedable<A>(ma: Option<A>): A | undefined;
export declare const map: <A, B>(f: (a: A) => B) => (ma: Option<A>) => Option<B>;
export declare const flatMap: <A, B>(f: (a: A) => Option<B>) => (ma: Option<A>) => Option<B>;
export declare const getOrElse: <A>(onNone: Lazy<A>) => <B>(mb: Option<B>) => A | B;
