import { useLayoutEffect } from 'react';
import type { RefObject, SetStateAction } from 'react';
import type { SxObject } from '../components/common';
declare type Dimensions = {
    clientWidth: number;
    height: number;
    scrollWidth: number;
    width: number;
};
declare const useResizeObserver: (resizeCallback: (dimensions: Dimensions) => void, refElement: HTMLElement | null) => void;
declare const useHover: (ref: RefObject<HTMLElement>) => boolean;
declare const useMediaQuery: (query: string) => boolean;
declare const useSizeMediaQuery: () => 'small' | 'medium' | 'large' | 'xlarge';
declare const useDeprecation: (message: string, cond?: boolean) => void;
declare const useCss: (sx: SxObject) => import("react").CSSProperties;
declare const useIsomorphicLayoutEffect: typeof useLayoutEffect;
declare function useEventListener<K extends keyof MediaQueryListEventMap>(eventName: K, handler: (event: MediaQueryListEventMap[K]) => void, element: RefObject<MediaQueryList>, options?: boolean | AddEventListenerOptions): void;
declare function useEventListener<K extends keyof WindowEventMap>(eventName: K, handler: (event: WindowEventMap[K]) => void, element?: undefined, options?: boolean | AddEventListenerOptions): void;
declare function useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = HTMLDivElement>(eventName: K, handler: (event: HTMLElementEventMap[K]) => void, element: RefObject<T>, options?: boolean | AddEventListenerOptions): void;
declare function useEventListener<K extends keyof DocumentEventMap>(eventName: K, handler: (event: DocumentEventMap[K]) => void, element: RefObject<Document>, options?: boolean | AddEventListenerOptions): void;
declare type Handler = (event: MouseEvent) => void;
export declare function useOnClickOutside<T extends HTMLElement = HTMLElement>(ref: RefObject<T>, handler: Handler, mouseEvent?: 'mousedown' | 'mouseup'): void;
interface UseControllableStateProps<T> {
    value?: T;
    defaultValue?: T;
    onChange?: (value: T) => void;
}
declare const useControllableState: <T>({ defaultValue, value: controlledValue, onChange: onControlledChange, }: UseControllableStateProps<T>) => [T, import("react").Dispatch<SetStateAction<T>>];
declare const useBoolean: (initialValue?: boolean) => readonly [boolean, {
    on: () => void;
    off: () => void;
    toggle: () => void;
}];
export { useResizeObserver, useHover, useMediaQuery, useDeprecation, useCss, useIsomorphicLayoutEffect, useEventListener, useSizeMediaQuery, useControllableState, useBoolean, };
