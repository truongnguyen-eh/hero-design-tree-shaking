import commonjs from '@rollup/plugin-commonjs';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import { babel } from '@rollup/plugin-babel';
import typescript from '@rollup/plugin-typescript';
import postcss from 'rollup-plugin-postcss';
import copy from 'rollup-plugin-copy';
import svgr from '@svgr/rollup';
import pkg from './package.json';
import glob from 'glob';
import { fileURLToPath } from 'node:url';
import { visualizer } from 'rollup-plugin-visualizer';

const extensions = ['.js', '.jsx', '.ts', '.tsx'];

const generateBuildStats = process.env.GENERATE_BUILD_STATS === 'true';
const bundleTemplate = process.env.BUNDLE_TEMPLATE || 'treemap';
const fileName =
  process.env.FILE_NAME || `stats/${pkg.version}/react-stats.html`;

export default [
  {
    input: 'src/index.tsx',
    output: [
      {
        file: pkg.main,
        format: 'cjs',
      },
      {
        file: pkg.module,
        format: 'esm',
      },
    ],
    external: ['styled-components', 'react-router-dom', 'react', 'react-dom'],
    plugins: [
      svgr({
        typescript: true,
        svgoConfig: {
          plugins: [
            {
              name: 'preset-default',
              params: {
                overrides: {
                  removeViewBox: false,
                },
              },
            },
            'prefixIds',
          ],
        },
      }),
      postcss({
        extensions: ['.css'],
        extract: 'styles/index.css',
      }),
      nodeResolve({ extensions }),
      commonjs(),
      typescript(),
      babel({ extensions, babelHelpers: 'bundled' }),
      copy({
        targets: [
          { src: 'src/components/Icon/fonts', dest: 'es/styles' },
          { src: 'src/components/Icon/fonts', dest: 'lib/styles' },
        ],
      }),
      ...(generateBuildStats
        ? [
            visualizer({
              filename: fileName,
              template: bundleTemplate,
            }),
          ]
        : []),
    ],
  },
  {
    input: Object.fromEntries(
      glob.sync('src/locales/*.ts').map((file) => [
        // This remove `src/` as well as the file extension from each
        // file, so e.g. src/nested/foo.js becomes locale/foo
        `locale/${file.split('/').pop().split('.')[0]}`,
        // This expands the relative paths to absolute paths, so e.g.
        // src/nested/foo becomes /project/src/nested/foo.js
        fileURLToPath(new URL(file, import.meta.url)),
      ])
    ),
    output: {
      dir: '.',
    },
    plugins: [
      typescript({
        declaration: false,
        exclude: ['src/**/*.spec.ts', 'src/**/*.spec.tsx'],
      }),
      copy({
        targets: [{ src: 'types/locales/*.ts', dest: 'locale' }],
      }),
    ],
  },
];
