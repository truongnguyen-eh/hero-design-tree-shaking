import hex2Rgb from 'hex-rgb';

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

const pattern$8 = /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\b$/;
var hexRe$1 = new RegExp(pattern$8, 'i');

const float$1 = '-?\\d*(?:\\.\\d+)';

const number$1 = `(${float$1}?)`;
const percentage$1 = `(${float$1}?%)`;
const numberOrPercentage$1 = `(${float$1}?%?)`;

const pattern$1$1 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*,
    \\s*${percentage$1}\\s*,
    \\s*${percentage$1}\\s*
    (?:,\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var hsl3Re$1 = new RegExp(pattern$1$1);

const pattern$2$1 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*
    \\s+${percentage$1}
    \\s+${percentage$1}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var hsl4Re$1 = new RegExp(pattern$2$1);

const pattern$3$1 = `^
  rgba?\\(
    \\s*${number$1}\\s*,
    \\s*${number$1}\\s*,
    \\s*${number$1}\\s*
    (?:,\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var rgb3NumberRe$1 = new RegExp(pattern$3$1);

const pattern$4$1 = `^
  rgba?\\(
    \\s*${percentage$1}\\s*,
    \\s*${percentage$1}\\s*,
    \\s*${percentage$1}\\s*
    (?:,\\s*${numberOrPercentage$1}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var rgb3PercentageRe$1 = new RegExp(pattern$4$1);

const pattern$5$1 = `^
  rgba?\\(
    \\s*${number$1}
    \\s+${number$1}
    \\s+${number$1}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage$1}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');

var rgb4NumberRe$1 = new RegExp(pattern$5$1);

const pattern$6$1 = `^
  rgba?\\(
    \\s*${percentage$1}
    \\s+${percentage$1}
    \\s+${percentage$1}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage$1}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');

var rgb4PercentageRe$1 = new RegExp(pattern$6$1);

const pattern$7$1 = /^transparent$/;
var transparentRe$1 = new RegExp(pattern$7$1, 'i');

const clamp$3 = (num, min, max) => Math.min(Math.max(min, num), max);

/* 500 => 255, -10 => 0, 128 => 128 */
const parseRGB$1 = (num) => {
  let n = num;
  if (typeof n !== 'number') n = n.endsWith('%') ? (parseFloat(n) * 255) / 100 : parseFloat(n);
  return clamp$3(Math.round(n), 0, 255);
};

/* 200 => 100, -100 => 0, 50 => 50 */
const parsePercentage$1 = (percentage) => clamp$3(parseFloat(percentage), 0, 100);

/* '50%' => 5.0, 200 => 1, -10 => 0 */
function parseAlpha$1(alpha) {
  let a = alpha;
  if (typeof a !== 'number') a = a.endsWith('%') ? parseFloat(a) / 100 : parseFloat(a);
  return clamp$3(a, 0, 1);
}

function getHEX$1(hex) {
  const [r, g, b, a] = hex2Rgb(hex, { format: 'array' });
  return getRGB$1([null, ...[r, g, b, a]]);
}

function getHSL$1([, h, s, l, a = 1]) {
  let hh = h;
  if (hh.endsWith('turn')) {
    hh = (parseFloat(hh) * 360) / 1;
  } else if (hh.endsWith('rad')) {
    hh = Math.round((parseFloat(hh) * 180) / Math.PI);
  } else {
    hh = parseFloat(hh);
  }
  return {
    type: 'hsl',
    values: [hh, parsePercentage$1(s), parsePercentage$1(l)],
    alpha: parseAlpha$1(a === null ? 1 : a)
  };
}

function getRGB$1([, r, g, b, a = 1]) {
  return {
    type: 'rgb',
    values: [r, g, b].map(parseRGB$1),
    alpha: parseAlpha$1(a === null ? 1 : a)
  };
}

/**
 * parse-css-color
 * @version v0.1.2
 * @link http://github.com/noeldelgado/parse-css-color/
 * @license MIT
 */

const parseCSSColor$1 = (str) => {
  if (typeof str !== 'string') return null;

  const hex = hexRe$1.exec(str);
  if (hex) return getHEX$1(hex[0]);

  const hsl = hsl4Re$1.exec(str) || hsl3Re$1.exec(str);
  if (hsl) return getHSL$1(hsl);

  const rgb =
    rgb4NumberRe$1.exec(str) ||
    rgb4PercentageRe$1.exec(str) ||
    rgb3NumberRe$1.exec(str) ||
    rgb3PercentageRe$1.exec(str);
  if (rgb) return getRGB$1(rgb);

  if (transparentRe$1.exec(str)) return getRGB$1([null, 0, 0, 0, 0]);

  const cn = colorName[str.toLowerCase()];
  if (cn) return getRGB$1([null, cn[0], cn[1], cn[2], 1]);

  return null;
};

function hsl2rgb(hsl) {
  var h = hsl[0] / 360,
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      t1, t2, t3, rgb, val;

  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5)
    t2 = l * (1 + s);
  else
    t2 = l + s - l * s;
  t1 = 2 * l - t2;

  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * - (i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;

    if (6 * t3 < 1)
      val = t1 + (t2 - t1) * 6 * t3;
    else if (2 * t3 < 1)
      val = t2;
    else if (3 * t3 < 2)
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    else
      val = t1;

    rgb[i] = val * 255;
  }

  return rgb;
}

var hsl2rgb_1 = hsl2rgb;

function clamp$2(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

var clamp_1 = clamp$2;

var clamp$1 = clamp_1;

function componentToHex(c) {
  var value = Math.round(clamp$1(c, 0, 255));
  var hex   = value.toString(16);

  return hex.length == 1 ? "0" + hex : hex;
}

function rgb2hex(rgb) {
  var alpha = rgb.length === 4 ? componentToHex(rgb[3] * 255) : "";

  return "#" + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]) + alpha;
}

var rgb2hex_1 = rgb2hex;

function rgb2hsl(rgb) {
  var r = rgb[0]/255,
      g = rgb[1]/255,
      b = rgb[2]/255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, l;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g)/ delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  l = (min + max) / 2;

  if (max == min)
    s = 0;
  else if (l <= 0.5)
    s = delta / (max + min);
  else
    s = delta / (2 - max - min);

  return [h, s * 100, l * 100];
}

var rgb2hsl_1 = rgb2hsl;

/**
 * mix-css-color
 * @version v0.2.0
 * @link http://github.com/noeldelgado/mix-css-color/
 * @license MIT
 */

function parseColor(color) {
  const res = parseCSSColor$1(color);
  if (res === null) return null;
  if (res.type === 'hsl') res.values = hsl2rgb_1(res.values);
  return res;
}

/**
 * Mix two colors together in variable proportion. Opacity is included in the calculations.
 * Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein
 * http://sass-lang.com
 * @see https://github.com/less/less.js/blob/cae5021358a5fca932c32ed071f652403d07def8/lib/less/functions/color.js#L302
 */
function mix(color1, color2, percentage = 50) {
  const c1 = parseColor(color1);
  const c2 = parseColor(color2);

  if (!c1 || !c2) return null;

  const p = Math.min(Math.max(0, percentage), 100) / 100.0;
  const w = p * 2 - 1;
  const a = c1.alpha - c2.alpha;
  const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
  const w2 = 1 - w1;
  const [r, g, b] = c1.values.map((c, i) => Math.round(c1.values[i] * w1 + c2.values[i] * w2));
  const alpha = parseFloat((c1.alpha * p + c2.alpha * (1 - p)).toFixed(8));

  return {
    hex: rgb2hex_1([r, g, b]),
    hexa: rgb2hex_1([r, g, b, alpha]),
    rgba: [r, g, b, alpha],
    hsla: [...rgb2hsl_1([r, g, b]).map(Math.round), alpha]
  };
}

const pattern = /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\b$/;
var hexRe = new RegExp(pattern, 'i');

const float = '-?\\d*(?:\\.\\d+)';

const number = `(${float}?)`;
const percentage = `(${float}?%)`;
const numberOrPercentage = `(${float}?%?)`;

const pattern$1 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*,
    \\s*${percentage}\\s*,
    \\s*${percentage}\\s*
    (?:,\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var hsl3Re = new RegExp(pattern$1);

const pattern$2 = `^
  hsla?\\(
    \\s*(-?\\d*(?:\\.\\d+)?(?:deg|rad|turn)?)\\s*
    \\s+${percentage}
    \\s+${percentage}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var hsl4Re = new RegExp(pattern$2);

const pattern$3 = `^
  rgba?\\(
    \\s*${number}\\s*,
    \\s*${number}\\s*,
    \\s*${number}\\s*
    (?:,\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var rgb3NumberRe = new RegExp(pattern$3);

const pattern$4 = `^
  rgba?\\(
    \\s*${percentage}\\s*,
    \\s*${percentage}\\s*,
    \\s*${percentage}\\s*
    (?:,\\s*${numberOrPercentage}\\s*)?
  \\)
  $
`.replace(/\n|\s/g, '');

var rgb3PercentageRe = new RegExp(pattern$4);

const pattern$5 = `^
  rgba?\\(
    \\s*${number}
    \\s+${number}
    \\s+${number}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');

var rgb4NumberRe = new RegExp(pattern$5);

const pattern$6 = `^
  rgba?\\(
    \\s*${percentage}
    \\s+${percentage}
    \\s+${percentage}
    \\s*(?:\\s*\\/\\s*${numberOrPercentage}\\s*)?
  \\)
$
`.replace(/\n|\s/g, '');

var rgb4PercentageRe = new RegExp(pattern$6);

const pattern$7 = /^transparent$/;
var transparentRe = new RegExp(pattern$7, 'i');

const clamp = (num, min, max) => Math.min(Math.max(min, num), max);

/* 500 => 255, -10 => 0, 128 => 128 */
const parseRGB = (num) => {
  let n = num;
  if (typeof n !== 'number') n = n.endsWith('%') ? (parseFloat(n) * 255) / 100 : parseFloat(n);
  return clamp(Math.round(n), 0, 255);
};

/* 200 => 100, -100 => 0, 50 => 50 */
const parsePercentage = (percentage) => clamp(parseFloat(percentage), 0, 100);

/* '50%' => 5.0, 200 => 1, -10 => 0 */
function parseAlpha(alpha) {
  let a = alpha;
  if (typeof a !== 'number') a = a.endsWith('%') ? parseFloat(a) / 100 : parseFloat(a);
  return clamp(a, 0, 1);
}

function getHEX(hex) {
  const [r, g, b, a] = hex2Rgb(hex, { format: 'array' });
  return getRGB([null, ...[r, g, b, a]]);
}

function getHSL([, h, s, l, a = 1]) {
  let hh = h;
  if (hh.endsWith('turn')) {
    hh = (parseFloat(hh) * 360) / 1;
  } else if (hh.endsWith('rad')) {
    hh = Math.round((parseFloat(hh) * 180) / Math.PI);
  } else {
    hh = parseFloat(hh);
  }
  return {
    type: 'hsl',
    values: [hh, parsePercentage(s), parsePercentage(l)],
    alpha: parseAlpha(a === null ? 1 : a)
  };
}

function getRGB([, r, g, b, a = 1]) {
  return {
    type: 'rgb',
    values: [r, g, b].map(parseRGB),
    alpha: parseAlpha(a === null ? 1 : a)
  };
}

/**
 * parse-css-color
 * @version v0.2.0
 * @link http://github.com/noeldelgado/parse-css-color/
 * @license MIT
 */

const parseCSSColor = (str) => {
  if (typeof str !== 'string') return null;

  const hex = hexRe.exec(str);
  if (hex) return getHEX(hex[0]);

  const hsl = hsl4Re.exec(str) || hsl3Re.exec(str);
  if (hsl) return getHSL(hsl);

  const rgb =
    rgb4NumberRe.exec(str) ||
    rgb4PercentageRe.exec(str) ||
    rgb3NumberRe.exec(str) ||
    rgb3PercentageRe.exec(str);
  if (rgb) return getRGB(rgb);

  if (transparentRe.exec(str)) return getRGB([null, 0, 0, 0, 0]);

  const cn = colorName[str.toLowerCase()];
  if (cn) return getRGB([null, cn[0], cn[1], cn[2], 1]);

  return null;
};

/**
 * values.js - Get the tints and shades of a color
 * @version v2.1.1
 * @link http://noeldelgado.github.io/values.js/
 * @license MIT
 */
const defaultNumberParam = (v, d) => (v === null || isNaN(v) || typeof v === 'string' ? d : v);
class Values {
  constructor(color = '#000', type = 'base', weight = 0) {
    [this.rgb, this.alpha, this.type, this.weight] = [[0, 0, 0], 1, type, weight];
    const c = color === null ? '#000' : color;
    if (typeof c !== 'string') throw new TypeError(`Input should be a string: ${c}`);
    const parsed = parseCSSColor(c);
    if (!parsed) throw new Error(`Unable to parse color from string: ${c}`);
    return this[`_setFrom${parsed.type.toUpperCase()}`]([...parsed.values, parsed.alpha]);
  }
  get hex() {
    return this.hexString().replace(/^#/, '');
  }
  setColor(color) {
    const parsed = parseCSSColor(color);
    if (!parsed) return null;
    return this[`_setFrom${parsed.type.toUpperCase()}`]([...parsed.values, parsed.alpha]);
  }
  tint(weight, w = defaultNumberParam(weight, 50)) {
    return new Values(`rgb(${mix('#fff', this.rgbString(), w).rgba})`, 'tint', w);
  }
  shade(weight, w = defaultNumberParam(weight, 50)) {
    return new Values(`rgb(${mix('#000', this.rgbString(), w).rgba})`, 'shade', w);
  }
  tints(weight, w = defaultNumberParam(weight, 10)) {
    return Array.from({ length: 100 / w }, (_, i) => this.tint((i + 1) * w));
  }
  shades(weight, w = defaultNumberParam(weight, 10)) {
    return Array.from({ length: 100 / w }, (_, i) => this.shade((i + 1) * w));
  }
  all(weight = 10) {
    return [...this.tints(weight).reverse(), Object.assign(this), ...this.shades(weight)];
  }
  hexString() {
    return rgb2hex_1(this.alpha >= 1 ? this.rgb : [...this.rgb, this.alpha]);
  }
  rgbString() {
    const channels = (this.alpha >= 1 ? this.rgb : [...this.rgb, this.alpha]).join(', ');
    return `${this.alpha >= 1 ? 'rgb' : 'rgba'}(${channels})`;
  }
  getBrightness() {
    return Math.round((this.rgb.reduce((a, b) => a + b) / (255 * 3)) * 100);
  }
  _setFromRGB([r, g, b, a]) {
    [this.rgb, this.alpha] = [[r, g, b], a];
    return this;
  }
  _setFromHSL([h, s, l, a]) {
    [this.rgb, this.alpha] = [hsl2rgb_1([h, s, l]).map(Math.round), a];
    return this;
  }
}
Values.VERSION = 'v2.1.1';

var Values$1 = Values;

const mixColor = color => {
  const colorValues = new Values$1(color);
  return {
    tint: step => colorValues.tint(step).hexString(),
    shade: step => colorValues.shade(step).hexString(),
    base: colorValues.hexString()
  };
};

const STEPS = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95];
const createColorScales = base => {
  const mixed = mixColor(base);
  return Object.assign(Object.assign({}, STEPS.reduce((acc, step) => Object.assign(Object.assign({}, acc), {
    [`lighten${step}`]: mixed.tint(step),
    [`darken${step}`]: mixed.shade(step)
  }), {})), {
    base: mixed.base
  });
};

const BASE_COLORS = {
  aliceBlue: '#ecf0ff',
  amaranthaRed: '#cb300a',
  antiFlashWhite: '#f1f2f3',
  apple: '#e3602a',
  bigStone: '#344348',
  black: '#000000',
  blue1: '#5a68e2',
  blue: '#1dbeee',
  blueOblivion: '#23438f',
  blazingBonfire: '#ffa234',
  cornflowerBlue: '#5d80f0',
  cumberlandFog: '#dadbde',
  currant: '#48000a',
  darkBlue: '#25006e',
  deepSaffron: '#ffa234',
  deepIntoTheJungle: '#004e48',
  emerald: '#5ace7d',
  flagstone: '#acacaf',
  frenchSky: '#8999ff',
  gentianFlower: '#355bfb',
  gold: '#ffd500',
  green: '#01b39c',
  grey: '#a3a6ac',
  grotesqueGreen: '#6af293',
  hitPink: '#ffad79',
  honeydew: '#f0fef4',
  indianDance: '#f89076',
  jordyBlue: '#92abfc',
  linen: '#fcebe7',
  maasstrichtBlue: '#001f23',
  mauve: '#c38cee',
  moussaka: '#6f2a17',
  mellowApricot: '#ffbe71',
  mintLeaf: '#01cbb0',
  nightBlue: '#353957',
  orangeBrown: '#ac5d00',
  pastelRed: '#f46363',
  pastelBlue: '#a1b5fc',
  paua: '#130066',
  peach: '#f8ac7d',
  pineGreen: '#017d6d',
  pink: '#fe56aa',
  policeBlue: '#2e456d',
  purple: '#be83cf',
  royalBlue: '#5a68e2',
  scarletGum: '#401960',
  seashell: '#fff6eb',
  silverChalice: '#abacaf',
  smalt: '#003580',
  sonicSilver: '#737479',
  ultramarineBlue: '#4568fb',
  vermilion: '#de350b',
  violet1: '#8505a2',
  violet: '#7622d7',
  vodka: '#b5c3fd',
  theatreGold: '#a56822',
  uniformGreen: '#4d4628',
  yellow: '#fadb14',
  windsorGrey: '#606065'
};
const colorScales = Object.entries(BASE_COLORS).reduce((acc, [key, value]) => Object.assign(Object.assign({}, acc), {
  [key]: createColorScales(value)
}), {});

const {
  blue,
  ultramarineBlue: ultramarineBlue$2,
  green,
  grey: grey$2,
  grotesqueGreen,
  deepSaffron: deepSaffron$2,
  pink,
  purple,
  vermilion: vermilion$2,
  smalt,
  violet: violet$1,
  yellow
} = colorScales;
const palette$b = {
  black: '#000000',
  white: '#ffffff',
  blue: blue.base,
  blueDark15: blue.darken15,
  blueDark30: blue.darken30,
  blueDark45: blue.darken45,
  blueDark60: blue.darken60,
  blueDark75: blue.darken75,
  blueDark90: blue.darken90,
  blueLight15: blue.lighten15,
  blueLight30: blue.lighten30,
  blueLight45: blue.lighten45,
  blueLight60: blue.lighten60,
  blueLight75: blue.lighten75,
  blueLight90: blue.lighten90,
  dodgerBlue: ultramarineBlue$2.base,
  dodgerBlueDark15: ultramarineBlue$2.darken15,
  dodgerBlueDark30: ultramarineBlue$2.darken30,
  dodgerBlueLight30: ultramarineBlue$2.lighten30,
  dodgerBlueLight45: ultramarineBlue$2.lighten45,
  dodgerBlueLight60: ultramarineBlue$2.lighten60,
  dodgerBlueLight75: ultramarineBlue$2.lighten75,
  dodgerBlueLight90: ultramarineBlue$2.lighten90,
  green: green.base,
  greenDark15: green.darken15,
  greenDark30: green.darken30,
  greenDark75: green.darken75,
  greenLight30: green.lighten30,
  greenLight75: green.lighten75,
  greenLight90: green.lighten90,
  grey: grey$2.base,
  greyDark15: grey$2.darken15,
  greyDark30: grey$2.darken30,
  greyDark45: grey$2.darken45,
  greyDark60: grey$2.darken60,
  greyDark75: grey$2.darken75,
  greyLight45: grey$2.lighten45,
  greyLight60: grey$2.lighten60,
  greyLight75: grey$2.lighten75,
  greyLight85: grey$2.lighten85,
  greyLight90: grey$2.lighten90,
  greyLight95: grey$2.lighten95,
  grotesqueGreen: grotesqueGreen.base,
  grotesqueGreenDark30: grotesqueGreen.darken30,
  grotesqueGreenDark45: grotesqueGreen.darken45,
  grotesqueGreenLight30: grotesqueGreen.lighten30,
  grotesqueGreenLight60: grotesqueGreen.lighten60,
  grotesqueGreenLight75: grotesqueGreen.lighten75,
  grotesqueGreenLight90: grotesqueGreen.lighten90,
  orange: deepSaffron$2.base,
  orangeDark15: deepSaffron$2.darken15,
  orangeDark30: deepSaffron$2.darken30,
  orangeDark75: deepSaffron$2.darken75,
  orangeLight30: deepSaffron$2.lighten30,
  orangeLight75: deepSaffron$2.lighten75,
  orangeLight90: deepSaffron$2.lighten90,
  pink: pink.base,
  pinkDark15: pink.darken15,
  pinkDark30: pink.darken30,
  pinkDark45: pink.darken45,
  pinkDark75: pink.darken75,
  pinkLight30: pink.lighten30,
  pinkLight45: pink.lighten45,
  pinkLight75: pink.lighten75,
  pinkLight90: pink.lighten90,
  purple: purple.base,
  purpleDark15: purple.darken15,
  purpleDark30: purple.darken30,
  purpleLight30: purple.lighten30,
  red: vermilion$2.base,
  redDark15: vermilion$2.darken15,
  redDark30: vermilion$2.darken30,
  redDark45: vermilion$2.darken45,
  redDark60: vermilion$2.darken60,
  redDark75: vermilion$2.darken75,
  redDark90: vermilion$2.darken90,
  redLight15: vermilion$2.lighten15,
  redLight30: vermilion$2.lighten30,
  redLight45: vermilion$2.lighten45,
  redLight60: vermilion$2.lighten60,
  redLight75: vermilion$2.lighten75,
  redLight90: vermilion$2.lighten90,
  smalt: smalt.base,
  smaltDark30: smalt.darken30,
  smaltDark75: smalt.darken75,
  smaltLight30: smalt.lighten30,
  smaltLight45: smalt.lighten45,
  smaltLight75: smalt.lighten75,
  smaltLight90: smalt.lighten90,
  violet: violet$1.base,
  violetDark15: violet$1.darken15,
  violetDark30: violet$1.darken30,
  violetDark45: violet$1.darken45,
  violetDark60: violet$1.darken60,
  violetDark75: violet$1.darken75,
  violetDark90: violet$1.darken90,
  violetLight15: violet$1.lighten15,
  violetLight30: violet$1.lighten30,
  violetLight45: violet$1.lighten45,
  violetLight60: violet$1.lighten60,
  violetLight75: violet$1.lighten75,
  violetLight90: violet$1.lighten90,
  yellow: yellow.base,
  yellowDark15: yellow.darken15,
  yellowDark30: yellow.darken30,
  yellowDark75: yellow.darken75,
  yellowLight30: yellow.lighten30,
  yellowLight45: yellow.lighten45,
  yellowLight60: yellow.lighten60,
  yellowLight75: yellow.lighten75,
  yellowLight90: yellow.lighten90
};

const {
  mauve: mauve$3,
  violet
} = colorScales;
const palette$a = Object.assign(Object.assign({}, palette$b), {
  mauve: mauve$3.base,
  mauveLight80: mauve$3.lighten80,
  violetDark50: violet.darken50
});

const {
  apple: apple$3,
  hitPink: hitPink$1,
  maasstrichtBlue: maasstrichtBlue$4
} = colorScales;
const palette$9 = Object.assign(Object.assign({}, palette$b), {
  apple: apple$3.base,
  appleDark20: apple$3.darken20,
  appleDark50: apple$3.darken50,
  appleLight90: apple$3.lighten90,
  hitPink: hitPink$1.base,
  hitPinkLight80: hitPink$1.lighten80,
  maasstrichtBlueLight30: maasstrichtBlue$4.lighten30
});

const {
  aliceBlue: aliceBlue$1,
  amaranthaRed,
  antiFlashWhite: antiFlashWhite$1,
  apple: apple$2,
  cumberlandFog,
  deepSaffron: deepSaffron$1,
  emerald: emerald$1,
  gentianFlower,
  grey: grey$1,
  honeydew: honeydew$1,
  linen: linen$1,
  maasstrichtBlue: maasstrichtBlue$3,
  mellowApricot: mellowApricot$1,
  orangeBrown,
  pastelRed: pastelRed$1,
  pineGreen: pineGreen$1,
  seashell: seashell$1,
  silverChalice: silverChalice$1,
  sonicSilver: sonicSilver$1,
  ultramarineBlue: ultramarineBlue$1,
  vermilion: vermilion$1,
  vodka: vodka$1,
  windsorGrey,
  black: black$1
} = colorScales;
const palette$8 = {
  black: black$1.base,
  white: '#ffffff',
  greyLight95: grey$1.lighten95,
  greyLight90: grey$1.lighten90,
  greyLight75: grey$1.lighten75,
  greyLight45: grey$1.lighten45,
  greyLight30: grey$1.lighten30,
  grey: grey$1.base,
  maasstrichtBlueLight90: maasstrichtBlue$3.lighten90,
  maasstrichtBlueLight80: maasstrichtBlue$3.lighten80,
  maasstrichtBlueLight50: maasstrichtBlue$3.lighten50,
  maasstrichtBlueLight30: maasstrichtBlue$3.lighten30,
  maasstrichtBlue: maasstrichtBlue$3.base,
  pastelRed: pastelRed$1.base,
  pastelRedLight20: pastelRed$1.lighten20,
  mellowApricot: mellowApricot$1.base,
  mellowApricotLight20: mellowApricot$1.lighten20,
  emerald: emerald$1.base,
  emeraldLight20: emerald$1.lighten20,
  emeraldDark20: emerald$1.darken20,
  vodka: vodka$1.base,
  vodkaLight20: vodka$1.lighten20,
  vermilion: vermilion$1.base,
  deepSaffron: deepSaffron$1.base,
  deepSaffronDark20: deepSaffron$1.darken20,
  pineGreen: pineGreen$1.base,
  ultramarineBlue: ultramarineBlue$1.base,
  sonicSilver: sonicSilver$1.base,
  linen: linen$1.base,
  seashell: seashell$1.base,
  honeydew: honeydew$1.base,
  aliceBlue: aliceBlue$1.base,
  antiFlashWhite: antiFlashWhite$1.base,
  apple: apple$2.base,
  silverChalice: silverChalice$1.base,
  silverChaliceLight20: silverChalice$1.lighten20,
  amaranthaRed: amaranthaRed.base,
  orangeBrown: orangeBrown.base,
  gentianFlower: gentianFlower.base,
  windsorGrey: windsorGrey.base,
  cumberlandFog: cumberlandFog.base
};

const {
  aliceBlue,
  antiFlashWhite,
  apple: apple$1,
  blazingBonfire,
  bigStone,
  flagstone,
  deepSaffron,
  deepIntoTheJungle,
  emerald,
  grey,
  honeydew,
  indianDance,
  linen,
  maasstrichtBlue: maasstrichtBlue$2,
  mellowApricot,
  moussaka,
  pastelRed,
  pineGreen,
  seashell,
  silverChalice,
  sonicSilver,
  ultramarineBlue,
  vermilion,
  vodka,
  theatreGold,
  uniformGreen,
  mintLeaf,
  blueOblivion,
  pastelBlue
} = colorScales;
const palette$7 = {
  black: '#000000',
  white: '#ffffff',
  greyLight95: grey.lighten95,
  greyLight90: grey.lighten90,
  greyLight75: grey.lighten75,
  greyLight45: grey.lighten45,
  greyLight30: grey.lighten30,
  grey: grey.base,
  greyDark20: grey.darken20,
  greyDark30: grey.darken30,
  maasstrichtBlueLight90: maasstrichtBlue$2.lighten90,
  maasstrichtBlueLight80: maasstrichtBlue$2.lighten80,
  maasstrichtBlueLight70: maasstrichtBlue$2.lighten70,
  maasstrichtBlueLight60: maasstrichtBlue$2.lighten60,
  maasstrichtBlueLight50: maasstrichtBlue$2.lighten50,
  maasstrichtBlueLight30: maasstrichtBlue$2.lighten30,
  maasstrichtBlueLight15: maasstrichtBlue$2.lighten15,
  maasstrichtBlueLight10: maasstrichtBlue$2.lighten10,
  maasstrichtBlue: maasstrichtBlue$2.base,
  pastelRed: pastelRed.base,
  pastelRedLight20: pastelRed.lighten20,
  mellowApricot: mellowApricot.base,
  mellowApricotLight20: mellowApricot.lighten20,
  moussaka: moussaka.base,
  emerald: emerald.base,
  emeraldLight20: emerald.lighten20,
  emeraldDark20: emerald.darken20,
  vodka: vodka.base,
  vodkaLight20: vodka.lighten20,
  vermilion: vermilion.base,
  vermilionLight20: vermilion.lighten20,
  vermilionDark10: vermilion.darken10,
  deepSaffron: deepSaffron.base,
  deepSaffronDark20: deepSaffron.darken20,
  indianDance: indianDance.base,
  theatreGold: theatreGold.base,
  theatreGoldLight20: theatreGold.lighten20,
  pineGreen: pineGreen.base,
  pineGreenLight20: pineGreen.lighten20,
  pineGreenDark10: pineGreen.darken10,
  ultramarineBlue: ultramarineBlue.base,
  ultramarineBlueLight20: ultramarineBlue.lighten20,
  ultramarineBlueDark10: ultramarineBlue.darken10,
  sonicSilver: sonicSilver.base,
  sonicSilverLight50: sonicSilver.lighten45,
  sonicSilverDark10: sonicSilver.darken10,
  linen: linen.base,
  seashell: seashell.base,
  honeydew: honeydew.base,
  aliceBlue: aliceBlue.base,
  antiFlashWhite: antiFlashWhite.base,
  apple: apple$1.base,
  silverChalice: silverChalice.base,
  silverChaliceLight20: silverChalice.lighten20,
  uniformGreen: uniformGreen.base,
  blazingBonfire: blazingBonfire.base,
  deepIntoTheJungle: deepIntoTheJungle.base,
  mintLeaf: mintLeaf.base,
  blueOblivion: blueOblivion.base,
  pastelBlue: pastelBlue.base,
  bigStone: bigStone.base,
  flagstone: flagstone.base
};

const {
  maasstrichtBlue: maasstrichtBlue$1
} = colorScales;
const palette$6 = {
  maasstrichtBlue: maasstrichtBlue$1.base,
  maasstrichtBlueLight5: maasstrichtBlue$1.lighten5,
  maasstrichtBlueLight10: maasstrichtBlue$1.lighten10,
  maasstrichtBlueLight15: maasstrichtBlue$1.lighten15,
  maasstrichtBlueLight20: maasstrichtBlue$1.lighten20,
  maasstrichtBlueLight25: maasstrichtBlue$1.lighten25,
  maasstrichtBlueLight30: maasstrichtBlue$1.lighten30,
  maasstrichtBlueLight35: maasstrichtBlue$1.lighten35,
  maasstrichtBlueLight40: maasstrichtBlue$1.lighten40
};

const {
  violet1: violet1$2,
  mauve: mauve$2
} = colorScales;
const palette$5 = Object.assign(Object.assign({}, palette$8), {
  violet: violet1$2.base,
  violetLight20: violet1$2.lighten20,
  violetLight30: violet1$2.lighten30,
  violetLight90: violet1$2.lighten90,
  violetDark20: violet1$2.darken20,
  mauve: mauve$2.base,
  mauveLight80: mauve$2.lighten80
});

const {
  apple,
  currant,
  hitPink
} = colorScales;
const palette$4 = Object.assign(Object.assign({}, palette$8), {
  apple: apple.base,
  appleLight10: apple.lighten10,
  appleDark20: apple.darken20,
  hitPink: hitPink.base,
  hitPinkLight30: hitPink.lighten30,
  hitPinkLight50: hitPink.lighten50,
  hitPinkLight80: hitPink.lighten80,
  hitPinkLight90: hitPink.lighten90,
  currant: currant.base
});

const {
  scarletGum: scarletGum$1,
  violet1: violet1$1,
  mauve: mauve$1
} = colorScales;
const palette$3 = Object.assign(Object.assign({}, palette$8), {
  scarletGumLight20: scarletGum$1.lighten20,
  scarletGumLight30: scarletGum$1.lighten30,
  scarletGumLight50: scarletGum$1.lighten50,
  scarletGumLight80: scarletGum$1.lighten80,
  scarletGumLight90: scarletGum$1.lighten90,
  scarletGum: scarletGum$1.base,
  scarletGumDark20: scarletGum$1.darken20,
  violetLight30: violet1$1.lighten30,
  violetLight50: violet1$1.lighten50,
  violetLight80: violet1$1.lighten80,
  violetLight90: violet1$1.lighten90,
  violet: violet1$1.base,
  mauve: mauve$1.base
});

const {
  scarletGum,
  violet1,
  mauve,
  maasstrichtBlue
} = colorScales;
const palette$2 = Object.assign(Object.assign({}, palette$8), {
  scarletGumLight20: scarletGum.lighten20,
  scarletGumLight30: scarletGum.lighten30,
  scarletGumLight50: scarletGum.lighten50,
  scarletGumLight80: scarletGum.lighten80,
  scarletGumLight90: scarletGum.lighten90,
  scarletGum: scarletGum.base,
  scarletGumDark65: scarletGum.darken65,
  violetLight30: violet1.lighten30,
  violetLight50: violet1.lighten50,
  violetLight80: violet1.lighten80,
  violetLight90: violet1.lighten90,
  violet: violet1.base,
  mauve: mauve.base,
  mauveLight15: mauve.lighten15,
  mauveLight30: mauve.lighten30,
  mauveLight40: mauve.lighten40,
  mauveDark65: mauve.darken65,
  maasstrichtBlueLight10: maasstrichtBlue.lighten10,
  maasstrichtBlueDark20: maasstrichtBlue.darken20
});

const {
  royalBlue,
  frenchSky
} = colorScales;
const palette$1 = Object.assign(Object.assign({}, palette$8), {
  royalBlue: royalBlue.base,
  royalBlueLight10: royalBlue.lighten10,
  royalBlueLight80: royalBlue.lighten80,
  royalBlueLight90: royalBlue.lighten90,
  royalBlueDark20: royalBlue.darken20,
  royalBlueDark30: royalBlue.darken30,
  frenchSky: frenchSky.base,
  frenchSkyLight70: frenchSky.lighten70,
  frenchSkyLight80: frenchSky.lighten80
});

const {
  gold,
  policeBlue,
  black
} = colorScales;
const palette = Object.assign(Object.assign({}, palette$8), {
  blackLight30: black.lighten30,
  blackLight90: black.lighten90,
  goldLight20: gold.lighten20,
  goldLight50: gold.lighten50,
  goldLight70: gold.lighten70,
  goldLight80: gold.lighten80,
  goldLight90: gold.lighten90,
  gold: gold.base,
  policeBlue: policeBlue.base,
  policeBlueLight20: policeBlue.lighten20,
  policeBlueLight25: policeBlue.lighten25,
  policeBlueLight90: policeBlue.lighten90
});

export { colorScales, palette$b as default, palette$7 as defaultMobileDarkPalette, palette$8 as defaultMobilePalette, palette$b as defaultWebPalette, palette$5 as eBensPalette, palette$a as eBensWebPalette, palette$4 as jobsPalette, palette$9 as jobsWebPalette, mixColor, palette$6 as mobileVisualisationPalette, palette$2 as swagDarkPalette, palette$3 as swagPalette, palette$1 as walletPalette, palette as workPalette };
